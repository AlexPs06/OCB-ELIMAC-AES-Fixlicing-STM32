
OCBRA2-TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bf4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08007dc4  08007dc4  00017dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed4  08007ed4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007ed4  08007ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007edc  08007edc  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007edc  08007edc  00017edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ee0  08007ee0  00017ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08007ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  08007f7c  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  0800801c  00020138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00003c74  200001d8  080080bc  000201d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20003e4c  080080bc  00023e4c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 15 .debug_info   00012f5f  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000290d  00000000  00000000  000331aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000e50  00000000  00000000  00035ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000b03  00000000  00000000  00036908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00027cc9  00000000  00000000  0003740b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001230b  00000000  00000000  0005f0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f1b04  00000000  00000000  000713df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000406c  00000000  00000000  00162ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  00166f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007dac 	.word	0x08007dac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08007dac 	.word	0x08007dac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <OCB>:



void OCB(unsigned char* plaintext, unsigned char* ciphertext, unsigned char* nonce, 
        unsigned char* asociated_data, unsigned int plaintext_size, unsigned int asociated_data_size,
        unsigned char* key, unsigned char* tag){
 80005ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005b0:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	f507 6482 	add.w	r4, r7, #1040	; 0x410
 80005ba:	f5a4 7475 	sub.w	r4, r4, #980	; 0x3d4
 80005be:	6020      	str	r0, [r4, #0]
 80005c0:	f507 6082 	add.w	r0, r7, #1040	; 0x410
 80005c4:	f5a0 7076 	sub.w	r0, r0, #984	; 0x3d8
 80005c8:	6001      	str	r1, [r0, #0]
 80005ca:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80005ce:	f5a1 7177 	sub.w	r1, r1, #988	; 0x3dc
 80005d2:	600a      	str	r2, [r1, #0]
 80005d4:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80005d8:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	466b      	mov	r3, sp
 80005e0:	607b      	str	r3, [r7, #4]
        



    if (asociated_data_size!=0)
 80005e2:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d012      	beq.n	8000610 <OCB+0x64>
    {
        PMAC(nonce,asociated_data,asociated_data_size,key,tag);
 80005ea:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80005ee:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 80005f2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80005f6:	f5a3 7077 	sub.w	r0, r3, #988	; 0x3dc
 80005fa:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8000604:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 8000608:	6809      	ldr	r1, [r1, #0]
 800060a:	6800      	ldr	r0, [r0, #0]
 800060c:	f000 fa64 	bl	8000ad8 <PMAC>

    }
    

    uint32_t size_ptext = (plaintext_size/2) + 16;
 8000610:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8000614:	085b      	lsrs	r3, r3, #1
 8000616:	3310      	adds	r3, #16
 8000618:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
    uint32_t size = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

    if (plaintext_size%16 == 0 ){
 8000622:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	2b00      	cmp	r3, #0
 800062c:	d105      	bne.n	800063a <OCB+0x8e>
        size = plaintext_size/16;
 800062e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8000632:	091b      	lsrs	r3, r3, #4
 8000634:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8000638:	e005      	b.n	8000646 <OCB+0x9a>
    }else{
        size = plaintext_size/16+1;
 800063a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800063e:	091b      	lsrs	r3, r3, #4
 8000640:	3301      	adds	r3, #1
 8000642:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
    }

    unsigned char ptext0[size_ptext];
 8000646:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 800064a:	460b      	mov	r3, r1
 800064c:	3b01      	subs	r3, #1
 800064e:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8000652:	2300      	movs	r3, #0
 8000654:	4688      	mov	r8, r1
 8000656:	4699      	mov	r9, r3
 8000658:	f04f 0200 	mov.w	r2, #0
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000664:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000668:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800066c:	2300      	movs	r3, #0
 800066e:	468a      	mov	sl, r1
 8000670:	469b      	mov	fp, r3
 8000672:	f04f 0200 	mov.w	r2, #0
 8000676:	f04f 0300 	mov.w	r3, #0
 800067a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800067e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000682:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000686:	1dcb      	adds	r3, r1, #7
 8000688:	08db      	lsrs	r3, r3, #3
 800068a:	00db      	lsls	r3, r3, #3
 800068c:	ebad 0d03 	sub.w	sp, sp, r3
 8000690:	ab02      	add	r3, sp, #8
 8000692:	3300      	adds	r3, #0
 8000694:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
    unsigned char ptext1[size_ptext];
 8000698:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 800069c:	460b      	mov	r3, r1
 800069e:	3b01      	subs	r3, #1
 80006a0:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 80006a4:	2300      	movs	r3, #0
 80006a6:	460d      	mov	r5, r1
 80006a8:	461e      	mov	r6, r3
 80006aa:	f04f 0200 	mov.w	r2, #0
 80006ae:	f04f 0300 	mov.w	r3, #0
 80006b2:	00f3      	lsls	r3, r6, #3
 80006b4:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80006b8:	00ea      	lsls	r2, r5, #3
 80006ba:	2300      	movs	r3, #0
 80006bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006c0:	f04f 0200 	mov.w	r2, #0
 80006c4:	f04f 0300 	mov.w	r3, #0
 80006c8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80006cc:	4628      	mov	r0, r5
 80006ce:	00c3      	lsls	r3, r0, #3
 80006d0:	4620      	mov	r0, r4
 80006d2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80006d6:	4620      	mov	r0, r4
 80006d8:	00c2      	lsls	r2, r0, #3
 80006da:	1dcb      	adds	r3, r1, #7
 80006dc:	08db      	lsrs	r3, r3, #3
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	ebad 0d03 	sub.w	sp, sp, r3
 80006e4:	ab02      	add	r3, sp, #8
 80006e6:	3300      	adds	r3, #0
 80006e8:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0

    unsigned char ctext0[size_ptext];
 80006ec:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 80006f0:	460b      	mov	r3, r1
 80006f2:	3b01      	subs	r3, #1
 80006f4:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80006f8:	2300      	movs	r3, #0
 80006fa:	6239      	str	r1, [r7, #32]
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
 80006fe:	f04f 0200 	mov.w	r2, #0
 8000702:	f04f 0300 	mov.w	r3, #0
 8000706:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800070a:	4628      	mov	r0, r5
 800070c:	00c3      	lsls	r3, r0, #3
 800070e:	4620      	mov	r0, r4
 8000710:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000714:	4620      	mov	r0, r4
 8000716:	00c2      	lsls	r2, r0, #3
 8000718:	2300      	movs	r3, #0
 800071a:	61b9      	str	r1, [r7, #24]
 800071c:	61fb      	str	r3, [r7, #28]
 800071e:	f04f 0200 	mov.w	r2, #0
 8000722:	f04f 0300 	mov.w	r3, #0
 8000726:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800072a:	4628      	mov	r0, r5
 800072c:	00c3      	lsls	r3, r0, #3
 800072e:	4620      	mov	r0, r4
 8000730:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000734:	4620      	mov	r0, r4
 8000736:	00c2      	lsls	r2, r0, #3
 8000738:	1dcb      	adds	r3, r1, #7
 800073a:	08db      	lsrs	r3, r3, #3
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	ebad 0d03 	sub.w	sp, sp, r3
 8000742:	ab02      	add	r3, sp, #8
 8000744:	3300      	adds	r3, #0
 8000746:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
    unsigned char ctext1[size_ptext];
 800074a:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 800074e:	460b      	mov	r3, r1
 8000750:	3b01      	subs	r3, #1
 8000752:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8000756:	2300      	movs	r3, #0
 8000758:	6139      	str	r1, [r7, #16]
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	f04f 0200 	mov.w	r2, #0
 8000760:	f04f 0300 	mov.w	r3, #0
 8000764:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000768:	4628      	mov	r0, r5
 800076a:	00c3      	lsls	r3, r0, #3
 800076c:	4620      	mov	r0, r4
 800076e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000772:	4620      	mov	r0, r4
 8000774:	00c2      	lsls	r2, r0, #3
 8000776:	2300      	movs	r3, #0
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	f04f 0200 	mov.w	r2, #0
 8000780:	f04f 0300 	mov.w	r3, #0
 8000784:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000788:	4628      	mov	r0, r5
 800078a:	00c3      	lsls	r3, r0, #3
 800078c:	4620      	mov	r0, r4
 800078e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000792:	4620      	mov	r0, r4
 8000794:	00c2      	lsls	r2, r0, #3
 8000796:	1dcb      	adds	r3, r1, #7
 8000798:	08db      	lsrs	r3, r3, #3
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	ebad 0d03 	sub.w	sp, sp, r3
 80007a0:	ab02      	add	r3, sp, #8
 80007a2:	3300      	adds	r3, #0
 80007a4:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
    for (size_t i = 0; i < size_ptext; i++){
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80007ae:	e020      	b.n	80007f2 <OCB+0x246>
        ptext0[i]=0;
 80007b0:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 80007b4:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80007b8:	4413      	add	r3, r2
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
        ptext1[i]=0;
 80007be:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 80007c2:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80007c6:	4413      	add	r3, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
        ctext0[i]=0;
 80007cc:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80007d0:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80007d4:	4413      	add	r3, r2
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
        ctext1[i]=0;
 80007da:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 80007de:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80007e2:	4413      	add	r3, r2
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < size_ptext; i++){
 80007e8:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80007ec:	3301      	adds	r3, #1
 80007ee:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80007f2:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80007f6:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d3d8      	bcc.n	80007b0 <OCB+0x204>
    }
    
    unsigned char key0[key_size];
    unsigned char key1[key_size];
    
    unsigned char key_2AES[key_size] = {0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3};
 80007fe:	4bb2      	ldr	r3, [pc, #712]	; (8000ac8 <OCB+0x51c>)
 8000800:	f507 746c 	add.w	r4, r7, #944	; 0x3b0
 8000804:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000806:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char N_0_t[16];
    unsigned char N_1_t[16];

    unsigned char c_N_0[16];
    unsigned char c_N_1[16];
    unsigned char checksum[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 800080a:	4bb0      	ldr	r3, [pc, #704]	; (8000acc <OCB+0x520>)
 800080c:	f507 7450 	add.w	r4, r7, #832	; 0x340
 8000810:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000812:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char S[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8000816:	4bad      	ldr	r3, [pc, #692]	; (8000acc <OCB+0x520>)
 8000818:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800081c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800081e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned int add_nonce_0[4] = {0,0,0,0};
 8000822:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
    unsigned int add_nonce_1[4] = {1,1,1,1};
 8000830:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000834:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000838:	4aa5      	ldr	r2, [pc, #660]	; (8000ad0 <OCB+0x524>)
 800083a:	461c      	mov	r4, r3
 800083c:	4613      	mov	r3, r2
 800083e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned int add_nonce_2[4] = {2,2,2,2};
 8000844:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000848:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800084c:	4aa1      	ldr	r2, [pc, #644]	; (8000ad4 <OCB+0x528>)
 800084e:	461c      	mov	r4, r3
 8000850:	4613      	mov	r3, r2
 8000852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000854:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    divide_plaintext(plaintext, ptext0,  ptext1, plaintext_size);
 8000858:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800085c:	f5a3 7075 	sub.w	r0, r3, #980	; 0x3d4
 8000860:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8000864:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8000868:	f8d7 13f8 	ldr.w	r1, [r7, #1016]	; 0x3f8
 800086c:	6800      	ldr	r0, [r0, #0]
 800086e:	f000 fd48 	bl	8001302 <divide_plaintext>
    divide_key(key, key0, key1);
 8000872:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8000876:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800087a:	4619      	mov	r1, r3
 800087c:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 8000880:	f000 fdcf 	bl	8001422 <divide_key>

    //key schedule
	uint32_t rkeys_ffs[88];
    uint32_t two_AES_keys_ffs[88];

	aes128_keyschedule_ffs(rkeys_ffs, key0, key1);
 8000884:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8000888:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 800088c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000890:	4618      	mov	r0, r3
 8000892:	f002 fd0f 	bl	80032b4 <aes128_keyschedule_ffs>
	aes128_keyschedule_ffs(two_AES_keys_ffs, key_2AES, key_2AES);
 8000896:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800089a:	f507 716c 	add.w	r1, r7, #944	; 0x3b0
 800089e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 fd06 	bl	80032b4 <aes128_keyschedule_ffs>
    //aes128_2rounds_keyschedule_ffs(two_AES_keys_ffs, key_2AES, key_2AES);

	//generate the N from nonce using 10 aes rounds
    aes128_encrypt_ffs(N_0, N_1, nonce, nonce, rkeys_ffs);
 80008a8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80008ac:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80008b0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80008b4:	f5a2 7277 	sub.w	r2, r2, #988	; 0x3dc
 80008b8:	f507 7464 	add.w	r4, r7, #912	; 0x390
 80008bc:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 80008c0:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 80008c4:	9100      	str	r1, [sp, #0]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6812      	ldr	r2, [r2, #0]
 80008ca:	4621      	mov	r1, r4
 80008cc:	f002 fa29 	bl	8002d22 <aes128_encrypt_ffs>

    for (size_t i = 0; i < size/2; i++){
 80008d0:	2300      	movs	r3, #0
 80008d2:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80008d6:	e09d      	b.n	8000a14 <OCB+0x468>

        add_nonce(add_nonce_0, (unsigned int *)N_0,(unsigned int *)N_0_t, 4);
 80008d8:	f507 7260 	add.w	r2, r7, #896	; 0x380
 80008dc:	f507 7168 	add.w	r1, r7, #928	; 0x3a0
 80008e0:	f507 7048 	add.w	r0, r7, #800	; 0x320
 80008e4:	2304      	movs	r3, #4
 80008e6:	f000 fcbf 	bl	8001268 <add_nonce>
        add_nonce(add_nonce_1, (unsigned int *)N_1,(unsigned int *)N_1_t, 4);
 80008ea:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80008ee:	f507 7164 	add.w	r1, r7, #912	; 0x390
 80008f2:	f507 7044 	add.w	r0, r7, #784	; 0x310
 80008f6:	2304      	movs	r3, #4
 80008f8:	f000 fcb6 	bl	8001268 <add_nonce>

        two_Rounds_aes128_encrypt_ffs(c_N_0,  c_N_1, N_0_t,  N_1_t, two_AES_keys_ffs);
 80008fc:	f507 745c 	add.w	r4, r7, #880	; 0x370
 8000900:	f507 7260 	add.w	r2, r7, #896	; 0x380
 8000904:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8000908:	f507 7058 	add.w	r0, r7, #864	; 0x360
 800090c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	4623      	mov	r3, r4
 8000914:	f002 fae2 	bl	8002edc <two_Rounds_aes128_encrypt_ffs>

        xor_nonce( checksum, ptext0 + (i*16), 16);
 8000918:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800091c:	011b      	lsls	r3, r3, #4
 800091e:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8000922:	18d1      	adds	r1, r2, r3
 8000924:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000928:	2210      	movs	r2, #16
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fcc4 	bl	80012b8 <xor_nonce>
        xor_nonce( checksum, ptext1 + (i*16), 16);
 8000930:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000934:	011b      	lsls	r3, r3, #4
 8000936:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 800093a:	18d1      	adds	r1, r2, r3
 800093c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000940:	2210      	movs	r2, #16
 8000942:	4618      	mov	r0, r3
 8000944:	f000 fcb8 	bl	80012b8 <xor_nonce>

        xor_nonce( ptext0 +  (i*16), c_N_0, 16);
 8000948:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800094c:	011b      	lsls	r3, r3, #4
 800094e:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8000952:	4413      	add	r3, r2
 8000954:	f507 7158 	add.w	r1, r7, #864	; 0x360
 8000958:	2210      	movs	r2, #16
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fcac 	bl	80012b8 <xor_nonce>
        xor_nonce( ptext1 + (i*16), c_N_1, 16);
 8000960:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000964:	011b      	lsls	r3, r3, #4
 8000966:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 800096a:	4413      	add	r3, r2
 800096c:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8000970:	2210      	movs	r2, #16
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fca0 	bl	80012b8 <xor_nonce>




	    aes128_encrypt_ffs(ctext0+ (i*16), ctext1+ (i*16), ptext0+ ((i)*16), ptext1 + (i*16), rkeys_ffs);
 8000978:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8000982:	18d0      	adds	r0, r2, r3
 8000984:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 800098e:	18d1      	adds	r1, r2, r3
 8000990:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000994:	011b      	lsls	r3, r3, #4
 8000996:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 800099a:	18d4      	adds	r4, r2, r3
 800099c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80009a0:	011b      	lsls	r3, r3, #4
 80009a2:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 80009a6:	441a      	add	r2, r3
 80009a8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	4613      	mov	r3, r2
 80009b0:	4622      	mov	r2, r4
 80009b2:	f002 f9b6 	bl	8002d22 <aes128_encrypt_ffs>
        xor_nonce( ctext0 + (i*16), c_N_0, 16);
 80009b6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80009ba:	011b      	lsls	r3, r3, #4
 80009bc:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80009c0:	4413      	add	r3, r2
 80009c2:	f507 7158 	add.w	r1, r7, #864	; 0x360
 80009c6:	2210      	movs	r2, #16
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 fc75 	bl	80012b8 <xor_nonce>
        xor_nonce( ctext1 + (i*16), c_N_1, 16);
 80009ce:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80009d2:	011b      	lsls	r3, r3, #4
 80009d4:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 80009d8:	4413      	add	r3, r2
 80009da:	f507 7154 	add.w	r1, r7, #848	; 0x350
 80009de:	2210      	movs	r2, #16
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fc69 	bl	80012b8 <xor_nonce>
        
        // print_array(ctext0+ (i*16),16);
        // print_array(ctext1+ (i*16),16);

        add_nonce(add_nonce_2, add_nonce_0,add_nonce_0, 4);
 80009e6:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80009ea:	f507 7148 	add.w	r1, r7, #800	; 0x320
 80009ee:	f507 7040 	add.w	r0, r7, #768	; 0x300
 80009f2:	2304      	movs	r3, #4
 80009f4:	f000 fc38 	bl	8001268 <add_nonce>
        add_nonce(add_nonce_2, add_nonce_1,add_nonce_1, 4);
 80009f8:	f507 7244 	add.w	r2, r7, #784	; 0x310
 80009fc:	f507 7144 	add.w	r1, r7, #784	; 0x310
 8000a00:	f507 7040 	add.w	r0, r7, #768	; 0x300
 8000a04:	2304      	movs	r3, #4
 8000a06:	f000 fc2f 	bl	8001268 <add_nonce>
    for (size_t i = 0; i < size/2; i++){
 8000a0a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000a0e:	3301      	adds	r3, #1
 8000a10:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8000a14:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	f4ff af5a 	bcc.w	80008d8 <OCB+0x32c>
        
    }
    
    union_ciphertext(ciphertext,ctext0,ctext1,plaintext_size);
 8000a24:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000a28:	f5a3 7076 	sub.w	r0, r3, #984	; 0x3d8
 8000a2c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8000a30:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8000a34:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	; 0x3e8
 8000a38:	6800      	ldr	r0, [r0, #0]
 8000a3a:	f000 fcaa 	bl	8001392 <union_ciphertext>

    if (1)//condicion de bloques completos
    {
        add_nonce(add_nonce_1, (unsigned int *)N_0,(unsigned int *)N_0_t, 4);
 8000a3e:	f507 7260 	add.w	r2, r7, #896	; 0x380
 8000a42:	f507 7168 	add.w	r1, r7, #928	; 0x3a0
 8000a46:	f507 7044 	add.w	r0, r7, #784	; 0x310
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	f000 fc0c 	bl	8001268 <add_nonce>
        two_Rounds_aes128_encrypt_ffs(c_N_0,  c_N_1, N_0_t,  N_0_t, two_AES_keys_ffs);
 8000a50:	f507 7460 	add.w	r4, r7, #896	; 0x380
 8000a54:	f507 7260 	add.w	r2, r7, #896	; 0x380
 8000a58:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8000a5c:	f507 7058 	add.w	r0, r7, #864	; 0x360
 8000a60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	4623      	mov	r3, r4
 8000a68:	f002 fa38 	bl	8002edc <two_Rounds_aes128_encrypt_ffs>
        xor_nonce( checksum, c_N_0, 16);
 8000a6c:	f507 7158 	add.w	r1, r7, #864	; 0x360
 8000a70:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000a74:	2210      	movs	r2, #16
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 fc1e 	bl	80012b8 <xor_nonce>
	    aes128_encrypt_ffs(checksum, checksum, checksum, checksum, rkeys_ffs);
 8000a7c:	f507 7450 	add.w	r4, r7, #832	; 0x340
 8000a80:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8000a84:	f507 7150 	add.w	r1, r7, #832	; 0x340
 8000a88:	f507 7050 	add.w	r0, r7, #832	; 0x340
 8000a8c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	4623      	mov	r3, r4
 8000a94:	f002 f945 	bl	8002d22 <aes128_encrypt_ffs>
        xor_nonce( checksum, S, 16);
 8000a98:	f507 714c 	add.w	r1, r7, #816	; 0x330
 8000a9c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000aa0:	2210      	movs	r2, #16
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fc08 	bl	80012b8 <xor_nonce>
        xor_nonce( tag, checksum, 16);
 8000aa8:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8000aac:	2210      	movs	r2, #16
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 8000ab4:	f000 fc00 	bl	80012b8 <xor_nonce>
 8000ab8:	f8d7 d004 	ldr.w	sp, [r7, #4]
    }



}
 8000abc:	bf00      	nop
 8000abe:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ac8:	08007dc4 	.word	0x08007dc4
 8000acc:	08007dd4 	.word	0x08007dd4
 8000ad0:	08007de4 	.word	0x08007de4
 8000ad4:	08007df4 	.word	0x08007df4

08000ad8 <PMAC>:

void PMAC( unsigned char* nonce, unsigned char* asociated_data, unsigned int asociated_data_size,unsigned char* key, unsigned char* tag){
 8000ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000adc:	f5ad 7d69 	sub.w	sp, sp, #932	; 0x3a4
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	f507 7666 	add.w	r6, r7, #920	; 0x398
 8000ae6:	f5a6 7661 	sub.w	r6, r6, #900	; 0x384
 8000aea:	6030      	str	r0, [r6, #0]
 8000aec:	f507 7066 	add.w	r0, r7, #920	; 0x398
 8000af0:	f5a0 7062 	sub.w	r0, r0, #904	; 0x388
 8000af4:	6001      	str	r1, [r0, #0]
 8000af6:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8000afa:	f5a1 7163 	sub.w	r1, r1, #908	; 0x38c
 8000afe:	600a      	str	r2, [r1, #0]
 8000b00:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8000b04:	f5a2 7264 	sub.w	r2, r2, #912	; 0x390
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	466b      	mov	r3, sp
 8000b0c:	461e      	mov	r6, r3




    unsigned char ptext0[asociated_data_size];
 8000b0e:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8000b12:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8000b16:	6819      	ldr	r1, [r3, #0]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8000b20:	2300      	movs	r3, #0
 8000b22:	6039      	str	r1, [r7, #0]
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	f04f 0200 	mov.w	r2, #0
 8000b2a:	f04f 0300 	mov.w	r3, #0
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	00c3      	lsls	r3, r0, #3
 8000b32:	6838      	ldr	r0, [r7, #0]
 8000b34:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b38:	6838      	ldr	r0, [r7, #0]
 8000b3a:	00c2      	lsls	r2, r0, #3
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	468a      	mov	sl, r1
 8000b40:	469b      	mov	fp, r3
 8000b42:	f04f 0200 	mov.w	r2, #0
 8000b46:	f04f 0300 	mov.w	r3, #0
 8000b4a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000b4e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000b52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000b56:	1dcb      	adds	r3, r1, #7
 8000b58:	08db      	lsrs	r3, r3, #3
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	ebad 0d03 	sub.w	sp, sp, r3
 8000b60:	ab02      	add	r3, sp, #8
 8000b62:	3300      	adds	r3, #0
 8000b64:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
    unsigned char ptext1[asociated_data_size];
 8000b68:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8000b6c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8000b70:	6819      	ldr	r1, [r3, #0]
 8000b72:	460b      	mov	r3, r1
 8000b74:	3b01      	subs	r3, #1
 8000b76:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	4688      	mov	r8, r1
 8000b7e:	4699      	mov	r9, r3
 8000b80:	f04f 0200 	mov.w	r2, #0
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b94:	2300      	movs	r3, #0
 8000b96:	460c      	mov	r4, r1
 8000b98:	461d      	mov	r5, r3
 8000b9a:	f04f 0200 	mov.w	r2, #0
 8000b9e:	f04f 0300 	mov.w	r3, #0
 8000ba2:	00eb      	lsls	r3, r5, #3
 8000ba4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ba8:	00e2      	lsls	r2, r4, #3
 8000baa:	1dcb      	adds	r3, r1, #7
 8000bac:	08db      	lsrs	r3, r3, #3
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	ebad 0d03 	sub.w	sp, sp, r3
 8000bb4:	ab02      	add	r3, sp, #8
 8000bb6:	3300      	adds	r3, #0
 8000bb8:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380


    for (size_t i = 0; i < asociated_data_size; i++){
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8000bc2:	e012      	b.n	8000bea <PMAC+0x112>
        ptext0[i]=0;
 8000bc4:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8000bc8:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8000bcc:	4413      	add	r3, r2
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
        ptext1[i]=0;
 8000bd2:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8000bd6:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8000bda:	4413      	add	r3, r2
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < asociated_data_size; i++){
 8000be0:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8000be4:	3301      	adds	r3, #1
 8000be6:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8000bea:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8000bee:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8000bf2:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d3e3      	bcc.n	8000bc4 <PMAC+0xec>

    }
    
    unsigned char key_2AES[key_size] = {0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3};
 8000bfc:	4b8b      	ldr	r3, [pc, #556]	; (8000e2c <PMAC+0x354>)
 8000bfe:	f507 745b 	add.w	r4, r7, #876	; 0x36c
 8000c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned char N_0[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000c08:	4b89      	ldr	r3, [pc, #548]	; (8000e30 <PMAC+0x358>)
 8000c0a:	f507 7457 	add.w	r4, r7, #860	; 0x35c
 8000c0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char N_1[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000c14:	4b86      	ldr	r3, [pc, #536]	; (8000e30 <PMAC+0x358>)
 8000c16:	f507 7453 	add.w	r4, r7, #844	; 0x34c
 8000c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned char N_0_t[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000c20:	4b83      	ldr	r3, [pc, #524]	; (8000e30 <PMAC+0x358>)
 8000c22:	f507 744f 	add.w	r4, r7, #828	; 0x33c
 8000c26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char N_1_t[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000c2c:	4b80      	ldr	r3, [pc, #512]	; (8000e30 <PMAC+0x358>)
 8000c2e:	f507 744b 	add.w	r4, r7, #812	; 0x32c
 8000c32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned char c_N_0[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000c38:	4b7d      	ldr	r3, [pc, #500]	; (8000e30 <PMAC+0x358>)
 8000c3a:	f507 7447 	add.w	r4, r7, #796	; 0x31c
 8000c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char c_N_1[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000c44:	4b7a      	ldr	r3, [pc, #488]	; (8000e30 <PMAC+0x358>)
 8000c46:	f507 7443 	add.w	r4, r7, #780	; 0x30c
 8000c4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    //unsigned char checksum[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    unsigned int add_nonce_0[4] = {0,0,0,0};
 8000c50:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
    unsigned int add_nonce_1[4] = {1,1,1,1};
 8000c5e:	4b75      	ldr	r3, [pc, #468]	; (8000e34 <PMAC+0x35c>)
 8000c60:	f507 743b 	add.w	r4, r7, #748	; 0x2ec
 8000c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned int add_nonce_2[4] = {2,2,2,2};
 8000c6a:	4b73      	ldr	r3, [pc, #460]	; (8000e38 <PMAC+0x360>)
 8000c6c:	f507 7437 	add.w	r4, r7, #732	; 0x2dc
 8000c70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    divide_plaintext(asociated_data, ptext0,  ptext1, asociated_data_size);
 8000c76:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8000c7a:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8000c7e:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8000c82:	f5a2 7062 	sub.w	r0, r2, #904	; 0x388
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8000c8c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8000c90:	6800      	ldr	r0, [r0, #0]
 8000c92:	f000 fb36 	bl	8001302 <divide_plaintext>

    //key schedule
	uint32_t rkeys_ffs[88];
    uint32_t two_AES_keys_ffs[88];

	aes128_keyschedule_ffs(rkeys_ffs, key, key);
 8000c96:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8000c9a:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8000c9e:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8000ca2:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8000ca6:	f507 70be 	add.w	r0, r7, #380	; 0x17c
 8000caa:	6812      	ldr	r2, [r2, #0]
 8000cac:	6819      	ldr	r1, [r3, #0]
 8000cae:	f002 fb01 	bl	80032b4 <aes128_keyschedule_ffs>
	aes128_keyschedule_ffs(two_AES_keys_ffs, key_2AES, key_2AES);
 8000cb2:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8000cb6:	f507 715b 	add.w	r1, r7, #876	; 0x36c
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f002 faf8 	bl	80032b4 <aes128_keyschedule_ffs>
    //aes128_2rounds_keyschedule_ffs(two_AES_keys_ffs, key_2AES, key_2AES);

	//generate the N from nonce using 10 aes rounds
    aes128_encrypt_ffs(N_0, N_1, nonce, nonce, rkeys_ffs);
 8000cc4:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8000cc8:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8000ccc:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8000cd0:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 8000cd4:	f507 7453 	add.w	r4, r7, #844	; 0x34c
 8000cd8:	f507 7057 	add.w	r0, r7, #860	; 0x35c
 8000cdc:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8000ce0:	9100      	str	r1, [sp, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6812      	ldr	r2, [r2, #0]
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	f002 f81b 	bl	8002d22 <aes128_encrypt_ffs>

    int block_size = asociated_data_size/32;
 8000cec:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8000cf0:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c

    for (size_t i = 0; i < block_size; i++){
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 8000d02:	e085      	b.n	8000e10 <PMAC+0x338>

        add_nonce(add_nonce_0, (unsigned int *)N_0,(unsigned int *)N_0_t, 4);
 8000d04:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8000d08:	f507 7157 	add.w	r1, r7, #860	; 0x35c
 8000d0c:	f507 703f 	add.w	r0, r7, #764	; 0x2fc
 8000d10:	2304      	movs	r3, #4
 8000d12:	f000 faa9 	bl	8001268 <add_nonce>
        add_nonce(add_nonce_1, (unsigned int *)N_1,(unsigned int *)N_1_t, 4);
 8000d16:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 8000d1a:	f507 7153 	add.w	r1, r7, #844	; 0x34c
 8000d1e:	f507 703b 	add.w	r0, r7, #748	; 0x2ec
 8000d22:	2304      	movs	r3, #4
 8000d24:	f000 faa0 	bl	8001268 <add_nonce>

        two_Rounds_aes128_encrypt_ffs(c_N_0,  c_N_1, N_0_t,  N_1_t, two_AES_keys_ffs);
 8000d28:	f507 744b 	add.w	r4, r7, #812	; 0x32c
 8000d2c:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8000d30:	f507 7143 	add.w	r1, r7, #780	; 0x30c
 8000d34:	f507 7047 	add.w	r0, r7, #796	; 0x31c
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	4623      	mov	r3, r4
 8000d40:	f002 f8cc 	bl	8002edc <two_Rounds_aes128_encrypt_ffs>

        xor_nonce( ptext0 + (i*16), c_N_0, 16);
 8000d44:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8000d48:	011b      	lsls	r3, r3, #4
 8000d4a:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8000d4e:	4413      	add	r3, r2
 8000d50:	f507 7147 	add.w	r1, r7, #796	; 0x31c
 8000d54:	2210      	movs	r2, #16
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 faae 	bl	80012b8 <xor_nonce>
        xor_nonce( ptext1 + (i*16), c_N_1, 16);
 8000d5c:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8000d66:	4413      	add	r3, r2
 8000d68:	f507 7143 	add.w	r1, r7, #780	; 0x30c
 8000d6c:	2210      	movs	r2, #16
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 faa2 	bl	80012b8 <xor_nonce>
	    
        aes128_encrypt_ffs(ptext0+ (i*16), ptext1+ (i*16), ptext0+ ((i)*16), ptext1 + (i*16), rkeys_ffs);
 8000d74:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8000d78:	011b      	lsls	r3, r3, #4
 8000d7a:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8000d7e:	18d0      	adds	r0, r2, r3
 8000d80:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8000d8a:	18d1      	adds	r1, r2, r3
 8000d8c:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8000d96:	18d4      	adds	r4, r2, r3
 8000d98:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8000d9c:	011b      	lsls	r3, r3, #4
 8000d9e:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8000da2:	441a      	add	r2, r3
 8000da4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	4613      	mov	r3, r2
 8000dac:	4622      	mov	r2, r4
 8000dae:	f001 ffb8 	bl	8002d22 <aes128_encrypt_ffs>

        xor_nonce( tag, ptext0 + (i*16), 16);
 8000db2:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8000dbc:	4413      	add	r3, r2
 8000dbe:	2210      	movs	r2, #16
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f8d7 03c0 	ldr.w	r0, [r7, #960]	; 0x3c0
 8000dc6:	f000 fa77 	bl	80012b8 <xor_nonce>
        // print_array(checksum,16);
        xor_nonce( tag, ptext1 + (i*16), 16);
 8000dca:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8000dd4:	4413      	add	r3, r2
 8000dd6:	2210      	movs	r2, #16
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f8d7 03c0 	ldr.w	r0, [r7, #960]	; 0x3c0
 8000dde:	f000 fa6b 	bl	80012b8 <xor_nonce>
        // print_array(checksum,16);
        add_nonce(add_nonce_2, add_nonce_0,add_nonce_0, 4);
 8000de2:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 8000de6:	f507 713f 	add.w	r1, r7, #764	; 0x2fc
 8000dea:	f507 7037 	add.w	r0, r7, #732	; 0x2dc
 8000dee:	2304      	movs	r3, #4
 8000df0:	f000 fa3a 	bl	8001268 <add_nonce>
        add_nonce(add_nonce_2, add_nonce_1,add_nonce_1, 4);
 8000df4:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 8000df8:	f507 713b 	add.w	r1, r7, #748	; 0x2ec
 8000dfc:	f507 7037 	add.w	r0, r7, #732	; 0x2dc
 8000e00:	2304      	movs	r3, #4
 8000e02:	f000 fa31 	bl	8001268 <add_nonce>
    for (size_t i = 0; i < block_size; i++){
 8000e06:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 8000e10:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8000e14:	f8d7 2390 	ldr.w	r2, [r7, #912]	; 0x390
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	f4ff af73 	bcc.w	8000d04 <PMAC+0x22c>
 8000e1e:	46b5      	mov	sp, r6
        two_Rounds_aes128_encrypt_ffs(c_N_0,  c_N_1, N_0_t,  N_0_t, two_AES_keys_ffs);
        xor_nonce( checksum, c_N_0, 16);
	    aes128_encrypt_ffs(checksum, checksum, checksum, checksum, rkeys_ffs);
        xor_nonce( tag, checksum, 16);*/

}
 8000e20:	bf00      	nop
 8000e22:	f507 7767 	add.w	r7, r7, #924	; 0x39c
 8000e26:	46bd      	mov	sp, r7
 8000e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e2c:	08007dc4 	.word	0x08007dc4
 8000e30:	08007dd4 	.word	0x08007dd4
 8000e34:	08007de4 	.word	0x08007de4
 8000e38:	08007df4 	.word	0x08007df4

08000e3c <PMAC_1>:


void PMAC_1( unsigned char* nonce, unsigned char* asociated_data, unsigned int asociated_data_size,unsigned char* key, unsigned char* tag){
 8000e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e40:	f5ad 7d6d 	sub.w	sp, sp, #948	; 0x3b4
 8000e44:	af02      	add	r7, sp, #8
 8000e46:	f507 766a 	add.w	r6, r7, #936	; 0x3a8
 8000e4a:	f5a6 7665 	sub.w	r6, r6, #916	; 0x394
 8000e4e:	6030      	str	r0, [r6, #0]
 8000e50:	f507 706a 	add.w	r0, r7, #936	; 0x3a8
 8000e54:	f5a0 7066 	sub.w	r0, r0, #920	; 0x398
 8000e58:	6001      	str	r1, [r0, #0]
 8000e5a:	f507 716a 	add.w	r1, r7, #936	; 0x3a8
 8000e5e:	f5a1 7167 	sub.w	r1, r1, #924	; 0x39c
 8000e62:	600a      	str	r2, [r1, #0]
 8000e64:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 8000e68:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	466b      	mov	r3, sp
 8000e70:	461e      	mov	r6, r3




    unsigned char ptext0[asociated_data_size];
 8000e72:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000e76:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8000e7a:	6819      	ldr	r1, [r3, #0]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8000e84:	2300      	movs	r3, #0
 8000e86:	6039      	str	r1, [r7, #0]
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	f04f 0300 	mov.w	r3, #0
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	00c3      	lsls	r3, r0, #3
 8000e96:	6838      	ldr	r0, [r7, #0]
 8000e98:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e9c:	6838      	ldr	r0, [r7, #0]
 8000e9e:	00c2      	lsls	r2, r0, #3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	468a      	mov	sl, r1
 8000ea4:	469b      	mov	fp, r3
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000eb2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000eb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000eba:	1dcb      	adds	r3, r1, #7
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	ebad 0d03 	sub.w	sp, sp, r3
 8000ec4:	ab02      	add	r3, sp, #8
 8000ec6:	3300      	adds	r3, #0
 8000ec8:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
    unsigned char ptext1[asociated_data_size];
 8000ecc:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000ed0:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8000ed4:	6819      	ldr	r1, [r3, #0]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8000ede:	2300      	movs	r3, #0
 8000ee0:	4688      	mov	r8, r1
 8000ee2:	4699      	mov	r9, r3
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ef0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ef4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ef8:	2300      	movs	r3, #0
 8000efa:	460c      	mov	r4, r1
 8000efc:	461d      	mov	r5, r3
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	00eb      	lsls	r3, r5, #3
 8000f08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f0c:	00e2      	lsls	r2, r4, #3
 8000f0e:	1dcb      	adds	r3, r1, #7
 8000f10:	08db      	lsrs	r3, r3, #3
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	ebad 0d03 	sub.w	sp, sp, r3
 8000f18:	ab02      	add	r3, sp, #8
 8000f1a:	3300      	adds	r3, #0
 8000f1c:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390


    for (size_t i = 0; i < asociated_data_size; i++){
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8000f26:	e012      	b.n	8000f4e <PMAC_1+0x112>
        ptext0[i]=0;
 8000f28:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 8000f2c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8000f30:	4413      	add	r3, r2
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
        ptext1[i]=0;
 8000f36:	f8d7 2390 	ldr.w	r2, [r7, #912]	; 0x390
 8000f3a:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8000f3e:	4413      	add	r3, r2
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < asociated_data_size; i++){
 8000f44:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8000f48:	3301      	adds	r3, #1
 8000f4a:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8000f4e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000f52:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8000f56:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d3e3      	bcc.n	8000f28 <PMAC_1+0xec>

    }

    unsigned char key_2AES[key_size] = {0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3};
 8000f60:	4bbd      	ldr	r3, [pc, #756]	; (8001258 <PMAC_1+0x41c>)
 8000f62:	f507 745f 	add.w	r4, r7, #892	; 0x37c
 8000f66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned char N_0[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000f6c:	4bbb      	ldr	r3, [pc, #748]	; (800125c <PMAC_1+0x420>)
 8000f6e:	f507 745b 	add.w	r4, r7, #876	; 0x36c
 8000f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char N_1[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000f78:	4bb8      	ldr	r3, [pc, #736]	; (800125c <PMAC_1+0x420>)
 8000f7a:	f507 7457 	add.w	r4, r7, #860	; 0x35c
 8000f7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned char N_0_t[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000f84:	4bb5      	ldr	r3, [pc, #724]	; (800125c <PMAC_1+0x420>)
 8000f86:	f507 7453 	add.w	r4, r7, #844	; 0x34c
 8000f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char N_1_t[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000f90:	4bb2      	ldr	r3, [pc, #712]	; (800125c <PMAC_1+0x420>)
 8000f92:	f507 744f 	add.w	r4, r7, #828	; 0x33c
 8000f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned char c_N_0[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000f9c:	4baf      	ldr	r3, [pc, #700]	; (800125c <PMAC_1+0x420>)
 8000f9e:	f507 744b 	add.w	r4, r7, #812	; 0x32c
 8000fa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char c_N_1[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000fa8:	4bac      	ldr	r3, [pc, #688]	; (800125c <PMAC_1+0x420>)
 8000faa:	f507 7447 	add.w	r4, r7, #796	; 0x31c
 8000fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char checksum[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8000fb4:	4ba9      	ldr	r3, [pc, #676]	; (800125c <PMAC_1+0x420>)
 8000fb6:	f507 7443 	add.w	r4, r7, #780	; 0x30c
 8000fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned int add_nonce_0[4] = {0,0,0,0};
 8000fc0:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
    unsigned int add_nonce_1[4] = {1,1,1,1};
 8000fce:	4ba4      	ldr	r3, [pc, #656]	; (8001260 <PMAC_1+0x424>)
 8000fd0:	f507 743b 	add.w	r4, r7, #748	; 0x2ec
 8000fd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned int add_nonce_2[4] = {2,2,2,2};
 8000fda:	4ba2      	ldr	r3, [pc, #648]	; (8001264 <PMAC_1+0x428>)
 8000fdc:	f507 7437 	add.w	r4, r7, #732	; 0x2dc
 8000fe0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    divide_plaintext(asociated_data, ptext0,  ptext1, asociated_data_size);
 8000fe6:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000fea:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8000fee:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 8000ff2:	f5a2 7066 	sub.w	r0, r2, #920	; 0x398
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f8d7 2390 	ldr.w	r2, [r7, #912]	; 0x390
 8000ffc:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 8001000:	6800      	ldr	r0, [r0, #0]
 8001002:	f000 f97e 	bl	8001302 <divide_plaintext>

    //key schedule
	uint32_t rkeys_ffs[88];
    uint32_t two_AES_keys_ffs[88];

	aes128_keyschedule_ffs(rkeys_ffs, key, key);
 8001006:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800100a:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 800100e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001012:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001016:	f507 70be 	add.w	r0, r7, #380	; 0x17c
 800101a:	6812      	ldr	r2, [r2, #0]
 800101c:	6819      	ldr	r1, [r3, #0]
 800101e:	f002 f949 	bl	80032b4 <aes128_keyschedule_ffs>
	aes128_keyschedule_ffs(two_AES_keys_ffs, key_2AES, key_2AES);
 8001022:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8001026:	f507 715f 	add.w	r1, r7, #892	; 0x37c
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4618      	mov	r0, r3
 8001030:	f002 f940 	bl	80032b4 <aes128_keyschedule_ffs>
    //aes128_2rounds_keyschedule_ffs(two_AES_keys_ffs, key_2AES, key_2AES);

	//generate the N from nonce using 10 aes rounds
    aes128_encrypt_ffs(N_0, N_1, nonce, nonce, rkeys_ffs);
 8001034:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001038:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 800103c:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 8001040:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 8001044:	f507 7457 	add.w	r4, r7, #860	; 0x35c
 8001048:	f507 705b 	add.w	r0, r7, #876	; 0x36c
 800104c:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8001050:	9100      	str	r1, [sp, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6812      	ldr	r2, [r2, #0]
 8001056:	4621      	mov	r1, r4
 8001058:	f001 fe63 	bl	8002d22 <aes128_encrypt_ffs>

    int block_size = asociated_data_size/32;
 800105c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001060:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	095b      	lsrs	r3, r3, #5
 8001068:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c

    for (size_t i = 0; i < block_size; i++){
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 8001072:	e0e3      	b.n	800123c <PMAC_1+0x400>

        add_nonce(add_nonce_0, (unsigned int *)N_0,(unsigned int *)N_0_t, 4);
 8001074:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 8001078:	f507 715b 	add.w	r1, r7, #876	; 0x36c
 800107c:	f507 703f 	add.w	r0, r7, #764	; 0x2fc
 8001080:	2304      	movs	r3, #4
 8001082:	f000 f8f1 	bl	8001268 <add_nonce>
        add_nonce(add_nonce_1, (unsigned int *)N_1,(unsigned int *)N_1_t, 4);
 8001086:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 800108a:	f507 7157 	add.w	r1, r7, #860	; 0x35c
 800108e:	f507 703b 	add.w	r0, r7, #748	; 0x2ec
 8001092:	2304      	movs	r3, #4
 8001094:	f000 f8e8 	bl	8001268 <add_nonce>

        two_Rounds_aes128_encrypt_ffs(c_N_0,  c_N_1, N_0_t,  N_1_t, two_AES_keys_ffs);
 8001098:	f507 744f 	add.w	r4, r7, #828	; 0x33c
 800109c:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 80010a0:	f507 7147 	add.w	r1, r7, #796	; 0x31c
 80010a4:	f507 704b 	add.w	r0, r7, #812	; 0x32c
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	4623      	mov	r3, r4
 80010b0:	f001 ff14 	bl	8002edc <two_Rounds_aes128_encrypt_ffs>

        if (i != block_size-1 ) {
 80010b4:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 80010b8:	3b01      	subs	r3, #1
 80010ba:	461a      	mov	r2, r3
 80010bc:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d04f      	beq.n	8001164 <PMAC_1+0x328>

			xor_nonce( ptext0 + (i*16), c_N_0, 16);
 80010c4:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 80010ce:	4413      	add	r3, r2
 80010d0:	f507 714b 	add.w	r1, r7, #812	; 0x32c
 80010d4:	2210      	movs	r2, #16
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f8ee 	bl	80012b8 <xor_nonce>
			xor_nonce( ptext1 + (i*16), c_N_1, 16);
 80010dc:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	f8d7 2390 	ldr.w	r2, [r7, #912]	; 0x390
 80010e6:	4413      	add	r3, r2
 80010e8:	f507 7147 	add.w	r1, r7, #796	; 0x31c
 80010ec:	2210      	movs	r2, #16
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f8e2 	bl	80012b8 <xor_nonce>
			aes128_encrypt_ffs(ptext0+ (i*16), ptext1+ (i*16), ptext0+ ((i)*16), ptext1 + (i*16), rkeys_ffs);
 80010f4:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80010f8:	011b      	lsls	r3, r3, #4
 80010fa:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 80010fe:	18d0      	adds	r0, r2, r3
 8001100:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	f8d7 2390 	ldr.w	r2, [r7, #912]	; 0x390
 800110a:	18d1      	adds	r1, r2, r3
 800110c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 8001116:	18d4      	adds	r4, r2, r3
 8001118:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	f8d7 2390 	ldr.w	r2, [r7, #912]	; 0x390
 8001122:	441a      	add	r2, r3
 8001124:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	4613      	mov	r3, r2
 800112c:	4622      	mov	r2, r4
 800112e:	f001 fdf8 	bl	8002d22 <aes128_encrypt_ffs>
			xor_nonce( checksum, ptext0 + (i*16), 16);
 8001132:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 800113c:	18d1      	adds	r1, r2, r3
 800113e:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001142:	2210      	movs	r2, #16
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f8b7 	bl	80012b8 <xor_nonce>
			xor_nonce( checksum, ptext1 + (i*16), 16);
 800114a:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	f8d7 2390 	ldr.w	r2, [r7, #912]	; 0x390
 8001154:	18d1      	adds	r1, r2, r3
 8001156:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 800115a:	2210      	movs	r2, #16
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f8ab 	bl	80012b8 <xor_nonce>
 8001162:	e054      	b.n	800120e <PMAC_1+0x3d2>

        }
        else{
        	xor_nonce( ptext0 + (i*16), c_N_0, 16);
 8001164:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 800116e:	4413      	add	r3, r2
 8001170:	f507 714b 	add.w	r1, r7, #812	; 0x32c
 8001174:	2210      	movs	r2, #16
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f89e 	bl	80012b8 <xor_nonce>
        	aes128_encrypt_ffs(ptext0+ (i*16), ptext0+ (i*16), ptext0+ ((i)*16), ptext0 + (i*16), rkeys_ffs);
 800117c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001180:	011b      	lsls	r3, r3, #4
 8001182:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 8001186:	18d0      	adds	r0, r2, r3
 8001188:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 8001192:	18d1      	adds	r1, r2, r3
 8001194:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 800119e:	18d4      	adds	r4, r2, r3
 80011a0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 80011aa:	441a      	add	r2, r3
 80011ac:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	4613      	mov	r3, r2
 80011b4:	4622      	mov	r2, r4
 80011b6:	f001 fdb4 	bl	8002d22 <aes128_encrypt_ffs>
        	xor_nonce( checksum, ptext0 + (i*16), 16);
 80011ba:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 80011c4:	18d1      	adds	r1, r2, r3
 80011c6:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80011ca:	2210      	movs	r2, #16
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f873 	bl	80012b8 <xor_nonce>

        	xor_nonce( checksum, ptext1 + (i*16), 16);
 80011d2:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	f8d7 2390 	ldr.w	r2, [r7, #912]	; 0x390
 80011dc:	18d1      	adds	r1, r2, r3
 80011de:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80011e2:	2210      	movs	r2, #16
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f867 	bl	80012b8 <xor_nonce>
        	aes128_encrypt_ffs(tag,ptext1 + (i*16),checksum,checksum, rkeys_ffs);
 80011ea:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	f8d7 2390 	ldr.w	r2, [r7, #912]	; 0x390
 80011f4:	18d1      	adds	r1, r2, r3
 80011f6:	f507 7043 	add.w	r0, r7, #780	; 0x30c
 80011fa:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 80011fe:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	4603      	mov	r3, r0
 8001206:	f8d7 03d0 	ldr.w	r0, [r7, #976]	; 0x3d0
 800120a:	f001 fd8a 	bl	8002d22 <aes128_encrypt_ffs>
        }

        add_nonce(add_nonce_2, add_nonce_0,add_nonce_0, 4);
 800120e:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 8001212:	f507 713f 	add.w	r1, r7, #764	; 0x2fc
 8001216:	f507 7037 	add.w	r0, r7, #732	; 0x2dc
 800121a:	2304      	movs	r3, #4
 800121c:	f000 f824 	bl	8001268 <add_nonce>
        add_nonce(add_nonce_2, add_nonce_1,add_nonce_1, 4);
 8001220:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 8001224:	f507 713b 	add.w	r1, r7, #748	; 0x2ec
 8001228:	f507 7037 	add.w	r0, r7, #732	; 0x2dc
 800122c:	2304      	movs	r3, #4
 800122e:	f000 f81b 	bl	8001268 <add_nonce>
    for (size_t i = 0; i < block_size; i++){
 8001232:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001236:	3301      	adds	r3, #1
 8001238:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 800123c:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8001240:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8001244:	429a      	cmp	r2, r3
 8001246:	f4ff af15 	bcc.w	8001074 <PMAC_1+0x238>
 800124a:	46b5      	mov	sp, r6

    }

}
 800124c:	bf00      	nop
 800124e:	f507 776b 	add.w	r7, r7, #940	; 0x3ac
 8001252:	46bd      	mov	sp, r7
 8001254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001258:	08007dc4 	.word	0x08007dc4
 800125c:	08007dd4 	.word	0x08007dd4
 8001260:	08007de4 	.word	0x08007de4
 8001264:	08007df4 	.word	0x08007df4

08001268 <add_nonce>:


void add_nonce(unsigned int * add_nonce, unsigned int * nonce, unsigned int * nonce_result, unsigned int size){
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < size; i++){
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	e012      	b.n	80012a2 <add_nonce+0x3a>
        nonce_result[i]=nonce[i]+ add_nonce[i];
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	4413      	add	r3, r2
 8001284:	6819      	ldr	r1, [r3, #0]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	4413      	add	r3, r2
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	4403      	add	r3, r0
 8001298:	440a      	add	r2, r1
 800129a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < size; i++){
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3301      	adds	r3, #1
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d3e8      	bcc.n	800127c <add_nonce+0x14>
    }
    
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	371c      	adds	r7, #28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <xor_nonce>:

void xor_nonce(unsigned char * plaintext, unsigned char * nonce, unsigned int size){
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < size; i++){
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	e010      	b.n	80012ec <xor_nonce+0x34>
        plaintext[i]=nonce[i]^ plaintext[i];
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	4413      	add	r3, r2
 80012d0:	7819      	ldrb	r1, [r3, #0]
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	4413      	add	r3, r2
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	4403      	add	r3, r0
 80012e0:	404a      	eors	r2, r1
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < size; i++){
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d3ea      	bcc.n	80012ca <xor_nonce+0x12>
    }
    
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	371c      	adds	r7, #28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <divide_plaintext>:
void divide_plaintext(unsigned char* plaintext, unsigned char* ptext0,  unsigned char* ptext1,unsigned int plaintext_size){
 8001302:	b480      	push	{r7}
 8001304:	b089      	sub	sp, #36	; 0x24
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	603b      	str	r3, [r7, #0]
    int condicion = 1;
 8001310:	2301      	movs	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
    size_t j=0;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
    size_t k=0;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	e02c      	b.n	800137c <divide_plaintext+0x7a>
        
        if (i%16==0 && i!=0)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	f003 030f 	and.w	r3, r3, #15
 8001328:	2b00      	cmp	r3, #0
 800132a:	d106      	bne.n	800133a <divide_plaintext+0x38>
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <divide_plaintext+0x38>
            condicion=condicion^1;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	f083 0301 	eor.w	r3, r3, #1
 8001338:	61fb      	str	r3, [r7, #28]

        if (condicion)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d008      	beq.n	8001352 <divide_plaintext+0x50>
            ptext0[j] = plaintext[i];
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	441a      	add	r2, r3
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	440b      	add	r3, r1
 800134c:	7812      	ldrb	r2, [r2, #0]
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	e007      	b.n	8001362 <divide_plaintext+0x60>
        else
            ptext1[k] = plaintext[i];
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	441a      	add	r2, r3
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	440b      	add	r3, r1
 800135e:	7812      	ldrb	r2, [r2, #0]
 8001360:	701a      	strb	r2, [r3, #0]
        
        if (condicion)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <divide_plaintext+0x6e>
            j++;
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	3301      	adds	r3, #1
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	e002      	b.n	8001376 <divide_plaintext+0x74>
        else
            k++;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	3301      	adds	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	3301      	adds	r3, #1
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d3ce      	bcc.n	8001322 <divide_plaintext+0x20>
    }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <union_ciphertext>:


void union_ciphertext(unsigned char* ciphertext, unsigned char* ctext0,  unsigned char* ctext1,unsigned int plaintext_size){
 8001392:	b480      	push	{r7}
 8001394:	b089      	sub	sp, #36	; 0x24
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	603b      	str	r3, [r7, #0]

    // bool condicion = 1;
    int condicion = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
    size_t j=0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
    size_t k=0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	e02c      	b.n	800140c <union_ciphertext+0x7a>
        if (i%16==0 && i!=0)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d106      	bne.n	80013ca <union_ciphertext+0x38>
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <union_ciphertext+0x38>
            condicion=condicion^1;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f083 0301 	eor.w	r3, r3, #1
 80013c8:	61fb      	str	r3, [r7, #28]
        
        if (condicion)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <union_ciphertext+0x50>
            ciphertext[i] = ctext0[j];
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	441a      	add	r2, r3
 80013d6:	68f9      	ldr	r1, [r7, #12]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	440b      	add	r3, r1
 80013dc:	7812      	ldrb	r2, [r2, #0]
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	e007      	b.n	80013f2 <union_ciphertext+0x60>
        else
            ciphertext[i] = ctext1[k];
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	441a      	add	r2, r3
 80013e8:	68f9      	ldr	r1, [r7, #12]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	440b      	add	r3, r1
 80013ee:	7812      	ldrb	r2, [r2, #0]
 80013f0:	701a      	strb	r2, [r3, #0]
        
        if (condicion)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <union_ciphertext+0x6e>
            j++;
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	3301      	adds	r3, #1
 80013fc:	61bb      	str	r3, [r7, #24]
 80013fe:	e002      	b.n	8001406 <union_ciphertext+0x74>
        else
            k++;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	3301      	adds	r3, #1
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d3ce      	bcc.n	80013b2 <union_ciphertext+0x20>
        

        
        
    }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <divide_key>:


void divide_key(unsigned char* key, unsigned char * key0, unsigned char * key1){
 8001422:	b480      	push	{r7}
 8001424:	b087      	sub	sp, #28
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]

    for (size_t i = 0; i < key_size; i++){
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	e012      	b.n	800145a <divide_key+0x38>
        key0[i] = key[i];
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	441a      	add	r2, r3
 800143a:	68b9      	ldr	r1, [r7, #8]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	440b      	add	r3, r1
 8001440:	7812      	ldrb	r2, [r2, #0]
 8001442:	701a      	strb	r2, [r3, #0]
        key1[i] = key[i];
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	441a      	add	r2, r3
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	440b      	add	r3, r1
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < key_size; i++){
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d9e9      	bls.n	8001434 <divide_key+0x12>
    }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	371c      	adds	r7, #28
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <packing>:

}


void packing(uint32_t* out, const unsigned char* in0,
		const unsigned char* in1) {
 800146e:	b480      	push	{r7}
 8001470:	b087      	sub	sp, #28
 8001472:	af00      	add	r7, sp, #0
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	out[0] = LE_LOAD_32(in0);
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	3303      	adds	r3, #3
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	061a      	lsls	r2, r3, #24
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	3302      	adds	r3, #2
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	041b      	lsls	r3, r3, #16
 800148a:	431a      	orrs	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	3301      	adds	r3, #1
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	4313      	orrs	r3, r2
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	431a      	orrs	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	601a      	str	r2, [r3, #0]
	out[1] = LE_LOAD_32(in1);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3303      	adds	r3, #3
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	061a      	lsls	r2, r3, #24
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3302      	adds	r3, #2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	041b      	lsls	r3, r3, #16
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3301      	adds	r3, #1
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3304      	adds	r3, #4
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
	out[2] = LE_LOAD_32(in0 + 4);
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	3307      	adds	r3, #7
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	061a      	lsls	r2, r3, #24
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	3306      	adds	r3, #6
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	041b      	lsls	r3, r3, #16
 80014da:	431a      	orrs	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	3305      	adds	r3, #5
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	431a      	orrs	r2, r3
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	3304      	adds	r3, #4
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3308      	adds	r3, #8
 80014f2:	430a      	orrs	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]
	out[3] = LE_LOAD_32(in1 + 4);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3307      	adds	r3, #7
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	061a      	lsls	r2, r3, #24
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3306      	adds	r3, #6
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	041b      	lsls	r3, r3, #16
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3305      	adds	r3, #5
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3304      	adds	r3, #4
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	330c      	adds	r3, #12
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]
	out[4] = LE_LOAD_32(in0 + 8);
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	330b      	adds	r3, #11
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	061a      	lsls	r2, r3, #24
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	330a      	adds	r3, #10
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	041b      	lsls	r3, r3, #16
 8001532:	431a      	orrs	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	3309      	adds	r3, #9
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	431a      	orrs	r2, r3
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	3308      	adds	r3, #8
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3310      	adds	r3, #16
 800154a:	430a      	orrs	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
	out[5] = LE_LOAD_32(in1 + 8);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	330b      	adds	r3, #11
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	061a      	lsls	r2, r3, #24
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	330a      	adds	r3, #10
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	041b      	lsls	r3, r3, #16
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3309      	adds	r3, #9
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3308      	adds	r3, #8
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3314      	adds	r3, #20
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]
	out[6] = LE_LOAD_32(in0 + 12);
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	330f      	adds	r3, #15
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	061a      	lsls	r2, r3, #24
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	330e      	adds	r3, #14
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	041b      	lsls	r3, r3, #16
 800158a:	431a      	orrs	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	330d      	adds	r3, #13
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	431a      	orrs	r2, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	330c      	adds	r3, #12
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3318      	adds	r3, #24
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
	out[7] = LE_LOAD_32(in1 + 12);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	330f      	adds	r3, #15
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	061a      	lsls	r2, r3, #24
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	330e      	adds	r3, #14
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	041b      	lsls	r3, r3, #16
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	330d      	adds	r3, #13
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	330c      	adds	r3, #12
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	331c      	adds	r3, #28
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[1], out[0], 0x55555555, 1);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3304      	adds	r3, #4
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	085b      	lsrs	r3, r3, #1
 80015de:	4053      	eors	r3, r2
 80015e0:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	405a      	eors	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3304      	adds	r3, #4
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005a      	lsls	r2, r3, #1
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	3304      	adds	r3, #4
 8001600:	404a      	eors	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[3], out[2], 0x55555555, 1);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3308      	adds	r3, #8
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	330c      	adds	r3, #12
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	085b      	lsrs	r3, r3, #1
 8001612:	4053      	eors	r3, r2
 8001614:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	3308      	adds	r3, #8
 800161e:	6819      	ldr	r1, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3308      	adds	r3, #8
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	404a      	eors	r2, r1
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	330c      	adds	r3, #12
 800162e:	6819      	ldr	r1, [r3, #0]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005a      	lsls	r2, r3, #1
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	330c      	adds	r3, #12
 8001638:	404a      	eors	r2, r1
 800163a:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[5], out[4], 0x55555555, 1);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3310      	adds	r3, #16
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3314      	adds	r3, #20
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	4053      	eors	r3, r2
 800164c:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3310      	adds	r3, #16
 8001656:	6819      	ldr	r1, [r3, #0]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3310      	adds	r3, #16
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	404a      	eors	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3314      	adds	r3, #20
 8001666:	6819      	ldr	r1, [r3, #0]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005a      	lsls	r2, r3, #1
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3314      	adds	r3, #20
 8001670:	404a      	eors	r2, r1
 8001672:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[6], 0x55555555, 1);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3318      	adds	r3, #24
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	331c      	adds	r3, #28
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	4053      	eors	r3, r2
 8001684:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3318      	adds	r3, #24
 800168e:	6819      	ldr	r1, [r3, #0]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3318      	adds	r3, #24
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	404a      	eors	r2, r1
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	331c      	adds	r3, #28
 800169e:	6819      	ldr	r1, [r3, #0]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	005a      	lsls	r2, r3, #1
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	331c      	adds	r3, #28
 80016a8:	404a      	eors	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[2], out[0], 0x33333333, 2);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	3308      	adds	r3, #8
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	4053      	eors	r3, r2
 80016ba:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	405a      	eors	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3308      	adds	r3, #8
 80016d0:	6819      	ldr	r1, [r3, #0]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	009a      	lsls	r2, r3, #2
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3308      	adds	r3, #8
 80016da:	404a      	eors	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[3], out[1], 0x33333333, 2);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3304      	adds	r3, #4
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	330c      	adds	r3, #12
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	4053      	eors	r3, r2
 80016ee:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3304      	adds	r3, #4
 80016f8:	6819      	ldr	r1, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3304      	adds	r3, #4
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	404a      	eors	r2, r1
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	330c      	adds	r3, #12
 8001708:	6819      	ldr	r1, [r3, #0]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	009a      	lsls	r2, r3, #2
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	330c      	adds	r3, #12
 8001712:	404a      	eors	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[6], out[4], 0x33333333, 2);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3310      	adds	r3, #16
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	3318      	adds	r3, #24
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	4053      	eors	r3, r2
 8001726:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	3310      	adds	r3, #16
 8001730:	6819      	ldr	r1, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3310      	adds	r3, #16
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	404a      	eors	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3318      	adds	r3, #24
 8001740:	6819      	ldr	r1, [r3, #0]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	009a      	lsls	r2, r3, #2
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3318      	adds	r3, #24
 800174a:	404a      	eors	r2, r1
 800174c:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[5], 0x33333333, 2);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3314      	adds	r3, #20
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	331c      	adds	r3, #28
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	4053      	eors	r3, r2
 800175e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3314      	adds	r3, #20
 8001768:	6819      	ldr	r1, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3314      	adds	r3, #20
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	404a      	eors	r2, r1
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	331c      	adds	r3, #28
 8001778:	6819      	ldr	r1, [r3, #0]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	009a      	lsls	r2, r3, #2
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	331c      	adds	r3, #28
 8001782:	404a      	eors	r2, r1
 8001784:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[4], out[0], 0x0f0f0f0f, 4);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3310      	adds	r3, #16
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	4053      	eors	r3, r2
 8001794:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	405a      	eors	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	3310      	adds	r3, #16
 80017aa:	6819      	ldr	r1, [r3, #0]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	011a      	lsls	r2, r3, #4
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3310      	adds	r3, #16
 80017b4:	404a      	eors	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[5], out[1], 0x0f0f0f0f, 4);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	3304      	adds	r3, #4
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3314      	adds	r3, #20
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	4053      	eors	r3, r2
 80017c8:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3304      	adds	r3, #4
 80017d2:	6819      	ldr	r1, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3304      	adds	r3, #4
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	404a      	eors	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3314      	adds	r3, #20
 80017e2:	6819      	ldr	r1, [r3, #0]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	011a      	lsls	r2, r3, #4
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3314      	adds	r3, #20
 80017ec:	404a      	eors	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[6], out[2], 0x0f0f0f0f, 4);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3308      	adds	r3, #8
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3318      	adds	r3, #24
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	4053      	eors	r3, r2
 8001800:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3308      	adds	r3, #8
 800180a:	6819      	ldr	r1, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3308      	adds	r3, #8
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	404a      	eors	r2, r1
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3318      	adds	r3, #24
 800181a:	6819      	ldr	r1, [r3, #0]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	011a      	lsls	r2, r3, #4
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3318      	adds	r3, #24
 8001824:	404a      	eors	r2, r1
 8001826:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[3], 0x0f0f0f0f, 4);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	330c      	adds	r3, #12
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	331c      	adds	r3, #28
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	4053      	eors	r3, r2
 8001838:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	330c      	adds	r3, #12
 8001842:	6819      	ldr	r1, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	330c      	adds	r3, #12
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	404a      	eors	r2, r1
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	331c      	adds	r3, #28
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	011a      	lsls	r2, r3, #4
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	331c      	adds	r3, #28
 800185c:	404a      	eors	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
}
 8001860:	bf00      	nop
 8001862:	371c      	adds	r7, #28
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <unpacking>:

/******************************************************************************
* Unpacks the 256-bit internal state in two 128-bit blocs out0, out1.
******************************************************************************/
static void unpacking(unsigned char* out0, unsigned char* out1, uint32_t* in) {
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	SWAPMOVE(in[4], in[0], 0x0f0f0f0f, 4);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3310      	adds	r3, #16
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	4053      	eors	r3, r2
 8001886:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	405a      	eors	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3310      	adds	r3, #16
 800189c:	6819      	ldr	r1, [r3, #0]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	011a      	lsls	r2, r3, #4
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3310      	adds	r3, #16
 80018a6:	404a      	eors	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[5], in[1], 0x0f0f0f0f, 4);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3304      	adds	r3, #4
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3314      	adds	r3, #20
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	4053      	eors	r3, r2
 80018ba:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3304      	adds	r3, #4
 80018c4:	6819      	ldr	r1, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3304      	adds	r3, #4
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	404a      	eors	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3314      	adds	r3, #20
 80018d4:	6819      	ldr	r1, [r3, #0]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	011a      	lsls	r2, r3, #4
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3314      	adds	r3, #20
 80018de:	404a      	eors	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[6], in[2], 0x0f0f0f0f, 4);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3308      	adds	r3, #8
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3318      	adds	r3, #24
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	4053      	eors	r3, r2
 80018f2:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3308      	adds	r3, #8
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3308      	adds	r3, #8
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	404a      	eors	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3318      	adds	r3, #24
 800190c:	6819      	ldr	r1, [r3, #0]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	011a      	lsls	r2, r3, #4
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3318      	adds	r3, #24
 8001916:	404a      	eors	r2, r1
 8001918:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[3], 0x0f0f0f0f, 4);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	330c      	adds	r3, #12
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	331c      	adds	r3, #28
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	4053      	eors	r3, r2
 800192a:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	330c      	adds	r3, #12
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	330c      	adds	r3, #12
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	404a      	eors	r2, r1
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	331c      	adds	r3, #28
 8001944:	6819      	ldr	r1, [r3, #0]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	011a      	lsls	r2, r3, #4
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	331c      	adds	r3, #28
 800194e:	404a      	eors	r2, r1
 8001950:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[2], in[0], 0x33333333, 2);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3308      	adds	r3, #8
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	4053      	eors	r3, r2
 8001960:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	405a      	eors	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3308      	adds	r3, #8
 8001976:	6819      	ldr	r1, [r3, #0]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	009a      	lsls	r2, r3, #2
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3308      	adds	r3, #8
 8001980:	404a      	eors	r2, r1
 8001982:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[3], in[1], 0x33333333, 2);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3304      	adds	r3, #4
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	330c      	adds	r3, #12
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	4053      	eors	r3, r2
 8001994:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3304      	adds	r3, #4
 800199e:	6819      	ldr	r1, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3304      	adds	r3, #4
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	404a      	eors	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	330c      	adds	r3, #12
 80019ae:	6819      	ldr	r1, [r3, #0]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	009a      	lsls	r2, r3, #2
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	330c      	adds	r3, #12
 80019b8:	404a      	eors	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[6], in[4], 0x33333333, 2);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3310      	adds	r3, #16
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3318      	adds	r3, #24
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	4053      	eors	r3, r2
 80019cc:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3310      	adds	r3, #16
 80019d6:	6819      	ldr	r1, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3310      	adds	r3, #16
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	404a      	eors	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3318      	adds	r3, #24
 80019e6:	6819      	ldr	r1, [r3, #0]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	009a      	lsls	r2, r3, #2
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3318      	adds	r3, #24
 80019f0:	404a      	eors	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[5], 0x33333333, 2);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3314      	adds	r3, #20
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	331c      	adds	r3, #28
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	4053      	eors	r3, r2
 8001a04:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3314      	adds	r3, #20
 8001a0e:	6819      	ldr	r1, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3314      	adds	r3, #20
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	404a      	eors	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	331c      	adds	r3, #28
 8001a1e:	6819      	ldr	r1, [r3, #0]
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	009a      	lsls	r2, r3, #2
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	331c      	adds	r3, #28
 8001a28:	404a      	eors	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[1], in[0], 0x55555555, 1);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3304      	adds	r3, #4
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	4053      	eors	r3, r2
 8001a3a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	405a      	eors	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3304      	adds	r3, #4
 8001a50:	6819      	ldr	r1, [r3, #0]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	005a      	lsls	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	404a      	eors	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[3], in[2], 0x55555555, 1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3308      	adds	r3, #8
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	330c      	adds	r3, #12
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	085b      	lsrs	r3, r3, #1
 8001a6c:	4053      	eors	r3, r2
 8001a6e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3308      	adds	r3, #8
 8001a78:	6819      	ldr	r1, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3308      	adds	r3, #8
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	404a      	eors	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	330c      	adds	r3, #12
 8001a88:	6819      	ldr	r1, [r3, #0]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005a      	lsls	r2, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	330c      	adds	r3, #12
 8001a92:	404a      	eors	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[5], in[4], 0x55555555, 1);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3310      	adds	r3, #16
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3314      	adds	r3, #20
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	085b      	lsrs	r3, r3, #1
 8001aa4:	4053      	eors	r3, r2
 8001aa6:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3310      	adds	r3, #16
 8001ab0:	6819      	ldr	r1, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3310      	adds	r3, #16
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	404a      	eors	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3314      	adds	r3, #20
 8001ac0:	6819      	ldr	r1, [r3, #0]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005a      	lsls	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3314      	adds	r3, #20
 8001aca:	404a      	eors	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[6], 0x55555555, 1);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3318      	adds	r3, #24
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	331c      	adds	r3, #28
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	085b      	lsrs	r3, r3, #1
 8001adc:	4053      	eors	r3, r2
 8001ade:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3318      	adds	r3, #24
 8001ae8:	6819      	ldr	r1, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3318      	adds	r3, #24
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	404a      	eors	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	331c      	adds	r3, #28
 8001af8:	6819      	ldr	r1, [r3, #0]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005a      	lsls	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	331c      	adds	r3, #28
 8001b02:	404a      	eors	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]
	LE_STORE_32(out0, in[0]);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0a1a      	lsrs	r2, r3, #8
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	0c1a      	lsrs	r2, r3, #16
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	3302      	adds	r3, #2
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0e1a      	lsrs	r2, r3, #24
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3303      	adds	r3, #3
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 4, in[2]);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3308      	adds	r3, #8
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3304      	adds	r3, #4
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3308      	adds	r3, #8
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	0a1a      	lsrs	r2, r3, #8
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	3305      	adds	r3, #5
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3308      	adds	r3, #8
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0c1a      	lsrs	r2, r3, #16
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3306      	adds	r3, #6
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3308      	adds	r3, #8
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	0e1a      	lsrs	r2, r3, #24
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3307      	adds	r3, #7
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 8, in[4]);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3310      	adds	r3, #16
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3308      	adds	r3, #8
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3310      	adds	r3, #16
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	0a1a      	lsrs	r2, r3, #8
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	3309      	adds	r3, #9
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3310      	adds	r3, #16
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0c1a      	lsrs	r2, r3, #16
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	330a      	adds	r3, #10
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3310      	adds	r3, #16
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0e1a      	lsrs	r2, r3, #24
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	330b      	adds	r3, #11
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 12, in[6]);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3318      	adds	r3, #24
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	330c      	adds	r3, #12
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3318      	adds	r3, #24
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	0a1a      	lsrs	r2, r3, #8
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	330d      	adds	r3, #13
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3318      	adds	r3, #24
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	0c1a      	lsrs	r2, r3, #16
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	330e      	adds	r3, #14
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	701a      	strb	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3318      	adds	r3, #24
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	0e1a      	lsrs	r2, r3, #24
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	330f      	adds	r3, #15
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1, in[1]);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3304      	adds	r3, #4
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0a1a      	lsrs	r2, r3, #8
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3304      	adds	r3, #4
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	0c1a      	lsrs	r2, r3, #16
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	0e1a      	lsrs	r2, r3, #24
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	3303      	adds	r3, #3
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 4, in[3]);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	330c      	adds	r3, #12
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	330c      	adds	r3, #12
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0a1a      	lsrs	r2, r3, #8
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	3305      	adds	r3, #5
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	330c      	adds	r3, #12
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	0c1a      	lsrs	r2, r3, #16
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3306      	adds	r3, #6
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	330c      	adds	r3, #12
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	0e1a      	lsrs	r2, r3, #24
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	3307      	adds	r3, #7
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 8, in[5]);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3314      	adds	r3, #20
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	3308      	adds	r3, #8
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	701a      	strb	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3314      	adds	r3, #20
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0a1a      	lsrs	r2, r3, #8
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	3309      	adds	r3, #9
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	701a      	strb	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3314      	adds	r3, #20
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	0c1a      	lsrs	r2, r3, #16
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	330a      	adds	r3, #10
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3314      	adds	r3, #20
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	0e1a      	lsrs	r2, r3, #24
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	330b      	adds	r3, #11
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 12, in[7]);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	331c      	adds	r3, #28
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	330c      	adds	r3, #12
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	331c      	adds	r3, #28
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0a1a      	lsrs	r2, r3, #8
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	330d      	adds	r3, #13
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	331c      	adds	r3, #28
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0c1a      	lsrs	r2, r3, #16
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	330e      	adds	r3, #14
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	331c      	adds	r3, #28
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	0e1a      	lsrs	r2, r3, #24
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	330f      	adds	r3, #15
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <ark>:

/******************************************************************************
* XOR the round key to the internal state. The round keys are expected to be 
* pre-computed and to be packed in the fixsliced representation.
******************************************************************************/
static void ark(uint32_t* state, const uint32_t* rkey) {
 8001cf6:	b480      	push	{r7}
 8001cf8:	b085      	sub	sp, #20
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 8; i++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	e012      	b.n	8001d2c <ark+0x36>
		state[i] ^= rkey[i];
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	6819      	ldr	r1, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4403      	add	r3, r0
 8001d22:	404a      	eors	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b07      	cmp	r3, #7
 8001d30:	dde9      	ble.n	8001d06 <ark+0x10>
}
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <sbox>:
/******************************************************************************
* Bitsliced implementation of the AES Sbox based on Boyar, Peralta and Calik.
* See http://www.cs.yale.edu/homes/peralta/CircuitStuff/SLP_AES_113.txt
* Note that the 4 NOT (^= 0xffffffff) are moved to the key schedule.
******************************************************************************/
void sbox(uint32_t* state) {
 8001d40:	b480      	push	{r7}
 8001d42:	b095      	sub	sp, #84	; 0x54
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4, t5,
		t6, t7, t8, t9, t10, t11, t12,
		t13, t14, t15, t16, t17;
	t0			= state[3] ^ state[5];
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	330c      	adds	r3, #12
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3314      	adds	r3, #20
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4053      	eors	r3, r2
 8001d56:	64fb      	str	r3, [r7, #76]	; 0x4c
	t1			= state[0] ^ state[6];
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3318      	adds	r3, #24
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4053      	eors	r3, r2
 8001d64:	64bb      	str	r3, [r7, #72]	; 0x48
	t2			= t1 ^ t0;
 8001d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d6a:	4053      	eors	r3, r2
 8001d6c:	647b      	str	r3, [r7, #68]	; 0x44
	t3			= state[4] ^ t2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3310      	adds	r3, #16
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d76:	4053      	eors	r3, r2
 8001d78:	643b      	str	r3, [r7, #64]	; 0x40
	t4			= t3 ^ state[5];
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3314      	adds	r3, #20
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d82:	4053      	eors	r3, r2
 8001d84:	63fb      	str	r3, [r7, #60]	; 0x3c
	t5			= t2 & t4;
 8001d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	63bb      	str	r3, [r7, #56]	; 0x38
	t6			= t4 ^ state[7];
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	331c      	adds	r3, #28
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d96:	4053      	eors	r3, r2
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
	t7			= t3 ^ state[1];
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001da2:	4053      	eors	r3, r2
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
	t8			= state[0] ^ state[3]; 
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	330c      	adds	r3, #12
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4053      	eors	r3, r2
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
	t9			= t7 ^ t8;
 8001db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db8:	4053      	eors	r3, r2
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
	t10			= t8 & t9;
 8001dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
	t11			= state[7] ^ t9; 
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	331c      	adds	r3, #28
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dcc:	4053      	eors	r3, r2
 8001dce:	623b      	str	r3, [r7, #32]
	t12			= state[0] ^ state[5];
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3314      	adds	r3, #20
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4053      	eors	r3, r2
 8001ddc:	61fb      	str	r3, [r7, #28]
	t13			= state[1] ^ state[2];
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3304      	adds	r3, #4
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3308      	adds	r3, #8
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4053      	eors	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
	t14			= t4 ^ t13;
 8001dee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	4053      	eors	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]
	t15			= t14 ^ t9;
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfa:	4053      	eors	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
	t16			= t0 & t15;
 8001dfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
	t17			= t16 ^ t10;
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	4053      	eors	r3, r2
 8001e0c:	60bb      	str	r3, [r7, #8]
	state[1]	= t14 ^ t12; 
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3304      	adds	r3, #4
 8001e12:	6979      	ldr	r1, [r7, #20]
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	404a      	eors	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
	state[2]	= t12 & t14;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3308      	adds	r3, #8
 8001e1e:	69f9      	ldr	r1, [r7, #28]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	400a      	ands	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3308      	adds	r3, #8
 8001e2a:	6819      	ldr	r1, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3308      	adds	r3, #8
 8001e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e32:	404a      	eors	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]
	state[4]	= t13 ^ t9;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3310      	adds	r3, #16
 8001e3a:	69b9      	ldr	r1, [r7, #24]
 8001e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e3e:	404a      	eors	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]
	state[5]	= t1 ^ state[4];
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3310      	adds	r3, #16
 8001e46:	6819      	ldr	r1, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3314      	adds	r3, #20
 8001e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e4e:	404a      	eors	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
	t3			= t1 & state[4];
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3310      	adds	r3, #16
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	643b      	str	r3, [r7, #64]	; 0x40
	t10			= state[0] ^ state[4];
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3310      	adds	r3, #16
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4053      	eors	r3, r2
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
	t13 		^= state[7];
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	331c      	adds	r3, #28
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4053      	eors	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
	state[3] 	^= t13; 
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	330c      	adds	r3, #12
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	330c      	adds	r3, #12
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	404a      	eors	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]
	t16			= state[3] & state[7];
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	330c      	adds	r3, #12
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	331c      	adds	r3, #28
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
	t16 		^= t5;
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e9c:	4053      	eors	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]
	t16 		^= state[2];
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3308      	adds	r3, #8
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4053      	eors	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
	state[1] 	^= t16;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	6819      	ldr	r1, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	404a      	eors	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
	state[0] 	^= t13;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	405a      	eors	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	601a      	str	r2, [r3, #0]
	t16			= state[0] & t11;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6a3a      	ldr	r2, [r7, #32]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
	t16 		^= t3;
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed6:	4053      	eors	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
	state[2] 	^= t16;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3308      	adds	r3, #8
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3308      	adds	r3, #8
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	404a      	eors	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3308      	adds	r3, #8
 8001eee:	6819      	ldr	r1, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3308      	adds	r3, #8
 8001ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef6:	404a      	eors	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]
	state[6] 	^= t13;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3318      	adds	r3, #24
 8001efe:	6819      	ldr	r1, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3318      	adds	r3, #24
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	404a      	eors	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]
	t10			= state[6] & t13;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3318      	adds	r3, #24
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
	t3 			^= t10;
 8001f16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	4053      	eors	r3, r2
 8001f1c:	643b      	str	r3, [r7, #64]	; 0x40
	t3 			^= t17;
 8001f1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4053      	eors	r3, r2
 8001f24:	643b      	str	r3, [r7, #64]	; 0x40
	state[5] 	^= t3;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3314      	adds	r3, #20
 8001f2a:	6819      	ldr	r1, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3314      	adds	r3, #20
 8001f30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f32:	404a      	eors	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]
	t3			= state[6] ^ t12;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3318      	adds	r3, #24
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	4053      	eors	r3, r2
 8001f40:	643b      	str	r3, [r7, #64]	; 0x40
	t10			= t3 & t6;
 8001f42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f46:	4013      	ands	r3, r2
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
	t5 			^= t10;
 8001f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	4053      	eors	r3, r2
 8001f50:	63bb      	str	r3, [r7, #56]	; 0x38
	t5 			^= t7;
 8001f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f56:	4053      	eors	r3, r2
 8001f58:	63bb      	str	r3, [r7, #56]	; 0x38
	t5 			^= t17;
 8001f5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4053      	eors	r3, r2
 8001f60:	63bb      	str	r3, [r7, #56]	; 0x38
	t7			= t5 & state[5];
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3314      	adds	r3, #20
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	633b      	str	r3, [r7, #48]	; 0x30
	t10			= state[2] ^ t7;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3308      	adds	r3, #8
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f76:	4053      	eors	r3, r2
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
	t7 			^= state[1];
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f82:	4053      	eors	r3, r2
 8001f84:	633b      	str	r3, [r7, #48]	; 0x30
	t5 			^= state[1];
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f8e:	4053      	eors	r3, r2
 8001f90:	63bb      	str	r3, [r7, #56]	; 0x38
	t16			= t5 & t10;
 8001f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	4013      	ands	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
	state[1] 	^= t16;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	6819      	ldr	r1, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	404a      	eors	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
	t17			= state[1] & state[0];
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3304      	adds	r3, #4
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
	t11			= state[1] & t11;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a3a      	ldr	r2, [r7, #32]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	623b      	str	r3, [r7, #32]
	t16			= state[5] ^ state[2];
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3314      	adds	r3, #20
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3308      	adds	r3, #8
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4053      	eors	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
	t7 			&= t16;
 8001fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	633b      	str	r3, [r7, #48]	; 0x30
	t7 			^= state[2];
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3308      	adds	r3, #8
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fe4:	4053      	eors	r3, r2
 8001fe6:	633b      	str	r3, [r7, #48]	; 0x30
	t16			= t10 ^ t7;
 8001fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fec:	4053      	eors	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
	state[2] 	&= t16;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3308      	adds	r3, #8
 8001ff4:	6819      	ldr	r1, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3308      	adds	r3, #8
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]
	t10 		^= state[2];
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3308      	adds	r3, #8
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002008:	4053      	eors	r3, r2
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
	t10 		&= state[1];
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3304      	adds	r3, #4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002014:	4013      	ands	r3, r2
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
	t5 			^= t10;
 8002018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	4053      	eors	r3, r2
 800201e:	63bb      	str	r3, [r7, #56]	; 0x38
	t10			= state[1] ^ t5;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3304      	adds	r3, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002028:	4053      	eors	r3, r2
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
	state[4] 	&= t10; 
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3310      	adds	r3, #16
 8002030:	6819      	ldr	r1, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3310      	adds	r3, #16
 8002036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002038:	400a      	ands	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
	t11 		^= state[4];
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3310      	adds	r3, #16
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6a3a      	ldr	r2, [r7, #32]
 8002044:	4053      	eors	r3, r2
 8002046:	623b      	str	r3, [r7, #32]
	t1 			&= t10;
 8002048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	4013      	ands	r3, r2
 800204e:	64bb      	str	r3, [r7, #72]	; 0x48
	state[6] 	&= t5; 
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3318      	adds	r3, #24
 8002054:	6819      	ldr	r1, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3318      	adds	r3, #24
 800205a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800205c:	400a      	ands	r2, r1
 800205e:	601a      	str	r2, [r3, #0]
	t10			= t5 & t13;
 8002060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
	state[4] 	^= t10;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3310      	adds	r3, #16
 800206c:	6819      	ldr	r1, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3310      	adds	r3, #16
 8002072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002074:	404a      	eors	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
	state[5] 	^= t7;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3314      	adds	r3, #20
 800207c:	6819      	ldr	r1, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3314      	adds	r3, #20
 8002082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002084:	404a      	eors	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
	state[2] 	^= state[5];
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3308      	adds	r3, #8
 800208c:	6819      	ldr	r1, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3314      	adds	r3, #20
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3308      	adds	r3, #8
 8002098:	404a      	eors	r2, r1
 800209a:	601a      	str	r2, [r3, #0]
	state[5]	= t5 ^ state[2];
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3308      	adds	r3, #8
 80020a0:	6819      	ldr	r1, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3314      	adds	r3, #20
 80020a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020a8:	404a      	eors	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]
	t5			= state[5] & t14;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3314      	adds	r3, #20
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4013      	ands	r3, r2
 80020b6:	63bb      	str	r3, [r7, #56]	; 0x38
	t10			= state[5] & t12;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3314      	adds	r3, #20
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	4013      	ands	r3, r2
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
	t12			= t7 ^ state[2];
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3308      	adds	r3, #8
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020cc:	4053      	eors	r3, r2
 80020ce:	61fb      	str	r3, [r7, #28]
	t4 			&= t12;
 80020d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4013      	ands	r3, r2
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	t2 			&= t12;
 80020d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	4013      	ands	r3, r2
 80020de:	647b      	str	r3, [r7, #68]	; 0x44
	t3 			&= state[2]; 
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3308      	adds	r3, #8
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020e8:	4013      	ands	r3, r2
 80020ea:	643b      	str	r3, [r7, #64]	; 0x40
	state[2] 	&= t6;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3308      	adds	r3, #8
 80020f0:	6819      	ldr	r1, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3308      	adds	r3, #8
 80020f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020f8:	400a      	ands	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]
	state[2] 	^= t4;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3308      	adds	r3, #8
 8002100:	6819      	ldr	r1, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3308      	adds	r3, #8
 8002106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002108:	404a      	eors	r2, r1
 800210a:	601a      	str	r2, [r3, #0]
	t13			= state[4] ^ state[2];
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3310      	adds	r3, #16
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3308      	adds	r3, #8
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4053      	eors	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
	state[3] 	&= t7;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	330c      	adds	r3, #12
 8002120:	6819      	ldr	r1, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	330c      	adds	r3, #12
 8002126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002128:	400a      	ands	r2, r1
 800212a:	601a      	str	r2, [r3, #0]
	state[1] 	^= t7;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3304      	adds	r3, #4
 8002130:	6819      	ldr	r1, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3304      	adds	r3, #4
 8002136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002138:	404a      	eors	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
	state[5] 	^= state[1];
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3314      	adds	r3, #20
 8002140:	6819      	ldr	r1, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3304      	adds	r3, #4
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3314      	adds	r3, #20
 800214c:	404a      	eors	r2, r1
 800214e:	601a      	str	r2, [r3, #0]
	t6			= state[5] & t15;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3314      	adds	r3, #20
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
	state[4] 	^= t6; 
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3310      	adds	r3, #16
 8002160:	6819      	ldr	r1, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3310      	adds	r3, #16
 8002166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002168:	404a      	eors	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
	t0 			&= state[5];
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3314      	adds	r3, #20
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002174:	4013      	ands	r3, r2
 8002176:	64fb      	str	r3, [r7, #76]	; 0x4c
	state[5]	= state[1] & t9; 
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3304      	adds	r3, #4
 800217c:	6819      	ldr	r1, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3314      	adds	r3, #20
 8002182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002184:	400a      	ands	r2, r1
 8002186:	601a      	str	r2, [r3, #0]
	state[5] 	^= state[4];
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3314      	adds	r3, #20
 800218c:	6819      	ldr	r1, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3310      	adds	r3, #16
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3314      	adds	r3, #20
 8002198:	404a      	eors	r2, r1
 800219a:	601a      	str	r2, [r3, #0]
	state[1] 	&= t8;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3304      	adds	r3, #4
 80021a0:	6819      	ldr	r1, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3304      	adds	r3, #4
 80021a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021a8:	400a      	ands	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
	t6			= state[1] ^ state[5];
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3304      	adds	r3, #4
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3314      	adds	r3, #20
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4053      	eors	r3, r2
 80021ba:	637b      	str	r3, [r7, #52]	; 0x34
	t0 			^= state[1];
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3304      	adds	r3, #4
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021c4:	4053      	eors	r3, r2
 80021c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	state[1]	= t3 ^ t0;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3304      	adds	r3, #4
 80021cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021d0:	404a      	eors	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]
	t15			= state[1] ^ state[3];
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3304      	adds	r3, #4
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	330c      	adds	r3, #12
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4053      	eors	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
	t2 			^= state[1];
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3304      	adds	r3, #4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021ec:	4053      	eors	r3, r2
 80021ee:	647b      	str	r3, [r7, #68]	; 0x44
	state[0]	= t2 ^ state[5];
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3314      	adds	r3, #20
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f8:	405a      	eors	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	601a      	str	r2, [r3, #0]
	state[3]	= t2 ^ t13;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	330c      	adds	r3, #12
 8002202:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	404a      	eors	r2, r1
 8002208:	601a      	str	r2, [r3, #0]
	state[1]	= state[3] ^ state[5];
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	330c      	adds	r3, #12
 800220e:	6819      	ldr	r1, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3314      	adds	r3, #20
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3304      	adds	r3, #4
 800221a:	404a      	eors	r2, r1
 800221c:	601a      	str	r2, [r3, #0]
	//state[1] 	^= 0xffffffff;
	t0 			^= state[6];
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3318      	adds	r3, #24
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002226:	4053      	eors	r3, r2
 8002228:	64fb      	str	r3, [r7, #76]	; 0x4c
	state[5]	= t7 & state[7];
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	331c      	adds	r3, #28
 800222e:	6819      	ldr	r1, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3314      	adds	r3, #20
 8002234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002236:	400a      	ands	r2, r1
 8002238:	601a      	str	r2, [r3, #0]
	t14			= t4 ^ state[5];
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3314      	adds	r3, #20
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002242:	4053      	eors	r3, r2
 8002244:	617b      	str	r3, [r7, #20]
	state[6]	= t1 ^ t14;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3318      	adds	r3, #24
 800224a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	404a      	eors	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
	state[6] 	^= t5; 
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3318      	adds	r3, #24
 8002256:	6819      	ldr	r1, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3318      	adds	r3, #24
 800225c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800225e:	404a      	eors	r2, r1
 8002260:	601a      	str	r2, [r3, #0]
	state[6] 	^= state[4];
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3318      	adds	r3, #24
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3310      	adds	r3, #16
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3318      	adds	r3, #24
 8002272:	404a      	eors	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
	state[2]	= t17 ^ state[6];
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3318      	adds	r3, #24
 800227a:	6819      	ldr	r1, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3308      	adds	r3, #8
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	404a      	eors	r2, r1
 8002284:	601a      	str	r2, [r3, #0]
	state[5]	= t15 ^ state[2];
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3308      	adds	r3, #8
 800228a:	6819      	ldr	r1, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3314      	adds	r3, #20
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	404a      	eors	r2, r1
 8002294:	601a      	str	r2, [r3, #0]
	state[2] 	^= t6;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3308      	adds	r3, #8
 800229a:	6819      	ldr	r1, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3308      	adds	r3, #8
 80022a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022a2:	404a      	eors	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3308      	adds	r3, #8
 80022aa:	6819      	ldr	r1, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3308      	adds	r3, #8
 80022b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b2:	404a      	eors	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]
	//state[2] 	^= 0xffffffff;
	t14 		^= t11;
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	4053      	eors	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]
	t0 			^= t14;
 80022be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	4053      	eors	r3, r2
 80022c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	state[6] 	^= t0;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3318      	adds	r3, #24
 80022ca:	6819      	ldr	r1, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3318      	adds	r3, #24
 80022d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022d2:	404a      	eors	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]
	//state[6] 	^= 0xffffffff;
	state[7]	= t1 ^ t0;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	331c      	adds	r3, #28
 80022da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80022dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022de:	404a      	eors	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]
	//state[7] 	^= 0xffffffff;
	state[4]	= t14 ^ state[3]; 
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	330c      	adds	r3, #12
 80022e6:	6819      	ldr	r1, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3310      	adds	r3, #16
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	404a      	eors	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]
}
 80022f2:	bf00      	nop
 80022f4:	3754      	adds	r7, #84	; 0x54
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <double_shiftrows>:

/******************************************************************************
* Applies the ShiftRows transformation twice (i.e. SR^2) on the internal state.
******************************************************************************/
static void double_shiftrows(uint32_t* state) {
 80022fe:	b480      	push	{r7}
 8002300:	b085      	sub	sp, #20
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
    uint32_t tmp;
	for(int i = 0; i < 8; i++)
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	e02a      	b.n	8002362 <double_shiftrows+0x64>
        SWAPMOVE(state[i], state[i], 0x0f000f00, 4);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	4413      	add	r3, r2
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	440b      	add	r3, r1
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	4053      	eors	r3, r2
 8002324:	f003 230f 	and.w	r3, r3, #251662080	; 0xf000f00
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	6819      	ldr	r1, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	4413      	add	r3, r2
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	404a      	eors	r2, r1
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	011a      	lsls	r2, r3, #4
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4403      	add	r3, r0
 8002358:	404a      	eors	r2, r1
 800235a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3301      	adds	r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b07      	cmp	r3, #7
 8002366:	ddd1      	ble.n	800230c <double_shiftrows+0xe>
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <mixcolumns_0>:
/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 0.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 0.
******************************************************************************/
static void mixcolumns_0(uint32_t* state) {
 8002376:	b480      	push	{r7}
 8002378:	b089      	sub	sp, #36	; 0x24
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4;
	t3 = ROR(BYTE_ROR_6(state[0]),8);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	099b      	lsrs	r3, r3, #6
 8002384:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8002392:	4313      	orrs	r3, r2
 8002394:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002398:	61fb      	str	r3, [r7, #28]
	t0 = state[0] ^ t3;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	4053      	eors	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
	t1 = ROR(BYTE_ROR_6(state[7]),8);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	331c      	adds	r3, #28
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	099b      	lsrs	r3, r3, #6
 80023ac:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	331c      	adds	r3, #28
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 80023bc:	4313      	orrs	r3, r2
 80023be:	ea4f 2333 	mov.w	r3, r3, ror #8
 80023c2:	617b      	str	r3, [r7, #20]
	t2 = state[7] ^ t1;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	331c      	adds	r3, #28
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4053      	eors	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
	state[7] = ROR(BYTE_ROR_4(t2),16) ^ t1 ^ t0;
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80023e0:	4313      	orrs	r3, r2
 80023e2:	ea4f 4233 	mov.w	r2, r3, ror #16
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	ea82 0103 	eor.w	r1, r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	331c      	adds	r3, #28
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	404a      	eors	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[6]),8);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3318      	adds	r3, #24
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	099b      	lsrs	r3, r3, #6
 80023fe:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3318      	adds	r3, #24
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 800240e:	4313      	orrs	r3, r2
 8002410:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002414:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[6];
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3318      	adds	r3, #24
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4053      	eors	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
	state[6] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	405a      	eors	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	ea82 0103 	eor.w	r1, r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800243e:	4313      	orrs	r3, r2
 8002440:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3318      	adds	r3, #24
 8002448:	404a      	eors	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[5]),8);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3314      	adds	r3, #20
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	099b      	lsrs	r3, r3, #6
 8002454:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3314      	adds	r3, #20
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8002464:	4313      	orrs	r3, r2
 8002466:	ea4f 2333 	mov.w	r3, r3, ror #8
 800246a:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[5];
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3314      	adds	r3, #20
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4053      	eors	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
	state[5] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	ea82 0103 	eor.w	r1, r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002490:	4313      	orrs	r3, r2
 8002492:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3314      	adds	r3, #20
 800249a:	404a      	eors	r2, r1
 800249c:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[4]),8);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3310      	adds	r3, #16
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	099b      	lsrs	r3, r3, #6
 80024a6:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3310      	adds	r3, #16
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 80024b6:	4313      	orrs	r3, r2
 80024b8:	ea4f 2333 	mov.w	r3, r3, ror #8
 80024bc:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[4];
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3310      	adds	r3, #16
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4053      	eors	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
	state[4] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	405a      	eors	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	ea82 0103 	eor.w	r1, r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80024e6:	4313      	orrs	r3, r2
 80024e8:	ea4f 4233 	mov.w	r2, r3, ror #16
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3310      	adds	r3, #16
 80024f0:	404a      	eors	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[3]),8);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	330c      	adds	r3, #12
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	099b      	lsrs	r3, r3, #6
 80024fc:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	330c      	adds	r3, #12
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 800250c:	4313      	orrs	r3, r2
 800250e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002512:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[3];
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	330c      	adds	r3, #12
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4053      	eors	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
	state[3] = t4 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	405a      	eors	r2, r3
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	ea82 0103 	eor.w	r1, r2, r3
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800253c:	4313      	orrs	r3, r2
 800253e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	330c      	adds	r3, #12
 8002546:	404a      	eors	r2, r1
 8002548:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[2]),8);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3308      	adds	r3, #8
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3308      	adds	r3, #8
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8002562:	4313      	orrs	r3, r2
 8002564:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002568:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[2];
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3308      	adds	r3, #8
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	4053      	eors	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
	state[2] = t2 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	ea82 0103 	eor.w	r1, r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800258e:	4313      	orrs	r3, r2
 8002590:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3308      	adds	r3, #8
 8002598:	404a      	eors	r2, r1
 800259a:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[1]),8);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	099b      	lsrs	r3, r3, #6
 80025a4:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3304      	adds	r3, #4
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 80025b4:	4313      	orrs	r3, r2
 80025b6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80025ba:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[1];
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3304      	adds	r3, #4
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4053      	eors	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
	state[1] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	ea82 0103 	eor.w	r1, r2, r3
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80025e0:	4313      	orrs	r3, r2
 80025e2:	ea4f 4233 	mov.w	r2, r3, ror #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3304      	adds	r3, #4
 80025ea:	404a      	eors	r2, r1
 80025ec:	601a      	str	r2, [r3, #0]
	state[0] = t2 ^ t3 ^ ROR(BYTE_ROR_4(t0),16);
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	405a      	eors	r2, r3
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	f003 310f 	and.w	r1, r3, #252645135	; 0xf0f0f0f
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002604:	430b      	orrs	r3, r1
 8002606:	ea4f 4333 	mov.w	r3, r3, ror #16
 800260a:	405a      	eors	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	601a      	str	r2, [r3, #0]
}
 8002610:	bf00      	nop
 8002612:	3724      	adds	r7, #36	; 0x24
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <mixcolumns_1>:

/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for round i s.t. (i%4) == 1.
******************************************************************************/
static void mixcolumns_1(uint32_t* state) {
 800261c:	b480      	push	{r7}
 800261e:	b087      	sub	sp, #28
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2;
	t0 = state[0] ^ ROR(BYTE_ROR_4(state[0]),8);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 310f 	and.w	r1, r3, #252645135	; 0xf0f0f0f
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800263c:	430b      	orrs	r3, r1
 800263e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002642:	4053      	eors	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
	t1 = state[7] ^ ROR(BYTE_ROR_4(state[7]),8);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	331c      	adds	r3, #28
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	331c      	adds	r3, #28
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	091b      	lsrs	r3, r3, #4
 8002654:	f003 310f 	and.w	r1, r3, #252645135	; 0xf0f0f0f
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	331c      	adds	r3, #28
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002664:	430b      	orrs	r3, r1
 8002666:	ea4f 2333 	mov.w	r3, r3, ror #8
 800266a:	4053      	eors	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
	t2 = state[6];
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	60fb      	str	r3, [r7, #12]
	state[6] = t1 ^ t0;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3318      	adds	r3, #24
 8002678:	6939      	ldr	r1, [r7, #16]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	404a      	eors	r2, r1
 800267e:	601a      	str	r2, [r3, #0]
	state[7] ^= state[6] ^ ROR(t1,16);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	331c      	adds	r3, #28
 8002684:	6819      	ldr	r1, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3318      	adds	r3, #24
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002692:	405a      	eors	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	331c      	adds	r3, #28
 8002698:	404a      	eors	r2, r1
 800269a:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80026ac:	4313      	orrs	r3, r2
 80026ae:	ea4f 2333 	mov.w	r3, r3, ror #8
 80026b2:	613b      	str	r3, [r7, #16]
	state[6] ^= t1;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3318      	adds	r3, #24
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3318      	adds	r3, #24
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	404a      	eors	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4053      	eors	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
	state[6] ^= ROR(t1,16);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3318      	adds	r3, #24
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	ea4f 4233 	mov.w	r2, r3, ror #16
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3318      	adds	r3, #24
 80026dc:	404a      	eors	r2, r1
 80026de:	601a      	str	r2, [r3, #0]
	t2 = state[5];
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	60fb      	str	r3, [r7, #12]
	state[5] = t1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3314      	adds	r3, #20
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80026fe:	4313      	orrs	r3, r2
 8002700:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002704:	613b      	str	r3, [r7, #16]
	state[5] ^= t1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3314      	adds	r3, #20
 800270a:	6819      	ldr	r1, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3314      	adds	r3, #20
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	404a      	eors	r2, r1
 8002714:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4053      	eors	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
	state[5] ^= ROR(t1,16);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3314      	adds	r3, #20
 8002722:	6819      	ldr	r1, [r3, #0]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	ea4f 4233 	mov.w	r2, r3, ror #16
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3314      	adds	r3, #20
 800272e:	404a      	eors	r2, r1
 8002730:	601a      	str	r2, [r3, #0]
	t2 = state[4];
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	60fb      	str	r3, [r7, #12]
	state[4] = t1 ^ t0;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3310      	adds	r3, #16
 800273c:	6939      	ldr	r1, [r7, #16]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	404a      	eors	r2, r1
 8002742:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002754:	4313      	orrs	r3, r2
 8002756:	ea4f 2333 	mov.w	r3, r3, ror #8
 800275a:	613b      	str	r3, [r7, #16]
	state[4] ^= t1;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3310      	adds	r3, #16
 8002760:	6819      	ldr	r1, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3310      	adds	r3, #16
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	404a      	eors	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4053      	eors	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
	state[4] ^= ROR(t1,16);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3310      	adds	r3, #16
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3310      	adds	r3, #16
 8002784:	404a      	eors	r2, r1
 8002786:	601a      	str	r2, [r3, #0]
	t2 = state[3];
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	60fb      	str	r3, [r7, #12]
	state[3] = t1 ^ t0;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	330c      	adds	r3, #12
 8002792:	6939      	ldr	r1, [r7, #16]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	404a      	eors	r2, r1
 8002798:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80027aa:	4313      	orrs	r3, r2
 80027ac:	ea4f 2333 	mov.w	r3, r3, ror #8
 80027b0:	613b      	str	r3, [r7, #16]
	state[3] ^= t1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	330c      	adds	r3, #12
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	330c      	adds	r3, #12
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	404a      	eors	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4053      	eors	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
	state[3] ^= ROR(t1,16);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	330c      	adds	r3, #12
 80027ce:	6819      	ldr	r1, [r3, #0]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	ea4f 4233 	mov.w	r2, r3, ror #16
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	330c      	adds	r3, #12
 80027da:	404a      	eors	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]
	t2 = state[2];
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	60fb      	str	r3, [r7, #12]
	state[2] = t1;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3308      	adds	r3, #8
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80027fc:	4313      	orrs	r3, r2
 80027fe:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002802:	613b      	str	r3, [r7, #16]
	state[2] ^= t1;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3308      	adds	r3, #8
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3308      	adds	r3, #8
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	404a      	eors	r2, r1
 8002812:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4053      	eors	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
	state[2] ^= ROR(t1,16);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3308      	adds	r3, #8
 8002820:	6819      	ldr	r1, [r3, #0]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3308      	adds	r3, #8
 800282c:	404a      	eors	r2, r1
 800282e:	601a      	str	r2, [r3, #0]
	t2 = state[1];
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	60fb      	str	r3, [r7, #12]
	state[1] = t1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3304      	adds	r3, #4
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800284e:	4313      	orrs	r3, r2
 8002850:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002854:	613b      	str	r3, [r7, #16]
	state[1] ^= t1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	6819      	ldr	r1, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	404a      	eors	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4053      	eors	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
	state[1] ^= ROR(t1,16);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3304      	adds	r3, #4
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	ea4f 4233 	mov.w	r2, r3, ror #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3304      	adds	r3, #4
 800287e:	404a      	eors	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
	t2 = state[0];
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]
	state[0] = t1;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800289e:	4313      	orrs	r3, r2
 80028a0:	ea4f 2333 	mov.w	r3, r3, ror #8
 80028a4:	613b      	str	r3, [r7, #16]
	state[0] ^= t1;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	405a      	eors	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4053      	eors	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
	state[0] ^= ROR(t1,16);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	ea4f 4333 	mov.w	r3, r3, ror #16
 80028c4:	405a      	eors	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	601a      	str	r2, [r3, #0]
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <mixcolumns_2>:

/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for rounds i s.t. (i%4) == 2.
******************************************************************************/
static void mixcolumns_2(uint32_t* state) {
 80028d6:	b480      	push	{r7}
 80028d8:	b089      	sub	sp, #36	; 0x24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4;
	t3 = ROR(BYTE_ROR_2(state[0]),8);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	019b      	lsls	r3, r3, #6
 80028ee:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 80028f2:	4313      	orrs	r3, r2
 80028f4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80028f8:	61fb      	str	r3, [r7, #28]
	t0 = state[0] ^ t3;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	4053      	eors	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
	t1 = ROR(BYTE_ROR_2(state[7]),8);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	331c      	adds	r3, #28
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	331c      	adds	r3, #28
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	019b      	lsls	r3, r3, #6
 8002918:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 800291c:	4313      	orrs	r3, r2
 800291e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002922:	617b      	str	r3, [r7, #20]
	t2 = state[7] ^ t1;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	331c      	adds	r3, #28
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4053      	eors	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
	state[7] = ROR(BYTE_ROR_4(t2),16) ^ t1 ^ t0;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002940:	4313      	orrs	r3, r2
 8002942:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	ea82 0103 	eor.w	r1, r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	331c      	adds	r3, #28
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	404a      	eors	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[6]),8);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3318      	adds	r3, #24
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3318      	adds	r3, #24
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	019b      	lsls	r3, r3, #6
 800296a:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 800296e:	4313      	orrs	r3, r2
 8002970:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002974:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[6];
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3318      	adds	r3, #24
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	4053      	eors	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
	state[6] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	405a      	eors	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	ea82 0103 	eor.w	r1, r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800299e:	4313      	orrs	r3, r2
 80029a0:	ea4f 4233 	mov.w	r2, r3, ror #16
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3318      	adds	r3, #24
 80029a8:	404a      	eors	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[5]),8);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3314      	adds	r3, #20
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3314      	adds	r3, #20
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	019b      	lsls	r3, r3, #6
 80029c0:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 80029c4:	4313      	orrs	r3, r2
 80029c6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80029ca:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[5];
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3314      	adds	r3, #20
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4053      	eors	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
	state[5] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	ea82 0103 	eor.w	r1, r2, r3
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80029f0:	4313      	orrs	r3, r2
 80029f2:	ea4f 4233 	mov.w	r2, r3, ror #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3314      	adds	r3, #20
 80029fa:	404a      	eors	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[4]),8);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3310      	adds	r3, #16
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3310      	adds	r3, #16
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	019b      	lsls	r3, r3, #6
 8002a12:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8002a16:	4313      	orrs	r3, r2
 8002a18:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002a1c:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[4];
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3310      	adds	r3, #16
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4053      	eors	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
	state[4] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	405a      	eors	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	ea82 0103 	eor.w	r1, r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002a46:	4313      	orrs	r3, r2
 8002a48:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3310      	adds	r3, #16
 8002a50:	404a      	eors	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[3]),8);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	330c      	adds	r3, #12
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	330c      	adds	r3, #12
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	019b      	lsls	r3, r3, #6
 8002a68:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002a72:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[3];
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	330c      	adds	r3, #12
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4053      	eors	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
	state[3] = t4 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	405a      	eors	r2, r3
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	ea82 0103 	eor.w	r1, r2, r3
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	091b      	lsrs	r3, r3, #4
 8002a90:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	404a      	eors	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[2]),8);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3308      	adds	r3, #8
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3308      	adds	r3, #8
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	019b      	lsls	r3, r3, #6
 8002abe:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002ac8:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[2];
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3308      	adds	r3, #8
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4053      	eors	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
	state[2] = t2 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	ea82 0103 	eor.w	r1, r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002aee:	4313      	orrs	r3, r2
 8002af0:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3308      	adds	r3, #8
 8002af8:	404a      	eors	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[1]),8);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	019b      	lsls	r3, r3, #6
 8002b10:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8002b14:	4313      	orrs	r3, r2
 8002b16:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002b1a:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[1];
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4053      	eors	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
	state[1] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	ea82 0103 	eor.w	r1, r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002b40:	4313      	orrs	r3, r2
 8002b42:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	404a      	eors	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
	state[0] = t2 ^ t3 ^ ROR(BYTE_ROR_4(t0),16);
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	405a      	eors	r2, r3
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	091b      	lsrs	r3, r3, #4
 8002b58:	f003 310f 	and.w	r1, r3, #252645135	; 0xf0f0f0f
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002b64:	430b      	orrs	r3, r1
 8002b66:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002b6a:	405a      	eors	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	601a      	str	r2, [r3, #0]
}
 8002b70:	bf00      	nop
 8002b72:	3724      	adds	r7, #36	; 0x24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <mixcolumns_3>:
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 3.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 1.
* Based on Käsper-Schwabe, similar to https://github.com/Ko-/aes-armcortexm.
******************************************************************************/
static void mixcolumns_3(uint32_t* state) {
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2;
	t0 = state[7] ^ ROR(state[7],8);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	331c      	adds	r3, #28
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	331c      	adds	r3, #28
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002b94:	4053      	eors	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
	t2 = state[0] ^ ROR(state[0],8);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002ba4:	4053      	eors	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
	state[7] = t2 ^ ROR(state[7], 8) ^ ROR(t0, 16);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	331c      	adds	r3, #28
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	ea82 0103 	eor.w	r1, r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	331c      	adds	r3, #28
 8002bc2:	404a      	eors	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]
	t1 = state[6] ^ ROR(state[6],8);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3318      	adds	r3, #24
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3318      	adds	r3, #24
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002bd6:	4053      	eors	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
	state[6] = t0 ^ t2 ^ ROR(state[6], 8) ^ ROR(t1,16);
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	405a      	eors	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3318      	adds	r3, #24
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002bea:	ea82 0103 	eor.w	r1, r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3318      	adds	r3, #24
 8002bf8:	404a      	eors	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
	t0 = state[5] ^ ROR(state[5],8);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3314      	adds	r3, #20
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3314      	adds	r3, #20
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002c0c:	4053      	eors	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
	state[5] = t1 ^ ROR(state[5],8) ^ ROR(t0,16);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3314      	adds	r3, #20
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	ea82 0103 	eor.w	r1, r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3314      	adds	r3, #20
 8002c2a:	404a      	eors	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]
	t1 = state[4] ^ ROR(state[4],8);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3310      	adds	r3, #16
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3310      	adds	r3, #16
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002c3e:	4053      	eors	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
	state[4] = t0 ^ t2 ^ ROR(state[4],8) ^ ROR(t1,16);
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	405a      	eors	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3310      	adds	r3, #16
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002c52:	ea82 0103 	eor.w	r1, r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3310      	adds	r3, #16
 8002c60:	404a      	eors	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]
	t0 = state[3] ^ ROR(state[3],8);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	330c      	adds	r3, #12
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	330c      	adds	r3, #12
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002c74:	4053      	eors	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
	state[3] = t1 ^ t2 ^ ROR(state[3],8) ^ ROR(t0,16);
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	405a      	eors	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	330c      	adds	r3, #12
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002c88:	ea82 0103 	eor.w	r1, r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	330c      	adds	r3, #12
 8002c96:	404a      	eors	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]
	t1 = state[2] ^ ROR(state[2],8);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3308      	adds	r3, #8
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3308      	adds	r3, #8
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002caa:	4053      	eors	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
	state[2] = t0 ^ ROR(state[2],8) ^ ROR(t1,16);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	ea82 0103 	eor.w	r1, r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	404a      	eors	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]
	t0 = state[1] ^ ROR(state[1],8);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002cdc:	4053      	eors	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
	state[1] = t1 ^ ROR(state[1],8) ^ ROR(t0,16);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	ea82 0103 	eor.w	r1, r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	404a      	eors	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]
	state[0] = t0 ^ ROR(state[0],8) ^ ROR(t2,16);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	405a      	eors	r2, r3
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002d10:	405a      	eors	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b08c      	sub	sp, #48	; 0x30
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 8002d30:	f107 0310 	add.w	r3, r7, #16
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe fb98 	bl	800146e <packing>
	ark(state, rkeys_ffs); 				// key whitening
 8002d3e:	f107 0310 	add.w	r3, r7, #16
 8002d42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fe ffd6 	bl	8001cf6 <ark>
	sbox(state); 						// 1st round
 8002d4a:	f107 0310 	add.w	r3, r7, #16
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe fff6 	bl	8001d40 <sbox>
	mixcolumns_0(state); 				// 1st round
 8002d54:	f107 0310 	add.w	r3, r7, #16
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fb0c 	bl	8002376 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d60:	f103 0220 	add.w	r2, r3, #32
 8002d64:	f107 0310 	add.w	r3, r7, #16
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe ffc3 	bl	8001cf6 <ark>
	sbox(state); 						// 2nd round
 8002d70:	f107 0310 	add.w	r3, r7, #16
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe ffe3 	bl	8001d40 <sbox>
	mixcolumns_1(state); 				// 2nd round
 8002d7a:	f107 0310 	add.w	r3, r7, #16
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fc4c 	bl	800261c <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 8002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d86:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002d8a:	f107 0310 	add.w	r3, r7, #16
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe ffb0 	bl	8001cf6 <ark>
	sbox(state); 						// 3rd round
 8002d96:	f107 0310 	add.w	r3, r7, #16
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe ffd0 	bl	8001d40 <sbox>
	mixcolumns_2(state); 				// 3rd round
 8002da0:	f107 0310 	add.w	r3, r7, #16
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fd96 	bl	80028d6 <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002db0:	f107 0310 	add.w	r3, r7, #16
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe ff9d 	bl	8001cf6 <ark>
	sbox(state); 						// 4th round
 8002dbc:	f107 0310 	add.w	r3, r7, #16
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe ffbd 	bl	8001d40 <sbox>
	mixcolumns_3(state); 				// 4th round
 8002dc6:	f107 0310 	add.w	r3, r7, #16
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fed6 	bl	8002b7c <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 8002dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd2:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002dd6:	f107 0310 	add.w	r3, r7, #16
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe ff8a 	bl	8001cf6 <ark>
	sbox(state); 						// 5th round
 8002de2:	f107 0310 	add.w	r3, r7, #16
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe ffaa 	bl	8001d40 <sbox>
	mixcolumns_0(state); 				// 5th round
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fac0 	bl	8002376 <mixcolumns_0>
	ark(state, rkeys_ffs + 40); 		// 5th round
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8002dfc:	f107 0310 	add.w	r3, r7, #16
 8002e00:	4611      	mov	r1, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe ff77 	bl	8001cf6 <ark>
	sbox(state);						// 6th round
 8002e08:	f107 0310 	add.w	r3, r7, #16
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe ff97 	bl	8001d40 <sbox>
	mixcolumns_1(state); 				// 6th round
 8002e12:	f107 0310 	add.w	r3, r7, #16
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fc00 	bl	800261c <mixcolumns_1>
	ark(state, rkeys_ffs + 48); 		// 6th round
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1e:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 8002e22:	f107 0310 	add.w	r3, r7, #16
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe ff64 	bl	8001cf6 <ark>
	sbox(state); 						// 7th round
 8002e2e:	f107 0310 	add.w	r3, r7, #16
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe ff84 	bl	8001d40 <sbox>
	mixcolumns_2(state); 				// 7th round
 8002e38:	f107 0310 	add.w	r3, r7, #16
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fd4a 	bl	80028d6 <mixcolumns_2>
	ark(state, rkeys_ffs + 56); 		// 7th round
 8002e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e44:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8002e48:	f107 0310 	add.w	r3, r7, #16
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe ff51 	bl	8001cf6 <ark>
	sbox(state); 						// 8th round
 8002e54:	f107 0310 	add.w	r3, r7, #16
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe ff71 	bl	8001d40 <sbox>
	mixcolumns_3(state); 				// 8th round
 8002e5e:	f107 0310 	add.w	r3, r7, #16
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fe8a 	bl	8002b7c <mixcolumns_3>
	ark(state, rkeys_ffs + 64); 		// 8th round
 8002e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8002e6e:	f107 0310 	add.w	r3, r7, #16
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe ff3e 	bl	8001cf6 <ark>
	sbox(state); 						// 9th round
 8002e7a:	f107 0310 	add.w	r3, r7, #16
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe ff5e 	bl	8001d40 <sbox>
	mixcolumns_0(state); 				// 9th round
 8002e84:	f107 0310 	add.w	r3, r7, #16
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fa74 	bl	8002376 <mixcolumns_0>
	ark(state, rkeys_ffs + 72); 		// 9th round
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8002e94:	f107 0310 	add.w	r3, r7, #16
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe ff2b 	bl	8001cf6 <ark>
	sbox(state); 						// 10th round
 8002ea0:	f107 0310 	add.w	r3, r7, #16
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe ff4b 	bl	8001d40 <sbox>
	double_shiftrows(state); 			// 10th round (resynchronization)
 8002eaa:	f107 0310 	add.w	r3, r7, #16
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff fa25 	bl	80022fe <double_shiftrows>
	ark(state, rkeys_ffs + 80); 		// 10th round
 8002eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8002eba:	f107 0310 	add.w	r3, r7, #16
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe ff18 	bl	8001cf6 <ark>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 8002ec6:	f107 0310 	add.w	r3, r7, #16
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f7fe fccc 	bl	800186c <unpacking>
}
 8002ed4:	bf00      	nop
 8002ed6:	3730      	adds	r7, #48	; 0x30
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <two_Rounds_aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void two_Rounds_aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08c      	sub	sp, #48	; 0x30
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 8002eea:	f107 0310 	add.w	r3, r7, #16
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe fabb 	bl	800146e <packing>
	ark(state, rkeys_ffs); 				// key whitening
 8002ef8:	f107 0310 	add.w	r3, r7, #16
 8002efc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fef9 	bl	8001cf6 <ark>
	sbox(state); 						// 1st round
 8002f04:	f107 0310 	add.w	r3, r7, #16
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe ff19 	bl	8001d40 <sbox>
	mixcolumns_0(state); 				// 1st round
 8002f0e:	f107 0310 	add.w	r3, r7, #16
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fa2f 	bl	8002376 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 8002f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1a:	f103 0220 	add.w	r2, r3, #32
 8002f1e:	f107 0310 	add.w	r3, r7, #16
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fe fee6 	bl	8001cf6 <ark>
	sbox(state); 						// 2nd round
 8002f2a:	f107 0310 	add.w	r3, r7, #16
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe ff06 	bl	8001d40 <sbox>
	mixcolumns_1(state); 				// 2nd round
 8002f34:	f107 0310 	add.w	r3, r7, #16
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fb6f 	bl	800261c <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 8002f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f40:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002f44:	f107 0310 	add.w	r3, r7, #16
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fed3 	bl	8001cf6 <ark>
	double_shiftrows(state); 			// 10th round (resynchronization)
 8002f50:	f107 0310 	add.w	r3, r7, #16
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff f9d2 	bl	80022fe <double_shiftrows>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 8002f5a:	f107 0310 	add.w	r3, r7, #16
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f7fe fc82 	bl	800186c <unpacking>
}
 8002f68:	bf00      	nop
 8002f6a:	3730      	adds	r7, #48	; 0x30
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <inv_shiftrows_1>:


/******************************************************************************
* Applies ShiftRows^(-1) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_1(uint32_t* rkey) {
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++) {
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e052      	b.n	8003024 <inv_shiftrows_1+0xb4>
		SWAPMOVE(rkey[i], rkey[i], 0x0c0f0300, 4);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	440b      	add	r3, r1
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	091b      	lsrs	r3, r3, #4
 8002f94:	405a      	eors	r2, r3
 8002f96:	4b28      	ldr	r3, [pc, #160]	; (8003038 <inv_shiftrows_1+0xc8>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	404a      	eors	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	4413      	add	r3, r2
 8002fbc:	6819      	ldr	r1, [r3, #0]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	011a      	lsls	r2, r3, #4
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4403      	add	r3, r0
 8002fca:	404a      	eors	r2, r1
 8002fcc:	601a      	str	r2, [r3, #0]
		SWAPMOVE(rkey[i], rkey[i], 0x33003300, 2);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	440b      	add	r3, r1
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	4053      	eors	r3, r2
 8002fe6:	f003 2333 	and.w	r3, r3, #855651072	; 0x33003300
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	404a      	eors	r2, r1
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	6819      	ldr	r1, [r3, #0]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	009a      	lsls	r2, r3, #2
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4403      	add	r3, r0
 800301a:	404a      	eors	r2, r1
 800301c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	3301      	adds	r3, #1
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b07      	cmp	r3, #7
 8003028:	dda9      	ble.n	8002f7e <inv_shiftrows_1+0xe>
	}
}
 800302a:	bf00      	nop
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	0c0f0300 	.word	0x0c0f0300

0800303c <inv_shiftrows_2>:
/******************************************************************************
* Applies ShiftRows^(-2) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_2(uint32_t* rkey) {
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++)
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e02a      	b.n	80030a0 <inv_shiftrows_2+0x64>
		SWAPMOVE(rkey[i], rkey[i], 0x0f000f00, 4);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	440b      	add	r3, r1
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	091b      	lsrs	r3, r3, #4
 8003060:	4053      	eors	r3, r2
 8003062:	f003 230f 	and.w	r3, r3, #251662080	; 0xf000f00
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	4413      	add	r3, r2
 8003070:	6819      	ldr	r1, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	404a      	eors	r2, r1
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	4413      	add	r3, r2
 8003088:	6819      	ldr	r1, [r3, #0]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	011a      	lsls	r2, r3, #4
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	4403      	add	r3, r0
 8003096:	404a      	eors	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3301      	adds	r3, #1
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b07      	cmp	r3, #7
 80030a4:	ddd1      	ble.n	800304a <inv_shiftrows_2+0xe>
}
 80030a6:	bf00      	nop
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <inv_shiftrows_3>:

/******************************************************************************
* Applies ShiftRows^(-3) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_3(uint32_t* rkey) {
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++) {
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e052      	b.n	8003168 <inv_shiftrows_3+0xb4>
		SWAPMOVE(rkey[i], rkey[i], 0x030f0c00, 4);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	440b      	add	r3, r1
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	405a      	eors	r2, r3
 80030da:	4b28      	ldr	r3, [pc, #160]	; (800317c <inv_shiftrows_3+0xc8>)
 80030dc:	4013      	ands	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4413      	add	r3, r2
 80030e8:	6819      	ldr	r1, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	404a      	eors	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	4413      	add	r3, r2
 8003100:	6819      	ldr	r1, [r3, #0]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	011a      	lsls	r2, r3, #4
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4403      	add	r3, r0
 800310e:	404a      	eors	r2, r1
 8003110:	601a      	str	r2, [r3, #0]
		SWAPMOVE(rkey[i], rkey[i], 0x33003300, 2);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	440b      	add	r3, r1
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	089b      	lsrs	r3, r3, #2
 8003128:	4053      	eors	r3, r2
 800312a:	f003 2333 	and.w	r3, r3, #855651072	; 0x33003300
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	4413      	add	r3, r2
 8003138:	6819      	ldr	r1, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	404a      	eors	r2, r1
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	6819      	ldr	r1, [r3, #0]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	009a      	lsls	r2, r3, #2
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4403      	add	r3, r0
 800315e:	404a      	eors	r2, r1
 8003160:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3301      	adds	r3, #1
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b07      	cmp	r3, #7
 800316c:	dda9      	ble.n	80030c2 <inv_shiftrows_3+0xe>
	}
}
 800316e:	bf00      	nop
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	030f0c00 	.word	0x030f0c00

08003180 <xor_columns>:
* involved in the XOR computation (should be 8 and 16 for AES-128 and AES-256,
* respectively).
* The idx_ror parameter refers to the rotation value. When a Rotword is applied
* the value should be 2, 26 otherwise.
******************************************************************************/
static void xor_columns(uint32_t* rkeys, int idx_xor, int idx_ror) {
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
	rkeys[1] ^= 0xffffffff; 			// NOT that are omitted in S-box
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3304      	adds	r3, #4
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	3304      	adds	r3, #4
 8003196:	43d2      	mvns	r2, r2
 8003198:	601a      	str	r2, [r3, #0]
	rkeys[2] ^= 0xffffffff; 			// NOT that are omitted in S-box
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3308      	adds	r3, #8
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	3308      	adds	r3, #8
 80031a4:	43d2      	mvns	r2, r2
 80031a6:	601a      	str	r2, [r3, #0]
	rkeys[6] ^= 0xffffffff; 			// NOT that are omitted in S-box
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3318      	adds	r3, #24
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3318      	adds	r3, #24
 80031b2:	43d2      	mvns	r2, r2
 80031b4:	601a      	str	r2, [r3, #0]
	rkeys[7] ^= 0xffffffff; 			// NOT that are omitted in S-box
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	331c      	adds	r3, #28
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	331c      	adds	r3, #28
 80031c0:	43d2      	mvns	r2, r2
 80031c2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	e06a      	b.n	80032a0 <xor_columns+0x120>
		rkeys[i] = (rkeys[i-idx_xor] ^ ROR(rkeys[i], idx_ror))  & 0xc0c0c0c0;
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4413      	add	r3, r2
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	68f9      	ldr	r1, [r7, #12]
 80031de:	440b      	add	r3, r1
 80031e0:	6819      	ldr	r1, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	fa61 f303 	ror.w	r3, r1, r3
 80031e8:	405a      	eors	r2, r3
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	440b      	add	r3, r1
 80031f2:	f002 32c0 	and.w	r2, r2, #3233857728	; 0xc0c0c0c0
 80031f6:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x30303030);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	6819      	ldr	r1, [r3, #0]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4413      	add	r3, r2
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	4403      	add	r3, r0
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	089b      	lsrs	r3, r3, #2
 800321c:	4053      	eors	r3, r2
 800321e:	f003 3230 	and.w	r2, r3, #808464432	; 0x30303030
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	4403      	add	r3, r0
 800322a:	430a      	orrs	r2, r1
 800322c:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x0c0c0c0c);
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4413      	add	r3, r2
 8003236:	6819      	ldr	r1, [r3, #0]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	4403      	add	r3, r0
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	4053      	eors	r3, r2
 8003254:	f003 320c 	and.w	r2, r3, #202116108	; 0xc0c0c0c
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	4403      	add	r3, r0
 8003260:	430a      	orrs	r2, r1
 8003262:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x03030303);
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	6819      	ldr	r1, [r3, #0]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4413      	add	r3, r2
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	4403      	add	r3, r0
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	4053      	eors	r3, r2
 800328a:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	4403      	add	r3, r0
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	3301      	adds	r3, #1
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b07      	cmp	r3, #7
 80032a4:	dd91      	ble.n	80031ca <xor_columns+0x4a>
	}
}
 80032a6:	bf00      	nop
 80032a8:	bf00      	nop
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <aes128_keyschedule_ffs>:
* Fully bitsliced AES-128 key schedule to match the fully-fixsliced (ffs)
* representation. Note that it is possible to pass two different keys as input
* parameters if one wants to encrypt 2 blocks with two different keys.
******************************************************************************/
void aes128_keyschedule_ffs(uint32_t* rkeys, const unsigned char* key0,
						const unsigned char* key1) {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
	packing(rkeys, key0, key1); 	// packs the keys into the bitsliced state
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f7fe f8d2 	bl	800146e <packing>
	memcpy(rkeys+8, rkeys, 32);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3320      	adds	r3, #32
 80032ce:	2220      	movs	r2, #32
 80032d0:	68f9      	ldr	r1, [r7, #12]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f004 f91a 	bl	800750c <memcpy>
	sbox(rkeys+8);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3320      	adds	r3, #32
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fd2f 	bl	8001d40 <sbox>
	rkeys[15] ^= 0x00000300; 		// 1st rconst
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	333c      	adds	r3, #60	; 0x3c
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	333c      	adds	r3, #60	; 0x3c
 80032ec:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 80032f0:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+8, 8, 2); 	// Rotword and XOR between the columns
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3320      	adds	r3, #32
 80032f6:	2202      	movs	r2, #2
 80032f8:	2108      	movs	r1, #8
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ff40 	bl	8003180 <xor_columns>
	memcpy(rkeys+16, rkeys+8, 32);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	3320      	adds	r3, #32
 800330a:	2220      	movs	r2, #32
 800330c:	4619      	mov	r1, r3
 800330e:	f004 f8fd 	bl	800750c <memcpy>
	sbox(rkeys+16);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3340      	adds	r3, #64	; 0x40
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe fd12 	bl	8001d40 <sbox>
	rkeys[22] ^= 0x00000300;		// 2nd rconst
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3358      	adds	r3, #88	; 0x58
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3358      	adds	r3, #88	; 0x58
 8003326:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 800332a:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+16, 8, 2); 	// Rotword and XOR between the columns
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3340      	adds	r3, #64	; 0x40
 8003330:	2202      	movs	r2, #2
 8003332:	2108      	movs	r1, #8
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff23 	bl	8003180 <xor_columns>
	inv_shiftrows_1(rkeys+8); 		// to match fixslicing
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3320      	adds	r3, #32
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fe16 	bl	8002f70 <inv_shiftrows_1>
	memcpy(rkeys+24, rkeys+16, 32);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	3340      	adds	r3, #64	; 0x40
 800334e:	2220      	movs	r2, #32
 8003350:	4619      	mov	r1, r3
 8003352:	f004 f8db 	bl	800750c <memcpy>
	sbox(rkeys+24);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	3360      	adds	r3, #96	; 0x60
 800335a:	4618      	mov	r0, r3
 800335c:	f7fe fcf0 	bl	8001d40 <sbox>
	rkeys[29] ^= 0x00000300;		// 3rd rconst
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3374      	adds	r3, #116	; 0x74
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	3374      	adds	r3, #116	; 0x74
 800336a:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 800336e:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+24, 8, 2); 	// Rotword and XOR between the columns
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3360      	adds	r3, #96	; 0x60
 8003374:	2202      	movs	r2, #2
 8003376:	2108      	movs	r1, #8
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff01 	bl	8003180 <xor_columns>
	inv_shiftrows_2(rkeys+16); 		// to match fixslicing
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	3340      	adds	r3, #64	; 0x40
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fe5a 	bl	800303c <inv_shiftrows_2>
	memcpy(rkeys+32, rkeys+24, 32);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3360      	adds	r3, #96	; 0x60
 8003392:	2220      	movs	r2, #32
 8003394:	4619      	mov	r1, r3
 8003396:	f004 f8b9 	bl	800750c <memcpy>
	sbox(rkeys+32);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	3380      	adds	r3, #128	; 0x80
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fcce 	bl	8001d40 <sbox>
	rkeys[36] ^= 0x00000300; 		// 4th rconst
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3390      	adds	r3, #144	; 0x90
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3390      	adds	r3, #144	; 0x90
 80033ae:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 80033b2:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+32, 8, 2); 	// Rotword and XOR between the columns
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3380      	adds	r3, #128	; 0x80
 80033b8:	2202      	movs	r2, #2
 80033ba:	2108      	movs	r1, #8
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fedf 	bl	8003180 <xor_columns>
	inv_shiftrows_3(rkeys+24); 		// to match fixslicing
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3360      	adds	r3, #96	; 0x60
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fe74 	bl	80030b4 <inv_shiftrows_3>
	memcpy(rkeys+40, rkeys+32, 32);	
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	3380      	adds	r3, #128	; 0x80
 80033d6:	2220      	movs	r2, #32
 80033d8:	4619      	mov	r1, r3
 80033da:	f004 f897 	bl	800750c <memcpy>
	sbox(rkeys+40);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	33a0      	adds	r3, #160	; 0xa0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe fcac 	bl	8001d40 <sbox>
	rkeys[43] ^= 0x00000300; 		// 5th rconst
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	33ac      	adds	r3, #172	; 0xac
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	33ac      	adds	r3, #172	; 0xac
 80033f2:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 80033f6:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+40, 8, 2); 	// Rotword and XOR between the columns
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	33a0      	adds	r3, #160	; 0xa0
 80033fc:	2202      	movs	r2, #2
 80033fe:	2108      	movs	r1, #8
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff febd 	bl	8003180 <xor_columns>
	memcpy(rkeys+48, rkeys+40, 32);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	33a0      	adds	r3, #160	; 0xa0
 8003410:	2220      	movs	r2, #32
 8003412:	4619      	mov	r1, r3
 8003414:	f004 f87a 	bl	800750c <memcpy>
	sbox(rkeys+48);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	33c0      	adds	r3, #192	; 0xc0
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe fc8f 	bl	8001d40 <sbox>
	rkeys[50] ^= 0x00000300;		// 6th rconst
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	33c8      	adds	r3, #200	; 0xc8
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	33c8      	adds	r3, #200	; 0xc8
 800342c:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8003430:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+48, 8, 2); 	// Rotword and XOR between the columns
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	33c0      	adds	r3, #192	; 0xc0
 8003436:	2202      	movs	r2, #2
 8003438:	2108      	movs	r1, #8
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fea0 	bl	8003180 <xor_columns>
	inv_shiftrows_1(rkeys+40); 		// to match fixslicing
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	33a0      	adds	r3, #160	; 0xa0
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fd93 	bl	8002f70 <inv_shiftrows_1>
	memcpy(rkeys+56, rkeys+48, 32);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	33c0      	adds	r3, #192	; 0xc0
 8003454:	2220      	movs	r2, #32
 8003456:	4619      	mov	r1, r3
 8003458:	f004 f858 	bl	800750c <memcpy>
	sbox(rkeys+56);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	33e0      	adds	r3, #224	; 0xe0
 8003460:	4618      	mov	r0, r3
 8003462:	f7fe fc6d 	bl	8001d40 <sbox>
	rkeys[57] ^= 0x00000300;		// 7th rconst
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	33e4      	adds	r3, #228	; 0xe4
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	33e4      	adds	r3, #228	; 0xe4
 8003470:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8003474:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+56, 8, 2); 	// Rotword and XOR between the columns
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	33e0      	adds	r3, #224	; 0xe0
 800347a:	2202      	movs	r2, #2
 800347c:	2108      	movs	r1, #8
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fe7e 	bl	8003180 <xor_columns>
	inv_shiftrows_2(rkeys+48); 		// to match fixslicing
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	33c0      	adds	r3, #192	; 0xc0
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff fdd7 	bl	800303c <inv_shiftrows_2>
	memcpy(rkeys+64, rkeys+56, 32);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	33e0      	adds	r3, #224	; 0xe0
 8003498:	2220      	movs	r2, #32
 800349a:	4619      	mov	r1, r3
 800349c:	f004 f836 	bl	800750c <memcpy>
	sbox(rkeys+64);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe fc4a 	bl	8001d40 <sbox>
	rkeys[64] ^= 0x00000300;		// 8th rconst
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034ba:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 80034be:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+64, 8, 2); 	// Rotword and XOR between the columns
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034c6:	2202      	movs	r2, #2
 80034c8:	2108      	movs	r1, #8
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fe58 	bl	8003180 <xor_columns>
	inv_shiftrows_3(rkeys+56); 		// to match fixslicing
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	33e0      	adds	r3, #224	; 0xe0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fded 	bl	80030b4 <inv_shiftrows_3>
	memcpy(rkeys+72, rkeys+64, 32);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f503 7090 	add.w	r0, r3, #288	; 0x120
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034e6:	2220      	movs	r2, #32
 80034e8:	4619      	mov	r1, r3
 80034ea:	f004 f80f 	bl	800750c <memcpy>
	sbox(rkeys+72);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe fc23 	bl	8001d40 <sbox>
	rkeys[79] ^= 0x00000300; 		// 9th rconst
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003508:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 800350c:	601a      	str	r2, [r3, #0]
	rkeys[78] ^= 0x00000300; 		// 9th rconst
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800351c:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8003520:	601a      	str	r2, [r3, #0]
	rkeys[76] ^= 0x00000300; 		// 9th rconst
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003530:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8003534:	601a      	str	r2, [r3, #0]
	rkeys[75] ^= 0x00000300; 		// 9th rconst
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003544:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8003548:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys + 72, 8, 2); 	// Rotword and XOR between the columns
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003550:	2202      	movs	r2, #2
 8003552:	2108      	movs	r1, #8
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fe13 	bl	8003180 <xor_columns>
	memcpy(rkeys+80, rkeys+72, 32);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003566:	2220      	movs	r2, #32
 8003568:	4619      	mov	r1, r3
 800356a:	f003 ffcf 	bl	800750c <memcpy>
	sbox(rkeys+80);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003574:	4618      	mov	r0, r3
 8003576:	f7fe fbe3 	bl	8001d40 <sbox>
	rkeys[86] ^= 0x00000300; 		// 10th rconst
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8003588:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 800358c:	601a      	str	r2, [r3, #0]
	rkeys[85] ^= 0x00000300; 		// 10th rconst
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800359c:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 80035a0:	601a      	str	r2, [r3, #0]
	rkeys[83] ^= 0x00000300;		// 10th rconst
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80035b0:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 80035b4:	601a      	str	r2, [r3, #0]
	rkeys[82] ^= 0x00000300; 		// 10th rconst
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80035c4:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 80035c8:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+80, 8, 2); 	// Rotword and XOR between the columns
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80035d0:	2202      	movs	r2, #2
 80035d2:	2108      	movs	r1, #8
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fdd3 	bl	8003180 <xor_columns>
	inv_shiftrows_1(rkeys+72);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fcc5 	bl	8002f70 <inv_shiftrows_1>
	for(int i = 1; i < 11; i++) {
 80035e6:	2301      	movs	r3, #1
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e036      	b.n	800365a <aes128_keyschedule_ffs+0x3a6>
		rkeys[i*8 + 1] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	015b      	lsls	r3, r3, #5
 80035f0:	3304      	adds	r3, #4
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4413      	add	r3, r2
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	015b      	lsls	r3, r3, #5
 80035fc:	3304      	adds	r3, #4
 80035fe:	68f9      	ldr	r1, [r7, #12]
 8003600:	440b      	add	r3, r1
 8003602:	43d2      	mvns	r2, r2
 8003604:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 2] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	015b      	lsls	r3, r3, #5
 800360a:	3308      	adds	r3, #8
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4413      	add	r3, r2
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	015b      	lsls	r3, r3, #5
 8003616:	3308      	adds	r3, #8
 8003618:	68f9      	ldr	r1, [r7, #12]
 800361a:	440b      	add	r3, r1
 800361c:	43d2      	mvns	r2, r2
 800361e:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 6] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	015b      	lsls	r3, r3, #5
 8003624:	3318      	adds	r3, #24
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4413      	add	r3, r2
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	015b      	lsls	r3, r3, #5
 8003630:	3318      	adds	r3, #24
 8003632:	68f9      	ldr	r1, [r7, #12]
 8003634:	440b      	add	r3, r1
 8003636:	43d2      	mvns	r2, r2
 8003638:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 7] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	015b      	lsls	r3, r3, #5
 800363e:	331c      	adds	r3, #28
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	015b      	lsls	r3, r3, #5
 800364a:	331c      	adds	r3, #28
 800364c:	68f9      	ldr	r1, [r7, #12]
 800364e:	440b      	add	r3, r1
 8003650:	43d2      	mvns	r2, r2
 8003652:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 11; i++) {
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	3301      	adds	r3, #1
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b0a      	cmp	r3, #10
 800365e:	ddc5      	ble.n	80035ec <aes128_keyschedule_ffs+0x338>
	// 	printf("%x \n", rkeys[i]);
	// }
	


}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <serial_printf>:
 *      Author: cuauhtemoc
 */

#include "Serial.h"

void serial_printf(UART_HandleTypeDef *huart, uint8_t *pData, uint32_t Timeout){
 800366a:	b580      	push	{r7, lr}
 800366c:	b086      	sub	sp, #24
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
	uint16_t Size = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	82fb      	strh	r3, [r7, #22]
	do{
		Size++;
 800367a:	8afb      	ldrh	r3, [r7, #22]
 800367c:	3301      	adds	r3, #1
 800367e:	82fb      	strh	r3, [r7, #22]
	}while(pData[Size]!='\0');
 8003680:	8afb      	ldrh	r3, [r7, #22]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	4413      	add	r3, r2
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f6      	bne.n	800367a <serial_printf+0x10>
	HAL_UART_Transmit(huart, pData,Size, HAL_MAX_DELAY);
 800368c:	8afa      	ldrh	r2, [r7, #22]
 800368e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003692:	68b9      	ldr	r1, [r7, #8]
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f002 ff69 	bl	800656c <HAL_UART_Transmit>
}
 800369a:	bf00      	nop
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <DWT_Init>:
static unsigned char asociated_data[plaintext_size];
static unsigned int bytes[7] = {32, 64, 128, 192, 256, 320, 512};

char buffer [1024];
unsigned int performance[REP];
void DWT_Init(void) {
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0

    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <DWT_Init+0x34>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <DWT_Init+0x34>)
 80036ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b2:	60d3      	str	r3, [r2, #12]
    DWT->LAR = 0xC5ACCE55;
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <DWT_Init+0x38>)
 80036b6:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <DWT_Init+0x3c>)
 80036b8:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    DWT->CYCCNT = 0;
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <DWT_Init+0x38>)
 80036be:	2200      	movs	r2, #0
 80036c0:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80036c2:	4b06      	ldr	r3, [pc, #24]	; (80036dc <DWT_Init+0x38>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a05      	ldr	r2, [pc, #20]	; (80036dc <DWT_Init+0x38>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6013      	str	r3, [r2, #0]
}
 80036ce:	bf00      	nop
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	e000edf0 	.word	0xe000edf0
 80036dc:	e0001000 	.word	0xe0001000
 80036e0:	c5acce55 	.word	0xc5acce55

080036e4 <start_timer>:

void start_timer(void) {
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0;
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <start_timer+0x14>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	605a      	str	r2, [r3, #4]
}
 80036ee:	bf00      	nop
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	e0001000 	.word	0xe0001000

080036fc <stop_timer>:

uint32_t stop_timer(void) {
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <stop_timer+0x14>)
 8003702:	685b      	ldr	r3, [r3, #4]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	e0001000 	.word	0xe0001000

08003714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b090      	sub	sp, #64	; 0x40
 8003718:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800371a:	f000 fe74 	bl	8004406 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800371e:	f000 fa65 	bl	8003bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003722:	f000 fb77 	bl	8003e14 <MX_GPIO_Init>
  MX_ETH_Init();
 8003726:	f000 fac9 	bl	8003cbc <MX_ETH_Init>
  MX_USART3_UART_Init();
 800372a:	f000 fb15 	bl	8003d58 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800372e:	f000 fb43 	bl	8003db8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */


  for (size_t i = 0; i < plaintext_size; i++)
 8003732:	2300      	movs	r3, #0
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003736:	e010      	b.n	800375a <main+0x46>
  {
	  plaintext[i] =i;
 8003738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373a:	b2d9      	uxtb	r1, r3
 800373c:	4a9b      	ldr	r2, [pc, #620]	; (80039ac <main+0x298>)
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	4413      	add	r3, r2
 8003742:	460a      	mov	r2, r1
 8003744:	701a      	strb	r2, [r3, #0]
	  asociated_data[i]=i;
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	b2d9      	uxtb	r1, r3
 800374a:	4a99      	ldr	r2, [pc, #612]	; (80039b0 <main+0x29c>)
 800374c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374e:	4413      	add	r3, r2
 8003750:	460a      	mov	r2, r1
 8003752:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < plaintext_size; i++)
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	3301      	adds	r3, #1
 8003758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003760:	d3ea      	bcc.n	8003738 <main+0x24>
  }

  DWT_Init(); // Inicializar el contador de ciclos
 8003762:	f7ff ff9f 	bl	80036a4 <DWT_Init>
  uint32_t cycles=0;
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]
  uint32_t total_cycles=0;
 800376a:	2300      	movs	r3, #0
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28

  int i=0;
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	; 0x24





    i=0;
 8003772:	2300      	movs	r3, #0
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
    cycles=0;
 8003776:	2300      	movs	r3, #0
 8003778:	607b      	str	r3, [r7, #4]
    total_cycles=0;
 800377a:	2300      	movs	r3, #0
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28
	sprintf(buffer,"\n PMAC-OCBRA");
 800377e:	498d      	ldr	r1, [pc, #564]	; (80039b4 <main+0x2a0>)
 8003780:	488d      	ldr	r0, [pc, #564]	; (80039b8 <main+0x2a4>)
 8003782:	f003 fe6f 	bl	8007464 <siprintf>
		serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800378a:	498b      	ldr	r1, [pc, #556]	; (80039b8 <main+0x2a4>)
 800378c:	488b      	ldr	r0, [pc, #556]	; (80039bc <main+0x2a8>)
 800378e:	f7ff ff6c 	bl	800366a <serial_printf>
		for (int j = 0; j < Number_test; j++) {
 8003792:	2300      	movs	r3, #0
 8003794:	623b      	str	r3, [r7, #32]
 8003796:	e02a      	b.n	80037ee <main+0xda>
			for (i = 0; i < REP; i++) {
 8003798:	2300      	movs	r3, #0
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
 800379c:	e016      	b.n	80037cc <main+0xb8>
				start_timer(); // Iniciar el contador de ciclos
 800379e:	f7ff ffa1 	bl	80036e4 <start_timer>
				PMAC(nonce, asociated_data, bytes[j], key1, tag);
 80037a2:	4a87      	ldr	r2, [pc, #540]	; (80039c0 <main+0x2ac>)
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80037aa:	4b86      	ldr	r3, [pc, #536]	; (80039c4 <main+0x2b0>)
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	4b86      	ldr	r3, [pc, #536]	; (80039c8 <main+0x2b4>)
 80037b0:	497f      	ldr	r1, [pc, #508]	; (80039b0 <main+0x29c>)
 80037b2:	4886      	ldr	r0, [pc, #536]	; (80039cc <main+0x2b8>)
 80037b4:	f7fd f990 	bl	8000ad8 <PMAC>
				cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 80037b8:	f7ff ffa0 	bl	80036fc <stop_timer>
 80037bc:	6078      	str	r0, [r7, #4]
				  total_cycles=cycles+total_cycles;
 80037be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4413      	add	r3, r2
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
			for (i = 0; i < REP; i++) {
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	3301      	adds	r3, #1
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	2b1d      	cmp	r3, #29
 80037d0:	dde5      	ble.n	800379e <main+0x8a>
			  }
			  performance[j] = total_cycles/REP;
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	4a7e      	ldr	r2, [pc, #504]	; (80039d0 <main+0x2bc>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	091a      	lsrs	r2, r3, #4
 80037dc:	497d      	ldr	r1, [pc, #500]	; (80039d4 <main+0x2c0>)
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  total_cycles=0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int j = 0; j < Number_test; j++) {
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	3301      	adds	r3, #1
 80037ec:	623b      	str	r3, [r7, #32]
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	2b06      	cmp	r3, #6
 80037f2:	ddd1      	ble.n	8003798 <main+0x84>
		  }
	  for (i = 0; i < Number_test; i++) {
 80037f4:	2300      	movs	r3, #0
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
 80037f8:	e020      	b.n	800383c <main+0x128>
			sprintf(buffer,"\n bytes %u ", bytes[i]);
 80037fa:	4a71      	ldr	r2, [pc, #452]	; (80039c0 <main+0x2ac>)
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003802:	461a      	mov	r2, r3
 8003804:	4974      	ldr	r1, [pc, #464]	; (80039d8 <main+0x2c4>)
 8003806:	486c      	ldr	r0, [pc, #432]	; (80039b8 <main+0x2a4>)
 8003808:	f003 fe2c 	bl	8007464 <siprintf>
			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 800380c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003810:	4969      	ldr	r1, [pc, #420]	; (80039b8 <main+0x2a4>)
 8003812:	486a      	ldr	r0, [pc, #424]	; (80039bc <main+0x2a8>)
 8003814:	f7ff ff29 	bl	800366a <serial_printf>
			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 8003818:	4a6e      	ldr	r2, [pc, #440]	; (80039d4 <main+0x2c0>)
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003822:	496e      	ldr	r1, [pc, #440]	; (80039dc <main+0x2c8>)
 8003824:	4864      	ldr	r0, [pc, #400]	; (80039b8 <main+0x2a4>)
 8003826:	f003 fe1d 	bl	8007464 <siprintf>
			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 800382a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800382e:	4962      	ldr	r1, [pc, #392]	; (80039b8 <main+0x2a4>)
 8003830:	4862      	ldr	r0, [pc, #392]	; (80039bc <main+0x2a8>)
 8003832:	f7ff ff1a 	bl	800366a <serial_printf>
	  for (i = 0; i < Number_test; i++) {
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	3301      	adds	r3, #1
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	2b06      	cmp	r3, #6
 8003840:	dddb      	ble.n	80037fa <main+0xe6>
	   }


	  i=0;
 8003842:	2300      	movs	r3, #0
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
	  cycles=0;
 8003846:	2300      	movs	r3, #0
 8003848:	607b      	str	r3, [r7, #4]
	  total_cycles=0;
 800384a:	2300      	movs	r3, #0
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
	  for (size_t i = 0; i < plaintext_size; i++)
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	e010      	b.n	8003876 <main+0x162>
		  {
			  plaintext[i] =i;
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	b2d9      	uxtb	r1, r3
 8003858:	4a54      	ldr	r2, [pc, #336]	; (80039ac <main+0x298>)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	460a      	mov	r2, r1
 8003860:	701a      	strb	r2, [r3, #0]
			  asociated_data[i]=i;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	b2d9      	uxtb	r1, r3
 8003866:	4a52      	ldr	r2, [pc, #328]	; (80039b0 <main+0x29c>)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	4413      	add	r3, r2
 800386c:	460a      	mov	r2, r1
 800386e:	701a      	strb	r2, [r3, #0]
	  for (size_t i = 0; i < plaintext_size; i++)
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	3301      	adds	r3, #1
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387c:	d3ea      	bcc.n	8003854 <main+0x140>
		  }
		   i=0;
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
		   cycles=0;
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
		   total_cycles=0;
 8003886:	2300      	movs	r3, #0
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
			sprintf(buffer,"\n PMAC_1");
 800388a:	4955      	ldr	r1, [pc, #340]	; (80039e0 <main+0x2cc>)
 800388c:	484a      	ldr	r0, [pc, #296]	; (80039b8 <main+0x2a4>)
 800388e:	f003 fde9 	bl	8007464 <siprintf>
				serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003896:	4948      	ldr	r1, [pc, #288]	; (80039b8 <main+0x2a4>)
 8003898:	4848      	ldr	r0, [pc, #288]	; (80039bc <main+0x2a8>)
 800389a:	f7ff fee6 	bl	800366a <serial_printf>
				for (int j = 0; j < Number_test; j++) {
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	e02a      	b.n	80038fa <main+0x1e6>
					for (i = 0; i < REP; i++) {
 80038a4:	2300      	movs	r3, #0
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
 80038a8:	e016      	b.n	80038d8 <main+0x1c4>
						start_timer(); // Iniciar el contador de ciclos
 80038aa:	f7ff ff1b 	bl	80036e4 <start_timer>
						PMAC_1(nonce, asociated_data, bytes[j], key1, tag);
 80038ae:	4a44      	ldr	r2, [pc, #272]	; (80039c0 <main+0x2ac>)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038b6:	4b43      	ldr	r3, [pc, #268]	; (80039c4 <main+0x2b0>)
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	4b43      	ldr	r3, [pc, #268]	; (80039c8 <main+0x2b4>)
 80038bc:	493c      	ldr	r1, [pc, #240]	; (80039b0 <main+0x29c>)
 80038be:	4843      	ldr	r0, [pc, #268]	; (80039cc <main+0x2b8>)
 80038c0:	f7fd fabc 	bl	8000e3c <PMAC_1>
						cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 80038c4:	f7ff ff1a 	bl	80036fc <stop_timer>
 80038c8:	6078      	str	r0, [r7, #4]
					    total_cycles=cycles+total_cycles;
 80038ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4413      	add	r3, r2
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28
					for (i = 0; i < REP; i++) {
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	3301      	adds	r3, #1
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	2b1d      	cmp	r3, #29
 80038dc:	dde5      	ble.n	80038aa <main+0x196>
				    }
			  performance[j] = total_cycles/REP;
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	4a3b      	ldr	r2, [pc, #236]	; (80039d0 <main+0x2bc>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	091a      	lsrs	r2, r3, #4
 80038e8:	493a      	ldr	r1, [pc, #232]	; (80039d4 <main+0x2c0>)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  total_cycles=0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
				for (int j = 0; j < Number_test; j++) {
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	3301      	adds	r3, #1
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b06      	cmp	r3, #6
 80038fe:	ddd1      	ble.n	80038a4 <main+0x190>
			  }
		  for (i = 0; i < Number_test; i++) {
 8003900:	2300      	movs	r3, #0
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
 8003904:	e020      	b.n	8003948 <main+0x234>
				sprintf(buffer,"\n bytes %u ", bytes[i]);
 8003906:	4a2e      	ldr	r2, [pc, #184]	; (80039c0 <main+0x2ac>)
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390e:	461a      	mov	r2, r3
 8003910:	4931      	ldr	r1, [pc, #196]	; (80039d8 <main+0x2c4>)
 8003912:	4829      	ldr	r0, [pc, #164]	; (80039b8 <main+0x2a4>)
 8003914:	f003 fda6 	bl	8007464 <siprintf>
				serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800391c:	4926      	ldr	r1, [pc, #152]	; (80039b8 <main+0x2a4>)
 800391e:	4827      	ldr	r0, [pc, #156]	; (80039bc <main+0x2a8>)
 8003920:	f7ff fea3 	bl	800366a <serial_printf>
				sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 8003924:	4a2b      	ldr	r2, [pc, #172]	; (80039d4 <main+0x2c0>)
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392e:	492b      	ldr	r1, [pc, #172]	; (80039dc <main+0x2c8>)
 8003930:	4821      	ldr	r0, [pc, #132]	; (80039b8 <main+0x2a4>)
 8003932:	f003 fd97 	bl	8007464 <siprintf>
				serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800393a:	491f      	ldr	r1, [pc, #124]	; (80039b8 <main+0x2a4>)
 800393c:	481f      	ldr	r0, [pc, #124]	; (80039bc <main+0x2a8>)
 800393e:	f7ff fe94 	bl	800366a <serial_printf>
		  for (i = 0; i < Number_test; i++) {
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	3301      	adds	r3, #1
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	2b06      	cmp	r3, #6
 800394c:	dddb      	ble.n	8003906 <main+0x1f2>
		   }

	  for (size_t i = 0; i < plaintext_size; i++)
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	e010      	b.n	8003976 <main+0x262>
		  {
			  plaintext[i] =i;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	b2d9      	uxtb	r1, r3
 8003958:	4a14      	ldr	r2, [pc, #80]	; (80039ac <main+0x298>)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	4413      	add	r3, r2
 800395e:	460a      	mov	r2, r1
 8003960:	701a      	strb	r2, [r3, #0]
			  asociated_data[i]=i;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	b2d9      	uxtb	r1, r3
 8003966:	4a12      	ldr	r2, [pc, #72]	; (80039b0 <main+0x29c>)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	4413      	add	r3, r2
 800396c:	460a      	mov	r2, r1
 800396e:	701a      	strb	r2, [r3, #0]
	  for (size_t i = 0; i < plaintext_size; i++)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	3301      	adds	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397c:	d3ea      	bcc.n	8003954 <main+0x240>
		  }
		i=0;
 800397e:	2300      	movs	r3, #0
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
		cycles=0;
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]
		total_cycles=0;
 8003986:	2300      	movs	r3, #0
 8003988:	62bb      	str	r3, [r7, #40]	; 0x28
		sprintf(buffer,"\n OCBRA ENC");
 800398a:	4916      	ldr	r1, [pc, #88]	; (80039e4 <main+0x2d0>)
 800398c:	480a      	ldr	r0, [pc, #40]	; (80039b8 <main+0x2a4>)
 800398e:	f003 fd69 	bl	8007464 <siprintf>
			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003996:	4908      	ldr	r1, [pc, #32]	; (80039b8 <main+0x2a4>)
 8003998:	4808      	ldr	r0, [pc, #32]	; (80039bc <main+0x2a8>)
 800399a:	f7ff fe66 	bl	800366a <serial_printf>
			for (int j = 0; j < Number_test; j++) {
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	e04f      	b.n	8003a44 <main+0x330>
				for (i = 0; i < REP; i++) {
 80039a4:	2300      	movs	r3, #0
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
 80039a8:	e03b      	b.n	8003a22 <main+0x30e>
 80039aa:	bf00      	nop
 80039ac:	2000087c 	.word	0x2000087c
 80039b0:	2000287c 	.word	0x2000287c
 80039b4:	08007e28 	.word	0x08007e28
 80039b8:	2000387c 	.word	0x2000387c
 80039bc:	200002dc 	.word	0x200002dc
 80039c0:	20000020 	.word	0x20000020
 80039c4:	2000086c 	.word	0x2000086c
 80039c8:	20000000 	.word	0x20000000
 80039cc:	20000010 	.word	0x20000010
 80039d0:	88888889 	.word	0x88888889
 80039d4:	20003c7c 	.word	0x20003c7c
 80039d8:	08007e38 	.word	0x08007e38
 80039dc:	08007e44 	.word	0x08007e44
 80039e0:	08007e5c 	.word	0x08007e5c
 80039e4:	08007e68 	.word	0x08007e68
					start_timer(); // Iniciar el contador de ciclos
 80039e8:	f7ff fe7c 	bl	80036e4 <start_timer>
					OCB(plaintext, ciphertext, nonce, asociated_data, bytes[j], 0, key1, tag);
 80039ec:	4a71      	ldr	r2, [pc, #452]	; (8003bb4 <main+0x4a0>)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f4:	4a70      	ldr	r2, [pc, #448]	; (8003bb8 <main+0x4a4>)
 80039f6:	9203      	str	r2, [sp, #12]
 80039f8:	4a70      	ldr	r2, [pc, #448]	; (8003bbc <main+0x4a8>)
 80039fa:	9202      	str	r2, [sp, #8]
 80039fc:	2200      	movs	r2, #0
 80039fe:	9201      	str	r2, [sp, #4]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	4b6f      	ldr	r3, [pc, #444]	; (8003bc0 <main+0x4ac>)
 8003a04:	4a6f      	ldr	r2, [pc, #444]	; (8003bc4 <main+0x4b0>)
 8003a06:	4970      	ldr	r1, [pc, #448]	; (8003bc8 <main+0x4b4>)
 8003a08:	4870      	ldr	r0, [pc, #448]	; (8003bcc <main+0x4b8>)
 8003a0a:	f7fc fdcf 	bl	80005ac <OCB>
					cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 8003a0e:	f7ff fe75 	bl	80036fc <stop_timer>
 8003a12:	6078      	str	r0, [r7, #4]
					total_cycles=cycles+total_cycles;
 8003a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	62bb      	str	r3, [r7, #40]	; 0x28
				for (i = 0; i < REP; i++) {
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	3301      	adds	r3, #1
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	2b1d      	cmp	r3, #29
 8003a26:	dddf      	ble.n	80039e8 <main+0x2d4>
				  }
				  performance[j] = total_cycles/REP;
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	4a69      	ldr	r2, [pc, #420]	; (8003bd0 <main+0x4bc>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	091a      	lsrs	r2, r3, #4
 8003a32:	4968      	ldr	r1, [pc, #416]	; (8003bd4 <main+0x4c0>)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  total_cycles=0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int j = 0; j < Number_test; j++) {
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	3301      	adds	r3, #1
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b06      	cmp	r3, #6
 8003a48:	ddac      	ble.n	80039a4 <main+0x290>
			  }
		  for (i = 0; i < Number_test; i++) {
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4e:	e020      	b.n	8003a92 <main+0x37e>
				sprintf(buffer,"\n bytes %u ", bytes[i]);
 8003a50:	4a58      	ldr	r2, [pc, #352]	; (8003bb4 <main+0x4a0>)
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	495f      	ldr	r1, [pc, #380]	; (8003bd8 <main+0x4c4>)
 8003a5c:	485f      	ldr	r0, [pc, #380]	; (8003bdc <main+0x4c8>)
 8003a5e:	f003 fd01 	bl	8007464 <siprintf>
				serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003a62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a66:	495d      	ldr	r1, [pc, #372]	; (8003bdc <main+0x4c8>)
 8003a68:	485d      	ldr	r0, [pc, #372]	; (8003be0 <main+0x4cc>)
 8003a6a:	f7ff fdfe 	bl	800366a <serial_printf>
				sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 8003a6e:	4a59      	ldr	r2, [pc, #356]	; (8003bd4 <main+0x4c0>)
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	495a      	ldr	r1, [pc, #360]	; (8003be4 <main+0x4d0>)
 8003a7a:	4858      	ldr	r0, [pc, #352]	; (8003bdc <main+0x4c8>)
 8003a7c:	f003 fcf2 	bl	8007464 <siprintf>
				serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a84:	4955      	ldr	r1, [pc, #340]	; (8003bdc <main+0x4c8>)
 8003a86:	4856      	ldr	r0, [pc, #344]	; (8003be0 <main+0x4cc>)
 8003a88:	f7ff fdef 	bl	800366a <serial_printf>
		  for (i = 0; i < Number_test; i++) {
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	3301      	adds	r3, #1
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	2b06      	cmp	r3, #6
 8003a96:	dddb      	ble.n	8003a50 <main+0x33c>
		   }

	  for (size_t i = 0; i < plaintext_size; i++)
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	e010      	b.n	8003ac0 <main+0x3ac>
	  {
		  plaintext[i] =i;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	b2d9      	uxtb	r1, r3
 8003aa2:	4a4a      	ldr	r2, [pc, #296]	; (8003bcc <main+0x4b8>)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	460a      	mov	r2, r1
 8003aaa:	701a      	strb	r2, [r3, #0]
		  asociated_data[i]=i;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	b2d9      	uxtb	r1, r3
 8003ab0:	4a43      	ldr	r2, [pc, #268]	; (8003bc0 <main+0x4ac>)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	460a      	mov	r2, r1
 8003ab8:	701a      	strb	r2, [r3, #0]
	  for (size_t i = 0; i < plaintext_size; i++)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3301      	adds	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac6:	d3ea      	bcc.n	8003a9e <main+0x38a>
	  }

	i=0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
	cycles=0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	607b      	str	r3, [r7, #4]
	total_cycles=0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
	sprintf(buffer,"\n OCBRA+PMACRA ENC");
 8003ad4:	4944      	ldr	r1, [pc, #272]	; (8003be8 <main+0x4d4>)
 8003ad6:	4841      	ldr	r0, [pc, #260]	; (8003bdc <main+0x4c8>)
 8003ad8:	f003 fcc4 	bl	8007464 <siprintf>
		serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ae0:	493e      	ldr	r1, [pc, #248]	; (8003bdc <main+0x4c8>)
 8003ae2:	483f      	ldr	r0, [pc, #252]	; (8003be0 <main+0x4cc>)
 8003ae4:	f7ff fdc1 	bl	800366a <serial_printf>
		for (int j = 0; j < Number_test; j++) {
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	e033      	b.n	8003b56 <main+0x442>
			for (i = 0; i < REP; i++) {
 8003aee:	2300      	movs	r3, #0
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
 8003af2:	e01f      	b.n	8003b34 <main+0x420>
				start_timer(); // Iniciar el contador de ciclos
 8003af4:	f7ff fdf6 	bl	80036e4 <start_timer>
				OCB(plaintext, ciphertext, nonce, asociated_data, bytes[j], bytes[j], key1, tag);
 8003af8:	4a2e      	ldr	r2, [pc, #184]	; (8003bb4 <main+0x4a0>)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b00:	492c      	ldr	r1, [pc, #176]	; (8003bb4 <main+0x4a0>)
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003b08:	492b      	ldr	r1, [pc, #172]	; (8003bb8 <main+0x4a4>)
 8003b0a:	9103      	str	r1, [sp, #12]
 8003b0c:	492b      	ldr	r1, [pc, #172]	; (8003bbc <main+0x4a8>)
 8003b0e:	9102      	str	r1, [sp, #8]
 8003b10:	9201      	str	r2, [sp, #4]
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	4b2a      	ldr	r3, [pc, #168]	; (8003bc0 <main+0x4ac>)
 8003b16:	4a2b      	ldr	r2, [pc, #172]	; (8003bc4 <main+0x4b0>)
 8003b18:	492b      	ldr	r1, [pc, #172]	; (8003bc8 <main+0x4b4>)
 8003b1a:	482c      	ldr	r0, [pc, #176]	; (8003bcc <main+0x4b8>)
 8003b1c:	f7fc fd46 	bl	80005ac <OCB>
				cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 8003b20:	f7ff fdec 	bl	80036fc <stop_timer>
 8003b24:	6078      	str	r0, [r7, #4]
				total_cycles=cycles+total_cycles;
 8003b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
			for (i = 0; i < REP; i++) {
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	3301      	adds	r3, #1
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	2b1d      	cmp	r3, #29
 8003b38:	dddc      	ble.n	8003af4 <main+0x3e0>
			}
			performance[j] = total_cycles/REP;
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	4a24      	ldr	r2, [pc, #144]	; (8003bd0 <main+0x4bc>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	091a      	lsrs	r2, r3, #4
 8003b44:	4923      	ldr	r1, [pc, #140]	; (8003bd4 <main+0x4c0>)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			total_cycles=0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int j = 0; j < Number_test; j++) {
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	3301      	adds	r3, #1
 8003b54:	60bb      	str	r3, [r7, #8]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b06      	cmp	r3, #6
 8003b5a:	ddc8      	ble.n	8003aee <main+0x3da>
		}
	  for (i = 0; i < Number_test; i++) {
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b60:	e020      	b.n	8003ba4 <main+0x490>
			sprintf(buffer,"\n bytes %u ", bytes[i]);
 8003b62:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <main+0x4a0>)
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	491a      	ldr	r1, [pc, #104]	; (8003bd8 <main+0x4c4>)
 8003b6e:	481b      	ldr	r0, [pc, #108]	; (8003bdc <main+0x4c8>)
 8003b70:	f003 fc78 	bl	8007464 <siprintf>
			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b78:	4918      	ldr	r1, [pc, #96]	; (8003bdc <main+0x4c8>)
 8003b7a:	4819      	ldr	r0, [pc, #100]	; (8003be0 <main+0x4cc>)
 8003b7c:	f7ff fd75 	bl	800366a <serial_printf>
			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 8003b80:	4a14      	ldr	r2, [pc, #80]	; (8003bd4 <main+0x4c0>)
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8a:	4916      	ldr	r1, [pc, #88]	; (8003be4 <main+0x4d0>)
 8003b8c:	4813      	ldr	r0, [pc, #76]	; (8003bdc <main+0x4c8>)
 8003b8e:	f003 fc69 	bl	8007464 <siprintf>
			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003b92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b96:	4911      	ldr	r1, [pc, #68]	; (8003bdc <main+0x4c8>)
 8003b98:	4811      	ldr	r0, [pc, #68]	; (8003be0 <main+0x4cc>)
 8003b9a:	f7ff fd66 	bl	800366a <serial_printf>
	  for (i = 0; i < Number_test; i++) {
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	2b06      	cmp	r3, #6
 8003ba8:	dddb      	ble.n	8003b62 <main+0x44e>
 8003baa:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3730      	adds	r7, #48	; 0x30
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000020 	.word	0x20000020
 8003bb8:	2000086c 	.word	0x2000086c
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	2000287c 	.word	0x2000287c
 8003bc4:	20000010 	.word	0x20000010
 8003bc8:	2000187c 	.word	0x2000187c
 8003bcc:	2000087c 	.word	0x2000087c
 8003bd0:	88888889 	.word	0x88888889
 8003bd4:	20003c7c 	.word	0x20003c7c
 8003bd8:	08007e38 	.word	0x08007e38
 8003bdc:	2000387c 	.word	0x2000387c
 8003be0:	200002dc 	.word	0x200002dc
 8003be4:	08007e44 	.word	0x08007e44
 8003be8:	08007e74 	.word	0x08007e74

08003bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b094      	sub	sp, #80	; 0x50
 8003bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bf2:	f107 0320 	add.w	r3, r7, #32
 8003bf6:	2230      	movs	r2, #48	; 0x30
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f003 fc52 	bl	80074a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c00:	f107 030c 	add.w	r3, r7, #12
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	60da      	str	r2, [r3, #12]
 8003c0e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003c10:	f001 fb94 	bl	800533c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c14:	4b27      	ldr	r3, [pc, #156]	; (8003cb4 <SystemClock_Config+0xc8>)
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	4a26      	ldr	r2, [pc, #152]	; (8003cb4 <SystemClock_Config+0xc8>)
 8003c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8003c20:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <SystemClock_Config+0xc8>)
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003c2c:	4b22      	ldr	r3, [pc, #136]	; (8003cb8 <SystemClock_Config+0xcc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c34:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <SystemClock_Config+0xcc>)
 8003c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <SystemClock_Config+0xcc>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003c4c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c52:	2302      	movs	r3, #2
 8003c54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003c60:	2348      	movs	r3, #72	; 0x48
 8003c62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c64:	2302      	movs	r3, #2
 8003c66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c6c:	f107 0320 	add.w	r3, r7, #32
 8003c70:	4618      	mov	r0, r3
 8003c72:	f001 fb73 	bl	800535c <HAL_RCC_OscConfig>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003c7c:	f000 f96c 	bl	8003f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c80:	230f      	movs	r3, #15
 8003c82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c84:	2302      	movs	r3, #2
 8003c86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c96:	f107 030c 	add.w	r3, r7, #12
 8003c9a:	2102      	movs	r1, #2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f001 fe01 	bl	80058a4 <HAL_RCC_ClockConfig>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003ca8:	f000 f956 	bl	8003f58 <Error_Handler>
  }
}
 8003cac:	bf00      	nop
 8003cae:	3750      	adds	r7, #80	; 0x50
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	40007000 	.word	0x40007000

08003cbc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8003cc0:	4b1f      	ldr	r3, [pc, #124]	; (8003d40 <MX_ETH_Init+0x84>)
 8003cc2:	4a20      	ldr	r2, [pc, #128]	; (8003d44 <MX_ETH_Init+0x88>)
 8003cc4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003cc6:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <MX_ETH_Init+0x8c>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003ccc:	4b1e      	ldr	r3, [pc, #120]	; (8003d48 <MX_ETH_Init+0x8c>)
 8003cce:	2280      	movs	r2, #128	; 0x80
 8003cd0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <MX_ETH_Init+0x8c>)
 8003cd4:	22e1      	movs	r2, #225	; 0xe1
 8003cd6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8003cd8:	4b1b      	ldr	r3, [pc, #108]	; (8003d48 <MX_ETH_Init+0x8c>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8003cde:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <MX_ETH_Init+0x8c>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8003ce4:	4b18      	ldr	r3, [pc, #96]	; (8003d48 <MX_ETH_Init+0x8c>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003cea:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <MX_ETH_Init+0x84>)
 8003cec:	4a16      	ldr	r2, [pc, #88]	; (8003d48 <MX_ETH_Init+0x8c>)
 8003cee:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003cf0:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <MX_ETH_Init+0x84>)
 8003cf2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003cf6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003cf8:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <MX_ETH_Init+0x84>)
 8003cfa:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <MX_ETH_Init+0x90>)
 8003cfc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <MX_ETH_Init+0x84>)
 8003d00:	4a13      	ldr	r2, [pc, #76]	; (8003d50 <MX_ETH_Init+0x94>)
 8003d02:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8003d04:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <MX_ETH_Init+0x84>)
 8003d06:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003d0a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8003d0c:	480c      	ldr	r0, [pc, #48]	; (8003d40 <MX_ETH_Init+0x84>)
 8003d0e:	f000 fce1 	bl	80046d4 <HAL_ETH_Init>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8003d18:	f000 f91e 	bl	8003f58 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003d1c:	2238      	movs	r2, #56	; 0x38
 8003d1e:	2100      	movs	r1, #0
 8003d20:	480c      	ldr	r0, [pc, #48]	; (8003d54 <MX_ETH_Init+0x98>)
 8003d22:	f003 fbbf 	bl	80074a4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <MX_ETH_Init+0x98>)
 8003d28:	2221      	movs	r2, #33	; 0x21
 8003d2a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <MX_ETH_Init+0x98>)
 8003d2e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8003d32:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <MX_ETH_Init+0x98>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	2000022c 	.word	0x2000022c
 8003d44:	40028000 	.word	0x40028000
 8003d48:	20003cf4 	.word	0x20003cf4
 8003d4c:	20000138 	.word	0x20000138
 8003d50:	20000098 	.word	0x20000098
 8003d54:	200001f4 	.word	0x200001f4

08003d58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <MX_USART3_UART_Init+0x58>)
 8003d5e:	4a15      	ldr	r2, [pc, #84]	; (8003db4 <MX_USART3_UART_Init+0x5c>)
 8003d60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003d62:	4b13      	ldr	r3, [pc, #76]	; (8003db0 <MX_USART3_UART_Init+0x58>)
 8003d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d6a:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <MX_USART3_UART_Init+0x58>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <MX_USART3_UART_Init+0x58>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d76:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <MX_USART3_UART_Init+0x58>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <MX_USART3_UART_Init+0x58>)
 8003d7e:	220c      	movs	r2, #12
 8003d80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <MX_USART3_UART_Init+0x58>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d88:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <MX_USART3_UART_Init+0x58>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d8e:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <MX_USART3_UART_Init+0x58>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d94:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <MX_USART3_UART_Init+0x58>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d9a:	4805      	ldr	r0, [pc, #20]	; (8003db0 <MX_USART3_UART_Init+0x58>)
 8003d9c:	f002 fb98 	bl	80064d0 <HAL_UART_Init>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003da6:	f000 f8d7 	bl	8003f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	200002dc 	.word	0x200002dc
 8003db4:	40004800 	.word	0x40004800

08003db8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003dbc:	4b14      	ldr	r3, [pc, #80]	; (8003e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003dbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003dc2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003dc6:	2206      	movs	r2, #6
 8003dc8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003dca:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003dcc:	2202      	movs	r2, #2
 8003dce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003dd6:	4b0e      	ldr	r3, [pc, #56]	; (8003e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003dd8:	2202      	movs	r2, #2
 8003dda:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003de8:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003dfa:	4805      	ldr	r0, [pc, #20]	; (8003e10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003dfc:	f001 f955 	bl	80050aa <HAL_PCD_Init>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003e06:	f000 f8a7 	bl	8003f58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003e0a:	bf00      	nop
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000364 	.word	0x20000364

08003e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08c      	sub	sp, #48	; 0x30
 8003e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e1a:	f107 031c 	add.w	r3, r7, #28
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	605a      	str	r2, [r3, #4]
 8003e24:	609a      	str	r2, [r3, #8]
 8003e26:	60da      	str	r2, [r3, #12]
 8003e28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e2a:	4b47      	ldr	r3, [pc, #284]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	4a46      	ldr	r2, [pc, #280]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003e30:	f043 0304 	orr.w	r3, r3, #4
 8003e34:	6313      	str	r3, [r2, #48]	; 0x30
 8003e36:	4b44      	ldr	r3, [pc, #272]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e42:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	4a40      	ldr	r2, [pc, #256]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4e:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e5a:	4b3b      	ldr	r3, [pc, #236]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	4a3a      	ldr	r2, [pc, #232]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	6313      	str	r3, [r2, #48]	; 0x30
 8003e66:	4b38      	ldr	r3, [pc, #224]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e72:	4b35      	ldr	r3, [pc, #212]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	4a34      	ldr	r2, [pc, #208]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003e78:	f043 0302 	orr.w	r3, r3, #2
 8003e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7e:	4b32      	ldr	r3, [pc, #200]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	4a2e      	ldr	r2, [pc, #184]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003e90:	f043 0308 	orr.w	r3, r3, #8
 8003e94:	6313      	str	r3, [r2, #48]	; 0x30
 8003e96:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ea2:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	4a28      	ldr	r2, [pc, #160]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eac:	6313      	str	r3, [r2, #48]	; 0x30
 8003eae:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <MX_GPIO_Init+0x134>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f244 0181 	movw	r1, #16513	; 0x4081
 8003ec0:	4822      	ldr	r0, [pc, #136]	; (8003f4c <MX_GPIO_Init+0x138>)
 8003ec2:	f001 f8d9 	bl	8005078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2140      	movs	r1, #64	; 0x40
 8003eca:	4821      	ldr	r0, [pc, #132]	; (8003f50 <MX_GPIO_Init+0x13c>)
 8003ecc:	f001 f8d4 	bl	8005078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ed6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003ee0:	f107 031c 	add.w	r3, r7, #28
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	481b      	ldr	r0, [pc, #108]	; (8003f54 <MX_GPIO_Init+0x140>)
 8003ee8:	f000 ff1a 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003eec:	f244 0381 	movw	r3, #16513	; 0x4081
 8003ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efa:	2300      	movs	r3, #0
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003efe:	f107 031c 	add.w	r3, r7, #28
 8003f02:	4619      	mov	r1, r3
 8003f04:	4811      	ldr	r0, [pc, #68]	; (8003f4c <MX_GPIO_Init+0x138>)
 8003f06:	f000 ff0b 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003f0a:	2340      	movs	r3, #64	; 0x40
 8003f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f16:	2300      	movs	r3, #0
 8003f18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003f1a:	f107 031c 	add.w	r3, r7, #28
 8003f1e:	4619      	mov	r1, r3
 8003f20:	480b      	ldr	r0, [pc, #44]	; (8003f50 <MX_GPIO_Init+0x13c>)
 8003f22:	f000 fefd 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003f32:	f107 031c 	add.w	r3, r7, #28
 8003f36:	4619      	mov	r1, r3
 8003f38:	4805      	ldr	r0, [pc, #20]	; (8003f50 <MX_GPIO_Init+0x13c>)
 8003f3a:	f000 fef1 	bl	8004d20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f3e:	bf00      	nop
 8003f40:	3730      	adds	r7, #48	; 0x30
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40020400 	.word	0x40020400
 8003f50:	40021800 	.word	0x40021800
 8003f54:	40020800 	.word	0x40020800

08003f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f5c:	b672      	cpsid	i
}
 8003f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f60:	e7fe      	b.n	8003f60 <Error_Handler+0x8>
	...

08003f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f6a:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <HAL_MspInit+0x44>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	4a0e      	ldr	r2, [pc, #56]	; (8003fa8 <HAL_MspInit+0x44>)
 8003f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f74:	6413      	str	r3, [r2, #64]	; 0x40
 8003f76:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <HAL_MspInit+0x44>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	607b      	str	r3, [r7, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f82:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <HAL_MspInit+0x44>)
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	4a08      	ldr	r2, [pc, #32]	; (8003fa8 <HAL_MspInit+0x44>)
 8003f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_MspInit+0x44>)
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40023800 	.word	0x40023800

08003fac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08e      	sub	sp, #56	; 0x38
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	60da      	str	r2, [r3, #12]
 8003fc2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a4e      	ldr	r2, [pc, #312]	; (8004104 <HAL_ETH_MspInit+0x158>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	f040 8096 	bne.w	80040fc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003fd0:	4b4d      	ldr	r3, [pc, #308]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	4a4c      	ldr	r2, [pc, #304]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 8003fd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fda:	6313      	str	r3, [r2, #48]	; 0x30
 8003fdc:	4b4a      	ldr	r3, [pc, #296]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 8003fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe4:	623b      	str	r3, [r7, #32]
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	4b47      	ldr	r3, [pc, #284]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	4a46      	ldr	r2, [pc, #280]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 8003fee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff4:	4b44      	ldr	r3, [pc, #272]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4b41      	ldr	r3, [pc, #260]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	4a40      	ldr	r2, [pc, #256]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 8004006:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800400a:	6313      	str	r3, [r2, #48]	; 0x30
 800400c:	4b3e      	ldr	r3, [pc, #248]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004018:	4b3b      	ldr	r3, [pc, #236]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	4a3a      	ldr	r2, [pc, #232]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 800401e:	f043 0304 	orr.w	r3, r3, #4
 8004022:	6313      	str	r3, [r2, #48]	; 0x30
 8004024:	4b38      	ldr	r3, [pc, #224]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004030:	4b35      	ldr	r3, [pc, #212]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	4a34      	ldr	r2, [pc, #208]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6313      	str	r3, [r2, #48]	; 0x30
 800403c:	4b32      	ldr	r3, [pc, #200]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004048:	4b2f      	ldr	r3, [pc, #188]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	4a2e      	ldr	r2, [pc, #184]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 800404e:	f043 0302 	orr.w	r3, r3, #2
 8004052:	6313      	str	r3, [r2, #48]	; 0x30
 8004054:	4b2c      	ldr	r3, [pc, #176]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004060:	4b29      	ldr	r3, [pc, #164]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	4a28      	ldr	r2, [pc, #160]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 8004066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800406a:	6313      	str	r3, [r2, #48]	; 0x30
 800406c:	4b26      	ldr	r3, [pc, #152]	; (8004108 <HAL_ETH_MspInit+0x15c>)
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004078:	2332      	movs	r3, #50	; 0x32
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407c:	2302      	movs	r3, #2
 800407e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004080:	2300      	movs	r3, #0
 8004082:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004084:	2303      	movs	r3, #3
 8004086:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004088:	230b      	movs	r3, #11
 800408a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800408c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004090:	4619      	mov	r1, r3
 8004092:	481e      	ldr	r0, [pc, #120]	; (800410c <HAL_ETH_MspInit+0x160>)
 8004094:	f000 fe44 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004098:	2386      	movs	r3, #134	; 0x86
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409c:	2302      	movs	r3, #2
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a4:	2303      	movs	r3, #3
 80040a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80040a8:	230b      	movs	r3, #11
 80040aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040b0:	4619      	mov	r1, r3
 80040b2:	4817      	ldr	r0, [pc, #92]	; (8004110 <HAL_ETH_MspInit+0x164>)
 80040b4:	f000 fe34 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80040b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040be:	2302      	movs	r3, #2
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c6:	2303      	movs	r3, #3
 80040c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80040ca:	230b      	movs	r3, #11
 80040cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80040ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040d2:	4619      	mov	r1, r3
 80040d4:	480f      	ldr	r0, [pc, #60]	; (8004114 <HAL_ETH_MspInit+0x168>)
 80040d6:	f000 fe23 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80040da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e0:	2302      	movs	r3, #2
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e8:	2303      	movs	r3, #3
 80040ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80040ec:	230b      	movs	r3, #11
 80040ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040f4:	4619      	mov	r1, r3
 80040f6:	4808      	ldr	r0, [pc, #32]	; (8004118 <HAL_ETH_MspInit+0x16c>)
 80040f8:	f000 fe12 	bl	8004d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80040fc:	bf00      	nop
 80040fe:	3738      	adds	r7, #56	; 0x38
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40028000 	.word	0x40028000
 8004108:	40023800 	.word	0x40023800
 800410c:	40020800 	.word	0x40020800
 8004110:	40020000 	.word	0x40020000
 8004114:	40020400 	.word	0x40020400
 8004118:	40021800 	.word	0x40021800

0800411c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b0aa      	sub	sp, #168	; 0xa8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004124:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004134:	f107 0310 	add.w	r3, r7, #16
 8004138:	2284      	movs	r2, #132	; 0x84
 800413a:	2100      	movs	r1, #0
 800413c:	4618      	mov	r0, r3
 800413e:	f003 f9b1 	bl	80074a4 <memset>
  if(huart->Instance==USART3)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a22      	ldr	r2, [pc, #136]	; (80041d0 <HAL_UART_MspInit+0xb4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d13c      	bne.n	80041c6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800414c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004150:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004152:	2300      	movs	r3, #0
 8004154:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004156:	f107 0310 	add.w	r3, r7, #16
 800415a:	4618      	mov	r0, r3
 800415c:	f001 fdc8 	bl	8005cf0 <HAL_RCCEx_PeriphCLKConfig>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004166:	f7ff fef7 	bl	8003f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800416a:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <HAL_UART_MspInit+0xb8>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	4a19      	ldr	r2, [pc, #100]	; (80041d4 <HAL_UART_MspInit+0xb8>)
 8004170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004174:	6413      	str	r3, [r2, #64]	; 0x40
 8004176:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <HAL_UART_MspInit+0xb8>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004182:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <HAL_UART_MspInit+0xb8>)
 8004184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004186:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <HAL_UART_MspInit+0xb8>)
 8004188:	f043 0308 	orr.w	r3, r3, #8
 800418c:	6313      	str	r3, [r2, #48]	; 0x30
 800418e:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <HAL_UART_MspInit+0xb8>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800419a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800419e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a2:	2302      	movs	r3, #2
 80041a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ae:	2303      	movs	r3, #3
 80041b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041b4:	2307      	movs	r3, #7
 80041b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80041be:	4619      	mov	r1, r3
 80041c0:	4805      	ldr	r0, [pc, #20]	; (80041d8 <HAL_UART_MspInit+0xbc>)
 80041c2:	f000 fdad 	bl	8004d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80041c6:	bf00      	nop
 80041c8:	37a8      	adds	r7, #168	; 0xa8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40004800 	.word	0x40004800
 80041d4:	40023800 	.word	0x40023800
 80041d8:	40020c00 	.word	0x40020c00

080041dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b0ac      	sub	sp, #176	; 0xb0
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	60da      	str	r2, [r3, #12]
 80041f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041f4:	f107 0318 	add.w	r3, r7, #24
 80041f8:	2284      	movs	r2, #132	; 0x84
 80041fa:	2100      	movs	r1, #0
 80041fc:	4618      	mov	r0, r3
 80041fe:	f003 f951 	bl	80074a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800420a:	d159      	bne.n	80042c0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800420c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004210:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004212:	2300      	movs	r3, #0
 8004214:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004218:	f107 0318 	add.w	r3, r7, #24
 800421c:	4618      	mov	r0, r3
 800421e:	f001 fd67 	bl	8005cf0 <HAL_RCCEx_PeriphCLKConfig>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8004228:	f7ff fe96 	bl	8003f58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800422c:	4b26      	ldr	r3, [pc, #152]	; (80042c8 <HAL_PCD_MspInit+0xec>)
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	4a25      	ldr	r2, [pc, #148]	; (80042c8 <HAL_PCD_MspInit+0xec>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6313      	str	r3, [r2, #48]	; 0x30
 8004238:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <HAL_PCD_MspInit+0xec>)
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004244:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8004248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424c:	2302      	movs	r3, #2
 800424e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004252:	2300      	movs	r3, #0
 8004254:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004258:	2303      	movs	r3, #3
 800425a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800425e:	230a      	movs	r3, #10
 8004260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004264:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004268:	4619      	mov	r1, r3
 800426a:	4818      	ldr	r0, [pc, #96]	; (80042cc <HAL_PCD_MspInit+0xf0>)
 800426c:	f000 fd58 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004278:	2300      	movs	r3, #0
 800427a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427e:	2300      	movs	r3, #0
 8004280:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004284:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004288:	4619      	mov	r1, r3
 800428a:	4810      	ldr	r0, [pc, #64]	; (80042cc <HAL_PCD_MspInit+0xf0>)
 800428c:	f000 fd48 	bl	8004d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004290:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <HAL_PCD_MspInit+0xec>)
 8004292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004294:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <HAL_PCD_MspInit+0xec>)
 8004296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429a:	6353      	str	r3, [r2, #52]	; 0x34
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <HAL_PCD_MspInit+0xec>)
 800429e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <HAL_PCD_MspInit+0xec>)
 80042aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ac:	4a06      	ldr	r2, [pc, #24]	; (80042c8 <HAL_PCD_MspInit+0xec>)
 80042ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042b2:	6453      	str	r3, [r2, #68]	; 0x44
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <HAL_PCD_MspInit+0xec>)
 80042b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80042c0:	bf00      	nop
 80042c2:	37b0      	adds	r7, #176	; 0xb0
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40023800 	.word	0x40023800
 80042cc:	40020000 	.word	0x40020000

080042d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042d4:	e7fe      	b.n	80042d4 <NMI_Handler+0x4>

080042d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042d6:	b480      	push	{r7}
 80042d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042da:	e7fe      	b.n	80042da <HardFault_Handler+0x4>

080042dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042e0:	e7fe      	b.n	80042e0 <MemManage_Handler+0x4>

080042e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042e2:	b480      	push	{r7}
 80042e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042e6:	e7fe      	b.n	80042e6 <BusFault_Handler+0x4>

080042e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042ec:	e7fe      	b.n	80042ec <UsageFault_Handler+0x4>

080042ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042ee:	b480      	push	{r7}
 80042f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004300:	bf00      	nop
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800431c:	f000 f8b0 	bl	8004480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004320:	bf00      	nop
 8004322:	bd80      	pop	{r7, pc}

08004324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800432c:	4a14      	ldr	r2, [pc, #80]	; (8004380 <_sbrk+0x5c>)
 800432e:	4b15      	ldr	r3, [pc, #84]	; (8004384 <_sbrk+0x60>)
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004338:	4b13      	ldr	r3, [pc, #76]	; (8004388 <_sbrk+0x64>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004340:	4b11      	ldr	r3, [pc, #68]	; (8004388 <_sbrk+0x64>)
 8004342:	4a12      	ldr	r2, [pc, #72]	; (800438c <_sbrk+0x68>)
 8004344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004346:	4b10      	ldr	r3, [pc, #64]	; (8004388 <_sbrk+0x64>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4413      	add	r3, r2
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	429a      	cmp	r2, r3
 8004352:	d207      	bcs.n	8004364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004354:	f003 f8ae 	bl	80074b4 <__errno>
 8004358:	4603      	mov	r3, r0
 800435a:	220c      	movs	r2, #12
 800435c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800435e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004362:	e009      	b.n	8004378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004364:	4b08      	ldr	r3, [pc, #32]	; (8004388 <_sbrk+0x64>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800436a:	4b07      	ldr	r3, [pc, #28]	; (8004388 <_sbrk+0x64>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4413      	add	r3, r2
 8004372:	4a05      	ldr	r2, [pc, #20]	; (8004388 <_sbrk+0x64>)
 8004374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004376:	68fb      	ldr	r3, [r7, #12]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	20050000 	.word	0x20050000
 8004384:	00000400 	.word	0x00000400
 8004388:	20003cfc 	.word	0x20003cfc
 800438c:	20003e50 	.word	0x20003e50

08004390 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <SystemInit+0x20>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	4a05      	ldr	r2, [pc, #20]	; (80043b0 <SystemInit+0x20>)
 800439c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043a4:	bf00      	nop
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	e000ed00 	.word	0xe000ed00

080043b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80043b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043b8:	480d      	ldr	r0, [pc, #52]	; (80043f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043ba:	490e      	ldr	r1, [pc, #56]	; (80043f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043bc:	4a0e      	ldr	r2, [pc, #56]	; (80043f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043c0:	e002      	b.n	80043c8 <LoopCopyDataInit>

080043c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043c6:	3304      	adds	r3, #4

080043c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043cc:	d3f9      	bcc.n	80043c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ce:	4a0b      	ldr	r2, [pc, #44]	; (80043fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043d0:	4c0b      	ldr	r4, [pc, #44]	; (8004400 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043d4:	e001      	b.n	80043da <LoopFillZerobss>

080043d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043d8:	3204      	adds	r2, #4

080043da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043dc:	d3fb      	bcc.n	80043d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043de:	f7ff ffd7 	bl	8004390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043e2:	f003 f86d 	bl	80074c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043e6:	f7ff f995 	bl	8003714 <main>
  bx  lr    
 80043ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043ec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80043f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043f4:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80043f8:	08007ee4 	.word	0x08007ee4
  ldr r2, =_sbss
 80043fc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004400:	20003e4c 	.word	0x20003e4c

08004404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004404:	e7fe      	b.n	8004404 <ADC_IRQHandler>

08004406 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800440a:	2003      	movs	r0, #3
 800440c:	f000 f92e 	bl	800466c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004410:	2000      	movs	r0, #0
 8004412:	f000 f805 	bl	8004420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004416:	f7ff fda5 	bl	8003f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004428:	4b12      	ldr	r3, [pc, #72]	; (8004474 <HAL_InitTick+0x54>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4b12      	ldr	r3, [pc, #72]	; (8004478 <HAL_InitTick+0x58>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	4619      	mov	r1, r3
 8004432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004436:	fbb3 f3f1 	udiv	r3, r3, r1
 800443a:	fbb2 f3f3 	udiv	r3, r2, r3
 800443e:	4618      	mov	r0, r3
 8004440:	f000 f93b 	bl	80046ba <HAL_SYSTICK_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e00e      	b.n	800446c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b0f      	cmp	r3, #15
 8004452:	d80a      	bhi.n	800446a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004454:	2200      	movs	r2, #0
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800445c:	f000 f911 	bl	8004682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004460:	4a06      	ldr	r2, [pc, #24]	; (800447c <HAL_InitTick+0x5c>)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	e000      	b.n	800446c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	2000003c 	.word	0x2000003c
 8004478:	20000044 	.word	0x20000044
 800447c:	20000040 	.word	0x20000040

08004480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_IncTick+0x20>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <HAL_IncTick+0x24>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4413      	add	r3, r2
 8004490:	4a04      	ldr	r2, [pc, #16]	; (80044a4 <HAL_IncTick+0x24>)
 8004492:	6013      	str	r3, [r2, #0]
}
 8004494:	bf00      	nop
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	20000044 	.word	0x20000044
 80044a4:	20003d00 	.word	0x20003d00

080044a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  return uwTick;
 80044ac:	4b03      	ldr	r3, [pc, #12]	; (80044bc <HAL_GetTick+0x14>)
 80044ae:	681b      	ldr	r3, [r3, #0]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	20003d00 	.word	0x20003d00

080044c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044c8:	f7ff ffee 	bl	80044a8 <HAL_GetTick>
 80044cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044d8:	d005      	beq.n	80044e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044da:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <HAL_Delay+0x44>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044e6:	bf00      	nop
 80044e8:	f7ff ffde 	bl	80044a8 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d8f7      	bhi.n	80044e8 <HAL_Delay+0x28>
  {
  }
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000044 	.word	0x20000044

08004508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004518:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <__NVIC_SetPriorityGrouping+0x40>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004524:	4013      	ands	r3, r2
 8004526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <__NVIC_SetPriorityGrouping+0x44>)
 8004532:	4313      	orrs	r3, r2
 8004534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004536:	4a04      	ldr	r2, [pc, #16]	; (8004548 <__NVIC_SetPriorityGrouping+0x40>)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	60d3      	str	r3, [r2, #12]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	e000ed00 	.word	0xe000ed00
 800454c:	05fa0000 	.word	0x05fa0000

08004550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004554:	4b04      	ldr	r3, [pc, #16]	; (8004568 <__NVIC_GetPriorityGrouping+0x18>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	0a1b      	lsrs	r3, r3, #8
 800455a:	f003 0307 	and.w	r3, r3, #7
}
 800455e:	4618      	mov	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	e000ed00 	.word	0xe000ed00

0800456c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	6039      	str	r1, [r7, #0]
 8004576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457c:	2b00      	cmp	r3, #0
 800457e:	db0a      	blt.n	8004596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	490c      	ldr	r1, [pc, #48]	; (80045b8 <__NVIC_SetPriority+0x4c>)
 8004586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458a:	0112      	lsls	r2, r2, #4
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	440b      	add	r3, r1
 8004590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004594:	e00a      	b.n	80045ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	4908      	ldr	r1, [pc, #32]	; (80045bc <__NVIC_SetPriority+0x50>)
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	3b04      	subs	r3, #4
 80045a4:	0112      	lsls	r2, r2, #4
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	440b      	add	r3, r1
 80045aa:	761a      	strb	r2, [r3, #24]
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	e000e100 	.word	0xe000e100
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b089      	sub	sp, #36	; 0x24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f1c3 0307 	rsb	r3, r3, #7
 80045da:	2b04      	cmp	r3, #4
 80045dc:	bf28      	it	cs
 80045de:	2304      	movcs	r3, #4
 80045e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3304      	adds	r3, #4
 80045e6:	2b06      	cmp	r3, #6
 80045e8:	d902      	bls.n	80045f0 <NVIC_EncodePriority+0x30>
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3b03      	subs	r3, #3
 80045ee:	e000      	b.n	80045f2 <NVIC_EncodePriority+0x32>
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43da      	mvns	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	401a      	ands	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004608:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	fa01 f303 	lsl.w	r3, r1, r3
 8004612:	43d9      	mvns	r1, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004618:	4313      	orrs	r3, r2
         );
}
 800461a:	4618      	mov	r0, r3
 800461c:	3724      	adds	r7, #36	; 0x24
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3b01      	subs	r3, #1
 8004634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004638:	d301      	bcc.n	800463e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800463a:	2301      	movs	r3, #1
 800463c:	e00f      	b.n	800465e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800463e:	4a0a      	ldr	r2, [pc, #40]	; (8004668 <SysTick_Config+0x40>)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3b01      	subs	r3, #1
 8004644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004646:	210f      	movs	r1, #15
 8004648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800464c:	f7ff ff8e 	bl	800456c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <SysTick_Config+0x40>)
 8004652:	2200      	movs	r2, #0
 8004654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004656:	4b04      	ldr	r3, [pc, #16]	; (8004668 <SysTick_Config+0x40>)
 8004658:	2207      	movs	r2, #7
 800465a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	e000e010 	.word	0xe000e010

0800466c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff ff47 	bl	8004508 <__NVIC_SetPriorityGrouping>
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af00      	add	r7, sp, #0
 8004688:	4603      	mov	r3, r0
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004694:	f7ff ff5c 	bl	8004550 <__NVIC_GetPriorityGrouping>
 8004698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	6978      	ldr	r0, [r7, #20]
 80046a0:	f7ff ff8e 	bl	80045c0 <NVIC_EncodePriority>
 80046a4:	4602      	mov	r2, r0
 80046a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046aa:	4611      	mov	r1, r2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff ff5d 	bl	800456c <__NVIC_SetPriority>
}
 80046b2:	bf00      	nop
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff ffb0 	bl	8004628 <SysTick_Config>
 80046c8:	4603      	mov	r3, r0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e06a      	b.n	80047bc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d106      	bne.n	80046fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2223      	movs	r2, #35	; 0x23
 80046f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff fc57 	bl	8003fac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046fe:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <HAL_ETH_Init+0xf0>)
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	4a30      	ldr	r2, [pc, #192]	; (80047c4 <HAL_ETH_Init+0xf0>)
 8004704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004708:	6453      	str	r3, [r2, #68]	; 0x44
 800470a:	4b2e      	ldr	r3, [pc, #184]	; (80047c4 <HAL_ETH_Init+0xf0>)
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004716:	4b2c      	ldr	r3, [pc, #176]	; (80047c8 <HAL_ETH_Init+0xf4>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	4a2b      	ldr	r2, [pc, #172]	; (80047c8 <HAL_ETH_Init+0xf4>)
 800471c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004720:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004722:	4b29      	ldr	r3, [pc, #164]	; (80047c8 <HAL_ETH_Init+0xf4>)
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	4927      	ldr	r1, [pc, #156]	; (80047c8 <HAL_ETH_Init+0xf4>)
 800472c:	4313      	orrs	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004730:	4b25      	ldr	r3, [pc, #148]	; (80047c8 <HAL_ETH_Init+0xf4>)
 8004732:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6812      	ldr	r2, [r2, #0]
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800474a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800474c:	f7ff feac 	bl	80044a8 <HAL_GetTick>
 8004750:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004752:	e011      	b.n	8004778 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004754:	f7ff fea8 	bl	80044a8 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004762:	d909      	bls.n	8004778 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2204      	movs	r2, #4
 8004768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	22e0      	movs	r2, #224	; 0xe0
 8004770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e021      	b.n	80047bc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e4      	bne.n	8004754 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f958 	bl	8004a40 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f9ff 	bl	8004b94 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fa55 	bl	8004c46 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	461a      	mov	r2, r3
 80047a2:	2100      	movs	r1, #0
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f9bd 	bl	8004b24 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2210      	movs	r2, #16
 80047b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40023800 	.word	0x40023800
 80047c8:	40013800 	.word	0x40013800

080047cc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4b51      	ldr	r3, [pc, #324]	; (8004928 <ETH_SetMACConfig+0x15c>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	7c1b      	ldrb	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d102      	bne.n	80047f4 <ETH_SetMACConfig+0x28>
 80047ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80047f2:	e000      	b.n	80047f6 <ETH_SetMACConfig+0x2a>
 80047f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	7c5b      	ldrb	r3, [r3, #17]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <ETH_SetMACConfig+0x38>
 80047fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004802:	e000      	b.n	8004806 <ETH_SetMACConfig+0x3a>
 8004804:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004806:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800480c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	7fdb      	ldrb	r3, [r3, #31]
 8004812:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004814:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800481a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	7f92      	ldrb	r2, [r2, #30]
 8004820:	2a00      	cmp	r2, #0
 8004822:	d102      	bne.n	800482a <ETH_SetMACConfig+0x5e>
 8004824:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004828:	e000      	b.n	800482c <ETH_SetMACConfig+0x60>
 800482a:	2200      	movs	r2, #0
                        macconf->Speed |
 800482c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	7f1b      	ldrb	r3, [r3, #28]
 8004832:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004834:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800483a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	791b      	ldrb	r3, [r3, #4]
 8004840:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004842:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	f892 2020 	ldrb.w	r2, [r2, #32]
 800484a:	2a00      	cmp	r2, #0
 800484c:	d102      	bne.n	8004854 <ETH_SetMACConfig+0x88>
 800484e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004852:	e000      	b.n	8004856 <ETH_SetMACConfig+0x8a>
 8004854:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004856:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	7bdb      	ldrb	r3, [r3, #15]
 800485c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800485e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004864:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800486c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800486e:	4313      	orrs	r3, r2
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004886:	2001      	movs	r0, #1
 8004888:	f7ff fe1a 	bl	80044c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	f64f 7341 	movw	r3, #65345	; 0xff41
 80048a2:	4013      	ands	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048aa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80048b2:	2a00      	cmp	r2, #0
 80048b4:	d101      	bne.n	80048ba <ETH_SetMACConfig+0xee>
 80048b6:	2280      	movs	r2, #128	; 0x80
 80048b8:	e000      	b.n	80048bc <ETH_SetMACConfig+0xf0>
 80048ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80048bc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80048c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80048ca:	2a01      	cmp	r2, #1
 80048cc:	d101      	bne.n	80048d2 <ETH_SetMACConfig+0x106>
 80048ce:	2208      	movs	r2, #8
 80048d0:	e000      	b.n	80048d4 <ETH_SetMACConfig+0x108>
 80048d2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80048d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80048dc:	2a01      	cmp	r2, #1
 80048de:	d101      	bne.n	80048e4 <ETH_SetMACConfig+0x118>
 80048e0:	2204      	movs	r2, #4
 80048e2:	e000      	b.n	80048e6 <ETH_SetMACConfig+0x11a>
 80048e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80048e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80048ee:	2a01      	cmp	r2, #1
 80048f0:	d101      	bne.n	80048f6 <ETH_SetMACConfig+0x12a>
 80048f2:	2202      	movs	r2, #2
 80048f4:	e000      	b.n	80048f8 <ETH_SetMACConfig+0x12c>
 80048f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80048f8:	4313      	orrs	r3, r2
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004910:	2001      	movs	r0, #1
 8004912:	f7ff fdd5 	bl	80044c0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	619a      	str	r2, [r3, #24]
}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	ff20810f 	.word	0xff20810f

0800492c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4b3d      	ldr	r3, [pc, #244]	; (8004a3c <ETH_SetDMAConfig+0x110>)
 8004946:	4013      	ands	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	7b1b      	ldrb	r3, [r3, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <ETH_SetDMAConfig+0x2c>
 8004952:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004956:	e000      	b.n	800495a <ETH_SetDMAConfig+0x2e>
 8004958:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	7b5b      	ldrb	r3, [r3, #13]
 800495e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004960:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	7f52      	ldrb	r2, [r2, #29]
 8004966:	2a00      	cmp	r2, #0
 8004968:	d102      	bne.n	8004970 <ETH_SetDMAConfig+0x44>
 800496a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800496e:	e000      	b.n	8004972 <ETH_SetDMAConfig+0x46>
 8004970:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004972:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	7b9b      	ldrb	r3, [r3, #14]
 8004978:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800497a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004980:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	7f1b      	ldrb	r3, [r3, #28]
 8004986:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004988:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	7f9b      	ldrb	r3, [r3, #30]
 800498e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004990:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004996:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800499e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80049a0:	4313      	orrs	r3, r2
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b0:	461a      	mov	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80049c2:	2001      	movs	r0, #1
 80049c4:	f7ff fd7c 	bl	80044c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d0:	461a      	mov	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	791b      	ldrb	r3, [r3, #4]
 80049da:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80049e0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80049e6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80049ec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049f4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80049f6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80049fe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004a04:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a12:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a20:	2001      	movs	r0, #1
 8004a22:	f7ff fd4d 	bl	80044c0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6013      	str	r3, [r2, #0]
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	f8de3f23 	.word	0xf8de3f23

08004a40 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b0a6      	sub	sp, #152	; 0x98
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004a54:	2300      	movs	r3, #0
 8004a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004a76:	2300      	movs	r3, #0
 8004a78:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004a80:	2300      	movs	r3, #0
 8004a82:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004a90:	2300      	movs	r3, #0
 8004a92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004a96:	2300      	movs	r3, #0
 8004a98:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004aa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004aa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004ab4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ab8:	4619      	mov	r1, r3
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff fe86 	bl	80047cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004adc:	2300      	movs	r3, #0
 8004ade:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004aec:	2301      	movs	r3, #1
 8004aee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004af4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004afa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b00:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004b10:	f107 0308 	add.w	r3, r7, #8
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ff08 	bl	800492c <ETH_SetDMAConfig>
}
 8004b1c:	bf00      	nop
 8004b1e:	3798      	adds	r7, #152	; 0x98
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3305      	adds	r3, #5
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	3204      	adds	r2, #4
 8004b3c:	7812      	ldrb	r2, [r2, #0]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <ETH_MACAddressConfig+0x68>)
 8004b46:	4413      	add	r3, r2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3303      	adds	r3, #3
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	061a      	lsls	r2, r3, #24
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3302      	adds	r3, #2
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	041b      	lsls	r3, r3, #16
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3301      	adds	r3, #1
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	7812      	ldrb	r2, [r2, #0]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <ETH_MACAddressConfig+0x6c>)
 8004b76:	4413      	add	r3, r2
 8004b78:	461a      	mov	r2, r3
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	6013      	str	r3, [r2, #0]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40028040 	.word	0x40028040
 8004b90:	40028044 	.word	0x40028044

08004b94 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e03e      	b.n	8004c20 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68d9      	ldr	r1, [r3, #12]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	440b      	add	r3, r1
 8004bb2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	3206      	adds	r2, #6
 8004bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d80c      	bhi.n	8004c04 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68d9      	ldr	r1, [r3, #12]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	440b      	add	r3, r1
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	e004      	b.n	8004c0e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d9bd      	bls.n	8004ba2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c38:	611a      	str	r2, [r3, #16]
}
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	e046      	b.n	8004ce2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6919      	ldr	r1, [r3, #16]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	440b      	add	r3, r1
 8004c64:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2200      	movs	r2, #0
 8004c76:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2200      	movs	r2, #0
 8004c82:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2200      	movs	r2, #0
 8004c88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c90:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004c98:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	3212      	adds	r2, #18
 8004cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d80c      	bhi.n	8004cd2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6919      	ldr	r1, [r3, #16]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	440b      	add	r3, r1
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	60da      	str	r2, [r3, #12]
 8004cd0:	e004      	b.n	8004cdc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d9b5      	bls.n	8004c54 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d12:	60da      	str	r2, [r3, #12]
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b089      	sub	sp, #36	; 0x24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004d32:	2300      	movs	r3, #0
 8004d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004d36:	2300      	movs	r3, #0
 8004d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	e175      	b.n	800502c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004d40:	2201      	movs	r2, #1
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4013      	ands	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	f040 8164 	bne.w	8005026 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d005      	beq.n	8004d76 <HAL_GPIO_Init+0x56>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d130      	bne.n	8004dd8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	2203      	movs	r2, #3
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43db      	mvns	r3, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dac:	2201      	movs	r2, #1
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4013      	ands	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	091b      	lsrs	r3, r3, #4
 8004dc2:	f003 0201 	and.w	r2, r3, #1
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d017      	beq.n	8004e14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	2203      	movs	r2, #3
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d123      	bne.n	8004e68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	08da      	lsrs	r2, r3, #3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3208      	adds	r2, #8
 8004e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	220f      	movs	r2, #15
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4013      	ands	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	08da      	lsrs	r2, r3, #3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3208      	adds	r2, #8
 8004e62:	69b9      	ldr	r1, [r7, #24]
 8004e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	2203      	movs	r2, #3
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f003 0203 	and.w	r2, r3, #3
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80be 	beq.w	8005026 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eaa:	4b66      	ldr	r3, [pc, #408]	; (8005044 <HAL_GPIO_Init+0x324>)
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	4a65      	ldr	r2, [pc, #404]	; (8005044 <HAL_GPIO_Init+0x324>)
 8004eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8004eb6:	4b63      	ldr	r3, [pc, #396]	; (8005044 <HAL_GPIO_Init+0x324>)
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004ec2:	4a61      	ldr	r2, [pc, #388]	; (8005048 <HAL_GPIO_Init+0x328>)
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	089b      	lsrs	r3, r3, #2
 8004ec8:	3302      	adds	r3, #2
 8004eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	220f      	movs	r2, #15
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a58      	ldr	r2, [pc, #352]	; (800504c <HAL_GPIO_Init+0x32c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d037      	beq.n	8004f5e <HAL_GPIO_Init+0x23e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a57      	ldr	r2, [pc, #348]	; (8005050 <HAL_GPIO_Init+0x330>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d031      	beq.n	8004f5a <HAL_GPIO_Init+0x23a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a56      	ldr	r2, [pc, #344]	; (8005054 <HAL_GPIO_Init+0x334>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d02b      	beq.n	8004f56 <HAL_GPIO_Init+0x236>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a55      	ldr	r2, [pc, #340]	; (8005058 <HAL_GPIO_Init+0x338>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d025      	beq.n	8004f52 <HAL_GPIO_Init+0x232>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a54      	ldr	r2, [pc, #336]	; (800505c <HAL_GPIO_Init+0x33c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d01f      	beq.n	8004f4e <HAL_GPIO_Init+0x22e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a53      	ldr	r2, [pc, #332]	; (8005060 <HAL_GPIO_Init+0x340>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d019      	beq.n	8004f4a <HAL_GPIO_Init+0x22a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a52      	ldr	r2, [pc, #328]	; (8005064 <HAL_GPIO_Init+0x344>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <HAL_GPIO_Init+0x226>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a51      	ldr	r2, [pc, #324]	; (8005068 <HAL_GPIO_Init+0x348>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00d      	beq.n	8004f42 <HAL_GPIO_Init+0x222>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a50      	ldr	r2, [pc, #320]	; (800506c <HAL_GPIO_Init+0x34c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d007      	beq.n	8004f3e <HAL_GPIO_Init+0x21e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a4f      	ldr	r2, [pc, #316]	; (8005070 <HAL_GPIO_Init+0x350>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d101      	bne.n	8004f3a <HAL_GPIO_Init+0x21a>
 8004f36:	2309      	movs	r3, #9
 8004f38:	e012      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f3a:	230a      	movs	r3, #10
 8004f3c:	e010      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f3e:	2308      	movs	r3, #8
 8004f40:	e00e      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f42:	2307      	movs	r3, #7
 8004f44:	e00c      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f46:	2306      	movs	r3, #6
 8004f48:	e00a      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f4a:	2305      	movs	r3, #5
 8004f4c:	e008      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f4e:	2304      	movs	r3, #4
 8004f50:	e006      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f52:	2303      	movs	r3, #3
 8004f54:	e004      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e002      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <HAL_GPIO_Init+0x240>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	f002 0203 	and.w	r2, r2, #3
 8004f66:	0092      	lsls	r2, r2, #2
 8004f68:	4093      	lsls	r3, r2
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f70:	4935      	ldr	r1, [pc, #212]	; (8005048 <HAL_GPIO_Init+0x328>)
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	089b      	lsrs	r3, r3, #2
 8004f76:	3302      	adds	r3, #2
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f7e:	4b3d      	ldr	r3, [pc, #244]	; (8005074 <HAL_GPIO_Init+0x354>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	43db      	mvns	r3, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fa2:	4a34      	ldr	r2, [pc, #208]	; (8005074 <HAL_GPIO_Init+0x354>)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fa8:	4b32      	ldr	r3, [pc, #200]	; (8005074 <HAL_GPIO_Init+0x354>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fcc:	4a29      	ldr	r2, [pc, #164]	; (8005074 <HAL_GPIO_Init+0x354>)
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fd2:	4b28      	ldr	r3, [pc, #160]	; (8005074 <HAL_GPIO_Init+0x354>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ff6:	4a1f      	ldr	r2, [pc, #124]	; (8005074 <HAL_GPIO_Init+0x354>)
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ffc:	4b1d      	ldr	r3, [pc, #116]	; (8005074 <HAL_GPIO_Init+0x354>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	43db      	mvns	r3, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4013      	ands	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005020:	4a14      	ldr	r2, [pc, #80]	; (8005074 <HAL_GPIO_Init+0x354>)
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	3301      	adds	r3, #1
 800502a:	61fb      	str	r3, [r7, #28]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	2b0f      	cmp	r3, #15
 8005030:	f67f ae86 	bls.w	8004d40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop
 8005038:	3724      	adds	r7, #36	; 0x24
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40023800 	.word	0x40023800
 8005048:	40013800 	.word	0x40013800
 800504c:	40020000 	.word	0x40020000
 8005050:	40020400 	.word	0x40020400
 8005054:	40020800 	.word	0x40020800
 8005058:	40020c00 	.word	0x40020c00
 800505c:	40021000 	.word	0x40021000
 8005060:	40021400 	.word	0x40021400
 8005064:	40021800 	.word	0x40021800
 8005068:	40021c00 	.word	0x40021c00
 800506c:	40022000 	.word	0x40022000
 8005070:	40022400 	.word	0x40022400
 8005074:	40013c00 	.word	0x40013c00

08005078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	807b      	strh	r3, [r7, #2]
 8005084:	4613      	mov	r3, r2
 8005086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005088:	787b      	ldrb	r3, [r7, #1]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800508e:	887a      	ldrh	r2, [r7, #2]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005094:	e003      	b.n	800509e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005096:	887b      	ldrh	r3, [r7, #2]
 8005098:	041a      	lsls	r2, r3, #16
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	619a      	str	r2, [r3, #24]
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ac:	b08f      	sub	sp, #60	; 0x3c
 80050ae:	af0a      	add	r7, sp, #40	; 0x28
 80050b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e116      	b.n	80052ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d106      	bne.n	80050dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff f880 	bl	80041dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2203      	movs	r2, #3
 80050e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d102      	bne.n	80050f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f001 ff16 	bl	8006f2c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	603b      	str	r3, [r7, #0]
 8005106:	687e      	ldr	r6, [r7, #4]
 8005108:	466d      	mov	r5, sp
 800510a:	f106 0410 	add.w	r4, r6, #16
 800510e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005116:	e894 0003 	ldmia.w	r4, {r0, r1}
 800511a:	e885 0003 	stmia.w	r5, {r0, r1}
 800511e:	1d33      	adds	r3, r6, #4
 8005120:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005122:	6838      	ldr	r0, [r7, #0]
 8005124:	f001 feaa 	bl	8006e7c <USB_CoreInit>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e0d7      	b.n	80052ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2100      	movs	r1, #0
 8005140:	4618      	mov	r0, r3
 8005142:	f001 ff04 	bl	8006f4e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005146:	2300      	movs	r3, #0
 8005148:	73fb      	strb	r3, [r7, #15]
 800514a:	e04a      	b.n	80051e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800514c:	7bfa      	ldrb	r2, [r7, #15]
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	333d      	adds	r3, #61	; 0x3d
 800515c:	2201      	movs	r2, #1
 800515e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005160:	7bfa      	ldrb	r2, [r7, #15]
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	333c      	adds	r3, #60	; 0x3c
 8005170:	7bfa      	ldrb	r2, [r7, #15]
 8005172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005174:	7bfa      	ldrb	r2, [r7, #15]
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	b298      	uxth	r0, r3
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	4613      	mov	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	3344      	adds	r3, #68	; 0x44
 8005188:	4602      	mov	r2, r0
 800518a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800518c:	7bfa      	ldrb	r2, [r7, #15]
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	4613      	mov	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	3340      	adds	r3, #64	; 0x40
 800519c:	2200      	movs	r2, #0
 800519e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051a0:	7bfa      	ldrb	r2, [r7, #15]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	3348      	adds	r3, #72	; 0x48
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051b4:	7bfa      	ldrb	r2, [r7, #15]
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4413      	add	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	334c      	adds	r3, #76	; 0x4c
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051c8:	7bfa      	ldrb	r2, [r7, #15]
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	4613      	mov	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	3354      	adds	r3, #84	; 0x54
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	3301      	adds	r3, #1
 80051e0:	73fb      	strb	r3, [r7, #15]
 80051e2:	7bfa      	ldrb	r2, [r7, #15]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d3af      	bcc.n	800514c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ec:	2300      	movs	r3, #0
 80051ee:	73fb      	strb	r3, [r7, #15]
 80051f0:	e044      	b.n	800527c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051f2:	7bfa      	ldrb	r2, [r7, #15]
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005208:	7bfa      	ldrb	r2, [r7, #15]
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	4613      	mov	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800521a:	7bfa      	ldrb	r2, [r7, #15]
 800521c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800521e:	7bfa      	ldrb	r2, [r7, #15]
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	440b      	add	r3, r1
 800522c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005230:	2200      	movs	r2, #0
 8005232:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005234:	7bfa      	ldrb	r2, [r7, #15]
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	4613      	mov	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800524a:	7bfa      	ldrb	r2, [r7, #15]
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005260:	7bfa      	ldrb	r2, [r7, #15]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	3301      	adds	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
 800527c:	7bfa      	ldrb	r2, [r7, #15]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	429a      	cmp	r2, r3
 8005284:	d3b5      	bcc.n	80051f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	687e      	ldr	r6, [r7, #4]
 800528e:	466d      	mov	r5, sp
 8005290:	f106 0410 	add.w	r4, r6, #16
 8005294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800529a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800529c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80052a4:	1d33      	adds	r3, r6, #4
 80052a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052a8:	6838      	ldr	r0, [r7, #0]
 80052aa:	f001 fe9d 	bl	8006fe8 <USB_DevInit>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e014      	b.n	80052ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d102      	bne.n	80052de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f80b 	bl	80052f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f002 f85b 	bl	800739e <USB_DevDisconnect>

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080052f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <HAL_PCDEx_ActivateLPM+0x44>)
 8005324:	4313      	orrs	r3, r2
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	10000003 	.word	0x10000003

0800533c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a04      	ldr	r2, [pc, #16]	; (8005358 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800534a:	6013      	str	r3, [r2, #0]
}
 800534c:	bf00      	nop
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40007000 	.word	0x40007000

0800535c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005364:	2300      	movs	r3, #0
 8005366:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e291      	b.n	8005896 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 8087 	beq.w	800548e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005380:	4b96      	ldr	r3, [pc, #600]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 030c 	and.w	r3, r3, #12
 8005388:	2b04      	cmp	r3, #4
 800538a:	d00c      	beq.n	80053a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800538c:	4b93      	ldr	r3, [pc, #588]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 030c 	and.w	r3, r3, #12
 8005394:	2b08      	cmp	r3, #8
 8005396:	d112      	bne.n	80053be <HAL_RCC_OscConfig+0x62>
 8005398:	4b90      	ldr	r3, [pc, #576]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053a4:	d10b      	bne.n	80053be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a6:	4b8d      	ldr	r3, [pc, #564]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d06c      	beq.n	800548c <HAL_RCC_OscConfig+0x130>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d168      	bne.n	800548c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e26b      	b.n	8005896 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c6:	d106      	bne.n	80053d6 <HAL_RCC_OscConfig+0x7a>
 80053c8:	4b84      	ldr	r3, [pc, #528]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a83      	ldr	r2, [pc, #524]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80053ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	e02e      	b.n	8005434 <HAL_RCC_OscConfig+0xd8>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10c      	bne.n	80053f8 <HAL_RCC_OscConfig+0x9c>
 80053de:	4b7f      	ldr	r3, [pc, #508]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a7e      	ldr	r2, [pc, #504]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80053e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	4b7c      	ldr	r3, [pc, #496]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a7b      	ldr	r2, [pc, #492]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80053f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	e01d      	b.n	8005434 <HAL_RCC_OscConfig+0xd8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005400:	d10c      	bne.n	800541c <HAL_RCC_OscConfig+0xc0>
 8005402:	4b76      	ldr	r3, [pc, #472]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a75      	ldr	r2, [pc, #468]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 8005408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	4b73      	ldr	r3, [pc, #460]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a72      	ldr	r2, [pc, #456]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 8005414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	e00b      	b.n	8005434 <HAL_RCC_OscConfig+0xd8>
 800541c:	4b6f      	ldr	r3, [pc, #444]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a6e      	ldr	r2, [pc, #440]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 8005422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	4b6c      	ldr	r3, [pc, #432]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a6b      	ldr	r2, [pc, #428]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 800542e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d013      	beq.n	8005464 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543c:	f7ff f834 	bl	80044a8 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005444:	f7ff f830 	bl	80044a8 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b64      	cmp	r3, #100	; 0x64
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e21f      	b.n	8005896 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005456:	4b61      	ldr	r3, [pc, #388]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0f0      	beq.n	8005444 <HAL_RCC_OscConfig+0xe8>
 8005462:	e014      	b.n	800548e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7ff f820 	bl	80044a8 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800546c:	f7ff f81c 	bl	80044a8 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b64      	cmp	r3, #100	; 0x64
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e20b      	b.n	8005896 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547e:	4b57      	ldr	r3, [pc, #348]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f0      	bne.n	800546c <HAL_RCC_OscConfig+0x110>
 800548a:	e000      	b.n	800548e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800548c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d069      	beq.n	800556e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800549a:	4b50      	ldr	r3, [pc, #320]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 030c 	and.w	r3, r3, #12
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00b      	beq.n	80054be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054a6:	4b4d      	ldr	r3, [pc, #308]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 030c 	and.w	r3, r3, #12
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d11c      	bne.n	80054ec <HAL_RCC_OscConfig+0x190>
 80054b2:	4b4a      	ldr	r3, [pc, #296]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d116      	bne.n	80054ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054be:	4b47      	ldr	r3, [pc, #284]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_RCC_OscConfig+0x17a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d001      	beq.n	80054d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e1df      	b.n	8005896 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d6:	4b41      	ldr	r3, [pc, #260]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	493d      	ldr	r1, [pc, #244]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ea:	e040      	b.n	800556e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d023      	beq.n	800553c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054f4:	4b39      	ldr	r3, [pc, #228]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a38      	ldr	r2, [pc, #224]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005500:	f7fe ffd2 	bl	80044a8 <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005508:	f7fe ffce 	bl	80044a8 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e1bd      	b.n	8005896 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551a:	4b30      	ldr	r3, [pc, #192]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0f0      	beq.n	8005508 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005526:	4b2d      	ldr	r3, [pc, #180]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4929      	ldr	r1, [pc, #164]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 8005536:	4313      	orrs	r3, r2
 8005538:	600b      	str	r3, [r1, #0]
 800553a:	e018      	b.n	800556e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800553c:	4b27      	ldr	r3, [pc, #156]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a26      	ldr	r2, [pc, #152]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005548:	f7fe ffae 	bl	80044a8 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005550:	f7fe ffaa 	bl	80044a8 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e199      	b.n	8005896 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005562:	4b1e      	ldr	r3, [pc, #120]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1f0      	bne.n	8005550 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d038      	beq.n	80055ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d019      	beq.n	80055b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005582:	4b16      	ldr	r3, [pc, #88]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 8005584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005586:	4a15      	ldr	r2, [pc, #84]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558e:	f7fe ff8b 	bl	80044a8 <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005596:	f7fe ff87 	bl	80044a8 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e176      	b.n	8005896 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a8:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80055aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0x23a>
 80055b4:	e01a      	b.n	80055ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055b6:	4b09      	ldr	r3, [pc, #36]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80055b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ba:	4a08      	ldr	r2, [pc, #32]	; (80055dc <HAL_RCC_OscConfig+0x280>)
 80055bc:	f023 0301 	bic.w	r3, r3, #1
 80055c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c2:	f7fe ff71 	bl	80044a8 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c8:	e00a      	b.n	80055e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055ca:	f7fe ff6d 	bl	80044a8 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d903      	bls.n	80055e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e15c      	b.n	8005896 <HAL_RCC_OscConfig+0x53a>
 80055dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e0:	4b91      	ldr	r3, [pc, #580]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80055e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1ee      	bne.n	80055ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80a4 	beq.w	8005742 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055fa:	4b8b      	ldr	r3, [pc, #556]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10d      	bne.n	8005622 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005606:	4b88      	ldr	r3, [pc, #544]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	4a87      	ldr	r2, [pc, #540]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 800560c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005610:	6413      	str	r3, [r2, #64]	; 0x40
 8005612:	4b85      	ldr	r3, [pc, #532]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800561a:	60bb      	str	r3, [r7, #8]
 800561c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800561e:	2301      	movs	r3, #1
 8005620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005622:	4b82      	ldr	r3, [pc, #520]	; (800582c <HAL_RCC_OscConfig+0x4d0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562a:	2b00      	cmp	r3, #0
 800562c:	d118      	bne.n	8005660 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800562e:	4b7f      	ldr	r3, [pc, #508]	; (800582c <HAL_RCC_OscConfig+0x4d0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a7e      	ldr	r2, [pc, #504]	; (800582c <HAL_RCC_OscConfig+0x4d0>)
 8005634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800563a:	f7fe ff35 	bl	80044a8 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005642:	f7fe ff31 	bl	80044a8 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b64      	cmp	r3, #100	; 0x64
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e120      	b.n	8005896 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005654:	4b75      	ldr	r3, [pc, #468]	; (800582c <HAL_RCC_OscConfig+0x4d0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f0      	beq.n	8005642 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d106      	bne.n	8005676 <HAL_RCC_OscConfig+0x31a>
 8005668:	4b6f      	ldr	r3, [pc, #444]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 800566a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566c:	4a6e      	ldr	r2, [pc, #440]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	6713      	str	r3, [r2, #112]	; 0x70
 8005674:	e02d      	b.n	80056d2 <HAL_RCC_OscConfig+0x376>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10c      	bne.n	8005698 <HAL_RCC_OscConfig+0x33c>
 800567e:	4b6a      	ldr	r3, [pc, #424]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 8005680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005682:	4a69      	ldr	r2, [pc, #420]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 8005684:	f023 0301 	bic.w	r3, r3, #1
 8005688:	6713      	str	r3, [r2, #112]	; 0x70
 800568a:	4b67      	ldr	r3, [pc, #412]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	4a66      	ldr	r2, [pc, #408]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 8005690:	f023 0304 	bic.w	r3, r3, #4
 8005694:	6713      	str	r3, [r2, #112]	; 0x70
 8005696:	e01c      	b.n	80056d2 <HAL_RCC_OscConfig+0x376>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2b05      	cmp	r3, #5
 800569e:	d10c      	bne.n	80056ba <HAL_RCC_OscConfig+0x35e>
 80056a0:	4b61      	ldr	r3, [pc, #388]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80056a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a4:	4a60      	ldr	r2, [pc, #384]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80056a6:	f043 0304 	orr.w	r3, r3, #4
 80056aa:	6713      	str	r3, [r2, #112]	; 0x70
 80056ac:	4b5e      	ldr	r3, [pc, #376]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80056ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b0:	4a5d      	ldr	r2, [pc, #372]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80056b2:	f043 0301 	orr.w	r3, r3, #1
 80056b6:	6713      	str	r3, [r2, #112]	; 0x70
 80056b8:	e00b      	b.n	80056d2 <HAL_RCC_OscConfig+0x376>
 80056ba:	4b5b      	ldr	r3, [pc, #364]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	4a5a      	ldr	r2, [pc, #360]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	6713      	str	r3, [r2, #112]	; 0x70
 80056c6:	4b58      	ldr	r3, [pc, #352]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	4a57      	ldr	r2, [pc, #348]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80056cc:	f023 0304 	bic.w	r3, r3, #4
 80056d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d015      	beq.n	8005706 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056da:	f7fe fee5 	bl	80044a8 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e0:	e00a      	b.n	80056f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e2:	f7fe fee1 	bl	80044a8 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e0ce      	b.n	8005896 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f8:	4b4b      	ldr	r3, [pc, #300]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80056fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0ee      	beq.n	80056e2 <HAL_RCC_OscConfig+0x386>
 8005704:	e014      	b.n	8005730 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005706:	f7fe fecf 	bl	80044a8 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800570c:	e00a      	b.n	8005724 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570e:	f7fe fecb 	bl	80044a8 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	f241 3288 	movw	r2, #5000	; 0x1388
 800571c:	4293      	cmp	r3, r2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e0b8      	b.n	8005896 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005724:	4b40      	ldr	r3, [pc, #256]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 8005726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1ee      	bne.n	800570e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d105      	bne.n	8005742 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005736:	4b3c      	ldr	r3, [pc, #240]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	4a3b      	ldr	r2, [pc, #236]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 800573c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005740:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 80a4 	beq.w	8005894 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800574c:	4b36      	ldr	r3, [pc, #216]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 030c 	and.w	r3, r3, #12
 8005754:	2b08      	cmp	r3, #8
 8005756:	d06b      	beq.n	8005830 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d149      	bne.n	80057f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005760:	4b31      	ldr	r3, [pc, #196]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a30      	ldr	r2, [pc, #192]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 8005766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800576a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7fe fe9c 	bl	80044a8 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005774:	f7fe fe98 	bl	80044a8 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e087      	b.n	8005896 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005786:	4b28      	ldr	r3, [pc, #160]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69da      	ldr	r2, [r3, #28]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	019b      	lsls	r3, r3, #6
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	3b01      	subs	r3, #1
 80057ac:	041b      	lsls	r3, r3, #16
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	061b      	lsls	r3, r3, #24
 80057b6:	4313      	orrs	r3, r2
 80057b8:	4a1b      	ldr	r2, [pc, #108]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80057ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057c0:	4b19      	ldr	r3, [pc, #100]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a18      	ldr	r2, [pc, #96]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80057c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057cc:	f7fe fe6c 	bl	80044a8 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d4:	f7fe fe68 	bl	80044a8 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e057      	b.n	8005896 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0f0      	beq.n	80057d4 <HAL_RCC_OscConfig+0x478>
 80057f2:	e04f      	b.n	8005894 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f4:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a0b      	ldr	r2, [pc, #44]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 80057fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005800:	f7fe fe52 	bl	80044a8 <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005808:	f7fe fe4e 	bl	80044a8 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e03d      	b.n	8005896 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800581a:	4b03      	ldr	r3, [pc, #12]	; (8005828 <HAL_RCC_OscConfig+0x4cc>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f0      	bne.n	8005808 <HAL_RCC_OscConfig+0x4ac>
 8005826:	e035      	b.n	8005894 <HAL_RCC_OscConfig+0x538>
 8005828:	40023800 	.word	0x40023800
 800582c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005830:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <HAL_RCC_OscConfig+0x544>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d028      	beq.n	8005890 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d121      	bne.n	8005890 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005856:	429a      	cmp	r2, r3
 8005858:	d11a      	bne.n	8005890 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005860:	4013      	ands	r3, r2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005866:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005868:	4293      	cmp	r3, r2
 800586a:	d111      	bne.n	8005890 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005876:	085b      	lsrs	r3, r3, #1
 8005878:	3b01      	subs	r3, #1
 800587a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800587c:	429a      	cmp	r2, r3
 800587e:	d107      	bne.n	8005890 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800588c:	429a      	cmp	r2, r3
 800588e:	d001      	beq.n	8005894 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40023800 	.word	0x40023800

080058a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0d0      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058bc:	4b6a      	ldr	r3, [pc, #424]	; (8005a68 <HAL_RCC_ClockConfig+0x1c4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 030f 	and.w	r3, r3, #15
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d910      	bls.n	80058ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ca:	4b67      	ldr	r3, [pc, #412]	; (8005a68 <HAL_RCC_ClockConfig+0x1c4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f023 020f 	bic.w	r2, r3, #15
 80058d2:	4965      	ldr	r1, [pc, #404]	; (8005a68 <HAL_RCC_ClockConfig+0x1c4>)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058da:	4b63      	ldr	r3, [pc, #396]	; (8005a68 <HAL_RCC_ClockConfig+0x1c4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d001      	beq.n	80058ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0b8      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d020      	beq.n	800593a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005904:	4b59      	ldr	r3, [pc, #356]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4a58      	ldr	r2, [pc, #352]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 800590a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800590e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800591c:	4b53      	ldr	r3, [pc, #332]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	4a52      	ldr	r2, [pc, #328]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 8005922:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005926:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005928:	4b50      	ldr	r3, [pc, #320]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	494d      	ldr	r1, [pc, #308]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 8005936:	4313      	orrs	r3, r2
 8005938:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d040      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d107      	bne.n	800595e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800594e:	4b47      	ldr	r3, [pc, #284]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d115      	bne.n	8005986 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e07f      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d107      	bne.n	8005976 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005966:	4b41      	ldr	r3, [pc, #260]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d109      	bne.n	8005986 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e073      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005976:	4b3d      	ldr	r3, [pc, #244]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e06b      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005986:	4b39      	ldr	r3, [pc, #228]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f023 0203 	bic.w	r2, r3, #3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	4936      	ldr	r1, [pc, #216]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 8005994:	4313      	orrs	r3, r2
 8005996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005998:	f7fe fd86 	bl	80044a8 <HAL_GetTick>
 800599c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	e00a      	b.n	80059b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a0:	f7fe fd82 	bl	80044a8 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e053      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b6:	4b2d      	ldr	r3, [pc, #180]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 020c 	and.w	r2, r3, #12
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d1eb      	bne.n	80059a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059c8:	4b27      	ldr	r3, [pc, #156]	; (8005a68 <HAL_RCC_ClockConfig+0x1c4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d210      	bcs.n	80059f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d6:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <HAL_RCC_ClockConfig+0x1c4>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f023 020f 	bic.w	r2, r3, #15
 80059de:	4922      	ldr	r1, [pc, #136]	; (8005a68 <HAL_RCC_ClockConfig+0x1c4>)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e6:	4b20      	ldr	r3, [pc, #128]	; (8005a68 <HAL_RCC_ClockConfig+0x1c4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d001      	beq.n	80059f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e032      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a04:	4b19      	ldr	r3, [pc, #100]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	4916      	ldr	r1, [pc, #88]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d009      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a22:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	490e      	ldr	r1, [pc, #56]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a36:	f000 f821 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	490a      	ldr	r1, [pc, #40]	; (8005a70 <HAL_RCC_ClockConfig+0x1cc>)
 8005a48:	5ccb      	ldrb	r3, [r1, r3]
 8005a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4e:	4a09      	ldr	r2, [pc, #36]	; (8005a74 <HAL_RCC_ClockConfig+0x1d0>)
 8005a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a52:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <HAL_RCC_ClockConfig+0x1d4>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fe fce2 	bl	8004420 <HAL_InitTick>

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40023c00 	.word	0x40023c00
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	08007e88 	.word	0x08007e88
 8005a74:	2000003c 	.word	0x2000003c
 8005a78:	20000040 	.word	0x20000040

08005a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a80:	b094      	sub	sp, #80	; 0x50
 8005a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	647b      	str	r3, [r7, #68]	; 0x44
 8005a88:	2300      	movs	r3, #0
 8005a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a94:	4b79      	ldr	r3, [pc, #484]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 030c 	and.w	r3, r3, #12
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d00d      	beq.n	8005abc <HAL_RCC_GetSysClockFreq+0x40>
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	f200 80e1 	bhi.w	8005c68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d003      	beq.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aae:	e0db      	b.n	8005c68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ab0:	4b73      	ldr	r3, [pc, #460]	; (8005c80 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ab2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ab4:	e0db      	b.n	8005c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ab6:	4b73      	ldr	r3, [pc, #460]	; (8005c84 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ab8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005aba:	e0d8      	b.n	8005c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005abc:	4b6f      	ldr	r3, [pc, #444]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ac4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ac6:	4b6d      	ldr	r3, [pc, #436]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d063      	beq.n	8005b9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ad2:	4b6a      	ldr	r3, [pc, #424]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	099b      	lsrs	r3, r3, #6
 8005ad8:	2200      	movs	r2, #0
 8005ada:	63bb      	str	r3, [r7, #56]	; 0x38
 8005adc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005aee:	4622      	mov	r2, r4
 8005af0:	462b      	mov	r3, r5
 8005af2:	f04f 0000 	mov.w	r0, #0
 8005af6:	f04f 0100 	mov.w	r1, #0
 8005afa:	0159      	lsls	r1, r3, #5
 8005afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b00:	0150      	lsls	r0, r2, #5
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4621      	mov	r1, r4
 8005b08:	1a51      	subs	r1, r2, r1
 8005b0a:	6139      	str	r1, [r7, #16]
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b20:	4659      	mov	r1, fp
 8005b22:	018b      	lsls	r3, r1, #6
 8005b24:	4651      	mov	r1, sl
 8005b26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b2a:	4651      	mov	r1, sl
 8005b2c:	018a      	lsls	r2, r1, #6
 8005b2e:	4651      	mov	r1, sl
 8005b30:	ebb2 0801 	subs.w	r8, r2, r1
 8005b34:	4659      	mov	r1, fp
 8005b36:	eb63 0901 	sbc.w	r9, r3, r1
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b4e:	4690      	mov	r8, r2
 8005b50:	4699      	mov	r9, r3
 8005b52:	4623      	mov	r3, r4
 8005b54:	eb18 0303 	adds.w	r3, r8, r3
 8005b58:	60bb      	str	r3, [r7, #8]
 8005b5a:	462b      	mov	r3, r5
 8005b5c:	eb49 0303 	adc.w	r3, r9, r3
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b6e:	4629      	mov	r1, r5
 8005b70:	024b      	lsls	r3, r1, #9
 8005b72:	4621      	mov	r1, r4
 8005b74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b78:	4621      	mov	r1, r4
 8005b7a:	024a      	lsls	r2, r1, #9
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b82:	2200      	movs	r2, #0
 8005b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b8c:	f7fa fb90 	bl	80002b0 <__aeabi_uldivmod>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4613      	mov	r3, r2
 8005b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b98:	e058      	b.n	8005c4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b9a:	4b38      	ldr	r3, [pc, #224]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	099b      	lsrs	r3, r3, #6
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005baa:	623b      	str	r3, [r7, #32]
 8005bac:	2300      	movs	r3, #0
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	f04f 0000 	mov.w	r0, #0
 8005bbc:	f04f 0100 	mov.w	r1, #0
 8005bc0:	0159      	lsls	r1, r3, #5
 8005bc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bc6:	0150      	lsls	r0, r2, #5
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4641      	mov	r1, r8
 8005bce:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005be4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005be8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bec:	ebb2 040a 	subs.w	r4, r2, sl
 8005bf0:	eb63 050b 	sbc.w	r5, r3, fp
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	00eb      	lsls	r3, r5, #3
 8005bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c02:	00e2      	lsls	r2, r4, #3
 8005c04:	4614      	mov	r4, r2
 8005c06:	461d      	mov	r5, r3
 8005c08:	4643      	mov	r3, r8
 8005c0a:	18e3      	adds	r3, r4, r3
 8005c0c:	603b      	str	r3, [r7, #0]
 8005c0e:	464b      	mov	r3, r9
 8005c10:	eb45 0303 	adc.w	r3, r5, r3
 8005c14:	607b      	str	r3, [r7, #4]
 8005c16:	f04f 0200 	mov.w	r2, #0
 8005c1a:	f04f 0300 	mov.w	r3, #0
 8005c1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c22:	4629      	mov	r1, r5
 8005c24:	028b      	lsls	r3, r1, #10
 8005c26:	4621      	mov	r1, r4
 8005c28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	028a      	lsls	r2, r1, #10
 8005c30:	4610      	mov	r0, r2
 8005c32:	4619      	mov	r1, r3
 8005c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c36:	2200      	movs	r2, #0
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	61fa      	str	r2, [r7, #28]
 8005c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c40:	f7fa fb36 	bl	80002b0 <__aeabi_uldivmod>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4613      	mov	r3, r2
 8005c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	0c1b      	lsrs	r3, r3, #16
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	3301      	adds	r3, #1
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005c5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c66:	e002      	b.n	8005c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c68:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3750      	adds	r7, #80	; 0x50
 8005c74:	46bd      	mov	sp, r7
 8005c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	00f42400 	.word	0x00f42400
 8005c84:	007a1200 	.word	0x007a1200

08005c88 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c8c:	4b03      	ldr	r3, [pc, #12]	; (8005c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	2000003c 	.word	0x2000003c

08005ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ca4:	f7ff fff0 	bl	8005c88 <HAL_RCC_GetHCLKFreq>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	0a9b      	lsrs	r3, r3, #10
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	4903      	ldr	r1, [pc, #12]	; (8005cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cb6:	5ccb      	ldrb	r3, [r1, r3]
 8005cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	40023800 	.word	0x40023800
 8005cc4:	08007e98 	.word	0x08007e98

08005cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ccc:	f7ff ffdc 	bl	8005c88 <HAL_RCC_GetHCLKFreq>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	0b5b      	lsrs	r3, r3, #13
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	4903      	ldr	r1, [pc, #12]	; (8005cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cde:	5ccb      	ldrb	r3, [r1, r3]
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	08007e98 	.word	0x08007e98

08005cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b088      	sub	sp, #32
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d012      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d18:	4b69      	ldr	r3, [pc, #420]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4a68      	ldr	r2, [pc, #416]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005d22:	6093      	str	r3, [r2, #8]
 8005d24:	4b66      	ldr	r3, [pc, #408]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2c:	4964      	ldr	r1, [pc, #400]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d017      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d4a:	4b5d      	ldr	r3, [pc, #372]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d58:	4959      	ldr	r1, [pc, #356]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d68:	d101      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005d76:	2301      	movs	r3, #1
 8005d78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d017      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d86:	4b4e      	ldr	r3, [pc, #312]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	494a      	ldr	r1, [pc, #296]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005da4:	d101      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005da6:	2301      	movs	r3, #1
 8005da8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005db2:	2301      	movs	r3, #1
 8005db4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0320 	and.w	r3, r3, #32
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 808b 	beq.w	8005eea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005dd4:	4b3a      	ldr	r3, [pc, #232]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	4a39      	ldr	r2, [pc, #228]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dde:	6413      	str	r3, [r2, #64]	; 0x40
 8005de0:	4b37      	ldr	r3, [pc, #220]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005dec:	4b35      	ldr	r3, [pc, #212]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a34      	ldr	r2, [pc, #208]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df8:	f7fe fb56 	bl	80044a8 <HAL_GetTick>
 8005dfc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e00:	f7fe fb52 	bl	80044a8 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b64      	cmp	r3, #100	; 0x64
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e357      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005e12:	4b2c      	ldr	r3, [pc, #176]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0f0      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e1e:	4b28      	ldr	r3, [pc, #160]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d035      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d02e      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e3c:	4b20      	ldr	r3, [pc, #128]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e46:	4b1e      	ldr	r3, [pc, #120]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4a:	4a1d      	ldr	r2, [pc, #116]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e52:	4b1b      	ldr	r3, [pc, #108]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e56:	4a1a      	ldr	r2, [pc, #104]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005e5e:	4a18      	ldr	r2, [pc, #96]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e64:	4b16      	ldr	r3, [pc, #88]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d114      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e70:	f7fe fb1a 	bl	80044a8 <HAL_GetTick>
 8005e74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e76:	e00a      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e78:	f7fe fb16 	bl	80044a8 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e319      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0ee      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ea6:	d111      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005ea8:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005eb4:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005eb6:	400b      	ands	r3, r1
 8005eb8:	4901      	ldr	r1, [pc, #4]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	608b      	str	r3, [r1, #8]
 8005ebe:	e00b      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	40007000 	.word	0x40007000
 8005ec8:	0ffffcff 	.word	0x0ffffcff
 8005ecc:	4baa      	ldr	r3, [pc, #680]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	4aa9      	ldr	r2, [pc, #676]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ed2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ed6:	6093      	str	r3, [r2, #8]
 8005ed8:	4ba7      	ldr	r3, [pc, #668]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ee4:	49a4      	ldr	r1, [pc, #656]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d010      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ef6:	4ba0      	ldr	r3, [pc, #640]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005efc:	4a9e      	ldr	r2, [pc, #632]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005f06:	4b9c      	ldr	r3, [pc, #624]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	4999      	ldr	r1, [pc, #612]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f24:	4b94      	ldr	r3, [pc, #592]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f32:	4991      	ldr	r1, [pc, #580]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f46:	4b8c      	ldr	r3, [pc, #560]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f54:	4988      	ldr	r1, [pc, #544]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f68:	4b83      	ldr	r3, [pc, #524]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f76:	4980      	ldr	r1, [pc, #512]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f8a:	4b7b      	ldr	r3, [pc, #492]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f98:	4977      	ldr	r1, [pc, #476]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fac:	4b72      	ldr	r3, [pc, #456]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb2:	f023 0203 	bic.w	r2, r3, #3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fba:	496f      	ldr	r1, [pc, #444]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fce:	4b6a      	ldr	r3, [pc, #424]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd4:	f023 020c 	bic.w	r2, r3, #12
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fdc:	4966      	ldr	r1, [pc, #408]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ff0:	4b61      	ldr	r3, [pc, #388]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ffe:	495e      	ldr	r1, [pc, #376]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006012:	4b59      	ldr	r3, [pc, #356]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006018:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006020:	4955      	ldr	r1, [pc, #340]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00a      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006034:	4b50      	ldr	r3, [pc, #320]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006042:	494d      	ldr	r1, [pc, #308]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006056:	4b48      	ldr	r3, [pc, #288]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800605c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006064:	4944      	ldr	r1, [pc, #272]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00a      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006078:	4b3f      	ldr	r3, [pc, #252]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800607a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006086:	493c      	ldr	r1, [pc, #240]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006088:	4313      	orrs	r3, r2
 800608a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800609a:	4b37      	ldr	r3, [pc, #220]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800609c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a8:	4933      	ldr	r1, [pc, #204]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00a      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80060bc:	4b2e      	ldr	r3, [pc, #184]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ca:	492b      	ldr	r1, [pc, #172]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d011      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80060de:	4b26      	ldr	r3, [pc, #152]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ec:	4922      	ldr	r1, [pc, #136]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060fc:	d101      	bne.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80060fe:	2301      	movs	r3, #1
 8006100:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800610e:	2301      	movs	r3, #1
 8006110:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800611e:	4b16      	ldr	r3, [pc, #88]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006124:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800612c:	4912      	ldr	r1, [pc, #72]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800612e:	4313      	orrs	r3, r2
 8006130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00b      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006140:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006146:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006150:	4909      	ldr	r1, [pc, #36]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006152:	4313      	orrs	r3, r2
 8006154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d006      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 80d9 	beq.w	800631e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800616c:	4b02      	ldr	r3, [pc, #8]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a01      	ldr	r2, [pc, #4]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006172:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006176:	e001      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006178:	40023800 	.word	0x40023800
 800617c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800617e:	f7fe f993 	bl	80044a8 <HAL_GetTick>
 8006182:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006184:	e008      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006186:	f7fe f98f 	bl	80044a8 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b64      	cmp	r3, #100	; 0x64
 8006192:	d901      	bls.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e194      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006198:	4b6c      	ldr	r3, [pc, #432]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1f0      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d021      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d11d      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80061b8:	4b64      	ldr	r3, [pc, #400]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061be:	0c1b      	lsrs	r3, r3, #16
 80061c0:	f003 0303 	and.w	r3, r3, #3
 80061c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80061c6:	4b61      	ldr	r3, [pc, #388]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061cc:	0e1b      	lsrs	r3, r3, #24
 80061ce:	f003 030f 	and.w	r3, r3, #15
 80061d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	019a      	lsls	r2, r3, #6
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	041b      	lsls	r3, r3, #16
 80061de:	431a      	orrs	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	061b      	lsls	r3, r3, #24
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	071b      	lsls	r3, r3, #28
 80061ec:	4957      	ldr	r1, [pc, #348]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d004      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006208:	d00a      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006212:	2b00      	cmp	r3, #0
 8006214:	d02e      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800621e:	d129      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006220:	4b4a      	ldr	r3, [pc, #296]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006226:	0c1b      	lsrs	r3, r3, #16
 8006228:	f003 0303 	and.w	r3, r3, #3
 800622c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800622e:	4b47      	ldr	r3, [pc, #284]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006234:	0f1b      	lsrs	r3, r3, #28
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	019a      	lsls	r2, r3, #6
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	041b      	lsls	r3, r3, #16
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	061b      	lsls	r3, r3, #24
 800624e:	431a      	orrs	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	071b      	lsls	r3, r3, #28
 8006254:	493d      	ldr	r1, [pc, #244]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006256:	4313      	orrs	r3, r2
 8006258:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800625c:	4b3b      	ldr	r3, [pc, #236]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800625e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006262:	f023 021f 	bic.w	r2, r3, #31
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	3b01      	subs	r3, #1
 800626c:	4937      	ldr	r1, [pc, #220]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800626e:	4313      	orrs	r3, r2
 8006270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d01d      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006280:	4b32      	ldr	r3, [pc, #200]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006286:	0e1b      	lsrs	r3, r3, #24
 8006288:	f003 030f 	and.w	r3, r3, #15
 800628c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800628e:	4b2f      	ldr	r3, [pc, #188]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006294:	0f1b      	lsrs	r3, r3, #28
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	019a      	lsls	r2, r3, #6
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	041b      	lsls	r3, r3, #16
 80062a8:	431a      	orrs	r2, r3
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	061b      	lsls	r3, r3, #24
 80062ae:	431a      	orrs	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	071b      	lsls	r3, r3, #28
 80062b4:	4925      	ldr	r1, [pc, #148]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d011      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	019a      	lsls	r2, r3, #6
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	041b      	lsls	r3, r3, #16
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	061b      	lsls	r3, r3, #24
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	071b      	lsls	r3, r3, #28
 80062e4:	4919      	ldr	r1, [pc, #100]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062ec:	4b17      	ldr	r3, [pc, #92]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a16      	ldr	r2, [pc, #88]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062f8:	f7fe f8d6 	bl	80044a8 <HAL_GetTick>
 80062fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062fe:	e008      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006300:	f7fe f8d2 	bl	80044a8 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b64      	cmp	r3, #100	; 0x64
 800630c:	d901      	bls.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e0d7      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006312:	4b0e      	ldr	r3, [pc, #56]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0f0      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	2b01      	cmp	r3, #1
 8006322:	f040 80cd 	bne.w	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006326:	4b09      	ldr	r3, [pc, #36]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a08      	ldr	r2, [pc, #32]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800632c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006332:	f7fe f8b9 	bl	80044a8 <HAL_GetTick>
 8006336:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006338:	e00a      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800633a:	f7fe f8b5 	bl	80044a8 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b64      	cmp	r3, #100	; 0x64
 8006346:	d903      	bls.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e0ba      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800634c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006350:	4b5e      	ldr	r3, [pc, #376]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800635c:	d0ed      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800637a:	2b00      	cmp	r3, #0
 800637c:	d02e      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	2b00      	cmp	r3, #0
 8006384:	d12a      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006386:	4b51      	ldr	r3, [pc, #324]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638c:	0c1b      	lsrs	r3, r3, #16
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006394:	4b4d      	ldr	r3, [pc, #308]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639a:	0f1b      	lsrs	r3, r3, #28
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	019a      	lsls	r2, r3, #6
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	041b      	lsls	r3, r3, #16
 80063ac:	431a      	orrs	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	061b      	lsls	r3, r3, #24
 80063b4:	431a      	orrs	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	071b      	lsls	r3, r3, #28
 80063ba:	4944      	ldr	r1, [pc, #272]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80063c2:	4b42      	ldr	r3, [pc, #264]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d0:	3b01      	subs	r3, #1
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	493d      	ldr	r1, [pc, #244]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d022      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063f0:	d11d      	bne.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063f2:	4b36      	ldr	r3, [pc, #216]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f8:	0e1b      	lsrs	r3, r3, #24
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006400:	4b32      	ldr	r3, [pc, #200]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006406:	0f1b      	lsrs	r3, r3, #28
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	019a      	lsls	r2, r3, #6
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	041b      	lsls	r3, r3, #16
 800641a:	431a      	orrs	r2, r3
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	061b      	lsls	r3, r3, #24
 8006420:	431a      	orrs	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	071b      	lsls	r3, r3, #28
 8006426:	4929      	ldr	r1, [pc, #164]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d028      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800643a:	4b24      	ldr	r3, [pc, #144]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800643c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006440:	0e1b      	lsrs	r3, r3, #24
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006448:	4b20      	ldr	r3, [pc, #128]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800644a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644e:	0c1b      	lsrs	r3, r3, #16
 8006450:	f003 0303 	and.w	r3, r3, #3
 8006454:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	019a      	lsls	r2, r3, #6
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	041b      	lsls	r3, r3, #16
 8006460:	431a      	orrs	r2, r3
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	061b      	lsls	r3, r3, #24
 8006466:	431a      	orrs	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	071b      	lsls	r3, r3, #28
 800646e:	4917      	ldr	r1, [pc, #92]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006470:	4313      	orrs	r3, r2
 8006472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006476:	4b15      	ldr	r3, [pc, #84]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800647c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4911      	ldr	r1, [pc, #68]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006486:	4313      	orrs	r3, r2
 8006488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800648c:	4b0f      	ldr	r3, [pc, #60]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a0e      	ldr	r2, [pc, #56]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006498:	f7fe f806 	bl	80044a8 <HAL_GetTick>
 800649c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800649e:	e008      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80064a0:	f7fe f802 	bl	80044a8 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b64      	cmp	r3, #100	; 0x64
 80064ac:	d901      	bls.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e007      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80064b2:	4b06      	ldr	r3, [pc, #24]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064be:	d1ef      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3720      	adds	r7, #32
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	40023800 	.word	0x40023800

080064d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e040      	b.n	8006564 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7fd fe12 	bl	800411c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2224      	movs	r2, #36	; 0x24
 80064fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0201 	bic.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f8b0 	bl	8006674 <UART_SetConfig>
 8006514:	4603      	mov	r3, r0
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e022      	b.n	8006564 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fb08 	bl	8006b3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800653a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800654a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fb8f 	bl	8006c80 <UART_CheckIdleState>
 8006562:	4603      	mov	r3, r0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08a      	sub	sp, #40	; 0x28
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	4613      	mov	r3, r2
 800657a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006580:	2b20      	cmp	r3, #32
 8006582:	d171      	bne.n	8006668 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <HAL_UART_Transmit+0x24>
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e06a      	b.n	800666a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2221      	movs	r2, #33	; 0x21
 80065a0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065a2:	f7fd ff81 	bl	80044a8 <HAL_GetTick>
 80065a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	88fa      	ldrh	r2, [r7, #6]
 80065ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	88fa      	ldrh	r2, [r7, #6]
 80065b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c0:	d108      	bne.n	80065d4 <HAL_UART_Transmit+0x68>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	e003      	b.n	80065dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065d8:	2300      	movs	r3, #0
 80065da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065dc:	e02c      	b.n	8006638 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2200      	movs	r2, #0
 80065e6:	2180      	movs	r1, #128	; 0x80
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fb80 	bl	8006cee <UART_WaitOnFlagUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e038      	b.n	800666a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10b      	bne.n	8006616 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800660c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	3302      	adds	r3, #2
 8006612:	61bb      	str	r3, [r7, #24]
 8006614:	e007      	b.n	8006626 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	781a      	ldrb	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	3301      	adds	r3, #1
 8006624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800662c:	b29b      	uxth	r3, r3
 800662e:	3b01      	subs	r3, #1
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1cc      	bne.n	80065de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2200      	movs	r2, #0
 800664c:	2140      	movs	r1, #64	; 0x40
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 fb4d 	bl	8006cee <UART_WaitOnFlagUntilTimeout>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e005      	b.n	800666a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	e000      	b.n	800666a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006668:	2302      	movs	r3, #2
  }
}
 800666a:	4618      	mov	r0, r3
 800666c:	3720      	adds	r7, #32
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4ba6      	ldr	r3, [pc, #664]	; (8006938 <UART_SetConfig+0x2c4>)
 80066a0:	4013      	ands	r3, r2
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6812      	ldr	r2, [r2, #0]
 80066a6:	6979      	ldr	r1, [r7, #20]
 80066a8:	430b      	orrs	r3, r1
 80066aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a94      	ldr	r2, [pc, #592]	; (800693c <UART_SetConfig+0x2c8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d120      	bne.n	8006732 <UART_SetConfig+0xbe>
 80066f0:	4b93      	ldr	r3, [pc, #588]	; (8006940 <UART_SetConfig+0x2cc>)
 80066f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d816      	bhi.n	800672c <UART_SetConfig+0xb8>
 80066fe:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <UART_SetConfig+0x90>)
 8006700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006704:	08006715 	.word	0x08006715
 8006708:	08006721 	.word	0x08006721
 800670c:	0800671b 	.word	0x0800671b
 8006710:	08006727 	.word	0x08006727
 8006714:	2301      	movs	r3, #1
 8006716:	77fb      	strb	r3, [r7, #31]
 8006718:	e150      	b.n	80069bc <UART_SetConfig+0x348>
 800671a:	2302      	movs	r3, #2
 800671c:	77fb      	strb	r3, [r7, #31]
 800671e:	e14d      	b.n	80069bc <UART_SetConfig+0x348>
 8006720:	2304      	movs	r3, #4
 8006722:	77fb      	strb	r3, [r7, #31]
 8006724:	e14a      	b.n	80069bc <UART_SetConfig+0x348>
 8006726:	2308      	movs	r3, #8
 8006728:	77fb      	strb	r3, [r7, #31]
 800672a:	e147      	b.n	80069bc <UART_SetConfig+0x348>
 800672c:	2310      	movs	r3, #16
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e144      	b.n	80069bc <UART_SetConfig+0x348>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a83      	ldr	r2, [pc, #524]	; (8006944 <UART_SetConfig+0x2d0>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d132      	bne.n	80067a2 <UART_SetConfig+0x12e>
 800673c:	4b80      	ldr	r3, [pc, #512]	; (8006940 <UART_SetConfig+0x2cc>)
 800673e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006742:	f003 030c 	and.w	r3, r3, #12
 8006746:	2b0c      	cmp	r3, #12
 8006748:	d828      	bhi.n	800679c <UART_SetConfig+0x128>
 800674a:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <UART_SetConfig+0xdc>)
 800674c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006750:	08006785 	.word	0x08006785
 8006754:	0800679d 	.word	0x0800679d
 8006758:	0800679d 	.word	0x0800679d
 800675c:	0800679d 	.word	0x0800679d
 8006760:	08006791 	.word	0x08006791
 8006764:	0800679d 	.word	0x0800679d
 8006768:	0800679d 	.word	0x0800679d
 800676c:	0800679d 	.word	0x0800679d
 8006770:	0800678b 	.word	0x0800678b
 8006774:	0800679d 	.word	0x0800679d
 8006778:	0800679d 	.word	0x0800679d
 800677c:	0800679d 	.word	0x0800679d
 8006780:	08006797 	.word	0x08006797
 8006784:	2300      	movs	r3, #0
 8006786:	77fb      	strb	r3, [r7, #31]
 8006788:	e118      	b.n	80069bc <UART_SetConfig+0x348>
 800678a:	2302      	movs	r3, #2
 800678c:	77fb      	strb	r3, [r7, #31]
 800678e:	e115      	b.n	80069bc <UART_SetConfig+0x348>
 8006790:	2304      	movs	r3, #4
 8006792:	77fb      	strb	r3, [r7, #31]
 8006794:	e112      	b.n	80069bc <UART_SetConfig+0x348>
 8006796:	2308      	movs	r3, #8
 8006798:	77fb      	strb	r3, [r7, #31]
 800679a:	e10f      	b.n	80069bc <UART_SetConfig+0x348>
 800679c:	2310      	movs	r3, #16
 800679e:	77fb      	strb	r3, [r7, #31]
 80067a0:	e10c      	b.n	80069bc <UART_SetConfig+0x348>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a68      	ldr	r2, [pc, #416]	; (8006948 <UART_SetConfig+0x2d4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d120      	bne.n	80067ee <UART_SetConfig+0x17a>
 80067ac:	4b64      	ldr	r3, [pc, #400]	; (8006940 <UART_SetConfig+0x2cc>)
 80067ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067b6:	2b30      	cmp	r3, #48	; 0x30
 80067b8:	d013      	beq.n	80067e2 <UART_SetConfig+0x16e>
 80067ba:	2b30      	cmp	r3, #48	; 0x30
 80067bc:	d814      	bhi.n	80067e8 <UART_SetConfig+0x174>
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d009      	beq.n	80067d6 <UART_SetConfig+0x162>
 80067c2:	2b20      	cmp	r3, #32
 80067c4:	d810      	bhi.n	80067e8 <UART_SetConfig+0x174>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <UART_SetConfig+0x15c>
 80067ca:	2b10      	cmp	r3, #16
 80067cc:	d006      	beq.n	80067dc <UART_SetConfig+0x168>
 80067ce:	e00b      	b.n	80067e8 <UART_SetConfig+0x174>
 80067d0:	2300      	movs	r3, #0
 80067d2:	77fb      	strb	r3, [r7, #31]
 80067d4:	e0f2      	b.n	80069bc <UART_SetConfig+0x348>
 80067d6:	2302      	movs	r3, #2
 80067d8:	77fb      	strb	r3, [r7, #31]
 80067da:	e0ef      	b.n	80069bc <UART_SetConfig+0x348>
 80067dc:	2304      	movs	r3, #4
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e0ec      	b.n	80069bc <UART_SetConfig+0x348>
 80067e2:	2308      	movs	r3, #8
 80067e4:	77fb      	strb	r3, [r7, #31]
 80067e6:	e0e9      	b.n	80069bc <UART_SetConfig+0x348>
 80067e8:	2310      	movs	r3, #16
 80067ea:	77fb      	strb	r3, [r7, #31]
 80067ec:	e0e6      	b.n	80069bc <UART_SetConfig+0x348>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a56      	ldr	r2, [pc, #344]	; (800694c <UART_SetConfig+0x2d8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d120      	bne.n	800683a <UART_SetConfig+0x1c6>
 80067f8:	4b51      	ldr	r3, [pc, #324]	; (8006940 <UART_SetConfig+0x2cc>)
 80067fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006802:	2bc0      	cmp	r3, #192	; 0xc0
 8006804:	d013      	beq.n	800682e <UART_SetConfig+0x1ba>
 8006806:	2bc0      	cmp	r3, #192	; 0xc0
 8006808:	d814      	bhi.n	8006834 <UART_SetConfig+0x1c0>
 800680a:	2b80      	cmp	r3, #128	; 0x80
 800680c:	d009      	beq.n	8006822 <UART_SetConfig+0x1ae>
 800680e:	2b80      	cmp	r3, #128	; 0x80
 8006810:	d810      	bhi.n	8006834 <UART_SetConfig+0x1c0>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <UART_SetConfig+0x1a8>
 8006816:	2b40      	cmp	r3, #64	; 0x40
 8006818:	d006      	beq.n	8006828 <UART_SetConfig+0x1b4>
 800681a:	e00b      	b.n	8006834 <UART_SetConfig+0x1c0>
 800681c:	2300      	movs	r3, #0
 800681e:	77fb      	strb	r3, [r7, #31]
 8006820:	e0cc      	b.n	80069bc <UART_SetConfig+0x348>
 8006822:	2302      	movs	r3, #2
 8006824:	77fb      	strb	r3, [r7, #31]
 8006826:	e0c9      	b.n	80069bc <UART_SetConfig+0x348>
 8006828:	2304      	movs	r3, #4
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e0c6      	b.n	80069bc <UART_SetConfig+0x348>
 800682e:	2308      	movs	r3, #8
 8006830:	77fb      	strb	r3, [r7, #31]
 8006832:	e0c3      	b.n	80069bc <UART_SetConfig+0x348>
 8006834:	2310      	movs	r3, #16
 8006836:	77fb      	strb	r3, [r7, #31]
 8006838:	e0c0      	b.n	80069bc <UART_SetConfig+0x348>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a44      	ldr	r2, [pc, #272]	; (8006950 <UART_SetConfig+0x2dc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d125      	bne.n	8006890 <UART_SetConfig+0x21c>
 8006844:	4b3e      	ldr	r3, [pc, #248]	; (8006940 <UART_SetConfig+0x2cc>)
 8006846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800684a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800684e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006852:	d017      	beq.n	8006884 <UART_SetConfig+0x210>
 8006854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006858:	d817      	bhi.n	800688a <UART_SetConfig+0x216>
 800685a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800685e:	d00b      	beq.n	8006878 <UART_SetConfig+0x204>
 8006860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006864:	d811      	bhi.n	800688a <UART_SetConfig+0x216>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <UART_SetConfig+0x1fe>
 800686a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800686e:	d006      	beq.n	800687e <UART_SetConfig+0x20a>
 8006870:	e00b      	b.n	800688a <UART_SetConfig+0x216>
 8006872:	2300      	movs	r3, #0
 8006874:	77fb      	strb	r3, [r7, #31]
 8006876:	e0a1      	b.n	80069bc <UART_SetConfig+0x348>
 8006878:	2302      	movs	r3, #2
 800687a:	77fb      	strb	r3, [r7, #31]
 800687c:	e09e      	b.n	80069bc <UART_SetConfig+0x348>
 800687e:	2304      	movs	r3, #4
 8006880:	77fb      	strb	r3, [r7, #31]
 8006882:	e09b      	b.n	80069bc <UART_SetConfig+0x348>
 8006884:	2308      	movs	r3, #8
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e098      	b.n	80069bc <UART_SetConfig+0x348>
 800688a:	2310      	movs	r3, #16
 800688c:	77fb      	strb	r3, [r7, #31]
 800688e:	e095      	b.n	80069bc <UART_SetConfig+0x348>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a2f      	ldr	r2, [pc, #188]	; (8006954 <UART_SetConfig+0x2e0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d125      	bne.n	80068e6 <UART_SetConfig+0x272>
 800689a:	4b29      	ldr	r3, [pc, #164]	; (8006940 <UART_SetConfig+0x2cc>)
 800689c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068a8:	d017      	beq.n	80068da <UART_SetConfig+0x266>
 80068aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ae:	d817      	bhi.n	80068e0 <UART_SetConfig+0x26c>
 80068b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b4:	d00b      	beq.n	80068ce <UART_SetConfig+0x25a>
 80068b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ba:	d811      	bhi.n	80068e0 <UART_SetConfig+0x26c>
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <UART_SetConfig+0x254>
 80068c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c4:	d006      	beq.n	80068d4 <UART_SetConfig+0x260>
 80068c6:	e00b      	b.n	80068e0 <UART_SetConfig+0x26c>
 80068c8:	2301      	movs	r3, #1
 80068ca:	77fb      	strb	r3, [r7, #31]
 80068cc:	e076      	b.n	80069bc <UART_SetConfig+0x348>
 80068ce:	2302      	movs	r3, #2
 80068d0:	77fb      	strb	r3, [r7, #31]
 80068d2:	e073      	b.n	80069bc <UART_SetConfig+0x348>
 80068d4:	2304      	movs	r3, #4
 80068d6:	77fb      	strb	r3, [r7, #31]
 80068d8:	e070      	b.n	80069bc <UART_SetConfig+0x348>
 80068da:	2308      	movs	r3, #8
 80068dc:	77fb      	strb	r3, [r7, #31]
 80068de:	e06d      	b.n	80069bc <UART_SetConfig+0x348>
 80068e0:	2310      	movs	r3, #16
 80068e2:	77fb      	strb	r3, [r7, #31]
 80068e4:	e06a      	b.n	80069bc <UART_SetConfig+0x348>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a1b      	ldr	r2, [pc, #108]	; (8006958 <UART_SetConfig+0x2e4>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d138      	bne.n	8006962 <UART_SetConfig+0x2ee>
 80068f0:	4b13      	ldr	r3, [pc, #76]	; (8006940 <UART_SetConfig+0x2cc>)
 80068f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80068fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068fe:	d017      	beq.n	8006930 <UART_SetConfig+0x2bc>
 8006900:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006904:	d82a      	bhi.n	800695c <UART_SetConfig+0x2e8>
 8006906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800690a:	d00b      	beq.n	8006924 <UART_SetConfig+0x2b0>
 800690c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006910:	d824      	bhi.n	800695c <UART_SetConfig+0x2e8>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <UART_SetConfig+0x2aa>
 8006916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800691a:	d006      	beq.n	800692a <UART_SetConfig+0x2b6>
 800691c:	e01e      	b.n	800695c <UART_SetConfig+0x2e8>
 800691e:	2300      	movs	r3, #0
 8006920:	77fb      	strb	r3, [r7, #31]
 8006922:	e04b      	b.n	80069bc <UART_SetConfig+0x348>
 8006924:	2302      	movs	r3, #2
 8006926:	77fb      	strb	r3, [r7, #31]
 8006928:	e048      	b.n	80069bc <UART_SetConfig+0x348>
 800692a:	2304      	movs	r3, #4
 800692c:	77fb      	strb	r3, [r7, #31]
 800692e:	e045      	b.n	80069bc <UART_SetConfig+0x348>
 8006930:	2308      	movs	r3, #8
 8006932:	77fb      	strb	r3, [r7, #31]
 8006934:	e042      	b.n	80069bc <UART_SetConfig+0x348>
 8006936:	bf00      	nop
 8006938:	efff69f3 	.word	0xefff69f3
 800693c:	40011000 	.word	0x40011000
 8006940:	40023800 	.word	0x40023800
 8006944:	40004400 	.word	0x40004400
 8006948:	40004800 	.word	0x40004800
 800694c:	40004c00 	.word	0x40004c00
 8006950:	40005000 	.word	0x40005000
 8006954:	40011400 	.word	0x40011400
 8006958:	40007800 	.word	0x40007800
 800695c:	2310      	movs	r3, #16
 800695e:	77fb      	strb	r3, [r7, #31]
 8006960:	e02c      	b.n	80069bc <UART_SetConfig+0x348>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a72      	ldr	r2, [pc, #456]	; (8006b30 <UART_SetConfig+0x4bc>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d125      	bne.n	80069b8 <UART_SetConfig+0x344>
 800696c:	4b71      	ldr	r3, [pc, #452]	; (8006b34 <UART_SetConfig+0x4c0>)
 800696e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006972:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006976:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800697a:	d017      	beq.n	80069ac <UART_SetConfig+0x338>
 800697c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006980:	d817      	bhi.n	80069b2 <UART_SetConfig+0x33e>
 8006982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006986:	d00b      	beq.n	80069a0 <UART_SetConfig+0x32c>
 8006988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800698c:	d811      	bhi.n	80069b2 <UART_SetConfig+0x33e>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <UART_SetConfig+0x326>
 8006992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006996:	d006      	beq.n	80069a6 <UART_SetConfig+0x332>
 8006998:	e00b      	b.n	80069b2 <UART_SetConfig+0x33e>
 800699a:	2300      	movs	r3, #0
 800699c:	77fb      	strb	r3, [r7, #31]
 800699e:	e00d      	b.n	80069bc <UART_SetConfig+0x348>
 80069a0:	2302      	movs	r3, #2
 80069a2:	77fb      	strb	r3, [r7, #31]
 80069a4:	e00a      	b.n	80069bc <UART_SetConfig+0x348>
 80069a6:	2304      	movs	r3, #4
 80069a8:	77fb      	strb	r3, [r7, #31]
 80069aa:	e007      	b.n	80069bc <UART_SetConfig+0x348>
 80069ac:	2308      	movs	r3, #8
 80069ae:	77fb      	strb	r3, [r7, #31]
 80069b0:	e004      	b.n	80069bc <UART_SetConfig+0x348>
 80069b2:	2310      	movs	r3, #16
 80069b4:	77fb      	strb	r3, [r7, #31]
 80069b6:	e001      	b.n	80069bc <UART_SetConfig+0x348>
 80069b8:	2310      	movs	r3, #16
 80069ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c4:	d15b      	bne.n	8006a7e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80069c6:	7ffb      	ldrb	r3, [r7, #31]
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d828      	bhi.n	8006a1e <UART_SetConfig+0x3aa>
 80069cc:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <UART_SetConfig+0x360>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	080069f9 	.word	0x080069f9
 80069d8:	08006a01 	.word	0x08006a01
 80069dc:	08006a09 	.word	0x08006a09
 80069e0:	08006a1f 	.word	0x08006a1f
 80069e4:	08006a0f 	.word	0x08006a0f
 80069e8:	08006a1f 	.word	0x08006a1f
 80069ec:	08006a1f 	.word	0x08006a1f
 80069f0:	08006a1f 	.word	0x08006a1f
 80069f4:	08006a17 	.word	0x08006a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069f8:	f7ff f952 	bl	8005ca0 <HAL_RCC_GetPCLK1Freq>
 80069fc:	61b8      	str	r0, [r7, #24]
        break;
 80069fe:	e013      	b.n	8006a28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a00:	f7ff f962 	bl	8005cc8 <HAL_RCC_GetPCLK2Freq>
 8006a04:	61b8      	str	r0, [r7, #24]
        break;
 8006a06:	e00f      	b.n	8006a28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a08:	4b4b      	ldr	r3, [pc, #300]	; (8006b38 <UART_SetConfig+0x4c4>)
 8006a0a:	61bb      	str	r3, [r7, #24]
        break;
 8006a0c:	e00c      	b.n	8006a28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a0e:	f7ff f835 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8006a12:	61b8      	str	r0, [r7, #24]
        break;
 8006a14:	e008      	b.n	8006a28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1a:	61bb      	str	r3, [r7, #24]
        break;
 8006a1c:	e004      	b.n	8006a28 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	77bb      	strb	r3, [r7, #30]
        break;
 8006a26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d074      	beq.n	8006b18 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	005a      	lsls	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	085b      	lsrs	r3, r3, #1
 8006a38:	441a      	add	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	2b0f      	cmp	r3, #15
 8006a48:	d916      	bls.n	8006a78 <UART_SetConfig+0x404>
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a50:	d212      	bcs.n	8006a78 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	f023 030f 	bic.w	r3, r3, #15
 8006a5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	085b      	lsrs	r3, r3, #1
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	89fb      	ldrh	r3, [r7, #14]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	89fa      	ldrh	r2, [r7, #14]
 8006a74:	60da      	str	r2, [r3, #12]
 8006a76:	e04f      	b.n	8006b18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	77bb      	strb	r3, [r7, #30]
 8006a7c:	e04c      	b.n	8006b18 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a7e:	7ffb      	ldrb	r3, [r7, #31]
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d828      	bhi.n	8006ad6 <UART_SetConfig+0x462>
 8006a84:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <UART_SetConfig+0x418>)
 8006a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8a:	bf00      	nop
 8006a8c:	08006ab1 	.word	0x08006ab1
 8006a90:	08006ab9 	.word	0x08006ab9
 8006a94:	08006ac1 	.word	0x08006ac1
 8006a98:	08006ad7 	.word	0x08006ad7
 8006a9c:	08006ac7 	.word	0x08006ac7
 8006aa0:	08006ad7 	.word	0x08006ad7
 8006aa4:	08006ad7 	.word	0x08006ad7
 8006aa8:	08006ad7 	.word	0x08006ad7
 8006aac:	08006acf 	.word	0x08006acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab0:	f7ff f8f6 	bl	8005ca0 <HAL_RCC_GetPCLK1Freq>
 8006ab4:	61b8      	str	r0, [r7, #24]
        break;
 8006ab6:	e013      	b.n	8006ae0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ab8:	f7ff f906 	bl	8005cc8 <HAL_RCC_GetPCLK2Freq>
 8006abc:	61b8      	str	r0, [r7, #24]
        break;
 8006abe:	e00f      	b.n	8006ae0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ac0:	4b1d      	ldr	r3, [pc, #116]	; (8006b38 <UART_SetConfig+0x4c4>)
 8006ac2:	61bb      	str	r3, [r7, #24]
        break;
 8006ac4:	e00c      	b.n	8006ae0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ac6:	f7fe ffd9 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8006aca:	61b8      	str	r0, [r7, #24]
        break;
 8006acc:	e008      	b.n	8006ae0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ad2:	61bb      	str	r3, [r7, #24]
        break;
 8006ad4:	e004      	b.n	8006ae0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	77bb      	strb	r3, [r7, #30]
        break;
 8006ade:	bf00      	nop
    }

    if (pclk != 0U)
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d018      	beq.n	8006b18 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	085a      	lsrs	r2, r3, #1
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	441a      	add	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	2b0f      	cmp	r3, #15
 8006afe:	d909      	bls.n	8006b14 <UART_SetConfig+0x4a0>
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b06:	d205      	bcs.n	8006b14 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	60da      	str	r2, [r3, #12]
 8006b12:	e001      	b.n	8006b18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b24:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3720      	adds	r7, #32
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	40007c00 	.word	0x40007c00
 8006b34:	40023800 	.word	0x40023800
 8006b38:	00f42400 	.word	0x00f42400

08006b3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00a      	beq.n	8006b66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00a      	beq.n	8006b88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00a      	beq.n	8006baa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00a      	beq.n	8006bee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01a      	beq.n	8006c52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c3a:	d10a      	bne.n	8006c52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	605a      	str	r2, [r3, #4]
  }
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c90:	f7fd fc0a 	bl	80044a8 <HAL_GetTick>
 8006c94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0308 	and.w	r3, r3, #8
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d10e      	bne.n	8006cc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ca4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f81b 	bl	8006cee <UART_WaitOnFlagUntilTimeout>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e011      	b.n	8006ce6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b09c      	sub	sp, #112	; 0x70
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	603b      	str	r3, [r7, #0]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfe:	e0a7      	b.n	8006e50 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d06:	f000 80a3 	beq.w	8006e50 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d0a:	f7fd fbcd 	bl	80044a8 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d302      	bcc.n	8006d20 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d13f      	bne.n	8006da0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d34:	667b      	str	r3, [r7, #100]	; 0x64
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d40:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d46:	e841 2300 	strex	r3, r2, [r1]
 8006d4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1e6      	bne.n	8006d20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3308      	adds	r3, #8
 8006d58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d64:	f023 0301 	bic.w	r3, r3, #1
 8006d68:	663b      	str	r3, [r7, #96]	; 0x60
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3308      	adds	r3, #8
 8006d70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d72:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1e5      	bne.n	8006d52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e068      	b.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0304 	and.w	r3, r3, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d050      	beq.n	8006e50 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dbc:	d148      	bne.n	8006e50 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dc6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd0:	e853 3f00 	ldrex	r3, [r3]
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ddc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de6:	637b      	str	r3, [r7, #52]	; 0x34
 8006de8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e6      	bne.n	8006dc8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3308      	adds	r3, #8
 8006e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	613b      	str	r3, [r7, #16]
   return(result);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f023 0301 	bic.w	r3, r3, #1
 8006e10:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3308      	adds	r3, #8
 8006e18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e1a:	623a      	str	r2, [r7, #32]
 8006e1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	69f9      	ldr	r1, [r7, #28]
 8006e20:	6a3a      	ldr	r2, [r7, #32]
 8006e22:	e841 2300 	strex	r3, r2, [r1]
 8006e26:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1e5      	bne.n	8006dfa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2220      	movs	r2, #32
 8006e32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2220      	movs	r2, #32
 8006e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e010      	b.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	69da      	ldr	r2, [r3, #28]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	bf0c      	ite	eq
 8006e60:	2301      	moveq	r3, #1
 8006e62:	2300      	movne	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	79fb      	ldrb	r3, [r7, #7]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	f43f af48 	beq.w	8006d00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3770      	adds	r7, #112	; 0x70
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b084      	sub	sp, #16
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	f107 001c 	add.w	r0, r7, #28
 8006e8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d120      	bne.n	8006ed6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	4b20      	ldr	r3, [pc, #128]	; (8006f28 <USB_CoreInit+0xac>)
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d105      	bne.n	8006eca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fa96 	bl	80073fc <USB_CoreReset>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73fb      	strb	r3, [r7, #15]
 8006ed4:	e010      	b.n	8006ef8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fa8a 	bl	80073fc <USB_CoreReset>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d10b      	bne.n	8006f16 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f043 0206 	orr.w	r2, r3, #6
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f043 0220 	orr.w	r2, r3, #32
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f22:	b004      	add	sp, #16
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	ffbdffbf 	.word	0xffbdffbf

08006f2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f023 0201 	bic.w	r2, r3, #1
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b084      	sub	sp, #16
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	460b      	mov	r3, r1
 8006f58:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f6a:	78fb      	ldrb	r3, [r7, #3]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d115      	bne.n	8006f9c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f7c:	2001      	movs	r0, #1
 8006f7e:	f7fd fa9f 	bl	80044c0 <HAL_Delay>
      ms++;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3301      	adds	r3, #1
 8006f86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fa29 	bl	80073e0 <USB_GetMode>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d01e      	beq.n	8006fd2 <USB_SetCurrentMode+0x84>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b31      	cmp	r3, #49	; 0x31
 8006f98:	d9f0      	bls.n	8006f7c <USB_SetCurrentMode+0x2e>
 8006f9a:	e01a      	b.n	8006fd2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f9c:	78fb      	ldrb	r3, [r7, #3]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d115      	bne.n	8006fce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006fae:	2001      	movs	r0, #1
 8006fb0:	f7fd fa86 	bl	80044c0 <HAL_Delay>
      ms++;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fa10 	bl	80073e0 <USB_GetMode>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d005      	beq.n	8006fd2 <USB_SetCurrentMode+0x84>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b31      	cmp	r3, #49	; 0x31
 8006fca:	d9f0      	bls.n	8006fae <USB_SetCurrentMode+0x60>
 8006fcc:	e001      	b.n	8006fd2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e005      	b.n	8006fde <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b32      	cmp	r3, #50	; 0x32
 8006fd6:	d101      	bne.n	8006fdc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e000      	b.n	8006fde <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fe8:	b084      	sub	sp, #16
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b086      	sub	sp, #24
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007002:	2300      	movs	r3, #0
 8007004:	613b      	str	r3, [r7, #16]
 8007006:	e009      	b.n	800701c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	3340      	adds	r3, #64	; 0x40
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	2200      	movs	r2, #0
 8007014:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	3301      	adds	r3, #1
 800701a:	613b      	str	r3, [r7, #16]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2b0e      	cmp	r3, #14
 8007020:	d9f2      	bls.n	8007008 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d11c      	bne.n	8007062 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007036:	f043 0302 	orr.w	r3, r3, #2
 800703a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	e005      	b.n	800706e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007066:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007074:	461a      	mov	r2, r3
 8007076:	2300      	movs	r3, #0
 8007078:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007080:	4619      	mov	r1, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007088:	461a      	mov	r2, r3
 800708a:	680b      	ldr	r3, [r1, #0]
 800708c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	2b01      	cmp	r3, #1
 8007092:	d10c      	bne.n	80070ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007096:	2b00      	cmp	r3, #0
 8007098:	d104      	bne.n	80070a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800709a:	2100      	movs	r1, #0
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f965 	bl	800736c <USB_SetDevSpeed>
 80070a2:	e008      	b.n	80070b6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80070a4:	2101      	movs	r1, #1
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f960 	bl	800736c <USB_SetDevSpeed>
 80070ac:	e003      	b.n	80070b6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80070ae:	2103      	movs	r1, #3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f95b 	bl	800736c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070b6:	2110      	movs	r1, #16
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f8f3 	bl	80072a4 <USB_FlushTxFifo>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f91f 	bl	800730c <USB_FlushRxFifo>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070de:	461a      	mov	r2, r3
 80070e0:	2300      	movs	r3, #0
 80070e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ea:	461a      	mov	r2, r3
 80070ec:	2300      	movs	r3, #0
 80070ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f6:	461a      	mov	r2, r3
 80070f8:	2300      	movs	r3, #0
 80070fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070fc:	2300      	movs	r3, #0
 80070fe:	613b      	str	r3, [r7, #16]
 8007100:	e043      	b.n	800718a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007118:	d118      	bne.n	800714c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10a      	bne.n	8007136 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712c:	461a      	mov	r2, r3
 800712e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007132:	6013      	str	r3, [r2, #0]
 8007134:	e013      	b.n	800715e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007142:	461a      	mov	r2, r3
 8007144:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007148:	6013      	str	r3, [r2, #0]
 800714a:	e008      	b.n	800715e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007158:	461a      	mov	r2, r3
 800715a:	2300      	movs	r3, #0
 800715c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4413      	add	r3, r2
 8007166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716a:	461a      	mov	r2, r3
 800716c:	2300      	movs	r3, #0
 800716e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717c:	461a      	mov	r2, r3
 800717e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007182:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	3301      	adds	r3, #1
 8007188:	613b      	str	r3, [r7, #16]
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	429a      	cmp	r2, r3
 8007190:	d3b7      	bcc.n	8007102 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007192:	2300      	movs	r3, #0
 8007194:	613b      	str	r3, [r7, #16]
 8007196:	e043      	b.n	8007220 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071ae:	d118      	bne.n	80071e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10a      	bne.n	80071cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c2:	461a      	mov	r2, r3
 80071c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	e013      	b.n	80071f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d8:	461a      	mov	r2, r3
 80071da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	e008      	b.n	80071f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	461a      	mov	r2, r3
 80071f0:	2300      	movs	r3, #0
 80071f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007200:	461a      	mov	r2, r3
 8007202:	2300      	movs	r3, #0
 8007204:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007212:	461a      	mov	r2, r3
 8007214:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007218:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	3301      	adds	r3, #1
 800721e:	613b      	str	r3, [r7, #16]
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	429a      	cmp	r2, r3
 8007226:	d3b7      	bcc.n	8007198 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800723a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007248:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	2b00      	cmp	r3, #0
 800724e:	d105      	bne.n	800725c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	f043 0210 	orr.w	r2, r3, #16
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	699a      	ldr	r2, [r3, #24]
 8007260:	4b0e      	ldr	r3, [pc, #56]	; (800729c <USB_DevInit+0x2b4>)
 8007262:	4313      	orrs	r3, r2
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d005      	beq.n	800727a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	f043 0208 	orr.w	r2, r3, #8
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800727a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800727c:	2b01      	cmp	r3, #1
 800727e:	d105      	bne.n	800728c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699a      	ldr	r2, [r3, #24]
 8007284:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <USB_DevInit+0x2b8>)
 8007286:	4313      	orrs	r3, r2
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800728c:	7dfb      	ldrb	r3, [r7, #23]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3718      	adds	r7, #24
 8007292:	46bd      	mov	sp, r7
 8007294:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007298:	b004      	add	sp, #16
 800729a:	4770      	bx	lr
 800729c:	803c3800 	.word	0x803c3800
 80072a0:	40000004 	.word	0x40000004

080072a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3301      	adds	r3, #1
 80072b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4a13      	ldr	r2, [pc, #76]	; (8007308 <USB_FlushTxFifo+0x64>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d901      	bls.n	80072c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e01b      	b.n	80072fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	daf2      	bge.n	80072b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	019b      	lsls	r3, r3, #6
 80072d4:	f043 0220 	orr.w	r2, r3, #32
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	3301      	adds	r3, #1
 80072e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4a08      	ldr	r2, [pc, #32]	; (8007308 <USB_FlushTxFifo+0x64>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d901      	bls.n	80072ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e006      	b.n	80072fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b20      	cmp	r3, #32
 80072f8:	d0f0      	beq.n	80072dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	00030d40 	.word	0x00030d40

0800730c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3301      	adds	r3, #1
 800731c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4a11      	ldr	r2, [pc, #68]	; (8007368 <USB_FlushRxFifo+0x5c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d901      	bls.n	800732a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e018      	b.n	800735c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	daf2      	bge.n	8007318 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2210      	movs	r2, #16
 800733a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3301      	adds	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4a08      	ldr	r2, [pc, #32]	; (8007368 <USB_FlushRxFifo+0x5c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d901      	bls.n	800734e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e006      	b.n	800735c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b10      	cmp	r3, #16
 8007358:	d0f0      	beq.n	800733c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	00030d40 	.word	0x00030d40

0800736c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	68f9      	ldr	r1, [r7, #12]
 8007388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800738c:	4313      	orrs	r3, r2
 800738e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800739e:	b480      	push	{r7}
 80073a0:	b085      	sub	sp, #20
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073b8:	f023 0303 	bic.w	r3, r3, #3
 80073bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073cc:	f043 0302 	orr.w	r3, r3, #2
 80073d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	f003 0301 	and.w	r3, r3, #1
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3301      	adds	r3, #1
 800740c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	4a13      	ldr	r2, [pc, #76]	; (8007460 <USB_CoreReset+0x64>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d901      	bls.n	800741a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e01b      	b.n	8007452 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	daf2      	bge.n	8007408 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f043 0201 	orr.w	r2, r3, #1
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3301      	adds	r3, #1
 8007436:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4a09      	ldr	r2, [pc, #36]	; (8007460 <USB_CoreReset+0x64>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d901      	bls.n	8007444 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e006      	b.n	8007452 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b01      	cmp	r3, #1
 800744e:	d0f0      	beq.n	8007432 <USB_CoreReset+0x36>

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	00030d40 	.word	0x00030d40

08007464 <siprintf>:
 8007464:	b40e      	push	{r1, r2, r3}
 8007466:	b500      	push	{lr}
 8007468:	b09c      	sub	sp, #112	; 0x70
 800746a:	ab1d      	add	r3, sp, #116	; 0x74
 800746c:	9002      	str	r0, [sp, #8]
 800746e:	9006      	str	r0, [sp, #24]
 8007470:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007474:	4809      	ldr	r0, [pc, #36]	; (800749c <siprintf+0x38>)
 8007476:	9107      	str	r1, [sp, #28]
 8007478:	9104      	str	r1, [sp, #16]
 800747a:	4909      	ldr	r1, [pc, #36]	; (80074a0 <siprintf+0x3c>)
 800747c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007480:	9105      	str	r1, [sp, #20]
 8007482:	6800      	ldr	r0, [r0, #0]
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	a902      	add	r1, sp, #8
 8007488:	f000 f9a0 	bl	80077cc <_svfiprintf_r>
 800748c:	9b02      	ldr	r3, [sp, #8]
 800748e:	2200      	movs	r2, #0
 8007490:	701a      	strb	r2, [r3, #0]
 8007492:	b01c      	add	sp, #112	; 0x70
 8007494:	f85d eb04 	ldr.w	lr, [sp], #4
 8007498:	b003      	add	sp, #12
 800749a:	4770      	bx	lr
 800749c:	20000094 	.word	0x20000094
 80074a0:	ffff0208 	.word	0xffff0208

080074a4 <memset>:
 80074a4:	4402      	add	r2, r0
 80074a6:	4603      	mov	r3, r0
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d100      	bne.n	80074ae <memset+0xa>
 80074ac:	4770      	bx	lr
 80074ae:	f803 1b01 	strb.w	r1, [r3], #1
 80074b2:	e7f9      	b.n	80074a8 <memset+0x4>

080074b4 <__errno>:
 80074b4:	4b01      	ldr	r3, [pc, #4]	; (80074bc <__errno+0x8>)
 80074b6:	6818      	ldr	r0, [r3, #0]
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	20000094 	.word	0x20000094

080074c0 <__libc_init_array>:
 80074c0:	b570      	push	{r4, r5, r6, lr}
 80074c2:	4d0d      	ldr	r5, [pc, #52]	; (80074f8 <__libc_init_array+0x38>)
 80074c4:	4c0d      	ldr	r4, [pc, #52]	; (80074fc <__libc_init_array+0x3c>)
 80074c6:	1b64      	subs	r4, r4, r5
 80074c8:	10a4      	asrs	r4, r4, #2
 80074ca:	2600      	movs	r6, #0
 80074cc:	42a6      	cmp	r6, r4
 80074ce:	d109      	bne.n	80074e4 <__libc_init_array+0x24>
 80074d0:	4d0b      	ldr	r5, [pc, #44]	; (8007500 <__libc_init_array+0x40>)
 80074d2:	4c0c      	ldr	r4, [pc, #48]	; (8007504 <__libc_init_array+0x44>)
 80074d4:	f000 fc6a 	bl	8007dac <_init>
 80074d8:	1b64      	subs	r4, r4, r5
 80074da:	10a4      	asrs	r4, r4, #2
 80074dc:	2600      	movs	r6, #0
 80074de:	42a6      	cmp	r6, r4
 80074e0:	d105      	bne.n	80074ee <__libc_init_array+0x2e>
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80074e8:	4798      	blx	r3
 80074ea:	3601      	adds	r6, #1
 80074ec:	e7ee      	b.n	80074cc <__libc_init_array+0xc>
 80074ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80074f2:	4798      	blx	r3
 80074f4:	3601      	adds	r6, #1
 80074f6:	e7f2      	b.n	80074de <__libc_init_array+0x1e>
 80074f8:	08007edc 	.word	0x08007edc
 80074fc:	08007edc 	.word	0x08007edc
 8007500:	08007edc 	.word	0x08007edc
 8007504:	08007ee0 	.word	0x08007ee0

08007508 <__retarget_lock_acquire_recursive>:
 8007508:	4770      	bx	lr

0800750a <__retarget_lock_release_recursive>:
 800750a:	4770      	bx	lr

0800750c <memcpy>:
 800750c:	440a      	add	r2, r1
 800750e:	4291      	cmp	r1, r2
 8007510:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007514:	d100      	bne.n	8007518 <memcpy+0xc>
 8007516:	4770      	bx	lr
 8007518:	b510      	push	{r4, lr}
 800751a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800751e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007522:	4291      	cmp	r1, r2
 8007524:	d1f9      	bne.n	800751a <memcpy+0xe>
 8007526:	bd10      	pop	{r4, pc}

08007528 <_free_r>:
 8007528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800752a:	2900      	cmp	r1, #0
 800752c:	d044      	beq.n	80075b8 <_free_r+0x90>
 800752e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007532:	9001      	str	r0, [sp, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	f1a1 0404 	sub.w	r4, r1, #4
 800753a:	bfb8      	it	lt
 800753c:	18e4      	addlt	r4, r4, r3
 800753e:	f000 f8df 	bl	8007700 <__malloc_lock>
 8007542:	4a1e      	ldr	r2, [pc, #120]	; (80075bc <_free_r+0x94>)
 8007544:	9801      	ldr	r0, [sp, #4]
 8007546:	6813      	ldr	r3, [r2, #0]
 8007548:	b933      	cbnz	r3, 8007558 <_free_r+0x30>
 800754a:	6063      	str	r3, [r4, #4]
 800754c:	6014      	str	r4, [r2, #0]
 800754e:	b003      	add	sp, #12
 8007550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007554:	f000 b8da 	b.w	800770c <__malloc_unlock>
 8007558:	42a3      	cmp	r3, r4
 800755a:	d908      	bls.n	800756e <_free_r+0x46>
 800755c:	6825      	ldr	r5, [r4, #0]
 800755e:	1961      	adds	r1, r4, r5
 8007560:	428b      	cmp	r3, r1
 8007562:	bf01      	itttt	eq
 8007564:	6819      	ldreq	r1, [r3, #0]
 8007566:	685b      	ldreq	r3, [r3, #4]
 8007568:	1949      	addeq	r1, r1, r5
 800756a:	6021      	streq	r1, [r4, #0]
 800756c:	e7ed      	b.n	800754a <_free_r+0x22>
 800756e:	461a      	mov	r2, r3
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	b10b      	cbz	r3, 8007578 <_free_r+0x50>
 8007574:	42a3      	cmp	r3, r4
 8007576:	d9fa      	bls.n	800756e <_free_r+0x46>
 8007578:	6811      	ldr	r1, [r2, #0]
 800757a:	1855      	adds	r5, r2, r1
 800757c:	42a5      	cmp	r5, r4
 800757e:	d10b      	bne.n	8007598 <_free_r+0x70>
 8007580:	6824      	ldr	r4, [r4, #0]
 8007582:	4421      	add	r1, r4
 8007584:	1854      	adds	r4, r2, r1
 8007586:	42a3      	cmp	r3, r4
 8007588:	6011      	str	r1, [r2, #0]
 800758a:	d1e0      	bne.n	800754e <_free_r+0x26>
 800758c:	681c      	ldr	r4, [r3, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	6053      	str	r3, [r2, #4]
 8007592:	440c      	add	r4, r1
 8007594:	6014      	str	r4, [r2, #0]
 8007596:	e7da      	b.n	800754e <_free_r+0x26>
 8007598:	d902      	bls.n	80075a0 <_free_r+0x78>
 800759a:	230c      	movs	r3, #12
 800759c:	6003      	str	r3, [r0, #0]
 800759e:	e7d6      	b.n	800754e <_free_r+0x26>
 80075a0:	6825      	ldr	r5, [r4, #0]
 80075a2:	1961      	adds	r1, r4, r5
 80075a4:	428b      	cmp	r3, r1
 80075a6:	bf04      	itt	eq
 80075a8:	6819      	ldreq	r1, [r3, #0]
 80075aa:	685b      	ldreq	r3, [r3, #4]
 80075ac:	6063      	str	r3, [r4, #4]
 80075ae:	bf04      	itt	eq
 80075b0:	1949      	addeq	r1, r1, r5
 80075b2:	6021      	streq	r1, [r4, #0]
 80075b4:	6054      	str	r4, [r2, #4]
 80075b6:	e7ca      	b.n	800754e <_free_r+0x26>
 80075b8:	b003      	add	sp, #12
 80075ba:	bd30      	pop	{r4, r5, pc}
 80075bc:	20003e44 	.word	0x20003e44

080075c0 <sbrk_aligned>:
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	4e0e      	ldr	r6, [pc, #56]	; (80075fc <sbrk_aligned+0x3c>)
 80075c4:	460c      	mov	r4, r1
 80075c6:	6831      	ldr	r1, [r6, #0]
 80075c8:	4605      	mov	r5, r0
 80075ca:	b911      	cbnz	r1, 80075d2 <sbrk_aligned+0x12>
 80075cc:	f000 fba6 	bl	8007d1c <_sbrk_r>
 80075d0:	6030      	str	r0, [r6, #0]
 80075d2:	4621      	mov	r1, r4
 80075d4:	4628      	mov	r0, r5
 80075d6:	f000 fba1 	bl	8007d1c <_sbrk_r>
 80075da:	1c43      	adds	r3, r0, #1
 80075dc:	d00a      	beq.n	80075f4 <sbrk_aligned+0x34>
 80075de:	1cc4      	adds	r4, r0, #3
 80075e0:	f024 0403 	bic.w	r4, r4, #3
 80075e4:	42a0      	cmp	r0, r4
 80075e6:	d007      	beq.n	80075f8 <sbrk_aligned+0x38>
 80075e8:	1a21      	subs	r1, r4, r0
 80075ea:	4628      	mov	r0, r5
 80075ec:	f000 fb96 	bl	8007d1c <_sbrk_r>
 80075f0:	3001      	adds	r0, #1
 80075f2:	d101      	bne.n	80075f8 <sbrk_aligned+0x38>
 80075f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80075f8:	4620      	mov	r0, r4
 80075fa:	bd70      	pop	{r4, r5, r6, pc}
 80075fc:	20003e48 	.word	0x20003e48

08007600 <_malloc_r>:
 8007600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007604:	1ccd      	adds	r5, r1, #3
 8007606:	f025 0503 	bic.w	r5, r5, #3
 800760a:	3508      	adds	r5, #8
 800760c:	2d0c      	cmp	r5, #12
 800760e:	bf38      	it	cc
 8007610:	250c      	movcc	r5, #12
 8007612:	2d00      	cmp	r5, #0
 8007614:	4607      	mov	r7, r0
 8007616:	db01      	blt.n	800761c <_malloc_r+0x1c>
 8007618:	42a9      	cmp	r1, r5
 800761a:	d905      	bls.n	8007628 <_malloc_r+0x28>
 800761c:	230c      	movs	r3, #12
 800761e:	603b      	str	r3, [r7, #0]
 8007620:	2600      	movs	r6, #0
 8007622:	4630      	mov	r0, r6
 8007624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007628:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80076fc <_malloc_r+0xfc>
 800762c:	f000 f868 	bl	8007700 <__malloc_lock>
 8007630:	f8d8 3000 	ldr.w	r3, [r8]
 8007634:	461c      	mov	r4, r3
 8007636:	bb5c      	cbnz	r4, 8007690 <_malloc_r+0x90>
 8007638:	4629      	mov	r1, r5
 800763a:	4638      	mov	r0, r7
 800763c:	f7ff ffc0 	bl	80075c0 <sbrk_aligned>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	4604      	mov	r4, r0
 8007644:	d155      	bne.n	80076f2 <_malloc_r+0xf2>
 8007646:	f8d8 4000 	ldr.w	r4, [r8]
 800764a:	4626      	mov	r6, r4
 800764c:	2e00      	cmp	r6, #0
 800764e:	d145      	bne.n	80076dc <_malloc_r+0xdc>
 8007650:	2c00      	cmp	r4, #0
 8007652:	d048      	beq.n	80076e6 <_malloc_r+0xe6>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	4631      	mov	r1, r6
 8007658:	4638      	mov	r0, r7
 800765a:	eb04 0903 	add.w	r9, r4, r3
 800765e:	f000 fb5d 	bl	8007d1c <_sbrk_r>
 8007662:	4581      	cmp	r9, r0
 8007664:	d13f      	bne.n	80076e6 <_malloc_r+0xe6>
 8007666:	6821      	ldr	r1, [r4, #0]
 8007668:	1a6d      	subs	r5, r5, r1
 800766a:	4629      	mov	r1, r5
 800766c:	4638      	mov	r0, r7
 800766e:	f7ff ffa7 	bl	80075c0 <sbrk_aligned>
 8007672:	3001      	adds	r0, #1
 8007674:	d037      	beq.n	80076e6 <_malloc_r+0xe6>
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	442b      	add	r3, r5
 800767a:	6023      	str	r3, [r4, #0]
 800767c:	f8d8 3000 	ldr.w	r3, [r8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d038      	beq.n	80076f6 <_malloc_r+0xf6>
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	42a2      	cmp	r2, r4
 8007688:	d12b      	bne.n	80076e2 <_malloc_r+0xe2>
 800768a:	2200      	movs	r2, #0
 800768c:	605a      	str	r2, [r3, #4]
 800768e:	e00f      	b.n	80076b0 <_malloc_r+0xb0>
 8007690:	6822      	ldr	r2, [r4, #0]
 8007692:	1b52      	subs	r2, r2, r5
 8007694:	d41f      	bmi.n	80076d6 <_malloc_r+0xd6>
 8007696:	2a0b      	cmp	r2, #11
 8007698:	d917      	bls.n	80076ca <_malloc_r+0xca>
 800769a:	1961      	adds	r1, r4, r5
 800769c:	42a3      	cmp	r3, r4
 800769e:	6025      	str	r5, [r4, #0]
 80076a0:	bf18      	it	ne
 80076a2:	6059      	strne	r1, [r3, #4]
 80076a4:	6863      	ldr	r3, [r4, #4]
 80076a6:	bf08      	it	eq
 80076a8:	f8c8 1000 	streq.w	r1, [r8]
 80076ac:	5162      	str	r2, [r4, r5]
 80076ae:	604b      	str	r3, [r1, #4]
 80076b0:	4638      	mov	r0, r7
 80076b2:	f104 060b 	add.w	r6, r4, #11
 80076b6:	f000 f829 	bl	800770c <__malloc_unlock>
 80076ba:	f026 0607 	bic.w	r6, r6, #7
 80076be:	1d23      	adds	r3, r4, #4
 80076c0:	1af2      	subs	r2, r6, r3
 80076c2:	d0ae      	beq.n	8007622 <_malloc_r+0x22>
 80076c4:	1b9b      	subs	r3, r3, r6
 80076c6:	50a3      	str	r3, [r4, r2]
 80076c8:	e7ab      	b.n	8007622 <_malloc_r+0x22>
 80076ca:	42a3      	cmp	r3, r4
 80076cc:	6862      	ldr	r2, [r4, #4]
 80076ce:	d1dd      	bne.n	800768c <_malloc_r+0x8c>
 80076d0:	f8c8 2000 	str.w	r2, [r8]
 80076d4:	e7ec      	b.n	80076b0 <_malloc_r+0xb0>
 80076d6:	4623      	mov	r3, r4
 80076d8:	6864      	ldr	r4, [r4, #4]
 80076da:	e7ac      	b.n	8007636 <_malloc_r+0x36>
 80076dc:	4634      	mov	r4, r6
 80076de:	6876      	ldr	r6, [r6, #4]
 80076e0:	e7b4      	b.n	800764c <_malloc_r+0x4c>
 80076e2:	4613      	mov	r3, r2
 80076e4:	e7cc      	b.n	8007680 <_malloc_r+0x80>
 80076e6:	230c      	movs	r3, #12
 80076e8:	603b      	str	r3, [r7, #0]
 80076ea:	4638      	mov	r0, r7
 80076ec:	f000 f80e 	bl	800770c <__malloc_unlock>
 80076f0:	e797      	b.n	8007622 <_malloc_r+0x22>
 80076f2:	6025      	str	r5, [r4, #0]
 80076f4:	e7dc      	b.n	80076b0 <_malloc_r+0xb0>
 80076f6:	605b      	str	r3, [r3, #4]
 80076f8:	deff      	udf	#255	; 0xff
 80076fa:	bf00      	nop
 80076fc:	20003e44 	.word	0x20003e44

08007700 <__malloc_lock>:
 8007700:	4801      	ldr	r0, [pc, #4]	; (8007708 <__malloc_lock+0x8>)
 8007702:	f7ff bf01 	b.w	8007508 <__retarget_lock_acquire_recursive>
 8007706:	bf00      	nop
 8007708:	20003e40 	.word	0x20003e40

0800770c <__malloc_unlock>:
 800770c:	4801      	ldr	r0, [pc, #4]	; (8007714 <__malloc_unlock+0x8>)
 800770e:	f7ff befc 	b.w	800750a <__retarget_lock_release_recursive>
 8007712:	bf00      	nop
 8007714:	20003e40 	.word	0x20003e40

08007718 <__ssputs_r>:
 8007718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800771c:	688e      	ldr	r6, [r1, #8]
 800771e:	461f      	mov	r7, r3
 8007720:	42be      	cmp	r6, r7
 8007722:	680b      	ldr	r3, [r1, #0]
 8007724:	4682      	mov	sl, r0
 8007726:	460c      	mov	r4, r1
 8007728:	4690      	mov	r8, r2
 800772a:	d82c      	bhi.n	8007786 <__ssputs_r+0x6e>
 800772c:	898a      	ldrh	r2, [r1, #12]
 800772e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007732:	d026      	beq.n	8007782 <__ssputs_r+0x6a>
 8007734:	6965      	ldr	r5, [r4, #20]
 8007736:	6909      	ldr	r1, [r1, #16]
 8007738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800773c:	eba3 0901 	sub.w	r9, r3, r1
 8007740:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007744:	1c7b      	adds	r3, r7, #1
 8007746:	444b      	add	r3, r9
 8007748:	106d      	asrs	r5, r5, #1
 800774a:	429d      	cmp	r5, r3
 800774c:	bf38      	it	cc
 800774e:	461d      	movcc	r5, r3
 8007750:	0553      	lsls	r3, r2, #21
 8007752:	d527      	bpl.n	80077a4 <__ssputs_r+0x8c>
 8007754:	4629      	mov	r1, r5
 8007756:	f7ff ff53 	bl	8007600 <_malloc_r>
 800775a:	4606      	mov	r6, r0
 800775c:	b360      	cbz	r0, 80077b8 <__ssputs_r+0xa0>
 800775e:	6921      	ldr	r1, [r4, #16]
 8007760:	464a      	mov	r2, r9
 8007762:	f7ff fed3 	bl	800750c <memcpy>
 8007766:	89a3      	ldrh	r3, [r4, #12]
 8007768:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800776c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007770:	81a3      	strh	r3, [r4, #12]
 8007772:	6126      	str	r6, [r4, #16]
 8007774:	6165      	str	r5, [r4, #20]
 8007776:	444e      	add	r6, r9
 8007778:	eba5 0509 	sub.w	r5, r5, r9
 800777c:	6026      	str	r6, [r4, #0]
 800777e:	60a5      	str	r5, [r4, #8]
 8007780:	463e      	mov	r6, r7
 8007782:	42be      	cmp	r6, r7
 8007784:	d900      	bls.n	8007788 <__ssputs_r+0x70>
 8007786:	463e      	mov	r6, r7
 8007788:	6820      	ldr	r0, [r4, #0]
 800778a:	4632      	mov	r2, r6
 800778c:	4641      	mov	r1, r8
 800778e:	f000 faab 	bl	8007ce8 <memmove>
 8007792:	68a3      	ldr	r3, [r4, #8]
 8007794:	1b9b      	subs	r3, r3, r6
 8007796:	60a3      	str	r3, [r4, #8]
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	4433      	add	r3, r6
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	2000      	movs	r0, #0
 80077a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a4:	462a      	mov	r2, r5
 80077a6:	f000 fac9 	bl	8007d3c <_realloc_r>
 80077aa:	4606      	mov	r6, r0
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d1e0      	bne.n	8007772 <__ssputs_r+0x5a>
 80077b0:	6921      	ldr	r1, [r4, #16]
 80077b2:	4650      	mov	r0, sl
 80077b4:	f7ff feb8 	bl	8007528 <_free_r>
 80077b8:	230c      	movs	r3, #12
 80077ba:	f8ca 3000 	str.w	r3, [sl]
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077c4:	81a3      	strh	r3, [r4, #12]
 80077c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077ca:	e7e9      	b.n	80077a0 <__ssputs_r+0x88>

080077cc <_svfiprintf_r>:
 80077cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d0:	4698      	mov	r8, r3
 80077d2:	898b      	ldrh	r3, [r1, #12]
 80077d4:	061b      	lsls	r3, r3, #24
 80077d6:	b09d      	sub	sp, #116	; 0x74
 80077d8:	4607      	mov	r7, r0
 80077da:	460d      	mov	r5, r1
 80077dc:	4614      	mov	r4, r2
 80077de:	d50e      	bpl.n	80077fe <_svfiprintf_r+0x32>
 80077e0:	690b      	ldr	r3, [r1, #16]
 80077e2:	b963      	cbnz	r3, 80077fe <_svfiprintf_r+0x32>
 80077e4:	2140      	movs	r1, #64	; 0x40
 80077e6:	f7ff ff0b 	bl	8007600 <_malloc_r>
 80077ea:	6028      	str	r0, [r5, #0]
 80077ec:	6128      	str	r0, [r5, #16]
 80077ee:	b920      	cbnz	r0, 80077fa <_svfiprintf_r+0x2e>
 80077f0:	230c      	movs	r3, #12
 80077f2:	603b      	str	r3, [r7, #0]
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077f8:	e0d0      	b.n	800799c <_svfiprintf_r+0x1d0>
 80077fa:	2340      	movs	r3, #64	; 0x40
 80077fc:	616b      	str	r3, [r5, #20]
 80077fe:	2300      	movs	r3, #0
 8007800:	9309      	str	r3, [sp, #36]	; 0x24
 8007802:	2320      	movs	r3, #32
 8007804:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007808:	f8cd 800c 	str.w	r8, [sp, #12]
 800780c:	2330      	movs	r3, #48	; 0x30
 800780e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80079b4 <_svfiprintf_r+0x1e8>
 8007812:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007816:	f04f 0901 	mov.w	r9, #1
 800781a:	4623      	mov	r3, r4
 800781c:	469a      	mov	sl, r3
 800781e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007822:	b10a      	cbz	r2, 8007828 <_svfiprintf_r+0x5c>
 8007824:	2a25      	cmp	r2, #37	; 0x25
 8007826:	d1f9      	bne.n	800781c <_svfiprintf_r+0x50>
 8007828:	ebba 0b04 	subs.w	fp, sl, r4
 800782c:	d00b      	beq.n	8007846 <_svfiprintf_r+0x7a>
 800782e:	465b      	mov	r3, fp
 8007830:	4622      	mov	r2, r4
 8007832:	4629      	mov	r1, r5
 8007834:	4638      	mov	r0, r7
 8007836:	f7ff ff6f 	bl	8007718 <__ssputs_r>
 800783a:	3001      	adds	r0, #1
 800783c:	f000 80a9 	beq.w	8007992 <_svfiprintf_r+0x1c6>
 8007840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007842:	445a      	add	r2, fp
 8007844:	9209      	str	r2, [sp, #36]	; 0x24
 8007846:	f89a 3000 	ldrb.w	r3, [sl]
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 80a1 	beq.w	8007992 <_svfiprintf_r+0x1c6>
 8007850:	2300      	movs	r3, #0
 8007852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800785a:	f10a 0a01 	add.w	sl, sl, #1
 800785e:	9304      	str	r3, [sp, #16]
 8007860:	9307      	str	r3, [sp, #28]
 8007862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007866:	931a      	str	r3, [sp, #104]	; 0x68
 8007868:	4654      	mov	r4, sl
 800786a:	2205      	movs	r2, #5
 800786c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007870:	4850      	ldr	r0, [pc, #320]	; (80079b4 <_svfiprintf_r+0x1e8>)
 8007872:	f7f8 fccd 	bl	8000210 <memchr>
 8007876:	9a04      	ldr	r2, [sp, #16]
 8007878:	b9d8      	cbnz	r0, 80078b2 <_svfiprintf_r+0xe6>
 800787a:	06d0      	lsls	r0, r2, #27
 800787c:	bf44      	itt	mi
 800787e:	2320      	movmi	r3, #32
 8007880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007884:	0711      	lsls	r1, r2, #28
 8007886:	bf44      	itt	mi
 8007888:	232b      	movmi	r3, #43	; 0x2b
 800788a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800788e:	f89a 3000 	ldrb.w	r3, [sl]
 8007892:	2b2a      	cmp	r3, #42	; 0x2a
 8007894:	d015      	beq.n	80078c2 <_svfiprintf_r+0xf6>
 8007896:	9a07      	ldr	r2, [sp, #28]
 8007898:	4654      	mov	r4, sl
 800789a:	2000      	movs	r0, #0
 800789c:	f04f 0c0a 	mov.w	ip, #10
 80078a0:	4621      	mov	r1, r4
 80078a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078a6:	3b30      	subs	r3, #48	; 0x30
 80078a8:	2b09      	cmp	r3, #9
 80078aa:	d94d      	bls.n	8007948 <_svfiprintf_r+0x17c>
 80078ac:	b1b0      	cbz	r0, 80078dc <_svfiprintf_r+0x110>
 80078ae:	9207      	str	r2, [sp, #28]
 80078b0:	e014      	b.n	80078dc <_svfiprintf_r+0x110>
 80078b2:	eba0 0308 	sub.w	r3, r0, r8
 80078b6:	fa09 f303 	lsl.w	r3, r9, r3
 80078ba:	4313      	orrs	r3, r2
 80078bc:	9304      	str	r3, [sp, #16]
 80078be:	46a2      	mov	sl, r4
 80078c0:	e7d2      	b.n	8007868 <_svfiprintf_r+0x9c>
 80078c2:	9b03      	ldr	r3, [sp, #12]
 80078c4:	1d19      	adds	r1, r3, #4
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	9103      	str	r1, [sp, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	bfbb      	ittet	lt
 80078ce:	425b      	neglt	r3, r3
 80078d0:	f042 0202 	orrlt.w	r2, r2, #2
 80078d4:	9307      	strge	r3, [sp, #28]
 80078d6:	9307      	strlt	r3, [sp, #28]
 80078d8:	bfb8      	it	lt
 80078da:	9204      	strlt	r2, [sp, #16]
 80078dc:	7823      	ldrb	r3, [r4, #0]
 80078de:	2b2e      	cmp	r3, #46	; 0x2e
 80078e0:	d10c      	bne.n	80078fc <_svfiprintf_r+0x130>
 80078e2:	7863      	ldrb	r3, [r4, #1]
 80078e4:	2b2a      	cmp	r3, #42	; 0x2a
 80078e6:	d134      	bne.n	8007952 <_svfiprintf_r+0x186>
 80078e8:	9b03      	ldr	r3, [sp, #12]
 80078ea:	1d1a      	adds	r2, r3, #4
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	9203      	str	r2, [sp, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	bfb8      	it	lt
 80078f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078f8:	3402      	adds	r4, #2
 80078fa:	9305      	str	r3, [sp, #20]
 80078fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80079c4 <_svfiprintf_r+0x1f8>
 8007900:	7821      	ldrb	r1, [r4, #0]
 8007902:	2203      	movs	r2, #3
 8007904:	4650      	mov	r0, sl
 8007906:	f7f8 fc83 	bl	8000210 <memchr>
 800790a:	b138      	cbz	r0, 800791c <_svfiprintf_r+0x150>
 800790c:	9b04      	ldr	r3, [sp, #16]
 800790e:	eba0 000a 	sub.w	r0, r0, sl
 8007912:	2240      	movs	r2, #64	; 0x40
 8007914:	4082      	lsls	r2, r0
 8007916:	4313      	orrs	r3, r2
 8007918:	3401      	adds	r4, #1
 800791a:	9304      	str	r3, [sp, #16]
 800791c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007920:	4825      	ldr	r0, [pc, #148]	; (80079b8 <_svfiprintf_r+0x1ec>)
 8007922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007926:	2206      	movs	r2, #6
 8007928:	f7f8 fc72 	bl	8000210 <memchr>
 800792c:	2800      	cmp	r0, #0
 800792e:	d038      	beq.n	80079a2 <_svfiprintf_r+0x1d6>
 8007930:	4b22      	ldr	r3, [pc, #136]	; (80079bc <_svfiprintf_r+0x1f0>)
 8007932:	bb1b      	cbnz	r3, 800797c <_svfiprintf_r+0x1b0>
 8007934:	9b03      	ldr	r3, [sp, #12]
 8007936:	3307      	adds	r3, #7
 8007938:	f023 0307 	bic.w	r3, r3, #7
 800793c:	3308      	adds	r3, #8
 800793e:	9303      	str	r3, [sp, #12]
 8007940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007942:	4433      	add	r3, r6
 8007944:	9309      	str	r3, [sp, #36]	; 0x24
 8007946:	e768      	b.n	800781a <_svfiprintf_r+0x4e>
 8007948:	fb0c 3202 	mla	r2, ip, r2, r3
 800794c:	460c      	mov	r4, r1
 800794e:	2001      	movs	r0, #1
 8007950:	e7a6      	b.n	80078a0 <_svfiprintf_r+0xd4>
 8007952:	2300      	movs	r3, #0
 8007954:	3401      	adds	r4, #1
 8007956:	9305      	str	r3, [sp, #20]
 8007958:	4619      	mov	r1, r3
 800795a:	f04f 0c0a 	mov.w	ip, #10
 800795e:	4620      	mov	r0, r4
 8007960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007964:	3a30      	subs	r2, #48	; 0x30
 8007966:	2a09      	cmp	r2, #9
 8007968:	d903      	bls.n	8007972 <_svfiprintf_r+0x1a6>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d0c6      	beq.n	80078fc <_svfiprintf_r+0x130>
 800796e:	9105      	str	r1, [sp, #20]
 8007970:	e7c4      	b.n	80078fc <_svfiprintf_r+0x130>
 8007972:	fb0c 2101 	mla	r1, ip, r1, r2
 8007976:	4604      	mov	r4, r0
 8007978:	2301      	movs	r3, #1
 800797a:	e7f0      	b.n	800795e <_svfiprintf_r+0x192>
 800797c:	ab03      	add	r3, sp, #12
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	462a      	mov	r2, r5
 8007982:	4b0f      	ldr	r3, [pc, #60]	; (80079c0 <_svfiprintf_r+0x1f4>)
 8007984:	a904      	add	r1, sp, #16
 8007986:	4638      	mov	r0, r7
 8007988:	f3af 8000 	nop.w
 800798c:	1c42      	adds	r2, r0, #1
 800798e:	4606      	mov	r6, r0
 8007990:	d1d6      	bne.n	8007940 <_svfiprintf_r+0x174>
 8007992:	89ab      	ldrh	r3, [r5, #12]
 8007994:	065b      	lsls	r3, r3, #25
 8007996:	f53f af2d 	bmi.w	80077f4 <_svfiprintf_r+0x28>
 800799a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800799c:	b01d      	add	sp, #116	; 0x74
 800799e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a2:	ab03      	add	r3, sp, #12
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	462a      	mov	r2, r5
 80079a8:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <_svfiprintf_r+0x1f4>)
 80079aa:	a904      	add	r1, sp, #16
 80079ac:	4638      	mov	r0, r7
 80079ae:	f000 f879 	bl	8007aa4 <_printf_i>
 80079b2:	e7eb      	b.n	800798c <_svfiprintf_r+0x1c0>
 80079b4:	08007ea0 	.word	0x08007ea0
 80079b8:	08007eaa 	.word	0x08007eaa
 80079bc:	00000000 	.word	0x00000000
 80079c0:	08007719 	.word	0x08007719
 80079c4:	08007ea6 	.word	0x08007ea6

080079c8 <_printf_common>:
 80079c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079cc:	4616      	mov	r6, r2
 80079ce:	4699      	mov	r9, r3
 80079d0:	688a      	ldr	r2, [r1, #8]
 80079d2:	690b      	ldr	r3, [r1, #16]
 80079d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079d8:	4293      	cmp	r3, r2
 80079da:	bfb8      	it	lt
 80079dc:	4613      	movlt	r3, r2
 80079de:	6033      	str	r3, [r6, #0]
 80079e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079e4:	4607      	mov	r7, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	b10a      	cbz	r2, 80079ee <_printf_common+0x26>
 80079ea:	3301      	adds	r3, #1
 80079ec:	6033      	str	r3, [r6, #0]
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	0699      	lsls	r1, r3, #26
 80079f2:	bf42      	ittt	mi
 80079f4:	6833      	ldrmi	r3, [r6, #0]
 80079f6:	3302      	addmi	r3, #2
 80079f8:	6033      	strmi	r3, [r6, #0]
 80079fa:	6825      	ldr	r5, [r4, #0]
 80079fc:	f015 0506 	ands.w	r5, r5, #6
 8007a00:	d106      	bne.n	8007a10 <_printf_common+0x48>
 8007a02:	f104 0a19 	add.w	sl, r4, #25
 8007a06:	68e3      	ldr	r3, [r4, #12]
 8007a08:	6832      	ldr	r2, [r6, #0]
 8007a0a:	1a9b      	subs	r3, r3, r2
 8007a0c:	42ab      	cmp	r3, r5
 8007a0e:	dc26      	bgt.n	8007a5e <_printf_common+0x96>
 8007a10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a14:	1e13      	subs	r3, r2, #0
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	bf18      	it	ne
 8007a1a:	2301      	movne	r3, #1
 8007a1c:	0692      	lsls	r2, r2, #26
 8007a1e:	d42b      	bmi.n	8007a78 <_printf_common+0xb0>
 8007a20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a24:	4649      	mov	r1, r9
 8007a26:	4638      	mov	r0, r7
 8007a28:	47c0      	blx	r8
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	d01e      	beq.n	8007a6c <_printf_common+0xa4>
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	6922      	ldr	r2, [r4, #16]
 8007a32:	f003 0306 	and.w	r3, r3, #6
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	bf02      	ittt	eq
 8007a3a:	68e5      	ldreq	r5, [r4, #12]
 8007a3c:	6833      	ldreq	r3, [r6, #0]
 8007a3e:	1aed      	subeq	r5, r5, r3
 8007a40:	68a3      	ldr	r3, [r4, #8]
 8007a42:	bf0c      	ite	eq
 8007a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a48:	2500      	movne	r5, #0
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	bfc4      	itt	gt
 8007a4e:	1a9b      	subgt	r3, r3, r2
 8007a50:	18ed      	addgt	r5, r5, r3
 8007a52:	2600      	movs	r6, #0
 8007a54:	341a      	adds	r4, #26
 8007a56:	42b5      	cmp	r5, r6
 8007a58:	d11a      	bne.n	8007a90 <_printf_common+0xc8>
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	e008      	b.n	8007a70 <_printf_common+0xa8>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	4652      	mov	r2, sl
 8007a62:	4649      	mov	r1, r9
 8007a64:	4638      	mov	r0, r7
 8007a66:	47c0      	blx	r8
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d103      	bne.n	8007a74 <_printf_common+0xac>
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a74:	3501      	adds	r5, #1
 8007a76:	e7c6      	b.n	8007a06 <_printf_common+0x3e>
 8007a78:	18e1      	adds	r1, r4, r3
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	2030      	movs	r0, #48	; 0x30
 8007a7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a82:	4422      	add	r2, r4
 8007a84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a8c:	3302      	adds	r3, #2
 8007a8e:	e7c7      	b.n	8007a20 <_printf_common+0x58>
 8007a90:	2301      	movs	r3, #1
 8007a92:	4622      	mov	r2, r4
 8007a94:	4649      	mov	r1, r9
 8007a96:	4638      	mov	r0, r7
 8007a98:	47c0      	blx	r8
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	d0e6      	beq.n	8007a6c <_printf_common+0xa4>
 8007a9e:	3601      	adds	r6, #1
 8007aa0:	e7d9      	b.n	8007a56 <_printf_common+0x8e>
	...

08007aa4 <_printf_i>:
 8007aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa8:	7e0f      	ldrb	r7, [r1, #24]
 8007aaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007aac:	2f78      	cmp	r7, #120	; 0x78
 8007aae:	4691      	mov	r9, r2
 8007ab0:	4680      	mov	r8, r0
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	469a      	mov	sl, r3
 8007ab6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007aba:	d807      	bhi.n	8007acc <_printf_i+0x28>
 8007abc:	2f62      	cmp	r7, #98	; 0x62
 8007abe:	d80a      	bhi.n	8007ad6 <_printf_i+0x32>
 8007ac0:	2f00      	cmp	r7, #0
 8007ac2:	f000 80d4 	beq.w	8007c6e <_printf_i+0x1ca>
 8007ac6:	2f58      	cmp	r7, #88	; 0x58
 8007ac8:	f000 80c0 	beq.w	8007c4c <_printf_i+0x1a8>
 8007acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ad0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ad4:	e03a      	b.n	8007b4c <_printf_i+0xa8>
 8007ad6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ada:	2b15      	cmp	r3, #21
 8007adc:	d8f6      	bhi.n	8007acc <_printf_i+0x28>
 8007ade:	a101      	add	r1, pc, #4	; (adr r1, 8007ae4 <_printf_i+0x40>)
 8007ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ae4:	08007b3d 	.word	0x08007b3d
 8007ae8:	08007b51 	.word	0x08007b51
 8007aec:	08007acd 	.word	0x08007acd
 8007af0:	08007acd 	.word	0x08007acd
 8007af4:	08007acd 	.word	0x08007acd
 8007af8:	08007acd 	.word	0x08007acd
 8007afc:	08007b51 	.word	0x08007b51
 8007b00:	08007acd 	.word	0x08007acd
 8007b04:	08007acd 	.word	0x08007acd
 8007b08:	08007acd 	.word	0x08007acd
 8007b0c:	08007acd 	.word	0x08007acd
 8007b10:	08007c55 	.word	0x08007c55
 8007b14:	08007b7d 	.word	0x08007b7d
 8007b18:	08007c0f 	.word	0x08007c0f
 8007b1c:	08007acd 	.word	0x08007acd
 8007b20:	08007acd 	.word	0x08007acd
 8007b24:	08007c77 	.word	0x08007c77
 8007b28:	08007acd 	.word	0x08007acd
 8007b2c:	08007b7d 	.word	0x08007b7d
 8007b30:	08007acd 	.word	0x08007acd
 8007b34:	08007acd 	.word	0x08007acd
 8007b38:	08007c17 	.word	0x08007c17
 8007b3c:	682b      	ldr	r3, [r5, #0]
 8007b3e:	1d1a      	adds	r2, r3, #4
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	602a      	str	r2, [r5, #0]
 8007b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e09f      	b.n	8007c90 <_printf_i+0x1ec>
 8007b50:	6820      	ldr	r0, [r4, #0]
 8007b52:	682b      	ldr	r3, [r5, #0]
 8007b54:	0607      	lsls	r7, r0, #24
 8007b56:	f103 0104 	add.w	r1, r3, #4
 8007b5a:	6029      	str	r1, [r5, #0]
 8007b5c:	d501      	bpl.n	8007b62 <_printf_i+0xbe>
 8007b5e:	681e      	ldr	r6, [r3, #0]
 8007b60:	e003      	b.n	8007b6a <_printf_i+0xc6>
 8007b62:	0646      	lsls	r6, r0, #25
 8007b64:	d5fb      	bpl.n	8007b5e <_printf_i+0xba>
 8007b66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b6a:	2e00      	cmp	r6, #0
 8007b6c:	da03      	bge.n	8007b76 <_printf_i+0xd2>
 8007b6e:	232d      	movs	r3, #45	; 0x2d
 8007b70:	4276      	negs	r6, r6
 8007b72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b76:	485a      	ldr	r0, [pc, #360]	; (8007ce0 <_printf_i+0x23c>)
 8007b78:	230a      	movs	r3, #10
 8007b7a:	e012      	b.n	8007ba2 <_printf_i+0xfe>
 8007b7c:	682b      	ldr	r3, [r5, #0]
 8007b7e:	6820      	ldr	r0, [r4, #0]
 8007b80:	1d19      	adds	r1, r3, #4
 8007b82:	6029      	str	r1, [r5, #0]
 8007b84:	0605      	lsls	r5, r0, #24
 8007b86:	d501      	bpl.n	8007b8c <_printf_i+0xe8>
 8007b88:	681e      	ldr	r6, [r3, #0]
 8007b8a:	e002      	b.n	8007b92 <_printf_i+0xee>
 8007b8c:	0641      	lsls	r1, r0, #25
 8007b8e:	d5fb      	bpl.n	8007b88 <_printf_i+0xe4>
 8007b90:	881e      	ldrh	r6, [r3, #0]
 8007b92:	4853      	ldr	r0, [pc, #332]	; (8007ce0 <_printf_i+0x23c>)
 8007b94:	2f6f      	cmp	r7, #111	; 0x6f
 8007b96:	bf0c      	ite	eq
 8007b98:	2308      	moveq	r3, #8
 8007b9a:	230a      	movne	r3, #10
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ba2:	6865      	ldr	r5, [r4, #4]
 8007ba4:	60a5      	str	r5, [r4, #8]
 8007ba6:	2d00      	cmp	r5, #0
 8007ba8:	bfa2      	ittt	ge
 8007baa:	6821      	ldrge	r1, [r4, #0]
 8007bac:	f021 0104 	bicge.w	r1, r1, #4
 8007bb0:	6021      	strge	r1, [r4, #0]
 8007bb2:	b90e      	cbnz	r6, 8007bb8 <_printf_i+0x114>
 8007bb4:	2d00      	cmp	r5, #0
 8007bb6:	d04b      	beq.n	8007c50 <_printf_i+0x1ac>
 8007bb8:	4615      	mov	r5, r2
 8007bba:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bbe:	fb03 6711 	mls	r7, r3, r1, r6
 8007bc2:	5dc7      	ldrb	r7, [r0, r7]
 8007bc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007bc8:	4637      	mov	r7, r6
 8007bca:	42bb      	cmp	r3, r7
 8007bcc:	460e      	mov	r6, r1
 8007bce:	d9f4      	bls.n	8007bba <_printf_i+0x116>
 8007bd0:	2b08      	cmp	r3, #8
 8007bd2:	d10b      	bne.n	8007bec <_printf_i+0x148>
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	07de      	lsls	r6, r3, #31
 8007bd8:	d508      	bpl.n	8007bec <_printf_i+0x148>
 8007bda:	6923      	ldr	r3, [r4, #16]
 8007bdc:	6861      	ldr	r1, [r4, #4]
 8007bde:	4299      	cmp	r1, r3
 8007be0:	bfde      	ittt	le
 8007be2:	2330      	movle	r3, #48	; 0x30
 8007be4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007be8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007bec:	1b52      	subs	r2, r2, r5
 8007bee:	6122      	str	r2, [r4, #16]
 8007bf0:	f8cd a000 	str.w	sl, [sp]
 8007bf4:	464b      	mov	r3, r9
 8007bf6:	aa03      	add	r2, sp, #12
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	4640      	mov	r0, r8
 8007bfc:	f7ff fee4 	bl	80079c8 <_printf_common>
 8007c00:	3001      	adds	r0, #1
 8007c02:	d14a      	bne.n	8007c9a <_printf_i+0x1f6>
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c08:	b004      	add	sp, #16
 8007c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	f043 0320 	orr.w	r3, r3, #32
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	4833      	ldr	r0, [pc, #204]	; (8007ce4 <_printf_i+0x240>)
 8007c18:	2778      	movs	r7, #120	; 0x78
 8007c1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	6829      	ldr	r1, [r5, #0]
 8007c22:	061f      	lsls	r7, r3, #24
 8007c24:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c28:	d402      	bmi.n	8007c30 <_printf_i+0x18c>
 8007c2a:	065f      	lsls	r7, r3, #25
 8007c2c:	bf48      	it	mi
 8007c2e:	b2b6      	uxthmi	r6, r6
 8007c30:	07df      	lsls	r7, r3, #31
 8007c32:	bf48      	it	mi
 8007c34:	f043 0320 	orrmi.w	r3, r3, #32
 8007c38:	6029      	str	r1, [r5, #0]
 8007c3a:	bf48      	it	mi
 8007c3c:	6023      	strmi	r3, [r4, #0]
 8007c3e:	b91e      	cbnz	r6, 8007c48 <_printf_i+0x1a4>
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	f023 0320 	bic.w	r3, r3, #32
 8007c46:	6023      	str	r3, [r4, #0]
 8007c48:	2310      	movs	r3, #16
 8007c4a:	e7a7      	b.n	8007b9c <_printf_i+0xf8>
 8007c4c:	4824      	ldr	r0, [pc, #144]	; (8007ce0 <_printf_i+0x23c>)
 8007c4e:	e7e4      	b.n	8007c1a <_printf_i+0x176>
 8007c50:	4615      	mov	r5, r2
 8007c52:	e7bd      	b.n	8007bd0 <_printf_i+0x12c>
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	6826      	ldr	r6, [r4, #0]
 8007c58:	6961      	ldr	r1, [r4, #20]
 8007c5a:	1d18      	adds	r0, r3, #4
 8007c5c:	6028      	str	r0, [r5, #0]
 8007c5e:	0635      	lsls	r5, r6, #24
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	d501      	bpl.n	8007c68 <_printf_i+0x1c4>
 8007c64:	6019      	str	r1, [r3, #0]
 8007c66:	e002      	b.n	8007c6e <_printf_i+0x1ca>
 8007c68:	0670      	lsls	r0, r6, #25
 8007c6a:	d5fb      	bpl.n	8007c64 <_printf_i+0x1c0>
 8007c6c:	8019      	strh	r1, [r3, #0]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	6123      	str	r3, [r4, #16]
 8007c72:	4615      	mov	r5, r2
 8007c74:	e7bc      	b.n	8007bf0 <_printf_i+0x14c>
 8007c76:	682b      	ldr	r3, [r5, #0]
 8007c78:	1d1a      	adds	r2, r3, #4
 8007c7a:	602a      	str	r2, [r5, #0]
 8007c7c:	681d      	ldr	r5, [r3, #0]
 8007c7e:	6862      	ldr	r2, [r4, #4]
 8007c80:	2100      	movs	r1, #0
 8007c82:	4628      	mov	r0, r5
 8007c84:	f7f8 fac4 	bl	8000210 <memchr>
 8007c88:	b108      	cbz	r0, 8007c8e <_printf_i+0x1ea>
 8007c8a:	1b40      	subs	r0, r0, r5
 8007c8c:	6060      	str	r0, [r4, #4]
 8007c8e:	6863      	ldr	r3, [r4, #4]
 8007c90:	6123      	str	r3, [r4, #16]
 8007c92:	2300      	movs	r3, #0
 8007c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c98:	e7aa      	b.n	8007bf0 <_printf_i+0x14c>
 8007c9a:	6923      	ldr	r3, [r4, #16]
 8007c9c:	462a      	mov	r2, r5
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	47d0      	blx	sl
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	d0ad      	beq.n	8007c04 <_printf_i+0x160>
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	079b      	lsls	r3, r3, #30
 8007cac:	d413      	bmi.n	8007cd6 <_printf_i+0x232>
 8007cae:	68e0      	ldr	r0, [r4, #12]
 8007cb0:	9b03      	ldr	r3, [sp, #12]
 8007cb2:	4298      	cmp	r0, r3
 8007cb4:	bfb8      	it	lt
 8007cb6:	4618      	movlt	r0, r3
 8007cb8:	e7a6      	b.n	8007c08 <_printf_i+0x164>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	4632      	mov	r2, r6
 8007cbe:	4649      	mov	r1, r9
 8007cc0:	4640      	mov	r0, r8
 8007cc2:	47d0      	blx	sl
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	d09d      	beq.n	8007c04 <_printf_i+0x160>
 8007cc8:	3501      	adds	r5, #1
 8007cca:	68e3      	ldr	r3, [r4, #12]
 8007ccc:	9903      	ldr	r1, [sp, #12]
 8007cce:	1a5b      	subs	r3, r3, r1
 8007cd0:	42ab      	cmp	r3, r5
 8007cd2:	dcf2      	bgt.n	8007cba <_printf_i+0x216>
 8007cd4:	e7eb      	b.n	8007cae <_printf_i+0x20a>
 8007cd6:	2500      	movs	r5, #0
 8007cd8:	f104 0619 	add.w	r6, r4, #25
 8007cdc:	e7f5      	b.n	8007cca <_printf_i+0x226>
 8007cde:	bf00      	nop
 8007ce0:	08007eb1 	.word	0x08007eb1
 8007ce4:	08007ec2 	.word	0x08007ec2

08007ce8 <memmove>:
 8007ce8:	4288      	cmp	r0, r1
 8007cea:	b510      	push	{r4, lr}
 8007cec:	eb01 0402 	add.w	r4, r1, r2
 8007cf0:	d902      	bls.n	8007cf8 <memmove+0x10>
 8007cf2:	4284      	cmp	r4, r0
 8007cf4:	4623      	mov	r3, r4
 8007cf6:	d807      	bhi.n	8007d08 <memmove+0x20>
 8007cf8:	1e43      	subs	r3, r0, #1
 8007cfa:	42a1      	cmp	r1, r4
 8007cfc:	d008      	beq.n	8007d10 <memmove+0x28>
 8007cfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d06:	e7f8      	b.n	8007cfa <memmove+0x12>
 8007d08:	4402      	add	r2, r0
 8007d0a:	4601      	mov	r1, r0
 8007d0c:	428a      	cmp	r2, r1
 8007d0e:	d100      	bne.n	8007d12 <memmove+0x2a>
 8007d10:	bd10      	pop	{r4, pc}
 8007d12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d1a:	e7f7      	b.n	8007d0c <memmove+0x24>

08007d1c <_sbrk_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4d06      	ldr	r5, [pc, #24]	; (8007d38 <_sbrk_r+0x1c>)
 8007d20:	2300      	movs	r3, #0
 8007d22:	4604      	mov	r4, r0
 8007d24:	4608      	mov	r0, r1
 8007d26:	602b      	str	r3, [r5, #0]
 8007d28:	f7fc fafc 	bl	8004324 <_sbrk>
 8007d2c:	1c43      	adds	r3, r0, #1
 8007d2e:	d102      	bne.n	8007d36 <_sbrk_r+0x1a>
 8007d30:	682b      	ldr	r3, [r5, #0]
 8007d32:	b103      	cbz	r3, 8007d36 <_sbrk_r+0x1a>
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	bd38      	pop	{r3, r4, r5, pc}
 8007d38:	20003e3c 	.word	0x20003e3c

08007d3c <_realloc_r>:
 8007d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d40:	4680      	mov	r8, r0
 8007d42:	4614      	mov	r4, r2
 8007d44:	460e      	mov	r6, r1
 8007d46:	b921      	cbnz	r1, 8007d52 <_realloc_r+0x16>
 8007d48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	f7ff bc57 	b.w	8007600 <_malloc_r>
 8007d52:	b92a      	cbnz	r2, 8007d60 <_realloc_r+0x24>
 8007d54:	f7ff fbe8 	bl	8007528 <_free_r>
 8007d58:	4625      	mov	r5, r4
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d60:	f000 f81b 	bl	8007d9a <_malloc_usable_size_r>
 8007d64:	4284      	cmp	r4, r0
 8007d66:	4607      	mov	r7, r0
 8007d68:	d802      	bhi.n	8007d70 <_realloc_r+0x34>
 8007d6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d6e:	d812      	bhi.n	8007d96 <_realloc_r+0x5a>
 8007d70:	4621      	mov	r1, r4
 8007d72:	4640      	mov	r0, r8
 8007d74:	f7ff fc44 	bl	8007600 <_malloc_r>
 8007d78:	4605      	mov	r5, r0
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d0ed      	beq.n	8007d5a <_realloc_r+0x1e>
 8007d7e:	42bc      	cmp	r4, r7
 8007d80:	4622      	mov	r2, r4
 8007d82:	4631      	mov	r1, r6
 8007d84:	bf28      	it	cs
 8007d86:	463a      	movcs	r2, r7
 8007d88:	f7ff fbc0 	bl	800750c <memcpy>
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4640      	mov	r0, r8
 8007d90:	f7ff fbca 	bl	8007528 <_free_r>
 8007d94:	e7e1      	b.n	8007d5a <_realloc_r+0x1e>
 8007d96:	4635      	mov	r5, r6
 8007d98:	e7df      	b.n	8007d5a <_realloc_r+0x1e>

08007d9a <_malloc_usable_size_r>:
 8007d9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d9e:	1f18      	subs	r0, r3, #4
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	bfbc      	itt	lt
 8007da4:	580b      	ldrlt	r3, [r1, r0]
 8007da6:	18c0      	addlt	r0, r0, r3
 8007da8:	4770      	bx	lr
	...

08007dac <_init>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	bf00      	nop
 8007db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db2:	bc08      	pop	{r3}
 8007db4:	469e      	mov	lr, r3
 8007db6:	4770      	bx	lr

08007db8 <_fini>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	bf00      	nop
 8007dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dbe:	bc08      	pop	{r3}
 8007dc0:	469e      	mov	lr, r3
 8007dc2:	4770      	bx	lr
