
OCBRA2-TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d70  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007f40  08007f40  00008f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008060  08008060  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008060  08008060  00009060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008068  08008068  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008068  08008068  00009068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800806c  0800806c  0000906c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008070  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  08008108  0000a098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  080081a8  0000a138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00003d8c  200001d8  08008248  0000a1d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20003f64  08008248  0000af64  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012f79  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000291f  00000000  00000000  0001d181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e50  00000000  00000000  0001faa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b03  00000000  00000000  000208f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027cfe  00000000  00000000  000213f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012503  00000000  00000000  000490f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f1b75  00000000  00000000  0005b5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014d169  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000406c  00000000  00000000  0014d1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000008b  00000000  00000000  00151218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007f28 	.word	0x08007f28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08007f28 	.word	0x08007f28

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <OCB>:



void OCB(unsigned char* plaintext, unsigned char* ciphertext, unsigned char* nonce, 
        unsigned char* asociated_data, unsigned int plaintext_size, unsigned int asociated_data_size,
        unsigned char* key, unsigned char* tag){
 80005a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005a4:	f2ad 4d4c 	subw	sp, sp, #1100	@ 0x44c
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	f507 6488 	add.w	r4, r7, #1088	@ 0x440
 80005ae:	f2a4 4404 	subw	r4, r4, #1028	@ 0x404
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	f507 6088 	add.w	r0, r7, #1088	@ 0x440
 80005b8:	f5a0 6081 	sub.w	r0, r0, #1032	@ 0x408
 80005bc:	6001      	str	r1, [r0, #0]
 80005be:	f507 6188 	add.w	r1, r7, #1088	@ 0x440
 80005c2:	f2a1 410c 	subw	r1, r1, #1036	@ 0x40c
 80005c6:	600a      	str	r2, [r1, #0]
 80005c8:	f507 6288 	add.w	r2, r7, #1088	@ 0x440
 80005cc:	f5a2 6282 	sub.w	r2, r2, #1040	@ 0x410
 80005d0:	6013      	str	r3, [r2, #0]
 80005d2:	466b      	mov	r3, sp
 80005d4:	607b      	str	r3, [r7, #4]
        



    if (asociated_data_size!=0)
 80005d6:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d012      	beq.n	8000604 <OCB+0x64>
    {
        PMAC(nonce,asociated_data,asociated_data_size,key,tag);
 80005de:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80005e2:	f5a3 6182 	sub.w	r1, r3, #1040	@ 0x410
 80005e6:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80005ea:	f2a3 400c 	subw	r0, r3, #1036	@ 0x40c
 80005ee:	f8d7 3474 	ldr.w	r3, [r7, #1140]	@ 0x474
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 80005f8:	f8d7 246c 	ldr.w	r2, [r7, #1132]	@ 0x46c
 80005fc:	6809      	ldr	r1, [r1, #0]
 80005fe:	6800      	ldr	r0, [r0, #0]
 8000600:	f000 fa7a 	bl	8000af8 <PMAC>

    }
    

    uint32_t size_ptext = (plaintext_size/2) + 16;
 8000604:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8000608:	085b      	lsrs	r3, r3, #1
 800060a:	3310      	adds	r3, #16
 800060c:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
    uint32_t size = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c

    if (plaintext_size%16 == 0 ){
 8000616:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800061a:	f003 030f 	and.w	r3, r3, #15
 800061e:	2b00      	cmp	r3, #0
 8000620:	d105      	bne.n	800062e <OCB+0x8e>
        size = plaintext_size/16;
 8000622:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8000626:	091b      	lsrs	r3, r3, #4
 8000628:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 800062c:	e005      	b.n	800063a <OCB+0x9a>
    }else{
        size = plaintext_size/16+1;
 800062e:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8000632:	091b      	lsrs	r3, r3, #4
 8000634:	3301      	adds	r3, #1
 8000636:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
    }

    unsigned char ptext0[size_ptext];
 800063a:	f8d7 1430 	ldr.w	r1, [r7, #1072]	@ 0x430
 800063e:	460b      	mov	r3, r1
 8000640:	3b01      	subs	r3, #1
 8000642:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 8000646:	2300      	movs	r3, #0
 8000648:	4688      	mov	r8, r1
 800064a:	4699      	mov	r9, r3
 800064c:	f04f 0200 	mov.w	r2, #0
 8000650:	f04f 0300 	mov.w	r3, #0
 8000654:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000658:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800065c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000660:	2300      	movs	r3, #0
 8000662:	468a      	mov	sl, r1
 8000664:	469b      	mov	fp, r3
 8000666:	f04f 0200 	mov.w	r2, #0
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000672:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000676:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800067a:	1dcb      	adds	r3, r1, #7
 800067c:	08db      	lsrs	r3, r3, #3
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	ebad 0d03 	sub.w	sp, sp, r3
 8000684:	ab02      	add	r3, sp, #8
 8000686:	3300      	adds	r3, #0
 8000688:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
    unsigned char ptext1[size_ptext];
 800068c:	f8d7 1430 	ldr.w	r1, [r7, #1072]	@ 0x430
 8000690:	460b      	mov	r3, r1
 8000692:	3b01      	subs	r3, #1
 8000694:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
 8000698:	2300      	movs	r3, #0
 800069a:	460d      	mov	r5, r1
 800069c:	461e      	mov	r6, r3
 800069e:	f04f 0200 	mov.w	r2, #0
 80006a2:	f04f 0300 	mov.w	r3, #0
 80006a6:	00f3      	lsls	r3, r6, #3
 80006a8:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80006ac:	00ea      	lsls	r2, r5, #3
 80006ae:	2300      	movs	r3, #0
 80006b0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006b4:	f04f 0200 	mov.w	r2, #0
 80006b8:	f04f 0300 	mov.w	r3, #0
 80006bc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80006c0:	4628      	mov	r0, r5
 80006c2:	00c3      	lsls	r3, r0, #3
 80006c4:	4620      	mov	r0, r4
 80006c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80006ca:	4620      	mov	r0, r4
 80006cc:	00c2      	lsls	r2, r0, #3
 80006ce:	1dcb      	adds	r3, r1, #7
 80006d0:	08db      	lsrs	r3, r3, #3
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	ebad 0d03 	sub.w	sp, sp, r3
 80006d8:	ab02      	add	r3, sp, #8
 80006da:	3300      	adds	r3, #0
 80006dc:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420

    unsigned char ctext0[size_ptext];
 80006e0:	f8d7 1430 	ldr.w	r1, [r7, #1072]	@ 0x430
 80006e4:	460b      	mov	r3, r1
 80006e6:	3b01      	subs	r3, #1
 80006e8:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 80006ec:	2300      	movs	r3, #0
 80006ee:	6239      	str	r1, [r7, #32]
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80006f2:	f04f 0200 	mov.w	r2, #0
 80006f6:	f04f 0300 	mov.w	r3, #0
 80006fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80006fe:	4628      	mov	r0, r5
 8000700:	00c3      	lsls	r3, r0, #3
 8000702:	4620      	mov	r0, r4
 8000704:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000708:	4620      	mov	r0, r4
 800070a:	00c2      	lsls	r2, r0, #3
 800070c:	2300      	movs	r3, #0
 800070e:	61b9      	str	r1, [r7, #24]
 8000710:	61fb      	str	r3, [r7, #28]
 8000712:	f04f 0200 	mov.w	r2, #0
 8000716:	f04f 0300 	mov.w	r3, #0
 800071a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800071e:	4628      	mov	r0, r5
 8000720:	00c3      	lsls	r3, r0, #3
 8000722:	4620      	mov	r0, r4
 8000724:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000728:	4620      	mov	r0, r4
 800072a:	00c2      	lsls	r2, r0, #3
 800072c:	1dcb      	adds	r3, r1, #7
 800072e:	08db      	lsrs	r3, r3, #3
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	ebad 0d03 	sub.w	sp, sp, r3
 8000736:	ab02      	add	r3, sp, #8
 8000738:	3300      	adds	r3, #0
 800073a:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
    unsigned char ctext1[size_ptext];
 800073e:	f8d7 1430 	ldr.w	r1, [r7, #1072]	@ 0x430
 8000742:	460b      	mov	r3, r1
 8000744:	3b01      	subs	r3, #1
 8000746:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 800074a:	2300      	movs	r3, #0
 800074c:	6139      	str	r1, [r7, #16]
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	f04f 0200 	mov.w	r2, #0
 8000754:	f04f 0300 	mov.w	r3, #0
 8000758:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800075c:	4628      	mov	r0, r5
 800075e:	00c3      	lsls	r3, r0, #3
 8000760:	4620      	mov	r0, r4
 8000762:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000766:	4620      	mov	r0, r4
 8000768:	00c2      	lsls	r2, r0, #3
 800076a:	2300      	movs	r3, #0
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	f04f 0200 	mov.w	r2, #0
 8000774:	f04f 0300 	mov.w	r3, #0
 8000778:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800077c:	4628      	mov	r0, r5
 800077e:	00c3      	lsls	r3, r0, #3
 8000780:	4620      	mov	r0, r4
 8000782:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000786:	4620      	mov	r0, r4
 8000788:	00c2      	lsls	r2, r0, #3
 800078a:	1dcb      	adds	r3, r1, #7
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	ebad 0d03 	sub.w	sp, sp, r3
 8000794:	ab02      	add	r3, sp, #8
 8000796:	3300      	adds	r3, #0
 8000798:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
    for (size_t i = 0; i < size_ptext; i++){
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 80007a2:	e020      	b.n	80007e6 <OCB+0x246>
        ptext0[i]=0;
 80007a4:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 80007a8:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80007ac:	4413      	add	r3, r2
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
        ptext1[i]=0;
 80007b2:	f8d7 2420 	ldr.w	r2, [r7, #1056]	@ 0x420
 80007b6:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80007ba:	4413      	add	r3, r2
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
        ctext0[i]=0;
 80007c0:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 80007c4:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80007c8:	4413      	add	r3, r2
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
        ctext1[i]=0;
 80007ce:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 80007d2:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80007d6:	4413      	add	r3, r2
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < size_ptext; i++){
 80007dc:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80007e0:	3301      	adds	r3, #1
 80007e2:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 80007e6:	f8d7 2438 	ldr.w	r2, [r7, #1080]	@ 0x438
 80007ea:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d3d8      	bcc.n	80007a4 <OCB+0x204>
    }
    
    unsigned char key0[key_size];
    unsigned char key1[key_size];
    
    const unsigned char key_2AES[key_size] = {0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3};
 80007f2:	4bbd      	ldr	r3, [pc, #756]	@ (8000ae8 <OCB+0x548>)
 80007f4:	f507 746c 	add.w	r4, r7, #944	@ 0x3b0
 80007f8:	461d      	mov	r5, r3
 80007fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fe:	682b      	ldr	r3, [r5, #0]
 8000800:	7023      	strb	r3, [r4, #0]
 8000802:	f207 33c1 	addw	r3, r7, #961	@ 0x3c1
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	f8c3 200b 	str.w	r2, [r3, #11]
    unsigned char N_0_t[16];
    unsigned char N_1_t[16];

    unsigned char c_N_0[16];
    unsigned char c_N_1[16];
    unsigned char checksum[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8000812:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000816:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800081a:	4ab4      	ldr	r2, [pc, #720]	@ (8000aec <OCB+0x54c>)
 800081c:	461c      	mov	r4, r3
 800081e:	4613      	mov	r3, r2
 8000820:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000822:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char S[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8000826:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800082a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800082e:	4aaf      	ldr	r2, [pc, #700]	@ (8000aec <OCB+0x54c>)
 8000830:	461c      	mov	r4, r3
 8000832:	4613      	mov	r3, r2
 8000834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000836:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned int add_nonce_0[4] = {0,0,0,0};
 800083a:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800083e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000842:	461a      	mov	r2, r3
 8000844:	2300      	movs	r3, #0
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	6053      	str	r3, [r2, #4]
 800084a:	6093      	str	r3, [r2, #8]
 800084c:	60d3      	str	r3, [r2, #12]
    unsigned int add_nonce_1[4] = {1,1,1,1};
 800084e:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000852:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000856:	4aa6      	ldr	r2, [pc, #664]	@ (8000af0 <OCB+0x550>)
 8000858:	461c      	mov	r4, r3
 800085a:	4613      	mov	r3, r2
 800085c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800085e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned int add_nonce_2[4] = {2,2,2,2};
 8000862:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000866:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800086a:	4aa2      	ldr	r2, [pc, #648]	@ (8000af4 <OCB+0x554>)
 800086c:	461c      	mov	r4, r3
 800086e:	4613      	mov	r3, r2
 8000870:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000872:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    divide_plaintext(plaintext, ptext0,  ptext1, plaintext_size);
 8000876:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800087a:	f2a3 4004 	subw	r0, r3, #1028	@ 0x404
 800087e:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8000882:	f8d7 2420 	ldr.w	r2, [r7, #1056]	@ 0x420
 8000886:	f8d7 1428 	ldr.w	r1, [r7, #1064]	@ 0x428
 800088a:	6800      	ldr	r0, [r0, #0]
 800088c:	f000 fd5d 	bl	800134a <divide_plaintext>
    divide_key(key, key0, key1);
 8000890:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 8000894:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000898:	4619      	mov	r1, r3
 800089a:	f8d7 0470 	ldr.w	r0, [r7, #1136]	@ 0x470
 800089e:	f000 fde4 	bl	800146a <divide_key>

    //key schedule
	uint32_t rkeys_ffs[88];
    uint32_t two_AES_keys_ffs[88];

	aes128_keyschedule_ffs(rkeys_ffs, key0, key1);
 80008a2:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 80008a6:	f507 717c 	add.w	r1, r7, #1008	@ 0x3f0
 80008aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 fd24 	bl	80032fc <aes128_keyschedule_ffs>
    aes128_2rounds_keyschedule_ffs(two_AES_keys_ffs, key_2AES, key_2AES);
 80008b4:	f507 726c 	add.w	r2, r7, #944	@ 0x3b0
 80008b8:	f507 716c 	add.w	r1, r7, #944	@ 0x3b0
 80008bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 fef6 	bl	80036b2 <aes128_2rounds_keyschedule_ffs>

	//generate the N from nonce using 10 aes rounds
    aes128_encrypt_ffs(N_0, N_1, nonce, nonce, rkeys_ffs);
 80008c6:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80008ca:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80008ce:	f507 6288 	add.w	r2, r7, #1088	@ 0x440
 80008d2:	f2a2 420c 	subw	r2, r2, #1036	@ 0x40c
 80008d6:	f507 7464 	add.w	r4, r7, #912	@ 0x390
 80008da:	f507 7068 	add.w	r0, r7, #928	@ 0x3a0
 80008de:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 80008e2:	9100      	str	r1, [sp, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	4621      	mov	r1, r4
 80008ea:	f002 fa3e 	bl	8002d6a <aes128_encrypt_ffs>

    for (size_t i = 0; i < size/2; i++){
 80008ee:	2300      	movs	r3, #0
 80008f0:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 80008f4:	e09d      	b.n	8000a32 <OCB+0x492>

        add_nonce(add_nonce_0, (unsigned int *)N_0,(unsigned int *)N_0_t, 4);
 80008f6:	f507 7260 	add.w	r2, r7, #896	@ 0x380
 80008fa:	f507 7168 	add.w	r1, r7, #928	@ 0x3a0
 80008fe:	f507 7048 	add.w	r0, r7, #800	@ 0x320
 8000902:	2304      	movs	r3, #4
 8000904:	f000 fcd4 	bl	80012b0 <add_nonce>
        add_nonce(add_nonce_1, (unsigned int *)N_1,(unsigned int *)N_1_t, 4);
 8000908:	f507 725c 	add.w	r2, r7, #880	@ 0x370
 800090c:	f507 7164 	add.w	r1, r7, #912	@ 0x390
 8000910:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 8000914:	2304      	movs	r3, #4
 8000916:	f000 fccb 	bl	80012b0 <add_nonce>

        two_Rounds_aes128_encrypt_ffs(c_N_0,  c_N_1, N_0_t,  N_1_t, two_AES_keys_ffs);
 800091a:	f507 745c 	add.w	r4, r7, #880	@ 0x370
 800091e:	f507 7260 	add.w	r2, r7, #896	@ 0x380
 8000922:	f507 7154 	add.w	r1, r7, #848	@ 0x350
 8000926:	f507 7058 	add.w	r0, r7, #864	@ 0x360
 800092a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	4623      	mov	r3, r4
 8000932:	f002 faf7 	bl	8002f24 <two_Rounds_aes128_encrypt_ffs>

        // print_array(ptext0+ (i*16),16);
        // print_array(ptext1+ (i*16),16);

        xor_nonce( checksum, ptext0 + (i*16), 16);
 8000936:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800093a:	011b      	lsls	r3, r3, #4
 800093c:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 8000940:	18d1      	adds	r1, r2, r3
 8000942:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8000946:	2210      	movs	r2, #16
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fcd9 	bl	8001300 <xor_nonce>
        xor_nonce( checksum, ptext1 + (i*16), 16);
 800094e:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8000952:	011b      	lsls	r3, r3, #4
 8000954:	f8d7 2420 	ldr.w	r2, [r7, #1056]	@ 0x420
 8000958:	18d1      	adds	r1, r2, r3
 800095a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 800095e:	2210      	movs	r2, #16
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fccd 	bl	8001300 <xor_nonce>

        xor_nonce( ptext0 +  (i*16), c_N_0, 16);
 8000966:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800096a:	011b      	lsls	r3, r3, #4
 800096c:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 8000970:	4413      	add	r3, r2
 8000972:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 8000976:	2210      	movs	r2, #16
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fcc1 	bl	8001300 <xor_nonce>
        xor_nonce( ptext1 + (i*16), c_N_1, 16);
 800097e:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8000982:	011b      	lsls	r3, r3, #4
 8000984:	f8d7 2420 	ldr.w	r2, [r7, #1056]	@ 0x420
 8000988:	4413      	add	r3, r2
 800098a:	f507 7154 	add.w	r1, r7, #848	@ 0x350
 800098e:	2210      	movs	r2, #16
 8000990:	4618      	mov	r0, r3
 8000992:	f000 fcb5 	bl	8001300 <xor_nonce>




	    aes128_encrypt_ffs(ctext0+ (i*16), ctext1+ (i*16), ptext0+ ((i)*16), ptext1 + (i*16), rkeys_ffs);
 8000996:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 80009a0:	18d0      	adds	r0, r2, r3
 80009a2:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 80009ac:	18d1      	adds	r1, r2, r3
 80009ae:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 80009b8:	18d4      	adds	r4, r2, r3
 80009ba:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	f8d7 2420 	ldr.w	r2, [r7, #1056]	@ 0x420
 80009c4:	441a      	add	r2, r3
 80009c6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	4613      	mov	r3, r2
 80009ce:	4622      	mov	r2, r4
 80009d0:	f002 f9cb 	bl	8002d6a <aes128_encrypt_ffs>
        xor_nonce( ctext0 + (i*16), c_N_0, 16);
 80009d4:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80009d8:	011b      	lsls	r3, r3, #4
 80009da:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 80009de:	4413      	add	r3, r2
 80009e0:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 80009e4:	2210      	movs	r2, #16
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fc8a 	bl	8001300 <xor_nonce>
        xor_nonce( ctext1 + (i*16), c_N_1, 16);
 80009ec:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80009f0:	011b      	lsls	r3, r3, #4
 80009f2:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 80009f6:	4413      	add	r3, r2
 80009f8:	f507 7154 	add.w	r1, r7, #848	@ 0x350
 80009fc:	2210      	movs	r2, #16
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fc7e 	bl	8001300 <xor_nonce>
        
        // print_array(ctext0+ (i*16),16);
        // print_array(ctext1+ (i*16),16);

        add_nonce(add_nonce_2, add_nonce_0,add_nonce_0, 4);
 8000a04:	f507 7248 	add.w	r2, r7, #800	@ 0x320
 8000a08:	f507 7148 	add.w	r1, r7, #800	@ 0x320
 8000a0c:	f507 7040 	add.w	r0, r7, #768	@ 0x300
 8000a10:	2304      	movs	r3, #4
 8000a12:	f000 fc4d 	bl	80012b0 <add_nonce>
        add_nonce(add_nonce_2, add_nonce_1,add_nonce_1, 4);
 8000a16:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 8000a1a:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 8000a1e:	f507 7040 	add.w	r0, r7, #768	@ 0x300
 8000a22:	2304      	movs	r3, #4
 8000a24:	f000 fc44 	bl	80012b0 <add_nonce>
    for (size_t i = 0; i < size/2; i++){
 8000a28:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8000a32:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8000a36:	085b      	lsrs	r3, r3, #1
 8000a38:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	f4ff af5a 	bcc.w	80008f6 <OCB+0x356>
        
    }
    
    union_ciphertext(ciphertext,ctext0,ctext1,plaintext_size);
 8000a42:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000a46:	f5a3 6081 	sub.w	r0, r3, #1032	@ 0x408
 8000a4a:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8000a4e:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8000a52:	f8d7 1418 	ldr.w	r1, [r7, #1048]	@ 0x418
 8000a56:	6800      	ldr	r0, [r0, #0]
 8000a58:	f000 fcbf 	bl	80013da <union_ciphertext>

    if (1)//condicion de bloques completos
    {
        add_nonce(add_nonce_1, (unsigned int *)N_0,(unsigned int *)N_0_t, 4);
 8000a5c:	f507 7260 	add.w	r2, r7, #896	@ 0x380
 8000a60:	f507 7168 	add.w	r1, r7, #928	@ 0x3a0
 8000a64:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 8000a68:	2304      	movs	r3, #4
 8000a6a:	f000 fc21 	bl	80012b0 <add_nonce>
        two_Rounds_aes128_encrypt_ffs(c_N_0,  c_N_1, N_0_t,  N_0_t, two_AES_keys_ffs);
 8000a6e:	f507 7460 	add.w	r4, r7, #896	@ 0x380
 8000a72:	f507 7260 	add.w	r2, r7, #896	@ 0x380
 8000a76:	f507 7154 	add.w	r1, r7, #848	@ 0x350
 8000a7a:	f507 7058 	add.w	r0, r7, #864	@ 0x360
 8000a7e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	4623      	mov	r3, r4
 8000a86:	f002 fa4d 	bl	8002f24 <two_Rounds_aes128_encrypt_ffs>
        xor_nonce( checksum, c_N_0, 16);
 8000a8a:	f507 7158 	add.w	r1, r7, #864	@ 0x360
 8000a8e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8000a92:	2210      	movs	r2, #16
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 fc33 	bl	8001300 <xor_nonce>
	    aes128_encrypt_ffs(checksum, checksum, checksum, checksum, rkeys_ffs);
 8000a9a:	f507 7450 	add.w	r4, r7, #832	@ 0x340
 8000a9e:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8000aa2:	f507 7150 	add.w	r1, r7, #832	@ 0x340
 8000aa6:	f507 7050 	add.w	r0, r7, #832	@ 0x340
 8000aaa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	4623      	mov	r3, r4
 8000ab2:	f002 f95a 	bl	8002d6a <aes128_encrypt_ffs>
        xor_nonce( checksum, S, 16);
 8000ab6:	f507 714c 	add.w	r1, r7, #816	@ 0x330
 8000aba:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8000abe:	2210      	movs	r2, #16
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 fc1d 	bl	8001300 <xor_nonce>
        xor_nonce( tag, checksum, 16);
 8000ac6:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8000aca:	2210      	movs	r2, #16
 8000acc:	4619      	mov	r1, r3
 8000ace:	f8d7 0474 	ldr.w	r0, [r7, #1140]	@ 0x474
 8000ad2:	f000 fc15 	bl	8001300 <xor_nonce>
 8000ad6:	f8d7 d004 	ldr.w	sp, [r7, #4]
    }



}
 8000ada:	bf00      	nop
 8000adc:	f207 4744 	addw	r7, r7, #1092	@ 0x444
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ae6:	bf00      	nop
 8000ae8:	08007f40 	.word	0x08007f40
 8000aec:	08007f60 	.word	0x08007f60
 8000af0:	08007f70 	.word	0x08007f70
 8000af4:	08007f80 	.word	0x08007f80

08000af8 <PMAC>:

void PMAC( unsigned char* nonce, unsigned char* asociated_data, unsigned int asociated_data_size,unsigned char* key, unsigned char* tag){
 8000af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000afc:	f5ad 7d6d 	sub.w	sp, sp, #948	@ 0x3b4
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	f507 766a 	add.w	r6, r7, #936	@ 0x3a8
 8000b06:	f5a6 7665 	sub.w	r6, r6, #916	@ 0x394
 8000b0a:	6030      	str	r0, [r6, #0]
 8000b0c:	f507 706a 	add.w	r0, r7, #936	@ 0x3a8
 8000b10:	f5a0 7066 	sub.w	r0, r0, #920	@ 0x398
 8000b14:	6001      	str	r1, [r0, #0]
 8000b16:	f507 716a 	add.w	r1, r7, #936	@ 0x3a8
 8000b1a:	f5a1 7167 	sub.w	r1, r1, #924	@ 0x39c
 8000b1e:	600a      	str	r2, [r1, #0]
 8000b20:	f507 726a 	add.w	r2, r7, #936	@ 0x3a8
 8000b24:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 8000b28:	6013      	str	r3, [r2, #0]
 8000b2a:	466b      	mov	r3, sp
 8000b2c:	461e      	mov	r6, r3




    unsigned char ptext0[asociated_data_size];
 8000b2e:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8000b32:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8000b36:	6819      	ldr	r1, [r3, #0]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8000b40:	2300      	movs	r3, #0
 8000b42:	6039      	str	r1, [r7, #0]
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	f04f 0300 	mov.w	r3, #0
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	00c3      	lsls	r3, r0, #3
 8000b52:	6838      	ldr	r0, [r7, #0]
 8000b54:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b58:	6838      	ldr	r0, [r7, #0]
 8000b5a:	00c2      	lsls	r2, r0, #3
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	468a      	mov	sl, r1
 8000b60:	469b      	mov	fp, r3
 8000b62:	f04f 0200 	mov.w	r2, #0
 8000b66:	f04f 0300 	mov.w	r3, #0
 8000b6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000b6e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000b72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000b76:	1dcb      	adds	r3, r1, #7
 8000b78:	08db      	lsrs	r3, r3, #3
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	ebad 0d03 	sub.w	sp, sp, r3
 8000b80:	ab02      	add	r3, sp, #8
 8000b82:	3300      	adds	r3, #0
 8000b84:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    unsigned char ptext1[asociated_data_size];
 8000b88:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8000b8c:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8000b90:	6819      	ldr	r1, [r3, #0]
 8000b92:	460b      	mov	r3, r1
 8000b94:	3b01      	subs	r3, #1
 8000b96:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	4688      	mov	r8, r1
 8000b9e:	4699      	mov	r9, r3
 8000ba0:	f04f 0200 	mov.w	r2, #0
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	460c      	mov	r4, r1
 8000bb8:	461d      	mov	r5, r3
 8000bba:	f04f 0200 	mov.w	r2, #0
 8000bbe:	f04f 0300 	mov.w	r3, #0
 8000bc2:	00eb      	lsls	r3, r5, #3
 8000bc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bc8:	00e2      	lsls	r2, r4, #3
 8000bca:	1dcb      	adds	r3, r1, #7
 8000bcc:	08db      	lsrs	r3, r3, #3
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	ebad 0d03 	sub.w	sp, sp, r3
 8000bd4:	ab02      	add	r3, sp, #8
 8000bd6:	3300      	adds	r3, #0
 8000bd8:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390


    for (size_t i = 0; i < asociated_data_size; i++){
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8000be2:	e012      	b.n	8000c0a <PMAC+0x112>
        ptext0[i]=0;
 8000be4:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 8000be8:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8000bec:	4413      	add	r3, r2
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
        ptext1[i]=0;
 8000bf2:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 8000bf6:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8000bfa:	4413      	add	r3, r2
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < asociated_data_size; i++){
 8000c00:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8000c04:	3301      	adds	r3, #1
 8000c06:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8000c0a:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8000c0e:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8000c12:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d3e3      	bcc.n	8000be4 <PMAC+0xec>

    }
    
    unsigned char key_2AES[key_size] = {0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3};
 8000c1c:	4b90      	ldr	r3, [pc, #576]	@ (8000e60 <PMAC+0x368>)
 8000c1e:	f507 745b 	add.w	r4, r7, #876	@ 0x36c
 8000c22:	461d      	mov	r5, r3
 8000c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c28:	682b      	ldr	r3, [r5, #0]
 8000c2a:	7023      	strb	r3, [r4, #0]
 8000c2c:	f207 337d 	addw	r3, r7, #893	@ 0x37d
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	f8c3 200b 	str.w	r2, [r3, #11]

    unsigned char N_0[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000c3c:	4b89      	ldr	r3, [pc, #548]	@ (8000e64 <PMAC+0x36c>)
 8000c3e:	f507 7457 	add.w	r4, r7, #860	@ 0x35c
 8000c42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char N_1[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000c48:	4b86      	ldr	r3, [pc, #536]	@ (8000e64 <PMAC+0x36c>)
 8000c4a:	f507 7453 	add.w	r4, r7, #844	@ 0x34c
 8000c4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned char N_0_t[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000c54:	4b83      	ldr	r3, [pc, #524]	@ (8000e64 <PMAC+0x36c>)
 8000c56:	f507 744f 	add.w	r4, r7, #828	@ 0x33c
 8000c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char N_1_t[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000c60:	4b80      	ldr	r3, [pc, #512]	@ (8000e64 <PMAC+0x36c>)
 8000c62:	f507 744b 	add.w	r4, r7, #812	@ 0x32c
 8000c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned char c_N_0[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000c6c:	4b7d      	ldr	r3, [pc, #500]	@ (8000e64 <PMAC+0x36c>)
 8000c6e:	f507 7447 	add.w	r4, r7, #796	@ 0x31c
 8000c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char c_N_1[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000c78:	4b7a      	ldr	r3, [pc, #488]	@ (8000e64 <PMAC+0x36c>)
 8000c7a:	f507 7443 	add.w	r4, r7, #780	@ 0x30c
 8000c7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    //unsigned char checksum[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    unsigned int add_nonce_0[4] = {0,0,0,0};
 8000c84:	f507 733f 	add.w	r3, r7, #764	@ 0x2fc
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
    unsigned int add_nonce_1[4] = {1,1,1,1};
 8000c92:	4b75      	ldr	r3, [pc, #468]	@ (8000e68 <PMAC+0x370>)
 8000c94:	f507 743b 	add.w	r4, r7, #748	@ 0x2ec
 8000c98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned int add_nonce_2[4] = {2,2,2,2};
 8000c9e:	4b73      	ldr	r3, [pc, #460]	@ (8000e6c <PMAC+0x374>)
 8000ca0:	f507 7437 	add.w	r4, r7, #732	@ 0x2dc
 8000ca4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ca6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    divide_plaintext(asociated_data, ptext0,  ptext1, asociated_data_size);
 8000caa:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8000cae:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8000cb2:	f507 726a 	add.w	r2, r7, #936	@ 0x3a8
 8000cb6:	f5a2 7066 	sub.w	r0, r2, #920	@ 0x398
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 8000cc0:	f8d7 1398 	ldr.w	r1, [r7, #920]	@ 0x398
 8000cc4:	6800      	ldr	r0, [r0, #0]
 8000cc6:	f000 fb40 	bl	800134a <divide_plaintext>

    //key schedule
	uint32_t rkeys_ffs[88];
    uint32_t two_AES_keys_ffs[88];

	aes128_keyschedule_ffs(rkeys_ffs, key, key);
 8000cca:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8000cce:	f5a3 7268 	sub.w	r2, r3, #928	@ 0x3a0
 8000cd2:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8000cd6:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8000cda:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 8000cde:	6812      	ldr	r2, [r2, #0]
 8000ce0:	6819      	ldr	r1, [r3, #0]
 8000ce2:	f002 fb0b 	bl	80032fc <aes128_keyschedule_ffs>
	aes128_keyschedule_ffs(two_AES_keys_ffs, key_2AES, key_2AES);
 8000ce6:	f507 725b 	add.w	r2, r7, #876	@ 0x36c
 8000cea:	f507 715b 	add.w	r1, r7, #876	@ 0x36c
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 fb02 	bl	80032fc <aes128_keyschedule_ffs>
    //aes128_2rounds_keyschedule_ffs(two_AES_keys_ffs, key_2AES, key_2AES);

	//generate the N from nonce using 10 aes rounds
    aes128_encrypt_ffs(N_0, N_1, nonce, nonce, rkeys_ffs);
 8000cf8:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8000cfc:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8000d00:	f507 726a 	add.w	r2, r7, #936	@ 0x3a8
 8000d04:	f5a2 7265 	sub.w	r2, r2, #916	@ 0x394
 8000d08:	f507 7453 	add.w	r4, r7, #844	@ 0x34c
 8000d0c:	f507 7057 	add.w	r0, r7, #860	@ 0x35c
 8000d10:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8000d14:	9100      	str	r1, [sp, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	6812      	ldr	r2, [r2, #0]
 8000d1a:	4621      	mov	r1, r4
 8000d1c:	f002 f825 	bl	8002d6a <aes128_encrypt_ffs>

    int block_size = asociated_data_size/32;
 8000d20:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8000d24:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

    for (size_t i = 0; i < block_size; i++){
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8000d36:	e085      	b.n	8000e44 <PMAC+0x34c>

        add_nonce(add_nonce_0, (unsigned int *)N_0,(unsigned int *)N_0_t, 4);
 8000d38:	f507 724f 	add.w	r2, r7, #828	@ 0x33c
 8000d3c:	f507 7157 	add.w	r1, r7, #860	@ 0x35c
 8000d40:	f507 703f 	add.w	r0, r7, #764	@ 0x2fc
 8000d44:	2304      	movs	r3, #4
 8000d46:	f000 fab3 	bl	80012b0 <add_nonce>
        add_nonce(add_nonce_1, (unsigned int *)N_1,(unsigned int *)N_1_t, 4);
 8000d4a:	f507 724b 	add.w	r2, r7, #812	@ 0x32c
 8000d4e:	f507 7153 	add.w	r1, r7, #844	@ 0x34c
 8000d52:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 8000d56:	2304      	movs	r3, #4
 8000d58:	f000 faaa 	bl	80012b0 <add_nonce>

        two_Rounds_aes128_encrypt_ffs(c_N_0,  c_N_1, N_0_t,  N_1_t, two_AES_keys_ffs);
 8000d5c:	f507 744b 	add.w	r4, r7, #812	@ 0x32c
 8000d60:	f507 724f 	add.w	r2, r7, #828	@ 0x33c
 8000d64:	f507 7143 	add.w	r1, r7, #780	@ 0x30c
 8000d68:	f507 7047 	add.w	r0, r7, #796	@ 0x31c
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	4623      	mov	r3, r4
 8000d74:	f002 f8d6 	bl	8002f24 <two_Rounds_aes128_encrypt_ffs>

        xor_nonce( ptext0 + (i*16), c_N_0, 16);
 8000d78:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8000d7c:	011b      	lsls	r3, r3, #4
 8000d7e:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 8000d82:	4413      	add	r3, r2
 8000d84:	f507 7147 	add.w	r1, r7, #796	@ 0x31c
 8000d88:	2210      	movs	r2, #16
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fab8 	bl	8001300 <xor_nonce>
        xor_nonce( ptext1 + (i*16), c_N_1, 16);
 8000d90:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 8000d9a:	4413      	add	r3, r2
 8000d9c:	f507 7143 	add.w	r1, r7, #780	@ 0x30c
 8000da0:	2210      	movs	r2, #16
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 faac 	bl	8001300 <xor_nonce>
	    
        aes128_encrypt_ffs(ptext0+ (i*16), ptext1+ (i*16), ptext0+ ((i)*16), ptext1 + (i*16), rkeys_ffs);
 8000da8:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8000dac:	011b      	lsls	r3, r3, #4
 8000dae:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 8000db2:	18d0      	adds	r0, r2, r3
 8000db4:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 8000dbe:	18d1      	adds	r1, r2, r3
 8000dc0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8000dc4:	011b      	lsls	r3, r3, #4
 8000dc6:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 8000dca:	18d4      	adds	r4, r2, r3
 8000dcc:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8000dd0:	011b      	lsls	r3, r3, #4
 8000dd2:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 8000dd6:	441a      	add	r2, r3
 8000dd8:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	4613      	mov	r3, r2
 8000de0:	4622      	mov	r2, r4
 8000de2:	f001 ffc2 	bl	8002d6a <aes128_encrypt_ffs>

        xor_nonce( tag, ptext0 + (i*16), 16);
 8000de6:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 8000df0:	4413      	add	r3, r2
 8000df2:	2210      	movs	r2, #16
 8000df4:	4619      	mov	r1, r3
 8000df6:	f8d7 03d0 	ldr.w	r0, [r7, #976]	@ 0x3d0
 8000dfa:	f000 fa81 	bl	8001300 <xor_nonce>
        // print_array(checksum,16);
        xor_nonce( tag, ptext1 + (i*16), 16);
 8000dfe:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 8000e08:	4413      	add	r3, r2
 8000e0a:	2210      	movs	r2, #16
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f8d7 03d0 	ldr.w	r0, [r7, #976]	@ 0x3d0
 8000e12:	f000 fa75 	bl	8001300 <xor_nonce>
        // print_array(checksum,16);
        add_nonce(add_nonce_2, add_nonce_0,add_nonce_0, 4);
 8000e16:	f507 723f 	add.w	r2, r7, #764	@ 0x2fc
 8000e1a:	f507 713f 	add.w	r1, r7, #764	@ 0x2fc
 8000e1e:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 8000e22:	2304      	movs	r3, #4
 8000e24:	f000 fa44 	bl	80012b0 <add_nonce>
        add_nonce(add_nonce_2, add_nonce_1,add_nonce_1, 4);
 8000e28:	f507 723b 	add.w	r2, r7, #748	@ 0x2ec
 8000e2c:	f507 713b 	add.w	r1, r7, #748	@ 0x2ec
 8000e30:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 8000e34:	2304      	movs	r3, #4
 8000e36:	f000 fa3b 	bl	80012b0 <add_nonce>
    for (size_t i = 0; i < block_size; i++){
 8000e3a:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8000e3e:	3301      	adds	r3, #1
 8000e40:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8000e44:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8000e48:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f4ff af73 	bcc.w	8000d38 <PMAC+0x240>
 8000e52:	46b5      	mov	sp, r6
        two_Rounds_aes128_encrypt_ffs(c_N_0,  c_N_1, N_0_t,  N_0_t, two_AES_keys_ffs);
        xor_nonce( checksum, c_N_0, 16);
	    aes128_encrypt_ffs(checksum, checksum, checksum, checksum, rkeys_ffs);
        xor_nonce( tag, checksum, 16);*/

}
 8000e54:	bf00      	nop
 8000e56:	f507 776b 	add.w	r7, r7, #940	@ 0x3ac
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e60:	08007f40 	.word	0x08007f40
 8000e64:	08007f60 	.word	0x08007f60
 8000e68:	08007f70 	.word	0x08007f70
 8000e6c:	08007f80 	.word	0x08007f80

08000e70 <PMAC_1>:


void PMAC_1( unsigned char* nonce, unsigned char* asociated_data, unsigned int asociated_data_size,unsigned char* key, unsigned char* tag){
 8000e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e74:	f5ad 7d71 	sub.w	sp, sp, #964	@ 0x3c4
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	f507 766e 	add.w	r6, r7, #952	@ 0x3b8
 8000e7e:	f5a6 7669 	sub.w	r6, r6, #932	@ 0x3a4
 8000e82:	6030      	str	r0, [r6, #0]
 8000e84:	f507 706e 	add.w	r0, r7, #952	@ 0x3b8
 8000e88:	f5a0 706a 	sub.w	r0, r0, #936	@ 0x3a8
 8000e8c:	6001      	str	r1, [r0, #0]
 8000e8e:	f507 716e 	add.w	r1, r7, #952	@ 0x3b8
 8000e92:	f5a1 716b 	sub.w	r1, r1, #940	@ 0x3ac
 8000e96:	600a      	str	r2, [r1, #0]
 8000e98:	f507 726e 	add.w	r2, r7, #952	@ 0x3b8
 8000e9c:	f5a2 726c 	sub.w	r2, r2, #944	@ 0x3b0
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	466b      	mov	r3, sp
 8000ea4:	461e      	mov	r6, r3




    unsigned char ptext0[asociated_data_size];
 8000ea6:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8000eaa:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8000eae:	6819      	ldr	r1, [r3, #0]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8000eb8:	2300      	movs	r3, #0
 8000eba:	6039      	str	r1, [r7, #0]
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	f04f 0300 	mov.w	r3, #0
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	00c3      	lsls	r3, r0, #3
 8000eca:	6838      	ldr	r0, [r7, #0]
 8000ecc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ed0:	6838      	ldr	r0, [r7, #0]
 8000ed2:	00c2      	lsls	r2, r0, #3
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	468a      	mov	sl, r1
 8000ed8:	469b      	mov	fp, r3
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000ee6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000eea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000eee:	1dcb      	adds	r3, r1, #7
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	ebad 0d03 	sub.w	sp, sp, r3
 8000ef8:	ab02      	add	r3, sp, #8
 8000efa:	3300      	adds	r3, #0
 8000efc:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
    unsigned char ptext1[asociated_data_size];
 8000f00:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8000f04:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8000f08:	6819      	ldr	r1, [r3, #0]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8000f12:	2300      	movs	r3, #0
 8000f14:	4688      	mov	r8, r1
 8000f16:	4699      	mov	r9, r3
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	460c      	mov	r4, r1
 8000f30:	461d      	mov	r5, r3
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	00eb      	lsls	r3, r5, #3
 8000f3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f40:	00e2      	lsls	r2, r4, #3
 8000f42:	1dcb      	adds	r3, r1, #7
 8000f44:	08db      	lsrs	r3, r3, #3
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	ebad 0d03 	sub.w	sp, sp, r3
 8000f4c:	ab02      	add	r3, sp, #8
 8000f4e:	3300      	adds	r3, #0
 8000f50:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0


    for (size_t i = 0; i < asociated_data_size; i++){
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8000f5a:	e012      	b.n	8000f82 <PMAC_1+0x112>
        ptext0[i]=0;
 8000f5c:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 8000f60:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8000f64:	4413      	add	r3, r2
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
        ptext1[i]=0;
 8000f6a:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8000f6e:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8000f72:	4413      	add	r3, r2
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < asociated_data_size; i++){
 8000f78:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8000f82:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8000f86:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8000f8a:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d3e3      	bcc.n	8000f5c <PMAC_1+0xec>

    }

    unsigned char key_2AES[key_size] = {0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3};
 8000f94:	4bc2      	ldr	r3, [pc, #776]	@ (80012a0 <PMAC_1+0x430>)
 8000f96:	f507 745f 	add.w	r4, r7, #892	@ 0x37c
 8000f9a:	461d      	mov	r5, r3
 8000f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	7023      	strb	r3, [r4, #0]
 8000fa4:	f207 338d 	addw	r3, r7, #909	@ 0x38d
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	f8c3 200b 	str.w	r2, [r3, #11]

    unsigned char N_0[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000fb4:	4bbb      	ldr	r3, [pc, #748]	@ (80012a4 <PMAC_1+0x434>)
 8000fb6:	f507 745b 	add.w	r4, r7, #876	@ 0x36c
 8000fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char N_1[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000fc0:	4bb8      	ldr	r3, [pc, #736]	@ (80012a4 <PMAC_1+0x434>)
 8000fc2:	f507 7457 	add.w	r4, r7, #860	@ 0x35c
 8000fc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned char N_0_t[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000fcc:	4bb5      	ldr	r3, [pc, #724]	@ (80012a4 <PMAC_1+0x434>)
 8000fce:	f507 7453 	add.w	r4, r7, #844	@ 0x34c
 8000fd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char N_1_t[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000fd8:	4bb2      	ldr	r3, [pc, #712]	@ (80012a4 <PMAC_1+0x434>)
 8000fda:	f507 744f 	add.w	r4, r7, #828	@ 0x33c
 8000fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned char c_N_0[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000fe4:	4baf      	ldr	r3, [pc, #700]	@ (80012a4 <PMAC_1+0x434>)
 8000fe6:	f507 744b 	add.w	r4, r7, #812	@ 0x32c
 8000fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char c_N_1[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
 8000ff0:	4bac      	ldr	r3, [pc, #688]	@ (80012a4 <PMAC_1+0x434>)
 8000ff2:	f507 7447 	add.w	r4, r7, #796	@ 0x31c
 8000ff6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char checksum[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8000ffc:	4ba9      	ldr	r3, [pc, #676]	@ (80012a4 <PMAC_1+0x434>)
 8000ffe:	f507 7443 	add.w	r4, r7, #780	@ 0x30c
 8001002:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned int add_nonce_0[4] = {0,0,0,0};
 8001008:	f507 733f 	add.w	r3, r7, #764	@ 0x2fc
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
    unsigned int add_nonce_1[4] = {1,1,1,1};
 8001016:	4ba4      	ldr	r3, [pc, #656]	@ (80012a8 <PMAC_1+0x438>)
 8001018:	f507 743b 	add.w	r4, r7, #748	@ 0x2ec
 800101c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800101e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    unsigned int add_nonce_2[4] = {2,2,2,2};
 8001022:	4ba2      	ldr	r3, [pc, #648]	@ (80012ac <PMAC_1+0x43c>)
 8001024:	f507 7437 	add.w	r4, r7, #732	@ 0x2dc
 8001028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    divide_plaintext(asociated_data, ptext0,  ptext1, asociated_data_size);
 800102e:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001032:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8001036:	f507 726e 	add.w	r2, r7, #952	@ 0x3b8
 800103a:	f5a2 706a 	sub.w	r0, r2, #936	@ 0x3a8
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8001044:	f8d7 13a8 	ldr.w	r1, [r7, #936]	@ 0x3a8
 8001048:	6800      	ldr	r0, [r0, #0]
 800104a:	f000 f97e 	bl	800134a <divide_plaintext>

    //key schedule
	uint32_t rkeys_ffs[88];
    uint32_t two_AES_keys_ffs[88];

	aes128_keyschedule_ffs(rkeys_ffs, key, key);
 800104e:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001052:	f5a3 726c 	sub.w	r2, r3, #944	@ 0x3b0
 8001056:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 800105a:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 800105e:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 8001062:	6812      	ldr	r2, [r2, #0]
 8001064:	6819      	ldr	r1, [r3, #0]
 8001066:	f002 f949 	bl	80032fc <aes128_keyschedule_ffs>
	aes128_keyschedule_ffs(two_AES_keys_ffs, key_2AES, key_2AES);
 800106a:	f507 725f 	add.w	r2, r7, #892	@ 0x37c
 800106e:	f507 715f 	add.w	r1, r7, #892	@ 0x37c
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4618      	mov	r0, r3
 8001078:	f002 f940 	bl	80032fc <aes128_keyschedule_ffs>
    //aes128_2rounds_keyschedule_ffs(two_AES_keys_ffs, key_2AES, key_2AES);

	//generate the N from nonce using 10 aes rounds
    aes128_encrypt_ffs(N_0, N_1, nonce, nonce, rkeys_ffs);
 800107c:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001080:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8001084:	f507 726e 	add.w	r2, r7, #952	@ 0x3b8
 8001088:	f5a2 7269 	sub.w	r2, r2, #932	@ 0x3a4
 800108c:	f507 7457 	add.w	r4, r7, #860	@ 0x35c
 8001090:	f507 705b 	add.w	r0, r7, #876	@ 0x36c
 8001094:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001098:	9100      	str	r1, [sp, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	4621      	mov	r1, r4
 80010a0:	f001 fe63 	bl	8002d6a <aes128_encrypt_ffs>

    int block_size = asociated_data_size/32;
 80010a4:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80010a8:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	095b      	lsrs	r3, r3, #5
 80010b0:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c

    for (size_t i = 0; i < block_size; i++){
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 80010ba:	e0e3      	b.n	8001284 <PMAC_1+0x414>

        add_nonce(add_nonce_0, (unsigned int *)N_0,(unsigned int *)N_0_t, 4);
 80010bc:	f507 7253 	add.w	r2, r7, #844	@ 0x34c
 80010c0:	f507 715b 	add.w	r1, r7, #876	@ 0x36c
 80010c4:	f507 703f 	add.w	r0, r7, #764	@ 0x2fc
 80010c8:	2304      	movs	r3, #4
 80010ca:	f000 f8f1 	bl	80012b0 <add_nonce>
        add_nonce(add_nonce_1, (unsigned int *)N_1,(unsigned int *)N_1_t, 4);
 80010ce:	f507 724f 	add.w	r2, r7, #828	@ 0x33c
 80010d2:	f507 7157 	add.w	r1, r7, #860	@ 0x35c
 80010d6:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 80010da:	2304      	movs	r3, #4
 80010dc:	f000 f8e8 	bl	80012b0 <add_nonce>

        two_Rounds_aes128_encrypt_ffs(c_N_0,  c_N_1, N_0_t,  N_1_t, two_AES_keys_ffs);
 80010e0:	f507 744f 	add.w	r4, r7, #828	@ 0x33c
 80010e4:	f507 7253 	add.w	r2, r7, #844	@ 0x34c
 80010e8:	f507 7147 	add.w	r1, r7, #796	@ 0x31c
 80010ec:	f507 704b 	add.w	r0, r7, #812	@ 0x32c
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	4623      	mov	r3, r4
 80010f8:	f001 ff14 	bl	8002f24 <two_Rounds_aes128_encrypt_ffs>

        if (i != block_size-1 ) {
 80010fc:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001100:	3b01      	subs	r3, #1
 8001102:	461a      	mov	r2, r3
 8001104:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001108:	4293      	cmp	r3, r2
 800110a:	d04f      	beq.n	80011ac <PMAC_1+0x33c>

			xor_nonce( ptext0 + (i*16), c_N_0, 16);
 800110c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 8001116:	4413      	add	r3, r2
 8001118:	f507 714b 	add.w	r1, r7, #812	@ 0x32c
 800111c:	2210      	movs	r2, #16
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f8ee 	bl	8001300 <xor_nonce>
			xor_nonce( ptext1 + (i*16), c_N_1, 16);
 8001124:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 800112e:	4413      	add	r3, r2
 8001130:	f507 7147 	add.w	r1, r7, #796	@ 0x31c
 8001134:	2210      	movs	r2, #16
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f8e2 	bl	8001300 <xor_nonce>
			aes128_encrypt_ffs(ptext0+ (i*16), ptext1+ (i*16), ptext0+ ((i)*16), ptext1 + (i*16), rkeys_ffs);
 800113c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 8001146:	18d0      	adds	r0, r2, r3
 8001148:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8001152:	18d1      	adds	r1, r2, r3
 8001154:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001158:	011b      	lsls	r3, r3, #4
 800115a:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 800115e:	18d4      	adds	r4, r2, r3
 8001160:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 800116a:	441a      	add	r2, r3
 800116c:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	4613      	mov	r3, r2
 8001174:	4622      	mov	r2, r4
 8001176:	f001 fdf8 	bl	8002d6a <aes128_encrypt_ffs>
			xor_nonce( checksum, ptext0 + (i*16), 16);
 800117a:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 8001184:	18d1      	adds	r1, r2, r3
 8001186:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 800118a:	2210      	movs	r2, #16
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f8b7 	bl	8001300 <xor_nonce>
			xor_nonce( checksum, ptext1 + (i*16), 16);
 8001192:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 800119c:	18d1      	adds	r1, r2, r3
 800119e:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 80011a2:	2210      	movs	r2, #16
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 f8ab 	bl	8001300 <xor_nonce>
 80011aa:	e054      	b.n	8001256 <PMAC_1+0x3e6>

        }
        else{
        	xor_nonce( ptext0 + (i*16), c_N_0, 16);
 80011ac:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 80011b6:	4413      	add	r3, r2
 80011b8:	f507 714b 	add.w	r1, r7, #812	@ 0x32c
 80011bc:	2210      	movs	r2, #16
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f89e 	bl	8001300 <xor_nonce>
        	aes128_encrypt_ffs(ptext0+ (i*16), ptext0+ (i*16), ptext0+ ((i)*16), ptext0 + (i*16), rkeys_ffs);
 80011c4:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 80011ce:	18d0      	adds	r0, r2, r3
 80011d0:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 80011da:	18d1      	adds	r1, r2, r3
 80011dc:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 80011e6:	18d4      	adds	r4, r2, r3
 80011e8:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 80011f2:	441a      	add	r2, r3
 80011f4:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	4613      	mov	r3, r2
 80011fc:	4622      	mov	r2, r4
 80011fe:	f001 fdb4 	bl	8002d6a <aes128_encrypt_ffs>
        	xor_nonce( checksum, ptext0 + (i*16), 16);
 8001202:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 800120c:	18d1      	adds	r1, r2, r3
 800120e:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 8001212:	2210      	movs	r2, #16
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f873 	bl	8001300 <xor_nonce>

        	xor_nonce( checksum, ptext1 + (i*16), 16);
 800121a:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8001224:	18d1      	adds	r1, r2, r3
 8001226:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 800122a:	2210      	movs	r2, #16
 800122c:	4618      	mov	r0, r3
 800122e:	f000 f867 	bl	8001300 <xor_nonce>
        	aes128_encrypt_ffs(tag,ptext1 + (i*16),checksum,checksum, rkeys_ffs);
 8001232:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 800123c:	18d1      	adds	r1, r2, r3
 800123e:	f507 7043 	add.w	r0, r7, #780	@ 0x30c
 8001242:	f507 7243 	add.w	r2, r7, #780	@ 0x30c
 8001246:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	4603      	mov	r3, r0
 800124e:	f8d7 03e0 	ldr.w	r0, [r7, #992]	@ 0x3e0
 8001252:	f001 fd8a 	bl	8002d6a <aes128_encrypt_ffs>
        }

        add_nonce(add_nonce_2, add_nonce_0,add_nonce_0, 4);
 8001256:	f507 723f 	add.w	r2, r7, #764	@ 0x2fc
 800125a:	f507 713f 	add.w	r1, r7, #764	@ 0x2fc
 800125e:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 8001262:	2304      	movs	r3, #4
 8001264:	f000 f824 	bl	80012b0 <add_nonce>
        add_nonce(add_nonce_2, add_nonce_1,add_nonce_1, 4);
 8001268:	f507 723b 	add.w	r2, r7, #748	@ 0x2ec
 800126c:	f507 713b 	add.w	r1, r7, #748	@ 0x2ec
 8001270:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 8001274:	2304      	movs	r3, #4
 8001276:	f000 f81b 	bl	80012b0 <add_nonce>
    for (size_t i = 0; i < block_size; i++){
 800127a:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 800127e:	3301      	adds	r3, #1
 8001280:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 8001284:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001288:	f8d7 23b0 	ldr.w	r2, [r7, #944]	@ 0x3b0
 800128c:	429a      	cmp	r2, r3
 800128e:	f4ff af15 	bcc.w	80010bc <PMAC_1+0x24c>
 8001292:	46b5      	mov	sp, r6

    }

}
 8001294:	bf00      	nop
 8001296:	f507 776f 	add.w	r7, r7, #956	@ 0x3bc
 800129a:	46bd      	mov	sp, r7
 800129c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012a0:	08007f40 	.word	0x08007f40
 80012a4:	08007f60 	.word	0x08007f60
 80012a8:	08007f70 	.word	0x08007f70
 80012ac:	08007f80 	.word	0x08007f80

080012b0 <add_nonce>:


void add_nonce(unsigned int * add_nonce, unsigned int * nonce, unsigned int * nonce_result, unsigned int size){
 80012b0:	b480      	push	{r7}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < size; i++){
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	e012      	b.n	80012ea <add_nonce+0x3a>
        nonce_result[i]=nonce[i]+ add_nonce[i];
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	4413      	add	r3, r2
 80012cc:	6819      	ldr	r1, [r3, #0]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	4403      	add	r3, r0
 80012e0:	440a      	add	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < size; i++){
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3301      	adds	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d3e8      	bcc.n	80012c4 <add_nonce+0x14>
    }
    
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <xor_nonce>:

void xor_nonce(unsigned char * plaintext, unsigned char * nonce, unsigned int size){
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < size; i++){
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e010      	b.n	8001334 <xor_nonce+0x34>
        plaintext[i]=nonce[i]^ plaintext[i];
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	4413      	add	r3, r2
 8001318:	7819      	ldrb	r1, [r3, #0]
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	4413      	add	r3, r2
 8001320:	781a      	ldrb	r2, [r3, #0]
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	4403      	add	r3, r0
 8001328:	404a      	eors	r2, r1
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < size; i++){
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	d3ea      	bcc.n	8001312 <xor_nonce+0x12>
    }
    
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	371c      	adds	r7, #28
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <divide_plaintext>:
void divide_plaintext(unsigned char* plaintext, unsigned char* ptext0,  unsigned char* ptext1,unsigned int plaintext_size){
 800134a:	b480      	push	{r7}
 800134c:	b089      	sub	sp, #36	@ 0x24
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	603b      	str	r3, [r7, #0]
    int condicion = 1;
 8001358:	2301      	movs	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
    size_t j=0;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
    size_t k=0;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	e02c      	b.n	80013c4 <divide_plaintext+0x7a>
        
        if (i%16==0 && i!=0)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	2b00      	cmp	r3, #0
 8001372:	d106      	bne.n	8001382 <divide_plaintext+0x38>
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <divide_plaintext+0x38>
            condicion=condicion^1;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f083 0301 	eor.w	r3, r3, #1
 8001380:	61fb      	str	r3, [r7, #28]

        if (condicion)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d008      	beq.n	800139a <divide_plaintext+0x50>
            ptext0[j] = plaintext[i];
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	441a      	add	r2, r3
 800138e:	68b9      	ldr	r1, [r7, #8]
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	440b      	add	r3, r1
 8001394:	7812      	ldrb	r2, [r2, #0]
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	e007      	b.n	80013aa <divide_plaintext+0x60>
        else
            ptext1[k] = plaintext[i];
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	441a      	add	r2, r3
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	440b      	add	r3, r1
 80013a6:	7812      	ldrb	r2, [r2, #0]
 80013a8:	701a      	strb	r2, [r3, #0]
        
        if (condicion)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <divide_plaintext+0x6e>
            j++;
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	3301      	adds	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	e002      	b.n	80013be <divide_plaintext+0x74>
        else
            k++;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	3301      	adds	r3, #1
 80013bc:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	3301      	adds	r3, #1
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d3ce      	bcc.n	800136a <divide_plaintext+0x20>
    }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3724      	adds	r7, #36	@ 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <union_ciphertext>:


void union_ciphertext(unsigned char* ciphertext, unsigned char* ctext0,  unsigned char* ctext1,unsigned int plaintext_size){
 80013da:	b480      	push	{r7}
 80013dc:	b089      	sub	sp, #36	@ 0x24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	603b      	str	r3, [r7, #0]

    // bool condicion = 1;
    int condicion = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	61fb      	str	r3, [r7, #28]
    size_t j=0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
    size_t k=0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	e02c      	b.n	8001454 <union_ciphertext+0x7a>
        if (i%16==0 && i!=0)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	f003 030f 	and.w	r3, r3, #15
 8001400:	2b00      	cmp	r3, #0
 8001402:	d106      	bne.n	8001412 <union_ciphertext+0x38>
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <union_ciphertext+0x38>
            condicion=condicion^1;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	f083 0301 	eor.w	r3, r3, #1
 8001410:	61fb      	str	r3, [r7, #28]
        
        if (condicion)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <union_ciphertext+0x50>
            ciphertext[i] = ctext0[j];
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	441a      	add	r2, r3
 800141e:	68f9      	ldr	r1, [r7, #12]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	440b      	add	r3, r1
 8001424:	7812      	ldrb	r2, [r2, #0]
 8001426:	701a      	strb	r2, [r3, #0]
 8001428:	e007      	b.n	800143a <union_ciphertext+0x60>
        else
            ciphertext[i] = ctext1[k];
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	441a      	add	r2, r3
 8001430:	68f9      	ldr	r1, [r7, #12]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	440b      	add	r3, r1
 8001436:	7812      	ldrb	r2, [r2, #0]
 8001438:	701a      	strb	r2, [r3, #0]
        
        if (condicion)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <union_ciphertext+0x6e>
            j++;
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	3301      	adds	r3, #1
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	e002      	b.n	800144e <union_ciphertext+0x74>
        else
            k++;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3301      	adds	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	3301      	adds	r3, #1
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d3ce      	bcc.n	80013fa <union_ciphertext+0x20>
        

        
        
    }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3724      	adds	r7, #36	@ 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <divide_key>:


void divide_key(unsigned char* key, unsigned char * key0, unsigned char * key1){
 800146a:	b480      	push	{r7}
 800146c:	b087      	sub	sp, #28
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]

    for (size_t i = 0; i < key_size; i++){
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	e012      	b.n	80014a2 <divide_key+0x38>
        key0[i] = key[i];
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	441a      	add	r2, r3
 8001482:	68b9      	ldr	r1, [r7, #8]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	440b      	add	r3, r1
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	701a      	strb	r2, [r3, #0]
        key1[i] = key[i];
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	441a      	add	r2, r3
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	440b      	add	r3, r1
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < key_size; i++){
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3301      	adds	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	2b1f      	cmp	r3, #31
 80014a6:	d9e9      	bls.n	800147c <divide_key+0x12>
    }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	371c      	adds	r7, #28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <packing>:

}


void packing(uint32_t* out, const unsigned char* in0,
		const unsigned char* in1) {
 80014b6:	b480      	push	{r7}
 80014b8:	b087      	sub	sp, #28
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	out[0] = LE_LOAD_32(in0);
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3303      	adds	r3, #3
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	061a      	lsls	r2, r3, #24
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	3302      	adds	r3, #2
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	041b      	lsls	r3, r3, #16
 80014d2:	431a      	orrs	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	3301      	adds	r3, #1
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	4313      	orrs	r3, r2
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	7812      	ldrb	r2, [r2, #0]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	601a      	str	r2, [r3, #0]
	out[1] = LE_LOAD_32(in1);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3303      	adds	r3, #3
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	061a      	lsls	r2, r3, #24
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3302      	adds	r3, #2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	041b      	lsls	r3, r3, #16
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3301      	adds	r3, #1
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3304      	adds	r3, #4
 800150e:	430a      	orrs	r2, r1
 8001510:	601a      	str	r2, [r3, #0]
	out[2] = LE_LOAD_32(in0 + 4);
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	3307      	adds	r3, #7
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	061a      	lsls	r2, r3, #24
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	3306      	adds	r3, #6
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	041b      	lsls	r3, r3, #16
 8001522:	431a      	orrs	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	3305      	adds	r3, #5
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	431a      	orrs	r2, r3
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3304      	adds	r3, #4
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	3308      	adds	r3, #8
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
	out[3] = LE_LOAD_32(in1 + 4);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3307      	adds	r3, #7
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	061a      	lsls	r2, r3, #24
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3306      	adds	r3, #6
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	041b      	lsls	r3, r3, #16
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3305      	adds	r3, #5
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3304      	adds	r3, #4
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	330c      	adds	r3, #12
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]
	out[4] = LE_LOAD_32(in0 + 8);
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	330b      	adds	r3, #11
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	061a      	lsls	r2, r3, #24
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	330a      	adds	r3, #10
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	041b      	lsls	r3, r3, #16
 800157a:	431a      	orrs	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	3309      	adds	r3, #9
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	431a      	orrs	r2, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	3308      	adds	r3, #8
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3310      	adds	r3, #16
 8001592:	430a      	orrs	r2, r1
 8001594:	601a      	str	r2, [r3, #0]
	out[5] = LE_LOAD_32(in1 + 8);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	330b      	adds	r3, #11
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	061a      	lsls	r2, r3, #24
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	330a      	adds	r3, #10
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	041b      	lsls	r3, r3, #16
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3309      	adds	r3, #9
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3308      	adds	r3, #8
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3314      	adds	r3, #20
 80015be:	430a      	orrs	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]
	out[6] = LE_LOAD_32(in0 + 12);
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	330f      	adds	r3, #15
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	061a      	lsls	r2, r3, #24
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	330e      	adds	r3, #14
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	041b      	lsls	r3, r3, #16
 80015d2:	431a      	orrs	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	330d      	adds	r3, #13
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	431a      	orrs	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	330c      	adds	r3, #12
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3318      	adds	r3, #24
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]
	out[7] = LE_LOAD_32(in1 + 12);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	330f      	adds	r3, #15
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	061a      	lsls	r2, r3, #24
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	330e      	adds	r3, #14
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	330d      	adds	r3, #13
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	330c      	adds	r3, #12
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	331c      	adds	r3, #28
 8001616:	430a      	orrs	r2, r1
 8001618:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[1], out[0], 0x55555555, 1);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3304      	adds	r3, #4
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	4053      	eors	r3, r2
 8001628:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	405a      	eors	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3304      	adds	r3, #4
 800163e:	6819      	ldr	r1, [r3, #0]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	005a      	lsls	r2, r3, #1
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3304      	adds	r3, #4
 8001648:	404a      	eors	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[3], out[2], 0x55555555, 1);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	3308      	adds	r3, #8
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	330c      	adds	r3, #12
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	085b      	lsrs	r3, r3, #1
 800165a:	4053      	eors	r3, r2
 800165c:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3308      	adds	r3, #8
 8001666:	6819      	ldr	r1, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3308      	adds	r3, #8
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	404a      	eors	r2, r1
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	330c      	adds	r3, #12
 8001676:	6819      	ldr	r1, [r3, #0]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005a      	lsls	r2, r3, #1
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	330c      	adds	r3, #12
 8001680:	404a      	eors	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[5], out[4], 0x55555555, 1);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	3310      	adds	r3, #16
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3314      	adds	r3, #20
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	085b      	lsrs	r3, r3, #1
 8001692:	4053      	eors	r3, r2
 8001694:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3310      	adds	r3, #16
 800169e:	6819      	ldr	r1, [r3, #0]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3310      	adds	r3, #16
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	404a      	eors	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3314      	adds	r3, #20
 80016ae:	6819      	ldr	r1, [r3, #0]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	005a      	lsls	r2, r3, #1
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3314      	adds	r3, #20
 80016b8:	404a      	eors	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[6], 0x55555555, 1);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3318      	adds	r3, #24
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	331c      	adds	r3, #28
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	085b      	lsrs	r3, r3, #1
 80016ca:	4053      	eors	r3, r2
 80016cc:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3318      	adds	r3, #24
 80016d6:	6819      	ldr	r1, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3318      	adds	r3, #24
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	404a      	eors	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	331c      	adds	r3, #28
 80016e6:	6819      	ldr	r1, [r3, #0]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005a      	lsls	r2, r3, #1
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	331c      	adds	r3, #28
 80016f0:	404a      	eors	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[2], out[0], 0x33333333, 2);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3308      	adds	r3, #8
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	4053      	eors	r3, r2
 8001702:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	405a      	eors	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	3308      	adds	r3, #8
 8001718:	6819      	ldr	r1, [r3, #0]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	009a      	lsls	r2, r3, #2
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3308      	adds	r3, #8
 8001722:	404a      	eors	r2, r1
 8001724:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[3], out[1], 0x33333333, 2);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3304      	adds	r3, #4
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	330c      	adds	r3, #12
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	4053      	eors	r3, r2
 8001736:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3304      	adds	r3, #4
 8001740:	6819      	ldr	r1, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3304      	adds	r3, #4
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	404a      	eors	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	330c      	adds	r3, #12
 8001750:	6819      	ldr	r1, [r3, #0]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	009a      	lsls	r2, r3, #2
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	330c      	adds	r3, #12
 800175a:	404a      	eors	r2, r1
 800175c:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[6], out[4], 0x33333333, 2);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	3310      	adds	r3, #16
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3318      	adds	r3, #24
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	4053      	eors	r3, r2
 800176e:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3310      	adds	r3, #16
 8001778:	6819      	ldr	r1, [r3, #0]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3310      	adds	r3, #16
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	404a      	eors	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3318      	adds	r3, #24
 8001788:	6819      	ldr	r1, [r3, #0]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	009a      	lsls	r2, r3, #2
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3318      	adds	r3, #24
 8001792:	404a      	eors	r2, r1
 8001794:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[5], 0x33333333, 2);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3314      	adds	r3, #20
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	331c      	adds	r3, #28
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	4053      	eors	r3, r2
 80017a6:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3314      	adds	r3, #20
 80017b0:	6819      	ldr	r1, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	3314      	adds	r3, #20
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	404a      	eors	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	331c      	adds	r3, #28
 80017c0:	6819      	ldr	r1, [r3, #0]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	009a      	lsls	r2, r3, #2
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	331c      	adds	r3, #28
 80017ca:	404a      	eors	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[4], out[0], 0x0f0f0f0f, 4);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3310      	adds	r3, #16
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	4053      	eors	r3, r2
 80017dc:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	405a      	eors	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	3310      	adds	r3, #16
 80017f2:	6819      	ldr	r1, [r3, #0]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	011a      	lsls	r2, r3, #4
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	3310      	adds	r3, #16
 80017fc:	404a      	eors	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[5], out[1], 0x0f0f0f0f, 4);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	3304      	adds	r3, #4
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3314      	adds	r3, #20
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	4053      	eors	r3, r2
 8001810:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3304      	adds	r3, #4
 800181a:	6819      	ldr	r1, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3304      	adds	r3, #4
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	404a      	eors	r2, r1
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3314      	adds	r3, #20
 800182a:	6819      	ldr	r1, [r3, #0]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	011a      	lsls	r2, r3, #4
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3314      	adds	r3, #20
 8001834:	404a      	eors	r2, r1
 8001836:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[6], out[2], 0x0f0f0f0f, 4);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3308      	adds	r3, #8
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3318      	adds	r3, #24
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	4053      	eors	r3, r2
 8001848:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3308      	adds	r3, #8
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3308      	adds	r3, #8
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	404a      	eors	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3318      	adds	r3, #24
 8001862:	6819      	ldr	r1, [r3, #0]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	011a      	lsls	r2, r3, #4
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3318      	adds	r3, #24
 800186c:	404a      	eors	r2, r1
 800186e:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[3], 0x0f0f0f0f, 4);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	330c      	adds	r3, #12
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	331c      	adds	r3, #28
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	4053      	eors	r3, r2
 8001880:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	330c      	adds	r3, #12
 800188a:	6819      	ldr	r1, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	330c      	adds	r3, #12
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	404a      	eors	r2, r1
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	331c      	adds	r3, #28
 800189a:	6819      	ldr	r1, [r3, #0]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	011a      	lsls	r2, r3, #4
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	331c      	adds	r3, #28
 80018a4:	404a      	eors	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]
}
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <unpacking>:

/******************************************************************************
* Unpacks the 256-bit internal state in two 128-bit blocs out0, out1.
******************************************************************************/
static void unpacking(unsigned char* out0, unsigned char* out1, uint32_t* in) {
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	SWAPMOVE(in[4], in[0], 0x0f0f0f0f, 4);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3310      	adds	r3, #16
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	4053      	eors	r3, r2
 80018ce:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	405a      	eors	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3310      	adds	r3, #16
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	011a      	lsls	r2, r3, #4
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3310      	adds	r3, #16
 80018ee:	404a      	eors	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[5], in[1], 0x0f0f0f0f, 4);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3304      	adds	r3, #4
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3314      	adds	r3, #20
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	4053      	eors	r3, r2
 8001902:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3304      	adds	r3, #4
 800190c:	6819      	ldr	r1, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3304      	adds	r3, #4
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	404a      	eors	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3314      	adds	r3, #20
 800191c:	6819      	ldr	r1, [r3, #0]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	011a      	lsls	r2, r3, #4
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3314      	adds	r3, #20
 8001926:	404a      	eors	r2, r1
 8001928:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[6], in[2], 0x0f0f0f0f, 4);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3308      	adds	r3, #8
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3318      	adds	r3, #24
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	4053      	eors	r3, r2
 800193a:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3308      	adds	r3, #8
 8001944:	6819      	ldr	r1, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3308      	adds	r3, #8
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	404a      	eors	r2, r1
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3318      	adds	r3, #24
 8001954:	6819      	ldr	r1, [r3, #0]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	011a      	lsls	r2, r3, #4
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3318      	adds	r3, #24
 800195e:	404a      	eors	r2, r1
 8001960:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[3], 0x0f0f0f0f, 4);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	330c      	adds	r3, #12
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	331c      	adds	r3, #28
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	4053      	eors	r3, r2
 8001972:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	330c      	adds	r3, #12
 800197c:	6819      	ldr	r1, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	330c      	adds	r3, #12
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	404a      	eors	r2, r1
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	331c      	adds	r3, #28
 800198c:	6819      	ldr	r1, [r3, #0]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	011a      	lsls	r2, r3, #4
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	331c      	adds	r3, #28
 8001996:	404a      	eors	r2, r1
 8001998:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[2], in[0], 0x33333333, 2);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3308      	adds	r3, #8
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	4053      	eors	r3, r2
 80019a8:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	405a      	eors	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3308      	adds	r3, #8
 80019be:	6819      	ldr	r1, [r3, #0]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	009a      	lsls	r2, r3, #2
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3308      	adds	r3, #8
 80019c8:	404a      	eors	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[3], in[1], 0x33333333, 2);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3304      	adds	r3, #4
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	330c      	adds	r3, #12
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	4053      	eors	r3, r2
 80019dc:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3304      	adds	r3, #4
 80019e6:	6819      	ldr	r1, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3304      	adds	r3, #4
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	404a      	eors	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	330c      	adds	r3, #12
 80019f6:	6819      	ldr	r1, [r3, #0]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	009a      	lsls	r2, r3, #2
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	330c      	adds	r3, #12
 8001a00:	404a      	eors	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[6], in[4], 0x33333333, 2);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3310      	adds	r3, #16
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3318      	adds	r3, #24
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	089b      	lsrs	r3, r3, #2
 8001a12:	4053      	eors	r3, r2
 8001a14:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3310      	adds	r3, #16
 8001a1e:	6819      	ldr	r1, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3310      	adds	r3, #16
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	404a      	eors	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3318      	adds	r3, #24
 8001a2e:	6819      	ldr	r1, [r3, #0]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	009a      	lsls	r2, r3, #2
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3318      	adds	r3, #24
 8001a38:	404a      	eors	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[5], 0x33333333, 2);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3314      	adds	r3, #20
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	331c      	adds	r3, #28
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	4053      	eors	r3, r2
 8001a4c:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3314      	adds	r3, #20
 8001a56:	6819      	ldr	r1, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3314      	adds	r3, #20
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	404a      	eors	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	331c      	adds	r3, #28
 8001a66:	6819      	ldr	r1, [r3, #0]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	009a      	lsls	r2, r3, #2
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	331c      	adds	r3, #28
 8001a70:	404a      	eors	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[1], in[0], 0x55555555, 1);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	085b      	lsrs	r3, r3, #1
 8001a80:	4053      	eors	r3, r2
 8001a82:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	405a      	eors	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3304      	adds	r3, #4
 8001a98:	6819      	ldr	r1, [r3, #0]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005a      	lsls	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	404a      	eors	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[3], in[2], 0x55555555, 1);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3308      	adds	r3, #8
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	330c      	adds	r3, #12
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	085b      	lsrs	r3, r3, #1
 8001ab4:	4053      	eors	r3, r2
 8001ab6:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3308      	adds	r3, #8
 8001ac0:	6819      	ldr	r1, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3308      	adds	r3, #8
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	404a      	eors	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	330c      	adds	r3, #12
 8001ad0:	6819      	ldr	r1, [r3, #0]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	005a      	lsls	r2, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	330c      	adds	r3, #12
 8001ada:	404a      	eors	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[5], in[4], 0x55555555, 1);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3310      	adds	r3, #16
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3314      	adds	r3, #20
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	085b      	lsrs	r3, r3, #1
 8001aec:	4053      	eors	r3, r2
 8001aee:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3310      	adds	r3, #16
 8001af8:	6819      	ldr	r1, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3310      	adds	r3, #16
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	404a      	eors	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3314      	adds	r3, #20
 8001b08:	6819      	ldr	r1, [r3, #0]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	005a      	lsls	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3314      	adds	r3, #20
 8001b12:	404a      	eors	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[6], 0x55555555, 1);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3318      	adds	r3, #24
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	331c      	adds	r3, #28
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	4053      	eors	r3, r2
 8001b26:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3318      	adds	r3, #24
 8001b30:	6819      	ldr	r1, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3318      	adds	r3, #24
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	404a      	eors	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	331c      	adds	r3, #28
 8001b40:	6819      	ldr	r1, [r3, #0]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005a      	lsls	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	331c      	adds	r3, #28
 8001b4a:	404a      	eors	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]
	LE_STORE_32(out0, in[0]);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	0a1a      	lsrs	r2, r3, #8
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3301      	adds	r3, #1
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	0c1a      	lsrs	r2, r3, #16
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3302      	adds	r3, #2
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	0e1a      	lsrs	r2, r3, #24
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3303      	adds	r3, #3
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 4, in[2]);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3308      	adds	r3, #8
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3308      	adds	r3, #8
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	0a1a      	lsrs	r2, r3, #8
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3305      	adds	r3, #5
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	0c1a      	lsrs	r2, r3, #16
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3306      	adds	r3, #6
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3308      	adds	r3, #8
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0e1a      	lsrs	r2, r3, #24
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3307      	adds	r3, #7
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 8, in[4]);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3310      	adds	r3, #16
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3308      	adds	r3, #8
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3310      	adds	r3, #16
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0a1a      	lsrs	r2, r3, #8
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3309      	adds	r3, #9
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3310      	adds	r3, #16
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	0c1a      	lsrs	r2, r3, #16
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	330a      	adds	r3, #10
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3310      	adds	r3, #16
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0e1a      	lsrs	r2, r3, #24
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	330b      	adds	r3, #11
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 12, in[6]);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3318      	adds	r3, #24
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	330c      	adds	r3, #12
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3318      	adds	r3, #24
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	0a1a      	lsrs	r2, r3, #8
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	330d      	adds	r3, #13
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	701a      	strb	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3318      	adds	r3, #24
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	0c1a      	lsrs	r2, r3, #16
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	330e      	adds	r3, #14
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3318      	adds	r3, #24
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	0e1a      	lsrs	r2, r3, #24
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	330f      	adds	r3, #15
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1, in[1]);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0a1a      	lsrs	r2, r3, #8
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	3301      	adds	r3, #1
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	0c1a      	lsrs	r2, r3, #16
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	3302      	adds	r3, #2
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	701a      	strb	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	0e1a      	lsrs	r2, r3, #24
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	3303      	adds	r3, #3
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 4, in[3]);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	330c      	adds	r3, #12
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	3304      	adds	r3, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	330c      	adds	r3, #12
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	0a1a      	lsrs	r2, r3, #8
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	3305      	adds	r3, #5
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	330c      	adds	r3, #12
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0c1a      	lsrs	r2, r3, #16
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	3306      	adds	r3, #6
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	330c      	adds	r3, #12
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	0e1a      	lsrs	r2, r3, #24
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3307      	adds	r3, #7
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 8, in[5]);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3314      	adds	r3, #20
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	3308      	adds	r3, #8
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3314      	adds	r3, #20
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	0a1a      	lsrs	r2, r3, #8
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	3309      	adds	r3, #9
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	701a      	strb	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3314      	adds	r3, #20
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	0c1a      	lsrs	r2, r3, #16
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	330a      	adds	r3, #10
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3314      	adds	r3, #20
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	0e1a      	lsrs	r2, r3, #24
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	330b      	adds	r3, #11
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 12, in[7]);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	331c      	adds	r3, #28
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	330c      	adds	r3, #12
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	331c      	adds	r3, #28
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0a1a      	lsrs	r2, r3, #8
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	330d      	adds	r3, #13
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	331c      	adds	r3, #28
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0c1a      	lsrs	r2, r3, #16
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	330e      	adds	r3, #14
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	331c      	adds	r3, #28
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0e1a      	lsrs	r2, r3, #24
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	330f      	adds	r3, #15
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]
}
 8001d32:	bf00      	nop
 8001d34:	371c      	adds	r7, #28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <ark>:

/******************************************************************************
* XOR the round key to the internal state. The round keys are expected to be 
* pre-computed and to be packed in the fixsliced representation.
******************************************************************************/
static void ark(uint32_t* state, const uint32_t* rkey) {
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 8; i++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	e012      	b.n	8001d74 <ark+0x36>
		state[i] ^= rkey[i];
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	6819      	ldr	r1, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	4403      	add	r3, r0
 8001d6a:	404a      	eors	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3301      	adds	r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b07      	cmp	r3, #7
 8001d78:	dde9      	ble.n	8001d4e <ark+0x10>
}
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <sbox>:
/******************************************************************************
* Bitsliced implementation of the AES Sbox based on Boyar, Peralta and Calik.
* See http://www.cs.yale.edu/homes/peralta/CircuitStuff/SLP_AES_113.txt
* Note that the 4 NOT (^= 0xffffffff) are moved to the key schedule.
******************************************************************************/
void sbox(uint32_t* state) {
 8001d88:	b480      	push	{r7}
 8001d8a:	b095      	sub	sp, #84	@ 0x54
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4, t5,
		t6, t7, t8, t9, t10, t11, t12,
		t13, t14, t15, t16, t17;
	t0			= state[3] ^ state[5];
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	330c      	adds	r3, #12
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3314      	adds	r3, #20
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4053      	eors	r3, r2
 8001d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	t1			= state[0] ^ state[6];
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3318      	adds	r3, #24
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4053      	eors	r3, r2
 8001dac:	64bb      	str	r3, [r7, #72]	@ 0x48
	t2			= t1 ^ t0;
 8001dae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001db0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001db2:	4053      	eors	r3, r2
 8001db4:	647b      	str	r3, [r7, #68]	@ 0x44
	t3			= state[4] ^ t2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3310      	adds	r3, #16
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001dbe:	4053      	eors	r3, r2
 8001dc0:	643b      	str	r3, [r7, #64]	@ 0x40
	t4			= t3 ^ state[5];
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3314      	adds	r3, #20
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001dca:	4053      	eors	r3, r2
 8001dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	t5			= t2 & t4;
 8001dce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
	t6			= t4 ^ state[7];
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	331c      	adds	r3, #28
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001dde:	4053      	eors	r3, r2
 8001de0:	637b      	str	r3, [r7, #52]	@ 0x34
	t7			= t3 ^ state[1];
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3304      	adds	r3, #4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001dea:	4053      	eors	r3, r2
 8001dec:	633b      	str	r3, [r7, #48]	@ 0x30
	t8			= state[0] ^ state[3]; 
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	330c      	adds	r3, #12
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4053      	eors	r3, r2
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	t9			= t7 ^ t8;
 8001dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e00:	4053      	eors	r3, r2
 8001e02:	62bb      	str	r3, [r7, #40]	@ 0x28
	t10			= t8 & t9;
 8001e04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e08:	4013      	ands	r3, r2
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
	t11			= state[7] ^ t9; 
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	331c      	adds	r3, #28
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e14:	4053      	eors	r3, r2
 8001e16:	623b      	str	r3, [r7, #32]
	t12			= state[0] ^ state[5];
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3314      	adds	r3, #20
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4053      	eors	r3, r2
 8001e24:	61fb      	str	r3, [r7, #28]
	t13			= state[1] ^ state[2];
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3308      	adds	r3, #8
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4053      	eors	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
	t14			= t4 ^ t13;
 8001e36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	4053      	eors	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]
	t15			= t14 ^ t9;
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e42:	4053      	eors	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
	t16			= t0 & t15;
 8001e46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
	t17			= t16 ^ t10;
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	4053      	eors	r3, r2
 8001e54:	60bb      	str	r3, [r7, #8]
	state[1]	= t14 ^ t12; 
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	6979      	ldr	r1, [r7, #20]
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	404a      	eors	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]
	state[2]	= t12 & t14;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3308      	adds	r3, #8
 8001e66:	69f9      	ldr	r1, [r7, #28]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	400a      	ands	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3308      	adds	r3, #8
 8001e72:	6819      	ldr	r1, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3308      	adds	r3, #8
 8001e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e7a:	404a      	eors	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]
	state[4]	= t13 ^ t9;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3310      	adds	r3, #16
 8001e82:	69b9      	ldr	r1, [r7, #24]
 8001e84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e86:	404a      	eors	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]
	state[5]	= t1 ^ state[4];
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3310      	adds	r3, #16
 8001e8e:	6819      	ldr	r1, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3314      	adds	r3, #20
 8001e94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e96:	404a      	eors	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
	t3			= t1 & state[4];
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3310      	adds	r3, #16
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	643b      	str	r3, [r7, #64]	@ 0x40
	t10			= state[0] ^ state[4];
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3310      	adds	r3, #16
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4053      	eors	r3, r2
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
	t13 		^= state[7];
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	331c      	adds	r3, #28
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4053      	eors	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
	state[3] 	^= t13; 
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	330c      	adds	r3, #12
 8001ec4:	6819      	ldr	r1, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	330c      	adds	r3, #12
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	404a      	eors	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]
	t16			= state[3] & state[7];
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	330c      	adds	r3, #12
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	331c      	adds	r3, #28
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
	t16 		^= t5;
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ee4:	4053      	eors	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
	t16 		^= state[2];
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3308      	adds	r3, #8
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4053      	eors	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
	state[1] 	^= t16;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	6819      	ldr	r1, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3304      	adds	r3, #4
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	404a      	eors	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]
	state[0] 	^= t13;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	405a      	eors	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	601a      	str	r2, [r3, #0]
	t16			= state[0] & t11;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6a3a      	ldr	r2, [r7, #32]
 8001f16:	4013      	ands	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
	t16 		^= t3;
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f1e:	4053      	eors	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
	state[2] 	^= t16;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3308      	adds	r3, #8
 8001f26:	6819      	ldr	r1, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3308      	adds	r3, #8
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	404a      	eors	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3308      	adds	r3, #8
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3308      	adds	r3, #8
 8001f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f3e:	404a      	eors	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]
	state[6] 	^= t13;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3318      	adds	r3, #24
 8001f46:	6819      	ldr	r1, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3318      	adds	r3, #24
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	404a      	eors	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]
	t10			= state[6] & t13;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3318      	adds	r3, #24
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	627b      	str	r3, [r7, #36]	@ 0x24
	t3 			^= t10;
 8001f5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	4053      	eors	r3, r2
 8001f64:	643b      	str	r3, [r7, #64]	@ 0x40
	t3 			^= t17;
 8001f66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4053      	eors	r3, r2
 8001f6c:	643b      	str	r3, [r7, #64]	@ 0x40
	state[5] 	^= t3;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3314      	adds	r3, #20
 8001f72:	6819      	ldr	r1, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3314      	adds	r3, #20
 8001f78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f7a:	404a      	eors	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]
	t3			= state[6] ^ t12;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3318      	adds	r3, #24
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	4053      	eors	r3, r2
 8001f88:	643b      	str	r3, [r7, #64]	@ 0x40
	t10			= t3 & t6;
 8001f8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f8e:	4013      	ands	r3, r2
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
	t5 			^= t10;
 8001f92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	4053      	eors	r3, r2
 8001f98:	63bb      	str	r3, [r7, #56]	@ 0x38
	t5 			^= t7;
 8001f9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f9e:	4053      	eors	r3, r2
 8001fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
	t5 			^= t17;
 8001fa2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4053      	eors	r3, r2
 8001fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
	t7			= t5 & state[5];
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3314      	adds	r3, #20
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	633b      	str	r3, [r7, #48]	@ 0x30
	t10			= state[2] ^ t7;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3308      	adds	r3, #8
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fbe:	4053      	eors	r3, r2
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
	t7 			^= state[1];
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fca:	4053      	eors	r3, r2
 8001fcc:	633b      	str	r3, [r7, #48]	@ 0x30
	t5 			^= state[1];
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001fd6:	4053      	eors	r3, r2
 8001fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
	t16			= t5 & t10;
 8001fda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	4013      	ands	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
	state[1] 	^= t16;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3304      	adds	r3, #4
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	404a      	eors	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]
	t17			= state[1] & state[0];
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]
	t11			= state[1] & t11;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3304      	adds	r3, #4
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6a3a      	ldr	r2, [r7, #32]
 8002008:	4013      	ands	r3, r2
 800200a:	623b      	str	r3, [r7, #32]
	t16			= state[5] ^ state[2];
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3314      	adds	r3, #20
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3308      	adds	r3, #8
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4053      	eors	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
	t7 			&= t16;
 800201c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4013      	ands	r3, r2
 8002022:	633b      	str	r3, [r7, #48]	@ 0x30
	t7 			^= state[2];
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3308      	adds	r3, #8
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800202c:	4053      	eors	r3, r2
 800202e:	633b      	str	r3, [r7, #48]	@ 0x30
	t16			= t10 ^ t7;
 8002030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002034:	4053      	eors	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
	state[2] 	&= t16;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3308      	adds	r3, #8
 800203c:	6819      	ldr	r1, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3308      	adds	r3, #8
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	400a      	ands	r2, r1
 8002046:	601a      	str	r2, [r3, #0]
	t10 		^= state[2];
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3308      	adds	r3, #8
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002050:	4053      	eors	r3, r2
 8002052:	627b      	str	r3, [r7, #36]	@ 0x24
	t10 		&= state[1];
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3304      	adds	r3, #4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800205c:	4013      	ands	r3, r2
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24
	t5 			^= t10;
 8002060:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	4053      	eors	r3, r2
 8002066:	63bb      	str	r3, [r7, #56]	@ 0x38
	t10			= state[1] ^ t5;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3304      	adds	r3, #4
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002070:	4053      	eors	r3, r2
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
	state[4] 	&= t10; 
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3310      	adds	r3, #16
 8002078:	6819      	ldr	r1, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3310      	adds	r3, #16
 800207e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002080:	400a      	ands	r2, r1
 8002082:	601a      	str	r2, [r3, #0]
	t11 		^= state[4];
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3310      	adds	r3, #16
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6a3a      	ldr	r2, [r7, #32]
 800208c:	4053      	eors	r3, r2
 800208e:	623b      	str	r3, [r7, #32]
	t1 			&= t10;
 8002090:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	4013      	ands	r3, r2
 8002096:	64bb      	str	r3, [r7, #72]	@ 0x48
	state[6] 	&= t5; 
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3318      	adds	r3, #24
 800209c:	6819      	ldr	r1, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3318      	adds	r3, #24
 80020a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80020a4:	400a      	ands	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]
	t10			= t5 & t13;
 80020a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24
	state[4] 	^= t10;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3310      	adds	r3, #16
 80020b4:	6819      	ldr	r1, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3310      	adds	r3, #16
 80020ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020bc:	404a      	eors	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
	state[5] 	^= t7;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3314      	adds	r3, #20
 80020c4:	6819      	ldr	r1, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3314      	adds	r3, #20
 80020ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020cc:	404a      	eors	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]
	state[2] 	^= state[5];
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3308      	adds	r3, #8
 80020d4:	6819      	ldr	r1, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3314      	adds	r3, #20
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3308      	adds	r3, #8
 80020e0:	404a      	eors	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]
	state[5]	= t5 ^ state[2];
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3308      	adds	r3, #8
 80020e8:	6819      	ldr	r1, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3314      	adds	r3, #20
 80020ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80020f0:	404a      	eors	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
	t5			= state[5] & t14;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3314      	adds	r3, #20
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4013      	ands	r3, r2
 80020fe:	63bb      	str	r3, [r7, #56]	@ 0x38
	t10			= state[5] & t12;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3314      	adds	r3, #20
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	4013      	ands	r3, r2
 800210a:	627b      	str	r3, [r7, #36]	@ 0x24
	t12			= t7 ^ state[2];
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3308      	adds	r3, #8
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002114:	4053      	eors	r3, r2
 8002116:	61fb      	str	r3, [r7, #28]
	t4 			&= t12;
 8002118:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	4013      	ands	r3, r2
 800211e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	t2 			&= t12;
 8002120:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	4013      	ands	r3, r2
 8002126:	647b      	str	r3, [r7, #68]	@ 0x44
	t3 			&= state[2]; 
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3308      	adds	r3, #8
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002130:	4013      	ands	r3, r2
 8002132:	643b      	str	r3, [r7, #64]	@ 0x40
	state[2] 	&= t6;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3308      	adds	r3, #8
 8002138:	6819      	ldr	r1, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3308      	adds	r3, #8
 800213e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002140:	400a      	ands	r2, r1
 8002142:	601a      	str	r2, [r3, #0]
	state[2] 	^= t4;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3308      	adds	r3, #8
 8002148:	6819      	ldr	r1, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3308      	adds	r3, #8
 800214e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002150:	404a      	eors	r2, r1
 8002152:	601a      	str	r2, [r3, #0]
	t13			= state[4] ^ state[2];
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3310      	adds	r3, #16
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3308      	adds	r3, #8
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4053      	eors	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
	state[3] 	&= t7;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	330c      	adds	r3, #12
 8002168:	6819      	ldr	r1, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	330c      	adds	r3, #12
 800216e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002170:	400a      	ands	r2, r1
 8002172:	601a      	str	r2, [r3, #0]
	state[1] 	^= t7;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3304      	adds	r3, #4
 8002178:	6819      	ldr	r1, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3304      	adds	r3, #4
 800217e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002180:	404a      	eors	r2, r1
 8002182:	601a      	str	r2, [r3, #0]
	state[5] 	^= state[1];
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3314      	adds	r3, #20
 8002188:	6819      	ldr	r1, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3304      	adds	r3, #4
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3314      	adds	r3, #20
 8002194:	404a      	eors	r2, r1
 8002196:	601a      	str	r2, [r3, #0]
	t6			= state[5] & t15;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3314      	adds	r3, #20
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4013      	ands	r3, r2
 80021a2:	637b      	str	r3, [r7, #52]	@ 0x34
	state[4] 	^= t6; 
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3310      	adds	r3, #16
 80021a8:	6819      	ldr	r1, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3310      	adds	r3, #16
 80021ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021b0:	404a      	eors	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]
	t0 			&= state[5];
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3314      	adds	r3, #20
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021bc:	4013      	ands	r3, r2
 80021be:	64fb      	str	r3, [r7, #76]	@ 0x4c
	state[5]	= state[1] & t9; 
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3304      	adds	r3, #4
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3314      	adds	r3, #20
 80021ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021cc:	400a      	ands	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
	state[5] 	^= state[4];
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3314      	adds	r3, #20
 80021d4:	6819      	ldr	r1, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3310      	adds	r3, #16
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3314      	adds	r3, #20
 80021e0:	404a      	eors	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]
	state[1] 	&= t8;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3304      	adds	r3, #4
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3304      	adds	r3, #4
 80021ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021f0:	400a      	ands	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
	t6			= state[1] ^ state[5];
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3314      	adds	r3, #20
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4053      	eors	r3, r2
 8002202:	637b      	str	r3, [r7, #52]	@ 0x34
	t0 			^= state[1];
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800220c:	4053      	eors	r3, r2
 800220e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	state[1]	= t3 ^ t0;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3304      	adds	r3, #4
 8002214:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002216:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002218:	404a      	eors	r2, r1
 800221a:	601a      	str	r2, [r3, #0]
	t15			= state[1] ^ state[3];
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3304      	adds	r3, #4
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	330c      	adds	r3, #12
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4053      	eors	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
	t2 			^= state[1];
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3304      	adds	r3, #4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002234:	4053      	eors	r3, r2
 8002236:	647b      	str	r3, [r7, #68]	@ 0x44
	state[0]	= t2 ^ state[5];
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3314      	adds	r3, #20
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002240:	405a      	eors	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	601a      	str	r2, [r3, #0]
	state[3]	= t2 ^ t13;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	330c      	adds	r3, #12
 800224a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	404a      	eors	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
	state[1]	= state[3] ^ state[5];
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	330c      	adds	r3, #12
 8002256:	6819      	ldr	r1, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3314      	adds	r3, #20
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3304      	adds	r3, #4
 8002262:	404a      	eors	r2, r1
 8002264:	601a      	str	r2, [r3, #0]
	//state[1] 	^= 0xffffffff;
	t0 			^= state[6];
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3318      	adds	r3, #24
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800226e:	4053      	eors	r3, r2
 8002270:	64fb      	str	r3, [r7, #76]	@ 0x4c
	state[5]	= t7 & state[7];
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	331c      	adds	r3, #28
 8002276:	6819      	ldr	r1, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3314      	adds	r3, #20
 800227c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800227e:	400a      	ands	r2, r1
 8002280:	601a      	str	r2, [r3, #0]
	t14			= t4 ^ state[5];
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3314      	adds	r3, #20
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800228a:	4053      	eors	r3, r2
 800228c:	617b      	str	r3, [r7, #20]
	state[6]	= t1 ^ t14;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3318      	adds	r3, #24
 8002292:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	404a      	eors	r2, r1
 8002298:	601a      	str	r2, [r3, #0]
	state[6] 	^= t5; 
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3318      	adds	r3, #24
 800229e:	6819      	ldr	r1, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3318      	adds	r3, #24
 80022a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80022a6:	404a      	eors	r2, r1
 80022a8:	601a      	str	r2, [r3, #0]
	state[6] 	^= state[4];
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3318      	adds	r3, #24
 80022ae:	6819      	ldr	r1, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3310      	adds	r3, #16
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3318      	adds	r3, #24
 80022ba:	404a      	eors	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]
	state[2]	= t17 ^ state[6];
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3318      	adds	r3, #24
 80022c2:	6819      	ldr	r1, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3308      	adds	r3, #8
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	404a      	eors	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]
	state[5]	= t15 ^ state[2];
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3308      	adds	r3, #8
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3314      	adds	r3, #20
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	404a      	eors	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]
	state[2] 	^= t6;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3308      	adds	r3, #8
 80022e2:	6819      	ldr	r1, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3308      	adds	r3, #8
 80022e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022ea:	404a      	eors	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3308      	adds	r3, #8
 80022f2:	6819      	ldr	r1, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3308      	adds	r3, #8
 80022f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022fa:	404a      	eors	r2, r1
 80022fc:	601a      	str	r2, [r3, #0]
	//state[2] 	^= 0xffffffff;
	t14 		^= t11;
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	4053      	eors	r3, r2
 8002304:	617b      	str	r3, [r7, #20]
	t0 			^= t14;
 8002306:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	4053      	eors	r3, r2
 800230c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	state[6] 	^= t0;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3318      	adds	r3, #24
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3318      	adds	r3, #24
 8002318:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800231a:	404a      	eors	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
	//state[6] 	^= 0xffffffff;
	state[7]	= t1 ^ t0;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	331c      	adds	r3, #28
 8002322:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002324:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002326:	404a      	eors	r2, r1
 8002328:	601a      	str	r2, [r3, #0]
	//state[7] 	^= 0xffffffff;
	state[4]	= t14 ^ state[3]; 
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	330c      	adds	r3, #12
 800232e:	6819      	ldr	r1, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3310      	adds	r3, #16
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	404a      	eors	r2, r1
 8002338:	601a      	str	r2, [r3, #0]
}
 800233a:	bf00      	nop
 800233c:	3754      	adds	r7, #84	@ 0x54
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <double_shiftrows>:

/******************************************************************************
* Applies the ShiftRows transformation twice (i.e. SR^2) on the internal state.
******************************************************************************/
static void double_shiftrows(uint32_t* state) {
 8002346:	b480      	push	{r7}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
    uint32_t tmp;
	for(int i = 0; i < 8; i++)
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	e02a      	b.n	80023aa <double_shiftrows+0x64>
        SWAPMOVE(state[i], state[i], 0x0f000f00, 4);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	440b      	add	r3, r1
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	4053      	eors	r3, r2
 800236c:	f003 230f 	and.w	r3, r3, #251662080	@ 0xf000f00
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	6819      	ldr	r1, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	404a      	eors	r2, r1
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	011a      	lsls	r2, r3, #4
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	4403      	add	r3, r0
 80023a0:	404a      	eors	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	3301      	adds	r3, #1
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b07      	cmp	r3, #7
 80023ae:	ddd1      	ble.n	8002354 <double_shiftrows+0xe>
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <mixcolumns_0>:
/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 0.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 0.
******************************************************************************/
static void mixcolumns_0(uint32_t* state) {
 80023be:	b480      	push	{r7}
 80023c0:	b089      	sub	sp, #36	@ 0x24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4;
	t3 = ROR(BYTE_ROR_6(state[0]),8);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	099b      	lsrs	r3, r3, #6
 80023cc:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 80023da:	4313      	orrs	r3, r2
 80023dc:	ea4f 2333 	mov.w	r3, r3, ror #8
 80023e0:	61fb      	str	r3, [r7, #28]
	t0 = state[0] ^ t3;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	4053      	eors	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
	t1 = ROR(BYTE_ROR_6(state[7]),8);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	331c      	adds	r3, #28
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	099b      	lsrs	r3, r3, #6
 80023f4:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	331c      	adds	r3, #28
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8002404:	4313      	orrs	r3, r2
 8002406:	ea4f 2333 	mov.w	r3, r3, ror #8
 800240a:	617b      	str	r3, [r7, #20]
	t2 = state[7] ^ t1;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	331c      	adds	r3, #28
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4053      	eors	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
	state[7] = ROR(BYTE_ROR_4(t2),16) ^ t1 ^ t0;
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002428:	4313      	orrs	r3, r2
 800242a:	ea4f 4233 	mov.w	r2, r3, ror #16
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	ea82 0103 	eor.w	r1, r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	331c      	adds	r3, #28
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	404a      	eors	r2, r1
 800243c:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[6]),8);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3318      	adds	r3, #24
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	099b      	lsrs	r3, r3, #6
 8002446:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3318      	adds	r3, #24
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8002456:	4313      	orrs	r3, r2
 8002458:	ea4f 2333 	mov.w	r3, r3, ror #8
 800245c:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[6];
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3318      	adds	r3, #24
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4053      	eors	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
	state[6] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	405a      	eors	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	ea82 0103 	eor.w	r1, r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002486:	4313      	orrs	r3, r2
 8002488:	ea4f 4233 	mov.w	r2, r3, ror #16
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3318      	adds	r3, #24
 8002490:	404a      	eors	r2, r1
 8002492:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[5]),8);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3314      	adds	r3, #20
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	099b      	lsrs	r3, r3, #6
 800249c:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3314      	adds	r3, #20
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 80024ac:	4313      	orrs	r3, r2
 80024ae:	ea4f 2333 	mov.w	r3, r3, ror #8
 80024b2:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[5];
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3314      	adds	r3, #20
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4053      	eors	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
	state[5] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	ea82 0103 	eor.w	r1, r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80024d8:	4313      	orrs	r3, r2
 80024da:	ea4f 4233 	mov.w	r2, r3, ror #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3314      	adds	r3, #20
 80024e2:	404a      	eors	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[4]),8);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3310      	adds	r3, #16
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	099b      	lsrs	r3, r3, #6
 80024ee:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3310      	adds	r3, #16
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 80024fe:	4313      	orrs	r3, r2
 8002500:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002504:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[4];
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3310      	adds	r3, #16
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	4053      	eors	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
	state[4] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	405a      	eors	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	ea82 0103 	eor.w	r1, r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 800252e:	4313      	orrs	r3, r2
 8002530:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3310      	adds	r3, #16
 8002538:	404a      	eors	r2, r1
 800253a:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[3]),8);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	330c      	adds	r3, #12
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	099b      	lsrs	r3, r3, #6
 8002544:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	330c      	adds	r3, #12
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8002554:	4313      	orrs	r3, r2
 8002556:	ea4f 2333 	mov.w	r3, r3, ror #8
 800255a:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[3];
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	330c      	adds	r3, #12
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4053      	eors	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
	state[3] = t4 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	405a      	eors	r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	ea82 0103 	eor.w	r1, r2, r3
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002584:	4313      	orrs	r3, r2
 8002586:	ea4f 4233 	mov.w	r2, r3, ror #16
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	330c      	adds	r3, #12
 800258e:	404a      	eors	r2, r1
 8002590:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[2]),8);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3308      	adds	r3, #8
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	099b      	lsrs	r3, r3, #6
 800259a:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3308      	adds	r3, #8
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 80025aa:	4313      	orrs	r3, r2
 80025ac:	ea4f 2333 	mov.w	r3, r3, ror #8
 80025b0:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[2];
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3308      	adds	r3, #8
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	4053      	eors	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
	state[2] = t2 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	ea82 0103 	eor.w	r1, r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80025d6:	4313      	orrs	r3, r2
 80025d8:	ea4f 4233 	mov.w	r2, r3, ror #16
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3308      	adds	r3, #8
 80025e0:	404a      	eors	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[1]),8);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3304      	adds	r3, #4
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	099b      	lsrs	r3, r3, #6
 80025ec:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 80025fc:	4313      	orrs	r3, r2
 80025fe:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002602:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[1];
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3304      	adds	r3, #4
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4053      	eors	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
	state[1] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	ea82 0103 	eor.w	r1, r2, r3
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002628:	4313      	orrs	r3, r2
 800262a:	ea4f 4233 	mov.w	r2, r3, ror #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3304      	adds	r3, #4
 8002632:	404a      	eors	r2, r1
 8002634:	601a      	str	r2, [r3, #0]
	state[0] = t2 ^ t3 ^ ROR(BYTE_ROR_4(t0),16);
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	405a      	eors	r2, r3
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	091b      	lsrs	r3, r3, #4
 8002640:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 800264c:	430b      	orrs	r3, r1
 800264e:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002652:	405a      	eors	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	601a      	str	r2, [r3, #0]
}
 8002658:	bf00      	nop
 800265a:	3724      	adds	r7, #36	@ 0x24
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <mixcolumns_1>:

/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for round i s.t. (i%4) == 1.
******************************************************************************/
static void mixcolumns_1(uint32_t* state) {
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2;
	t0 = state[0] ^ ROR(BYTE_ROR_4(state[0]),8);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002684:	430b      	orrs	r3, r1
 8002686:	ea4f 2333 	mov.w	r3, r3, ror #8
 800268a:	4053      	eors	r3, r2
 800268c:	617b      	str	r3, [r7, #20]
	t1 = state[7] ^ ROR(BYTE_ROR_4(state[7]),8);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	331c      	adds	r3, #28
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	331c      	adds	r3, #28
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	331c      	adds	r3, #28
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80026ac:	430b      	orrs	r3, r1
 80026ae:	ea4f 2333 	mov.w	r3, r3, ror #8
 80026b2:	4053      	eors	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
	t2 = state[6];
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	60fb      	str	r3, [r7, #12]
	state[6] = t1 ^ t0;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3318      	adds	r3, #24
 80026c0:	6939      	ldr	r1, [r7, #16]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	404a      	eors	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]
	state[7] ^= state[6] ^ ROR(t1,16);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	331c      	adds	r3, #28
 80026cc:	6819      	ldr	r1, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3318      	adds	r3, #24
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	ea4f 4333 	mov.w	r3, r3, ror #16
 80026da:	405a      	eors	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	331c      	adds	r3, #28
 80026e0:	404a      	eors	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80026f4:	4313      	orrs	r3, r2
 80026f6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80026fa:	613b      	str	r3, [r7, #16]
	state[6] ^= t1;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3318      	adds	r3, #24
 8002700:	6819      	ldr	r1, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3318      	adds	r3, #24
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	404a      	eors	r2, r1
 800270a:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4053      	eors	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
	state[6] ^= ROR(t1,16);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3318      	adds	r3, #24
 8002718:	6819      	ldr	r1, [r3, #0]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3318      	adds	r3, #24
 8002724:	404a      	eors	r2, r1
 8002726:	601a      	str	r2, [r3, #0]
	t2 = state[5];
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	60fb      	str	r3, [r7, #12]
	state[5] = t1;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3314      	adds	r3, #20
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002746:	4313      	orrs	r3, r2
 8002748:	ea4f 2333 	mov.w	r3, r3, ror #8
 800274c:	613b      	str	r3, [r7, #16]
	state[5] ^= t1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3314      	adds	r3, #20
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3314      	adds	r3, #20
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	404a      	eors	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4053      	eors	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
	state[5] ^= ROR(t1,16);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3314      	adds	r3, #20
 800276a:	6819      	ldr	r1, [r3, #0]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3314      	adds	r3, #20
 8002776:	404a      	eors	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
	t2 = state[4];
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	60fb      	str	r3, [r7, #12]
	state[4] = t1 ^ t0;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3310      	adds	r3, #16
 8002784:	6939      	ldr	r1, [r7, #16]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	404a      	eors	r2, r1
 800278a:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	091b      	lsrs	r3, r3, #4
 8002790:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 800279c:	4313      	orrs	r3, r2
 800279e:	ea4f 2333 	mov.w	r3, r3, ror #8
 80027a2:	613b      	str	r3, [r7, #16]
	state[4] ^= t1;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3310      	adds	r3, #16
 80027a8:	6819      	ldr	r1, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3310      	adds	r3, #16
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	404a      	eors	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4053      	eors	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
	state[4] ^= ROR(t1,16);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3310      	adds	r3, #16
 80027c0:	6819      	ldr	r1, [r3, #0]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	ea4f 4233 	mov.w	r2, r3, ror #16
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3310      	adds	r3, #16
 80027cc:	404a      	eors	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]
	t2 = state[3];
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	60fb      	str	r3, [r7, #12]
	state[3] = t1 ^ t0;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	330c      	adds	r3, #12
 80027da:	6939      	ldr	r1, [r7, #16]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	404a      	eors	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80027f2:	4313      	orrs	r3, r2
 80027f4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80027f8:	613b      	str	r3, [r7, #16]
	state[3] ^= t1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	330c      	adds	r3, #12
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	330c      	adds	r3, #12
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	404a      	eors	r2, r1
 8002808:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4053      	eors	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
	state[3] ^= ROR(t1,16);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	330c      	adds	r3, #12
 8002816:	6819      	ldr	r1, [r3, #0]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	ea4f 4233 	mov.w	r2, r3, ror #16
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	330c      	adds	r3, #12
 8002822:	404a      	eors	r2, r1
 8002824:	601a      	str	r2, [r3, #0]
	t2 = state[2];
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	60fb      	str	r3, [r7, #12]
	state[2] = t1;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3308      	adds	r3, #8
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002844:	4313      	orrs	r3, r2
 8002846:	ea4f 2333 	mov.w	r3, r3, ror #8
 800284a:	613b      	str	r3, [r7, #16]
	state[2] ^= t1;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3308      	adds	r3, #8
 8002850:	6819      	ldr	r1, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3308      	adds	r3, #8
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	404a      	eors	r2, r1
 800285a:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4053      	eors	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
	state[2] ^= ROR(t1,16);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3308      	adds	r3, #8
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3308      	adds	r3, #8
 8002874:	404a      	eors	r2, r1
 8002876:	601a      	str	r2, [r3, #0]
	t2 = state[1];
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	60fb      	str	r3, [r7, #12]
	state[1] = t1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3304      	adds	r3, #4
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002896:	4313      	orrs	r3, r2
 8002898:	ea4f 2333 	mov.w	r3, r3, ror #8
 800289c:	613b      	str	r3, [r7, #16]
	state[1] ^= t1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3304      	adds	r3, #4
 80028a2:	6819      	ldr	r1, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3304      	adds	r3, #4
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	404a      	eors	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4053      	eors	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
	state[1] ^= ROR(t1,16);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3304      	adds	r3, #4
 80028ba:	6819      	ldr	r1, [r3, #0]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	ea4f 4233 	mov.w	r2, r3, ror #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3304      	adds	r3, #4
 80028c6:	404a      	eors	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]
	t2 = state[0];
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]
	state[0] = t1;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80028e6:	4313      	orrs	r3, r2
 80028e8:	ea4f 2333 	mov.w	r3, r3, ror #8
 80028ec:	613b      	str	r3, [r7, #16]
	state[0] ^= t1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	405a      	eors	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4053      	eors	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
	state[0] ^= ROR(t1,16);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	ea4f 4333 	mov.w	r3, r3, ror #16
 800290c:	405a      	eors	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	601a      	str	r2, [r3, #0]
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <mixcolumns_2>:

/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for rounds i s.t. (i%4) == 2.
******************************************************************************/
static void mixcolumns_2(uint32_t* state) {
 800291e:	b480      	push	{r7}
 8002920:	b089      	sub	sp, #36	@ 0x24
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4;
	t3 = ROR(BYTE_ROR_2(state[0]),8);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	019b      	lsls	r3, r3, #6
 8002936:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 800293a:	4313      	orrs	r3, r2
 800293c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002940:	61fb      	str	r3, [r7, #28]
	t0 = state[0] ^ t3;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	4053      	eors	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
	t1 = ROR(BYTE_ROR_2(state[7]),8);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	331c      	adds	r3, #28
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	331c      	adds	r3, #28
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	019b      	lsls	r3, r3, #6
 8002960:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8002964:	4313      	orrs	r3, r2
 8002966:	ea4f 2333 	mov.w	r3, r3, ror #8
 800296a:	617b      	str	r3, [r7, #20]
	t2 = state[7] ^ t1;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	331c      	adds	r3, #28
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4053      	eors	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
	state[7] = ROR(BYTE_ROR_4(t2),16) ^ t1 ^ t0;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002988:	4313      	orrs	r3, r2
 800298a:	ea4f 4233 	mov.w	r2, r3, ror #16
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	ea82 0103 	eor.w	r1, r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	331c      	adds	r3, #28
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	404a      	eors	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[6]),8);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3318      	adds	r3, #24
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3318      	adds	r3, #24
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	019b      	lsls	r3, r3, #6
 80029b2:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 80029b6:	4313      	orrs	r3, r2
 80029b8:	ea4f 2333 	mov.w	r3, r3, ror #8
 80029bc:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[6];
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3318      	adds	r3, #24
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4053      	eors	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
	state[6] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	405a      	eors	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	ea82 0103 	eor.w	r1, r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	ea4f 4233 	mov.w	r2, r3, ror #16
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3318      	adds	r3, #24
 80029f0:	404a      	eors	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[5]),8);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3314      	adds	r3, #20
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3314      	adds	r3, #20
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	019b      	lsls	r3, r3, #6
 8002a08:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002a12:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[5];
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3314      	adds	r3, #20
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4053      	eors	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
	state[5] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	ea82 0103 	eor.w	r1, r2, r3
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	091b      	lsrs	r3, r3, #4
 8002a2c:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3314      	adds	r3, #20
 8002a42:	404a      	eors	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[4]),8);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3310      	adds	r3, #16
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3310      	adds	r3, #16
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	019b      	lsls	r3, r3, #6
 8002a5a:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002a64:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[4];
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3310      	adds	r3, #16
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4053      	eors	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
	state[4] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	405a      	eors	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	ea82 0103 	eor.w	r1, r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3310      	adds	r3, #16
 8002a98:	404a      	eors	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[3]),8);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	330c      	adds	r3, #12
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	330c      	adds	r3, #12
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	019b      	lsls	r3, r3, #6
 8002ab0:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002aba:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[3];
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	330c      	adds	r3, #12
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4053      	eors	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
	state[3] = t4 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	405a      	eors	r2, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	ea82 0103 	eor.w	r1, r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	330c      	adds	r3, #12
 8002aee:	404a      	eors	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[2]),8);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3308      	adds	r3, #8
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	089b      	lsrs	r3, r3, #2
 8002afa:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3308      	adds	r3, #8
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	019b      	lsls	r3, r3, #6
 8002b06:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002b10:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[2];
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3308      	adds	r3, #8
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4053      	eors	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
	state[2] = t2 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	ea82 0103 	eor.w	r1, r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002b36:	4313      	orrs	r3, r2
 8002b38:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3308      	adds	r3, #8
 8002b40:	404a      	eors	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[1]),8);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3304      	adds	r3, #4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	019b      	lsls	r3, r3, #6
 8002b58:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002b62:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[1];
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4053      	eors	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
	state[1] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	ea82 0103 	eor.w	r1, r2, r3
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	404a      	eors	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
	state[0] = t2 ^ t3 ^ ROR(BYTE_ROR_4(t0),16);
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	405a      	eors	r2, r3
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002bac:	430b      	orrs	r3, r1
 8002bae:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002bb2:	405a      	eors	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	601a      	str	r2, [r3, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	3724      	adds	r7, #36	@ 0x24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <mixcolumns_3>:
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 3.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 1.
* Based on Käsper-Schwabe, similar to https://github.com/Ko-/aes-armcortexm.
******************************************************************************/
static void mixcolumns_3(uint32_t* state) {
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2;
	t0 = state[7] ^ ROR(state[7],8);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	331c      	adds	r3, #28
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	331c      	adds	r3, #28
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002bdc:	4053      	eors	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
	t2 = state[0] ^ ROR(state[0],8);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002bec:	4053      	eors	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
	state[7] = t2 ^ ROR(state[7], 8) ^ ROR(t0, 16);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	331c      	adds	r3, #28
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	ea82 0103 	eor.w	r1, r2, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	331c      	adds	r3, #28
 8002c0a:	404a      	eors	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]
	t1 = state[6] ^ ROR(state[6],8);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3318      	adds	r3, #24
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3318      	adds	r3, #24
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002c1e:	4053      	eors	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
	state[6] = t0 ^ t2 ^ ROR(state[6], 8) ^ ROR(t1,16);
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	405a      	eors	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3318      	adds	r3, #24
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002c32:	ea82 0103 	eor.w	r1, r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3318      	adds	r3, #24
 8002c40:	404a      	eors	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]
	t0 = state[5] ^ ROR(state[5],8);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3314      	adds	r3, #20
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3314      	adds	r3, #20
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002c54:	4053      	eors	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
	state[5] = t1 ^ ROR(state[5],8) ^ ROR(t0,16);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3314      	adds	r3, #20
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	ea82 0103 	eor.w	r1, r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3314      	adds	r3, #20
 8002c72:	404a      	eors	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
	t1 = state[4] ^ ROR(state[4],8);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3310      	adds	r3, #16
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3310      	adds	r3, #16
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002c86:	4053      	eors	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
	state[4] = t0 ^ t2 ^ ROR(state[4],8) ^ ROR(t1,16);
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	405a      	eors	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3310      	adds	r3, #16
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002c9a:	ea82 0103 	eor.w	r1, r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3310      	adds	r3, #16
 8002ca8:	404a      	eors	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]
	t0 = state[3] ^ ROR(state[3],8);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	330c      	adds	r3, #12
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	330c      	adds	r3, #12
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002cbc:	4053      	eors	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
	state[3] = t1 ^ t2 ^ ROR(state[3],8) ^ ROR(t0,16);
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	405a      	eors	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	330c      	adds	r3, #12
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002cd0:	ea82 0103 	eor.w	r1, r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	404a      	eors	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]
	t1 = state[2] ^ ROR(state[2],8);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3308      	adds	r3, #8
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002cf2:	4053      	eors	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
	state[2] = t0 ^ ROR(state[2],8) ^ ROR(t1,16);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3308      	adds	r3, #8
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	ea82 0103 	eor.w	r1, r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3308      	adds	r3, #8
 8002d10:	404a      	eors	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]
	t0 = state[1] ^ ROR(state[1],8);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002d24:	4053      	eors	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
	state[1] = t1 ^ ROR(state[1],8) ^ ROR(t0,16);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	ea82 0103 	eor.w	r1, r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3304      	adds	r3, #4
 8002d42:	404a      	eors	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
	state[0] = t0 ^ ROR(state[0],8) ^ ROR(t2,16);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	405a      	eors	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002d58:	405a      	eors	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	601a      	str	r2, [r3, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b08c      	sub	sp, #48	@ 0x30
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 8002d78:	f107 0310 	add.w	r3, r7, #16
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe fb98 	bl	80014b6 <packing>
	ark(state, rkeys_ffs); 				// key whitening
 8002d86:	f107 0310 	add.w	r3, r7, #16
 8002d8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe ffd6 	bl	8001d3e <ark>
	sbox(state); 						// 1st round
 8002d92:	f107 0310 	add.w	r3, r7, #16
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe fff6 	bl	8001d88 <sbox>
	mixcolumns_0(state); 				// 1st round
 8002d9c:	f107 0310 	add.w	r3, r7, #16
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fb0c 	bl	80023be <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 8002da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da8:	f103 0220 	add.w	r2, r3, #32
 8002dac:	f107 0310 	add.w	r3, r7, #16
 8002db0:	4611      	mov	r1, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe ffc3 	bl	8001d3e <ark>
	sbox(state); 						// 2nd round
 8002db8:	f107 0310 	add.w	r3, r7, #16
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe ffe3 	bl	8001d88 <sbox>
	mixcolumns_1(state); 				// 2nd round
 8002dc2:	f107 0310 	add.w	r3, r7, #16
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fc4c 	bl	8002664 <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dce:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002dd2:	f107 0310 	add.w	r3, r7, #16
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe ffb0 	bl	8001d3e <ark>
	sbox(state); 						// 3rd round
 8002dde:	f107 0310 	add.w	r3, r7, #16
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe ffd0 	bl	8001d88 <sbox>
	mixcolumns_2(state); 				// 3rd round
 8002de8:	f107 0310 	add.w	r3, r7, #16
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fd96 	bl	800291e <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 8002df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df4:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8002df8:	f107 0310 	add.w	r3, r7, #16
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe ff9d 	bl	8001d3e <ark>
	sbox(state); 						// 4th round
 8002e04:	f107 0310 	add.w	r3, r7, #16
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe ffbd 	bl	8001d88 <sbox>
	mixcolumns_3(state); 				// 4th round
 8002e0e:	f107 0310 	add.w	r3, r7, #16
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fed6 	bl	8002bc4 <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 8002e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e1a:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8002e1e:	f107 0310 	add.w	r3, r7, #16
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe ff8a 	bl	8001d3e <ark>
	sbox(state); 						// 5th round
 8002e2a:	f107 0310 	add.w	r3, r7, #16
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe ffaa 	bl	8001d88 <sbox>
	mixcolumns_0(state); 				// 5th round
 8002e34:	f107 0310 	add.w	r3, r7, #16
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fac0 	bl	80023be <mixcolumns_0>
	ark(state, rkeys_ffs + 40); 		// 5th round
 8002e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e40:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8002e44:	f107 0310 	add.w	r3, r7, #16
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe ff77 	bl	8001d3e <ark>
	sbox(state);						// 6th round
 8002e50:	f107 0310 	add.w	r3, r7, #16
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fe ff97 	bl	8001d88 <sbox>
	mixcolumns_1(state); 				// 6th round
 8002e5a:	f107 0310 	add.w	r3, r7, #16
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fc00 	bl	8002664 <mixcolumns_1>
	ark(state, rkeys_ffs + 48); 		// 6th round
 8002e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e66:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8002e6a:	f107 0310 	add.w	r3, r7, #16
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fe ff64 	bl	8001d3e <ark>
	sbox(state); 						// 7th round
 8002e76:	f107 0310 	add.w	r3, r7, #16
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe ff84 	bl	8001d88 <sbox>
	mixcolumns_2(state); 				// 7th round
 8002e80:	f107 0310 	add.w	r3, r7, #16
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fd4a 	bl	800291e <mixcolumns_2>
	ark(state, rkeys_ffs + 56); 		// 7th round
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8c:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 8002e90:	f107 0310 	add.w	r3, r7, #16
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe ff51 	bl	8001d3e <ark>
	sbox(state); 						// 8th round
 8002e9c:	f107 0310 	add.w	r3, r7, #16
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fe ff71 	bl	8001d88 <sbox>
	mixcolumns_3(state); 				// 8th round
 8002ea6:	f107 0310 	add.w	r3, r7, #16
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fe8a 	bl	8002bc4 <mixcolumns_3>
	ark(state, rkeys_ffs + 64); 		// 8th round
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb2:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 8002eb6:	f107 0310 	add.w	r3, r7, #16
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe ff3e 	bl	8001d3e <ark>
	sbox(state); 						// 9th round
 8002ec2:	f107 0310 	add.w	r3, r7, #16
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe ff5e 	bl	8001d88 <sbox>
	mixcolumns_0(state); 				// 9th round
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fa74 	bl	80023be <mixcolumns_0>
	ark(state, rkeys_ffs + 72); 		// 9th round
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed8:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8002edc:	f107 0310 	add.w	r3, r7, #16
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe ff2b 	bl	8001d3e <ark>
	sbox(state); 						// 10th round
 8002ee8:	f107 0310 	add.w	r3, r7, #16
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe ff4b 	bl	8001d88 <sbox>
	double_shiftrows(state); 			// 10th round (resynchronization)
 8002ef2:	f107 0310 	add.w	r3, r7, #16
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fa25 	bl	8002346 <double_shiftrows>
	ark(state, rkeys_ffs + 80); 		// 10th round
 8002efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efe:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 8002f02:	f107 0310 	add.w	r3, r7, #16
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe ff18 	bl	8001d3e <ark>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 8002f0e:	f107 0310 	add.w	r3, r7, #16
 8002f12:	461a      	mov	r2, r3
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f7fe fccc 	bl	80018b4 <unpacking>
}
 8002f1c:	bf00      	nop
 8002f1e:	3730      	adds	r7, #48	@ 0x30
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <two_Rounds_aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void two_Rounds_aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08c      	sub	sp, #48	@ 0x30
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 8002f32:	f107 0310 	add.w	r3, r7, #16
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fabb 	bl	80014b6 <packing>
	ark(state, rkeys_ffs); 				// key whitening
 8002f40:	f107 0310 	add.w	r3, r7, #16
 8002f44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fef9 	bl	8001d3e <ark>
	sbox(state); 						// 1st round
 8002f4c:	f107 0310 	add.w	r3, r7, #16
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe ff19 	bl	8001d88 <sbox>
	mixcolumns_0(state); 				// 1st round
 8002f56:	f107 0310 	add.w	r3, r7, #16
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fa2f 	bl	80023be <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 8002f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f62:	f103 0220 	add.w	r2, r3, #32
 8002f66:	f107 0310 	add.w	r3, r7, #16
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe fee6 	bl	8001d3e <ark>
	sbox(state); 						// 2nd round
 8002f72:	f107 0310 	add.w	r3, r7, #16
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe ff06 	bl	8001d88 <sbox>
	mixcolumns_1(state); 				// 2nd round
 8002f7c:	f107 0310 	add.w	r3, r7, #16
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fb6f 	bl	8002664 <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 8002f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f88:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002f8c:	f107 0310 	add.w	r3, r7, #16
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe fed3 	bl	8001d3e <ark>
	double_shiftrows(state); 			// 10th round (resynchronization)
 8002f98:	f107 0310 	add.w	r3, r7, #16
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff f9d2 	bl	8002346 <double_shiftrows>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 8002fa2:	f107 0310 	add.w	r3, r7, #16
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f7fe fc82 	bl	80018b4 <unpacking>
}
 8002fb0:	bf00      	nop
 8002fb2:	3730      	adds	r7, #48	@ 0x30
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <inv_shiftrows_1>:


/******************************************************************************
* Applies ShiftRows^(-1) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_1(uint32_t* rkey) {
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++) {
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	e052      	b.n	800306c <inv_shiftrows_1+0xb4>
		SWAPMOVE(rkey[i], rkey[i], 0x0c0f0300, 4);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	440b      	add	r3, r1
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	091b      	lsrs	r3, r3, #4
 8002fdc:	405a      	eors	r2, r3
 8002fde:	4b28      	ldr	r3, [pc, #160]	@ (8003080 <inv_shiftrows_1+0xc8>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	60bb      	str	r3, [r7, #8]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4413      	add	r3, r2
 8002fec:	6819      	ldr	r1, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	404a      	eors	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	6819      	ldr	r1, [r3, #0]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	011a      	lsls	r2, r3, #4
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4403      	add	r3, r0
 8003012:	404a      	eors	r2, r1
 8003014:	601a      	str	r2, [r3, #0]
		SWAPMOVE(rkey[i], rkey[i], 0x33003300, 2);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	4413      	add	r3, r2
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	440b      	add	r3, r1
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	089b      	lsrs	r3, r3, #2
 800302c:	4053      	eors	r3, r2
 800302e:	f003 2333 	and.w	r3, r3, #855651072	@ 0x33003300
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	6819      	ldr	r1, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	404a      	eors	r2, r1
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	009a      	lsls	r2, r3, #2
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4403      	add	r3, r0
 8003062:	404a      	eors	r2, r1
 8003064:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3301      	adds	r3, #1
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b07      	cmp	r3, #7
 8003070:	dda9      	ble.n	8002fc6 <inv_shiftrows_1+0xe>
	}
}
 8003072:	bf00      	nop
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	0c0f0300 	.word	0x0c0f0300

08003084 <inv_shiftrows_2>:
/******************************************************************************
* Applies ShiftRows^(-2) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_2(uint32_t* rkey) {
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++)
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e02a      	b.n	80030e8 <inv_shiftrows_2+0x64>
		SWAPMOVE(rkey[i], rkey[i], 0x0f000f00, 4);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	440b      	add	r3, r1
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	4053      	eors	r3, r2
 80030aa:	f003 230f 	and.w	r3, r3, #251662080	@ 0xf000f00
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	6819      	ldr	r1, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	404a      	eors	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	4413      	add	r3, r2
 80030d0:	6819      	ldr	r1, [r3, #0]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	011a      	lsls	r2, r3, #4
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4403      	add	r3, r0
 80030de:	404a      	eors	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3301      	adds	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b07      	cmp	r3, #7
 80030ec:	ddd1      	ble.n	8003092 <inv_shiftrows_2+0xe>
}
 80030ee:	bf00      	nop
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <inv_shiftrows_3>:

/******************************************************************************
* Applies ShiftRows^(-3) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_3(uint32_t* rkey) {
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++) {
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	e052      	b.n	80031b0 <inv_shiftrows_3+0xb4>
		SWAPMOVE(rkey[i], rkey[i], 0x030f0c00, 4);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	440b      	add	r3, r1
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	091b      	lsrs	r3, r3, #4
 8003120:	405a      	eors	r2, r3
 8003122:	4b28      	ldr	r3, [pc, #160]	@ (80031c4 <inv_shiftrows_3+0xc8>)
 8003124:	4013      	ands	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	4413      	add	r3, r2
 8003130:	6819      	ldr	r1, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	4413      	add	r3, r2
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	404a      	eors	r2, r1
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	011a      	lsls	r2, r3, #4
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	4403      	add	r3, r0
 8003156:	404a      	eors	r2, r1
 8003158:	601a      	str	r2, [r3, #0]
		SWAPMOVE(rkey[i], rkey[i], 0x33003300, 2);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	440b      	add	r3, r1
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	4053      	eors	r3, r2
 8003172:	f003 2333 	and.w	r3, r3, #855651072	@ 0x33003300
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	6819      	ldr	r1, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	404a      	eors	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	6819      	ldr	r1, [r3, #0]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	009a      	lsls	r2, r3, #2
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	4403      	add	r3, r0
 80031a6:	404a      	eors	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3301      	adds	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b07      	cmp	r3, #7
 80031b4:	dda9      	ble.n	800310a <inv_shiftrows_3+0xe>
	}
}
 80031b6:	bf00      	nop
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	030f0c00 	.word	0x030f0c00

080031c8 <xor_columns>:
* involved in the XOR computation (should be 8 and 16 for AES-128 and AES-256,
* respectively).
* The idx_ror parameter refers to the rotation value. When a Rotword is applied
* the value should be 2, 26 otherwise.
******************************************************************************/
static void xor_columns(uint32_t* rkeys, int idx_xor, int idx_ror) {
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
	rkeys[1] ^= 0xffffffff; 			// NOT that are omitted in S-box
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3304      	adds	r3, #4
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	3304      	adds	r3, #4
 80031de:	43d2      	mvns	r2, r2
 80031e0:	601a      	str	r2, [r3, #0]
	rkeys[2] ^= 0xffffffff; 			// NOT that are omitted in S-box
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3308      	adds	r3, #8
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3308      	adds	r3, #8
 80031ec:	43d2      	mvns	r2, r2
 80031ee:	601a      	str	r2, [r3, #0]
	rkeys[6] ^= 0xffffffff; 			// NOT that are omitted in S-box
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3318      	adds	r3, #24
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	3318      	adds	r3, #24
 80031fa:	43d2      	mvns	r2, r2
 80031fc:	601a      	str	r2, [r3, #0]
	rkeys[7] ^= 0xffffffff; 			// NOT that are omitted in S-box
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	331c      	adds	r3, #28
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	331c      	adds	r3, #28
 8003208:	43d2      	mvns	r2, r2
 800320a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	e06a      	b.n	80032e8 <xor_columns+0x120>
		rkeys[i] = (rkeys[i-idx_xor] ^ ROR(rkeys[i], idx_ror))  & 0xc0c0c0c0;
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4413      	add	r3, r2
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	68f9      	ldr	r1, [r7, #12]
 8003226:	440b      	add	r3, r1
 8003228:	6819      	ldr	r1, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	fa61 f303 	ror.w	r3, r1, r3
 8003230:	405a      	eors	r2, r3
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	68f9      	ldr	r1, [r7, #12]
 8003238:	440b      	add	r3, r1
 800323a:	f002 32c0 	and.w	r2, r2, #3233857728	@ 0xc0c0c0c0
 800323e:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x30303030);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	6819      	ldr	r1, [r3, #0]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4413      	add	r3, r2
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	4403      	add	r3, r0
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	089b      	lsrs	r3, r3, #2
 8003264:	4053      	eors	r3, r2
 8003266:	f003 3230 	and.w	r2, r3, #808464432	@ 0x30303030
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	4403      	add	r3, r0
 8003272:	430a      	orrs	r2, r1
 8003274:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x0c0c0c0c);
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4413      	add	r3, r2
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	4403      	add	r3, r0
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	4053      	eors	r3, r2
 800329c:	f003 320c 	and.w	r2, r3, #202116108	@ 0xc0c0c0c
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	4403      	add	r3, r0
 80032a8:	430a      	orrs	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x03030303);
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4413      	add	r3, r2
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	4403      	add	r3, r0
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	089b      	lsrs	r3, r3, #2
 80032d0:	4053      	eors	r3, r2
 80032d2:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	4403      	add	r3, r0
 80032de:	430a      	orrs	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	3301      	adds	r3, #1
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b07      	cmp	r3, #7
 80032ec:	dd91      	ble.n	8003212 <xor_columns+0x4a>
	}
}
 80032ee:	bf00      	nop
 80032f0:	bf00      	nop
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <aes128_keyschedule_ffs>:
* Fully bitsliced AES-128 key schedule to match the fully-fixsliced (ffs)
* representation. Note that it is possible to pass two different keys as input
* parameters if one wants to encrypt 2 blocks with two different keys.
******************************************************************************/
void aes128_keyschedule_ffs(uint32_t* rkeys, const unsigned char* key0,
						const unsigned char* key1) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
	packing(rkeys, key0, key1); 	// packs the keys into the bitsliced state
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7fe f8d2 	bl	80014b6 <packing>
	memcpy(rkeys+8, rkeys, 32);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3320      	adds	r3, #32
 8003316:	2220      	movs	r2, #32
 8003318:	68f9      	ldr	r1, [r7, #12]
 800331a:	4618      	mov	r0, r3
 800331c:	f004 f9b8 	bl	8007690 <memcpy>
	sbox(rkeys+8);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3320      	adds	r3, #32
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe fd2f 	bl	8001d88 <sbox>
	rkeys[15] ^= 0x00000300; 		// 1st rconst
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	333c      	adds	r3, #60	@ 0x3c
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	333c      	adds	r3, #60	@ 0x3c
 8003334:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003338:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+8, 8, 2); 	// Rotword and XOR between the columns
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3320      	adds	r3, #32
 800333e:	2202      	movs	r2, #2
 8003340:	2108      	movs	r1, #8
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff ff40 	bl	80031c8 <xor_columns>
	memcpy(rkeys+16, rkeys+8, 32);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3320      	adds	r3, #32
 8003352:	2220      	movs	r2, #32
 8003354:	4619      	mov	r1, r3
 8003356:	f004 f99b 	bl	8007690 <memcpy>
	sbox(rkeys+16);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3340      	adds	r3, #64	@ 0x40
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe fd12 	bl	8001d88 <sbox>
	rkeys[22] ^= 0x00000300;		// 2nd rconst
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	3358      	adds	r3, #88	@ 0x58
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3358      	adds	r3, #88	@ 0x58
 800336e:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003372:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+16, 8, 2); 	// Rotword and XOR between the columns
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3340      	adds	r3, #64	@ 0x40
 8003378:	2202      	movs	r2, #2
 800337a:	2108      	movs	r1, #8
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff23 	bl	80031c8 <xor_columns>
	inv_shiftrows_1(rkeys+8); 		// to match fixslicing
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	3320      	adds	r3, #32
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fe16 	bl	8002fb8 <inv_shiftrows_1>
	memcpy(rkeys+24, rkeys+16, 32);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3340      	adds	r3, #64	@ 0x40
 8003396:	2220      	movs	r2, #32
 8003398:	4619      	mov	r1, r3
 800339a:	f004 f979 	bl	8007690 <memcpy>
	sbox(rkeys+24);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	3360      	adds	r3, #96	@ 0x60
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe fcf0 	bl	8001d88 <sbox>
	rkeys[29] ^= 0x00000300;		// 3rd rconst
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3374      	adds	r3, #116	@ 0x74
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	3374      	adds	r3, #116	@ 0x74
 80033b2:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80033b6:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+24, 8, 2); 	// Rotword and XOR between the columns
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3360      	adds	r3, #96	@ 0x60
 80033bc:	2202      	movs	r2, #2
 80033be:	2108      	movs	r1, #8
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff01 	bl	80031c8 <xor_columns>
	inv_shiftrows_2(rkeys+16); 		// to match fixslicing
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3340      	adds	r3, #64	@ 0x40
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fe5a 	bl	8003084 <inv_shiftrows_2>
	memcpy(rkeys+32, rkeys+24, 32);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3360      	adds	r3, #96	@ 0x60
 80033da:	2220      	movs	r2, #32
 80033dc:	4619      	mov	r1, r3
 80033de:	f004 f957 	bl	8007690 <memcpy>
	sbox(rkeys+32);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3380      	adds	r3, #128	@ 0x80
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe fcce 	bl	8001d88 <sbox>
	rkeys[36] ^= 0x00000300; 		// 4th rconst
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3390      	adds	r3, #144	@ 0x90
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3390      	adds	r3, #144	@ 0x90
 80033f6:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80033fa:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+32, 8, 2); 	// Rotword and XOR between the columns
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3380      	adds	r3, #128	@ 0x80
 8003400:	2202      	movs	r2, #2
 8003402:	2108      	movs	r1, #8
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fedf 	bl	80031c8 <xor_columns>
	inv_shiftrows_3(rkeys+24); 		// to match fixslicing
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3360      	adds	r3, #96	@ 0x60
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fe74 	bl	80030fc <inv_shiftrows_3>
	memcpy(rkeys+40, rkeys+32, 32);	
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f103 00a0 	add.w	r0, r3, #160	@ 0xa0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3380      	adds	r3, #128	@ 0x80
 800341e:	2220      	movs	r2, #32
 8003420:	4619      	mov	r1, r3
 8003422:	f004 f935 	bl	8007690 <memcpy>
	sbox(rkeys+40);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	33a0      	adds	r3, #160	@ 0xa0
 800342a:	4618      	mov	r0, r3
 800342c:	f7fe fcac 	bl	8001d88 <sbox>
	rkeys[43] ^= 0x00000300; 		// 5th rconst
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	33ac      	adds	r3, #172	@ 0xac
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	33ac      	adds	r3, #172	@ 0xac
 800343a:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 800343e:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+40, 8, 2); 	// Rotword and XOR between the columns
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	33a0      	adds	r3, #160	@ 0xa0
 8003444:	2202      	movs	r2, #2
 8003446:	2108      	movs	r1, #8
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff febd 	bl	80031c8 <xor_columns>
	memcpy(rkeys+48, rkeys+40, 32);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	33a0      	adds	r3, #160	@ 0xa0
 8003458:	2220      	movs	r2, #32
 800345a:	4619      	mov	r1, r3
 800345c:	f004 f918 	bl	8007690 <memcpy>
	sbox(rkeys+48);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	33c0      	adds	r3, #192	@ 0xc0
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe fc8f 	bl	8001d88 <sbox>
	rkeys[50] ^= 0x00000300;		// 6th rconst
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	33c8      	adds	r3, #200	@ 0xc8
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	33c8      	adds	r3, #200	@ 0xc8
 8003474:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003478:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+48, 8, 2); 	// Rotword and XOR between the columns
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	33c0      	adds	r3, #192	@ 0xc0
 800347e:	2202      	movs	r2, #2
 8003480:	2108      	movs	r1, #8
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fea0 	bl	80031c8 <xor_columns>
	inv_shiftrows_1(rkeys+40); 		// to match fixslicing
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	33a0      	adds	r3, #160	@ 0xa0
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fd93 	bl	8002fb8 <inv_shiftrows_1>
	memcpy(rkeys+56, rkeys+48, 32);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f103 00e0 	add.w	r0, r3, #224	@ 0xe0
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	33c0      	adds	r3, #192	@ 0xc0
 800349c:	2220      	movs	r2, #32
 800349e:	4619      	mov	r1, r3
 80034a0:	f004 f8f6 	bl	8007690 <memcpy>
	sbox(rkeys+56);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	33e0      	adds	r3, #224	@ 0xe0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe fc6d 	bl	8001d88 <sbox>
	rkeys[57] ^= 0x00000300;		// 7th rconst
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	33e4      	adds	r3, #228	@ 0xe4
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	33e4      	adds	r3, #228	@ 0xe4
 80034b8:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80034bc:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+56, 8, 2); 	// Rotword and XOR between the columns
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	33e0      	adds	r3, #224	@ 0xe0
 80034c2:	2202      	movs	r2, #2
 80034c4:	2108      	movs	r1, #8
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff fe7e 	bl	80031c8 <xor_columns>
	inv_shiftrows_2(rkeys+48); 		// to match fixslicing
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	33c0      	adds	r3, #192	@ 0xc0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fdd7 	bl	8003084 <inv_shiftrows_2>
	memcpy(rkeys+64, rkeys+56, 32);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	33e0      	adds	r3, #224	@ 0xe0
 80034e0:	2220      	movs	r2, #32
 80034e2:	4619      	mov	r1, r3
 80034e4:	f004 f8d4 	bl	8007690 <memcpy>
	sbox(rkeys+64);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe fc4a 	bl	8001d88 <sbox>
	rkeys[64] ^= 0x00000300;		// 8th rconst
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003502:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003506:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+64, 8, 2); 	// Rotword and XOR between the columns
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800350e:	2202      	movs	r2, #2
 8003510:	2108      	movs	r1, #8
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fe58 	bl	80031c8 <xor_columns>
	inv_shiftrows_3(rkeys+56); 		// to match fixslicing
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	33e0      	adds	r3, #224	@ 0xe0
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fded 	bl	80030fc <inv_shiftrows_3>
	memcpy(rkeys+72, rkeys+64, 32);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800352e:	2220      	movs	r2, #32
 8003530:	4619      	mov	r1, r3
 8003532:	f004 f8ad 	bl	8007690 <memcpy>
	sbox(rkeys+72);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe fc23 	bl	8001d88 <sbox>
	rkeys[79] ^= 0x00000300; 		// 9th rconst
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003550:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003554:	601a      	str	r2, [r3, #0]
	rkeys[78] ^= 0x00000300; 		// 9th rconst
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003564:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003568:	601a      	str	r2, [r3, #0]
	rkeys[76] ^= 0x00000300; 		// 9th rconst
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003578:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 800357c:	601a      	str	r2, [r3, #0]
	rkeys[75] ^= 0x00000300; 		// 9th rconst
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800358c:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003590:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys + 72, 8, 2); 	// Rotword and XOR between the columns
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8003598:	2202      	movs	r2, #2
 800359a:	2108      	movs	r1, #8
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fe13 	bl	80031c8 <xor_columns>
	memcpy(rkeys+80, rkeys+72, 32);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f503 70a0 	add.w	r0, r3, #320	@ 0x140
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80035ae:	2220      	movs	r2, #32
 80035b0:	4619      	mov	r1, r3
 80035b2:	f004 f86d 	bl	8007690 <memcpy>
	sbox(rkeys+80);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe fbe3 	bl	8001d88 <sbox>
	rkeys[86] ^= 0x00000300; 		// 10th rconst
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80035d0:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80035d4:	601a      	str	r2, [r3, #0]
	rkeys[85] ^= 0x00000300; 		// 10th rconst
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80035e4:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80035e8:	601a      	str	r2, [r3, #0]
	rkeys[83] ^= 0x00000300;		// 10th rconst
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80035f8:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80035fc:	601a      	str	r2, [r3, #0]
	rkeys[82] ^= 0x00000300; 		// 10th rconst
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800360c:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003610:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+80, 8, 2); 	// Rotword and XOR between the columns
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003618:	2202      	movs	r2, #2
 800361a:	2108      	movs	r1, #8
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fdd3 	bl	80031c8 <xor_columns>
	inv_shiftrows_1(rkeys+72);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fcc5 	bl	8002fb8 <inv_shiftrows_1>
	for(int i = 1; i < 11; i++) {
 800362e:	2301      	movs	r3, #1
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e036      	b.n	80036a2 <aes128_keyschedule_ffs+0x3a6>
		rkeys[i*8 + 1] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	015b      	lsls	r3, r3, #5
 8003638:	3304      	adds	r3, #4
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4413      	add	r3, r2
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	015b      	lsls	r3, r3, #5
 8003644:	3304      	adds	r3, #4
 8003646:	68f9      	ldr	r1, [r7, #12]
 8003648:	440b      	add	r3, r1
 800364a:	43d2      	mvns	r2, r2
 800364c:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 2] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	015b      	lsls	r3, r3, #5
 8003652:	3308      	adds	r3, #8
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	015b      	lsls	r3, r3, #5
 800365e:	3308      	adds	r3, #8
 8003660:	68f9      	ldr	r1, [r7, #12]
 8003662:	440b      	add	r3, r1
 8003664:	43d2      	mvns	r2, r2
 8003666:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 6] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	015b      	lsls	r3, r3, #5
 800366c:	3318      	adds	r3, #24
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4413      	add	r3, r2
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	015b      	lsls	r3, r3, #5
 8003678:	3318      	adds	r3, #24
 800367a:	68f9      	ldr	r1, [r7, #12]
 800367c:	440b      	add	r3, r1
 800367e:	43d2      	mvns	r2, r2
 8003680:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 7] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	015b      	lsls	r3, r3, #5
 8003686:	331c      	adds	r3, #28
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	015b      	lsls	r3, r3, #5
 8003692:	331c      	adds	r3, #28
 8003694:	68f9      	ldr	r1, [r7, #12]
 8003696:	440b      	add	r3, r1
 8003698:	43d2      	mvns	r2, r2
 800369a:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 11; i++) {
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	3301      	adds	r3, #1
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b0a      	cmp	r3, #10
 80036a6:	ddc5      	ble.n	8003634 <aes128_keyschedule_ffs+0x338>
	// 	printf("%x \n", rkeys[i]);
	// }
	


}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <aes128_2rounds_keyschedule_ffs>:
* Fully bitsliced AES-128 key schedule to match the fully-fixsliced (ffs)
* representation. Note that it is possible to pass two different keys as input
* parameters if one wants to encrypt 2 blocks with two different keys.
******************************************************************************/
void aes128_2rounds_keyschedule_ffs(uint32_t* rkeys, const unsigned char* key0,
						const unsigned char* key1) {
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b086      	sub	sp, #24
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	607a      	str	r2, [r7, #4]
	packing(rkeys, key0, key1); 	// packs the keys into the bitsliced state
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f7fd fef7 	bl	80014b6 <packing>
	memcpy(rkeys+8, rkeys, 32);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	3320      	adds	r3, #32
 80036cc:	2220      	movs	r2, #32
 80036ce:	68f9      	ldr	r1, [r7, #12]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f003 ffdd 	bl	8007690 <memcpy>
	sbox(rkeys+8);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3320      	adds	r3, #32
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fe fb54 	bl	8001d88 <sbox>
	rkeys[15] ^= 0x00000300; 		// 1st rconst
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	333c      	adds	r3, #60	@ 0x3c
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	333c      	adds	r3, #60	@ 0x3c
 80036ea:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80036ee:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+8, 8, 2); 	// Rotword and XOR between the columns
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3320      	adds	r3, #32
 80036f4:	2202      	movs	r2, #2
 80036f6:	2108      	movs	r1, #8
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fd65 	bl	80031c8 <xor_columns>
	memcpy(rkeys+16, rkeys+8, 32);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3320      	adds	r3, #32
 8003708:	2220      	movs	r2, #32
 800370a:	4619      	mov	r1, r3
 800370c:	f003 ffc0 	bl	8007690 <memcpy>
	sbox(rkeys+16);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3340      	adds	r3, #64	@ 0x40
 8003714:	4618      	mov	r0, r3
 8003716:	f7fe fb37 	bl	8001d88 <sbox>
	rkeys[22] ^= 0x00000300;		// 2nd rconst
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3358      	adds	r3, #88	@ 0x58
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3358      	adds	r3, #88	@ 0x58
 8003724:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003728:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+16, 8, 2); 	// Rotword and XOR between the columns
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3340      	adds	r3, #64	@ 0x40
 800372e:	2202      	movs	r2, #2
 8003730:	2108      	movs	r1, #8
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fd48 	bl	80031c8 <xor_columns>
	inv_shiftrows_1(rkeys+8); 		// to match fixslicing
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3320      	adds	r3, #32
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff fc3b 	bl	8002fb8 <inv_shiftrows_1>
	memcpy(rkeys+24, rkeys+16, 32);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	3340      	adds	r3, #64	@ 0x40
 800374c:	2220      	movs	r2, #32
 800374e:	4619      	mov	r1, r3
 8003750:	f003 ff9e 	bl	8007690 <memcpy>
	// sbox(rkeys+24);
	// rkeys[29] ^= 0x00000300;		// 3rd rconst
	// xor_columns(rkeys+24, 8, 2); 	// Rotword and XOR between the columns
	inv_shiftrows_2(rkeys+16); 		// to match fixslicing
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3340      	adds	r3, #64	@ 0x40
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fc93 	bl	8003084 <inv_shiftrows_2>
	// rkeys[85] ^= 0x00000300; 		// 10th rconst
	// rkeys[83] ^= 0x00000300;		// 10th rconst
	// rkeys[82] ^= 0x00000300; 		// 10th rconst
	// xor_columns(rkeys+80, 8, 2); 	// Rotword and XOR between the columns
	// inv_shiftrows_1(rkeys+72);
	for(int i = 1; i < 3; i++) {
 800375e:	2301      	movs	r3, #1
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	e036      	b.n	80037d2 <aes128_2rounds_keyschedule_ffs+0x120>
		rkeys[i*8 + 1] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	015b      	lsls	r3, r3, #5
 8003768:	3304      	adds	r3, #4
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4413      	add	r3, r2
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	015b      	lsls	r3, r3, #5
 8003774:	3304      	adds	r3, #4
 8003776:	68f9      	ldr	r1, [r7, #12]
 8003778:	440b      	add	r3, r1
 800377a:	43d2      	mvns	r2, r2
 800377c:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 2] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	015b      	lsls	r3, r3, #5
 8003782:	3308      	adds	r3, #8
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	015b      	lsls	r3, r3, #5
 800378e:	3308      	adds	r3, #8
 8003790:	68f9      	ldr	r1, [r7, #12]
 8003792:	440b      	add	r3, r1
 8003794:	43d2      	mvns	r2, r2
 8003796:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 6] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	015b      	lsls	r3, r3, #5
 800379c:	3318      	adds	r3, #24
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4413      	add	r3, r2
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	015b      	lsls	r3, r3, #5
 80037a8:	3318      	adds	r3, #24
 80037aa:	68f9      	ldr	r1, [r7, #12]
 80037ac:	440b      	add	r3, r1
 80037ae:	43d2      	mvns	r2, r2
 80037b0:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 7] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	015b      	lsls	r3, r3, #5
 80037b6:	331c      	adds	r3, #28
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	015b      	lsls	r3, r3, #5
 80037c2:	331c      	adds	r3, #28
 80037c4:	68f9      	ldr	r1, [r7, #12]
 80037c6:	440b      	add	r3, r1
 80037c8:	43d2      	mvns	r2, r2
 80037ca:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 3; i++) {
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3301      	adds	r3, #1
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	ddc5      	ble.n	8003764 <aes128_2rounds_keyschedule_ffs+0xb2>
	}

}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <serial_printf>:
 *      Author: cuauhtemoc
 */

#include "Serial.h"

void serial_printf(UART_HandleTypeDef *huart, uint8_t *pData, uint32_t Timeout){
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b086      	sub	sp, #24
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
	uint16_t Size = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	82fb      	strh	r3, [r7, #22]
	do{
		Size++;
 80037f2:	8afb      	ldrh	r3, [r7, #22]
 80037f4:	3301      	adds	r3, #1
 80037f6:	82fb      	strh	r3, [r7, #22]
	}while(pData[Size]!='\0');
 80037f8:	8afb      	ldrh	r3, [r7, #22]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	4413      	add	r3, r2
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f6      	bne.n	80037f2 <serial_printf+0x10>
	HAL_UART_Transmit(huart, pData,Size, HAL_MAX_DELAY);
 8003804:	8afa      	ldrh	r2, [r7, #22]
 8003806:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f002 ff6f 	bl	80066f0 <HAL_UART_Transmit>
}
 8003812:	bf00      	nop
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <DWT_Init>:
static unsigned char asociated_data[plaintext_size];
static unsigned int bytes[7] = {32, 64, 128, 192, 256, 320, 512};

char buffer [1024];
unsigned int performance[REP];
void DWT_Init(void) {
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0

    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003820:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <DWT_Init+0x34>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4a0a      	ldr	r2, [pc, #40]	@ (8003850 <DWT_Init+0x34>)
 8003826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800382a:	60d3      	str	r3, [r2, #12]
    DWT->LAR = 0xC5ACCE55;
 800382c:	4b09      	ldr	r3, [pc, #36]	@ (8003854 <DWT_Init+0x38>)
 800382e:	4a0a      	ldr	r2, [pc, #40]	@ (8003858 <DWT_Init+0x3c>)
 8003830:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
    DWT->CYCCNT = 0;
 8003834:	4b07      	ldr	r3, [pc, #28]	@ (8003854 <DWT_Init+0x38>)
 8003836:	2200      	movs	r2, #0
 8003838:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800383a:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <DWT_Init+0x38>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a05      	ldr	r2, [pc, #20]	@ (8003854 <DWT_Init+0x38>)
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	6013      	str	r3, [r2, #0]
}
 8003846:	bf00      	nop
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000edf0 	.word	0xe000edf0
 8003854:	e0001000 	.word	0xe0001000
 8003858:	c5acce55 	.word	0xc5acce55

0800385c <start_timer>:

void start_timer(void) {
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0;
 8003860:	4b03      	ldr	r3, [pc, #12]	@ (8003870 <start_timer+0x14>)
 8003862:	2200      	movs	r2, #0
 8003864:	605a      	str	r2, [r3, #4]
}
 8003866:	bf00      	nop
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	e0001000 	.word	0xe0001000

08003874 <stop_timer>:

uint32_t stop_timer(void) {
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 8003878:	4b03      	ldr	r3, [pc, #12]	@ (8003888 <stop_timer+0x14>)
 800387a:	685b      	ldr	r3, [r3, #4]
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	e0001000 	.word	0xe0001000

0800388c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b090      	sub	sp, #64	@ 0x40
 8003890:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003892:	f000 fe7a 	bl	800458a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003896:	f000 fa65 	bl	8003d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800389a:	f000 fb77 	bl	8003f8c <MX_GPIO_Init>
  MX_ETH_Init();
 800389e:	f000 fac9 	bl	8003e34 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80038a2:	f000 fb15 	bl	8003ed0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80038a6:	f000 fb43 	bl	8003f30 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */


  for (size_t i = 0; i < plaintext_size; i++)
 80038aa:	2300      	movs	r3, #0
 80038ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ae:	e010      	b.n	80038d2 <main+0x46>
  {
	  plaintext[i] =i;
 80038b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b2:	b2d9      	uxtb	r1, r3
 80038b4:	4a9b      	ldr	r2, [pc, #620]	@ (8003b24 <main+0x298>)
 80038b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b8:	4413      	add	r3, r2
 80038ba:	460a      	mov	r2, r1
 80038bc:	701a      	strb	r2, [r3, #0]
	  asociated_data[i]=i;
 80038be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c0:	b2d9      	uxtb	r1, r3
 80038c2:	4a99      	ldr	r2, [pc, #612]	@ (8003b28 <main+0x29c>)
 80038c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c6:	4413      	add	r3, r2
 80038c8:	460a      	mov	r2, r1
 80038ca:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < plaintext_size; i++)
 80038cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ce:	3301      	adds	r3, #1
 80038d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038d8:	d3ea      	bcc.n	80038b0 <main+0x24>
  }

  DWT_Init(); // Inicializar el contador de ciclos
 80038da:	f7ff ff9f 	bl	800381c <DWT_Init>
  uint32_t cycles=0;
 80038de:	2300      	movs	r3, #0
 80038e0:	607b      	str	r3, [r7, #4]
  uint32_t total_cycles=0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  int i=0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	627b      	str	r3, [r7, #36]	@ 0x24





    i=0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24
    cycles=0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
    total_cycles=0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	sprintf(buffer,"\n PMAC-OCBRA");
 80038f6:	498d      	ldr	r1, [pc, #564]	@ (8003b2c <main+0x2a0>)
 80038f8:	488d      	ldr	r0, [pc, #564]	@ (8003b30 <main+0x2a4>)
 80038fa:	f003 fe75 	bl	80075e8 <siprintf>
		serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 80038fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003902:	498b      	ldr	r1, [pc, #556]	@ (8003b30 <main+0x2a4>)
 8003904:	488b      	ldr	r0, [pc, #556]	@ (8003b34 <main+0x2a8>)
 8003906:	f7ff ff6c 	bl	80037e2 <serial_printf>
		for (int j = 0; j < Number_test; j++) {
 800390a:	2300      	movs	r3, #0
 800390c:	623b      	str	r3, [r7, #32]
 800390e:	e02a      	b.n	8003966 <main+0xda>
			for (i = 0; i < REP; i++) {
 8003910:	2300      	movs	r3, #0
 8003912:	627b      	str	r3, [r7, #36]	@ 0x24
 8003914:	e016      	b.n	8003944 <main+0xb8>
				start_timer(); // Iniciar el contador de ciclos
 8003916:	f7ff ffa1 	bl	800385c <start_timer>
				PMAC(nonce, asociated_data, bytes[j], key1, tag);
 800391a:	4a87      	ldr	r2, [pc, #540]	@ (8003b38 <main+0x2ac>)
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003922:	4b86      	ldr	r3, [pc, #536]	@ (8003b3c <main+0x2b0>)
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	4b86      	ldr	r3, [pc, #536]	@ (8003b40 <main+0x2b4>)
 8003928:	497f      	ldr	r1, [pc, #508]	@ (8003b28 <main+0x29c>)
 800392a:	4886      	ldr	r0, [pc, #536]	@ (8003b44 <main+0x2b8>)
 800392c:	f7fd f8e4 	bl	8000af8 <PMAC>
				cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 8003930:	f7ff ffa0 	bl	8003874 <stop_timer>
 8003934:	6078      	str	r0, [r7, #4]
				  total_cycles=cycles+total_cycles;
 8003936:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4413      	add	r3, r2
 800393c:	62bb      	str	r3, [r7, #40]	@ 0x28
			for (i = 0; i < REP; i++) {
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	3301      	adds	r3, #1
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	2b63      	cmp	r3, #99	@ 0x63
 8003948:	dde5      	ble.n	8003916 <main+0x8a>
			  }
			  performance[j] = total_cycles/REP;
 800394a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394c:	4a7e      	ldr	r2, [pc, #504]	@ (8003b48 <main+0x2bc>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	095a      	lsrs	r2, r3, #5
 8003954:	497d      	ldr	r1, [pc, #500]	@ (8003b4c <main+0x2c0>)
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  total_cycles=0;
 800395c:	2300      	movs	r3, #0
 800395e:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (int j = 0; j < Number_test; j++) {
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	3301      	adds	r3, #1
 8003964:	623b      	str	r3, [r7, #32]
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	2b06      	cmp	r3, #6
 800396a:	ddd1      	ble.n	8003910 <main+0x84>
		  }
	  for (i = 0; i < Number_test; i++) {
 800396c:	2300      	movs	r3, #0
 800396e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003970:	e020      	b.n	80039b4 <main+0x128>
			sprintf(buffer,"\n bytes %u ", bytes[i]);
 8003972:	4a71      	ldr	r2, [pc, #452]	@ (8003b38 <main+0x2ac>)
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397a:	461a      	mov	r2, r3
 800397c:	4974      	ldr	r1, [pc, #464]	@ (8003b50 <main+0x2c4>)
 800397e:	486c      	ldr	r0, [pc, #432]	@ (8003b30 <main+0x2a4>)
 8003980:	f003 fe32 	bl	80075e8 <siprintf>
			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003984:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003988:	4969      	ldr	r1, [pc, #420]	@ (8003b30 <main+0x2a4>)
 800398a:	486a      	ldr	r0, [pc, #424]	@ (8003b34 <main+0x2a8>)
 800398c:	f7ff ff29 	bl	80037e2 <serial_printf>
			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 8003990:	4a6e      	ldr	r2, [pc, #440]	@ (8003b4c <main+0x2c0>)
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800399a:	496e      	ldr	r1, [pc, #440]	@ (8003b54 <main+0x2c8>)
 800399c:	4864      	ldr	r0, [pc, #400]	@ (8003b30 <main+0x2a4>)
 800399e:	f003 fe23 	bl	80075e8 <siprintf>
			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 80039a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039a6:	4962      	ldr	r1, [pc, #392]	@ (8003b30 <main+0x2a4>)
 80039a8:	4862      	ldr	r0, [pc, #392]	@ (8003b34 <main+0x2a8>)
 80039aa:	f7ff ff1a 	bl	80037e2 <serial_printf>
	  for (i = 0; i < Number_test; i++) {
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	3301      	adds	r3, #1
 80039b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	2b06      	cmp	r3, #6
 80039b8:	dddb      	ble.n	8003972 <main+0xe6>
	   }


	  i=0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	627b      	str	r3, [r7, #36]	@ 0x24
	  cycles=0;
 80039be:	2300      	movs	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]
	  total_cycles=0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	  for (size_t i = 0; i < plaintext_size; i++)
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	e010      	b.n	80039ee <main+0x162>
		  {
			  plaintext[i] =i;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	b2d9      	uxtb	r1, r3
 80039d0:	4a54      	ldr	r2, [pc, #336]	@ (8003b24 <main+0x298>)
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	460a      	mov	r2, r1
 80039d8:	701a      	strb	r2, [r3, #0]
			  asociated_data[i]=i;
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	b2d9      	uxtb	r1, r3
 80039de:	4a52      	ldr	r2, [pc, #328]	@ (8003b28 <main+0x29c>)
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	4413      	add	r3, r2
 80039e4:	460a      	mov	r2, r1
 80039e6:	701a      	strb	r2, [r3, #0]
	  for (size_t i = 0; i < plaintext_size; i++)
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	3301      	adds	r3, #1
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f4:	d3ea      	bcc.n	80039cc <main+0x140>
		  }
		   i=0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	627b      	str	r3, [r7, #36]	@ 0x24
		   cycles=0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	607b      	str	r3, [r7, #4]
		   total_cycles=0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	62bb      	str	r3, [r7, #40]	@ 0x28
			sprintf(buffer,"\n PMAC_1");
 8003a02:	4955      	ldr	r1, [pc, #340]	@ (8003b58 <main+0x2cc>)
 8003a04:	484a      	ldr	r0, [pc, #296]	@ (8003b30 <main+0x2a4>)
 8003a06:	f003 fdef 	bl	80075e8 <siprintf>
				serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003a0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a0e:	4948      	ldr	r1, [pc, #288]	@ (8003b30 <main+0x2a4>)
 8003a10:	4848      	ldr	r0, [pc, #288]	@ (8003b34 <main+0x2a8>)
 8003a12:	f7ff fee6 	bl	80037e2 <serial_printf>
				for (int j = 0; j < Number_test; j++) {
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	e02a      	b.n	8003a72 <main+0x1e6>
					for (i = 0; i < REP; i++) {
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a20:	e016      	b.n	8003a50 <main+0x1c4>
						start_timer(); // Iniciar el contador de ciclos
 8003a22:	f7ff ff1b 	bl	800385c <start_timer>
						PMAC_1(nonce, asociated_data, bytes[j], key1, tag);
 8003a26:	4a44      	ldr	r2, [pc, #272]	@ (8003b38 <main+0x2ac>)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a2e:	4b43      	ldr	r3, [pc, #268]	@ (8003b3c <main+0x2b0>)
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	4b43      	ldr	r3, [pc, #268]	@ (8003b40 <main+0x2b4>)
 8003a34:	493c      	ldr	r1, [pc, #240]	@ (8003b28 <main+0x29c>)
 8003a36:	4843      	ldr	r0, [pc, #268]	@ (8003b44 <main+0x2b8>)
 8003a38:	f7fd fa1a 	bl	8000e70 <PMAC_1>
						cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 8003a3c:	f7ff ff1a 	bl	8003874 <stop_timer>
 8003a40:	6078      	str	r0, [r7, #4]
					    total_cycles=cycles+total_cycles;
 8003a42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4413      	add	r3, r2
 8003a48:	62bb      	str	r3, [r7, #40]	@ 0x28
					for (i = 0; i < REP; i++) {
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	2b63      	cmp	r3, #99	@ 0x63
 8003a54:	dde5      	ble.n	8003a22 <main+0x196>
				    }
			  performance[j] = total_cycles/REP;
 8003a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a58:	4a3b      	ldr	r2, [pc, #236]	@ (8003b48 <main+0x2bc>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	095a      	lsrs	r2, r3, #5
 8003a60:	493a      	ldr	r1, [pc, #232]	@ (8003b4c <main+0x2c0>)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  total_cycles=0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
				for (int j = 0; j < Number_test; j++) {
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b06      	cmp	r3, #6
 8003a76:	ddd1      	ble.n	8003a1c <main+0x190>
			  }
		  for (i = 0; i < Number_test; i++) {
 8003a78:	2300      	movs	r3, #0
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a7c:	e020      	b.n	8003ac0 <main+0x234>
				sprintf(buffer,"\n bytes %u ", bytes[i]);
 8003a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8003b38 <main+0x2ac>)
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a86:	461a      	mov	r2, r3
 8003a88:	4931      	ldr	r1, [pc, #196]	@ (8003b50 <main+0x2c4>)
 8003a8a:	4829      	ldr	r0, [pc, #164]	@ (8003b30 <main+0x2a4>)
 8003a8c:	f003 fdac 	bl	80075e8 <siprintf>
				serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003a90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a94:	4926      	ldr	r1, [pc, #152]	@ (8003b30 <main+0x2a4>)
 8003a96:	4827      	ldr	r0, [pc, #156]	@ (8003b34 <main+0x2a8>)
 8003a98:	f7ff fea3 	bl	80037e2 <serial_printf>
				sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 8003a9c:	4a2b      	ldr	r2, [pc, #172]	@ (8003b4c <main+0x2c0>)
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa6:	492b      	ldr	r1, [pc, #172]	@ (8003b54 <main+0x2c8>)
 8003aa8:	4821      	ldr	r0, [pc, #132]	@ (8003b30 <main+0x2a4>)
 8003aaa:	f003 fd9d 	bl	80075e8 <siprintf>
				serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003aae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ab2:	491f      	ldr	r1, [pc, #124]	@ (8003b30 <main+0x2a4>)
 8003ab4:	481f      	ldr	r0, [pc, #124]	@ (8003b34 <main+0x2a8>)
 8003ab6:	f7ff fe94 	bl	80037e2 <serial_printf>
		  for (i = 0; i < Number_test; i++) {
 8003aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abc:	3301      	adds	r3, #1
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	2b06      	cmp	r3, #6
 8003ac4:	dddb      	ble.n	8003a7e <main+0x1f2>
		   }

	  for (size_t i = 0; i < plaintext_size; i++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	e010      	b.n	8003aee <main+0x262>
		  {
			  plaintext[i] =i;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	b2d9      	uxtb	r1, r3
 8003ad0:	4a14      	ldr	r2, [pc, #80]	@ (8003b24 <main+0x298>)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	460a      	mov	r2, r1
 8003ad8:	701a      	strb	r2, [r3, #0]
			  asociated_data[i]=i;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	b2d9      	uxtb	r1, r3
 8003ade:	4a12      	ldr	r2, [pc, #72]	@ (8003b28 <main+0x29c>)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	460a      	mov	r2, r1
 8003ae6:	701a      	strb	r2, [r3, #0]
	  for (size_t i = 0; i < plaintext_size; i++)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	3301      	adds	r3, #1
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af4:	d3ea      	bcc.n	8003acc <main+0x240>
		  }
		i=0;
 8003af6:	2300      	movs	r3, #0
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24
		cycles=0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	607b      	str	r3, [r7, #4]
		total_cycles=0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	62bb      	str	r3, [r7, #40]	@ 0x28
		sprintf(buffer,"\n OCBRA ENC");
 8003b02:	4916      	ldr	r1, [pc, #88]	@ (8003b5c <main+0x2d0>)
 8003b04:	480a      	ldr	r0, [pc, #40]	@ (8003b30 <main+0x2a4>)
 8003b06:	f003 fd6f 	bl	80075e8 <siprintf>
			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003b0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b0e:	4908      	ldr	r1, [pc, #32]	@ (8003b30 <main+0x2a4>)
 8003b10:	4808      	ldr	r0, [pc, #32]	@ (8003b34 <main+0x2a8>)
 8003b12:	f7ff fe66 	bl	80037e2 <serial_printf>
			for (int j = 0; j < Number_test; j++) {
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	e04f      	b.n	8003bbc <main+0x330>
				for (i = 0; i < REP; i++) {
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b20:	e03b      	b.n	8003b9a <main+0x30e>
 8003b22:	bf00      	nop
 8003b24:	2000087c 	.word	0x2000087c
 8003b28:	2000287c 	.word	0x2000287c
 8003b2c:	08007fb4 	.word	0x08007fb4
 8003b30:	2000387c 	.word	0x2000387c
 8003b34:	200002dc 	.word	0x200002dc
 8003b38:	20000020 	.word	0x20000020
 8003b3c:	2000086c 	.word	0x2000086c
 8003b40:	20000000 	.word	0x20000000
 8003b44:	20000010 	.word	0x20000010
 8003b48:	51eb851f 	.word	0x51eb851f
 8003b4c:	20003c7c 	.word	0x20003c7c
 8003b50:	08007fc4 	.word	0x08007fc4
 8003b54:	08007fd0 	.word	0x08007fd0
 8003b58:	08007fe8 	.word	0x08007fe8
 8003b5c:	08007ff4 	.word	0x08007ff4
					start_timer(); // Iniciar el contador de ciclos
 8003b60:	f7ff fe7c 	bl	800385c <start_timer>
					OCB(plaintext, ciphertext, nonce, asociated_data, bytes[j], 0, key1, tag);
 8003b64:	4a71      	ldr	r2, [pc, #452]	@ (8003d2c <main+0x4a0>)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b6c:	4a70      	ldr	r2, [pc, #448]	@ (8003d30 <main+0x4a4>)
 8003b6e:	9203      	str	r2, [sp, #12]
 8003b70:	4a70      	ldr	r2, [pc, #448]	@ (8003d34 <main+0x4a8>)
 8003b72:	9202      	str	r2, [sp, #8]
 8003b74:	2200      	movs	r2, #0
 8003b76:	9201      	str	r2, [sp, #4]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	4b6f      	ldr	r3, [pc, #444]	@ (8003d38 <main+0x4ac>)
 8003b7c:	4a6f      	ldr	r2, [pc, #444]	@ (8003d3c <main+0x4b0>)
 8003b7e:	4970      	ldr	r1, [pc, #448]	@ (8003d40 <main+0x4b4>)
 8003b80:	4870      	ldr	r0, [pc, #448]	@ (8003d44 <main+0x4b8>)
 8003b82:	f7fc fd0d 	bl	80005a0 <OCB>
					cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 8003b86:	f7ff fe75 	bl	8003874 <stop_timer>
 8003b8a:	6078      	str	r0, [r7, #4]
					total_cycles=cycles+total_cycles;
 8003b8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4413      	add	r3, r2
 8003b92:	62bb      	str	r3, [r7, #40]	@ 0x28
				for (i = 0; i < REP; i++) {
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	3301      	adds	r3, #1
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	2b63      	cmp	r3, #99	@ 0x63
 8003b9e:	dddf      	ble.n	8003b60 <main+0x2d4>
				  }
				  performance[j] = total_cycles/REP;
 8003ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba2:	4a69      	ldr	r2, [pc, #420]	@ (8003d48 <main+0x4bc>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	095a      	lsrs	r2, r3, #5
 8003baa:	4968      	ldr	r1, [pc, #416]	@ (8003d4c <main+0x4c0>)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  total_cycles=0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
			for (int j = 0; j < Number_test; j++) {
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	2b06      	cmp	r3, #6
 8003bc0:	ddac      	ble.n	8003b1c <main+0x290>
			  }
		  for (i = 0; i < Number_test; i++) {
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc6:	e020      	b.n	8003c0a <main+0x37e>
				sprintf(buffer,"\n bytes %u ", bytes[i]);
 8003bc8:	4a58      	ldr	r2, [pc, #352]	@ (8003d2c <main+0x4a0>)
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	495f      	ldr	r1, [pc, #380]	@ (8003d50 <main+0x4c4>)
 8003bd4:	485f      	ldr	r0, [pc, #380]	@ (8003d54 <main+0x4c8>)
 8003bd6:	f003 fd07 	bl	80075e8 <siprintf>
				serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003bda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003bde:	495d      	ldr	r1, [pc, #372]	@ (8003d54 <main+0x4c8>)
 8003be0:	485d      	ldr	r0, [pc, #372]	@ (8003d58 <main+0x4cc>)
 8003be2:	f7ff fdfe 	bl	80037e2 <serial_printf>
				sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 8003be6:	4a59      	ldr	r2, [pc, #356]	@ (8003d4c <main+0x4c0>)
 8003be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf0:	495a      	ldr	r1, [pc, #360]	@ (8003d5c <main+0x4d0>)
 8003bf2:	4858      	ldr	r0, [pc, #352]	@ (8003d54 <main+0x4c8>)
 8003bf4:	f003 fcf8 	bl	80075e8 <siprintf>
				serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003bf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003bfc:	4955      	ldr	r1, [pc, #340]	@ (8003d54 <main+0x4c8>)
 8003bfe:	4856      	ldr	r0, [pc, #344]	@ (8003d58 <main+0x4cc>)
 8003c00:	f7ff fdef 	bl	80037e2 <serial_printf>
		  for (i = 0; i < Number_test; i++) {
 8003c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c06:	3301      	adds	r3, #1
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	2b06      	cmp	r3, #6
 8003c0e:	dddb      	ble.n	8003bc8 <main+0x33c>
		   }

	  for (size_t i = 0; i < plaintext_size; i++)
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e010      	b.n	8003c38 <main+0x3ac>
	  {
		  plaintext[i] =i;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	b2d9      	uxtb	r1, r3
 8003c1a:	4a4a      	ldr	r2, [pc, #296]	@ (8003d44 <main+0x4b8>)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	460a      	mov	r2, r1
 8003c22:	701a      	strb	r2, [r3, #0]
		  asociated_data[i]=i;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	b2d9      	uxtb	r1, r3
 8003c28:	4a43      	ldr	r2, [pc, #268]	@ (8003d38 <main+0x4ac>)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	460a      	mov	r2, r1
 8003c30:	701a      	strb	r2, [r3, #0]
	  for (size_t i = 0; i < plaintext_size; i++)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3301      	adds	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c3e:	d3ea      	bcc.n	8003c16 <main+0x38a>
	  }

	i=0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	627b      	str	r3, [r7, #36]	@ 0x24
	cycles=0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	607b      	str	r3, [r7, #4]
	total_cycles=0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sprintf(buffer,"\n OCBRA+PMACRA ENC");
 8003c4c:	4944      	ldr	r1, [pc, #272]	@ (8003d60 <main+0x4d4>)
 8003c4e:	4841      	ldr	r0, [pc, #260]	@ (8003d54 <main+0x4c8>)
 8003c50:	f003 fcca 	bl	80075e8 <siprintf>
		serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003c54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c58:	493e      	ldr	r1, [pc, #248]	@ (8003d54 <main+0x4c8>)
 8003c5a:	483f      	ldr	r0, [pc, #252]	@ (8003d58 <main+0x4cc>)
 8003c5c:	f7ff fdc1 	bl	80037e2 <serial_printf>
		for (int j = 0; j < Number_test; j++) {
 8003c60:	2300      	movs	r3, #0
 8003c62:	60bb      	str	r3, [r7, #8]
 8003c64:	e033      	b.n	8003cce <main+0x442>
			for (i = 0; i < REP; i++) {
 8003c66:	2300      	movs	r3, #0
 8003c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c6a:	e01f      	b.n	8003cac <main+0x420>
				start_timer(); // Iniciar el contador de ciclos
 8003c6c:	f7ff fdf6 	bl	800385c <start_timer>
				OCB(plaintext, ciphertext, nonce, asociated_data, bytes[j], bytes[j], key1, tag);
 8003c70:	4a2e      	ldr	r2, [pc, #184]	@ (8003d2c <main+0x4a0>)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c78:	492c      	ldr	r1, [pc, #176]	@ (8003d2c <main+0x4a0>)
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003c80:	492b      	ldr	r1, [pc, #172]	@ (8003d30 <main+0x4a4>)
 8003c82:	9103      	str	r1, [sp, #12]
 8003c84:	492b      	ldr	r1, [pc, #172]	@ (8003d34 <main+0x4a8>)
 8003c86:	9102      	str	r1, [sp, #8]
 8003c88:	9201      	str	r2, [sp, #4]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8003d38 <main+0x4ac>)
 8003c8e:	4a2b      	ldr	r2, [pc, #172]	@ (8003d3c <main+0x4b0>)
 8003c90:	492b      	ldr	r1, [pc, #172]	@ (8003d40 <main+0x4b4>)
 8003c92:	482c      	ldr	r0, [pc, #176]	@ (8003d44 <main+0x4b8>)
 8003c94:	f7fc fc84 	bl	80005a0 <OCB>
				cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 8003c98:	f7ff fdec 	bl	8003874 <stop_timer>
 8003c9c:	6078      	str	r0, [r7, #4]
				total_cycles=cycles+total_cycles;
 8003c9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
			for (i = 0; i < REP; i++) {
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	3301      	adds	r3, #1
 8003caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	2b63      	cmp	r3, #99	@ 0x63
 8003cb0:	dddc      	ble.n	8003c6c <main+0x3e0>
			}
			performance[j] = total_cycles/REP;
 8003cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb4:	4a24      	ldr	r2, [pc, #144]	@ (8003d48 <main+0x4bc>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	095a      	lsrs	r2, r3, #5
 8003cbc:	4923      	ldr	r1, [pc, #140]	@ (8003d4c <main+0x4c0>)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			total_cycles=0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (int j = 0; j < Number_test; j++) {
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b06      	cmp	r3, #6
 8003cd2:	ddc8      	ble.n	8003c66 <main+0x3da>
		}
	  for (i = 0; i < Number_test; i++) {
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd8:	e020      	b.n	8003d1c <main+0x490>
			sprintf(buffer,"\n bytes %u ", bytes[i]);
 8003cda:	4a14      	ldr	r2, [pc, #80]	@ (8003d2c <main+0x4a0>)
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	491a      	ldr	r1, [pc, #104]	@ (8003d50 <main+0x4c4>)
 8003ce6:	481b      	ldr	r0, [pc, #108]	@ (8003d54 <main+0x4c8>)
 8003ce8:	f003 fc7e 	bl	80075e8 <siprintf>
			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003cec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003cf0:	4918      	ldr	r1, [pc, #96]	@ (8003d54 <main+0x4c8>)
 8003cf2:	4819      	ldr	r0, [pc, #100]	@ (8003d58 <main+0x4cc>)
 8003cf4:	f7ff fd75 	bl	80037e2 <serial_printf>
			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 8003cf8:	4a14      	ldr	r2, [pc, #80]	@ (8003d4c <main+0x4c0>)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d02:	4916      	ldr	r1, [pc, #88]	@ (8003d5c <main+0x4d0>)
 8003d04:	4813      	ldr	r0, [pc, #76]	@ (8003d54 <main+0x4c8>)
 8003d06:	f003 fc6f 	bl	80075e8 <siprintf>
			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003d0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d0e:	4911      	ldr	r1, [pc, #68]	@ (8003d54 <main+0x4c8>)
 8003d10:	4811      	ldr	r0, [pc, #68]	@ (8003d58 <main+0x4cc>)
 8003d12:	f7ff fd66 	bl	80037e2 <serial_printf>
	  for (i = 0; i < Number_test; i++) {
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	3301      	adds	r3, #1
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	dddb      	ble.n	8003cda <main+0x44e>
 8003d22:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3730      	adds	r7, #48	@ 0x30
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000020 	.word	0x20000020
 8003d30:	2000086c 	.word	0x2000086c
 8003d34:	20000000 	.word	0x20000000
 8003d38:	2000287c 	.word	0x2000287c
 8003d3c:	20000010 	.word	0x20000010
 8003d40:	2000187c 	.word	0x2000187c
 8003d44:	2000087c 	.word	0x2000087c
 8003d48:	51eb851f 	.word	0x51eb851f
 8003d4c:	20003c7c 	.word	0x20003c7c
 8003d50:	08007fc4 	.word	0x08007fc4
 8003d54:	2000387c 	.word	0x2000387c
 8003d58:	200002dc 	.word	0x200002dc
 8003d5c:	08007fd0 	.word	0x08007fd0
 8003d60:	08008000 	.word	0x08008000

08003d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b094      	sub	sp, #80	@ 0x50
 8003d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d6a:	f107 0320 	add.w	r3, r7, #32
 8003d6e:	2230      	movs	r2, #48	@ 0x30
 8003d70:	2100      	movs	r1, #0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f003 fc58 	bl	8007628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d78:	f107 030c 	add.w	r3, r7, #12
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	60da      	str	r2, [r3, #12]
 8003d86:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003d88:	f001 fb9a 	bl	80054c0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d8c:	4b27      	ldr	r3, [pc, #156]	@ (8003e2c <SystemClock_Config+0xc8>)
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	4a26      	ldr	r2, [pc, #152]	@ (8003e2c <SystemClock_Config+0xc8>)
 8003d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d96:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d98:	4b24      	ldr	r3, [pc, #144]	@ (8003e2c <SystemClock_Config+0xc8>)
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003da4:	4b22      	ldr	r3, [pc, #136]	@ (8003e30 <SystemClock_Config+0xcc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003dac:	4a20      	ldr	r2, [pc, #128]	@ (8003e30 <SystemClock_Config+0xcc>)
 8003dae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e30 <SystemClock_Config+0xcc>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003dc4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003dce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003dd8:	2348      	movs	r3, #72	@ 0x48
 8003dda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003de0:	2303      	movs	r3, #3
 8003de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003de4:	f107 0320 	add.w	r3, r7, #32
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 fb79 	bl	80054e0 <HAL_RCC_OscConfig>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003df4:	f000 f96c 	bl	80040d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003df8:	230f      	movs	r3, #15
 8003dfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e0e:	f107 030c 	add.w	r3, r7, #12
 8003e12:	2102      	movs	r1, #2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f001 fe07 	bl	8005a28 <HAL_RCC_ClockConfig>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003e20:	f000 f956 	bl	80040d0 <Error_Handler>
  }
}
 8003e24:	bf00      	nop
 8003e26:	3750      	adds	r7, #80	@ 0x50
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40007000 	.word	0x40007000

08003e34 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8003e38:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb8 <MX_ETH_Init+0x84>)
 8003e3a:	4a20      	ldr	r2, [pc, #128]	@ (8003ebc <MX_ETH_Init+0x88>)
 8003e3c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003e3e:	4b20      	ldr	r3, [pc, #128]	@ (8003ec0 <MX_ETH_Init+0x8c>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003e44:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec0 <MX_ETH_Init+0x8c>)
 8003e46:	2280      	movs	r2, #128	@ 0x80
 8003e48:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8003e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec0 <MX_ETH_Init+0x8c>)
 8003e4c:	22e1      	movs	r2, #225	@ 0xe1
 8003e4e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8003e50:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec0 <MX_ETH_Init+0x8c>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8003e56:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec0 <MX_ETH_Init+0x8c>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8003e5c:	4b18      	ldr	r3, [pc, #96]	@ (8003ec0 <MX_ETH_Init+0x8c>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003e62:	4b15      	ldr	r3, [pc, #84]	@ (8003eb8 <MX_ETH_Init+0x84>)
 8003e64:	4a16      	ldr	r2, [pc, #88]	@ (8003ec0 <MX_ETH_Init+0x8c>)
 8003e66:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003e68:	4b13      	ldr	r3, [pc, #76]	@ (8003eb8 <MX_ETH_Init+0x84>)
 8003e6a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003e6e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003e70:	4b11      	ldr	r3, [pc, #68]	@ (8003eb8 <MX_ETH_Init+0x84>)
 8003e72:	4a14      	ldr	r2, [pc, #80]	@ (8003ec4 <MX_ETH_Init+0x90>)
 8003e74:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003e76:	4b10      	ldr	r3, [pc, #64]	@ (8003eb8 <MX_ETH_Init+0x84>)
 8003e78:	4a13      	ldr	r2, [pc, #76]	@ (8003ec8 <MX_ETH_Init+0x94>)
 8003e7a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8003e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb8 <MX_ETH_Init+0x84>)
 8003e7e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8003e82:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8003e84:	480c      	ldr	r0, [pc, #48]	@ (8003eb8 <MX_ETH_Init+0x84>)
 8003e86:	f000 fce7 	bl	8004858 <HAL_ETH_Init>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8003e90:	f000 f91e 	bl	80040d0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003e94:	2238      	movs	r2, #56	@ 0x38
 8003e96:	2100      	movs	r1, #0
 8003e98:	480c      	ldr	r0, [pc, #48]	@ (8003ecc <MX_ETH_Init+0x98>)
 8003e9a:	f003 fbc5 	bl	8007628 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003ecc <MX_ETH_Init+0x98>)
 8003ea0:	2221      	movs	r2, #33	@ 0x21
 8003ea2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003ea4:	4b09      	ldr	r3, [pc, #36]	@ (8003ecc <MX_ETH_Init+0x98>)
 8003ea6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003eaa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003eac:	4b07      	ldr	r3, [pc, #28]	@ (8003ecc <MX_ETH_Init+0x98>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8003eb2:	bf00      	nop
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	2000022c 	.word	0x2000022c
 8003ebc:	40028000 	.word	0x40028000
 8003ec0:	20003e0c 	.word	0x20003e0c
 8003ec4:	20000138 	.word	0x20000138
 8003ec8:	20000098 	.word	0x20000098
 8003ecc:	200001f4 	.word	0x200001f4

08003ed0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ed4:	4b14      	ldr	r3, [pc, #80]	@ (8003f28 <MX_USART3_UART_Init+0x58>)
 8003ed6:	4a15      	ldr	r2, [pc, #84]	@ (8003f2c <MX_USART3_UART_Init+0x5c>)
 8003ed8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003eda:	4b13      	ldr	r3, [pc, #76]	@ (8003f28 <MX_USART3_UART_Init+0x58>)
 8003edc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ee0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003ee2:	4b11      	ldr	r3, [pc, #68]	@ (8003f28 <MX_USART3_UART_Init+0x58>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f28 <MX_USART3_UART_Init+0x58>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003eee:	4b0e      	ldr	r3, [pc, #56]	@ (8003f28 <MX_USART3_UART_Init+0x58>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f28 <MX_USART3_UART_Init+0x58>)
 8003ef6:	220c      	movs	r2, #12
 8003ef8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003efa:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <MX_USART3_UART_Init+0x58>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f00:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <MX_USART3_UART_Init+0x58>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f06:	4b08      	ldr	r3, [pc, #32]	@ (8003f28 <MX_USART3_UART_Init+0x58>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f0c:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <MX_USART3_UART_Init+0x58>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003f12:	4805      	ldr	r0, [pc, #20]	@ (8003f28 <MX_USART3_UART_Init+0x58>)
 8003f14:	f002 fb9e 	bl	8006654 <HAL_UART_Init>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003f1e:	f000 f8d7 	bl	80040d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200002dc 	.word	0x200002dc
 8003f2c:	40004800 	.word	0x40004800

08003f30 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003f34:	4b14      	ldr	r3, [pc, #80]	@ (8003f88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f36:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003f3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003f3c:	4b12      	ldr	r3, [pc, #72]	@ (8003f88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f3e:	2206      	movs	r2, #6
 8003f40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003f42:	4b11      	ldr	r3, [pc, #68]	@ (8003f88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f44:	2202      	movs	r2, #2
 8003f46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003f48:	4b0f      	ldr	r3, [pc, #60]	@ (8003f88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f50:	2202      	movs	r2, #2
 8003f52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003f54:	4b0c      	ldr	r3, [pc, #48]	@ (8003f88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003f60:	4b09      	ldr	r3, [pc, #36]	@ (8003f88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003f66:	4b08      	ldr	r3, [pc, #32]	@ (8003f88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003f6c:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003f72:	4805      	ldr	r0, [pc, #20]	@ (8003f88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003f74:	f001 f95b 	bl	800522e <HAL_PCD_Init>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003f7e:	f000 f8a7 	bl	80040d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000364 	.word	0x20000364

08003f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08c      	sub	sp, #48	@ 0x30
 8003f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f92:	f107 031c 	add.w	r3, r7, #28
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	605a      	str	r2, [r3, #4]
 8003f9c:	609a      	str	r2, [r3, #8]
 8003f9e:	60da      	str	r2, [r3, #12]
 8003fa0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa2:	4b47      	ldr	r3, [pc, #284]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa6:	4a46      	ldr	r2, [pc, #280]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8003fa8:	f043 0304 	orr.w	r3, r3, #4
 8003fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fae:	4b44      	ldr	r3, [pc, #272]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	61bb      	str	r3, [r7, #24]
 8003fb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fba:	4b41      	ldr	r3, [pc, #260]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	4a40      	ldr	r2, [pc, #256]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8003fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	4a3a      	ldr	r2, [pc, #232]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fde:	4b38      	ldr	r3, [pc, #224]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fea:	4b35      	ldr	r3, [pc, #212]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fee:	4a34      	ldr	r2, [pc, #208]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8003ff0:	f043 0302 	orr.w	r3, r3, #2
 8003ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ff6:	4b32      	ldr	r3, [pc, #200]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004002:	4b2f      	ldr	r3, [pc, #188]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	4a2e      	ldr	r2, [pc, #184]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8004008:	f043 0308 	orr.w	r3, r3, #8
 800400c:	6313      	str	r3, [r2, #48]	@ 0x30
 800400e:	4b2c      	ldr	r3, [pc, #176]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800401a:	4b29      	ldr	r3, [pc, #164]	@ (80040c0 <MX_GPIO_Init+0x134>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401e:	4a28      	ldr	r2, [pc, #160]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8004020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004024:	6313      	str	r3, [r2, #48]	@ 0x30
 8004026:	4b26      	ldr	r3, [pc, #152]	@ (80040c0 <MX_GPIO_Init+0x134>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402e:	607b      	str	r3, [r7, #4]
 8004030:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004032:	2200      	movs	r2, #0
 8004034:	f244 0181 	movw	r1, #16513	@ 0x4081
 8004038:	4822      	ldr	r0, [pc, #136]	@ (80040c4 <MX_GPIO_Init+0x138>)
 800403a:	f001 f8df 	bl	80051fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800403e:	2200      	movs	r2, #0
 8004040:	2140      	movs	r1, #64	@ 0x40
 8004042:	4821      	ldr	r0, [pc, #132]	@ (80040c8 <MX_GPIO_Init+0x13c>)
 8004044:	f001 f8da 	bl	80051fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004048:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800404c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800404e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004054:	2300      	movs	r3, #0
 8004056:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004058:	f107 031c 	add.w	r3, r7, #28
 800405c:	4619      	mov	r1, r3
 800405e:	481b      	ldr	r0, [pc, #108]	@ (80040cc <MX_GPIO_Init+0x140>)
 8004060:	f000 ff20 	bl	8004ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8004064:	f244 0381 	movw	r3, #16513	@ 0x4081
 8004068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800406a:	2301      	movs	r3, #1
 800406c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406e:	2300      	movs	r3, #0
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004072:	2300      	movs	r3, #0
 8004074:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004076:	f107 031c 	add.w	r3, r7, #28
 800407a:	4619      	mov	r1, r3
 800407c:	4811      	ldr	r0, [pc, #68]	@ (80040c4 <MX_GPIO_Init+0x138>)
 800407e:	f000 ff11 	bl	8004ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004082:	2340      	movs	r3, #64	@ 0x40
 8004084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004086:	2301      	movs	r3, #1
 8004088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408e:	2300      	movs	r3, #0
 8004090:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004092:	f107 031c 	add.w	r3, r7, #28
 8004096:	4619      	mov	r1, r3
 8004098:	480b      	ldr	r0, [pc, #44]	@ (80040c8 <MX_GPIO_Init+0x13c>)
 800409a:	f000 ff03 	bl	8004ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800409e:	2380      	movs	r3, #128	@ 0x80
 80040a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040a2:	2300      	movs	r3, #0
 80040a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80040aa:	f107 031c 	add.w	r3, r7, #28
 80040ae:	4619      	mov	r1, r3
 80040b0:	4805      	ldr	r0, [pc, #20]	@ (80040c8 <MX_GPIO_Init+0x13c>)
 80040b2:	f000 fef7 	bl	8004ea4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80040b6:	bf00      	nop
 80040b8:	3730      	adds	r7, #48	@ 0x30
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40020400 	.word	0x40020400
 80040c8:	40021800 	.word	0x40021800
 80040cc:	40020800 	.word	0x40020800

080040d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040d4:	b672      	cpsid	i
}
 80040d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040d8:	bf00      	nop
 80040da:	e7fd      	b.n	80040d8 <Error_Handler+0x8>

080040dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80040e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004120 <HAL_MspInit+0x44>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004120 <HAL_MspInit+0x44>)
 80040e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004120 <HAL_MspInit+0x44>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f6:	607b      	str	r3, [r7, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040fa:	4b09      	ldr	r3, [pc, #36]	@ (8004120 <HAL_MspInit+0x44>)
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	4a08      	ldr	r2, [pc, #32]	@ (8004120 <HAL_MspInit+0x44>)
 8004100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004104:	6453      	str	r3, [r2, #68]	@ 0x44
 8004106:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <HAL_MspInit+0x44>)
 8004108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800

08004124 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08e      	sub	sp, #56	@ 0x38
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800412c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	605a      	str	r2, [r3, #4]
 8004136:	609a      	str	r2, [r3, #8]
 8004138:	60da      	str	r2, [r3, #12]
 800413a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a4e      	ldr	r2, [pc, #312]	@ (800427c <HAL_ETH_MspInit+0x158>)
 8004142:	4293      	cmp	r3, r2
 8004144:	f040 8096 	bne.w	8004274 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004148:	4b4d      	ldr	r3, [pc, #308]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 800414a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414c:	4a4c      	ldr	r2, [pc, #304]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 800414e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004152:	6313      	str	r3, [r2, #48]	@ 0x30
 8004154:	4b4a      	ldr	r3, [pc, #296]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 8004156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415c:	623b      	str	r3, [r7, #32]
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	4b47      	ldr	r3, [pc, #284]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 8004162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004164:	4a46      	ldr	r2, [pc, #280]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 8004166:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800416a:	6313      	str	r3, [r2, #48]	@ 0x30
 800416c:	4b44      	ldr	r3, [pc, #272]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004170:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4b41      	ldr	r3, [pc, #260]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 800417a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417c:	4a40      	ldr	r2, [pc, #256]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 800417e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004182:	6313      	str	r3, [r2, #48]	@ 0x30
 8004184:	4b3e      	ldr	r3, [pc, #248]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 8004186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004188:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004190:	4b3b      	ldr	r3, [pc, #236]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 8004192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004194:	4a3a      	ldr	r2, [pc, #232]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 8004196:	f043 0304 	orr.w	r3, r3, #4
 800419a:	6313      	str	r3, [r2, #48]	@ 0x30
 800419c:	4b38      	ldr	r3, [pc, #224]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 800419e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a8:	4b35      	ldr	r3, [pc, #212]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 80041aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ac:	4a34      	ldr	r2, [pc, #208]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80041b4:	4b32      	ldr	r3, [pc, #200]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 80041b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 80041c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c4:	4a2e      	ldr	r2, [pc, #184]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 80041c6:	f043 0302 	orr.w	r3, r3, #2
 80041ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80041cc:	4b2c      	ldr	r3, [pc, #176]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 80041ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80041d8:	4b29      	ldr	r3, [pc, #164]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 80041da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041dc:	4a28      	ldr	r2, [pc, #160]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 80041de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80041e4:	4b26      	ldr	r3, [pc, #152]	@ (8004280 <HAL_ETH_MspInit+0x15c>)
 80041e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80041f0:	2332      	movs	r3, #50	@ 0x32
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f4:	2302      	movs	r3, #2
 80041f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041fc:	2303      	movs	r3, #3
 80041fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004200:	230b      	movs	r3, #11
 8004202:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004208:	4619      	mov	r1, r3
 800420a:	481e      	ldr	r0, [pc, #120]	@ (8004284 <HAL_ETH_MspInit+0x160>)
 800420c:	f000 fe4a 	bl	8004ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004210:	2386      	movs	r3, #134	@ 0x86
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004214:	2302      	movs	r3, #2
 8004216:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004218:	2300      	movs	r3, #0
 800421a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800421c:	2303      	movs	r3, #3
 800421e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004220:	230b      	movs	r3, #11
 8004222:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004228:	4619      	mov	r1, r3
 800422a:	4817      	ldr	r0, [pc, #92]	@ (8004288 <HAL_ETH_MspInit+0x164>)
 800422c:	f000 fe3a 	bl	8004ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004230:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004236:	2302      	movs	r3, #2
 8004238:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423a:	2300      	movs	r3, #0
 800423c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800423e:	2303      	movs	r3, #3
 8004240:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004242:	230b      	movs	r3, #11
 8004244:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004246:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800424a:	4619      	mov	r1, r3
 800424c:	480f      	ldr	r0, [pc, #60]	@ (800428c <HAL_ETH_MspInit+0x168>)
 800424e:	f000 fe29 	bl	8004ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004252:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004258:	2302      	movs	r3, #2
 800425a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425c:	2300      	movs	r3, #0
 800425e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004260:	2303      	movs	r3, #3
 8004262:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004264:	230b      	movs	r3, #11
 8004266:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004268:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800426c:	4619      	mov	r1, r3
 800426e:	4808      	ldr	r0, [pc, #32]	@ (8004290 <HAL_ETH_MspInit+0x16c>)
 8004270:	f000 fe18 	bl	8004ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8004274:	bf00      	nop
 8004276:	3738      	adds	r7, #56	@ 0x38
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40028000 	.word	0x40028000
 8004280:	40023800 	.word	0x40023800
 8004284:	40020800 	.word	0x40020800
 8004288:	40020000 	.word	0x40020000
 800428c:	40020400 	.word	0x40020400
 8004290:	40021800 	.word	0x40021800

08004294 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b0aa      	sub	sp, #168	@ 0xa8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800429c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	609a      	str	r2, [r3, #8]
 80042a8:	60da      	str	r2, [r3, #12]
 80042aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042ac:	f107 0310 	add.w	r3, r7, #16
 80042b0:	2284      	movs	r2, #132	@ 0x84
 80042b2:	2100      	movs	r1, #0
 80042b4:	4618      	mov	r0, r3
 80042b6:	f003 f9b7 	bl	8007628 <memset>
  if(huart->Instance==USART3)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a22      	ldr	r2, [pc, #136]	@ (8004348 <HAL_UART_MspInit+0xb4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d13c      	bne.n	800433e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80042c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80042ca:	2300      	movs	r3, #0
 80042cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042ce:	f107 0310 	add.w	r3, r7, #16
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 fdce 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80042de:	f7ff fef7 	bl	80040d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80042e2:	4b1a      	ldr	r3, [pc, #104]	@ (800434c <HAL_UART_MspInit+0xb8>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	4a19      	ldr	r2, [pc, #100]	@ (800434c <HAL_UART_MspInit+0xb8>)
 80042e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80042ee:	4b17      	ldr	r3, [pc, #92]	@ (800434c <HAL_UART_MspInit+0xb8>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80042fa:	4b14      	ldr	r3, [pc, #80]	@ (800434c <HAL_UART_MspInit+0xb8>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	4a13      	ldr	r2, [pc, #76]	@ (800434c <HAL_UART_MspInit+0xb8>)
 8004300:	f043 0308 	orr.w	r3, r3, #8
 8004304:	6313      	str	r3, [r2, #48]	@ 0x30
 8004306:	4b11      	ldr	r3, [pc, #68]	@ (800434c <HAL_UART_MspInit+0xb8>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004312:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004316:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431a:	2302      	movs	r3, #2
 800431c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004320:	2300      	movs	r3, #0
 8004322:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004326:	2303      	movs	r3, #3
 8004328:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800432c:	2307      	movs	r3, #7
 800432e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004332:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004336:	4619      	mov	r1, r3
 8004338:	4805      	ldr	r0, [pc, #20]	@ (8004350 <HAL_UART_MspInit+0xbc>)
 800433a:	f000 fdb3 	bl	8004ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800433e:	bf00      	nop
 8004340:	37a8      	adds	r7, #168	@ 0xa8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40004800 	.word	0x40004800
 800434c:	40023800 	.word	0x40023800
 8004350:	40020c00 	.word	0x40020c00

08004354 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b0ac      	sub	sp, #176	@ 0xb0
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800435c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	605a      	str	r2, [r3, #4]
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	60da      	str	r2, [r3, #12]
 800436a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800436c:	f107 0318 	add.w	r3, r7, #24
 8004370:	2284      	movs	r2, #132	@ 0x84
 8004372:	2100      	movs	r1, #0
 8004374:	4618      	mov	r0, r3
 8004376:	f003 f957 	bl	8007628 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004382:	d159      	bne.n	8004438 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8004384:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004388:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800438a:	2300      	movs	r3, #0
 800438c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004390:	f107 0318 	add.w	r3, r7, #24
 8004394:	4618      	mov	r0, r3
 8004396:	f001 fd6d 	bl	8005e74 <HAL_RCCEx_PeriphCLKConfig>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80043a0:	f7ff fe96 	bl	80040d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043a4:	4b26      	ldr	r3, [pc, #152]	@ (8004440 <HAL_PCD_MspInit+0xec>)
 80043a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a8:	4a25      	ldr	r2, [pc, #148]	@ (8004440 <HAL_PCD_MspInit+0xec>)
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80043b0:	4b23      	ldr	r3, [pc, #140]	@ (8004440 <HAL_PCD_MspInit+0xec>)
 80043b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80043bc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80043c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c4:	2302      	movs	r3, #2
 80043c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043d0:	2303      	movs	r3, #3
 80043d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80043d6:	230a      	movs	r3, #10
 80043d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80043e0:	4619      	mov	r1, r3
 80043e2:	4818      	ldr	r0, [pc, #96]	@ (8004444 <HAL_PCD_MspInit+0xf0>)
 80043e4:	f000 fd5e 	bl	8004ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80043e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043f0:	2300      	movs	r3, #0
 80043f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80043fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004400:	4619      	mov	r1, r3
 8004402:	4810      	ldr	r0, [pc, #64]	@ (8004444 <HAL_PCD_MspInit+0xf0>)
 8004404:	f000 fd4e 	bl	8004ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004408:	4b0d      	ldr	r3, [pc, #52]	@ (8004440 <HAL_PCD_MspInit+0xec>)
 800440a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440c:	4a0c      	ldr	r2, [pc, #48]	@ (8004440 <HAL_PCD_MspInit+0xec>)
 800440e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004412:	6353      	str	r3, [r2, #52]	@ 0x34
 8004414:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <HAL_PCD_MspInit+0xec>)
 8004416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4b07      	ldr	r3, [pc, #28]	@ (8004440 <HAL_PCD_MspInit+0xec>)
 8004422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004424:	4a06      	ldr	r2, [pc, #24]	@ (8004440 <HAL_PCD_MspInit+0xec>)
 8004426:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800442a:	6453      	str	r3, [r2, #68]	@ 0x44
 800442c:	4b04      	ldr	r3, [pc, #16]	@ (8004440 <HAL_PCD_MspInit+0xec>)
 800442e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004438:	bf00      	nop
 800443a:	37b0      	adds	r7, #176	@ 0xb0
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40023800 	.word	0x40023800
 8004444:	40020000 	.word	0x40020000

08004448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800444c:	bf00      	nop
 800444e:	e7fd      	b.n	800444c <NMI_Handler+0x4>

08004450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <HardFault_Handler+0x4>

08004458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800445c:	bf00      	nop
 800445e:	e7fd      	b.n	800445c <MemManage_Handler+0x4>

08004460 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004464:	bf00      	nop
 8004466:	e7fd      	b.n	8004464 <BusFault_Handler+0x4>

08004468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800446c:	bf00      	nop
 800446e:	e7fd      	b.n	800446c <UsageFault_Handler+0x4>

08004470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800447e:	b480      	push	{r7}
 8004480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004482:	bf00      	nop
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800449e:	f000 f8b1 	bl	8004604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044b0:	4a14      	ldr	r2, [pc, #80]	@ (8004504 <_sbrk+0x5c>)
 80044b2:	4b15      	ldr	r3, [pc, #84]	@ (8004508 <_sbrk+0x60>)
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044bc:	4b13      	ldr	r3, [pc, #76]	@ (800450c <_sbrk+0x64>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d102      	bne.n	80044ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044c4:	4b11      	ldr	r3, [pc, #68]	@ (800450c <_sbrk+0x64>)
 80044c6:	4a12      	ldr	r2, [pc, #72]	@ (8004510 <_sbrk+0x68>)
 80044c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044ca:	4b10      	ldr	r3, [pc, #64]	@ (800450c <_sbrk+0x64>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4413      	add	r3, r2
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d207      	bcs.n	80044e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044d8:	f003 f8ae 	bl	8007638 <__errno>
 80044dc:	4603      	mov	r3, r0
 80044de:	220c      	movs	r2, #12
 80044e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044e6:	e009      	b.n	80044fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044e8:	4b08      	ldr	r3, [pc, #32]	@ (800450c <_sbrk+0x64>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044ee:	4b07      	ldr	r3, [pc, #28]	@ (800450c <_sbrk+0x64>)
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	4a05      	ldr	r2, [pc, #20]	@ (800450c <_sbrk+0x64>)
 80044f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044fa:	68fb      	ldr	r3, [r7, #12]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20050000 	.word	0x20050000
 8004508:	00000400 	.word	0x00000400
 800450c:	20003e14 	.word	0x20003e14
 8004510:	20003f68 	.word	0x20003f68

08004514 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004518:	4b06      	ldr	r3, [pc, #24]	@ (8004534 <SystemInit+0x20>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	4a05      	ldr	r2, [pc, #20]	@ (8004534 <SystemInit+0x20>)
 8004520:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004524:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004528:	bf00      	nop
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004538:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004570 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800453c:	480d      	ldr	r0, [pc, #52]	@ (8004574 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800453e:	490e      	ldr	r1, [pc, #56]	@ (8004578 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004540:	4a0e      	ldr	r2, [pc, #56]	@ (800457c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004544:	e002      	b.n	800454c <LoopCopyDataInit>

08004546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800454a:	3304      	adds	r3, #4

0800454c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800454c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800454e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004550:	d3f9      	bcc.n	8004546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004552:	4a0b      	ldr	r2, [pc, #44]	@ (8004580 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004554:	4c0b      	ldr	r4, [pc, #44]	@ (8004584 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004558:	e001      	b.n	800455e <LoopFillZerobss>

0800455a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800455a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800455c:	3204      	adds	r2, #4

0800455e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800455e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004560:	d3fb      	bcc.n	800455a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004562:	f7ff ffd7 	bl	8004514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004566:	f003 f86d 	bl	8007644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800456a:	f7ff f98f 	bl	800388c <main>
  bx  lr    
 800456e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004570:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004578:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800457c:	08008070 	.word	0x08008070
  ldr r2, =_sbss
 8004580:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004584:	20003f64 	.word	0x20003f64

08004588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004588:	e7fe      	b.n	8004588 <ADC_IRQHandler>

0800458a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800458e:	2003      	movs	r0, #3
 8004590:	f000 f92e 	bl	80047f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004594:	2000      	movs	r0, #0
 8004596:	f000 f805 	bl	80045a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800459a:	f7ff fd9f 	bl	80040dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045ac:	4b12      	ldr	r3, [pc, #72]	@ (80045f8 <HAL_InitTick+0x54>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b12      	ldr	r3, [pc, #72]	@ (80045fc <HAL_InitTick+0x58>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	4619      	mov	r1, r3
 80045b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80045be:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 f93b 	bl	800483e <HAL_SYSTICK_Config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e00e      	b.n	80045f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b0f      	cmp	r3, #15
 80045d6:	d80a      	bhi.n	80045ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045d8:	2200      	movs	r2, #0
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045e0:	f000 f911 	bl	8004806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045e4:	4a06      	ldr	r2, [pc, #24]	@ (8004600 <HAL_InitTick+0x5c>)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	e000      	b.n	80045f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	2000003c 	.word	0x2000003c
 80045fc:	20000044 	.word	0x20000044
 8004600:	20000040 	.word	0x20000040

08004604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004608:	4b06      	ldr	r3, [pc, #24]	@ (8004624 <HAL_IncTick+0x20>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <HAL_IncTick+0x24>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4413      	add	r3, r2
 8004614:	4a04      	ldr	r2, [pc, #16]	@ (8004628 <HAL_IncTick+0x24>)
 8004616:	6013      	str	r3, [r2, #0]
}
 8004618:	bf00      	nop
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000044 	.word	0x20000044
 8004628:	20003e18 	.word	0x20003e18

0800462c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  return uwTick;
 8004630:	4b03      	ldr	r3, [pc, #12]	@ (8004640 <HAL_GetTick+0x14>)
 8004632:	681b      	ldr	r3, [r3, #0]
}
 8004634:	4618      	mov	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	20003e18 	.word	0x20003e18

08004644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800464c:	f7ff ffee 	bl	800462c <HAL_GetTick>
 8004650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800465c:	d005      	beq.n	800466a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800465e:	4b0a      	ldr	r3, [pc, #40]	@ (8004688 <HAL_Delay+0x44>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800466a:	bf00      	nop
 800466c:	f7ff ffde 	bl	800462c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	429a      	cmp	r2, r3
 800467a:	d8f7      	bhi.n	800466c <HAL_Delay+0x28>
  {
  }
}
 800467c:	bf00      	nop
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20000044 	.word	0x20000044

0800468c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800469c:	4b0b      	ldr	r3, [pc, #44]	@ (80046cc <__NVIC_SetPriorityGrouping+0x40>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046a8:	4013      	ands	r3, r2
 80046aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80046b4:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <__NVIC_SetPriorityGrouping+0x44>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046ba:	4a04      	ldr	r2, [pc, #16]	@ (80046cc <__NVIC_SetPriorityGrouping+0x40>)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	60d3      	str	r3, [r2, #12]
}
 80046c0:	bf00      	nop
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	e000ed00 	.word	0xe000ed00
 80046d0:	05fa0000 	.word	0x05fa0000

080046d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046d8:	4b04      	ldr	r3, [pc, #16]	@ (80046ec <__NVIC_GetPriorityGrouping+0x18>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	0a1b      	lsrs	r3, r3, #8
 80046de:	f003 0307 	and.w	r3, r3, #7
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	e000ed00 	.word	0xe000ed00

080046f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	6039      	str	r1, [r7, #0]
 80046fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004700:	2b00      	cmp	r3, #0
 8004702:	db0a      	blt.n	800471a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	b2da      	uxtb	r2, r3
 8004708:	490c      	ldr	r1, [pc, #48]	@ (800473c <__NVIC_SetPriority+0x4c>)
 800470a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470e:	0112      	lsls	r2, r2, #4
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	440b      	add	r3, r1
 8004714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004718:	e00a      	b.n	8004730 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	b2da      	uxtb	r2, r3
 800471e:	4908      	ldr	r1, [pc, #32]	@ (8004740 <__NVIC_SetPriority+0x50>)
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	3b04      	subs	r3, #4
 8004728:	0112      	lsls	r2, r2, #4
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	440b      	add	r3, r1
 800472e:	761a      	strb	r2, [r3, #24]
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	e000e100 	.word	0xe000e100
 8004740:	e000ed00 	.word	0xe000ed00

08004744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004744:	b480      	push	{r7}
 8004746:	b089      	sub	sp, #36	@ 0x24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f1c3 0307 	rsb	r3, r3, #7
 800475e:	2b04      	cmp	r3, #4
 8004760:	bf28      	it	cs
 8004762:	2304      	movcs	r3, #4
 8004764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3304      	adds	r3, #4
 800476a:	2b06      	cmp	r3, #6
 800476c:	d902      	bls.n	8004774 <NVIC_EncodePriority+0x30>
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	3b03      	subs	r3, #3
 8004772:	e000      	b.n	8004776 <NVIC_EncodePriority+0x32>
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004778:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43da      	mvns	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	401a      	ands	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800478c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	fa01 f303 	lsl.w	r3, r1, r3
 8004796:	43d9      	mvns	r1, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800479c:	4313      	orrs	r3, r2
         );
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3724      	adds	r7, #36	@ 0x24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
	...

080047ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047bc:	d301      	bcc.n	80047c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047be:	2301      	movs	r3, #1
 80047c0:	e00f      	b.n	80047e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047c2:	4a0a      	ldr	r2, [pc, #40]	@ (80047ec <SysTick_Config+0x40>)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047ca:	210f      	movs	r1, #15
 80047cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047d0:	f7ff ff8e 	bl	80046f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047d4:	4b05      	ldr	r3, [pc, #20]	@ (80047ec <SysTick_Config+0x40>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047da:	4b04      	ldr	r3, [pc, #16]	@ (80047ec <SysTick_Config+0x40>)
 80047dc:	2207      	movs	r2, #7
 80047de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	e000e010 	.word	0xe000e010

080047f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff ff47 	bl	800468c <__NVIC_SetPriorityGrouping>
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004806:	b580      	push	{r7, lr}
 8004808:	b086      	sub	sp, #24
 800480a:	af00      	add	r7, sp, #0
 800480c:	4603      	mov	r3, r0
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
 8004812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004818:	f7ff ff5c 	bl	80046d4 <__NVIC_GetPriorityGrouping>
 800481c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	6978      	ldr	r0, [r7, #20]
 8004824:	f7ff ff8e 	bl	8004744 <NVIC_EncodePriority>
 8004828:	4602      	mov	r2, r0
 800482a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800482e:	4611      	mov	r1, r2
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff ff5d 	bl	80046f0 <__NVIC_SetPriority>
}
 8004836:	bf00      	nop
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff ffb0 	bl	80047ac <SysTick_Config>
 800484c:	4603      	mov	r3, r0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e06a      	b.n	8004940 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004870:	2b00      	cmp	r3, #0
 8004872:	d106      	bne.n	8004882 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2223      	movs	r2, #35	@ 0x23
 8004878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff fc51 	bl	8004124 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004882:	4b31      	ldr	r3, [pc, #196]	@ (8004948 <HAL_ETH_Init+0xf0>)
 8004884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004886:	4a30      	ldr	r2, [pc, #192]	@ (8004948 <HAL_ETH_Init+0xf0>)
 8004888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800488c:	6453      	str	r3, [r2, #68]	@ 0x44
 800488e:	4b2e      	ldr	r3, [pc, #184]	@ (8004948 <HAL_ETH_Init+0xf0>)
 8004890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800489a:	4b2c      	ldr	r3, [pc, #176]	@ (800494c <HAL_ETH_Init+0xf4>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4a2b      	ldr	r2, [pc, #172]	@ (800494c <HAL_ETH_Init+0xf4>)
 80048a0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80048a4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80048a6:	4b29      	ldr	r3, [pc, #164]	@ (800494c <HAL_ETH_Init+0xf4>)
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	4927      	ldr	r1, [pc, #156]	@ (800494c <HAL_ETH_Init+0xf4>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80048b4:	4b25      	ldr	r3, [pc, #148]	@ (800494c <HAL_ETH_Init+0xf4>)
 80048b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048d0:	f7ff feac 	bl	800462c <HAL_GetTick>
 80048d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80048d6:	e011      	b.n	80048fc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80048d8:	f7ff fea8 	bl	800462c <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80048e6:	d909      	bls.n	80048fc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2204      	movs	r2, #4
 80048ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	22e0      	movs	r2, #224	@ 0xe0
 80048f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e021      	b.n	8004940 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e4      	bne.n	80048d8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f958 	bl	8004bc4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f9ff 	bl	8004d18 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fa55 	bl	8004dca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	461a      	mov	r2, r3
 8004926:	2100      	movs	r1, #0
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f9bd 	bl	8004ca8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2210      	movs	r2, #16
 800493a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40023800 	.word	0x40023800
 800494c:	40013800 	.word	0x40013800

08004950 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4b51      	ldr	r3, [pc, #324]	@ (8004aac <ETH_SetMACConfig+0x15c>)
 8004966:	4013      	ands	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	7c1b      	ldrb	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d102      	bne.n	8004978 <ETH_SetMACConfig+0x28>
 8004972:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004976:	e000      	b.n	800497a <ETH_SetMACConfig+0x2a>
 8004978:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	7c5b      	ldrb	r3, [r3, #17]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <ETH_SetMACConfig+0x38>
 8004982:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004986:	e000      	b.n	800498a <ETH_SetMACConfig+0x3a>
 8004988:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800498a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004990:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	7fdb      	ldrb	r3, [r3, #31]
 8004996:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004998:	431a      	orrs	r2, r3
                        macconf->Speed |
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800499e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	7f92      	ldrb	r2, [r2, #30]
 80049a4:	2a00      	cmp	r2, #0
 80049a6:	d102      	bne.n	80049ae <ETH_SetMACConfig+0x5e>
 80049a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80049ac:	e000      	b.n	80049b0 <ETH_SetMACConfig+0x60>
 80049ae:	2200      	movs	r2, #0
                        macconf->Speed |
 80049b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	7f1b      	ldrb	r3, [r3, #28]
 80049b6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80049b8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80049be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	791b      	ldrb	r3, [r3, #4]
 80049c4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80049c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80049ce:	2a00      	cmp	r2, #0
 80049d0:	d102      	bne.n	80049d8 <ETH_SetMACConfig+0x88>
 80049d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049d6:	e000      	b.n	80049da <ETH_SetMACConfig+0x8a>
 80049d8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80049da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	7bdb      	ldrb	r3, [r3, #15]
 80049e0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80049e2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80049e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049f0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80049f2:	4313      	orrs	r3, r2
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a0a:	2001      	movs	r0, #1
 8004a0c:	f7ff fe1a 	bl	8004644 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004a26:	4013      	ands	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a2e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	d101      	bne.n	8004a3e <ETH_SetMACConfig+0xee>
 8004a3a:	2280      	movs	r2, #128	@ 0x80
 8004a3c:	e000      	b.n	8004a40 <ETH_SetMACConfig+0xf0>
 8004a3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a40:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004a4e:	2a01      	cmp	r2, #1
 8004a50:	d101      	bne.n	8004a56 <ETH_SetMACConfig+0x106>
 8004a52:	2208      	movs	r2, #8
 8004a54:	e000      	b.n	8004a58 <ETH_SetMACConfig+0x108>
 8004a56:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004a58:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004a60:	2a01      	cmp	r2, #1
 8004a62:	d101      	bne.n	8004a68 <ETH_SetMACConfig+0x118>
 8004a64:	2204      	movs	r2, #4
 8004a66:	e000      	b.n	8004a6a <ETH_SetMACConfig+0x11a>
 8004a68:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004a72:	2a01      	cmp	r2, #1
 8004a74:	d101      	bne.n	8004a7a <ETH_SetMACConfig+0x12a>
 8004a76:	2202      	movs	r2, #2
 8004a78:	e000      	b.n	8004a7c <ETH_SetMACConfig+0x12c>
 8004a7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a94:	2001      	movs	r0, #1
 8004a96:	f7ff fdd5 	bl	8004644 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	619a      	str	r2, [r3, #24]
}
 8004aa2:	bf00      	nop
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	ff20810f 	.word	0xff20810f

08004ab0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4b3d      	ldr	r3, [pc, #244]	@ (8004bc0 <ETH_SetDMAConfig+0x110>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	7b1b      	ldrb	r3, [r3, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d102      	bne.n	8004adc <ETH_SetDMAConfig+0x2c>
 8004ad6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004ada:	e000      	b.n	8004ade <ETH_SetDMAConfig+0x2e>
 8004adc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	7b5b      	ldrb	r3, [r3, #13]
 8004ae2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004ae4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	7f52      	ldrb	r2, [r2, #29]
 8004aea:	2a00      	cmp	r2, #0
 8004aec:	d102      	bne.n	8004af4 <ETH_SetDMAConfig+0x44>
 8004aee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004af2:	e000      	b.n	8004af6 <ETH_SetDMAConfig+0x46>
 8004af4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004af6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	7b9b      	ldrb	r3, [r3, #14]
 8004afc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004afe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004b04:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	7f1b      	ldrb	r3, [r3, #28]
 8004b0a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004b0c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	7f9b      	ldrb	r3, [r3, #30]
 8004b12:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004b14:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004b1a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b22:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004b24:	4313      	orrs	r3, r2
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b34:	461a      	mov	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b46:	2001      	movs	r0, #1
 8004b48:	f7ff fd7c 	bl	8004644 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b54:	461a      	mov	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	791b      	ldrb	r3, [r3, #4]
 8004b5e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b64:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004b6a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004b70:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b78:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004b7a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b80:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b82:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b88:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6812      	ldr	r2, [r2, #0]
 8004b8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b96:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	f7ff fd4d 	bl	8004644 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6013      	str	r3, [r2, #0]
}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	f8de3f23 	.word	0xf8de3f23

08004bc4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b0a6      	sub	sp, #152	@ 0x98
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004c00:	2300      	movs	r3, #0
 8004c02:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004c04:	2300      	movs	r3, #0
 8004c06:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004c20:	2300      	movs	r3, #0
 8004c22:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004c26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004c2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004c38:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff fe86 	bl	8004950 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004c44:	2301      	movs	r3, #1
 8004c46:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004c52:	2301      	movs	r3, #1
 8004c54:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004c60:	2300      	movs	r3, #0
 8004c62:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004c66:	2300      	movs	r3, #0
 8004c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004c70:	2301      	movs	r3, #1
 8004c72:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004c74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c78:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004c7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004c7e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c84:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004c94:	f107 0308 	add.w	r3, r7, #8
 8004c98:	4619      	mov	r1, r3
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff ff08 	bl	8004ab0 <ETH_SetDMAConfig>
}
 8004ca0:	bf00      	nop
 8004ca2:	3798      	adds	r7, #152	@ 0x98
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3305      	adds	r3, #5
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	021b      	lsls	r3, r3, #8
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	3204      	adds	r2, #4
 8004cc0:	7812      	ldrb	r2, [r2, #0]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	4b11      	ldr	r3, [pc, #68]	@ (8004d10 <ETH_MACAddressConfig+0x68>)
 8004cca:	4413      	add	r3, r2
 8004ccc:	461a      	mov	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3303      	adds	r3, #3
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	061a      	lsls	r2, r3, #24
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3302      	adds	r3, #2
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	041b      	lsls	r3, r3, #16
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	021b      	lsls	r3, r3, #8
 8004cec:	4313      	orrs	r3, r2
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	7812      	ldrb	r2, [r2, #0]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	4b06      	ldr	r3, [pc, #24]	@ (8004d14 <ETH_MACAddressConfig+0x6c>)
 8004cfa:	4413      	add	r3, r2
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	6013      	str	r3, [r2, #0]
}
 8004d02:	bf00      	nop
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40028040 	.word	0x40028040
 8004d14:	40028044 	.word	0x40028044

08004d18 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	e03e      	b.n	8004da4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68d9      	ldr	r1, [r3, #12]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	440b      	add	r3, r1
 8004d36:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2200      	movs	r2, #0
 8004d42:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2200      	movs	r2, #0
 8004d48:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	3206      	adds	r2, #6
 8004d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d80c      	bhi.n	8004d88 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68d9      	ldr	r1, [r3, #12]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	440b      	add	r3, r1
 8004d80:	461a      	mov	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	60da      	str	r2, [r3, #12]
 8004d86:	e004      	b.n	8004d92 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3301      	adds	r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d9bd      	bls.n	8004d26 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dbc:	611a      	str	r2, [r3, #16]
}
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b085      	sub	sp, #20
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	e046      	b.n	8004e66 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6919      	ldr	r1, [r3, #16]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4613      	mov	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	440b      	add	r3, r1
 8004de8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2200      	movs	r2, #0
 8004df4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2200      	movs	r2, #0
 8004e06:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004e14:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8004e1c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	3212      	adds	r2, #18
 8004e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d80c      	bhi.n	8004e56 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6919      	ldr	r1, [r3, #16]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	440b      	add	r3, r1
 8004e4e:	461a      	mov	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	60da      	str	r2, [r3, #12]
 8004e54:	e004      	b.n	8004e60 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3301      	adds	r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d9b5      	bls.n	8004dd8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e96:	60da      	str	r2, [r3, #12]
}
 8004e98:	bf00      	nop
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b089      	sub	sp, #36	@ 0x24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	e175      	b.n	80051b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	f040 8164 	bne.w	80051aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d005      	beq.n	8004efa <HAL_GPIO_Init+0x56>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d130      	bne.n	8004f5c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	2203      	movs	r2, #3
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f30:	2201      	movs	r2, #1
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	f003 0201 	and.w	r2, r3, #1
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d017      	beq.n	8004f98 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	2203      	movs	r2, #3
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d123      	bne.n	8004fec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	08da      	lsrs	r2, r3, #3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3208      	adds	r2, #8
 8004fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	220f      	movs	r2, #15
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	08da      	lsrs	r2, r3, #3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3208      	adds	r2, #8
 8004fe6:	69b9      	ldr	r1, [r7, #24]
 8004fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	2203      	movs	r2, #3
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4013      	ands	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f003 0203 	and.w	r2, r3, #3
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4313      	orrs	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 80be 	beq.w	80051aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800502e:	4b66      	ldr	r3, [pc, #408]	@ (80051c8 <HAL_GPIO_Init+0x324>)
 8005030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005032:	4a65      	ldr	r2, [pc, #404]	@ (80051c8 <HAL_GPIO_Init+0x324>)
 8005034:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005038:	6453      	str	r3, [r2, #68]	@ 0x44
 800503a:	4b63      	ldr	r3, [pc, #396]	@ (80051c8 <HAL_GPIO_Init+0x324>)
 800503c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005046:	4a61      	ldr	r2, [pc, #388]	@ (80051cc <HAL_GPIO_Init+0x328>)
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	089b      	lsrs	r3, r3, #2
 800504c:	3302      	adds	r3, #2
 800504e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005052:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	220f      	movs	r2, #15
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	43db      	mvns	r3, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4013      	ands	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a58      	ldr	r2, [pc, #352]	@ (80051d0 <HAL_GPIO_Init+0x32c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d037      	beq.n	80050e2 <HAL_GPIO_Init+0x23e>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a57      	ldr	r2, [pc, #348]	@ (80051d4 <HAL_GPIO_Init+0x330>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d031      	beq.n	80050de <HAL_GPIO_Init+0x23a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a56      	ldr	r2, [pc, #344]	@ (80051d8 <HAL_GPIO_Init+0x334>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d02b      	beq.n	80050da <HAL_GPIO_Init+0x236>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a55      	ldr	r2, [pc, #340]	@ (80051dc <HAL_GPIO_Init+0x338>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d025      	beq.n	80050d6 <HAL_GPIO_Init+0x232>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a54      	ldr	r2, [pc, #336]	@ (80051e0 <HAL_GPIO_Init+0x33c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d01f      	beq.n	80050d2 <HAL_GPIO_Init+0x22e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a53      	ldr	r2, [pc, #332]	@ (80051e4 <HAL_GPIO_Init+0x340>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d019      	beq.n	80050ce <HAL_GPIO_Init+0x22a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a52      	ldr	r2, [pc, #328]	@ (80051e8 <HAL_GPIO_Init+0x344>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d013      	beq.n	80050ca <HAL_GPIO_Init+0x226>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a51      	ldr	r2, [pc, #324]	@ (80051ec <HAL_GPIO_Init+0x348>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00d      	beq.n	80050c6 <HAL_GPIO_Init+0x222>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a50      	ldr	r2, [pc, #320]	@ (80051f0 <HAL_GPIO_Init+0x34c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d007      	beq.n	80050c2 <HAL_GPIO_Init+0x21e>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a4f      	ldr	r2, [pc, #316]	@ (80051f4 <HAL_GPIO_Init+0x350>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d101      	bne.n	80050be <HAL_GPIO_Init+0x21a>
 80050ba:	2309      	movs	r3, #9
 80050bc:	e012      	b.n	80050e4 <HAL_GPIO_Init+0x240>
 80050be:	230a      	movs	r3, #10
 80050c0:	e010      	b.n	80050e4 <HAL_GPIO_Init+0x240>
 80050c2:	2308      	movs	r3, #8
 80050c4:	e00e      	b.n	80050e4 <HAL_GPIO_Init+0x240>
 80050c6:	2307      	movs	r3, #7
 80050c8:	e00c      	b.n	80050e4 <HAL_GPIO_Init+0x240>
 80050ca:	2306      	movs	r3, #6
 80050cc:	e00a      	b.n	80050e4 <HAL_GPIO_Init+0x240>
 80050ce:	2305      	movs	r3, #5
 80050d0:	e008      	b.n	80050e4 <HAL_GPIO_Init+0x240>
 80050d2:	2304      	movs	r3, #4
 80050d4:	e006      	b.n	80050e4 <HAL_GPIO_Init+0x240>
 80050d6:	2303      	movs	r3, #3
 80050d8:	e004      	b.n	80050e4 <HAL_GPIO_Init+0x240>
 80050da:	2302      	movs	r3, #2
 80050dc:	e002      	b.n	80050e4 <HAL_GPIO_Init+0x240>
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <HAL_GPIO_Init+0x240>
 80050e2:	2300      	movs	r3, #0
 80050e4:	69fa      	ldr	r2, [r7, #28]
 80050e6:	f002 0203 	and.w	r2, r2, #3
 80050ea:	0092      	lsls	r2, r2, #2
 80050ec:	4093      	lsls	r3, r2
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80050f4:	4935      	ldr	r1, [pc, #212]	@ (80051cc <HAL_GPIO_Init+0x328>)
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	089b      	lsrs	r3, r3, #2
 80050fa:	3302      	adds	r3, #2
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005102:	4b3d      	ldr	r3, [pc, #244]	@ (80051f8 <HAL_GPIO_Init+0x354>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	43db      	mvns	r3, r3
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	4013      	ands	r3, r2
 8005110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005126:	4a34      	ldr	r2, [pc, #208]	@ (80051f8 <HAL_GPIO_Init+0x354>)
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800512c:	4b32      	ldr	r3, [pc, #200]	@ (80051f8 <HAL_GPIO_Init+0x354>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	43db      	mvns	r3, r3
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	4013      	ands	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005150:	4a29      	ldr	r2, [pc, #164]	@ (80051f8 <HAL_GPIO_Init+0x354>)
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005156:	4b28      	ldr	r3, [pc, #160]	@ (80051f8 <HAL_GPIO_Init+0x354>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	43db      	mvns	r3, r3
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	4013      	ands	r3, r2
 8005164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800517a:	4a1f      	ldr	r2, [pc, #124]	@ (80051f8 <HAL_GPIO_Init+0x354>)
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005180:	4b1d      	ldr	r3, [pc, #116]	@ (80051f8 <HAL_GPIO_Init+0x354>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	43db      	mvns	r3, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4013      	ands	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051a4:	4a14      	ldr	r2, [pc, #80]	@ (80051f8 <HAL_GPIO_Init+0x354>)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	3301      	adds	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	2b0f      	cmp	r3, #15
 80051b4:	f67f ae86 	bls.w	8004ec4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop
 80051bc:	3724      	adds	r7, #36	@ 0x24
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40023800 	.word	0x40023800
 80051cc:	40013800 	.word	0x40013800
 80051d0:	40020000 	.word	0x40020000
 80051d4:	40020400 	.word	0x40020400
 80051d8:	40020800 	.word	0x40020800
 80051dc:	40020c00 	.word	0x40020c00
 80051e0:	40021000 	.word	0x40021000
 80051e4:	40021400 	.word	0x40021400
 80051e8:	40021800 	.word	0x40021800
 80051ec:	40021c00 	.word	0x40021c00
 80051f0:	40022000 	.word	0x40022000
 80051f4:	40022400 	.word	0x40022400
 80051f8:	40013c00 	.word	0x40013c00

080051fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	460b      	mov	r3, r1
 8005206:	807b      	strh	r3, [r7, #2]
 8005208:	4613      	mov	r3, r2
 800520a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800520c:	787b      	ldrb	r3, [r7, #1]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005212:	887a      	ldrh	r2, [r7, #2]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005218:	e003      	b.n	8005222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800521a:	887b      	ldrh	r3, [r7, #2]
 800521c:	041a      	lsls	r2, r3, #16
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	619a      	str	r2, [r3, #24]
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800522e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005230:	b08f      	sub	sp, #60	@ 0x3c
 8005232:	af0a      	add	r7, sp, #40	@ 0x28
 8005234:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e116      	b.n	800546e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff f87a 	bl	8004354 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2203      	movs	r2, #3
 8005264:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800526c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005270:	2b00      	cmp	r3, #0
 8005272:	d102      	bne.n	800527a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f001 ff16 	bl	80070b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	603b      	str	r3, [r7, #0]
 800528a:	687e      	ldr	r6, [r7, #4]
 800528c:	466d      	mov	r5, sp
 800528e:	f106 0410 	add.w	r4, r6, #16
 8005292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800529a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800529e:	e885 0003 	stmia.w	r5, {r0, r1}
 80052a2:	1d33      	adds	r3, r6, #4
 80052a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052a6:	6838      	ldr	r0, [r7, #0]
 80052a8:	f001 feaa 	bl	8007000 <USB_CoreInit>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2202      	movs	r2, #2
 80052b6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e0d7      	b.n	800546e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2100      	movs	r1, #0
 80052c4:	4618      	mov	r0, r3
 80052c6:	f001 ff04 	bl	80070d2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ca:	2300      	movs	r3, #0
 80052cc:	73fb      	strb	r3, [r7, #15]
 80052ce:	e04a      	b.n	8005366 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80052d0:	7bfa      	ldrb	r2, [r7, #15]
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	4613      	mov	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	333d      	adds	r3, #61	@ 0x3d
 80052e0:	2201      	movs	r2, #1
 80052e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052e4:	7bfa      	ldrb	r2, [r7, #15]
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	333c      	adds	r3, #60	@ 0x3c
 80052f4:	7bfa      	ldrb	r2, [r7, #15]
 80052f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052f8:	7bfa      	ldrb	r2, [r7, #15]
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
 80052fc:	b298      	uxth	r0, r3
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	3344      	adds	r3, #68	@ 0x44
 800530c:	4602      	mov	r2, r0
 800530e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005310:	7bfa      	ldrb	r2, [r7, #15]
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	3340      	adds	r3, #64	@ 0x40
 8005320:	2200      	movs	r2, #0
 8005322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005324:	7bfa      	ldrb	r2, [r7, #15]
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	4413      	add	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	3348      	adds	r3, #72	@ 0x48
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005338:	7bfa      	ldrb	r2, [r7, #15]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	334c      	adds	r3, #76	@ 0x4c
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800534c:	7bfa      	ldrb	r2, [r7, #15]
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	4613      	mov	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	3354      	adds	r3, #84	@ 0x54
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	3301      	adds	r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
 8005366:	7bfa      	ldrb	r2, [r7, #15]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	429a      	cmp	r2, r3
 800536e:	d3af      	bcc.n	80052d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005370:	2300      	movs	r3, #0
 8005372:	73fb      	strb	r3, [r7, #15]
 8005374:	e044      	b.n	8005400 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005376:	7bfa      	ldrb	r2, [r7, #15]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800538c:	7bfa      	ldrb	r2, [r7, #15]
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800539e:	7bfa      	ldrb	r2, [r7, #15]
 80053a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053a2:	7bfa      	ldrb	r2, [r7, #15]
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80053b4:	2200      	movs	r2, #0
 80053b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053b8:	7bfa      	ldrb	r2, [r7, #15]
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053ce:	7bfa      	ldrb	r2, [r7, #15]
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	4613      	mov	r3, r2
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053e4:	7bfa      	ldrb	r2, [r7, #15]
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	4613      	mov	r3, r2
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	4413      	add	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	440b      	add	r3, r1
 80053f2:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	3301      	adds	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
 8005400:	7bfa      	ldrb	r2, [r7, #15]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	429a      	cmp	r2, r3
 8005408:	d3b5      	bcc.n	8005376 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	687e      	ldr	r6, [r7, #4]
 8005412:	466d      	mov	r5, sp
 8005414:	f106 0410 	add.w	r4, r6, #16
 8005418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800541a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800541c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800541e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005420:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005424:	e885 0003 	stmia.w	r5, {r0, r1}
 8005428:	1d33      	adds	r3, r6, #4
 800542a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800542c:	6838      	ldr	r0, [r7, #0]
 800542e:	f001 fe9d 	bl	800716c <USB_DevInit>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e014      	b.n	800546e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005458:	2b01      	cmp	r3, #1
 800545a:	d102      	bne.n	8005462 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f80b 	bl	8005478 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f002 f85b 	bl	8007522 <USB_DevDisconnect>

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005478 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054a6:	4b05      	ldr	r3, [pc, #20]	@ (80054bc <HAL_PCDEx_ActivateLPM+0x44>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	10000003 	.word	0x10000003

080054c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054c4:	4b05      	ldr	r3, [pc, #20]	@ (80054dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a04      	ldr	r2, [pc, #16]	@ (80054dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054ce:	6013      	str	r3, [r2, #0]
}
 80054d0:	bf00      	nop
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40007000 	.word	0x40007000

080054e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80054e8:	2300      	movs	r3, #0
 80054ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e291      	b.n	8005a1a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 8087 	beq.w	8005612 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005504:	4b96      	ldr	r3, [pc, #600]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 030c 	and.w	r3, r3, #12
 800550c:	2b04      	cmp	r3, #4
 800550e:	d00c      	beq.n	800552a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005510:	4b93      	ldr	r3, [pc, #588]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 030c 	and.w	r3, r3, #12
 8005518:	2b08      	cmp	r3, #8
 800551a:	d112      	bne.n	8005542 <HAL_RCC_OscConfig+0x62>
 800551c:	4b90      	ldr	r3, [pc, #576]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005524:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005528:	d10b      	bne.n	8005542 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800552a:	4b8d      	ldr	r3, [pc, #564]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d06c      	beq.n	8005610 <HAL_RCC_OscConfig+0x130>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d168      	bne.n	8005610 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e26b      	b.n	8005a1a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800554a:	d106      	bne.n	800555a <HAL_RCC_OscConfig+0x7a>
 800554c:	4b84      	ldr	r3, [pc, #528]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a83      	ldr	r2, [pc, #524]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 8005552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	e02e      	b.n	80055b8 <HAL_RCC_OscConfig+0xd8>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10c      	bne.n	800557c <HAL_RCC_OscConfig+0x9c>
 8005562:	4b7f      	ldr	r3, [pc, #508]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a7e      	ldr	r2, [pc, #504]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 8005568:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	4b7c      	ldr	r3, [pc, #496]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a7b      	ldr	r2, [pc, #492]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 8005574:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	e01d      	b.n	80055b8 <HAL_RCC_OscConfig+0xd8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005584:	d10c      	bne.n	80055a0 <HAL_RCC_OscConfig+0xc0>
 8005586:	4b76      	ldr	r3, [pc, #472]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a75      	ldr	r2, [pc, #468]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 800558c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	4b73      	ldr	r3, [pc, #460]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a72      	ldr	r2, [pc, #456]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 8005598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	e00b      	b.n	80055b8 <HAL_RCC_OscConfig+0xd8>
 80055a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a6e      	ldr	r2, [pc, #440]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 80055a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	4b6c      	ldr	r3, [pc, #432]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a6b      	ldr	r2, [pc, #428]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 80055b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d013      	beq.n	80055e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c0:	f7ff f834 	bl	800462c <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c8:	f7ff f830 	bl	800462c <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b64      	cmp	r3, #100	@ 0x64
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e21f      	b.n	8005a1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055da:	4b61      	ldr	r3, [pc, #388]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0f0      	beq.n	80055c8 <HAL_RCC_OscConfig+0xe8>
 80055e6:	e014      	b.n	8005612 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7ff f820 	bl	800462c <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055f0:	f7ff f81c 	bl	800462c <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b64      	cmp	r3, #100	@ 0x64
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e20b      	b.n	8005a1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005602:	4b57      	ldr	r3, [pc, #348]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1f0      	bne.n	80055f0 <HAL_RCC_OscConfig+0x110>
 800560e:	e000      	b.n	8005612 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d069      	beq.n	80056f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800561e:	4b50      	ldr	r3, [pc, #320]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 030c 	and.w	r3, r3, #12
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00b      	beq.n	8005642 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800562a:	4b4d      	ldr	r3, [pc, #308]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 030c 	and.w	r3, r3, #12
 8005632:	2b08      	cmp	r3, #8
 8005634:	d11c      	bne.n	8005670 <HAL_RCC_OscConfig+0x190>
 8005636:	4b4a      	ldr	r3, [pc, #296]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d116      	bne.n	8005670 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005642:	4b47      	ldr	r3, [pc, #284]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d005      	beq.n	800565a <HAL_RCC_OscConfig+0x17a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d001      	beq.n	800565a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e1df      	b.n	8005a1a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800565a:	4b41      	ldr	r3, [pc, #260]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	493d      	ldr	r1, [pc, #244]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 800566a:	4313      	orrs	r3, r2
 800566c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800566e:	e040      	b.n	80056f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d023      	beq.n	80056c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005678:	4b39      	ldr	r3, [pc, #228]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a38      	ldr	r2, [pc, #224]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005684:	f7fe ffd2 	bl	800462c <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800568c:	f7fe ffce 	bl	800462c <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e1bd      	b.n	8005a1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569e:	4b30      	ldr	r3, [pc, #192]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	4929      	ldr	r1, [pc, #164]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	600b      	str	r3, [r1, #0]
 80056be:	e018      	b.n	80056f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056c0:	4b27      	ldr	r3, [pc, #156]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a26      	ldr	r2, [pc, #152]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 80056c6:	f023 0301 	bic.w	r3, r3, #1
 80056ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056cc:	f7fe ffae 	bl	800462c <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056d4:	f7fe ffaa 	bl	800462c <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e199      	b.n	8005a1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f0      	bne.n	80056d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d038      	beq.n	8005770 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d019      	beq.n	800573a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005706:	4b16      	ldr	r3, [pc, #88]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 8005708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800570a:	4a15      	ldr	r2, [pc, #84]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 800570c:	f043 0301 	orr.w	r3, r3, #1
 8005710:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005712:	f7fe ff8b 	bl	800462c <HAL_GetTick>
 8005716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005718:	e008      	b.n	800572c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800571a:	f7fe ff87 	bl	800462c <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e176      	b.n	8005a1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800572c:	4b0c      	ldr	r3, [pc, #48]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 800572e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0f0      	beq.n	800571a <HAL_RCC_OscConfig+0x23a>
 8005738:	e01a      	b.n	8005770 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800573a:	4b09      	ldr	r3, [pc, #36]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 800573c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800573e:	4a08      	ldr	r2, [pc, #32]	@ (8005760 <HAL_RCC_OscConfig+0x280>)
 8005740:	f023 0301 	bic.w	r3, r3, #1
 8005744:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005746:	f7fe ff71 	bl	800462c <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800574c:	e00a      	b.n	8005764 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800574e:	f7fe ff6d 	bl	800462c <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d903      	bls.n	8005764 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e15c      	b.n	8005a1a <HAL_RCC_OscConfig+0x53a>
 8005760:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005764:	4b91      	ldr	r3, [pc, #580]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 8005766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1ee      	bne.n	800574e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 80a4 	beq.w	80058c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800577e:	4b8b      	ldr	r3, [pc, #556]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10d      	bne.n	80057a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800578a:	4b88      	ldr	r3, [pc, #544]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	4a87      	ldr	r2, [pc, #540]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 8005790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005794:	6413      	str	r3, [r2, #64]	@ 0x40
 8005796:	4b85      	ldr	r3, [pc, #532]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800579e:	60bb      	str	r3, [r7, #8]
 80057a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057a2:	2301      	movs	r3, #1
 80057a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057a6:	4b82      	ldr	r3, [pc, #520]	@ (80059b0 <HAL_RCC_OscConfig+0x4d0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d118      	bne.n	80057e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80057b2:	4b7f      	ldr	r3, [pc, #508]	@ (80059b0 <HAL_RCC_OscConfig+0x4d0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a7e      	ldr	r2, [pc, #504]	@ (80059b0 <HAL_RCC_OscConfig+0x4d0>)
 80057b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057be:	f7fe ff35 	bl	800462c <HAL_GetTick>
 80057c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057c4:	e008      	b.n	80057d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c6:	f7fe ff31 	bl	800462c <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b64      	cmp	r3, #100	@ 0x64
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e120      	b.n	8005a1a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057d8:	4b75      	ldr	r3, [pc, #468]	@ (80059b0 <HAL_RCC_OscConfig+0x4d0>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0f0      	beq.n	80057c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d106      	bne.n	80057fa <HAL_RCC_OscConfig+0x31a>
 80057ec:	4b6f      	ldr	r3, [pc, #444]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 80057ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f0:	4a6e      	ldr	r2, [pc, #440]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 80057f2:	f043 0301 	orr.w	r3, r3, #1
 80057f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80057f8:	e02d      	b.n	8005856 <HAL_RCC_OscConfig+0x376>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10c      	bne.n	800581c <HAL_RCC_OscConfig+0x33c>
 8005802:	4b6a      	ldr	r3, [pc, #424]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005806:	4a69      	ldr	r2, [pc, #420]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 8005808:	f023 0301 	bic.w	r3, r3, #1
 800580c:	6713      	str	r3, [r2, #112]	@ 0x70
 800580e:	4b67      	ldr	r3, [pc, #412]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005812:	4a66      	ldr	r2, [pc, #408]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 8005814:	f023 0304 	bic.w	r3, r3, #4
 8005818:	6713      	str	r3, [r2, #112]	@ 0x70
 800581a:	e01c      	b.n	8005856 <HAL_RCC_OscConfig+0x376>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b05      	cmp	r3, #5
 8005822:	d10c      	bne.n	800583e <HAL_RCC_OscConfig+0x35e>
 8005824:	4b61      	ldr	r3, [pc, #388]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005828:	4a60      	ldr	r2, [pc, #384]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 800582a:	f043 0304 	orr.w	r3, r3, #4
 800582e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005830:	4b5e      	ldr	r3, [pc, #376]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005834:	4a5d      	ldr	r2, [pc, #372]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 8005836:	f043 0301 	orr.w	r3, r3, #1
 800583a:	6713      	str	r3, [r2, #112]	@ 0x70
 800583c:	e00b      	b.n	8005856 <HAL_RCC_OscConfig+0x376>
 800583e:	4b5b      	ldr	r3, [pc, #364]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 8005840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005842:	4a5a      	ldr	r2, [pc, #360]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 8005844:	f023 0301 	bic.w	r3, r3, #1
 8005848:	6713      	str	r3, [r2, #112]	@ 0x70
 800584a:	4b58      	ldr	r3, [pc, #352]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 800584c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800584e:	4a57      	ldr	r2, [pc, #348]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 8005850:	f023 0304 	bic.w	r3, r3, #4
 8005854:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d015      	beq.n	800588a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585e:	f7fe fee5 	bl	800462c <HAL_GetTick>
 8005862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005864:	e00a      	b.n	800587c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005866:	f7fe fee1 	bl	800462c <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005874:	4293      	cmp	r3, r2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e0ce      	b.n	8005a1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800587c:	4b4b      	ldr	r3, [pc, #300]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 800587e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0ee      	beq.n	8005866 <HAL_RCC_OscConfig+0x386>
 8005888:	e014      	b.n	80058b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588a:	f7fe fecf 	bl	800462c <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005890:	e00a      	b.n	80058a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005892:	f7fe fecb 	bl	800462c <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e0b8      	b.n	8005a1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a8:	4b40      	ldr	r3, [pc, #256]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 80058aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1ee      	bne.n	8005892 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d105      	bne.n	80058c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ba:	4b3c      	ldr	r3, [pc, #240]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058be:	4a3b      	ldr	r2, [pc, #236]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 80058c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058c4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 80a4 	beq.w	8005a18 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058d0:	4b36      	ldr	r3, [pc, #216]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 030c 	and.w	r3, r3, #12
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d06b      	beq.n	80059b4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d149      	bne.n	8005978 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e4:	4b31      	ldr	r3, [pc, #196]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a30      	ldr	r2, [pc, #192]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 80058ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fe fe9c 	bl	800462c <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f8:	f7fe fe98 	bl	800462c <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e087      	b.n	8005a1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800590a:	4b28      	ldr	r3, [pc, #160]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f0      	bne.n	80058f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	69da      	ldr	r2, [r3, #28]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005924:	019b      	lsls	r3, r3, #6
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592c:	085b      	lsrs	r3, r3, #1
 800592e:	3b01      	subs	r3, #1
 8005930:	041b      	lsls	r3, r3, #16
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005938:	061b      	lsls	r3, r3, #24
 800593a:	4313      	orrs	r3, r2
 800593c:	4a1b      	ldr	r2, [pc, #108]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 800593e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005942:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005944:	4b19      	ldr	r3, [pc, #100]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a18      	ldr	r2, [pc, #96]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 800594a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800594e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005950:	f7fe fe6c 	bl	800462c <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005958:	f7fe fe68 	bl	800462c <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e057      	b.n	8005a1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800596a:	4b10      	ldr	r3, [pc, #64]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <HAL_RCC_OscConfig+0x478>
 8005976:	e04f      	b.n	8005a18 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005978:	4b0c      	ldr	r3, [pc, #48]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a0b      	ldr	r2, [pc, #44]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 800597e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005984:	f7fe fe52 	bl	800462c <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800598c:	f7fe fe4e 	bl	800462c <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e03d      	b.n	8005a1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800599e:	4b03      	ldr	r3, [pc, #12]	@ (80059ac <HAL_RCC_OscConfig+0x4cc>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <HAL_RCC_OscConfig+0x4ac>
 80059aa:	e035      	b.n	8005a18 <HAL_RCC_OscConfig+0x538>
 80059ac:	40023800 	.word	0x40023800
 80059b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80059b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005a24 <HAL_RCC_OscConfig+0x544>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d028      	beq.n	8005a14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d121      	bne.n	8005a14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059da:	429a      	cmp	r2, r3
 80059dc:	d11a      	bne.n	8005a14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80059e4:	4013      	ands	r3, r2
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d111      	bne.n	8005a14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fa:	085b      	lsrs	r3, r3, #1
 80059fc:	3b01      	subs	r3, #1
 80059fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d107      	bne.n	8005a14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d001      	beq.n	8005a18 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40023800 	.word	0x40023800

08005a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e0d0      	b.n	8005be2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a40:	4b6a      	ldr	r3, [pc, #424]	@ (8005bec <HAL_RCC_ClockConfig+0x1c4>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d910      	bls.n	8005a70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4e:	4b67      	ldr	r3, [pc, #412]	@ (8005bec <HAL_RCC_ClockConfig+0x1c4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f023 020f 	bic.w	r2, r3, #15
 8005a56:	4965      	ldr	r1, [pc, #404]	@ (8005bec <HAL_RCC_ClockConfig+0x1c4>)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a5e:	4b63      	ldr	r3, [pc, #396]	@ (8005bec <HAL_RCC_ClockConfig+0x1c4>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d001      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e0b8      	b.n	8005be2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d020      	beq.n	8005abe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d005      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a88:	4b59      	ldr	r3, [pc, #356]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	4a58      	ldr	r2, [pc, #352]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005a92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0308 	and.w	r3, r3, #8
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005aa0:	4b53      	ldr	r3, [pc, #332]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	4a52      	ldr	r2, [pc, #328]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005aa6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005aaa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aac:	4b50      	ldr	r3, [pc, #320]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	494d      	ldr	r1, [pc, #308]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d040      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d107      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad2:	4b47      	ldr	r3, [pc, #284]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d115      	bne.n	8005b0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e07f      	b.n	8005be2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d107      	bne.n	8005afa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aea:	4b41      	ldr	r3, [pc, #260]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d109      	bne.n	8005b0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e073      	b.n	8005be2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005afa:	4b3d      	ldr	r3, [pc, #244]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e06b      	b.n	8005be2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b0a:	4b39      	ldr	r3, [pc, #228]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f023 0203 	bic.w	r2, r3, #3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	4936      	ldr	r1, [pc, #216]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1c:	f7fe fd86 	bl	800462c <HAL_GetTick>
 8005b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b22:	e00a      	b.n	8005b3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b24:	f7fe fd82 	bl	800462c <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e053      	b.n	8005be2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 020c 	and.w	r2, r3, #12
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d1eb      	bne.n	8005b24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b4c:	4b27      	ldr	r3, [pc, #156]	@ (8005bec <HAL_RCC_ClockConfig+0x1c4>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 030f 	and.w	r3, r3, #15
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d210      	bcs.n	8005b7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b5a:	4b24      	ldr	r3, [pc, #144]	@ (8005bec <HAL_RCC_ClockConfig+0x1c4>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f023 020f 	bic.w	r2, r3, #15
 8005b62:	4922      	ldr	r1, [pc, #136]	@ (8005bec <HAL_RCC_ClockConfig+0x1c4>)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b6a:	4b20      	ldr	r3, [pc, #128]	@ (8005bec <HAL_RCC_ClockConfig+0x1c4>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d001      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e032      	b.n	8005be2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d008      	beq.n	8005b9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b88:	4b19      	ldr	r3, [pc, #100]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	4916      	ldr	r1, [pc, #88]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d009      	beq.n	8005bba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ba6:	4b12      	ldr	r3, [pc, #72]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	490e      	ldr	r1, [pc, #56]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bba:	f000 f821 	bl	8005c00 <HAL_RCC_GetSysClockFreq>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	091b      	lsrs	r3, r3, #4
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	490a      	ldr	r1, [pc, #40]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1cc>)
 8005bcc:	5ccb      	ldrb	r3, [r1, r3]
 8005bce:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd2:	4a09      	ldr	r2, [pc, #36]	@ (8005bf8 <HAL_RCC_ClockConfig+0x1d0>)
 8005bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bd6:	4b09      	ldr	r3, [pc, #36]	@ (8005bfc <HAL_RCC_ClockConfig+0x1d4>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe fce2 	bl	80045a4 <HAL_InitTick>

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	40023c00 	.word	0x40023c00
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	08008014 	.word	0x08008014
 8005bf8:	2000003c 	.word	0x2000003c
 8005bfc:	20000040 	.word	0x20000040

08005c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c04:	b094      	sub	sp, #80	@ 0x50
 8005c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c10:	2300      	movs	r3, #0
 8005c12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c18:	4b79      	ldr	r3, [pc, #484]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 030c 	and.w	r3, r3, #12
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d00d      	beq.n	8005c40 <HAL_RCC_GetSysClockFreq+0x40>
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	f200 80e1 	bhi.w	8005dec <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <HAL_RCC_GetSysClockFreq+0x34>
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d003      	beq.n	8005c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8005c32:	e0db      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c34:	4b73      	ldr	r3, [pc, #460]	@ (8005e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c38:	e0db      	b.n	8005df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c3a:	4b73      	ldr	r3, [pc, #460]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c3e:	e0d8      	b.n	8005df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c40:	4b6f      	ldr	r3, [pc, #444]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c48:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005c4a:	4b6d      	ldr	r3, [pc, #436]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d063      	beq.n	8005d1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c56:	4b6a      	ldr	r3, [pc, #424]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	099b      	lsrs	r3, r3, #6
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c68:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005c72:	4622      	mov	r2, r4
 8005c74:	462b      	mov	r3, r5
 8005c76:	f04f 0000 	mov.w	r0, #0
 8005c7a:	f04f 0100 	mov.w	r1, #0
 8005c7e:	0159      	lsls	r1, r3, #5
 8005c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c84:	0150      	lsls	r0, r2, #5
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	1a51      	subs	r1, r2, r1
 8005c8e:	6139      	str	r1, [r7, #16]
 8005c90:	4629      	mov	r1, r5
 8005c92:	eb63 0301 	sbc.w	r3, r3, r1
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	018b      	lsls	r3, r1, #6
 8005ca8:	4651      	mov	r1, sl
 8005caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cae:	4651      	mov	r1, sl
 8005cb0:	018a      	lsls	r2, r1, #6
 8005cb2:	4651      	mov	r1, sl
 8005cb4:	ebb2 0801 	subs.w	r8, r2, r1
 8005cb8:	4659      	mov	r1, fp
 8005cba:	eb63 0901 	sbc.w	r9, r3, r1
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cd2:	4690      	mov	r8, r2
 8005cd4:	4699      	mov	r9, r3
 8005cd6:	4623      	mov	r3, r4
 8005cd8:	eb18 0303 	adds.w	r3, r8, r3
 8005cdc:	60bb      	str	r3, [r7, #8]
 8005cde:	462b      	mov	r3, r5
 8005ce0:	eb49 0303 	adc.w	r3, r9, r3
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	024b      	lsls	r3, r1, #9
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	024a      	lsls	r2, r1, #9
 8005d00:	4610      	mov	r0, r2
 8005d02:	4619      	mov	r1, r3
 8005d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d06:	2200      	movs	r2, #0
 8005d08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d10:	f7fa face 	bl	80002b0 <__aeabi_uldivmod>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4613      	mov	r3, r2
 8005d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d1c:	e058      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d1e:	4b38      	ldr	r3, [pc, #224]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	099b      	lsrs	r3, r3, #6
 8005d24:	2200      	movs	r2, #0
 8005d26:	4618      	mov	r0, r3
 8005d28:	4611      	mov	r1, r2
 8005d2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d2e:	623b      	str	r3, [r7, #32]
 8005d30:	2300      	movs	r3, #0
 8005d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d38:	4642      	mov	r2, r8
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	f04f 0000 	mov.w	r0, #0
 8005d40:	f04f 0100 	mov.w	r1, #0
 8005d44:	0159      	lsls	r1, r3, #5
 8005d46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d4a:	0150      	lsls	r0, r2, #5
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4641      	mov	r1, r8
 8005d52:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d56:	4649      	mov	r1, r9
 8005d58:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d70:	ebb2 040a 	subs.w	r4, r2, sl
 8005d74:	eb63 050b 	sbc.w	r5, r3, fp
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	00eb      	lsls	r3, r5, #3
 8005d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d86:	00e2      	lsls	r2, r4, #3
 8005d88:	4614      	mov	r4, r2
 8005d8a:	461d      	mov	r5, r3
 8005d8c:	4643      	mov	r3, r8
 8005d8e:	18e3      	adds	r3, r4, r3
 8005d90:	603b      	str	r3, [r7, #0]
 8005d92:	464b      	mov	r3, r9
 8005d94:	eb45 0303 	adc.w	r3, r5, r3
 8005d98:	607b      	str	r3, [r7, #4]
 8005d9a:	f04f 0200 	mov.w	r2, #0
 8005d9e:	f04f 0300 	mov.w	r3, #0
 8005da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005da6:	4629      	mov	r1, r5
 8005da8:	028b      	lsls	r3, r1, #10
 8005daa:	4621      	mov	r1, r4
 8005dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005db0:	4621      	mov	r1, r4
 8005db2:	028a      	lsls	r2, r1, #10
 8005db4:	4610      	mov	r0, r2
 8005db6:	4619      	mov	r1, r3
 8005db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dba:	2200      	movs	r2, #0
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	61fa      	str	r2, [r7, #28]
 8005dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dc4:	f7fa fa74 	bl	80002b0 <__aeabi_uldivmod>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4613      	mov	r3, r2
 8005dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	0c1b      	lsrs	r3, r3, #16
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	3301      	adds	r3, #1
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005de0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005dea:	e002      	b.n	8005df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dec:	4b05      	ldr	r3, [pc, #20]	@ (8005e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3750      	adds	r7, #80	@ 0x50
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dfe:	bf00      	nop
 8005e00:	40023800 	.word	0x40023800
 8005e04:	00f42400 	.word	0x00f42400
 8005e08:	007a1200 	.word	0x007a1200

08005e0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e10:	4b03      	ldr	r3, [pc, #12]	@ (8005e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e12:	681b      	ldr	r3, [r3, #0]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	2000003c 	.word	0x2000003c

08005e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e28:	f7ff fff0 	bl	8005e0c <HAL_RCC_GetHCLKFreq>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	4b05      	ldr	r3, [pc, #20]	@ (8005e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	0a9b      	lsrs	r3, r3, #10
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	4903      	ldr	r1, [pc, #12]	@ (8005e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e3a:	5ccb      	ldrb	r3, [r1, r3]
 8005e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	40023800 	.word	0x40023800
 8005e48:	08008024 	.word	0x08008024

08005e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e50:	f7ff ffdc 	bl	8005e0c <HAL_RCC_GetHCLKFreq>
 8005e54:	4602      	mov	r2, r0
 8005e56:	4b05      	ldr	r3, [pc, #20]	@ (8005e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	0b5b      	lsrs	r3, r3, #13
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	4903      	ldr	r1, [pc, #12]	@ (8005e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e62:	5ccb      	ldrb	r3, [r1, r3]
 8005e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	08008024 	.word	0x08008024

08005e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d012      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e9c:	4b69      	ldr	r3, [pc, #420]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	4a68      	ldr	r2, [pc, #416]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ea2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005ea6:	6093      	str	r3, [r2, #8]
 8005ea8:	4b66      	ldr	r3, [pc, #408]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb0:	4964      	ldr	r1, [pc, #400]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d017      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ece:	4b5d      	ldr	r3, [pc, #372]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ed4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005edc:	4959      	ldr	r1, [pc, #356]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eec:	d101      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005efa:	2301      	movs	r3, #1
 8005efc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d017      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f0a:	4b4e      	ldr	r3, [pc, #312]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f10:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f18:	494a      	ldr	r1, [pc, #296]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f28:	d101      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005f36:	2301      	movs	r3, #1
 8005f38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005f46:	2301      	movs	r3, #1
 8005f48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 808b 	beq.w	800606e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f58:	4b3a      	ldr	r3, [pc, #232]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	4a39      	ldr	r2, [pc, #228]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f62:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f64:	4b37      	ldr	r3, [pc, #220]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f6c:	60bb      	str	r3, [r7, #8]
 8005f6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f70:	4b35      	ldr	r3, [pc, #212]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a34      	ldr	r2, [pc, #208]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f7c:	f7fe fb56 	bl	800462c <HAL_GetTick>
 8005f80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f82:	e008      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f84:	f7fe fb52 	bl	800462c <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b64      	cmp	r3, #100	@ 0x64
 8005f90:	d901      	bls.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e357      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f96:	4b2c      	ldr	r3, [pc, #176]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0f0      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fa2:	4b28      	ldr	r3, [pc, #160]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005faa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d035      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d02e      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fc0:	4b20      	ldr	r3, [pc, #128]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fc8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fca:	4b1e      	ldr	r3, [pc, #120]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fce:	4a1d      	ldr	r2, [pc, #116]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fda:	4a1a      	ldr	r2, [pc, #104]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fe0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005fe2:	4a18      	ldr	r2, [pc, #96]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005fe8:	4b16      	ldr	r3, [pc, #88]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d114      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff4:	f7fe fb1a 	bl	800462c <HAL_GetTick>
 8005ff8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ffa:	e00a      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ffc:	f7fe fb16 	bl	800462c <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800600a:	4293      	cmp	r3, r2
 800600c:	d901      	bls.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e319      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006012:	4b0c      	ldr	r3, [pc, #48]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0ee      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006026:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800602a:	d111      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800602c:	4b05      	ldr	r3, [pc, #20]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006038:	4b04      	ldr	r3, [pc, #16]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800603a:	400b      	ands	r3, r1
 800603c:	4901      	ldr	r1, [pc, #4]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800603e:	4313      	orrs	r3, r2
 8006040:	608b      	str	r3, [r1, #8]
 8006042:	e00b      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006044:	40023800 	.word	0x40023800
 8006048:	40007000 	.word	0x40007000
 800604c:	0ffffcff 	.word	0x0ffffcff
 8006050:	4baa      	ldr	r3, [pc, #680]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	4aa9      	ldr	r2, [pc, #676]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006056:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800605a:	6093      	str	r3, [r2, #8]
 800605c:	4ba7      	ldr	r3, [pc, #668]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800605e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006068:	49a4      	ldr	r1, [pc, #656]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800606a:	4313      	orrs	r3, r2
 800606c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0310 	and.w	r3, r3, #16
 8006076:	2b00      	cmp	r3, #0
 8006078:	d010      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800607a:	4ba0      	ldr	r3, [pc, #640]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800607c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006080:	4a9e      	ldr	r2, [pc, #632]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006082:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006086:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800608a:	4b9c      	ldr	r3, [pc, #624]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800608c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006094:	4999      	ldr	r1, [pc, #612]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060a8:	4b94      	ldr	r3, [pc, #592]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060b6:	4991      	ldr	r1, [pc, #580]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060ca:	4b8c      	ldr	r3, [pc, #560]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060d8:	4988      	ldr	r1, [pc, #544]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060ec:	4b83      	ldr	r3, [pc, #524]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060fa:	4980      	ldr	r1, [pc, #512]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800610e:	4b7b      	ldr	r3, [pc, #492]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006114:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800611c:	4977      	ldr	r1, [pc, #476]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800611e:	4313      	orrs	r3, r2
 8006120:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006130:	4b72      	ldr	r3, [pc, #456]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006136:	f023 0203 	bic.w	r2, r3, #3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800613e:	496f      	ldr	r1, [pc, #444]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006152:	4b6a      	ldr	r3, [pc, #424]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006158:	f023 020c 	bic.w	r2, r3, #12
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006160:	4966      	ldr	r1, [pc, #408]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006162:	4313      	orrs	r3, r2
 8006164:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006174:	4b61      	ldr	r3, [pc, #388]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800617a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006182:	495e      	ldr	r1, [pc, #376]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006184:	4313      	orrs	r3, r2
 8006186:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006196:	4b59      	ldr	r3, [pc, #356]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800619c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a4:	4955      	ldr	r1, [pc, #340]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061b8:	4b50      	ldr	r3, [pc, #320]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061c6:	494d      	ldr	r1, [pc, #308]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80061da:	4b48      	ldr	r3, [pc, #288]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e8:	4944      	ldr	r1, [pc, #272]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00a      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80061fc:	4b3f      	ldr	r3, [pc, #252]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006202:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800620a:	493c      	ldr	r1, [pc, #240]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800620c:	4313      	orrs	r3, r2
 800620e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800621e:	4b37      	ldr	r3, [pc, #220]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006224:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800622c:	4933      	ldr	r1, [pc, #204]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800622e:	4313      	orrs	r3, r2
 8006230:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00a      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006240:	4b2e      	ldr	r3, [pc, #184]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006246:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800624e:	492b      	ldr	r1, [pc, #172]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006250:	4313      	orrs	r3, r2
 8006252:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d011      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006262:	4b26      	ldr	r3, [pc, #152]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006268:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006270:	4922      	ldr	r1, [pc, #136]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800627c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006280:	d101      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006282:	2301      	movs	r3, #1
 8006284:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006292:	2301      	movs	r3, #1
 8006294:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062a2:	4b16      	ldr	r3, [pc, #88]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062b0:	4912      	ldr	r1, [pc, #72]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00b      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80062c4:	4b0d      	ldr	r3, [pc, #52]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062d4:	4909      	ldr	r1, [pc, #36]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d006      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 80d9 	beq.w	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80062f0:	4b02      	ldr	r3, [pc, #8]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a01      	ldr	r2, [pc, #4]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062fa:	e001      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80062fc:	40023800 	.word	0x40023800
 8006300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006302:	f7fe f993 	bl	800462c <HAL_GetTick>
 8006306:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006308:	e008      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800630a:	f7fe f98f 	bl	800462c <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b64      	cmp	r3, #100	@ 0x64
 8006316:	d901      	bls.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e194      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800631c:	4b6c      	ldr	r3, [pc, #432]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1f0      	bne.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d021      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006338:	2b00      	cmp	r3, #0
 800633a:	d11d      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800633c:	4b64      	ldr	r3, [pc, #400]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800633e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006342:	0c1b      	lsrs	r3, r3, #16
 8006344:	f003 0303 	and.w	r3, r3, #3
 8006348:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800634a:	4b61      	ldr	r3, [pc, #388]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800634c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006350:	0e1b      	lsrs	r3, r3, #24
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	019a      	lsls	r2, r3, #6
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	041b      	lsls	r3, r3, #16
 8006362:	431a      	orrs	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	061b      	lsls	r3, r3, #24
 8006368:	431a      	orrs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	071b      	lsls	r3, r3, #28
 8006370:	4957      	ldr	r1, [pc, #348]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d004      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006388:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800638c:	d00a      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006396:	2b00      	cmp	r3, #0
 8006398:	d02e      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063a2:	d129      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80063a4:	4b4a      	ldr	r3, [pc, #296]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063aa:	0c1b      	lsrs	r3, r3, #16
 80063ac:	f003 0303 	and.w	r3, r3, #3
 80063b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80063b2:	4b47      	ldr	r3, [pc, #284]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063b8:	0f1b      	lsrs	r3, r3, #28
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	019a      	lsls	r2, r3, #6
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	041b      	lsls	r3, r3, #16
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	061b      	lsls	r3, r3, #24
 80063d2:	431a      	orrs	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	071b      	lsls	r3, r3, #28
 80063d8:	493d      	ldr	r1, [pc, #244]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80063e0:	4b3b      	ldr	r3, [pc, #236]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063e6:	f023 021f 	bic.w	r2, r3, #31
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ee:	3b01      	subs	r3, #1
 80063f0:	4937      	ldr	r1, [pc, #220]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d01d      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006404:	4b32      	ldr	r3, [pc, #200]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006406:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800640a:	0e1b      	lsrs	r3, r3, #24
 800640c:	f003 030f 	and.w	r3, r3, #15
 8006410:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006412:	4b2f      	ldr	r3, [pc, #188]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006414:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006418:	0f1b      	lsrs	r3, r3, #28
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	019a      	lsls	r2, r3, #6
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	041b      	lsls	r3, r3, #16
 800642c:	431a      	orrs	r2, r3
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	061b      	lsls	r3, r3, #24
 8006432:	431a      	orrs	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	071b      	lsls	r3, r3, #28
 8006438:	4925      	ldr	r1, [pc, #148]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800643a:	4313      	orrs	r3, r2
 800643c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d011      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	019a      	lsls	r2, r3, #6
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	041b      	lsls	r3, r3, #16
 8006458:	431a      	orrs	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	061b      	lsls	r3, r3, #24
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	071b      	lsls	r3, r3, #28
 8006468:	4919      	ldr	r1, [pc, #100]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006470:	4b17      	ldr	r3, [pc, #92]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a16      	ldr	r2, [pc, #88]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006476:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800647a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800647c:	f7fe f8d6 	bl	800462c <HAL_GetTick>
 8006480:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006482:	e008      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006484:	f7fe f8d2 	bl	800462c <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b64      	cmp	r3, #100	@ 0x64
 8006490:	d901      	bls.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e0d7      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006496:	4b0e      	ldr	r3, [pc, #56]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d0f0      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	f040 80cd 	bne.w	8006644 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80064aa:	4b09      	ldr	r3, [pc, #36]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a08      	ldr	r2, [pc, #32]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064b6:	f7fe f8b9 	bl	800462c <HAL_GetTick>
 80064ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064bc:	e00a      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80064be:	f7fe f8b5 	bl	800462c <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b64      	cmp	r3, #100	@ 0x64
 80064ca:	d903      	bls.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e0ba      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80064d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064d4:	4b5e      	ldr	r3, [pc, #376]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064e0:	d0ed      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d009      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d02e      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006506:	2b00      	cmp	r3, #0
 8006508:	d12a      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800650a:	4b51      	ldr	r3, [pc, #324]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800650c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006510:	0c1b      	lsrs	r3, r3, #16
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006518:	4b4d      	ldr	r3, [pc, #308]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800651a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651e:	0f1b      	lsrs	r3, r3, #28
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	019a      	lsls	r2, r3, #6
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	041b      	lsls	r3, r3, #16
 8006530:	431a      	orrs	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	061b      	lsls	r3, r3, #24
 8006538:	431a      	orrs	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	071b      	lsls	r3, r3, #28
 800653e:	4944      	ldr	r1, [pc, #272]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006540:	4313      	orrs	r3, r2
 8006542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006546:	4b42      	ldr	r3, [pc, #264]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006548:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800654c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006554:	3b01      	subs	r3, #1
 8006556:	021b      	lsls	r3, r3, #8
 8006558:	493d      	ldr	r1, [pc, #244]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800655a:	4313      	orrs	r3, r2
 800655c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d022      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006570:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006574:	d11d      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006576:	4b36      	ldr	r3, [pc, #216]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657c:	0e1b      	lsrs	r3, r3, #24
 800657e:	f003 030f 	and.w	r3, r3, #15
 8006582:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006584:	4b32      	ldr	r3, [pc, #200]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800658a:	0f1b      	lsrs	r3, r3, #28
 800658c:	f003 0307 	and.w	r3, r3, #7
 8006590:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	019a      	lsls	r2, r3, #6
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	041b      	lsls	r3, r3, #16
 800659e:	431a      	orrs	r2, r3
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	061b      	lsls	r3, r3, #24
 80065a4:	431a      	orrs	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	071b      	lsls	r3, r3, #28
 80065aa:	4929      	ldr	r1, [pc, #164]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d028      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80065be:	4b24      	ldr	r3, [pc, #144]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c4:	0e1b      	lsrs	r3, r3, #24
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80065cc:	4b20      	ldr	r3, [pc, #128]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d2:	0c1b      	lsrs	r3, r3, #16
 80065d4:	f003 0303 	and.w	r3, r3, #3
 80065d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	019a      	lsls	r2, r3, #6
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	041b      	lsls	r3, r3, #16
 80065e4:	431a      	orrs	r2, r3
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	061b      	lsls	r3, r3, #24
 80065ea:	431a      	orrs	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	071b      	lsls	r3, r3, #28
 80065f2:	4917      	ldr	r1, [pc, #92]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80065fa:	4b15      	ldr	r3, [pc, #84]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006600:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006608:	4911      	ldr	r1, [pc, #68]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800660a:	4313      	orrs	r3, r2
 800660c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006610:	4b0f      	ldr	r3, [pc, #60]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a0e      	ldr	r2, [pc, #56]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800661a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800661c:	f7fe f806 	bl	800462c <HAL_GetTick>
 8006620:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006622:	e008      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006624:	f7fe f802 	bl	800462c <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b64      	cmp	r3, #100	@ 0x64
 8006630:	d901      	bls.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e007      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006636:	4b06      	ldr	r3, [pc, #24]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800663e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006642:	d1ef      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3720      	adds	r7, #32
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40023800 	.word	0x40023800

08006654 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e040      	b.n	80066e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d106      	bne.n	800667c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7fd fe0c 	bl	8004294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2224      	movs	r2, #36	@ 0x24
 8006680:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0201 	bic.w	r2, r2, #1
 8006690:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f8b0 	bl	80067f8 <UART_SetConfig>
 8006698:	4603      	mov	r3, r0
 800669a:	2b01      	cmp	r3, #1
 800669c:	d101      	bne.n	80066a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e022      	b.n	80066e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fb08 	bl	8006cc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fb8f 	bl	8006e04 <UART_CheckIdleState>
 80066e6:	4603      	mov	r3, r0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08a      	sub	sp, #40	@ 0x28
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	4613      	mov	r3, r2
 80066fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006704:	2b20      	cmp	r3, #32
 8006706:	d171      	bne.n	80067ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d002      	beq.n	8006714 <HAL_UART_Transmit+0x24>
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e06a      	b.n	80067ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2221      	movs	r2, #33	@ 0x21
 8006724:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006726:	f7fd ff81 	bl	800462c <HAL_GetTick>
 800672a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	88fa      	ldrh	r2, [r7, #6]
 8006730:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	88fa      	ldrh	r2, [r7, #6]
 8006738:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006744:	d108      	bne.n	8006758 <HAL_UART_Transmit+0x68>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d104      	bne.n	8006758 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	e003      	b.n	8006760 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800675c:	2300      	movs	r3, #0
 800675e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006760:	e02c      	b.n	80067bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2200      	movs	r2, #0
 800676a:	2180      	movs	r1, #128	@ 0x80
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 fb80 	bl	8006e72 <UART_WaitOnFlagUntilTimeout>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e038      	b.n	80067ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10b      	bne.n	800679a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006790:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	3302      	adds	r3, #2
 8006796:	61bb      	str	r3, [r7, #24]
 8006798:	e007      	b.n	80067aa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	781a      	ldrb	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	3301      	adds	r3, #1
 80067a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	3b01      	subs	r3, #1
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1cc      	bne.n	8006762 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2200      	movs	r2, #0
 80067d0:	2140      	movs	r1, #64	@ 0x40
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 fb4d 	bl	8006e72 <UART_WaitOnFlagUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e005      	b.n	80067ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2220      	movs	r2, #32
 80067e6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	e000      	b.n	80067ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80067ec:	2302      	movs	r3, #2
  }
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3720      	adds	r7, #32
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b088      	sub	sp, #32
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006800:	2300      	movs	r3, #0
 8006802:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	431a      	orrs	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	431a      	orrs	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	4313      	orrs	r3, r2
 800681a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	4ba6      	ldr	r3, [pc, #664]	@ (8006abc <UART_SetConfig+0x2c4>)
 8006824:	4013      	ands	r3, r2
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6812      	ldr	r2, [r2, #0]
 800682a:	6979      	ldr	r1, [r7, #20]
 800682c:	430b      	orrs	r3, r1
 800682e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68da      	ldr	r2, [r3, #12]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	430a      	orrs	r2, r1
 8006868:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a94      	ldr	r2, [pc, #592]	@ (8006ac0 <UART_SetConfig+0x2c8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d120      	bne.n	80068b6 <UART_SetConfig+0xbe>
 8006874:	4b93      	ldr	r3, [pc, #588]	@ (8006ac4 <UART_SetConfig+0x2cc>)
 8006876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687a:	f003 0303 	and.w	r3, r3, #3
 800687e:	2b03      	cmp	r3, #3
 8006880:	d816      	bhi.n	80068b0 <UART_SetConfig+0xb8>
 8006882:	a201      	add	r2, pc, #4	@ (adr r2, 8006888 <UART_SetConfig+0x90>)
 8006884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006888:	08006899 	.word	0x08006899
 800688c:	080068a5 	.word	0x080068a5
 8006890:	0800689f 	.word	0x0800689f
 8006894:	080068ab 	.word	0x080068ab
 8006898:	2301      	movs	r3, #1
 800689a:	77fb      	strb	r3, [r7, #31]
 800689c:	e150      	b.n	8006b40 <UART_SetConfig+0x348>
 800689e:	2302      	movs	r3, #2
 80068a0:	77fb      	strb	r3, [r7, #31]
 80068a2:	e14d      	b.n	8006b40 <UART_SetConfig+0x348>
 80068a4:	2304      	movs	r3, #4
 80068a6:	77fb      	strb	r3, [r7, #31]
 80068a8:	e14a      	b.n	8006b40 <UART_SetConfig+0x348>
 80068aa:	2308      	movs	r3, #8
 80068ac:	77fb      	strb	r3, [r7, #31]
 80068ae:	e147      	b.n	8006b40 <UART_SetConfig+0x348>
 80068b0:	2310      	movs	r3, #16
 80068b2:	77fb      	strb	r3, [r7, #31]
 80068b4:	e144      	b.n	8006b40 <UART_SetConfig+0x348>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a83      	ldr	r2, [pc, #524]	@ (8006ac8 <UART_SetConfig+0x2d0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d132      	bne.n	8006926 <UART_SetConfig+0x12e>
 80068c0:	4b80      	ldr	r3, [pc, #512]	@ (8006ac4 <UART_SetConfig+0x2cc>)
 80068c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c6:	f003 030c 	and.w	r3, r3, #12
 80068ca:	2b0c      	cmp	r3, #12
 80068cc:	d828      	bhi.n	8006920 <UART_SetConfig+0x128>
 80068ce:	a201      	add	r2, pc, #4	@ (adr r2, 80068d4 <UART_SetConfig+0xdc>)
 80068d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d4:	08006909 	.word	0x08006909
 80068d8:	08006921 	.word	0x08006921
 80068dc:	08006921 	.word	0x08006921
 80068e0:	08006921 	.word	0x08006921
 80068e4:	08006915 	.word	0x08006915
 80068e8:	08006921 	.word	0x08006921
 80068ec:	08006921 	.word	0x08006921
 80068f0:	08006921 	.word	0x08006921
 80068f4:	0800690f 	.word	0x0800690f
 80068f8:	08006921 	.word	0x08006921
 80068fc:	08006921 	.word	0x08006921
 8006900:	08006921 	.word	0x08006921
 8006904:	0800691b 	.word	0x0800691b
 8006908:	2300      	movs	r3, #0
 800690a:	77fb      	strb	r3, [r7, #31]
 800690c:	e118      	b.n	8006b40 <UART_SetConfig+0x348>
 800690e:	2302      	movs	r3, #2
 8006910:	77fb      	strb	r3, [r7, #31]
 8006912:	e115      	b.n	8006b40 <UART_SetConfig+0x348>
 8006914:	2304      	movs	r3, #4
 8006916:	77fb      	strb	r3, [r7, #31]
 8006918:	e112      	b.n	8006b40 <UART_SetConfig+0x348>
 800691a:	2308      	movs	r3, #8
 800691c:	77fb      	strb	r3, [r7, #31]
 800691e:	e10f      	b.n	8006b40 <UART_SetConfig+0x348>
 8006920:	2310      	movs	r3, #16
 8006922:	77fb      	strb	r3, [r7, #31]
 8006924:	e10c      	b.n	8006b40 <UART_SetConfig+0x348>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a68      	ldr	r2, [pc, #416]	@ (8006acc <UART_SetConfig+0x2d4>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d120      	bne.n	8006972 <UART_SetConfig+0x17a>
 8006930:	4b64      	ldr	r3, [pc, #400]	@ (8006ac4 <UART_SetConfig+0x2cc>)
 8006932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006936:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800693a:	2b30      	cmp	r3, #48	@ 0x30
 800693c:	d013      	beq.n	8006966 <UART_SetConfig+0x16e>
 800693e:	2b30      	cmp	r3, #48	@ 0x30
 8006940:	d814      	bhi.n	800696c <UART_SetConfig+0x174>
 8006942:	2b20      	cmp	r3, #32
 8006944:	d009      	beq.n	800695a <UART_SetConfig+0x162>
 8006946:	2b20      	cmp	r3, #32
 8006948:	d810      	bhi.n	800696c <UART_SetConfig+0x174>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d002      	beq.n	8006954 <UART_SetConfig+0x15c>
 800694e:	2b10      	cmp	r3, #16
 8006950:	d006      	beq.n	8006960 <UART_SetConfig+0x168>
 8006952:	e00b      	b.n	800696c <UART_SetConfig+0x174>
 8006954:	2300      	movs	r3, #0
 8006956:	77fb      	strb	r3, [r7, #31]
 8006958:	e0f2      	b.n	8006b40 <UART_SetConfig+0x348>
 800695a:	2302      	movs	r3, #2
 800695c:	77fb      	strb	r3, [r7, #31]
 800695e:	e0ef      	b.n	8006b40 <UART_SetConfig+0x348>
 8006960:	2304      	movs	r3, #4
 8006962:	77fb      	strb	r3, [r7, #31]
 8006964:	e0ec      	b.n	8006b40 <UART_SetConfig+0x348>
 8006966:	2308      	movs	r3, #8
 8006968:	77fb      	strb	r3, [r7, #31]
 800696a:	e0e9      	b.n	8006b40 <UART_SetConfig+0x348>
 800696c:	2310      	movs	r3, #16
 800696e:	77fb      	strb	r3, [r7, #31]
 8006970:	e0e6      	b.n	8006b40 <UART_SetConfig+0x348>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a56      	ldr	r2, [pc, #344]	@ (8006ad0 <UART_SetConfig+0x2d8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d120      	bne.n	80069be <UART_SetConfig+0x1c6>
 800697c:	4b51      	ldr	r3, [pc, #324]	@ (8006ac4 <UART_SetConfig+0x2cc>)
 800697e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006982:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006986:	2bc0      	cmp	r3, #192	@ 0xc0
 8006988:	d013      	beq.n	80069b2 <UART_SetConfig+0x1ba>
 800698a:	2bc0      	cmp	r3, #192	@ 0xc0
 800698c:	d814      	bhi.n	80069b8 <UART_SetConfig+0x1c0>
 800698e:	2b80      	cmp	r3, #128	@ 0x80
 8006990:	d009      	beq.n	80069a6 <UART_SetConfig+0x1ae>
 8006992:	2b80      	cmp	r3, #128	@ 0x80
 8006994:	d810      	bhi.n	80069b8 <UART_SetConfig+0x1c0>
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <UART_SetConfig+0x1a8>
 800699a:	2b40      	cmp	r3, #64	@ 0x40
 800699c:	d006      	beq.n	80069ac <UART_SetConfig+0x1b4>
 800699e:	e00b      	b.n	80069b8 <UART_SetConfig+0x1c0>
 80069a0:	2300      	movs	r3, #0
 80069a2:	77fb      	strb	r3, [r7, #31]
 80069a4:	e0cc      	b.n	8006b40 <UART_SetConfig+0x348>
 80069a6:	2302      	movs	r3, #2
 80069a8:	77fb      	strb	r3, [r7, #31]
 80069aa:	e0c9      	b.n	8006b40 <UART_SetConfig+0x348>
 80069ac:	2304      	movs	r3, #4
 80069ae:	77fb      	strb	r3, [r7, #31]
 80069b0:	e0c6      	b.n	8006b40 <UART_SetConfig+0x348>
 80069b2:	2308      	movs	r3, #8
 80069b4:	77fb      	strb	r3, [r7, #31]
 80069b6:	e0c3      	b.n	8006b40 <UART_SetConfig+0x348>
 80069b8:	2310      	movs	r3, #16
 80069ba:	77fb      	strb	r3, [r7, #31]
 80069bc:	e0c0      	b.n	8006b40 <UART_SetConfig+0x348>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a44      	ldr	r2, [pc, #272]	@ (8006ad4 <UART_SetConfig+0x2dc>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d125      	bne.n	8006a14 <UART_SetConfig+0x21c>
 80069c8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ac4 <UART_SetConfig+0x2cc>)
 80069ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069d6:	d017      	beq.n	8006a08 <UART_SetConfig+0x210>
 80069d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069dc:	d817      	bhi.n	8006a0e <UART_SetConfig+0x216>
 80069de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069e2:	d00b      	beq.n	80069fc <UART_SetConfig+0x204>
 80069e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069e8:	d811      	bhi.n	8006a0e <UART_SetConfig+0x216>
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <UART_SetConfig+0x1fe>
 80069ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069f2:	d006      	beq.n	8006a02 <UART_SetConfig+0x20a>
 80069f4:	e00b      	b.n	8006a0e <UART_SetConfig+0x216>
 80069f6:	2300      	movs	r3, #0
 80069f8:	77fb      	strb	r3, [r7, #31]
 80069fa:	e0a1      	b.n	8006b40 <UART_SetConfig+0x348>
 80069fc:	2302      	movs	r3, #2
 80069fe:	77fb      	strb	r3, [r7, #31]
 8006a00:	e09e      	b.n	8006b40 <UART_SetConfig+0x348>
 8006a02:	2304      	movs	r3, #4
 8006a04:	77fb      	strb	r3, [r7, #31]
 8006a06:	e09b      	b.n	8006b40 <UART_SetConfig+0x348>
 8006a08:	2308      	movs	r3, #8
 8006a0a:	77fb      	strb	r3, [r7, #31]
 8006a0c:	e098      	b.n	8006b40 <UART_SetConfig+0x348>
 8006a0e:	2310      	movs	r3, #16
 8006a10:	77fb      	strb	r3, [r7, #31]
 8006a12:	e095      	b.n	8006b40 <UART_SetConfig+0x348>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a2f      	ldr	r2, [pc, #188]	@ (8006ad8 <UART_SetConfig+0x2e0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d125      	bne.n	8006a6a <UART_SetConfig+0x272>
 8006a1e:	4b29      	ldr	r3, [pc, #164]	@ (8006ac4 <UART_SetConfig+0x2cc>)
 8006a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a2c:	d017      	beq.n	8006a5e <UART_SetConfig+0x266>
 8006a2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a32:	d817      	bhi.n	8006a64 <UART_SetConfig+0x26c>
 8006a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a38:	d00b      	beq.n	8006a52 <UART_SetConfig+0x25a>
 8006a3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a3e:	d811      	bhi.n	8006a64 <UART_SetConfig+0x26c>
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <UART_SetConfig+0x254>
 8006a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a48:	d006      	beq.n	8006a58 <UART_SetConfig+0x260>
 8006a4a:	e00b      	b.n	8006a64 <UART_SetConfig+0x26c>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	77fb      	strb	r3, [r7, #31]
 8006a50:	e076      	b.n	8006b40 <UART_SetConfig+0x348>
 8006a52:	2302      	movs	r3, #2
 8006a54:	77fb      	strb	r3, [r7, #31]
 8006a56:	e073      	b.n	8006b40 <UART_SetConfig+0x348>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	77fb      	strb	r3, [r7, #31]
 8006a5c:	e070      	b.n	8006b40 <UART_SetConfig+0x348>
 8006a5e:	2308      	movs	r3, #8
 8006a60:	77fb      	strb	r3, [r7, #31]
 8006a62:	e06d      	b.n	8006b40 <UART_SetConfig+0x348>
 8006a64:	2310      	movs	r3, #16
 8006a66:	77fb      	strb	r3, [r7, #31]
 8006a68:	e06a      	b.n	8006b40 <UART_SetConfig+0x348>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8006adc <UART_SetConfig+0x2e4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d138      	bne.n	8006ae6 <UART_SetConfig+0x2ee>
 8006a74:	4b13      	ldr	r3, [pc, #76]	@ (8006ac4 <UART_SetConfig+0x2cc>)
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a7a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006a7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a82:	d017      	beq.n	8006ab4 <UART_SetConfig+0x2bc>
 8006a84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a88:	d82a      	bhi.n	8006ae0 <UART_SetConfig+0x2e8>
 8006a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a8e:	d00b      	beq.n	8006aa8 <UART_SetConfig+0x2b0>
 8006a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a94:	d824      	bhi.n	8006ae0 <UART_SetConfig+0x2e8>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <UART_SetConfig+0x2aa>
 8006a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a9e:	d006      	beq.n	8006aae <UART_SetConfig+0x2b6>
 8006aa0:	e01e      	b.n	8006ae0 <UART_SetConfig+0x2e8>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	77fb      	strb	r3, [r7, #31]
 8006aa6:	e04b      	b.n	8006b40 <UART_SetConfig+0x348>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	77fb      	strb	r3, [r7, #31]
 8006aac:	e048      	b.n	8006b40 <UART_SetConfig+0x348>
 8006aae:	2304      	movs	r3, #4
 8006ab0:	77fb      	strb	r3, [r7, #31]
 8006ab2:	e045      	b.n	8006b40 <UART_SetConfig+0x348>
 8006ab4:	2308      	movs	r3, #8
 8006ab6:	77fb      	strb	r3, [r7, #31]
 8006ab8:	e042      	b.n	8006b40 <UART_SetConfig+0x348>
 8006aba:	bf00      	nop
 8006abc:	efff69f3 	.word	0xefff69f3
 8006ac0:	40011000 	.word	0x40011000
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	40004400 	.word	0x40004400
 8006acc:	40004800 	.word	0x40004800
 8006ad0:	40004c00 	.word	0x40004c00
 8006ad4:	40005000 	.word	0x40005000
 8006ad8:	40011400 	.word	0x40011400
 8006adc:	40007800 	.word	0x40007800
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	77fb      	strb	r3, [r7, #31]
 8006ae4:	e02c      	b.n	8006b40 <UART_SetConfig+0x348>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a72      	ldr	r2, [pc, #456]	@ (8006cb4 <UART_SetConfig+0x4bc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d125      	bne.n	8006b3c <UART_SetConfig+0x344>
 8006af0:	4b71      	ldr	r3, [pc, #452]	@ (8006cb8 <UART_SetConfig+0x4c0>)
 8006af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006afa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006afe:	d017      	beq.n	8006b30 <UART_SetConfig+0x338>
 8006b00:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006b04:	d817      	bhi.n	8006b36 <UART_SetConfig+0x33e>
 8006b06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b0a:	d00b      	beq.n	8006b24 <UART_SetConfig+0x32c>
 8006b0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b10:	d811      	bhi.n	8006b36 <UART_SetConfig+0x33e>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <UART_SetConfig+0x326>
 8006b16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b1a:	d006      	beq.n	8006b2a <UART_SetConfig+0x332>
 8006b1c:	e00b      	b.n	8006b36 <UART_SetConfig+0x33e>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	77fb      	strb	r3, [r7, #31]
 8006b22:	e00d      	b.n	8006b40 <UART_SetConfig+0x348>
 8006b24:	2302      	movs	r3, #2
 8006b26:	77fb      	strb	r3, [r7, #31]
 8006b28:	e00a      	b.n	8006b40 <UART_SetConfig+0x348>
 8006b2a:	2304      	movs	r3, #4
 8006b2c:	77fb      	strb	r3, [r7, #31]
 8006b2e:	e007      	b.n	8006b40 <UART_SetConfig+0x348>
 8006b30:	2308      	movs	r3, #8
 8006b32:	77fb      	strb	r3, [r7, #31]
 8006b34:	e004      	b.n	8006b40 <UART_SetConfig+0x348>
 8006b36:	2310      	movs	r3, #16
 8006b38:	77fb      	strb	r3, [r7, #31]
 8006b3a:	e001      	b.n	8006b40 <UART_SetConfig+0x348>
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b48:	d15b      	bne.n	8006c02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006b4a:	7ffb      	ldrb	r3, [r7, #31]
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d828      	bhi.n	8006ba2 <UART_SetConfig+0x3aa>
 8006b50:	a201      	add	r2, pc, #4	@ (adr r2, 8006b58 <UART_SetConfig+0x360>)
 8006b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b56:	bf00      	nop
 8006b58:	08006b7d 	.word	0x08006b7d
 8006b5c:	08006b85 	.word	0x08006b85
 8006b60:	08006b8d 	.word	0x08006b8d
 8006b64:	08006ba3 	.word	0x08006ba3
 8006b68:	08006b93 	.word	0x08006b93
 8006b6c:	08006ba3 	.word	0x08006ba3
 8006b70:	08006ba3 	.word	0x08006ba3
 8006b74:	08006ba3 	.word	0x08006ba3
 8006b78:	08006b9b 	.word	0x08006b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b7c:	f7ff f952 	bl	8005e24 <HAL_RCC_GetPCLK1Freq>
 8006b80:	61b8      	str	r0, [r7, #24]
        break;
 8006b82:	e013      	b.n	8006bac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b84:	f7ff f962 	bl	8005e4c <HAL_RCC_GetPCLK2Freq>
 8006b88:	61b8      	str	r0, [r7, #24]
        break;
 8006b8a:	e00f      	b.n	8006bac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8006cbc <UART_SetConfig+0x4c4>)
 8006b8e:	61bb      	str	r3, [r7, #24]
        break;
 8006b90:	e00c      	b.n	8006bac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b92:	f7ff f835 	bl	8005c00 <HAL_RCC_GetSysClockFreq>
 8006b96:	61b8      	str	r0, [r7, #24]
        break;
 8006b98:	e008      	b.n	8006bac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b9e:	61bb      	str	r3, [r7, #24]
        break;
 8006ba0:	e004      	b.n	8006bac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	77bb      	strb	r3, [r7, #30]
        break;
 8006baa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d074      	beq.n	8006c9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	005a      	lsls	r2, r3, #1
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	085b      	lsrs	r3, r3, #1
 8006bbc:	441a      	add	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	2b0f      	cmp	r3, #15
 8006bcc:	d916      	bls.n	8006bfc <UART_SetConfig+0x404>
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bd4:	d212      	bcs.n	8006bfc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f023 030f 	bic.w	r3, r3, #15
 8006bde:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	085b      	lsrs	r3, r3, #1
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	89fb      	ldrh	r3, [r7, #14]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	89fa      	ldrh	r2, [r7, #14]
 8006bf8:	60da      	str	r2, [r3, #12]
 8006bfa:	e04f      	b.n	8006c9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	77bb      	strb	r3, [r7, #30]
 8006c00:	e04c      	b.n	8006c9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c02:	7ffb      	ldrb	r3, [r7, #31]
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d828      	bhi.n	8006c5a <UART_SetConfig+0x462>
 8006c08:	a201      	add	r2, pc, #4	@ (adr r2, 8006c10 <UART_SetConfig+0x418>)
 8006c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0e:	bf00      	nop
 8006c10:	08006c35 	.word	0x08006c35
 8006c14:	08006c3d 	.word	0x08006c3d
 8006c18:	08006c45 	.word	0x08006c45
 8006c1c:	08006c5b 	.word	0x08006c5b
 8006c20:	08006c4b 	.word	0x08006c4b
 8006c24:	08006c5b 	.word	0x08006c5b
 8006c28:	08006c5b 	.word	0x08006c5b
 8006c2c:	08006c5b 	.word	0x08006c5b
 8006c30:	08006c53 	.word	0x08006c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c34:	f7ff f8f6 	bl	8005e24 <HAL_RCC_GetPCLK1Freq>
 8006c38:	61b8      	str	r0, [r7, #24]
        break;
 8006c3a:	e013      	b.n	8006c64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c3c:	f7ff f906 	bl	8005e4c <HAL_RCC_GetPCLK2Freq>
 8006c40:	61b8      	str	r0, [r7, #24]
        break;
 8006c42:	e00f      	b.n	8006c64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c44:	4b1d      	ldr	r3, [pc, #116]	@ (8006cbc <UART_SetConfig+0x4c4>)
 8006c46:	61bb      	str	r3, [r7, #24]
        break;
 8006c48:	e00c      	b.n	8006c64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c4a:	f7fe ffd9 	bl	8005c00 <HAL_RCC_GetSysClockFreq>
 8006c4e:	61b8      	str	r0, [r7, #24]
        break;
 8006c50:	e008      	b.n	8006c64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c56:	61bb      	str	r3, [r7, #24]
        break;
 8006c58:	e004      	b.n	8006c64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	77bb      	strb	r3, [r7, #30]
        break;
 8006c62:	bf00      	nop
    }

    if (pclk != 0U)
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d018      	beq.n	8006c9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	085a      	lsrs	r2, r3, #1
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	441a      	add	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b0f      	cmp	r3, #15
 8006c82:	d909      	bls.n	8006c98 <UART_SetConfig+0x4a0>
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c8a:	d205      	bcs.n	8006c98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	60da      	str	r2, [r3, #12]
 8006c96:	e001      	b.n	8006c9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006ca8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3720      	adds	r7, #32
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	40007c00 	.word	0x40007c00
 8006cb8:	40023800 	.word	0x40023800
 8006cbc:	00f42400 	.word	0x00f42400

08006cc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00a      	beq.n	8006cea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00a      	beq.n	8006d2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d32:	f003 0308 	and.w	r3, r3, #8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00a      	beq.n	8006d50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d54:	f003 0310 	and.w	r3, r3, #16
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00a      	beq.n	8006d72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00a      	beq.n	8006d94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d01a      	beq.n	8006dd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dbe:	d10a      	bne.n	8006dd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	605a      	str	r2, [r3, #4]
  }
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e14:	f7fd fc0a 	bl	800462c <HAL_GetTick>
 8006e18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0308 	and.w	r3, r3, #8
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d10e      	bne.n	8006e46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f81b 	bl	8006e72 <UART_WaitOnFlagUntilTimeout>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e011      	b.n	8006e6a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b09c      	sub	sp, #112	@ 0x70
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	60b9      	str	r1, [r7, #8]
 8006e7c:	603b      	str	r3, [r7, #0]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e82:	e0a7      	b.n	8006fd4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e8a:	f000 80a3 	beq.w	8006fd4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e8e:	f7fd fbcd 	bl	800462c <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d302      	bcc.n	8006ea4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d13f      	bne.n	8006f24 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006eb4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006eb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ec2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ec4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006ec8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e6      	bne.n	8006ea4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3308      	adds	r3, #8
 8006edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee8:	f023 0301 	bic.w	r3, r3, #1
 8006eec:	663b      	str	r3, [r7, #96]	@ 0x60
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006ef6:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006ef8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006efc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e5      	bne.n	8006ed6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e068      	b.n	8006ff6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0304 	and.w	r3, r3, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d050      	beq.n	8006fd4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f40:	d148      	bne.n	8006fd4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f4a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006f60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f6c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e6      	bne.n	8006f4c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3308      	adds	r3, #8
 8006f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f023 0301 	bic.w	r3, r3, #1
 8006f94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006f9e:	623a      	str	r2, [r7, #32]
 8006fa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	69f9      	ldr	r1, [r7, #28]
 8006fa4:	6a3a      	ldr	r2, [r7, #32]
 8006fa6:	e841 2300 	strex	r3, r2, [r1]
 8006faa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1e5      	bne.n	8006f7e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e010      	b.n	8006ff6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	69da      	ldr	r2, [r3, #28]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	bf0c      	ite	eq
 8006fe4:	2301      	moveq	r3, #1
 8006fe6:	2300      	movne	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	461a      	mov	r2, r3
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	f43f af48 	beq.w	8006e84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3770      	adds	r7, #112	@ 0x70
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
	...

08007000 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007000:	b084      	sub	sp, #16
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	f107 001c 	add.w	r0, r7, #28
 800700e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007014:	2b01      	cmp	r3, #1
 8007016:	d120      	bne.n	800705a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	4b20      	ldr	r3, [pc, #128]	@ (80070ac <USB_CoreInit+0xac>)
 800702a:	4013      	ands	r3, r2
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800703c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800703e:	2b01      	cmp	r3, #1
 8007040:	d105      	bne.n	800704e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fa96 	bl	8007580 <USB_CoreReset>
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]
 8007058:	e010      	b.n	800707c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fa8a 	bl	8007580 <USB_CoreReset>
 800706c:	4603      	mov	r3, r0
 800706e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007074:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800707c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707e:	2b01      	cmp	r3, #1
 8007080:	d10b      	bne.n	800709a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f043 0206 	orr.w	r2, r3, #6
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f043 0220 	orr.w	r2, r3, #32
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800709a:	7bfb      	ldrb	r3, [r7, #15]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070a6:	b004      	add	sp, #16
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	ffbdffbf 	.word	0xffbdffbf

080070b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f023 0201 	bic.w	r2, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d115      	bne.n	8007120 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007100:	2001      	movs	r0, #1
 8007102:	f7fd fa9f 	bl	8004644 <HAL_Delay>
      ms++;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	3301      	adds	r3, #1
 800710a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fa29 	bl	8007564 <USB_GetMode>
 8007112:	4603      	mov	r3, r0
 8007114:	2b01      	cmp	r3, #1
 8007116:	d01e      	beq.n	8007156 <USB_SetCurrentMode+0x84>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b31      	cmp	r3, #49	@ 0x31
 800711c:	d9f0      	bls.n	8007100 <USB_SetCurrentMode+0x2e>
 800711e:	e01a      	b.n	8007156 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d115      	bne.n	8007152 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007132:	2001      	movs	r0, #1
 8007134:	f7fd fa86 	bl	8004644 <HAL_Delay>
      ms++;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fa10 	bl	8007564 <USB_GetMode>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d005      	beq.n	8007156 <USB_SetCurrentMode+0x84>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b31      	cmp	r3, #49	@ 0x31
 800714e:	d9f0      	bls.n	8007132 <USB_SetCurrentMode+0x60>
 8007150:	e001      	b.n	8007156 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e005      	b.n	8007162 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b32      	cmp	r3, #50	@ 0x32
 800715a:	d101      	bne.n	8007160 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e000      	b.n	8007162 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800716c:	b084      	sub	sp, #16
 800716e:	b580      	push	{r7, lr}
 8007170:	b086      	sub	sp, #24
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800717a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007186:	2300      	movs	r3, #0
 8007188:	613b      	str	r3, [r7, #16]
 800718a:	e009      	b.n	80071a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	3340      	adds	r3, #64	@ 0x40
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	2200      	movs	r2, #0
 8007198:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	3301      	adds	r3, #1
 800719e:	613b      	str	r3, [r7, #16]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	2b0e      	cmp	r3, #14
 80071a4:	d9f2      	bls.n	800718c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d11c      	bne.n	80071e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071ba:	f043 0302 	orr.w	r3, r3, #2
 80071be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	e005      	b.n	80071f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071f8:	461a      	mov	r2, r3
 80071fa:	2300      	movs	r3, #0
 80071fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007204:	4619      	mov	r1, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800720c:	461a      	mov	r2, r3
 800720e:	680b      	ldr	r3, [r1, #0]
 8007210:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007214:	2b01      	cmp	r3, #1
 8007216:	d10c      	bne.n	8007232 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721a:	2b00      	cmp	r3, #0
 800721c:	d104      	bne.n	8007228 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800721e:	2100      	movs	r1, #0
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f965 	bl	80074f0 <USB_SetDevSpeed>
 8007226:	e008      	b.n	800723a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007228:	2101      	movs	r1, #1
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f960 	bl	80074f0 <USB_SetDevSpeed>
 8007230:	e003      	b.n	800723a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007232:	2103      	movs	r1, #3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f95b 	bl	80074f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800723a:	2110      	movs	r1, #16
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f8f3 	bl	8007428 <USB_FlushTxFifo>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f91f 	bl	8007490 <USB_FlushRxFifo>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007262:	461a      	mov	r2, r3
 8007264:	2300      	movs	r3, #0
 8007266:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800726e:	461a      	mov	r2, r3
 8007270:	2300      	movs	r3, #0
 8007272:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800727a:	461a      	mov	r2, r3
 800727c:	2300      	movs	r3, #0
 800727e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007280:	2300      	movs	r3, #0
 8007282:	613b      	str	r3, [r7, #16]
 8007284:	e043      	b.n	800730e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007298:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800729c:	d118      	bne.n	80072d0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072b0:	461a      	mov	r2, r3
 80072b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	e013      	b.n	80072e2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072c6:	461a      	mov	r2, r3
 80072c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	e008      	b.n	80072e2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072dc:	461a      	mov	r2, r3
 80072de:	2300      	movs	r3, #0
 80072e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ee:	461a      	mov	r2, r3
 80072f0:	2300      	movs	r3, #0
 80072f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007300:	461a      	mov	r2, r3
 8007302:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007306:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	3301      	adds	r3, #1
 800730c:	613b      	str	r3, [r7, #16]
 800730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	429a      	cmp	r2, r3
 8007314:	d3b7      	bcc.n	8007286 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007316:	2300      	movs	r3, #0
 8007318:	613b      	str	r3, [r7, #16]
 800731a:	e043      	b.n	80073a4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800732e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007332:	d118      	bne.n	8007366 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10a      	bne.n	8007350 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007346:	461a      	mov	r2, r3
 8007348:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	e013      	b.n	8007378 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800735c:	461a      	mov	r2, r3
 800735e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007362:	6013      	str	r3, [r2, #0]
 8007364:	e008      	b.n	8007378 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4413      	add	r3, r2
 800736e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007372:	461a      	mov	r2, r3
 8007374:	2300      	movs	r3, #0
 8007376:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007384:	461a      	mov	r2, r3
 8007386:	2300      	movs	r3, #0
 8007388:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007396:	461a      	mov	r2, r3
 8007398:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800739c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	3301      	adds	r3, #1
 80073a2:	613b      	str	r3, [r7, #16]
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d3b7      	bcc.n	800731c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80073cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d105      	bne.n	80073e0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	f043 0210 	orr.w	r2, r3, #16
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	699a      	ldr	r2, [r3, #24]
 80073e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007420 <USB_DevInit+0x2b4>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d005      	beq.n	80073fe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	f043 0208 	orr.w	r2, r3, #8
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007400:	2b01      	cmp	r3, #1
 8007402:	d105      	bne.n	8007410 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699a      	ldr	r2, [r3, #24]
 8007408:	4b06      	ldr	r3, [pc, #24]	@ (8007424 <USB_DevInit+0x2b8>)
 800740a:	4313      	orrs	r3, r2
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007410:	7dfb      	ldrb	r3, [r7, #23]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3718      	adds	r7, #24
 8007416:	46bd      	mov	sp, r7
 8007418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800741c:	b004      	add	sp, #16
 800741e:	4770      	bx	lr
 8007420:	803c3800 	.word	0x803c3800
 8007424:	40000004 	.word	0x40000004

08007428 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3301      	adds	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4a13      	ldr	r2, [pc, #76]	@ (800748c <USB_FlushTxFifo+0x64>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d901      	bls.n	8007448 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e01b      	b.n	8007480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	daf2      	bge.n	8007436 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	019b      	lsls	r3, r3, #6
 8007458:	f043 0220 	orr.w	r2, r3, #32
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3301      	adds	r3, #1
 8007464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4a08      	ldr	r2, [pc, #32]	@ (800748c <USB_FlushTxFifo+0x64>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d901      	bls.n	8007472 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e006      	b.n	8007480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f003 0320 	and.w	r3, r3, #32
 800747a:	2b20      	cmp	r3, #32
 800747c:	d0f0      	beq.n	8007460 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	00030d40 	.word	0x00030d40

08007490 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3301      	adds	r3, #1
 80074a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	4a11      	ldr	r2, [pc, #68]	@ (80074ec <USB_FlushRxFifo+0x5c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d901      	bls.n	80074ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e018      	b.n	80074e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	daf2      	bge.n	800749c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2210      	movs	r2, #16
 80074be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3301      	adds	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4a08      	ldr	r2, [pc, #32]	@ (80074ec <USB_FlushRxFifo+0x5c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d901      	bls.n	80074d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e006      	b.n	80074e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	2b10      	cmp	r3, #16
 80074dc:	d0f0      	beq.n	80074c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	00030d40 	.word	0x00030d40

080074f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	68f9      	ldr	r1, [r7, #12]
 800750c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007510:	4313      	orrs	r3, r2
 8007512:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007522:	b480      	push	{r7}
 8007524:	b085      	sub	sp, #20
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800753c:	f023 0303 	bic.w	r3, r3, #3
 8007540:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007550:	f043 0302 	orr.w	r3, r3, #2
 8007554:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	f003 0301 	and.w	r3, r3, #1
}
 8007574:	4618      	mov	r0, r3
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3301      	adds	r3, #1
 8007590:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	4a13      	ldr	r2, [pc, #76]	@ (80075e4 <USB_CoreReset+0x64>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d901      	bls.n	800759e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e01b      	b.n	80075d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	daf2      	bge.n	800758c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f043 0201 	orr.w	r2, r3, #1
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3301      	adds	r3, #1
 80075ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4a09      	ldr	r2, [pc, #36]	@ (80075e4 <USB_CoreReset+0x64>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d901      	bls.n	80075c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e006      	b.n	80075d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d0f0      	beq.n	80075b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	00030d40 	.word	0x00030d40

080075e8 <siprintf>:
 80075e8:	b40e      	push	{r1, r2, r3}
 80075ea:	b500      	push	{lr}
 80075ec:	b09c      	sub	sp, #112	@ 0x70
 80075ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80075f0:	9002      	str	r0, [sp, #8]
 80075f2:	9006      	str	r0, [sp, #24]
 80075f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80075f8:	4809      	ldr	r0, [pc, #36]	@ (8007620 <siprintf+0x38>)
 80075fa:	9107      	str	r1, [sp, #28]
 80075fc:	9104      	str	r1, [sp, #16]
 80075fe:	4909      	ldr	r1, [pc, #36]	@ (8007624 <siprintf+0x3c>)
 8007600:	f853 2b04 	ldr.w	r2, [r3], #4
 8007604:	9105      	str	r1, [sp, #20]
 8007606:	6800      	ldr	r0, [r0, #0]
 8007608:	9301      	str	r3, [sp, #4]
 800760a:	a902      	add	r1, sp, #8
 800760c:	f000 f9a2 	bl	8007954 <_svfiprintf_r>
 8007610:	9b02      	ldr	r3, [sp, #8]
 8007612:	2200      	movs	r2, #0
 8007614:	701a      	strb	r2, [r3, #0]
 8007616:	b01c      	add	sp, #112	@ 0x70
 8007618:	f85d eb04 	ldr.w	lr, [sp], #4
 800761c:	b003      	add	sp, #12
 800761e:	4770      	bx	lr
 8007620:	20000048 	.word	0x20000048
 8007624:	ffff0208 	.word	0xffff0208

08007628 <memset>:
 8007628:	4402      	add	r2, r0
 800762a:	4603      	mov	r3, r0
 800762c:	4293      	cmp	r3, r2
 800762e:	d100      	bne.n	8007632 <memset+0xa>
 8007630:	4770      	bx	lr
 8007632:	f803 1b01 	strb.w	r1, [r3], #1
 8007636:	e7f9      	b.n	800762c <memset+0x4>

08007638 <__errno>:
 8007638:	4b01      	ldr	r3, [pc, #4]	@ (8007640 <__errno+0x8>)
 800763a:	6818      	ldr	r0, [r3, #0]
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	20000048 	.word	0x20000048

08007644 <__libc_init_array>:
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	4d0d      	ldr	r5, [pc, #52]	@ (800767c <__libc_init_array+0x38>)
 8007648:	4c0d      	ldr	r4, [pc, #52]	@ (8007680 <__libc_init_array+0x3c>)
 800764a:	1b64      	subs	r4, r4, r5
 800764c:	10a4      	asrs	r4, r4, #2
 800764e:	2600      	movs	r6, #0
 8007650:	42a6      	cmp	r6, r4
 8007652:	d109      	bne.n	8007668 <__libc_init_array+0x24>
 8007654:	4d0b      	ldr	r5, [pc, #44]	@ (8007684 <__libc_init_array+0x40>)
 8007656:	4c0c      	ldr	r4, [pc, #48]	@ (8007688 <__libc_init_array+0x44>)
 8007658:	f000 fc66 	bl	8007f28 <_init>
 800765c:	1b64      	subs	r4, r4, r5
 800765e:	10a4      	asrs	r4, r4, #2
 8007660:	2600      	movs	r6, #0
 8007662:	42a6      	cmp	r6, r4
 8007664:	d105      	bne.n	8007672 <__libc_init_array+0x2e>
 8007666:	bd70      	pop	{r4, r5, r6, pc}
 8007668:	f855 3b04 	ldr.w	r3, [r5], #4
 800766c:	4798      	blx	r3
 800766e:	3601      	adds	r6, #1
 8007670:	e7ee      	b.n	8007650 <__libc_init_array+0xc>
 8007672:	f855 3b04 	ldr.w	r3, [r5], #4
 8007676:	4798      	blx	r3
 8007678:	3601      	adds	r6, #1
 800767a:	e7f2      	b.n	8007662 <__libc_init_array+0x1e>
 800767c:	08008068 	.word	0x08008068
 8007680:	08008068 	.word	0x08008068
 8007684:	08008068 	.word	0x08008068
 8007688:	0800806c 	.word	0x0800806c

0800768c <__retarget_lock_acquire_recursive>:
 800768c:	4770      	bx	lr

0800768e <__retarget_lock_release_recursive>:
 800768e:	4770      	bx	lr

08007690 <memcpy>:
 8007690:	440a      	add	r2, r1
 8007692:	4291      	cmp	r1, r2
 8007694:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007698:	d100      	bne.n	800769c <memcpy+0xc>
 800769a:	4770      	bx	lr
 800769c:	b510      	push	{r4, lr}
 800769e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076a6:	4291      	cmp	r1, r2
 80076a8:	d1f9      	bne.n	800769e <memcpy+0xe>
 80076aa:	bd10      	pop	{r4, pc}

080076ac <_free_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4605      	mov	r5, r0
 80076b0:	2900      	cmp	r1, #0
 80076b2:	d041      	beq.n	8007738 <_free_r+0x8c>
 80076b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076b8:	1f0c      	subs	r4, r1, #4
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	bfb8      	it	lt
 80076be:	18e4      	addlt	r4, r4, r3
 80076c0:	f000 f8e0 	bl	8007884 <__malloc_lock>
 80076c4:	4a1d      	ldr	r2, [pc, #116]	@ (800773c <_free_r+0x90>)
 80076c6:	6813      	ldr	r3, [r2, #0]
 80076c8:	b933      	cbnz	r3, 80076d8 <_free_r+0x2c>
 80076ca:	6063      	str	r3, [r4, #4]
 80076cc:	6014      	str	r4, [r2, #0]
 80076ce:	4628      	mov	r0, r5
 80076d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076d4:	f000 b8dc 	b.w	8007890 <__malloc_unlock>
 80076d8:	42a3      	cmp	r3, r4
 80076da:	d908      	bls.n	80076ee <_free_r+0x42>
 80076dc:	6820      	ldr	r0, [r4, #0]
 80076de:	1821      	adds	r1, r4, r0
 80076e0:	428b      	cmp	r3, r1
 80076e2:	bf01      	itttt	eq
 80076e4:	6819      	ldreq	r1, [r3, #0]
 80076e6:	685b      	ldreq	r3, [r3, #4]
 80076e8:	1809      	addeq	r1, r1, r0
 80076ea:	6021      	streq	r1, [r4, #0]
 80076ec:	e7ed      	b.n	80076ca <_free_r+0x1e>
 80076ee:	461a      	mov	r2, r3
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	b10b      	cbz	r3, 80076f8 <_free_r+0x4c>
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	d9fa      	bls.n	80076ee <_free_r+0x42>
 80076f8:	6811      	ldr	r1, [r2, #0]
 80076fa:	1850      	adds	r0, r2, r1
 80076fc:	42a0      	cmp	r0, r4
 80076fe:	d10b      	bne.n	8007718 <_free_r+0x6c>
 8007700:	6820      	ldr	r0, [r4, #0]
 8007702:	4401      	add	r1, r0
 8007704:	1850      	adds	r0, r2, r1
 8007706:	4283      	cmp	r3, r0
 8007708:	6011      	str	r1, [r2, #0]
 800770a:	d1e0      	bne.n	80076ce <_free_r+0x22>
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	6053      	str	r3, [r2, #4]
 8007712:	4408      	add	r0, r1
 8007714:	6010      	str	r0, [r2, #0]
 8007716:	e7da      	b.n	80076ce <_free_r+0x22>
 8007718:	d902      	bls.n	8007720 <_free_r+0x74>
 800771a:	230c      	movs	r3, #12
 800771c:	602b      	str	r3, [r5, #0]
 800771e:	e7d6      	b.n	80076ce <_free_r+0x22>
 8007720:	6820      	ldr	r0, [r4, #0]
 8007722:	1821      	adds	r1, r4, r0
 8007724:	428b      	cmp	r3, r1
 8007726:	bf04      	itt	eq
 8007728:	6819      	ldreq	r1, [r3, #0]
 800772a:	685b      	ldreq	r3, [r3, #4]
 800772c:	6063      	str	r3, [r4, #4]
 800772e:	bf04      	itt	eq
 8007730:	1809      	addeq	r1, r1, r0
 8007732:	6021      	streq	r1, [r4, #0]
 8007734:	6054      	str	r4, [r2, #4]
 8007736:	e7ca      	b.n	80076ce <_free_r+0x22>
 8007738:	bd38      	pop	{r3, r4, r5, pc}
 800773a:	bf00      	nop
 800773c:	20003f60 	.word	0x20003f60

08007740 <sbrk_aligned>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	4e0f      	ldr	r6, [pc, #60]	@ (8007780 <sbrk_aligned+0x40>)
 8007744:	460c      	mov	r4, r1
 8007746:	6831      	ldr	r1, [r6, #0]
 8007748:	4605      	mov	r5, r0
 800774a:	b911      	cbnz	r1, 8007752 <sbrk_aligned+0x12>
 800774c:	f000 fba6 	bl	8007e9c <_sbrk_r>
 8007750:	6030      	str	r0, [r6, #0]
 8007752:	4621      	mov	r1, r4
 8007754:	4628      	mov	r0, r5
 8007756:	f000 fba1 	bl	8007e9c <_sbrk_r>
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	d103      	bne.n	8007766 <sbrk_aligned+0x26>
 800775e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007762:	4620      	mov	r0, r4
 8007764:	bd70      	pop	{r4, r5, r6, pc}
 8007766:	1cc4      	adds	r4, r0, #3
 8007768:	f024 0403 	bic.w	r4, r4, #3
 800776c:	42a0      	cmp	r0, r4
 800776e:	d0f8      	beq.n	8007762 <sbrk_aligned+0x22>
 8007770:	1a21      	subs	r1, r4, r0
 8007772:	4628      	mov	r0, r5
 8007774:	f000 fb92 	bl	8007e9c <_sbrk_r>
 8007778:	3001      	adds	r0, #1
 800777a:	d1f2      	bne.n	8007762 <sbrk_aligned+0x22>
 800777c:	e7ef      	b.n	800775e <sbrk_aligned+0x1e>
 800777e:	bf00      	nop
 8007780:	20003f5c 	.word	0x20003f5c

08007784 <_malloc_r>:
 8007784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007788:	1ccd      	adds	r5, r1, #3
 800778a:	f025 0503 	bic.w	r5, r5, #3
 800778e:	3508      	adds	r5, #8
 8007790:	2d0c      	cmp	r5, #12
 8007792:	bf38      	it	cc
 8007794:	250c      	movcc	r5, #12
 8007796:	2d00      	cmp	r5, #0
 8007798:	4606      	mov	r6, r0
 800779a:	db01      	blt.n	80077a0 <_malloc_r+0x1c>
 800779c:	42a9      	cmp	r1, r5
 800779e:	d904      	bls.n	80077aa <_malloc_r+0x26>
 80077a0:	230c      	movs	r3, #12
 80077a2:	6033      	str	r3, [r6, #0]
 80077a4:	2000      	movs	r0, #0
 80077a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007880 <_malloc_r+0xfc>
 80077ae:	f000 f869 	bl	8007884 <__malloc_lock>
 80077b2:	f8d8 3000 	ldr.w	r3, [r8]
 80077b6:	461c      	mov	r4, r3
 80077b8:	bb44      	cbnz	r4, 800780c <_malloc_r+0x88>
 80077ba:	4629      	mov	r1, r5
 80077bc:	4630      	mov	r0, r6
 80077be:	f7ff ffbf 	bl	8007740 <sbrk_aligned>
 80077c2:	1c43      	adds	r3, r0, #1
 80077c4:	4604      	mov	r4, r0
 80077c6:	d158      	bne.n	800787a <_malloc_r+0xf6>
 80077c8:	f8d8 4000 	ldr.w	r4, [r8]
 80077cc:	4627      	mov	r7, r4
 80077ce:	2f00      	cmp	r7, #0
 80077d0:	d143      	bne.n	800785a <_malloc_r+0xd6>
 80077d2:	2c00      	cmp	r4, #0
 80077d4:	d04b      	beq.n	800786e <_malloc_r+0xea>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	4639      	mov	r1, r7
 80077da:	4630      	mov	r0, r6
 80077dc:	eb04 0903 	add.w	r9, r4, r3
 80077e0:	f000 fb5c 	bl	8007e9c <_sbrk_r>
 80077e4:	4581      	cmp	r9, r0
 80077e6:	d142      	bne.n	800786e <_malloc_r+0xea>
 80077e8:	6821      	ldr	r1, [r4, #0]
 80077ea:	1a6d      	subs	r5, r5, r1
 80077ec:	4629      	mov	r1, r5
 80077ee:	4630      	mov	r0, r6
 80077f0:	f7ff ffa6 	bl	8007740 <sbrk_aligned>
 80077f4:	3001      	adds	r0, #1
 80077f6:	d03a      	beq.n	800786e <_malloc_r+0xea>
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	442b      	add	r3, r5
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	bb62      	cbnz	r2, 8007860 <_malloc_r+0xdc>
 8007806:	f8c8 7000 	str.w	r7, [r8]
 800780a:	e00f      	b.n	800782c <_malloc_r+0xa8>
 800780c:	6822      	ldr	r2, [r4, #0]
 800780e:	1b52      	subs	r2, r2, r5
 8007810:	d420      	bmi.n	8007854 <_malloc_r+0xd0>
 8007812:	2a0b      	cmp	r2, #11
 8007814:	d917      	bls.n	8007846 <_malloc_r+0xc2>
 8007816:	1961      	adds	r1, r4, r5
 8007818:	42a3      	cmp	r3, r4
 800781a:	6025      	str	r5, [r4, #0]
 800781c:	bf18      	it	ne
 800781e:	6059      	strne	r1, [r3, #4]
 8007820:	6863      	ldr	r3, [r4, #4]
 8007822:	bf08      	it	eq
 8007824:	f8c8 1000 	streq.w	r1, [r8]
 8007828:	5162      	str	r2, [r4, r5]
 800782a:	604b      	str	r3, [r1, #4]
 800782c:	4630      	mov	r0, r6
 800782e:	f000 f82f 	bl	8007890 <__malloc_unlock>
 8007832:	f104 000b 	add.w	r0, r4, #11
 8007836:	1d23      	adds	r3, r4, #4
 8007838:	f020 0007 	bic.w	r0, r0, #7
 800783c:	1ac2      	subs	r2, r0, r3
 800783e:	bf1c      	itt	ne
 8007840:	1a1b      	subne	r3, r3, r0
 8007842:	50a3      	strne	r3, [r4, r2]
 8007844:	e7af      	b.n	80077a6 <_malloc_r+0x22>
 8007846:	6862      	ldr	r2, [r4, #4]
 8007848:	42a3      	cmp	r3, r4
 800784a:	bf0c      	ite	eq
 800784c:	f8c8 2000 	streq.w	r2, [r8]
 8007850:	605a      	strne	r2, [r3, #4]
 8007852:	e7eb      	b.n	800782c <_malloc_r+0xa8>
 8007854:	4623      	mov	r3, r4
 8007856:	6864      	ldr	r4, [r4, #4]
 8007858:	e7ae      	b.n	80077b8 <_malloc_r+0x34>
 800785a:	463c      	mov	r4, r7
 800785c:	687f      	ldr	r7, [r7, #4]
 800785e:	e7b6      	b.n	80077ce <_malloc_r+0x4a>
 8007860:	461a      	mov	r2, r3
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	42a3      	cmp	r3, r4
 8007866:	d1fb      	bne.n	8007860 <_malloc_r+0xdc>
 8007868:	2300      	movs	r3, #0
 800786a:	6053      	str	r3, [r2, #4]
 800786c:	e7de      	b.n	800782c <_malloc_r+0xa8>
 800786e:	230c      	movs	r3, #12
 8007870:	6033      	str	r3, [r6, #0]
 8007872:	4630      	mov	r0, r6
 8007874:	f000 f80c 	bl	8007890 <__malloc_unlock>
 8007878:	e794      	b.n	80077a4 <_malloc_r+0x20>
 800787a:	6005      	str	r5, [r0, #0]
 800787c:	e7d6      	b.n	800782c <_malloc_r+0xa8>
 800787e:	bf00      	nop
 8007880:	20003f60 	.word	0x20003f60

08007884 <__malloc_lock>:
 8007884:	4801      	ldr	r0, [pc, #4]	@ (800788c <__malloc_lock+0x8>)
 8007886:	f7ff bf01 	b.w	800768c <__retarget_lock_acquire_recursive>
 800788a:	bf00      	nop
 800788c:	20003f58 	.word	0x20003f58

08007890 <__malloc_unlock>:
 8007890:	4801      	ldr	r0, [pc, #4]	@ (8007898 <__malloc_unlock+0x8>)
 8007892:	f7ff befc 	b.w	800768e <__retarget_lock_release_recursive>
 8007896:	bf00      	nop
 8007898:	20003f58 	.word	0x20003f58

0800789c <__ssputs_r>:
 800789c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a0:	688e      	ldr	r6, [r1, #8]
 80078a2:	461f      	mov	r7, r3
 80078a4:	42be      	cmp	r6, r7
 80078a6:	680b      	ldr	r3, [r1, #0]
 80078a8:	4682      	mov	sl, r0
 80078aa:	460c      	mov	r4, r1
 80078ac:	4690      	mov	r8, r2
 80078ae:	d82d      	bhi.n	800790c <__ssputs_r+0x70>
 80078b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80078b8:	d026      	beq.n	8007908 <__ssputs_r+0x6c>
 80078ba:	6965      	ldr	r5, [r4, #20]
 80078bc:	6909      	ldr	r1, [r1, #16]
 80078be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078c2:	eba3 0901 	sub.w	r9, r3, r1
 80078c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078ca:	1c7b      	adds	r3, r7, #1
 80078cc:	444b      	add	r3, r9
 80078ce:	106d      	asrs	r5, r5, #1
 80078d0:	429d      	cmp	r5, r3
 80078d2:	bf38      	it	cc
 80078d4:	461d      	movcc	r5, r3
 80078d6:	0553      	lsls	r3, r2, #21
 80078d8:	d527      	bpl.n	800792a <__ssputs_r+0x8e>
 80078da:	4629      	mov	r1, r5
 80078dc:	f7ff ff52 	bl	8007784 <_malloc_r>
 80078e0:	4606      	mov	r6, r0
 80078e2:	b360      	cbz	r0, 800793e <__ssputs_r+0xa2>
 80078e4:	6921      	ldr	r1, [r4, #16]
 80078e6:	464a      	mov	r2, r9
 80078e8:	f7ff fed2 	bl	8007690 <memcpy>
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80078f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078f6:	81a3      	strh	r3, [r4, #12]
 80078f8:	6126      	str	r6, [r4, #16]
 80078fa:	6165      	str	r5, [r4, #20]
 80078fc:	444e      	add	r6, r9
 80078fe:	eba5 0509 	sub.w	r5, r5, r9
 8007902:	6026      	str	r6, [r4, #0]
 8007904:	60a5      	str	r5, [r4, #8]
 8007906:	463e      	mov	r6, r7
 8007908:	42be      	cmp	r6, r7
 800790a:	d900      	bls.n	800790e <__ssputs_r+0x72>
 800790c:	463e      	mov	r6, r7
 800790e:	6820      	ldr	r0, [r4, #0]
 8007910:	4632      	mov	r2, r6
 8007912:	4641      	mov	r1, r8
 8007914:	f000 faa8 	bl	8007e68 <memmove>
 8007918:	68a3      	ldr	r3, [r4, #8]
 800791a:	1b9b      	subs	r3, r3, r6
 800791c:	60a3      	str	r3, [r4, #8]
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	4433      	add	r3, r6
 8007922:	6023      	str	r3, [r4, #0]
 8007924:	2000      	movs	r0, #0
 8007926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792a:	462a      	mov	r2, r5
 800792c:	f000 fac6 	bl	8007ebc <_realloc_r>
 8007930:	4606      	mov	r6, r0
 8007932:	2800      	cmp	r0, #0
 8007934:	d1e0      	bne.n	80078f8 <__ssputs_r+0x5c>
 8007936:	6921      	ldr	r1, [r4, #16]
 8007938:	4650      	mov	r0, sl
 800793a:	f7ff feb7 	bl	80076ac <_free_r>
 800793e:	230c      	movs	r3, #12
 8007940:	f8ca 3000 	str.w	r3, [sl]
 8007944:	89a3      	ldrh	r3, [r4, #12]
 8007946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800794a:	81a3      	strh	r3, [r4, #12]
 800794c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007950:	e7e9      	b.n	8007926 <__ssputs_r+0x8a>
	...

08007954 <_svfiprintf_r>:
 8007954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007958:	4698      	mov	r8, r3
 800795a:	898b      	ldrh	r3, [r1, #12]
 800795c:	061b      	lsls	r3, r3, #24
 800795e:	b09d      	sub	sp, #116	@ 0x74
 8007960:	4607      	mov	r7, r0
 8007962:	460d      	mov	r5, r1
 8007964:	4614      	mov	r4, r2
 8007966:	d510      	bpl.n	800798a <_svfiprintf_r+0x36>
 8007968:	690b      	ldr	r3, [r1, #16]
 800796a:	b973      	cbnz	r3, 800798a <_svfiprintf_r+0x36>
 800796c:	2140      	movs	r1, #64	@ 0x40
 800796e:	f7ff ff09 	bl	8007784 <_malloc_r>
 8007972:	6028      	str	r0, [r5, #0]
 8007974:	6128      	str	r0, [r5, #16]
 8007976:	b930      	cbnz	r0, 8007986 <_svfiprintf_r+0x32>
 8007978:	230c      	movs	r3, #12
 800797a:	603b      	str	r3, [r7, #0]
 800797c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007980:	b01d      	add	sp, #116	@ 0x74
 8007982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007986:	2340      	movs	r3, #64	@ 0x40
 8007988:	616b      	str	r3, [r5, #20]
 800798a:	2300      	movs	r3, #0
 800798c:	9309      	str	r3, [sp, #36]	@ 0x24
 800798e:	2320      	movs	r3, #32
 8007990:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007994:	f8cd 800c 	str.w	r8, [sp, #12]
 8007998:	2330      	movs	r3, #48	@ 0x30
 800799a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b38 <_svfiprintf_r+0x1e4>
 800799e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079a2:	f04f 0901 	mov.w	r9, #1
 80079a6:	4623      	mov	r3, r4
 80079a8:	469a      	mov	sl, r3
 80079aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079ae:	b10a      	cbz	r2, 80079b4 <_svfiprintf_r+0x60>
 80079b0:	2a25      	cmp	r2, #37	@ 0x25
 80079b2:	d1f9      	bne.n	80079a8 <_svfiprintf_r+0x54>
 80079b4:	ebba 0b04 	subs.w	fp, sl, r4
 80079b8:	d00b      	beq.n	80079d2 <_svfiprintf_r+0x7e>
 80079ba:	465b      	mov	r3, fp
 80079bc:	4622      	mov	r2, r4
 80079be:	4629      	mov	r1, r5
 80079c0:	4638      	mov	r0, r7
 80079c2:	f7ff ff6b 	bl	800789c <__ssputs_r>
 80079c6:	3001      	adds	r0, #1
 80079c8:	f000 80a7 	beq.w	8007b1a <_svfiprintf_r+0x1c6>
 80079cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079ce:	445a      	add	r2, fp
 80079d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80079d2:	f89a 3000 	ldrb.w	r3, [sl]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 809f 	beq.w	8007b1a <_svfiprintf_r+0x1c6>
 80079dc:	2300      	movs	r3, #0
 80079de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80079e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e6:	f10a 0a01 	add.w	sl, sl, #1
 80079ea:	9304      	str	r3, [sp, #16]
 80079ec:	9307      	str	r3, [sp, #28]
 80079ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80079f4:	4654      	mov	r4, sl
 80079f6:	2205      	movs	r2, #5
 80079f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079fc:	484e      	ldr	r0, [pc, #312]	@ (8007b38 <_svfiprintf_r+0x1e4>)
 80079fe:	f7f8 fc07 	bl	8000210 <memchr>
 8007a02:	9a04      	ldr	r2, [sp, #16]
 8007a04:	b9d8      	cbnz	r0, 8007a3e <_svfiprintf_r+0xea>
 8007a06:	06d0      	lsls	r0, r2, #27
 8007a08:	bf44      	itt	mi
 8007a0a:	2320      	movmi	r3, #32
 8007a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a10:	0711      	lsls	r1, r2, #28
 8007a12:	bf44      	itt	mi
 8007a14:	232b      	movmi	r3, #43	@ 0x2b
 8007a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a20:	d015      	beq.n	8007a4e <_svfiprintf_r+0xfa>
 8007a22:	9a07      	ldr	r2, [sp, #28]
 8007a24:	4654      	mov	r4, sl
 8007a26:	2000      	movs	r0, #0
 8007a28:	f04f 0c0a 	mov.w	ip, #10
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a32:	3b30      	subs	r3, #48	@ 0x30
 8007a34:	2b09      	cmp	r3, #9
 8007a36:	d94b      	bls.n	8007ad0 <_svfiprintf_r+0x17c>
 8007a38:	b1b0      	cbz	r0, 8007a68 <_svfiprintf_r+0x114>
 8007a3a:	9207      	str	r2, [sp, #28]
 8007a3c:	e014      	b.n	8007a68 <_svfiprintf_r+0x114>
 8007a3e:	eba0 0308 	sub.w	r3, r0, r8
 8007a42:	fa09 f303 	lsl.w	r3, r9, r3
 8007a46:	4313      	orrs	r3, r2
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	46a2      	mov	sl, r4
 8007a4c:	e7d2      	b.n	80079f4 <_svfiprintf_r+0xa0>
 8007a4e:	9b03      	ldr	r3, [sp, #12]
 8007a50:	1d19      	adds	r1, r3, #4
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	9103      	str	r1, [sp, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	bfbb      	ittet	lt
 8007a5a:	425b      	neglt	r3, r3
 8007a5c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a60:	9307      	strge	r3, [sp, #28]
 8007a62:	9307      	strlt	r3, [sp, #28]
 8007a64:	bfb8      	it	lt
 8007a66:	9204      	strlt	r2, [sp, #16]
 8007a68:	7823      	ldrb	r3, [r4, #0]
 8007a6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a6c:	d10a      	bne.n	8007a84 <_svfiprintf_r+0x130>
 8007a6e:	7863      	ldrb	r3, [r4, #1]
 8007a70:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a72:	d132      	bne.n	8007ada <_svfiprintf_r+0x186>
 8007a74:	9b03      	ldr	r3, [sp, #12]
 8007a76:	1d1a      	adds	r2, r3, #4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	9203      	str	r2, [sp, #12]
 8007a7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a80:	3402      	adds	r4, #2
 8007a82:	9305      	str	r3, [sp, #20]
 8007a84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b48 <_svfiprintf_r+0x1f4>
 8007a88:	7821      	ldrb	r1, [r4, #0]
 8007a8a:	2203      	movs	r2, #3
 8007a8c:	4650      	mov	r0, sl
 8007a8e:	f7f8 fbbf 	bl	8000210 <memchr>
 8007a92:	b138      	cbz	r0, 8007aa4 <_svfiprintf_r+0x150>
 8007a94:	9b04      	ldr	r3, [sp, #16]
 8007a96:	eba0 000a 	sub.w	r0, r0, sl
 8007a9a:	2240      	movs	r2, #64	@ 0x40
 8007a9c:	4082      	lsls	r2, r0
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	3401      	adds	r4, #1
 8007aa2:	9304      	str	r3, [sp, #16]
 8007aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa8:	4824      	ldr	r0, [pc, #144]	@ (8007b3c <_svfiprintf_r+0x1e8>)
 8007aaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007aae:	2206      	movs	r2, #6
 8007ab0:	f7f8 fbae 	bl	8000210 <memchr>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d036      	beq.n	8007b26 <_svfiprintf_r+0x1d2>
 8007ab8:	4b21      	ldr	r3, [pc, #132]	@ (8007b40 <_svfiprintf_r+0x1ec>)
 8007aba:	bb1b      	cbnz	r3, 8007b04 <_svfiprintf_r+0x1b0>
 8007abc:	9b03      	ldr	r3, [sp, #12]
 8007abe:	3307      	adds	r3, #7
 8007ac0:	f023 0307 	bic.w	r3, r3, #7
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	9303      	str	r3, [sp, #12]
 8007ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aca:	4433      	add	r3, r6
 8007acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ace:	e76a      	b.n	80079a6 <_svfiprintf_r+0x52>
 8007ad0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	2001      	movs	r0, #1
 8007ad8:	e7a8      	b.n	8007a2c <_svfiprintf_r+0xd8>
 8007ada:	2300      	movs	r3, #0
 8007adc:	3401      	adds	r4, #1
 8007ade:	9305      	str	r3, [sp, #20]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	f04f 0c0a 	mov.w	ip, #10
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aec:	3a30      	subs	r2, #48	@ 0x30
 8007aee:	2a09      	cmp	r2, #9
 8007af0:	d903      	bls.n	8007afa <_svfiprintf_r+0x1a6>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0c6      	beq.n	8007a84 <_svfiprintf_r+0x130>
 8007af6:	9105      	str	r1, [sp, #20]
 8007af8:	e7c4      	b.n	8007a84 <_svfiprintf_r+0x130>
 8007afa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007afe:	4604      	mov	r4, r0
 8007b00:	2301      	movs	r3, #1
 8007b02:	e7f0      	b.n	8007ae6 <_svfiprintf_r+0x192>
 8007b04:	ab03      	add	r3, sp, #12
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	462a      	mov	r2, r5
 8007b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b44 <_svfiprintf_r+0x1f0>)
 8007b0c:	a904      	add	r1, sp, #16
 8007b0e:	4638      	mov	r0, r7
 8007b10:	f3af 8000 	nop.w
 8007b14:	1c42      	adds	r2, r0, #1
 8007b16:	4606      	mov	r6, r0
 8007b18:	d1d6      	bne.n	8007ac8 <_svfiprintf_r+0x174>
 8007b1a:	89ab      	ldrh	r3, [r5, #12]
 8007b1c:	065b      	lsls	r3, r3, #25
 8007b1e:	f53f af2d 	bmi.w	800797c <_svfiprintf_r+0x28>
 8007b22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b24:	e72c      	b.n	8007980 <_svfiprintf_r+0x2c>
 8007b26:	ab03      	add	r3, sp, #12
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	462a      	mov	r2, r5
 8007b2c:	4b05      	ldr	r3, [pc, #20]	@ (8007b44 <_svfiprintf_r+0x1f0>)
 8007b2e:	a904      	add	r1, sp, #16
 8007b30:	4638      	mov	r0, r7
 8007b32:	f000 f879 	bl	8007c28 <_printf_i>
 8007b36:	e7ed      	b.n	8007b14 <_svfiprintf_r+0x1c0>
 8007b38:	0800802c 	.word	0x0800802c
 8007b3c:	08008036 	.word	0x08008036
 8007b40:	00000000 	.word	0x00000000
 8007b44:	0800789d 	.word	0x0800789d
 8007b48:	08008032 	.word	0x08008032

08007b4c <_printf_common>:
 8007b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b50:	4616      	mov	r6, r2
 8007b52:	4698      	mov	r8, r3
 8007b54:	688a      	ldr	r2, [r1, #8]
 8007b56:	690b      	ldr	r3, [r1, #16]
 8007b58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	bfb8      	it	lt
 8007b60:	4613      	movlt	r3, r2
 8007b62:	6033      	str	r3, [r6, #0]
 8007b64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b68:	4607      	mov	r7, r0
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	b10a      	cbz	r2, 8007b72 <_printf_common+0x26>
 8007b6e:	3301      	adds	r3, #1
 8007b70:	6033      	str	r3, [r6, #0]
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	0699      	lsls	r1, r3, #26
 8007b76:	bf42      	ittt	mi
 8007b78:	6833      	ldrmi	r3, [r6, #0]
 8007b7a:	3302      	addmi	r3, #2
 8007b7c:	6033      	strmi	r3, [r6, #0]
 8007b7e:	6825      	ldr	r5, [r4, #0]
 8007b80:	f015 0506 	ands.w	r5, r5, #6
 8007b84:	d106      	bne.n	8007b94 <_printf_common+0x48>
 8007b86:	f104 0a19 	add.w	sl, r4, #25
 8007b8a:	68e3      	ldr	r3, [r4, #12]
 8007b8c:	6832      	ldr	r2, [r6, #0]
 8007b8e:	1a9b      	subs	r3, r3, r2
 8007b90:	42ab      	cmp	r3, r5
 8007b92:	dc26      	bgt.n	8007be2 <_printf_common+0x96>
 8007b94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b98:	6822      	ldr	r2, [r4, #0]
 8007b9a:	3b00      	subs	r3, #0
 8007b9c:	bf18      	it	ne
 8007b9e:	2301      	movne	r3, #1
 8007ba0:	0692      	lsls	r2, r2, #26
 8007ba2:	d42b      	bmi.n	8007bfc <_printf_common+0xb0>
 8007ba4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ba8:	4641      	mov	r1, r8
 8007baa:	4638      	mov	r0, r7
 8007bac:	47c8      	blx	r9
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d01e      	beq.n	8007bf0 <_printf_common+0xa4>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	6922      	ldr	r2, [r4, #16]
 8007bb6:	f003 0306 	and.w	r3, r3, #6
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	bf02      	ittt	eq
 8007bbe:	68e5      	ldreq	r5, [r4, #12]
 8007bc0:	6833      	ldreq	r3, [r6, #0]
 8007bc2:	1aed      	subeq	r5, r5, r3
 8007bc4:	68a3      	ldr	r3, [r4, #8]
 8007bc6:	bf0c      	ite	eq
 8007bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bcc:	2500      	movne	r5, #0
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	bfc4      	itt	gt
 8007bd2:	1a9b      	subgt	r3, r3, r2
 8007bd4:	18ed      	addgt	r5, r5, r3
 8007bd6:	2600      	movs	r6, #0
 8007bd8:	341a      	adds	r4, #26
 8007bda:	42b5      	cmp	r5, r6
 8007bdc:	d11a      	bne.n	8007c14 <_printf_common+0xc8>
 8007bde:	2000      	movs	r0, #0
 8007be0:	e008      	b.n	8007bf4 <_printf_common+0xa8>
 8007be2:	2301      	movs	r3, #1
 8007be4:	4652      	mov	r2, sl
 8007be6:	4641      	mov	r1, r8
 8007be8:	4638      	mov	r0, r7
 8007bea:	47c8      	blx	r9
 8007bec:	3001      	adds	r0, #1
 8007bee:	d103      	bne.n	8007bf8 <_printf_common+0xac>
 8007bf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf8:	3501      	adds	r5, #1
 8007bfa:	e7c6      	b.n	8007b8a <_printf_common+0x3e>
 8007bfc:	18e1      	adds	r1, r4, r3
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	2030      	movs	r0, #48	@ 0x30
 8007c02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c06:	4422      	add	r2, r4
 8007c08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c10:	3302      	adds	r3, #2
 8007c12:	e7c7      	b.n	8007ba4 <_printf_common+0x58>
 8007c14:	2301      	movs	r3, #1
 8007c16:	4622      	mov	r2, r4
 8007c18:	4641      	mov	r1, r8
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	47c8      	blx	r9
 8007c1e:	3001      	adds	r0, #1
 8007c20:	d0e6      	beq.n	8007bf0 <_printf_common+0xa4>
 8007c22:	3601      	adds	r6, #1
 8007c24:	e7d9      	b.n	8007bda <_printf_common+0x8e>
	...

08007c28 <_printf_i>:
 8007c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c2c:	7e0f      	ldrb	r7, [r1, #24]
 8007c2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c30:	2f78      	cmp	r7, #120	@ 0x78
 8007c32:	4691      	mov	r9, r2
 8007c34:	4680      	mov	r8, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	469a      	mov	sl, r3
 8007c3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c3e:	d807      	bhi.n	8007c50 <_printf_i+0x28>
 8007c40:	2f62      	cmp	r7, #98	@ 0x62
 8007c42:	d80a      	bhi.n	8007c5a <_printf_i+0x32>
 8007c44:	2f00      	cmp	r7, #0
 8007c46:	f000 80d2 	beq.w	8007dee <_printf_i+0x1c6>
 8007c4a:	2f58      	cmp	r7, #88	@ 0x58
 8007c4c:	f000 80b9 	beq.w	8007dc2 <_printf_i+0x19a>
 8007c50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c58:	e03a      	b.n	8007cd0 <_printf_i+0xa8>
 8007c5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c5e:	2b15      	cmp	r3, #21
 8007c60:	d8f6      	bhi.n	8007c50 <_printf_i+0x28>
 8007c62:	a101      	add	r1, pc, #4	@ (adr r1, 8007c68 <_printf_i+0x40>)
 8007c64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c68:	08007cc1 	.word	0x08007cc1
 8007c6c:	08007cd5 	.word	0x08007cd5
 8007c70:	08007c51 	.word	0x08007c51
 8007c74:	08007c51 	.word	0x08007c51
 8007c78:	08007c51 	.word	0x08007c51
 8007c7c:	08007c51 	.word	0x08007c51
 8007c80:	08007cd5 	.word	0x08007cd5
 8007c84:	08007c51 	.word	0x08007c51
 8007c88:	08007c51 	.word	0x08007c51
 8007c8c:	08007c51 	.word	0x08007c51
 8007c90:	08007c51 	.word	0x08007c51
 8007c94:	08007dd5 	.word	0x08007dd5
 8007c98:	08007cff 	.word	0x08007cff
 8007c9c:	08007d8f 	.word	0x08007d8f
 8007ca0:	08007c51 	.word	0x08007c51
 8007ca4:	08007c51 	.word	0x08007c51
 8007ca8:	08007df7 	.word	0x08007df7
 8007cac:	08007c51 	.word	0x08007c51
 8007cb0:	08007cff 	.word	0x08007cff
 8007cb4:	08007c51 	.word	0x08007c51
 8007cb8:	08007c51 	.word	0x08007c51
 8007cbc:	08007d97 	.word	0x08007d97
 8007cc0:	6833      	ldr	r3, [r6, #0]
 8007cc2:	1d1a      	adds	r2, r3, #4
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6032      	str	r2, [r6, #0]
 8007cc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ccc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e09d      	b.n	8007e10 <_printf_i+0x1e8>
 8007cd4:	6833      	ldr	r3, [r6, #0]
 8007cd6:	6820      	ldr	r0, [r4, #0]
 8007cd8:	1d19      	adds	r1, r3, #4
 8007cda:	6031      	str	r1, [r6, #0]
 8007cdc:	0606      	lsls	r6, r0, #24
 8007cde:	d501      	bpl.n	8007ce4 <_printf_i+0xbc>
 8007ce0:	681d      	ldr	r5, [r3, #0]
 8007ce2:	e003      	b.n	8007cec <_printf_i+0xc4>
 8007ce4:	0645      	lsls	r5, r0, #25
 8007ce6:	d5fb      	bpl.n	8007ce0 <_printf_i+0xb8>
 8007ce8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007cec:	2d00      	cmp	r5, #0
 8007cee:	da03      	bge.n	8007cf8 <_printf_i+0xd0>
 8007cf0:	232d      	movs	r3, #45	@ 0x2d
 8007cf2:	426d      	negs	r5, r5
 8007cf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cf8:	4859      	ldr	r0, [pc, #356]	@ (8007e60 <_printf_i+0x238>)
 8007cfa:	230a      	movs	r3, #10
 8007cfc:	e011      	b.n	8007d22 <_printf_i+0xfa>
 8007cfe:	6821      	ldr	r1, [r4, #0]
 8007d00:	6833      	ldr	r3, [r6, #0]
 8007d02:	0608      	lsls	r0, r1, #24
 8007d04:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d08:	d402      	bmi.n	8007d10 <_printf_i+0xe8>
 8007d0a:	0649      	lsls	r1, r1, #25
 8007d0c:	bf48      	it	mi
 8007d0e:	b2ad      	uxthmi	r5, r5
 8007d10:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d12:	4853      	ldr	r0, [pc, #332]	@ (8007e60 <_printf_i+0x238>)
 8007d14:	6033      	str	r3, [r6, #0]
 8007d16:	bf14      	ite	ne
 8007d18:	230a      	movne	r3, #10
 8007d1a:	2308      	moveq	r3, #8
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d22:	6866      	ldr	r6, [r4, #4]
 8007d24:	60a6      	str	r6, [r4, #8]
 8007d26:	2e00      	cmp	r6, #0
 8007d28:	bfa2      	ittt	ge
 8007d2a:	6821      	ldrge	r1, [r4, #0]
 8007d2c:	f021 0104 	bicge.w	r1, r1, #4
 8007d30:	6021      	strge	r1, [r4, #0]
 8007d32:	b90d      	cbnz	r5, 8007d38 <_printf_i+0x110>
 8007d34:	2e00      	cmp	r6, #0
 8007d36:	d04b      	beq.n	8007dd0 <_printf_i+0x1a8>
 8007d38:	4616      	mov	r6, r2
 8007d3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d3e:	fb03 5711 	mls	r7, r3, r1, r5
 8007d42:	5dc7      	ldrb	r7, [r0, r7]
 8007d44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d48:	462f      	mov	r7, r5
 8007d4a:	42bb      	cmp	r3, r7
 8007d4c:	460d      	mov	r5, r1
 8007d4e:	d9f4      	bls.n	8007d3a <_printf_i+0x112>
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	d10b      	bne.n	8007d6c <_printf_i+0x144>
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	07df      	lsls	r7, r3, #31
 8007d58:	d508      	bpl.n	8007d6c <_printf_i+0x144>
 8007d5a:	6923      	ldr	r3, [r4, #16]
 8007d5c:	6861      	ldr	r1, [r4, #4]
 8007d5e:	4299      	cmp	r1, r3
 8007d60:	bfde      	ittt	le
 8007d62:	2330      	movle	r3, #48	@ 0x30
 8007d64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d68:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007d6c:	1b92      	subs	r2, r2, r6
 8007d6e:	6122      	str	r2, [r4, #16]
 8007d70:	f8cd a000 	str.w	sl, [sp]
 8007d74:	464b      	mov	r3, r9
 8007d76:	aa03      	add	r2, sp, #12
 8007d78:	4621      	mov	r1, r4
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	f7ff fee6 	bl	8007b4c <_printf_common>
 8007d80:	3001      	adds	r0, #1
 8007d82:	d14a      	bne.n	8007e1a <_printf_i+0x1f2>
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d88:	b004      	add	sp, #16
 8007d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	f043 0320 	orr.w	r3, r3, #32
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	4833      	ldr	r0, [pc, #204]	@ (8007e64 <_printf_i+0x23c>)
 8007d98:	2778      	movs	r7, #120	@ 0x78
 8007d9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	6831      	ldr	r1, [r6, #0]
 8007da2:	061f      	lsls	r7, r3, #24
 8007da4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007da8:	d402      	bmi.n	8007db0 <_printf_i+0x188>
 8007daa:	065f      	lsls	r7, r3, #25
 8007dac:	bf48      	it	mi
 8007dae:	b2ad      	uxthmi	r5, r5
 8007db0:	6031      	str	r1, [r6, #0]
 8007db2:	07d9      	lsls	r1, r3, #31
 8007db4:	bf44      	itt	mi
 8007db6:	f043 0320 	orrmi.w	r3, r3, #32
 8007dba:	6023      	strmi	r3, [r4, #0]
 8007dbc:	b11d      	cbz	r5, 8007dc6 <_printf_i+0x19e>
 8007dbe:	2310      	movs	r3, #16
 8007dc0:	e7ac      	b.n	8007d1c <_printf_i+0xf4>
 8007dc2:	4827      	ldr	r0, [pc, #156]	@ (8007e60 <_printf_i+0x238>)
 8007dc4:	e7e9      	b.n	8007d9a <_printf_i+0x172>
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	f023 0320 	bic.w	r3, r3, #32
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	e7f6      	b.n	8007dbe <_printf_i+0x196>
 8007dd0:	4616      	mov	r6, r2
 8007dd2:	e7bd      	b.n	8007d50 <_printf_i+0x128>
 8007dd4:	6833      	ldr	r3, [r6, #0]
 8007dd6:	6825      	ldr	r5, [r4, #0]
 8007dd8:	6961      	ldr	r1, [r4, #20]
 8007dda:	1d18      	adds	r0, r3, #4
 8007ddc:	6030      	str	r0, [r6, #0]
 8007dde:	062e      	lsls	r6, r5, #24
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	d501      	bpl.n	8007de8 <_printf_i+0x1c0>
 8007de4:	6019      	str	r1, [r3, #0]
 8007de6:	e002      	b.n	8007dee <_printf_i+0x1c6>
 8007de8:	0668      	lsls	r0, r5, #25
 8007dea:	d5fb      	bpl.n	8007de4 <_printf_i+0x1bc>
 8007dec:	8019      	strh	r1, [r3, #0]
 8007dee:	2300      	movs	r3, #0
 8007df0:	6123      	str	r3, [r4, #16]
 8007df2:	4616      	mov	r6, r2
 8007df4:	e7bc      	b.n	8007d70 <_printf_i+0x148>
 8007df6:	6833      	ldr	r3, [r6, #0]
 8007df8:	1d1a      	adds	r2, r3, #4
 8007dfa:	6032      	str	r2, [r6, #0]
 8007dfc:	681e      	ldr	r6, [r3, #0]
 8007dfe:	6862      	ldr	r2, [r4, #4]
 8007e00:	2100      	movs	r1, #0
 8007e02:	4630      	mov	r0, r6
 8007e04:	f7f8 fa04 	bl	8000210 <memchr>
 8007e08:	b108      	cbz	r0, 8007e0e <_printf_i+0x1e6>
 8007e0a:	1b80      	subs	r0, r0, r6
 8007e0c:	6060      	str	r0, [r4, #4]
 8007e0e:	6863      	ldr	r3, [r4, #4]
 8007e10:	6123      	str	r3, [r4, #16]
 8007e12:	2300      	movs	r3, #0
 8007e14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e18:	e7aa      	b.n	8007d70 <_printf_i+0x148>
 8007e1a:	6923      	ldr	r3, [r4, #16]
 8007e1c:	4632      	mov	r2, r6
 8007e1e:	4649      	mov	r1, r9
 8007e20:	4640      	mov	r0, r8
 8007e22:	47d0      	blx	sl
 8007e24:	3001      	adds	r0, #1
 8007e26:	d0ad      	beq.n	8007d84 <_printf_i+0x15c>
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	079b      	lsls	r3, r3, #30
 8007e2c:	d413      	bmi.n	8007e56 <_printf_i+0x22e>
 8007e2e:	68e0      	ldr	r0, [r4, #12]
 8007e30:	9b03      	ldr	r3, [sp, #12]
 8007e32:	4298      	cmp	r0, r3
 8007e34:	bfb8      	it	lt
 8007e36:	4618      	movlt	r0, r3
 8007e38:	e7a6      	b.n	8007d88 <_printf_i+0x160>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	4632      	mov	r2, r6
 8007e3e:	4649      	mov	r1, r9
 8007e40:	4640      	mov	r0, r8
 8007e42:	47d0      	blx	sl
 8007e44:	3001      	adds	r0, #1
 8007e46:	d09d      	beq.n	8007d84 <_printf_i+0x15c>
 8007e48:	3501      	adds	r5, #1
 8007e4a:	68e3      	ldr	r3, [r4, #12]
 8007e4c:	9903      	ldr	r1, [sp, #12]
 8007e4e:	1a5b      	subs	r3, r3, r1
 8007e50:	42ab      	cmp	r3, r5
 8007e52:	dcf2      	bgt.n	8007e3a <_printf_i+0x212>
 8007e54:	e7eb      	b.n	8007e2e <_printf_i+0x206>
 8007e56:	2500      	movs	r5, #0
 8007e58:	f104 0619 	add.w	r6, r4, #25
 8007e5c:	e7f5      	b.n	8007e4a <_printf_i+0x222>
 8007e5e:	bf00      	nop
 8007e60:	0800803d 	.word	0x0800803d
 8007e64:	0800804e 	.word	0x0800804e

08007e68 <memmove>:
 8007e68:	4288      	cmp	r0, r1
 8007e6a:	b510      	push	{r4, lr}
 8007e6c:	eb01 0402 	add.w	r4, r1, r2
 8007e70:	d902      	bls.n	8007e78 <memmove+0x10>
 8007e72:	4284      	cmp	r4, r0
 8007e74:	4623      	mov	r3, r4
 8007e76:	d807      	bhi.n	8007e88 <memmove+0x20>
 8007e78:	1e43      	subs	r3, r0, #1
 8007e7a:	42a1      	cmp	r1, r4
 8007e7c:	d008      	beq.n	8007e90 <memmove+0x28>
 8007e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e86:	e7f8      	b.n	8007e7a <memmove+0x12>
 8007e88:	4402      	add	r2, r0
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	428a      	cmp	r2, r1
 8007e8e:	d100      	bne.n	8007e92 <memmove+0x2a>
 8007e90:	bd10      	pop	{r4, pc}
 8007e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e9a:	e7f7      	b.n	8007e8c <memmove+0x24>

08007e9c <_sbrk_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4d06      	ldr	r5, [pc, #24]	@ (8007eb8 <_sbrk_r+0x1c>)
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	4608      	mov	r0, r1
 8007ea6:	602b      	str	r3, [r5, #0]
 8007ea8:	f7fc fafe 	bl	80044a8 <_sbrk>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	d102      	bne.n	8007eb6 <_sbrk_r+0x1a>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	b103      	cbz	r3, 8007eb6 <_sbrk_r+0x1a>
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	20003f54 	.word	0x20003f54

08007ebc <_realloc_r>:
 8007ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec0:	4680      	mov	r8, r0
 8007ec2:	4615      	mov	r5, r2
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	b921      	cbnz	r1, 8007ed2 <_realloc_r+0x16>
 8007ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ecc:	4611      	mov	r1, r2
 8007ece:	f7ff bc59 	b.w	8007784 <_malloc_r>
 8007ed2:	b92a      	cbnz	r2, 8007ee0 <_realloc_r+0x24>
 8007ed4:	f7ff fbea 	bl	80076ac <_free_r>
 8007ed8:	2400      	movs	r4, #0
 8007eda:	4620      	mov	r0, r4
 8007edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee0:	f000 f81a 	bl	8007f18 <_malloc_usable_size_r>
 8007ee4:	4285      	cmp	r5, r0
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	d802      	bhi.n	8007ef0 <_realloc_r+0x34>
 8007eea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007eee:	d8f4      	bhi.n	8007eda <_realloc_r+0x1e>
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4640      	mov	r0, r8
 8007ef4:	f7ff fc46 	bl	8007784 <_malloc_r>
 8007ef8:	4607      	mov	r7, r0
 8007efa:	2800      	cmp	r0, #0
 8007efc:	d0ec      	beq.n	8007ed8 <_realloc_r+0x1c>
 8007efe:	42b5      	cmp	r5, r6
 8007f00:	462a      	mov	r2, r5
 8007f02:	4621      	mov	r1, r4
 8007f04:	bf28      	it	cs
 8007f06:	4632      	movcs	r2, r6
 8007f08:	f7ff fbc2 	bl	8007690 <memcpy>
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	4640      	mov	r0, r8
 8007f10:	f7ff fbcc 	bl	80076ac <_free_r>
 8007f14:	463c      	mov	r4, r7
 8007f16:	e7e0      	b.n	8007eda <_realloc_r+0x1e>

08007f18 <_malloc_usable_size_r>:
 8007f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f1c:	1f18      	subs	r0, r3, #4
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	bfbc      	itt	lt
 8007f22:	580b      	ldrlt	r3, [r1, r0]
 8007f24:	18c0      	addlt	r0, r0, r3
 8007f26:	4770      	bx	lr

08007f28 <_init>:
 8007f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2a:	bf00      	nop
 8007f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2e:	bc08      	pop	{r3}
 8007f30:	469e      	mov	lr, r3
 8007f32:	4770      	bx	lr

08007f34 <_fini>:
 8007f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f36:	bf00      	nop
 8007f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3a:	bc08      	pop	{r3}
 8007f3c:	469e      	mov	lr, r3
 8007f3e:	4770      	bx	lr
