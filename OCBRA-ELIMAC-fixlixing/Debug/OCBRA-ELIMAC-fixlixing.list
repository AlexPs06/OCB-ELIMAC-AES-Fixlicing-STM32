
OCBRA-ELIMAC-fixlixing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006658  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006820  08006820  00016820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006868  08006868  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  08006868  08006868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006870  08006870  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006870  08006870  00016870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006874  08006874  00016874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08006878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000002c  080068a4  0002002c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000cc  08006944  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006f0  2000016c  080069e4  0002016c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000085c  080069e4  0002085c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 15 .debug_info   000127a7  00000000  00000000  000201df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000277b  00000000  00000000  00032986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000e30  00000000  00000000  00035108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000af1  00000000  00000000  00035f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00004474  00000000  00000000  00036a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00011526  00000000  00000000  0003ae9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f1648  00000000  00000000  0004c3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003b28  00000000  00000000  0013da0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000008e  00000000  00000000  00141534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000016c 	.word	0x2000016c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006808 	.word	0x08006808

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000170 	.word	0x20000170
 8000204:	08006808 	.word	0x08006808

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <ELIMAC>:
}*/




void ELIMAC(unsigned char* plaintext,  const unsigned char plaintext_size, unsigned char* key1, unsigned char* key2, unsigned char rounds, unsigned char* tag){
 8000504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000508:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 800050c:	af02      	add	r7, sp, #8
 800050e:	f507 765a 	add.w	r6, r7, #872	; 0x368
 8000512:	f5a6 7655 	sub.w	r6, r6, #852	; 0x354
 8000516:	6030      	str	r0, [r6, #0]
 8000518:	4608      	mov	r0, r1
 800051a:	f507 715a 	add.w	r1, r7, #872	; 0x368
 800051e:	f5a1 7157 	sub.w	r1, r1, #860	; 0x35c
 8000522:	600a      	str	r2, [r1, #0]
 8000524:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8000528:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800052c:	6013      	str	r3, [r2, #0]
 800052e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8000532:	f2a3 3355 	subw	r3, r3, #853	; 0x355
 8000536:	4602      	mov	r2, r0
 8000538:	701a      	strb	r2, [r3, #0]
 800053a:	466b      	mov	r3, sp
 800053c:	461e      	mov	r6, r3

    unsigned char ptext0[plaintext_size];
 800053e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8000542:	f2a3 3355 	subw	r3, r3, #853	; 0x355
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	3b01      	subs	r3, #1
 800054a:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 800054e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8000552:	f2a3 3355 	subw	r3, r3, #853	; 0x355
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2200      	movs	r2, #0
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	607a      	str	r2, [r7, #4]
 800055e:	f04f 0200 	mov.w	r2, #0
 8000562:	f04f 0300 	mov.w	r3, #0
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	00cb      	lsls	r3, r1, #3
 800056a:	6839      	ldr	r1, [r7, #0]
 800056c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000570:	6839      	ldr	r1, [r7, #0]
 8000572:	00ca      	lsls	r2, r1, #3
 8000574:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8000578:	f2a3 3355 	subw	r3, r3, #853	; 0x355
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2200      	movs	r2, #0
 8000580:	469a      	mov	sl, r3
 8000582:	4693      	mov	fp, r2
 8000584:	f04f 0200 	mov.w	r2, #0
 8000588:	f04f 0300 	mov.w	r3, #0
 800058c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000590:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000594:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000598:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800059c:	f2a3 3355 	subw	r3, r3, #853	; 0x355
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	3307      	adds	r3, #7
 80005a4:	08db      	lsrs	r3, r3, #3
 80005a6:	00db      	lsls	r3, r3, #3
 80005a8:	ebad 0d03 	sub.w	sp, sp, r3
 80005ac:	ab02      	add	r3, sp, #8
 80005ae:	3300      	adds	r3, #0
 80005b0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    unsigned char ptext1[plaintext_size];
 80005b4:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80005b8:	f2a3 3355 	subw	r3, r3, #853	; 0x355
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	3b01      	subs	r3, #1
 80005c0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80005c4:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80005c8:	f2a3 3355 	subw	r3, r3, #853	; 0x355
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2200      	movs	r2, #0
 80005d0:	4698      	mov	r8, r3
 80005d2:	4691      	mov	r9, r2
 80005d4:	f04f 0200 	mov.w	r2, #0
 80005d8:	f04f 0300 	mov.w	r3, #0
 80005dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80005e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80005e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80005e8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80005ec:	f2a3 3355 	subw	r3, r3, #853	; 0x355
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2200      	movs	r2, #0
 80005f4:	461c      	mov	r4, r3
 80005f6:	4615      	mov	r5, r2
 80005f8:	f04f 0200 	mov.w	r2, #0
 80005fc:	f04f 0300 	mov.w	r3, #0
 8000600:	00eb      	lsls	r3, r5, #3
 8000602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000606:	00e2      	lsls	r2, r4, #3
 8000608:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800060c:	f2a3 3355 	subw	r3, r3, #853	; 0x355
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	3307      	adds	r3, #7
 8000614:	08db      	lsrs	r3, r3, #3
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	ebad 0d03 	sub.w	sp, sp, r3
 800061c:	ab02      	add	r3, sp, #8
 800061e:	3300      	adds	r3, #0
 8000620:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c


    unsigned char i_n1[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 8000624:	4b92      	ldr	r3, [pc, #584]	; (8000870 <ELIMAC+0x36c>)
 8000626:	f507 744e 	add.w	r4, r7, #824	; 0x338
 800062a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800062c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char i_n2[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 8000630:	4b8f      	ldr	r3, [pc, #572]	; (8000870 <ELIMAC+0x36c>)
 8000632:	f507 744a 	add.w	r4, r7, #808	; 0x328
 8000636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


    unsigned char S1[bit_size];
    unsigned char S2[bit_size];
    
    unsigned int add_nonce_0[4] = {0,0,0,0};
 800063c:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
    unsigned int add_nonce_1[4] = {1,1,1,1};
 800064a:	4b8a      	ldr	r3, [pc, #552]	; (8000874 <ELIMAC+0x370>)
 800064c:	f507 743a 	add.w	r4, r7, #744	; 0x2e8
 8000650:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000652:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned int add_nonce_2[4] = {2,2,2,2};
 8000656:	4b88      	ldr	r3, [pc, #544]	; (8000878 <ELIMAC+0x374>)
 8000658:	f507 7436 	add.w	r4, r7, #728	; 0x2d8
 800065c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800065e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    uint32_t rkeys_ffs[88];
    //uint32_t rkeys_ffs_zeros[88];
    uint32_t rkeys_ffs_H[88];

    for (size_t i = 0; i < plaintext_size; i++)
 8000662:	2300      	movs	r3, #0
 8000664:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8000668:	e012      	b.n	8000690 <ELIMAC+0x18c>
    {
        ptext1[i]=0;
 800066a:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 800066e:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
        ptext0[i]=0;
 8000678:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 800067c:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8000680:	4413      	add	r3, r2
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < plaintext_size; i++)
 8000686:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800068a:	3301      	adds	r3, #1
 800068c:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8000690:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8000694:	f2a3 3355 	subw	r3, r3, #853	; 0x355
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 800069e:	429a      	cmp	r2, r3
 80006a0:	d3e3      	bcc.n	800066a <ELIMAC+0x166>
    }    

    divide_plaintext(plaintext, ptext0, ptext1, plaintext_size);
 80006a2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80006a6:	f2a3 3355 	subw	r3, r3, #853	; 0x355
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	f507 725a 	add.w	r2, r7, #872	; 0x368
 80006b0:	f5a2 7055 	sub.w	r0, r2, #852	; 0x354
 80006b4:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 80006b8:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 80006bc:	6800      	ldr	r0, [r0, #0]
 80006be:	f000 f9b6 	bl	8000a2e <divide_plaintext>
    
    for (size_t i = 0; i < bit_size; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 80006c8:	e012      	b.n	80006f0 <ELIMAC+0x1ec>
    {
        S1[i]=0;
 80006ca:	f507 7246 	add.w	r2, r7, #792	; 0x318
 80006ce:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80006d2:	4413      	add	r3, r2
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
        S2[i]=0;
 80006d8:	f507 7242 	add.w	r2, r7, #776	; 0x308
 80006dc:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80006e0:	4413      	add	r3, r2
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < bit_size; i++)
 80006e6:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80006ea:	3301      	adds	r3, #1
 80006ec:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 80006f0:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80006f4:	2b0f      	cmp	r3, #15
 80006f6:	d9e8      	bls.n	80006ca <ELIMAC+0x1c6>
    for (size_t i = 0; i < 88; i++)
    {
        rkeys_ffs_zeros[i]=0;
    }*/

    aes128_keyschedule_ffs(rkeys_ffs_H, key1, key1);
 80006f8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80006fc:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8000700:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8000704:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8000708:	f107 0018 	add.w	r0, r7, #24
 800070c:	6812      	ldr	r2, [r2, #0]
 800070e:	6819      	ldr	r1, [r3, #0]
 8000710:	f002 fab0 	bl	8002c74 <aes128_keyschedule_ffs>
    aes128_keyschedule_ffs(rkeys_ffs, key2, key2);
 8000714:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8000718:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800071c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8000720:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8000724:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 8000728:	6812      	ldr	r2, [r2, #0]
 800072a:	6819      	ldr	r1, [r3, #0]
 800072c:	f002 faa2 	bl	8002c74 <aes128_keyschedule_ffs>

    int block_size = plaintext_size/32;
 8000730:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8000734:	f2a3 3355 	subw	r3, r3, #853	; 0x355
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	095b      	lsrs	r3, r3, #5
 800073c:	b2db      	uxtb	r3, r3
 800073e:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

    for (int i = 0; i < block_size; i++){
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8000748:	e06f      	b.n	800082a <ELIMAC+0x326>

        add_nonce(add_nonce_0, (unsigned int *)i_n1,(unsigned int *)i_n1, 4);
 800074a:	f507 724e 	add.w	r2, r7, #824	; 0x338
 800074e:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8000752:	f507 703e 	add.w	r0, r7, #760	; 0x2f8
 8000756:	2304      	movs	r3, #4
 8000758:	f000 f91c 	bl	8000994 <add_nonce>
        add_nonce(add_nonce_1, (unsigned int *)i_n2,(unsigned int *)i_n2, 4);
 800075c:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8000760:	f507 714a 	add.w	r1, r7, #808	; 0x328
 8000764:	f507 703a 	add.w	r0, r7, #744	; 0x2e8
 8000768:	2304      	movs	r3, #4
 800076a:	f000 f913 	bl	8000994 <add_nonce>

        H(i_n1, i_n2, rkeys_ffs_H, rounds);
 800076e:	f897 3390 	ldrb.w	r3, [r7, #912]	; 0x390
 8000772:	f107 0218 	add.w	r2, r7, #24
 8000776:	f507 714a 	add.w	r1, r7, #808	; 0x328
 800077a:	f507 704e 	add.w	r0, r7, #824	; 0x338
 800077e:	f000 f87d 	bl	800087c <H>

        xor_nonce( ptext0+ (i*16), i_n1, 16);
 8000782:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8000786:	011b      	lsls	r3, r3, #4
 8000788:	461a      	mov	r2, r3
 800078a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800078e:	4413      	add	r3, r2
 8000790:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8000794:	2210      	movs	r2, #16
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f924 	bl	80009e4 <xor_nonce>
        xor_nonce( ptext1+ (i*16), i_n2, 16);
 800079c:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80007a0:	011b      	lsls	r3, r3, #4
 80007a2:	461a      	mov	r2, r3
 80007a4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80007a8:	4413      	add	r3, r2
 80007aa:	f507 714a 	add.w	r1, r7, #808	; 0x328
 80007ae:	2210      	movs	r2, #16
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f917 	bl	80009e4 <xor_nonce>

        I(ptext0,  ptext1, rkeys_ffs, 4);
 80007b6:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80007ba:	2304      	movs	r3, #4
 80007bc:	f8d7 134c 	ldr.w	r1, [r7, #844]	; 0x34c
 80007c0:	f8d7 0354 	ldr.w	r0, [r7, #852]	; 0x354
 80007c4:	f000 f8a0 	bl	8000908 <I>

        xor_nonce( S1,ptext0+ (i*16), 16);
 80007c8:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	461a      	mov	r2, r3
 80007d0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80007d4:	1899      	adds	r1, r3, r2
 80007d6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80007da:	2210      	movs	r2, #16
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f901 	bl	80009e4 <xor_nonce>
        xor_nonce( S2,ptext1+ (i*16), 16);
 80007e2:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	461a      	mov	r2, r3
 80007ea:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80007ee:	1899      	adds	r1, r3, r2
 80007f0:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80007f4:	2210      	movs	r2, #16
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f8f4 	bl	80009e4 <xor_nonce>

        add_nonce(add_nonce_2, add_nonce_0,add_nonce_0, 4);
 80007fc:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8000800:	f507 713e 	add.w	r1, r7, #760	; 0x2f8
 8000804:	f507 7036 	add.w	r0, r7, #728	; 0x2d8
 8000808:	2304      	movs	r3, #4
 800080a:	f000 f8c3 	bl	8000994 <add_nonce>
        add_nonce(add_nonce_2, add_nonce_1,add_nonce_1, 4);
 800080e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8000812:	f507 713a 	add.w	r1, r7, #744	; 0x2e8
 8000816:	f507 7036 	add.w	r0, r7, #728	; 0x2d8
 800081a:	2304      	movs	r3, #4
 800081c:	f000 f8ba 	bl	8000994 <add_nonce>
    for (int i = 0; i < block_size; i++){
 8000820:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8000824:	3301      	adds	r3, #1
 8000826:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800082a:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 800082e:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8000832:	429a      	cmp	r2, r3
 8000834:	db89      	blt.n	800074a <ELIMAC+0x246>
    }
    
    xor_nonce( S1,S2, 16);
 8000836:	f507 7142 	add.w	r1, r7, #776	; 0x308
 800083a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800083e:	2210      	movs	r2, #16
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f8cf 	bl	80009e4 <xor_nonce>

    aes128_encrypt_ffs(tag, S2, S1,S1, rkeys_ffs);
 8000846:	f507 7046 	add.w	r0, r7, #792	; 0x318
 800084a:	f507 7246 	add.w	r2, r7, #792	; 0x318
 800084e:	f507 7142 	add.w	r1, r7, #776	; 0x308
 8000852:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	4603      	mov	r3, r0
 800085a:	f8d7 0394 	ldr.w	r0, [r7, #916]	; 0x394
 800085e:	f001 fd88 	bl	8002372 <aes128_encrypt_ffs>
 8000862:	46b5      	mov	sp, r6

}
 8000864:	bf00      	nop
 8000866:	f507 775b 	add.w	r7, r7, #876	; 0x36c
 800086a:	46bd      	mov	sp, r7
 800086c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000870:	08006820 	.word	0x08006820
 8000874:	08006830 	.word	0x08006830
 8000878:	08006840 	.word	0x08006840

0800087c <H>:

void H(unsigned char* ptext0,  unsigned char *ptext1, uint32_t *rkeys_ffs_H, unsigned char rounds){
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af02      	add	r7, sp, #8
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
 8000888:	70fb      	strb	r3, [r7, #3]

    switch (rounds)
 800088a:	78fb      	ldrb	r3, [r7, #3]
 800088c:	3b02      	subs	r3, #2
 800088e:	2b06      	cmp	r3, #6
 8000890:	d834      	bhi.n	80008fc <H+0x80>
 8000892:	a201      	add	r2, pc, #4	; (adr r2, 8000898 <H+0x1c>)
 8000894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000898:	080008b5 	.word	0x080008b5
 800089c:	080008fd 	.word	0x080008fd
 80008a0:	080008c7 	.word	0x080008c7
 80008a4:	080008fd 	.word	0x080008fd
 80008a8:	080008d9 	.word	0x080008d9
 80008ac:	080008fd 	.word	0x080008fd
 80008b0:	080008eb 	.word	0x080008eb
    {
    case 2:
        two_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f001 fe34 	bl	800252c <two_Rounds_aes128_encrypt_ffs>
        break;
 80008c4:	e01b      	b.n	80008fe <H+0x82>
    case 4:
        four_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	68b9      	ldr	r1, [r7, #8]
 80008d0:	68f8      	ldr	r0, [r7, #12]
 80008d2:	f001 fe75 	bl	80025c0 <four_Rounds_aes128_encrypt_ffs>
        break;
 80008d6:	e012      	b.n	80008fe <H+0x82>
    case 6:
        six_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	68b9      	ldr	r1, [r7, #8]
 80008e2:	68f8      	ldr	r0, [r7, #12]
 80008e4:	f001 fed7 	bl	8002696 <six_Rounds_aes128_encrypt_ffs>
        break;
 80008e8:	e009      	b.n	80008fe <H+0x82>
    case 8:
        eigth_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f001 ff64 	bl	80027c2 <eigth_Rounds_aes128_encrypt_ffs>
        break;
 80008fa:	e000      	b.n	80008fe <H+0x82>
    
    default:
        break;
 80008fc:	bf00      	nop
    }

}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop

08000908 <I>:

void I(unsigned char* ptext0,  unsigned char *ptext1, uint32_t *rkeys_ffs_H, unsigned char rounds){
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af02      	add	r7, sp, #8
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
 8000914:	70fb      	strb	r3, [r7, #3]

    switch (rounds)
 8000916:	78fb      	ldrb	r3, [r7, #3]
 8000918:	3b02      	subs	r3, #2
 800091a:	2b06      	cmp	r3, #6
 800091c:	d834      	bhi.n	8000988 <I+0x80>
 800091e:	a201      	add	r2, pc, #4	; (adr r2, 8000924 <I+0x1c>)
 8000920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000924:	08000941 	.word	0x08000941
 8000928:	08000989 	.word	0x08000989
 800092c:	08000953 	.word	0x08000953
 8000930:	08000989 	.word	0x08000989
 8000934:	08000965 	.word	0x08000965
 8000938:	08000989 	.word	0x08000989
 800093c:	08000977 	.word	0x08000977
    {
    case 2:
        two_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	68b9      	ldr	r1, [r7, #8]
 800094a:	68f8      	ldr	r0, [r7, #12]
 800094c:	f001 fdee 	bl	800252c <two_Rounds_aes128_encrypt_ffs>
        break;
 8000950:	e01b      	b.n	800098a <I+0x82>
    case 4:
        four_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	68fa      	ldr	r2, [r7, #12]
 800095a:	68b9      	ldr	r1, [r7, #8]
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	f001 fe2f 	bl	80025c0 <four_Rounds_aes128_encrypt_ffs>
        break;
 8000962:	e012      	b.n	800098a <I+0x82>
    case 6:
        six_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	68b9      	ldr	r1, [r7, #8]
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f001 fe91 	bl	8002696 <six_Rounds_aes128_encrypt_ffs>
        break;
 8000974:	e009      	b.n	800098a <I+0x82>
    case 8:
        eigth_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	68b9      	ldr	r1, [r7, #8]
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	f001 ff1e 	bl	80027c2 <eigth_Rounds_aes128_encrypt_ffs>
        break;
 8000986:	e000      	b.n	800098a <I+0x82>
    
    default:
        break;
 8000988:	bf00      	nop
    }

}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop

08000994 <add_nonce>:
    }

}


void add_nonce(unsigned int * add_nonce, unsigned int * nonce, unsigned int * nonce_result, unsigned int size){
 8000994:	b480      	push	{r7}
 8000996:	b087      	sub	sp, #28
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < size; i++){
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	e012      	b.n	80009ce <add_nonce+0x3a>
        nonce_result[i]=nonce[i]+ add_nonce[i];
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	4413      	add	r3, r2
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	4413      	add	r3, r2
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	4403      	add	r3, r0
 80009c4:	440a      	add	r2, r1
 80009c6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < size; i++){
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	3301      	adds	r3, #1
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d3e8      	bcc.n	80009a8 <add_nonce+0x14>
    }
    
}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	371c      	adds	r7, #28
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <xor_nonce>:

void xor_nonce(unsigned char * plaintext, unsigned char * nonce, unsigned int size){
 80009e4:	b480      	push	{r7}
 80009e6:	b087      	sub	sp, #28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < size; i++){
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	e010      	b.n	8000a18 <xor_nonce+0x34>
        plaintext[i]=nonce[i]^ plaintext[i];
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	4413      	add	r3, r2
 80009fc:	7819      	ldrb	r1, [r3, #0]
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	4413      	add	r3, r2
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	4403      	add	r3, r0
 8000a0c:	404a      	eors	r2, r1
 8000a0e:	b2d2      	uxtb	r2, r2
 8000a10:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < size; i++){
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	3301      	adds	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d3ea      	bcc.n	80009f6 <xor_nonce+0x12>
    }
    
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	371c      	adds	r7, #28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <divide_plaintext>:
void divide_plaintext(unsigned char* plaintext, unsigned char* ptext0,  unsigned char* ptext1,unsigned int plaintext_size){
 8000a2e:	b480      	push	{r7}
 8000a30:	b089      	sub	sp, #36	; 0x24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	60f8      	str	r0, [r7, #12]
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	603b      	str	r3, [r7, #0]
    int condicion = 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
    size_t j=0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
    size_t k=0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	e02c      	b.n	8000aa8 <divide_plaintext+0x7a>
        
        if (i%16==0 && i!=0)
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	f003 030f 	and.w	r3, r3, #15
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d106      	bne.n	8000a66 <divide_plaintext+0x38>
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <divide_plaintext+0x38>
            condicion=condicion^1;
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	f083 0301 	eor.w	r3, r3, #1
 8000a64:	61fb      	str	r3, [r7, #28]

        if (condicion)
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d008      	beq.n	8000a7e <divide_plaintext+0x50>
            ptext0[j] = plaintext[i];
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	441a      	add	r2, r3
 8000a72:	68b9      	ldr	r1, [r7, #8]
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	440b      	add	r3, r1
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e007      	b.n	8000a8e <divide_plaintext+0x60>
        else
            ptext1[k] = plaintext[i];
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	441a      	add	r2, r3
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	440b      	add	r3, r1
 8000a8a:	7812      	ldrb	r2, [r2, #0]
 8000a8c:	701a      	strb	r2, [r3, #0]
        
        if (condicion)
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <divide_plaintext+0x6e>
            j++;
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	3301      	adds	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
 8000a9a:	e002      	b.n	8000aa2 <divide_plaintext+0x74>
        else
            k++;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d3ce      	bcc.n	8000a4e <divide_plaintext+0x20>
    }
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	3724      	adds	r7, #36	; 0x24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <packing>:

}


void packing(uint32_t* out, const unsigned char* in0,
		const unsigned char* in1) {
 8000abe:	b480      	push	{r7}
 8000ac0:	b087      	sub	sp, #28
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	60f8      	str	r0, [r7, #12]
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	out[0] = LE_LOAD_32(in0);
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	3303      	adds	r3, #3
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	061a      	lsls	r2, r3, #24
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	041b      	lsls	r3, r3, #16
 8000ada:	431a      	orrs	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	021b      	lsls	r3, r3, #8
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	7812      	ldrb	r2, [r2, #0]
 8000aea:	431a      	orrs	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	601a      	str	r2, [r3, #0]
	out[1] = LE_LOAD_32(in1);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3303      	adds	r3, #3
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	061a      	lsls	r2, r3, #24
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3302      	adds	r3, #2
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	041b      	lsls	r3, r3, #16
 8000b00:	431a      	orrs	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3301      	adds	r3, #1
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	021b      	lsls	r3, r3, #8
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	3304      	adds	r3, #4
 8000b16:	430a      	orrs	r2, r1
 8000b18:	601a      	str	r2, [r3, #0]
	out[2] = LE_LOAD_32(in0 + 4);
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	3307      	adds	r3, #7
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	061a      	lsls	r2, r3, #24
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	3306      	adds	r3, #6
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	041b      	lsls	r3, r3, #16
 8000b2a:	431a      	orrs	r2, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	3305      	adds	r3, #5
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	021b      	lsls	r3, r3, #8
 8000b34:	431a      	orrs	r2, r3
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	3308      	adds	r3, #8
 8000b42:	430a      	orrs	r2, r1
 8000b44:	601a      	str	r2, [r3, #0]
	out[3] = LE_LOAD_32(in1 + 4);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3307      	adds	r3, #7
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	061a      	lsls	r2, r3, #24
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3306      	adds	r3, #6
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	041b      	lsls	r3, r3, #16
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3305      	adds	r3, #5
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	021b      	lsls	r3, r3, #8
 8000b60:	431a      	orrs	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3304      	adds	r3, #4
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	330c      	adds	r3, #12
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]
	out[4] = LE_LOAD_32(in0 + 8);
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	330b      	adds	r3, #11
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	061a      	lsls	r2, r3, #24
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	330a      	adds	r3, #10
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	041b      	lsls	r3, r3, #16
 8000b82:	431a      	orrs	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	3309      	adds	r3, #9
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	021b      	lsls	r3, r3, #8
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	3308      	adds	r3, #8
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3310      	adds	r3, #16
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	601a      	str	r2, [r3, #0]
	out[5] = LE_LOAD_32(in1 + 8);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	330b      	adds	r3, #11
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	061a      	lsls	r2, r3, #24
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	330a      	adds	r3, #10
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	041b      	lsls	r3, r3, #16
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3309      	adds	r3, #9
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3308      	adds	r3, #8
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3314      	adds	r3, #20
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	601a      	str	r2, [r3, #0]
	out[6] = LE_LOAD_32(in0 + 12);
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	330f      	adds	r3, #15
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	061a      	lsls	r2, r3, #24
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	330e      	adds	r3, #14
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	041b      	lsls	r3, r3, #16
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	330d      	adds	r3, #13
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	431a      	orrs	r2, r3
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	330c      	adds	r3, #12
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	3318      	adds	r3, #24
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
	out[7] = LE_LOAD_32(in1 + 12);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	330f      	adds	r3, #15
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	061a      	lsls	r2, r3, #24
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	330e      	adds	r3, #14
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	041b      	lsls	r3, r3, #16
 8000c06:	431a      	orrs	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	330d      	adds	r3, #13
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	431a      	orrs	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	330c      	adds	r3, #12
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	331c      	adds	r3, #28
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[1], out[0], 0x55555555, 1);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	085b      	lsrs	r3, r3, #1
 8000c2e:	4053      	eors	r3, r2
 8000c30:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	405a      	eors	r2, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	3304      	adds	r3, #4
 8000c46:	6819      	ldr	r1, [r3, #0]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	005a      	lsls	r2, r3, #1
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3304      	adds	r3, #4
 8000c50:	404a      	eors	r2, r1
 8000c52:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[3], out[2], 0x55555555, 1);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	3308      	adds	r3, #8
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	330c      	adds	r3, #12
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	085b      	lsrs	r3, r3, #1
 8000c62:	4053      	eors	r3, r2
 8000c64:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3308      	adds	r3, #8
 8000c6e:	6819      	ldr	r1, [r3, #0]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	3308      	adds	r3, #8
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	404a      	eors	r2, r1
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	330c      	adds	r3, #12
 8000c7e:	6819      	ldr	r1, [r3, #0]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	005a      	lsls	r2, r3, #1
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	330c      	adds	r3, #12
 8000c88:	404a      	eors	r2, r1
 8000c8a:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[5], out[4], 0x55555555, 1);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3310      	adds	r3, #16
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3314      	adds	r3, #20
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	085b      	lsrs	r3, r3, #1
 8000c9a:	4053      	eors	r3, r2
 8000c9c:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	3310      	adds	r3, #16
 8000ca6:	6819      	ldr	r1, [r3, #0]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3310      	adds	r3, #16
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	404a      	eors	r2, r1
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	3314      	adds	r3, #20
 8000cb6:	6819      	ldr	r1, [r3, #0]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005a      	lsls	r2, r3, #1
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3314      	adds	r3, #20
 8000cc0:	404a      	eors	r2, r1
 8000cc2:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[6], 0x55555555, 1);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3318      	adds	r3, #24
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	331c      	adds	r3, #28
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	085b      	lsrs	r3, r3, #1
 8000cd2:	4053      	eors	r3, r2
 8000cd4:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	3318      	adds	r3, #24
 8000cde:	6819      	ldr	r1, [r3, #0]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3318      	adds	r3, #24
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	404a      	eors	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	331c      	adds	r3, #28
 8000cee:	6819      	ldr	r1, [r3, #0]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005a      	lsls	r2, r3, #1
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	331c      	adds	r3, #28
 8000cf8:	404a      	eors	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[2], out[0], 0x33333333, 2);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	3308      	adds	r3, #8
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	4053      	eors	r3, r2
 8000d0a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	405a      	eors	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3308      	adds	r3, #8
 8000d20:	6819      	ldr	r1, [r3, #0]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	009a      	lsls	r2, r3, #2
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3308      	adds	r3, #8
 8000d2a:	404a      	eors	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[3], out[1], 0x33333333, 2);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	3304      	adds	r3, #4
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	330c      	adds	r3, #12
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	4053      	eors	r3, r2
 8000d3e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3304      	adds	r3, #4
 8000d48:	6819      	ldr	r1, [r3, #0]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	404a      	eors	r2, r1
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	330c      	adds	r3, #12
 8000d58:	6819      	ldr	r1, [r3, #0]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	009a      	lsls	r2, r3, #2
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	330c      	adds	r3, #12
 8000d62:	404a      	eors	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[6], out[4], 0x33333333, 2);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3310      	adds	r3, #16
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3318      	adds	r3, #24
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	4053      	eors	r3, r2
 8000d76:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3310      	adds	r3, #16
 8000d80:	6819      	ldr	r1, [r3, #0]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	3310      	adds	r3, #16
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	404a      	eors	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	3318      	adds	r3, #24
 8000d90:	6819      	ldr	r1, [r3, #0]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	009a      	lsls	r2, r3, #2
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	3318      	adds	r3, #24
 8000d9a:	404a      	eors	r2, r1
 8000d9c:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[5], 0x33333333, 2);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	3314      	adds	r3, #20
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	331c      	adds	r3, #28
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	4053      	eors	r3, r2
 8000dae:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3314      	adds	r3, #20
 8000db8:	6819      	ldr	r1, [r3, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3314      	adds	r3, #20
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	404a      	eors	r2, r1
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	331c      	adds	r3, #28
 8000dc8:	6819      	ldr	r1, [r3, #0]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	009a      	lsls	r2, r3, #2
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	331c      	adds	r3, #28
 8000dd2:	404a      	eors	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[4], out[0], 0x0f0f0f0f, 4);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	3310      	adds	r3, #16
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	091b      	lsrs	r3, r3, #4
 8000de2:	4053      	eors	r3, r2
 8000de4:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	405a      	eors	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3310      	adds	r3, #16
 8000dfa:	6819      	ldr	r1, [r3, #0]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	011a      	lsls	r2, r3, #4
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3310      	adds	r3, #16
 8000e04:	404a      	eors	r2, r1
 8000e06:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[5], out[1], 0x0f0f0f0f, 4);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	3314      	adds	r3, #20
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	4053      	eors	r3, r2
 8000e18:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3304      	adds	r3, #4
 8000e22:	6819      	ldr	r1, [r3, #0]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3304      	adds	r3, #4
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	404a      	eors	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	3314      	adds	r3, #20
 8000e32:	6819      	ldr	r1, [r3, #0]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	011a      	lsls	r2, r3, #4
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3314      	adds	r3, #20
 8000e3c:	404a      	eors	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[6], out[2], 0x0f0f0f0f, 4);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3308      	adds	r3, #8
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3318      	adds	r3, #24
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	091b      	lsrs	r3, r3, #4
 8000e4e:	4053      	eors	r3, r2
 8000e50:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	3308      	adds	r3, #8
 8000e5a:	6819      	ldr	r1, [r3, #0]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3308      	adds	r3, #8
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	404a      	eors	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3318      	adds	r3, #24
 8000e6a:	6819      	ldr	r1, [r3, #0]
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	011a      	lsls	r2, r3, #4
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	3318      	adds	r3, #24
 8000e74:	404a      	eors	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[3], 0x0f0f0f0f, 4);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	330c      	adds	r3, #12
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	331c      	adds	r3, #28
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	091b      	lsrs	r3, r3, #4
 8000e86:	4053      	eors	r3, r2
 8000e88:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	330c      	adds	r3, #12
 8000e92:	6819      	ldr	r1, [r3, #0]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	330c      	adds	r3, #12
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	404a      	eors	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	331c      	adds	r3, #28
 8000ea2:	6819      	ldr	r1, [r3, #0]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	011a      	lsls	r2, r3, #4
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	331c      	adds	r3, #28
 8000eac:	404a      	eors	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	371c      	adds	r7, #28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <unpacking>:

/******************************************************************************
* Unpacks the 256-bit internal state in two 128-bit blocs out0, out1.
******************************************************************************/
static void unpacking(unsigned char* out0, unsigned char* out1, uint32_t* in) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	SWAPMOVE(in[4], in[0], 0x0f0f0f0f, 4);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3310      	adds	r3, #16
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	091b      	lsrs	r3, r3, #4
 8000ed4:	4053      	eors	r3, r2
 8000ed6:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	405a      	eors	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3310      	adds	r3, #16
 8000eec:	6819      	ldr	r1, [r3, #0]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	011a      	lsls	r2, r3, #4
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3310      	adds	r3, #16
 8000ef6:	404a      	eors	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[5], in[1], 0x0f0f0f0f, 4);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3304      	adds	r3, #4
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3314      	adds	r3, #20
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	4053      	eors	r3, r2
 8000f0a:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3304      	adds	r3, #4
 8000f14:	6819      	ldr	r1, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	404a      	eors	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3314      	adds	r3, #20
 8000f24:	6819      	ldr	r1, [r3, #0]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	011a      	lsls	r2, r3, #4
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3314      	adds	r3, #20
 8000f2e:	404a      	eors	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[6], in[2], 0x0f0f0f0f, 4);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3308      	adds	r3, #8
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3318      	adds	r3, #24
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	091b      	lsrs	r3, r3, #4
 8000f40:	4053      	eors	r3, r2
 8000f42:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3308      	adds	r3, #8
 8000f4c:	6819      	ldr	r1, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3308      	adds	r3, #8
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	404a      	eors	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3318      	adds	r3, #24
 8000f5c:	6819      	ldr	r1, [r3, #0]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	011a      	lsls	r2, r3, #4
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3318      	adds	r3, #24
 8000f66:	404a      	eors	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[3], 0x0f0f0f0f, 4);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	330c      	adds	r3, #12
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	331c      	adds	r3, #28
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	4053      	eors	r3, r2
 8000f7a:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	330c      	adds	r3, #12
 8000f84:	6819      	ldr	r1, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	330c      	adds	r3, #12
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	404a      	eors	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	331c      	adds	r3, #28
 8000f94:	6819      	ldr	r1, [r3, #0]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	011a      	lsls	r2, r3, #4
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	331c      	adds	r3, #28
 8000f9e:	404a      	eors	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[2], in[0], 0x33333333, 2);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3308      	adds	r3, #8
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	4053      	eors	r3, r2
 8000fb0:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	405a      	eors	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	6819      	ldr	r1, [r3, #0]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	009a      	lsls	r2, r3, #2
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3308      	adds	r3, #8
 8000fd0:	404a      	eors	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[3], in[1], 0x33333333, 2);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	330c      	adds	r3, #12
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	4053      	eors	r3, r2
 8000fe4:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3304      	adds	r3, #4
 8000fee:	6819      	ldr	r1, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	404a      	eors	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	330c      	adds	r3, #12
 8000ffe:	6819      	ldr	r1, [r3, #0]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	009a      	lsls	r2, r3, #2
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	330c      	adds	r3, #12
 8001008:	404a      	eors	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[6], in[4], 0x33333333, 2);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3310      	adds	r3, #16
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3318      	adds	r3, #24
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	4053      	eors	r3, r2
 800101c:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3310      	adds	r3, #16
 8001026:	6819      	ldr	r1, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3310      	adds	r3, #16
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	404a      	eors	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3318      	adds	r3, #24
 8001036:	6819      	ldr	r1, [r3, #0]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	009a      	lsls	r2, r3, #2
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3318      	adds	r3, #24
 8001040:	404a      	eors	r2, r1
 8001042:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[5], 0x33333333, 2);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3314      	adds	r3, #20
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	331c      	adds	r3, #28
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	4053      	eors	r3, r2
 8001054:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3314      	adds	r3, #20
 800105e:	6819      	ldr	r1, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3314      	adds	r3, #20
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	404a      	eors	r2, r1
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	331c      	adds	r3, #28
 800106e:	6819      	ldr	r1, [r3, #0]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	009a      	lsls	r2, r3, #2
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	331c      	adds	r3, #28
 8001078:	404a      	eors	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[1], in[0], 0x55555555, 1);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3304      	adds	r3, #4
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	085b      	lsrs	r3, r3, #1
 8001088:	4053      	eors	r3, r2
 800108a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	405a      	eors	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3304      	adds	r3, #4
 80010a0:	6819      	ldr	r1, [r3, #0]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005a      	lsls	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3304      	adds	r3, #4
 80010aa:	404a      	eors	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[3], in[2], 0x55555555, 1);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3308      	adds	r3, #8
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	330c      	adds	r3, #12
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	085b      	lsrs	r3, r3, #1
 80010bc:	4053      	eors	r3, r2
 80010be:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3308      	adds	r3, #8
 80010c8:	6819      	ldr	r1, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3308      	adds	r3, #8
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	404a      	eors	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	330c      	adds	r3, #12
 80010d8:	6819      	ldr	r1, [r3, #0]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005a      	lsls	r2, r3, #1
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	330c      	adds	r3, #12
 80010e2:	404a      	eors	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[5], in[4], 0x55555555, 1);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3310      	adds	r3, #16
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3314      	adds	r3, #20
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	085b      	lsrs	r3, r3, #1
 80010f4:	4053      	eors	r3, r2
 80010f6:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3310      	adds	r3, #16
 8001100:	6819      	ldr	r1, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3310      	adds	r3, #16
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	404a      	eors	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3314      	adds	r3, #20
 8001110:	6819      	ldr	r1, [r3, #0]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005a      	lsls	r2, r3, #1
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3314      	adds	r3, #20
 800111a:	404a      	eors	r2, r1
 800111c:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[6], 0x55555555, 1);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3318      	adds	r3, #24
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	331c      	adds	r3, #28
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	085b      	lsrs	r3, r3, #1
 800112c:	4053      	eors	r3, r2
 800112e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3318      	adds	r3, #24
 8001138:	6819      	ldr	r1, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3318      	adds	r3, #24
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	404a      	eors	r2, r1
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	331c      	adds	r3, #28
 8001148:	6819      	ldr	r1, [r3, #0]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005a      	lsls	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	331c      	adds	r3, #28
 8001152:	404a      	eors	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
	LE_STORE_32(out0, in[0]);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	0a1a      	lsrs	r2, r3, #8
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	0c1a      	lsrs	r2, r3, #16
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3302      	adds	r3, #2
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	0e1a      	lsrs	r2, r3, #24
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3303      	adds	r3, #3
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 4, in[2]);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3308      	adds	r3, #8
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3304      	adds	r3, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3308      	adds	r3, #8
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	0a1a      	lsrs	r2, r3, #8
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3305      	adds	r3, #5
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3308      	adds	r3, #8
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	0c1a      	lsrs	r2, r3, #16
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	3306      	adds	r3, #6
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	701a      	strb	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3308      	adds	r3, #8
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	0e1a      	lsrs	r2, r3, #24
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3307      	adds	r3, #7
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 8, in[4]);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3310      	adds	r3, #16
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3308      	adds	r3, #8
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3310      	adds	r3, #16
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	0a1a      	lsrs	r2, r3, #8
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	3309      	adds	r3, #9
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3310      	adds	r3, #16
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	0c1a      	lsrs	r2, r3, #16
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	330a      	adds	r3, #10
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3310      	adds	r3, #16
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	0e1a      	lsrs	r2, r3, #24
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	330b      	adds	r3, #11
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 12, in[6]);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3318      	adds	r3, #24
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	330c      	adds	r3, #12
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3318      	adds	r3, #24
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	0a1a      	lsrs	r2, r3, #8
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	330d      	adds	r3, #13
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3318      	adds	r3, #24
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	0c1a      	lsrs	r2, r3, #16
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	330e      	adds	r3, #14
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3318      	adds	r3, #24
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	0e1a      	lsrs	r2, r3, #24
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	330f      	adds	r3, #15
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1, in[1]);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3304      	adds	r3, #4
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3304      	adds	r3, #4
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	0a1a      	lsrs	r2, r3, #8
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	3301      	adds	r3, #1
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3304      	adds	r3, #4
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	0c1a      	lsrs	r2, r3, #16
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	3302      	adds	r3, #2
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3304      	adds	r3, #4
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	0e1a      	lsrs	r2, r3, #24
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	3303      	adds	r3, #3
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 4, in[3]);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	330c      	adds	r3, #12
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	3304      	adds	r3, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	330c      	adds	r3, #12
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	0a1a      	lsrs	r2, r3, #8
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3305      	adds	r3, #5
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	330c      	adds	r3, #12
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	0c1a      	lsrs	r2, r3, #16
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	3306      	adds	r3, #6
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	330c      	adds	r3, #12
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	0e1a      	lsrs	r2, r3, #24
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	3307      	adds	r3, #7
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 8, in[5]);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3314      	adds	r3, #20
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	3308      	adds	r3, #8
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3314      	adds	r3, #20
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	0a1a      	lsrs	r2, r3, #8
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	3309      	adds	r3, #9
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3314      	adds	r3, #20
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	0c1a      	lsrs	r2, r3, #16
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	330a      	adds	r3, #10
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3314      	adds	r3, #20
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	0e1a      	lsrs	r2, r3, #24
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	330b      	adds	r3, #11
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 12, in[7]);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	331c      	adds	r3, #28
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	330c      	adds	r3, #12
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	331c      	adds	r3, #28
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	0a1a      	lsrs	r2, r3, #8
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	330d      	adds	r3, #13
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	331c      	adds	r3, #28
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	0c1a      	lsrs	r2, r3, #16
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	330e      	adds	r3, #14
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	701a      	strb	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	331c      	adds	r3, #28
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	0e1a      	lsrs	r2, r3, #24
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	330f      	adds	r3, #15
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	701a      	strb	r2, [r3, #0]
}
 800133a:	bf00      	nop
 800133c:	371c      	adds	r7, #28
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <ark>:

/******************************************************************************
* XOR the round key to the internal state. The round keys are expected to be 
* pre-computed and to be packed in the fixsliced representation.
******************************************************************************/
static void ark(uint32_t* state, const uint32_t* rkey) {
 8001346:	b480      	push	{r7}
 8001348:	b085      	sub	sp, #20
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 8; i++)
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	e012      	b.n	800137c <ark+0x36>
		state[i] ^= rkey[i];
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	6819      	ldr	r1, [r3, #0]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	4413      	add	r3, r2
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	4403      	add	r3, r0
 8001372:	404a      	eors	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3301      	adds	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b07      	cmp	r3, #7
 8001380:	dde9      	ble.n	8001356 <ark+0x10>
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <sbox>:
/******************************************************************************
* Bitsliced implementation of the AES Sbox based on Boyar, Peralta and Calik.
* See http://www.cs.yale.edu/homes/peralta/CircuitStuff/SLP_AES_113.txt
* Note that the 4 NOT (^= 0xffffffff) are moved to the key schedule.
******************************************************************************/
void sbox(uint32_t* state) {
 8001390:	b480      	push	{r7}
 8001392:	b095      	sub	sp, #84	; 0x54
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4, t5,
		t6, t7, t8, t9, t10, t11, t12,
		t13, t14, t15, t16, t17;
	t0			= state[3] ^ state[5];
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	330c      	adds	r3, #12
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3314      	adds	r3, #20
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4053      	eors	r3, r2
 80013a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	t1			= state[0] ^ state[6];
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3318      	adds	r3, #24
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4053      	eors	r3, r2
 80013b4:	64bb      	str	r3, [r7, #72]	; 0x48
	t2			= t1 ^ t0;
 80013b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ba:	4053      	eors	r3, r2
 80013bc:	647b      	str	r3, [r7, #68]	; 0x44
	t3			= state[4] ^ t2;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3310      	adds	r3, #16
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013c6:	4053      	eors	r3, r2
 80013c8:	643b      	str	r3, [r7, #64]	; 0x40
	t4			= t3 ^ state[5];
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3314      	adds	r3, #20
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013d2:	4053      	eors	r3, r2
 80013d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	t5			= t2 & t4;
 80013d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013da:	4013      	ands	r3, r2
 80013dc:	63bb      	str	r3, [r7, #56]	; 0x38
	t6			= t4 ^ state[7];
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	331c      	adds	r3, #28
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013e6:	4053      	eors	r3, r2
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
	t7			= t3 ^ state[1];
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3304      	adds	r3, #4
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013f2:	4053      	eors	r3, r2
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
	t8			= state[0] ^ state[3]; 
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	330c      	adds	r3, #12
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4053      	eors	r3, r2
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
	t9			= t7 ^ t8;
 8001404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	4053      	eors	r3, r2
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
	t10			= t8 & t9;
 800140c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800140e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001410:	4013      	ands	r3, r2
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
	t11			= state[7] ^ t9; 
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	331c      	adds	r3, #28
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800141c:	4053      	eors	r3, r2
 800141e:	623b      	str	r3, [r7, #32]
	t12			= state[0] ^ state[5];
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3314      	adds	r3, #20
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4053      	eors	r3, r2
 800142c:	61fb      	str	r3, [r7, #28]
	t13			= state[1] ^ state[2];
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3304      	adds	r3, #4
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3308      	adds	r3, #8
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4053      	eors	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
	t14			= t4 ^ t13;
 800143e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	4053      	eors	r3, r2
 8001444:	617b      	str	r3, [r7, #20]
	t15			= t14 ^ t9;
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144a:	4053      	eors	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
	t16			= t0 & t15;
 800144e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
	t17			= t16 ^ t10;
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	4053      	eors	r3, r2
 800145c:	60bb      	str	r3, [r7, #8]
	state[1]	= t14 ^ t12; 
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3304      	adds	r3, #4
 8001462:	6979      	ldr	r1, [r7, #20]
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	404a      	eors	r2, r1
 8001468:	601a      	str	r2, [r3, #0]
	state[2]	= t12 & t14;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3308      	adds	r3, #8
 800146e:	69f9      	ldr	r1, [r7, #28]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	400a      	ands	r2, r1
 8001474:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3308      	adds	r3, #8
 800147a:	6819      	ldr	r1, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3308      	adds	r3, #8
 8001480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001482:	404a      	eors	r2, r1
 8001484:	601a      	str	r2, [r3, #0]
	state[4]	= t13 ^ t9;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3310      	adds	r3, #16
 800148a:	69b9      	ldr	r1, [r7, #24]
 800148c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800148e:	404a      	eors	r2, r1
 8001490:	601a      	str	r2, [r3, #0]
	state[5]	= t1 ^ state[4];
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3310      	adds	r3, #16
 8001496:	6819      	ldr	r1, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3314      	adds	r3, #20
 800149c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800149e:	404a      	eors	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]
	t3			= t1 & state[4];
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3310      	adds	r3, #16
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014aa:	4013      	ands	r3, r2
 80014ac:	643b      	str	r3, [r7, #64]	; 0x40
	t10			= state[0] ^ state[4];
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3310      	adds	r3, #16
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4053      	eors	r3, r2
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
	t13 		^= state[7];
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	331c      	adds	r3, #28
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4053      	eors	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
	state[3] 	^= t13; 
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	330c      	adds	r3, #12
 80014cc:	6819      	ldr	r1, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	330c      	adds	r3, #12
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	404a      	eors	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]
	t16			= state[3] & state[7];
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	330c      	adds	r3, #12
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	331c      	adds	r3, #28
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4013      	ands	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]
	t16 		^= t5;
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ec:	4053      	eors	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
	t16 		^= state[2];
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3308      	adds	r3, #8
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	4053      	eors	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]
	state[1] 	^= t16;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3304      	adds	r3, #4
 8001500:	6819      	ldr	r1, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3304      	adds	r3, #4
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	404a      	eors	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
	state[0] 	^= t13;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	405a      	eors	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	601a      	str	r2, [r3, #0]
	t16			= state[0] & t11;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6a3a      	ldr	r2, [r7, #32]
 800151e:	4013      	ands	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
	t16 		^= t3;
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001526:	4053      	eors	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
	state[2] 	^= t16;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3308      	adds	r3, #8
 800152e:	6819      	ldr	r1, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3308      	adds	r3, #8
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	404a      	eors	r2, r1
 8001538:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3308      	adds	r3, #8
 800153e:	6819      	ldr	r1, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3308      	adds	r3, #8
 8001544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001546:	404a      	eors	r2, r1
 8001548:	601a      	str	r2, [r3, #0]
	state[6] 	^= t13;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3318      	adds	r3, #24
 800154e:	6819      	ldr	r1, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3318      	adds	r3, #24
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	404a      	eors	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
	t10			= state[6] & t13;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3318      	adds	r3, #24
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
	t3 			^= t10;
 8001566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	4053      	eors	r3, r2
 800156c:	643b      	str	r3, [r7, #64]	; 0x40
	t3 			^= t17;
 800156e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4053      	eors	r3, r2
 8001574:	643b      	str	r3, [r7, #64]	; 0x40
	state[5] 	^= t3;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3314      	adds	r3, #20
 800157a:	6819      	ldr	r1, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3314      	adds	r3, #20
 8001580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001582:	404a      	eors	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
	t3			= state[6] ^ t12;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3318      	adds	r3, #24
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	4053      	eors	r3, r2
 8001590:	643b      	str	r3, [r7, #64]	; 0x40
	t10			= t3 & t6;
 8001592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001596:	4013      	ands	r3, r2
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
	t5 			^= t10;
 800159a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	4053      	eors	r3, r2
 80015a0:	63bb      	str	r3, [r7, #56]	; 0x38
	t5 			^= t7;
 80015a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a6:	4053      	eors	r3, r2
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
	t5 			^= t17;
 80015aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4053      	eors	r3, r2
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
	t7			= t5 & state[5];
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3314      	adds	r3, #20
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015ba:	4013      	ands	r3, r2
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
	t10			= state[2] ^ t7;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3308      	adds	r3, #8
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015c6:	4053      	eors	r3, r2
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
	t7 			^= state[1];
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3304      	adds	r3, #4
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015d2:	4053      	eors	r3, r2
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
	t5 			^= state[1];
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3304      	adds	r3, #4
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015de:	4053      	eors	r3, r2
 80015e0:	63bb      	str	r3, [r7, #56]	; 0x38
	t16			= t5 & t10;
 80015e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	4013      	ands	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
	state[1] 	^= t16;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3304      	adds	r3, #4
 80015ee:	6819      	ldr	r1, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3304      	adds	r3, #4
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	404a      	eors	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
	t17			= state[1] & state[0];
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3304      	adds	r3, #4
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
	t11			= state[1] & t11;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3304      	adds	r3, #4
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6a3a      	ldr	r2, [r7, #32]
 8001610:	4013      	ands	r3, r2
 8001612:	623b      	str	r3, [r7, #32]
	t16			= state[5] ^ state[2];
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3314      	adds	r3, #20
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3308      	adds	r3, #8
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4053      	eors	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]
	t7 			&= t16;
 8001624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4013      	ands	r3, r2
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
	t7 			^= state[2];
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3308      	adds	r3, #8
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001634:	4053      	eors	r3, r2
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
	t16			= t10 ^ t7;
 8001638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163c:	4053      	eors	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
	state[2] 	&= t16;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3308      	adds	r3, #8
 8001644:	6819      	ldr	r1, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3308      	adds	r3, #8
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	400a      	ands	r2, r1
 800164e:	601a      	str	r2, [r3, #0]
	t10 		^= state[2];
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3308      	adds	r3, #8
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001658:	4053      	eors	r3, r2
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
	t10 		&= state[1];
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3304      	adds	r3, #4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001664:	4013      	ands	r3, r2
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
	t5 			^= t10;
 8001668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	4053      	eors	r3, r2
 800166e:	63bb      	str	r3, [r7, #56]	; 0x38
	t10			= state[1] ^ t5;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3304      	adds	r3, #4
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001678:	4053      	eors	r3, r2
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
	state[4] 	&= t10; 
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3310      	adds	r3, #16
 8001680:	6819      	ldr	r1, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3310      	adds	r3, #16
 8001686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001688:	400a      	ands	r2, r1
 800168a:	601a      	str	r2, [r3, #0]
	t11 		^= state[4];
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3310      	adds	r3, #16
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6a3a      	ldr	r2, [r7, #32]
 8001694:	4053      	eors	r3, r2
 8001696:	623b      	str	r3, [r7, #32]
	t1 			&= t10;
 8001698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	4013      	ands	r3, r2
 800169e:	64bb      	str	r3, [r7, #72]	; 0x48
	state[6] 	&= t5; 
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3318      	adds	r3, #24
 80016a4:	6819      	ldr	r1, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3318      	adds	r3, #24
 80016aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016ac:	400a      	ands	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]
	t10			= t5 & t13;
 80016b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
	state[4] 	^= t10;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3310      	adds	r3, #16
 80016bc:	6819      	ldr	r1, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3310      	adds	r3, #16
 80016c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c4:	404a      	eors	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
	state[5] 	^= t7;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3314      	adds	r3, #20
 80016cc:	6819      	ldr	r1, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3314      	adds	r3, #20
 80016d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016d4:	404a      	eors	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]
	state[2] 	^= state[5];
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3308      	adds	r3, #8
 80016dc:	6819      	ldr	r1, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3314      	adds	r3, #20
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3308      	adds	r3, #8
 80016e8:	404a      	eors	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
	state[5]	= t5 ^ state[2];
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3308      	adds	r3, #8
 80016f0:	6819      	ldr	r1, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3314      	adds	r3, #20
 80016f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016f8:	404a      	eors	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]
	t5			= state[5] & t14;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3314      	adds	r3, #20
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4013      	ands	r3, r2
 8001706:	63bb      	str	r3, [r7, #56]	; 0x38
	t10			= state[5] & t12;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3314      	adds	r3, #20
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	4013      	ands	r3, r2
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
	t12			= t7 ^ state[2];
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3308      	adds	r3, #8
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800171c:	4053      	eors	r3, r2
 800171e:	61fb      	str	r3, [r7, #28]
	t4 			&= t12;
 8001720:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	4013      	ands	r3, r2
 8001726:	63fb      	str	r3, [r7, #60]	; 0x3c
	t2 			&= t12;
 8001728:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	4013      	ands	r3, r2
 800172e:	647b      	str	r3, [r7, #68]	; 0x44
	t3 			&= state[2]; 
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3308      	adds	r3, #8
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001738:	4013      	ands	r3, r2
 800173a:	643b      	str	r3, [r7, #64]	; 0x40
	state[2] 	&= t6;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3308      	adds	r3, #8
 8001740:	6819      	ldr	r1, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3308      	adds	r3, #8
 8001746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001748:	400a      	ands	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
	state[2] 	^= t4;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3308      	adds	r3, #8
 8001750:	6819      	ldr	r1, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3308      	adds	r3, #8
 8001756:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001758:	404a      	eors	r2, r1
 800175a:	601a      	str	r2, [r3, #0]
	t13			= state[4] ^ state[2];
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3310      	adds	r3, #16
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3308      	adds	r3, #8
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4053      	eors	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
	state[3] 	&= t7;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	330c      	adds	r3, #12
 8001770:	6819      	ldr	r1, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	330c      	adds	r3, #12
 8001776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001778:	400a      	ands	r2, r1
 800177a:	601a      	str	r2, [r3, #0]
	state[1] 	^= t7;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3304      	adds	r3, #4
 8001780:	6819      	ldr	r1, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3304      	adds	r3, #4
 8001786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001788:	404a      	eors	r2, r1
 800178a:	601a      	str	r2, [r3, #0]
	state[5] 	^= state[1];
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3314      	adds	r3, #20
 8001790:	6819      	ldr	r1, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3304      	adds	r3, #4
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3314      	adds	r3, #20
 800179c:	404a      	eors	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
	t6			= state[5] & t15;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3314      	adds	r3, #20
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
	state[4] 	^= t6; 
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3310      	adds	r3, #16
 80017b0:	6819      	ldr	r1, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3310      	adds	r3, #16
 80017b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017b8:	404a      	eors	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]
	t0 			&= state[5];
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3314      	adds	r3, #20
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017c4:	4013      	ands	r3, r2
 80017c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	state[5]	= state[1] & t9; 
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3304      	adds	r3, #4
 80017cc:	6819      	ldr	r1, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3314      	adds	r3, #20
 80017d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017d4:	400a      	ands	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
	state[5] 	^= state[4];
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3314      	adds	r3, #20
 80017dc:	6819      	ldr	r1, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3310      	adds	r3, #16
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3314      	adds	r3, #20
 80017e8:	404a      	eors	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]
	state[1] 	&= t8;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3304      	adds	r3, #4
 80017f0:	6819      	ldr	r1, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3304      	adds	r3, #4
 80017f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f8:	400a      	ands	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]
	t6			= state[1] ^ state[5];
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3304      	adds	r3, #4
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3314      	adds	r3, #20
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4053      	eors	r3, r2
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
	t0 			^= state[1];
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3304      	adds	r3, #4
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001814:	4053      	eors	r3, r2
 8001816:	64fb      	str	r3, [r7, #76]	; 0x4c
	state[1]	= t3 ^ t0;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3304      	adds	r3, #4
 800181c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800181e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001820:	404a      	eors	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
	t15			= state[1] ^ state[3];
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3304      	adds	r3, #4
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	330c      	adds	r3, #12
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4053      	eors	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
	t2 			^= state[1];
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3304      	adds	r3, #4
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800183c:	4053      	eors	r3, r2
 800183e:	647b      	str	r3, [r7, #68]	; 0x44
	state[0]	= t2 ^ state[5];
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3314      	adds	r3, #20
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001848:	405a      	eors	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	601a      	str	r2, [r3, #0]
	state[3]	= t2 ^ t13;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	330c      	adds	r3, #12
 8001852:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	404a      	eors	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
	state[1]	= state[3] ^ state[5];
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	330c      	adds	r3, #12
 800185e:	6819      	ldr	r1, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3314      	adds	r3, #20
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3304      	adds	r3, #4
 800186a:	404a      	eors	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
	//state[1] 	^= 0xffffffff;
	t0 			^= state[6];
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3318      	adds	r3, #24
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001876:	4053      	eors	r3, r2
 8001878:	64fb      	str	r3, [r7, #76]	; 0x4c
	state[5]	= t7 & state[7];
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	331c      	adds	r3, #28
 800187e:	6819      	ldr	r1, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3314      	adds	r3, #20
 8001884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001886:	400a      	ands	r2, r1
 8001888:	601a      	str	r2, [r3, #0]
	t14			= t4 ^ state[5];
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3314      	adds	r3, #20
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001892:	4053      	eors	r3, r2
 8001894:	617b      	str	r3, [r7, #20]
	state[6]	= t1 ^ t14;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3318      	adds	r3, #24
 800189a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	404a      	eors	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
	state[6] 	^= t5; 
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3318      	adds	r3, #24
 80018a6:	6819      	ldr	r1, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3318      	adds	r3, #24
 80018ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018ae:	404a      	eors	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
	state[6] 	^= state[4];
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3318      	adds	r3, #24
 80018b6:	6819      	ldr	r1, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3310      	adds	r3, #16
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3318      	adds	r3, #24
 80018c2:	404a      	eors	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]
	state[2]	= t17 ^ state[6];
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3318      	adds	r3, #24
 80018ca:	6819      	ldr	r1, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3308      	adds	r3, #8
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	404a      	eors	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
	state[5]	= t15 ^ state[2];
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3308      	adds	r3, #8
 80018da:	6819      	ldr	r1, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3314      	adds	r3, #20
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	404a      	eors	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]
	state[2] 	^= t6;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3308      	adds	r3, #8
 80018ea:	6819      	ldr	r1, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3308      	adds	r3, #8
 80018f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018f2:	404a      	eors	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3308      	adds	r3, #8
 80018fa:	6819      	ldr	r1, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3308      	adds	r3, #8
 8001900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001902:	404a      	eors	r2, r1
 8001904:	601a      	str	r2, [r3, #0]
	//state[2] 	^= 0xffffffff;
	t14 		^= t11;
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	4053      	eors	r3, r2
 800190c:	617b      	str	r3, [r7, #20]
	t0 			^= t14;
 800190e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	4053      	eors	r3, r2
 8001914:	64fb      	str	r3, [r7, #76]	; 0x4c
	state[6] 	^= t0;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3318      	adds	r3, #24
 800191a:	6819      	ldr	r1, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3318      	adds	r3, #24
 8001920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001922:	404a      	eors	r2, r1
 8001924:	601a      	str	r2, [r3, #0]
	//state[6] 	^= 0xffffffff;
	state[7]	= t1 ^ t0;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	331c      	adds	r3, #28
 800192a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800192c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800192e:	404a      	eors	r2, r1
 8001930:	601a      	str	r2, [r3, #0]
	//state[7] 	^= 0xffffffff;
	state[4]	= t14 ^ state[3]; 
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	330c      	adds	r3, #12
 8001936:	6819      	ldr	r1, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3310      	adds	r3, #16
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	404a      	eors	r2, r1
 8001940:	601a      	str	r2, [r3, #0]
}
 8001942:	bf00      	nop
 8001944:	3754      	adds	r7, #84	; 0x54
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <double_shiftrows>:

/******************************************************************************
* Applies the ShiftRows transformation twice (i.e. SR^2) on the internal state.
******************************************************************************/
static void double_shiftrows(uint32_t* state) {
 800194e:	b480      	push	{r7}
 8001950:	b085      	sub	sp, #20
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
    uint32_t tmp;
	for(int i = 0; i < 8; i++)
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	e02a      	b.n	80019b2 <double_shiftrows+0x64>
        SWAPMOVE(state[i], state[i], 0x0f000f00, 4);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	440b      	add	r3, r1
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	4053      	eors	r3, r2
 8001974:	f003 230f 	and.w	r3, r3, #251662080	; 0xf000f00
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	6819      	ldr	r1, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	404a      	eors	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	6819      	ldr	r1, [r3, #0]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	011a      	lsls	r2, r3, #4
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	4403      	add	r3, r0
 80019a8:	404a      	eors	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3301      	adds	r3, #1
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b07      	cmp	r3, #7
 80019b6:	ddd1      	ble.n	800195c <double_shiftrows+0xe>
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <mixcolumns_0>:
/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 0.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 0.
******************************************************************************/
static void mixcolumns_0(uint32_t* state) {
 80019c6:	b480      	push	{r7}
 80019c8:	b089      	sub	sp, #36	; 0x24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4;
	t3 = ROR(BYTE_ROR_6(state[0]),8);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	099b      	lsrs	r3, r3, #6
 80019d4:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 80019e2:	4313      	orrs	r3, r2
 80019e4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80019e8:	61fb      	str	r3, [r7, #28]
	t0 = state[0] ^ t3;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	4053      	eors	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
	t1 = ROR(BYTE_ROR_6(state[7]),8);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	331c      	adds	r3, #28
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	099b      	lsrs	r3, r3, #6
 80019fc:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	331c      	adds	r3, #28
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001a12:	617b      	str	r3, [r7, #20]
	t2 = state[7] ^ t1;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	331c      	adds	r3, #28
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4053      	eors	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
	state[7] = ROR(BYTE_ROR_4(t2),16) ^ t1 ^ t0;
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001a30:	4313      	orrs	r3, r2
 8001a32:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	ea82 0103 	eor.w	r1, r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	331c      	adds	r3, #28
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	404a      	eors	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[6]),8);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3318      	adds	r3, #24
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3318      	adds	r3, #24
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001a64:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[6];
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3318      	adds	r3, #24
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	4053      	eors	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
	state[6] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	405a      	eors	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	ea82 0103 	eor.w	r1, r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3318      	adds	r3, #24
 8001a98:	404a      	eors	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[5]),8);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3314      	adds	r3, #20
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	099b      	lsrs	r3, r3, #6
 8001aa4:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3314      	adds	r3, #20
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001aba:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[5];
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3314      	adds	r3, #20
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	4053      	eors	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
	state[5] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	ea82 0103 	eor.w	r1, r2, r3
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3314      	adds	r3, #20
 8001aea:	404a      	eors	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[4]),8);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3310      	adds	r3, #16
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	099b      	lsrs	r3, r3, #6
 8001af6:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3310      	adds	r3, #16
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8001b06:	4313      	orrs	r3, r2
 8001b08:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001b0c:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[4];
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3310      	adds	r3, #16
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	4053      	eors	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
	state[4] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	405a      	eors	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	ea82 0103 	eor.w	r1, r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001b36:	4313      	orrs	r3, r2
 8001b38:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3310      	adds	r3, #16
 8001b40:	404a      	eors	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[3]),8);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	330c      	adds	r3, #12
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	099b      	lsrs	r3, r3, #6
 8001b4c:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	330c      	adds	r3, #12
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001b62:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[3];
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	330c      	adds	r3, #12
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4053      	eors	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
	state[3] = t4 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	405a      	eors	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	ea82 0103 	eor.w	r1, r2, r3
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	330c      	adds	r3, #12
 8001b96:	404a      	eors	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[2]),8);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3308      	adds	r3, #8
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	099b      	lsrs	r3, r3, #6
 8001ba2:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3308      	adds	r3, #8
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001bb8:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[2];
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3308      	adds	r3, #8
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	4053      	eors	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
	state[2] = t2 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	ea82 0103 	eor.w	r1, r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001bde:	4313      	orrs	r3, r2
 8001be0:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3308      	adds	r3, #8
 8001be8:	404a      	eors	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[1]),8);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3304      	adds	r3, #4
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	099b      	lsrs	r3, r3, #6
 8001bf4:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8001c04:	4313      	orrs	r3, r2
 8001c06:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001c0a:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[1];
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3304      	adds	r3, #4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4053      	eors	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
	state[1] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	ea82 0103 	eor.w	r1, r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001c30:	4313      	orrs	r3, r2
 8001c32:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	404a      	eors	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]
	state[0] = t2 ^ t3 ^ ROR(BYTE_ROR_4(t0),16);
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	405a      	eors	r2, r3
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	f003 310f 	and.w	r1, r3, #252645135	; 0xf0f0f0f
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001c54:	430b      	orrs	r3, r1
 8001c56:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001c5a:	405a      	eors	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	601a      	str	r2, [r3, #0]
}
 8001c60:	bf00      	nop
 8001c62:	3724      	adds	r7, #36	; 0x24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <mixcolumns_1>:

/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for round i s.t. (i%4) == 1.
******************************************************************************/
static void mixcolumns_1(uint32_t* state) {
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2;
	t0 = state[0] ^ ROR(BYTE_ROR_4(state[0]),8);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 310f 	and.w	r1, r3, #252645135	; 0xf0f0f0f
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001c92:	4053      	eors	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]
	t1 = state[7] ^ ROR(BYTE_ROR_4(state[7]),8);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	331c      	adds	r3, #28
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	331c      	adds	r3, #28
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	f003 310f 	and.w	r1, r3, #252645135	; 0xf0f0f0f
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	331c      	adds	r3, #28
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001cba:	4053      	eors	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
	t2 = state[6];
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	60fb      	str	r3, [r7, #12]
	state[6] = t1 ^ t0;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3318      	adds	r3, #24
 8001cc8:	6939      	ldr	r1, [r7, #16]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	404a      	eors	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
	state[7] ^= state[6] ^ ROR(t1,16);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	331c      	adds	r3, #28
 8001cd4:	6819      	ldr	r1, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3318      	adds	r3, #24
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001ce2:	405a      	eors	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	331c      	adds	r3, #28
 8001ce8:	404a      	eors	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	091b      	lsrs	r3, r3, #4
 8001cf0:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001d02:	613b      	str	r3, [r7, #16]
	state[6] ^= t1;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3318      	adds	r3, #24
 8001d08:	6819      	ldr	r1, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3318      	adds	r3, #24
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	404a      	eors	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4053      	eors	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
	state[6] ^= ROR(t1,16);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3318      	adds	r3, #24
 8001d20:	6819      	ldr	r1, [r3, #0]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3318      	adds	r3, #24
 8001d2c:	404a      	eors	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]
	t2 = state[5];
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	60fb      	str	r3, [r7, #12]
	state[5] = t1;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3314      	adds	r3, #20
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001d54:	613b      	str	r3, [r7, #16]
	state[5] ^= t1;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3314      	adds	r3, #20
 8001d5a:	6819      	ldr	r1, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3314      	adds	r3, #20
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	404a      	eors	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4053      	eors	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
	state[5] ^= ROR(t1,16);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3314      	adds	r3, #20
 8001d72:	6819      	ldr	r1, [r3, #0]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3314      	adds	r3, #20
 8001d7e:	404a      	eors	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]
	t2 = state[4];
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	60fb      	str	r3, [r7, #12]
	state[4] = t1 ^ t0;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3310      	adds	r3, #16
 8001d8c:	6939      	ldr	r1, [r7, #16]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	404a      	eors	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	091b      	lsrs	r3, r3, #4
 8001d98:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001da4:	4313      	orrs	r3, r2
 8001da6:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001daa:	613b      	str	r3, [r7, #16]
	state[4] ^= t1;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3310      	adds	r3, #16
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3310      	adds	r3, #16
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	404a      	eors	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4053      	eors	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
	state[4] ^= ROR(t1,16);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3310      	adds	r3, #16
 8001dc8:	6819      	ldr	r1, [r3, #0]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3310      	adds	r3, #16
 8001dd4:	404a      	eors	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]
	t2 = state[3];
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60fb      	str	r3, [r7, #12]
	state[3] = t1 ^ t0;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	330c      	adds	r3, #12
 8001de2:	6939      	ldr	r1, [r7, #16]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	404a      	eors	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	091b      	lsrs	r3, r3, #4
 8001dee:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001e00:	613b      	str	r3, [r7, #16]
	state[3] ^= t1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	330c      	adds	r3, #12
 8001e06:	6819      	ldr	r1, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	330c      	adds	r3, #12
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	404a      	eors	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4053      	eors	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
	state[3] ^= ROR(t1,16);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	330c      	adds	r3, #12
 8001e1e:	6819      	ldr	r1, [r3, #0]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	330c      	adds	r3, #12
 8001e2a:	404a      	eors	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]
	t2 = state[2];
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	60fb      	str	r3, [r7, #12]
	state[2] = t1;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3308      	adds	r3, #8
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001e52:	613b      	str	r3, [r7, #16]
	state[2] ^= t1;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3308      	adds	r3, #8
 8001e58:	6819      	ldr	r1, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3308      	adds	r3, #8
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	404a      	eors	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4053      	eors	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
	state[2] ^= ROR(t1,16);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3308      	adds	r3, #8
 8001e70:	6819      	ldr	r1, [r3, #0]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3308      	adds	r3, #8
 8001e7c:	404a      	eors	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]
	t2 = state[1];
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	60fb      	str	r3, [r7, #12]
	state[1] = t1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001ea4:	613b      	str	r3, [r7, #16]
	state[1] ^= t1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	6819      	ldr	r1, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	404a      	eors	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4053      	eors	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
	state[1] ^= ROR(t1,16);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	404a      	eors	r2, r1
 8001ed0:	601a      	str	r2, [r3, #0]
	t2 = state[0];
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
	state[0] = t1;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001ef4:	613b      	str	r3, [r7, #16]
	state[0] ^= t1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	405a      	eors	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4053      	eors	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
	state[0] ^= ROR(t1,16);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001f14:	405a      	eors	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	371c      	adds	r7, #28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <mixcolumns_2>:

/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for rounds i s.t. (i%4) == 2.
******************************************************************************/
static void mixcolumns_2(uint32_t* state) {
 8001f26:	b480      	push	{r7}
 8001f28:	b089      	sub	sp, #36	; 0x24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4;
	t3 = ROR(BYTE_ROR_2(state[0]),8);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	019b      	lsls	r3, r3, #6
 8001f3e:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8001f42:	4313      	orrs	r3, r2
 8001f44:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001f48:	61fb      	str	r3, [r7, #28]
	t0 = state[0] ^ t3;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	4053      	eors	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
	t1 = ROR(BYTE_ROR_2(state[7]),8);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	331c      	adds	r3, #28
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	331c      	adds	r3, #28
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	019b      	lsls	r3, r3, #6
 8001f68:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001f72:	617b      	str	r3, [r7, #20]
	t2 = state[7] ^ t1;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	331c      	adds	r3, #28
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4053      	eors	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
	state[7] = ROR(BYTE_ROR_4(t2),16) ^ t1 ^ t0;
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	091b      	lsrs	r3, r3, #4
 8001f84:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001f90:	4313      	orrs	r3, r2
 8001f92:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	ea82 0103 	eor.w	r1, r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	331c      	adds	r3, #28
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	404a      	eors	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[6]),8);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3318      	adds	r3, #24
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	089b      	lsrs	r3, r3, #2
 8001fae:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3318      	adds	r3, #24
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	019b      	lsls	r3, r3, #6
 8001fba:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001fc4:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[6];
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3318      	adds	r3, #24
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	4053      	eors	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
	state[6] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	405a      	eors	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	ea82 0103 	eor.w	r1, r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3318      	adds	r3, #24
 8001ff8:	404a      	eors	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[5]),8);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3314      	adds	r3, #20
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3314      	adds	r3, #20
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	019b      	lsls	r3, r3, #6
 8002010:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8002014:	4313      	orrs	r3, r2
 8002016:	ea4f 2333 	mov.w	r3, r3, ror #8
 800201a:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[5];
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3314      	adds	r3, #20
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4053      	eors	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
	state[5] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	ea82 0103 	eor.w	r1, r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002040:	4313      	orrs	r3, r2
 8002042:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3314      	adds	r3, #20
 800204a:	404a      	eors	r2, r1
 800204c:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[4]),8);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3310      	adds	r3, #16
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3310      	adds	r3, #16
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	019b      	lsls	r3, r3, #6
 8002062:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8002066:	4313      	orrs	r3, r2
 8002068:	ea4f 2333 	mov.w	r3, r3, ror #8
 800206c:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[4];
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3310      	adds	r3, #16
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	4053      	eors	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
	state[4] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	405a      	eors	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	ea82 0103 	eor.w	r1, r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002096:	4313      	orrs	r3, r2
 8002098:	ea4f 4233 	mov.w	r2, r3, ror #16
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3310      	adds	r3, #16
 80020a0:	404a      	eors	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[3]),8);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	330c      	adds	r3, #12
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	330c      	adds	r3, #12
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	019b      	lsls	r3, r3, #6
 80020b8:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 80020bc:	4313      	orrs	r3, r2
 80020be:	ea4f 2333 	mov.w	r3, r3, ror #8
 80020c2:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[3];
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	330c      	adds	r3, #12
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4053      	eors	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
	state[3] = t4 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	405a      	eors	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	ea82 0103 	eor.w	r1, r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80020ec:	4313      	orrs	r3, r2
 80020ee:	ea4f 4233 	mov.w	r2, r3, ror #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	330c      	adds	r3, #12
 80020f6:	404a      	eors	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[2]),8);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3308      	adds	r3, #8
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3308      	adds	r3, #8
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	019b      	lsls	r3, r3, #6
 800210e:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8002112:	4313      	orrs	r3, r2
 8002114:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002118:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[2];
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3308      	adds	r3, #8
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	4053      	eors	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
	state[2] = t2 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	ea82 0103 	eor.w	r1, r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800213e:	4313      	orrs	r3, r2
 8002140:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3308      	adds	r3, #8
 8002148:	404a      	eors	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[1]),8);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3304      	adds	r3, #4
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3304      	adds	r3, #4
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	019b      	lsls	r3, r3, #6
 8002160:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8002164:	4313      	orrs	r3, r2
 8002166:	ea4f 2333 	mov.w	r3, r3, ror #8
 800216a:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[1];
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4053      	eors	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
	state[1] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	ea82 0103 	eor.w	r1, r2, r3
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	091b      	lsrs	r3, r3, #4
 8002184:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002190:	4313      	orrs	r3, r2
 8002192:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3304      	adds	r3, #4
 800219a:	404a      	eors	r2, r1
 800219c:	601a      	str	r2, [r3, #0]
	state[0] = t2 ^ t3 ^ ROR(BYTE_ROR_4(t0),16);
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	405a      	eors	r2, r3
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	f003 310f 	and.w	r1, r3, #252645135	; 0xf0f0f0f
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80021b4:	430b      	orrs	r3, r1
 80021b6:	ea4f 4333 	mov.w	r3, r3, ror #16
 80021ba:	405a      	eors	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	601a      	str	r2, [r3, #0]
}
 80021c0:	bf00      	nop
 80021c2:	3724      	adds	r7, #36	; 0x24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <mixcolumns_3>:
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 3.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 1.
* Based on Käsper-Schwabe, similar to https://github.com/Ko-/aes-armcortexm.
******************************************************************************/
static void mixcolumns_3(uint32_t* state) {
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2;
	t0 = state[7] ^ ROR(state[7],8);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	331c      	adds	r3, #28
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	331c      	adds	r3, #28
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	ea4f 2333 	mov.w	r3, r3, ror #8
 80021e4:	4053      	eors	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
	t2 = state[0] ^ ROR(state[0],8);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	ea4f 2333 	mov.w	r3, r3, ror #8
 80021f4:	4053      	eors	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
	state[7] = t2 ^ ROR(state[7], 8) ^ ROR(t0, 16);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	331c      	adds	r3, #28
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	ea82 0103 	eor.w	r1, r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	ea4f 4233 	mov.w	r2, r3, ror #16
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	331c      	adds	r3, #28
 8002212:	404a      	eors	r2, r1
 8002214:	601a      	str	r2, [r3, #0]
	t1 = state[6] ^ ROR(state[6],8);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3318      	adds	r3, #24
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3318      	adds	r3, #24
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002226:	4053      	eors	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
	state[6] = t0 ^ t2 ^ ROR(state[6], 8) ^ ROR(t1,16);
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	405a      	eors	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3318      	adds	r3, #24
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	ea4f 2333 	mov.w	r3, r3, ror #8
 800223a:	ea82 0103 	eor.w	r1, r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3318      	adds	r3, #24
 8002248:	404a      	eors	r2, r1
 800224a:	601a      	str	r2, [r3, #0]
	t0 = state[5] ^ ROR(state[5],8);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3314      	adds	r3, #20
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3314      	adds	r3, #20
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	ea4f 2333 	mov.w	r3, r3, ror #8
 800225c:	4053      	eors	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
	state[5] = t1 ^ ROR(state[5],8) ^ ROR(t0,16);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3314      	adds	r3, #20
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	ea4f 2233 	mov.w	r2, r3, ror #8
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	ea82 0103 	eor.w	r1, r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3314      	adds	r3, #20
 800227a:	404a      	eors	r2, r1
 800227c:	601a      	str	r2, [r3, #0]
	t1 = state[4] ^ ROR(state[4],8);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3310      	adds	r3, #16
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3310      	adds	r3, #16
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800228e:	4053      	eors	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
	state[4] = t0 ^ t2 ^ ROR(state[4],8) ^ ROR(t1,16);
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	405a      	eors	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3310      	adds	r3, #16
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	ea4f 2333 	mov.w	r3, r3, ror #8
 80022a2:	ea82 0103 	eor.w	r1, r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	ea4f 4233 	mov.w	r2, r3, ror #16
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3310      	adds	r3, #16
 80022b0:	404a      	eors	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
	t0 = state[3] ^ ROR(state[3],8);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	330c      	adds	r3, #12
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	330c      	adds	r3, #12
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	ea4f 2333 	mov.w	r3, r3, ror #8
 80022c4:	4053      	eors	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
	state[3] = t1 ^ t2 ^ ROR(state[3],8) ^ ROR(t0,16);
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	405a      	eors	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	330c      	adds	r3, #12
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80022d8:	ea82 0103 	eor.w	r1, r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	ea4f 4233 	mov.w	r2, r3, ror #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	330c      	adds	r3, #12
 80022e6:	404a      	eors	r2, r1
 80022e8:	601a      	str	r2, [r3, #0]
	t1 = state[2] ^ ROR(state[2],8);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3308      	adds	r3, #8
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3308      	adds	r3, #8
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80022fa:	4053      	eors	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
	state[2] = t0 ^ ROR(state[2],8) ^ ROR(t1,16);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3308      	adds	r3, #8
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	ea82 0103 	eor.w	r1, r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3308      	adds	r3, #8
 8002318:	404a      	eors	r2, r1
 800231a:	601a      	str	r2, [r3, #0]
	t0 = state[1] ^ ROR(state[1],8);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3304      	adds	r3, #4
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3304      	adds	r3, #4
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	ea4f 2333 	mov.w	r3, r3, ror #8
 800232c:	4053      	eors	r3, r2
 800232e:	617b      	str	r3, [r7, #20]
	state[1] = t1 ^ ROR(state[1],8) ^ ROR(t0,16);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3304      	adds	r3, #4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	ea4f 2233 	mov.w	r2, r3, ror #8
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	ea82 0103 	eor.w	r1, r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3304      	adds	r3, #4
 800234a:	404a      	eors	r2, r1
 800234c:	601a      	str	r2, [r3, #0]
	state[0] = t0 ^ ROR(state[0],8) ^ ROR(t2,16);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	405a      	eors	r2, r3
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002360:	405a      	eors	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	601a      	str	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	371c      	adds	r7, #28
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 8002372:	b580      	push	{r7, lr}
 8002374:	b08c      	sub	sp, #48	; 0x30
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 8002380:	f107 0310 	add.w	r3, r7, #16
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fb98 	bl	8000abe <packing>
	ark(state, rkeys_ffs); 				// key whitening
 800238e:	f107 0310 	add.w	r3, r7, #16
 8002392:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe ffd6 	bl	8001346 <ark>
	sbox(state); 						// 1st round
 800239a:	f107 0310 	add.w	r3, r7, #16
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fff6 	bl	8001390 <sbox>
	mixcolumns_0(state); 				// 1st round
 80023a4:	f107 0310 	add.w	r3, r7, #16
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fb0c 	bl	80019c6 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 80023ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b0:	f103 0220 	add.w	r2, r3, #32
 80023b4:	f107 0310 	add.w	r3, r7, #16
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe ffc3 	bl	8001346 <ark>
	sbox(state); 						// 2nd round
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe ffe3 	bl	8001390 <sbox>
	mixcolumns_1(state); 				// 2nd round
 80023ca:	f107 0310 	add.w	r3, r7, #16
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fc4c 	bl	8001c6c <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 80023d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80023da:	f107 0310 	add.w	r3, r7, #16
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe ffb0 	bl	8001346 <ark>
	sbox(state); 						// 3rd round
 80023e6:	f107 0310 	add.w	r3, r7, #16
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe ffd0 	bl	8001390 <sbox>
	mixcolumns_2(state); 				// 3rd round
 80023f0:	f107 0310 	add.w	r3, r7, #16
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fd96 	bl	8001f26 <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002400:	f107 0310 	add.w	r3, r7, #16
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe ff9d 	bl	8001346 <ark>
	sbox(state); 						// 4th round
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe ffbd 	bl	8001390 <sbox>
	mixcolumns_3(state); 				// 4th round
 8002416:	f107 0310 	add.w	r3, r7, #16
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fed6 	bl	80021cc <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 8002420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002422:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002426:	f107 0310 	add.w	r3, r7, #16
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe ff8a 	bl	8001346 <ark>
	sbox(state); 						// 5th round
 8002432:	f107 0310 	add.w	r3, r7, #16
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe ffaa 	bl	8001390 <sbox>
	mixcolumns_0(state); 				// 5th round
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fac0 	bl	80019c6 <mixcolumns_0>
	ark(state, rkeys_ffs + 40); 		// 5th round
 8002446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002448:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800244c:	f107 0310 	add.w	r3, r7, #16
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe ff77 	bl	8001346 <ark>
	sbox(state);						// 6th round
 8002458:	f107 0310 	add.w	r3, r7, #16
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe ff97 	bl	8001390 <sbox>
	mixcolumns_1(state); 				// 6th round
 8002462:	f107 0310 	add.w	r3, r7, #16
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fc00 	bl	8001c6c <mixcolumns_1>
	ark(state, rkeys_ffs + 48); 		// 6th round
 800246c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246e:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 8002472:	f107 0310 	add.w	r3, r7, #16
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe ff64 	bl	8001346 <ark>
	sbox(state); 						// 7th round
 800247e:	f107 0310 	add.w	r3, r7, #16
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe ff84 	bl	8001390 <sbox>
	mixcolumns_2(state); 				// 7th round
 8002488:	f107 0310 	add.w	r3, r7, #16
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fd4a 	bl	8001f26 <mixcolumns_2>
	ark(state, rkeys_ffs + 56); 		// 7th round
 8002492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002494:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe ff51 	bl	8001346 <ark>
	sbox(state); 						// 8th round
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe ff71 	bl	8001390 <sbox>
	mixcolumns_3(state); 				// 8th round
 80024ae:	f107 0310 	add.w	r3, r7, #16
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fe8a 	bl	80021cc <mixcolumns_3>
	ark(state, rkeys_ffs + 64); 		// 8th round
 80024b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ba:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80024be:	f107 0310 	add.w	r3, r7, #16
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe ff3e 	bl	8001346 <ark>
	sbox(state); 						// 9th round
 80024ca:	f107 0310 	add.w	r3, r7, #16
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe ff5e 	bl	8001390 <sbox>
	mixcolumns_0(state); 				// 9th round
 80024d4:	f107 0310 	add.w	r3, r7, #16
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fa74 	bl	80019c6 <mixcolumns_0>
	ark(state, rkeys_ffs + 72); 		// 9th round
 80024de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e0:	f503 7290 	add.w	r2, r3, #288	; 0x120
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe ff2b 	bl	8001346 <ark>
	sbox(state); 						// 10th round
 80024f0:	f107 0310 	add.w	r3, r7, #16
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe ff4b 	bl	8001390 <sbox>
	double_shiftrows(state); 			// 10th round (resynchronization)
 80024fa:	f107 0310 	add.w	r3, r7, #16
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fa25 	bl	800194e <double_shiftrows>
	ark(state, rkeys_ffs + 80); 		// 10th round
 8002504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002506:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800250a:	f107 0310 	add.w	r3, r7, #16
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe ff18 	bl	8001346 <ark>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 8002516:	f107 0310 	add.w	r3, r7, #16
 800251a:	461a      	mov	r2, r3
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f7fe fccc 	bl	8000ebc <unpacking>
}
 8002524:	bf00      	nop
 8002526:	3730      	adds	r7, #48	; 0x30
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <two_Rounds_aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void two_Rounds_aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b08c      	sub	sp, #48	; 0x30
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 800253a:	f107 0310 	add.w	r3, r7, #16
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fabb 	bl	8000abe <packing>
	ark(state, rkeys_ffs); 				// key whitening
 8002548:	f107 0310 	add.w	r3, r7, #16
 800254c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fef9 	bl	8001346 <ark>
	sbox(state); 						// 1st round
 8002554:	f107 0310 	add.w	r3, r7, #16
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe ff19 	bl	8001390 <sbox>
	mixcolumns_0(state); 				// 1st round
 800255e:	f107 0310 	add.w	r3, r7, #16
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fa2f 	bl	80019c6 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 8002568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256a:	f103 0220 	add.w	r2, r3, #32
 800256e:	f107 0310 	add.w	r3, r7, #16
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fee6 	bl	8001346 <ark>
	sbox(state); 						// 2nd round
 800257a:	f107 0310 	add.w	r3, r7, #16
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe ff06 	bl	8001390 <sbox>
	mixcolumns_1(state); 				// 2nd round
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff fb6f 	bl	8001c6c <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 800258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002590:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002594:	f107 0310 	add.w	r3, r7, #16
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe fed3 	bl	8001346 <ark>
	double_shiftrows(state); 			// 10th round (resynchronization)
 80025a0:	f107 0310 	add.w	r3, r7, #16
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff f9d2 	bl	800194e <double_shiftrows>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 80025aa:	f107 0310 	add.w	r3, r7, #16
 80025ae:	461a      	mov	r2, r3
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f7fe fc82 	bl	8000ebc <unpacking>
}
 80025b8:	bf00      	nop
 80025ba:	3730      	adds	r7, #48	; 0x30
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <four_Rounds_aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void four_Rounds_aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	; 0x30
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 80025ce:	f107 0310 	add.w	r3, r7, #16
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fa71 	bl	8000abe <packing>
	ark(state, rkeys_ffs); 				// key whitening
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe feaf 	bl	8001346 <ark>
	sbox(state); 						// 1st round
 80025e8:	f107 0310 	add.w	r3, r7, #16
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe fecf 	bl	8001390 <sbox>
	mixcolumns_0(state); 				// 1st round
 80025f2:	f107 0310 	add.w	r3, r7, #16
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff f9e5 	bl	80019c6 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 80025fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fe:	f103 0220 	add.w	r2, r3, #32
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f7fe fe9c 	bl	8001346 <ark>
	sbox(state); 						// 2nd round
 800260e:	f107 0310 	add.w	r3, r7, #16
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe febc 	bl	8001390 <sbox>
	mixcolumns_1(state); 				// 2nd round
 8002618:	f107 0310 	add.w	r3, r7, #16
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fb25 	bl	8001c6c <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 8002622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002624:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fe89 	bl	8001346 <ark>
	sbox(state); 						// 3rd round
 8002634:	f107 0310 	add.w	r3, r7, #16
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fea9 	bl	8001390 <sbox>
	mixcolumns_2(state); 				// 3rd round
 800263e:	f107 0310 	add.w	r3, r7, #16
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fc6f 	bl	8001f26 <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 8002648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800264e:	f107 0310 	add.w	r3, r7, #16
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fe76 	bl	8001346 <ark>
	sbox(state); 						// 4th round
 800265a:	f107 0310 	add.w	r3, r7, #16
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fe96 	bl	8001390 <sbox>
	mixcolumns_3(state); 				// 4th round
 8002664:	f107 0310 	add.w	r3, r7, #16
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fdaf 	bl	80021cc <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002674:	f107 0310 	add.w	r3, r7, #16
 8002678:	4611      	mov	r1, r2
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fe63 	bl	8001346 <ark>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 8002680:	f107 0310 	add.w	r3, r7, #16
 8002684:	461a      	mov	r2, r3
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f7fe fc17 	bl	8000ebc <unpacking>
}
 800268e:	bf00      	nop
 8002690:	3730      	adds	r7, #48	; 0x30
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <six_Rounds_aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void six_Rounds_aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 8002696:	b580      	push	{r7, lr}
 8002698:	b08c      	sub	sp, #48	; 0x30
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 80026a4:	f107 0310 	add.w	r3, r7, #16
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fa06 	bl	8000abe <packing>
	ark(state, rkeys_ffs); 				// key whitening
 80026b2:	f107 0310 	add.w	r3, r7, #16
 80026b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fe44 	bl	8001346 <ark>
	sbox(state); 						// 1st round
 80026be:	f107 0310 	add.w	r3, r7, #16
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fe64 	bl	8001390 <sbox>
	mixcolumns_0(state); 				// 1st round
 80026c8:	f107 0310 	add.w	r3, r7, #16
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff f97a 	bl	80019c6 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d4:	f103 0220 	add.w	r2, r3, #32
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe fe31 	bl	8001346 <ark>
	sbox(state); 						// 2nd round
 80026e4:	f107 0310 	add.w	r3, r7, #16
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fe51 	bl	8001390 <sbox>
	mixcolumns_1(state); 				// 2nd round
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff faba 	bl	8001c6c <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 80026f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fa:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fe1e 	bl	8001346 <ark>
	sbox(state); 						// 3rd round
 800270a:	f107 0310 	add.w	r3, r7, #16
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fe3e 	bl	8001390 <sbox>
	mixcolumns_2(state); 				// 3rd round
 8002714:	f107 0310 	add.w	r3, r7, #16
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fc04 	bl	8001f26 <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 800271e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002720:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002724:	f107 0310 	add.w	r3, r7, #16
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe fe0b 	bl	8001346 <ark>
	sbox(state); 						// 4th round
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe fe2b 	bl	8001390 <sbox>
	mixcolumns_3(state); 				// 4th round
 800273a:	f107 0310 	add.w	r3, r7, #16
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fd44 	bl	80021cc <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 8002744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002746:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800274a:	f107 0310 	add.w	r3, r7, #16
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fdf8 	bl	8001346 <ark>
	sbox(state); 						// 5th round
 8002756:	f107 0310 	add.w	r3, r7, #16
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe fe18 	bl	8001390 <sbox>
	mixcolumns_0(state); 				// 5th round
 8002760:	f107 0310 	add.w	r3, r7, #16
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff f92e 	bl	80019c6 <mixcolumns_0>
	ark(state, rkeys_ffs + 40); 		// 5th round
 800276a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8002770:	f107 0310 	add.w	r3, r7, #16
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fde5 	bl	8001346 <ark>
	sbox(state);						// 6th round
 800277c:	f107 0310 	add.w	r3, r7, #16
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe fe05 	bl	8001390 <sbox>
	mixcolumns_1(state); 				// 6th round
 8002786:	f107 0310 	add.w	r3, r7, #16
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fa6e 	bl	8001c6c <mixcolumns_1>
	ark(state, rkeys_ffs + 48); 		// 6th round
 8002790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002792:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 8002796:	f107 0310 	add.w	r3, r7, #16
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe fdd2 	bl	8001346 <ark>
	double_shiftrows(state); 			// 10th round (resynchronization)
 80027a2:	f107 0310 	add.w	r3, r7, #16
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff f8d1 	bl	800194e <double_shiftrows>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 80027ac:	f107 0310 	add.w	r3, r7, #16
 80027b0:	461a      	mov	r2, r3
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f7fe fb81 	bl	8000ebc <unpacking>
}
 80027ba:	bf00      	nop
 80027bc:	3730      	adds	r7, #48	; 0x30
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <eigth_Rounds_aes128_encrypt_ffs>:


void eigth_Rounds_aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b08c      	sub	sp, #48	; 0x30
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 80027d0:	f107 0310 	add.w	r3, r7, #16
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe f970 	bl	8000abe <packing>
	ark(state, rkeys_ffs); 				// key whitening
 80027de:	f107 0310 	add.w	r3, r7, #16
 80027e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe fdae 	bl	8001346 <ark>
	sbox(state); 						// 1st round
 80027ea:	f107 0310 	add.w	r3, r7, #16
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fdce 	bl	8001390 <sbox>
	mixcolumns_0(state); 				// 1st round
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff f8e4 	bl	80019c6 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 80027fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002800:	f103 0220 	add.w	r2, r3, #32
 8002804:	f107 0310 	add.w	r3, r7, #16
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fd9b 	bl	8001346 <ark>
	sbox(state); 						// 2nd round
 8002810:	f107 0310 	add.w	r3, r7, #16
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe fdbb 	bl	8001390 <sbox>
	mixcolumns_1(state); 				// 2nd round
 800281a:	f107 0310 	add.w	r3, r7, #16
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fa24 	bl	8001c6c <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 8002824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002826:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800282a:	f107 0310 	add.w	r3, r7, #16
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe fd88 	bl	8001346 <ark>
	sbox(state); 						// 3rd round
 8002836:	f107 0310 	add.w	r3, r7, #16
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fda8 	bl	8001390 <sbox>
	mixcolumns_2(state); 				// 3rd round
 8002840:	f107 0310 	add.w	r3, r7, #16
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fb6e 	bl	8001f26 <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002850:	f107 0310 	add.w	r3, r7, #16
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fd75 	bl	8001346 <ark>
	sbox(state); 						// 4th round
 800285c:	f107 0310 	add.w	r3, r7, #16
 8002860:	4618      	mov	r0, r3
 8002862:	f7fe fd95 	bl	8001390 <sbox>
	mixcolumns_3(state); 				// 4th round
 8002866:	f107 0310 	add.w	r3, r7, #16
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fcae 	bl	80021cc <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 8002870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002872:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002876:	f107 0310 	add.w	r3, r7, #16
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe fd62 	bl	8001346 <ark>
	sbox(state); 						// 5th round
 8002882:	f107 0310 	add.w	r3, r7, #16
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fd82 	bl	8001390 <sbox>
	mixcolumns_0(state); 				// 5th round
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff f898 	bl	80019c6 <mixcolumns_0>
	ark(state, rkeys_ffs + 40); 		// 5th round
 8002896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002898:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800289c:	f107 0310 	add.w	r3, r7, #16
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fd4f 	bl	8001346 <ark>
	sbox(state);						// 6th round
 80028a8:	f107 0310 	add.w	r3, r7, #16
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fe fd6f 	bl	8001390 <sbox>
	mixcolumns_1(state); 				// 6th round
 80028b2:	f107 0310 	add.w	r3, r7, #16
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff f9d8 	bl	8001c6c <mixcolumns_1>
	ark(state, rkeys_ffs + 48); 		// 6th round
 80028bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028be:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 80028c2:	f107 0310 	add.w	r3, r7, #16
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe fd3c 	bl	8001346 <ark>
	sbox(state); 						// 7th round
 80028ce:	f107 0310 	add.w	r3, r7, #16
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fd5c 	bl	8001390 <sbox>
	mixcolumns_2(state); 				// 7th round
 80028d8:	f107 0310 	add.w	r3, r7, #16
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fb22 	bl	8001f26 <mixcolumns_2>
	ark(state, rkeys_ffs + 56); 		// 7th round
 80028e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e4:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 80028e8:	f107 0310 	add.w	r3, r7, #16
 80028ec:	4611      	mov	r1, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fd29 	bl	8001346 <ark>
	sbox(state); 						// 8th round
 80028f4:	f107 0310 	add.w	r3, r7, #16
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe fd49 	bl	8001390 <sbox>
	mixcolumns_3(state); 				// 8th round
 80028fe:	f107 0310 	add.w	r3, r7, #16
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fc62 	bl	80021cc <mixcolumns_3>
	ark(state, rkeys_ffs + 64); 		// 8th round
 8002908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800290e:	f107 0310 	add.w	r3, r7, #16
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fd16 	bl	8001346 <ark>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 800291a:	f107 0310 	add.w	r3, r7, #16
 800291e:	461a      	mov	r2, r3
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f7fe faca 	bl	8000ebc <unpacking>
 8002928:	bf00      	nop
 800292a:	3730      	adds	r7, #48	; 0x30
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <inv_shiftrows_1>:


/******************************************************************************
* Applies ShiftRows^(-1) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_1(uint32_t* rkey) {
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++) {
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	e052      	b.n	80029e4 <inv_shiftrows_1+0xb4>
		SWAPMOVE(rkey[i], rkey[i], 0x0c0f0300, 4);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	440b      	add	r3, r1
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	405a      	eors	r2, r3
 8002956:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <inv_shiftrows_1+0xc8>)
 8002958:	4013      	ands	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	4413      	add	r3, r2
 8002964:	6819      	ldr	r1, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	404a      	eors	r2, r1
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	6819      	ldr	r1, [r3, #0]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	011a      	lsls	r2, r3, #4
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4403      	add	r3, r0
 800298a:	404a      	eors	r2, r1
 800298c:	601a      	str	r2, [r3, #0]
		SWAPMOVE(rkey[i], rkey[i], 0x33003300, 2);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	440b      	add	r3, r1
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	4053      	eors	r3, r2
 80029a6:	f003 2333 	and.w	r3, r3, #855651072	; 0x33003300
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	4413      	add	r3, r2
 80029b4:	6819      	ldr	r1, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	404a      	eors	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	4413      	add	r3, r2
 80029cc:	6819      	ldr	r1, [r3, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	009a      	lsls	r2, r3, #2
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4403      	add	r3, r0
 80029da:	404a      	eors	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3301      	adds	r3, #1
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b07      	cmp	r3, #7
 80029e8:	dda9      	ble.n	800293e <inv_shiftrows_1+0xe>
	}
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	0c0f0300 	.word	0x0c0f0300

080029fc <inv_shiftrows_2>:
/******************************************************************************
* Applies ShiftRows^(-2) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_2(uint32_t* rkey) {
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++)
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e02a      	b.n	8002a60 <inv_shiftrows_2+0x64>
		SWAPMOVE(rkey[i], rkey[i], 0x0f000f00, 4);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	440b      	add	r3, r1
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	4053      	eors	r3, r2
 8002a22:	f003 230f 	and.w	r3, r3, #251662080	; 0xf000f00
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	404a      	eors	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	6819      	ldr	r1, [r3, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	011a      	lsls	r2, r3, #4
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4403      	add	r3, r0
 8002a56:	404a      	eors	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b07      	cmp	r3, #7
 8002a64:	ddd1      	ble.n	8002a0a <inv_shiftrows_2+0xe>
}
 8002a66:	bf00      	nop
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <inv_shiftrows_3>:

/******************************************************************************
* Applies ShiftRows^(-3) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_3(uint32_t* rkey) {
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++) {
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e052      	b.n	8002b28 <inv_shiftrows_3+0xb4>
		SWAPMOVE(rkey[i], rkey[i], 0x030f0c00, 4);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	440b      	add	r3, r1
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	405a      	eors	r2, r3
 8002a9a:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <inv_shiftrows_3+0xc8>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	6819      	ldr	r1, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	404a      	eors	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	6819      	ldr	r1, [r3, #0]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	011a      	lsls	r2, r3, #4
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4403      	add	r3, r0
 8002ace:	404a      	eors	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]
		SWAPMOVE(rkey[i], rkey[i], 0x33003300, 2);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	440b      	add	r3, r1
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	4053      	eors	r3, r2
 8002aea:	f003 2333 	and.w	r3, r3, #855651072	; 0x33003300
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	4413      	add	r3, r2
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	404a      	eors	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4413      	add	r3, r2
 8002b10:	6819      	ldr	r1, [r3, #0]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	009a      	lsls	r2, r3, #2
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4403      	add	r3, r0
 8002b1e:	404a      	eors	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	3301      	adds	r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b07      	cmp	r3, #7
 8002b2c:	dda9      	ble.n	8002a82 <inv_shiftrows_3+0xe>
	}
}
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	030f0c00 	.word	0x030f0c00

08002b40 <xor_columns>:
* involved in the XOR computation (should be 8 and 16 for AES-128 and AES-256,
* respectively).
* The idx_ror parameter refers to the rotation value. When a Rotword is applied
* the value should be 2, 26 otherwise.
******************************************************************************/
static void xor_columns(uint32_t* rkeys, int idx_xor, int idx_ror) {
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
	rkeys[1] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3304      	adds	r3, #4
 8002b56:	43d2      	mvns	r2, r2
 8002b58:	601a      	str	r2, [r3, #0]
	rkeys[2] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3308      	adds	r3, #8
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3308      	adds	r3, #8
 8002b64:	43d2      	mvns	r2, r2
 8002b66:	601a      	str	r2, [r3, #0]
	rkeys[6] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	3318      	adds	r3, #24
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3318      	adds	r3, #24
 8002b72:	43d2      	mvns	r2, r2
 8002b74:	601a      	str	r2, [r3, #0]
	rkeys[7] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	331c      	adds	r3, #28
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	331c      	adds	r3, #28
 8002b80:	43d2      	mvns	r2, r2
 8002b82:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	e06a      	b.n	8002c60 <xor_columns+0x120>
		rkeys[i] = (rkeys[i-idx_xor] ^ ROR(rkeys[i], idx_ror))  & 0xc0c0c0c0;
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4413      	add	r3, r2
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	68f9      	ldr	r1, [r7, #12]
 8002b9e:	440b      	add	r3, r1
 8002ba0:	6819      	ldr	r1, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	fa61 f303 	ror.w	r3, r1, r3
 8002ba8:	405a      	eors	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	68f9      	ldr	r1, [r7, #12]
 8002bb0:	440b      	add	r3, r1
 8002bb2:	f002 32c0 	and.w	r2, r2, #3233857728	; 0xc0c0c0c0
 8002bb6:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x30303030);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	6819      	ldr	r1, [r3, #0]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	4403      	add	r3, r0
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	4053      	eors	r3, r2
 8002bde:	f003 3230 	and.w	r2, r3, #808464432	; 0x30303030
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	4403      	add	r3, r0
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x0c0c0c0c);
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	6819      	ldr	r1, [r3, #0]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4413      	add	r3, r2
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	4403      	add	r3, r0
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	089b      	lsrs	r3, r3, #2
 8002c12:	4053      	eors	r3, r2
 8002c14:	f003 320c 	and.w	r2, r3, #202116108	; 0xc0c0c0c
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	4403      	add	r3, r0
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x03030303);
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	6819      	ldr	r1, [r3, #0]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4413      	add	r3, r2
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	4403      	add	r3, r0
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	089b      	lsrs	r3, r3, #2
 8002c48:	4053      	eors	r3, r2
 8002c4a:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	4403      	add	r3, r0
 8002c56:	430a      	orrs	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2b07      	cmp	r3, #7
 8002c64:	dd91      	ble.n	8002b8a <xor_columns+0x4a>
	}
}
 8002c66:	bf00      	nop
 8002c68:	bf00      	nop
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <aes128_keyschedule_ffs>:
* Fully bitsliced AES-128 key schedule to match the fully-fixsliced (ffs)
* representation. Note that it is possible to pass two different keys as input
* parameters if one wants to encrypt 2 blocks with two different keys.
******************************************************************************/
void aes128_keyschedule_ffs(uint32_t* rkeys, const unsigned char* key0,
						const unsigned char* key1) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
	packing(rkeys, key0, key1); 	// packs the keys into the bitsliced state
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	68b9      	ldr	r1, [r7, #8]
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f7fd ff1a 	bl	8000abe <packing>
	memcpy(rkeys+8, rkeys, 32);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3320      	adds	r3, #32
 8002c8e:	2220      	movs	r2, #32
 8002c90:	68f9      	ldr	r1, [r7, #12]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f003 fdaa 	bl	80067ec <memcpy>
	sbox(rkeys+8);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3320      	adds	r3, #32
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe fb77 	bl	8001390 <sbox>
	rkeys[15] ^= 0x00000300; 		// 1st rconst
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	333c      	adds	r3, #60	; 0x3c
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	333c      	adds	r3, #60	; 0x3c
 8002cac:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002cb0:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+8, 8, 2); 	// Rotword and XOR between the columns
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3320      	adds	r3, #32
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	2108      	movs	r1, #8
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ff40 	bl	8002b40 <xor_columns>
	memcpy(rkeys+16, rkeys+8, 32);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3320      	adds	r3, #32
 8002cca:	2220      	movs	r2, #32
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f003 fd8d 	bl	80067ec <memcpy>
	sbox(rkeys+16);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	3340      	adds	r3, #64	; 0x40
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe fb5a 	bl	8001390 <sbox>
	rkeys[22] ^= 0x00000300;		// 2nd rconst
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3358      	adds	r3, #88	; 0x58
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	3358      	adds	r3, #88	; 0x58
 8002ce6:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002cea:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+16, 8, 2); 	// Rotword and XOR between the columns
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3340      	adds	r3, #64	; 0x40
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	2108      	movs	r1, #8
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff ff23 	bl	8002b40 <xor_columns>
	inv_shiftrows_1(rkeys+8); 		// to match fixslicing
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3320      	adds	r3, #32
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fe16 	bl	8002930 <inv_shiftrows_1>
	memcpy(rkeys+24, rkeys+16, 32);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3340      	adds	r3, #64	; 0x40
 8002d0e:	2220      	movs	r2, #32
 8002d10:	4619      	mov	r1, r3
 8002d12:	f003 fd6b 	bl	80067ec <memcpy>
	sbox(rkeys+24);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3360      	adds	r3, #96	; 0x60
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fb38 	bl	8001390 <sbox>
	rkeys[29] ^= 0x00000300;		// 3rd rconst
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3374      	adds	r3, #116	; 0x74
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3374      	adds	r3, #116	; 0x74
 8002d2a:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002d2e:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+24, 8, 2); 	// Rotword and XOR between the columns
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3360      	adds	r3, #96	; 0x60
 8002d34:	2202      	movs	r2, #2
 8002d36:	2108      	movs	r1, #8
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff01 	bl	8002b40 <xor_columns>
	inv_shiftrows_2(rkeys+16); 		// to match fixslicing
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3340      	adds	r3, #64	; 0x40
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fe5a 	bl	80029fc <inv_shiftrows_2>
	memcpy(rkeys+32, rkeys+24, 32);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3360      	adds	r3, #96	; 0x60
 8002d52:	2220      	movs	r2, #32
 8002d54:	4619      	mov	r1, r3
 8002d56:	f003 fd49 	bl	80067ec <memcpy>
	sbox(rkeys+32);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3380      	adds	r3, #128	; 0x80
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fb16 	bl	8001390 <sbox>
	rkeys[36] ^= 0x00000300; 		// 4th rconst
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3390      	adds	r3, #144	; 0x90
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3390      	adds	r3, #144	; 0x90
 8002d6e:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002d72:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+32, 8, 2); 	// Rotword and XOR between the columns
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3380      	adds	r3, #128	; 0x80
 8002d78:	2202      	movs	r2, #2
 8002d7a:	2108      	movs	r1, #8
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fedf 	bl	8002b40 <xor_columns>
	inv_shiftrows_3(rkeys+24); 		// to match fixslicing
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	3360      	adds	r3, #96	; 0x60
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fe74 	bl	8002a74 <inv_shiftrows_3>
	memcpy(rkeys+40, rkeys+32, 32);	
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	3380      	adds	r3, #128	; 0x80
 8002d96:	2220      	movs	r2, #32
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f003 fd27 	bl	80067ec <memcpy>
	sbox(rkeys+40);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	33a0      	adds	r3, #160	; 0xa0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe faf4 	bl	8001390 <sbox>
	rkeys[43] ^= 0x00000300; 		// 5th rconst
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	33ac      	adds	r3, #172	; 0xac
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	33ac      	adds	r3, #172	; 0xac
 8002db2:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002db6:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+40, 8, 2); 	// Rotword and XOR between the columns
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	33a0      	adds	r3, #160	; 0xa0
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	2108      	movs	r1, #8
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff febd 	bl	8002b40 <xor_columns>
	memcpy(rkeys+48, rkeys+40, 32);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	33a0      	adds	r3, #160	; 0xa0
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f003 fd0a 	bl	80067ec <memcpy>
	sbox(rkeys+48);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	33c0      	adds	r3, #192	; 0xc0
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe fad7 	bl	8001390 <sbox>
	rkeys[50] ^= 0x00000300;		// 6th rconst
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	33c8      	adds	r3, #200	; 0xc8
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	33c8      	adds	r3, #200	; 0xc8
 8002dec:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002df0:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+48, 8, 2); 	// Rotword and XOR between the columns
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	33c0      	adds	r3, #192	; 0xc0
 8002df6:	2202      	movs	r2, #2
 8002df8:	2108      	movs	r1, #8
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fea0 	bl	8002b40 <xor_columns>
	inv_shiftrows_1(rkeys+40); 		// to match fixslicing
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	33a0      	adds	r3, #160	; 0xa0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fd93 	bl	8002930 <inv_shiftrows_1>
	memcpy(rkeys+56, rkeys+48, 32);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	33c0      	adds	r3, #192	; 0xc0
 8002e14:	2220      	movs	r2, #32
 8002e16:	4619      	mov	r1, r3
 8002e18:	f003 fce8 	bl	80067ec <memcpy>
	sbox(rkeys+56);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	33e0      	adds	r3, #224	; 0xe0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe fab5 	bl	8001390 <sbox>
	rkeys[57] ^= 0x00000300;		// 7th rconst
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	33e4      	adds	r3, #228	; 0xe4
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	33e4      	adds	r3, #228	; 0xe4
 8002e30:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002e34:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+56, 8, 2); 	// Rotword and XOR between the columns
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	33e0      	adds	r3, #224	; 0xe0
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	2108      	movs	r1, #8
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fe7e 	bl	8002b40 <xor_columns>
	inv_shiftrows_2(rkeys+48); 		// to match fixslicing
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	33c0      	adds	r3, #192	; 0xc0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fdd7 	bl	80029fc <inv_shiftrows_2>
	memcpy(rkeys+64, rkeys+56, 32);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	33e0      	adds	r3, #224	; 0xe0
 8002e58:	2220      	movs	r2, #32
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f003 fcc6 	bl	80067ec <memcpy>
	sbox(rkeys+64);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fa92 	bl	8001390 <sbox>
	rkeys[64] ^= 0x00000300;		// 8th rconst
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e7a:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002e7e:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+64, 8, 2); 	// Rotword and XOR between the columns
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e86:	2202      	movs	r2, #2
 8002e88:	2108      	movs	r1, #8
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fe58 	bl	8002b40 <xor_columns>
	inv_shiftrows_3(rkeys+56); 		// to match fixslicing
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	33e0      	adds	r3, #224	; 0xe0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fded 	bl	8002a74 <inv_shiftrows_3>
	memcpy(rkeys+72, rkeys+64, 32);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f003 fc9f 	bl	80067ec <memcpy>
	sbox(rkeys+72);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe fa6b 	bl	8001390 <sbox>
	rkeys[79] ^= 0x00000300; 		// 9th rconst
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002ec8:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002ecc:	601a      	str	r2, [r3, #0]
	rkeys[78] ^= 0x00000300; 		// 9th rconst
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002edc:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002ee0:	601a      	str	r2, [r3, #0]
	rkeys[76] ^= 0x00000300; 		// 9th rconst
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002ef0:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002ef4:	601a      	str	r2, [r3, #0]
	rkeys[75] ^= 0x00000300; 		// 9th rconst
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002f04:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002f08:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys + 72, 8, 2); 	// Rotword and XOR between the columns
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002f10:	2202      	movs	r2, #2
 8002f12:	2108      	movs	r1, #8
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fe13 	bl	8002b40 <xor_columns>
	memcpy(rkeys+80, rkeys+72, 32);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002f26:	2220      	movs	r2, #32
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f003 fc5f 	bl	80067ec <memcpy>
	sbox(rkeys+80);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fa2b 	bl	8001390 <sbox>
	rkeys[86] ^= 0x00000300; 		// 10th rconst
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002f48:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002f4c:	601a      	str	r2, [r3, #0]
	rkeys[85] ^= 0x00000300; 		// 10th rconst
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8002f5c:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002f60:	601a      	str	r2, [r3, #0]
	rkeys[83] ^= 0x00000300;		// 10th rconst
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8002f70:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002f74:	601a      	str	r2, [r3, #0]
	rkeys[82] ^= 0x00000300; 		// 10th rconst
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8002f84:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002f88:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+80, 8, 2); 	// Rotword and XOR between the columns
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002f90:	2202      	movs	r2, #2
 8002f92:	2108      	movs	r1, #8
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fdd3 	bl	8002b40 <xor_columns>
	inv_shiftrows_1(rkeys+72);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fcc5 	bl	8002930 <inv_shiftrows_1>
	for(int i = 1; i < 11; i++) {
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	e036      	b.n	800301a <aes128_keyschedule_ffs+0x3a6>
		rkeys[i*8 + 1] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	015b      	lsls	r3, r3, #5
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	015b      	lsls	r3, r3, #5
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	68f9      	ldr	r1, [r7, #12]
 8002fc0:	440b      	add	r3, r1
 8002fc2:	43d2      	mvns	r2, r2
 8002fc4:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 2] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	015b      	lsls	r3, r3, #5
 8002fca:	3308      	adds	r3, #8
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	015b      	lsls	r3, r3, #5
 8002fd6:	3308      	adds	r3, #8
 8002fd8:	68f9      	ldr	r1, [r7, #12]
 8002fda:	440b      	add	r3, r1
 8002fdc:	43d2      	mvns	r2, r2
 8002fde:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 6] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	015b      	lsls	r3, r3, #5
 8002fe4:	3318      	adds	r3, #24
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4413      	add	r3, r2
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	015b      	lsls	r3, r3, #5
 8002ff0:	3318      	adds	r3, #24
 8002ff2:	68f9      	ldr	r1, [r7, #12]
 8002ff4:	440b      	add	r3, r1
 8002ff6:	43d2      	mvns	r2, r2
 8002ff8:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 7] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	015b      	lsls	r3, r3, #5
 8002ffe:	331c      	adds	r3, #28
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	015b      	lsls	r3, r3, #5
 800300a:	331c      	adds	r3, #28
 800300c:	68f9      	ldr	r1, [r7, #12]
 800300e:	440b      	add	r3, r1
 8003010:	43d2      	mvns	r2, r2
 8003012:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 11; i++) {
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	3301      	adds	r3, #1
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b0a      	cmp	r3, #10
 800301e:	ddc5      	ble.n	8002fac <aes128_keyschedule_ffs+0x338>
	// 	printf("%x \n", rkeys[i]);
	// }
	


}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003032:	f000 fc04 	bl	800383e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003036:	f000 f82b 	bl	8003090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800303a:	f000 f93d 	bl	80032b8 <MX_GPIO_Init>
  MX_ETH_Init();
 800303e:	f000 f88f 	bl	8003160 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8003042:	f000 f8db 	bl	80031fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003046:	f000 f909 	bl	800325c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */


  for (size_t i = 0; i < plaintext_size; i++)
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	e009      	b.n	8003064 <main+0x38>
  {
	  plaintext[i] =i;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	b2d9      	uxtb	r1, r3
 8003054:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <main+0x54>)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	460a      	mov	r2, r1
 800305c:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < plaintext_size; i++)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3301      	adds	r3, #1
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b3f      	cmp	r3, #63	; 0x3f
 8003068:	d9f2      	bls.n	8003050 <main+0x24>
  }



  ELIMAC( plaintext,  plaintext_size,  key1,  key2, 4,  tag);
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <main+0x58>)
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	2304      	movs	r3, #4
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <main+0x5c>)
 8003074:	4a05      	ldr	r2, [pc, #20]	; (800308c <main+0x60>)
 8003076:	2140      	movs	r1, #64	; 0x40
 8003078:	4801      	ldr	r0, [pc, #4]	; (8003080 <main+0x54>)
 800307a:	f7fd fa43 	bl	8000504 <ELIMAC>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800307e:	e7fe      	b.n	800307e <main+0x52>
 8003080:	20000810 	.word	0x20000810
 8003084:	20000800 	.word	0x20000800
 8003088:	20000010 	.word	0x20000010
 800308c:	20000000 	.word	0x20000000

08003090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b094      	sub	sp, #80	; 0x50
 8003094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003096:	f107 0320 	add.w	r3, r7, #32
 800309a:	2230      	movs	r2, #48	; 0x30
 800309c:	2100      	movs	r1, #0
 800309e:	4618      	mov	r0, r3
 80030a0:	f003 fb78 	bl	8006794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030a4:	f107 030c 	add.w	r3, r7, #12
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80030b4:	f001 fb5e 	bl	8004774 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030b8:	4b27      	ldr	r3, [pc, #156]	; (8003158 <SystemClock_Config+0xc8>)
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	4a26      	ldr	r2, [pc, #152]	; (8003158 <SystemClock_Config+0xc8>)
 80030be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c2:	6413      	str	r3, [r2, #64]	; 0x40
 80030c4:	4b24      	ldr	r3, [pc, #144]	; (8003158 <SystemClock_Config+0xc8>)
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80030d0:	4b22      	ldr	r3, [pc, #136]	; (800315c <SystemClock_Config+0xcc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80030d8:	4a20      	ldr	r2, [pc, #128]	; (800315c <SystemClock_Config+0xcc>)
 80030da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	4b1e      	ldr	r3, [pc, #120]	; (800315c <SystemClock_Config+0xcc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030ec:	2301      	movs	r3, #1
 80030ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80030f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030f6:	2302      	movs	r3, #2
 80030f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003100:	2304      	movs	r3, #4
 8003102:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003104:	2348      	movs	r3, #72	; 0x48
 8003106:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003108:	2302      	movs	r3, #2
 800310a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800310c:	2303      	movs	r3, #3
 800310e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003110:	f107 0320 	add.w	r3, r7, #32
 8003114:	4618      	mov	r0, r3
 8003116:	f001 fb3d 	bl	8004794 <HAL_RCC_OscConfig>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003120:	f000 f96c 	bl	80033fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003124:	230f      	movs	r3, #15
 8003126:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003128:	2302      	movs	r3, #2
 800312a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003134:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800313a:	f107 030c 	add.w	r3, r7, #12
 800313e:	2102      	movs	r1, #2
 8003140:	4618      	mov	r0, r3
 8003142:	f001 fdcb 	bl	8004cdc <HAL_RCC_ClockConfig>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800314c:	f000 f956 	bl	80033fc <Error_Handler>
  }
}
 8003150:	bf00      	nop
 8003152:	3750      	adds	r7, #80	; 0x50
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40023800 	.word	0x40023800
 800315c:	40007000 	.word	0x40007000

08003160 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8003164:	4b1f      	ldr	r3, [pc, #124]	; (80031e4 <MX_ETH_Init+0x84>)
 8003166:	4a20      	ldr	r2, [pc, #128]	; (80031e8 <MX_ETH_Init+0x88>)
 8003168:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800316a:	4b20      	ldr	r3, [pc, #128]	; (80031ec <MX_ETH_Init+0x8c>)
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003170:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <MX_ETH_Init+0x8c>)
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8003176:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <MX_ETH_Init+0x8c>)
 8003178:	22e1      	movs	r2, #225	; 0xe1
 800317a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <MX_ETH_Init+0x8c>)
 800317e:	2200      	movs	r2, #0
 8003180:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8003182:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <MX_ETH_Init+0x8c>)
 8003184:	2200      	movs	r2, #0
 8003186:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8003188:	4b18      	ldr	r3, [pc, #96]	; (80031ec <MX_ETH_Init+0x8c>)
 800318a:	2200      	movs	r2, #0
 800318c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <MX_ETH_Init+0x84>)
 8003190:	4a16      	ldr	r2, [pc, #88]	; (80031ec <MX_ETH_Init+0x8c>)
 8003192:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003194:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <MX_ETH_Init+0x84>)
 8003196:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800319a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <MX_ETH_Init+0x84>)
 800319e:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <MX_ETH_Init+0x90>)
 80031a0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <MX_ETH_Init+0x84>)
 80031a4:	4a13      	ldr	r2, [pc, #76]	; (80031f4 <MX_ETH_Init+0x94>)
 80031a6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <MX_ETH_Init+0x84>)
 80031aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80031ae:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80031b0:	480c      	ldr	r0, [pc, #48]	; (80031e4 <MX_ETH_Init+0x84>)
 80031b2:	f000 fcab 	bl	8003b0c <HAL_ETH_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80031bc:	f000 f91e 	bl	80033fc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80031c0:	2238      	movs	r2, #56	; 0x38
 80031c2:	2100      	movs	r1, #0
 80031c4:	480c      	ldr	r0, [pc, #48]	; (80031f8 <MX_ETH_Init+0x98>)
 80031c6:	f003 fae5 	bl	8006794 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80031ca:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <MX_ETH_Init+0x98>)
 80031cc:	2221      	movs	r2, #33	; 0x21
 80031ce:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80031d0:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <MX_ETH_Init+0x98>)
 80031d2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80031d6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80031d8:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <MX_ETH_Init+0x98>)
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	200001c0 	.word	0x200001c0
 80031e8:	40028000 	.word	0x40028000
 80031ec:	20000850 	.word	0x20000850
 80031f0:	200000cc 	.word	0x200000cc
 80031f4:	2000002c 	.word	0x2000002c
 80031f8:	20000188 	.word	0x20000188

080031fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003200:	4b14      	ldr	r3, [pc, #80]	; (8003254 <MX_USART3_UART_Init+0x58>)
 8003202:	4a15      	ldr	r2, [pc, #84]	; (8003258 <MX_USART3_UART_Init+0x5c>)
 8003204:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <MX_USART3_UART_Init+0x58>)
 8003208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800320c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <MX_USART3_UART_Init+0x58>)
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003214:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <MX_USART3_UART_Init+0x58>)
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <MX_USART3_UART_Init+0x58>)
 800321c:	2200      	movs	r2, #0
 800321e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003220:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <MX_USART3_UART_Init+0x58>)
 8003222:	220c      	movs	r2, #12
 8003224:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003226:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <MX_USART3_UART_Init+0x58>)
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <MX_USART3_UART_Init+0x58>)
 800322e:	2200      	movs	r2, #0
 8003230:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <MX_USART3_UART_Init+0x58>)
 8003234:	2200      	movs	r2, #0
 8003236:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <MX_USART3_UART_Init+0x58>)
 800323a:	2200      	movs	r2, #0
 800323c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800323e:	4805      	ldr	r0, [pc, #20]	; (8003254 <MX_USART3_UART_Init+0x58>)
 8003240:	f002 fb62 	bl	8005908 <HAL_UART_Init>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800324a:	f000 f8d7 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000270 	.word	0x20000270
 8003258:	40004800 	.word	0x40004800

0800325c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003260:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003262:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003266:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003268:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800326a:	2206      	movs	r2, #6
 800326c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800326e:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003270:	2202      	movs	r2, #2
 8003272:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003274:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003276:	2200      	movs	r2, #0
 8003278:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800327a:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800327c:	2202      	movs	r2, #2
 800327e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003282:	2201      	movs	r2, #1
 8003284:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003286:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003288:	2200      	movs	r2, #0
 800328a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800328c:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800328e:	2200      	movs	r2, #0
 8003290:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003292:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003294:	2201      	movs	r2, #1
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800329a:	2200      	movs	r2, #0
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800329e:	4805      	ldr	r0, [pc, #20]	; (80032b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80032a0:	f001 f91f 	bl	80044e2 <HAL_PCD_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80032aa:	f000 f8a7 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200002f8 	.word	0x200002f8

080032b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08c      	sub	sp, #48	; 0x30
 80032bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032be:	f107 031c 	add.w	r3, r7, #28
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	605a      	str	r2, [r3, #4]
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	60da      	str	r2, [r3, #12]
 80032cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ce:	4b47      	ldr	r3, [pc, #284]	; (80033ec <MX_GPIO_Init+0x134>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a46      	ldr	r2, [pc, #280]	; (80033ec <MX_GPIO_Init+0x134>)
 80032d4:	f043 0304 	orr.w	r3, r3, #4
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b44      	ldr	r3, [pc, #272]	; (80033ec <MX_GPIO_Init+0x134>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	61bb      	str	r3, [r7, #24]
 80032e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032e6:	4b41      	ldr	r3, [pc, #260]	; (80033ec <MX_GPIO_Init+0x134>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4a40      	ldr	r2, [pc, #256]	; (80033ec <MX_GPIO_Init+0x134>)
 80032ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f0:	6313      	str	r3, [r2, #48]	; 0x30
 80032f2:	4b3e      	ldr	r3, [pc, #248]	; (80033ec <MX_GPIO_Init+0x134>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fe:	4b3b      	ldr	r3, [pc, #236]	; (80033ec <MX_GPIO_Init+0x134>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	4a3a      	ldr	r2, [pc, #232]	; (80033ec <MX_GPIO_Init+0x134>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6313      	str	r3, [r2, #48]	; 0x30
 800330a:	4b38      	ldr	r3, [pc, #224]	; (80033ec <MX_GPIO_Init+0x134>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003316:	4b35      	ldr	r3, [pc, #212]	; (80033ec <MX_GPIO_Init+0x134>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	4a34      	ldr	r2, [pc, #208]	; (80033ec <MX_GPIO_Init+0x134>)
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	6313      	str	r3, [r2, #48]	; 0x30
 8003322:	4b32      	ldr	r3, [pc, #200]	; (80033ec <MX_GPIO_Init+0x134>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800332e:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <MX_GPIO_Init+0x134>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	4a2e      	ldr	r2, [pc, #184]	; (80033ec <MX_GPIO_Init+0x134>)
 8003334:	f043 0308 	orr.w	r3, r3, #8
 8003338:	6313      	str	r3, [r2, #48]	; 0x30
 800333a:	4b2c      	ldr	r3, [pc, #176]	; (80033ec <MX_GPIO_Init+0x134>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003346:	4b29      	ldr	r3, [pc, #164]	; (80033ec <MX_GPIO_Init+0x134>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	4a28      	ldr	r2, [pc, #160]	; (80033ec <MX_GPIO_Init+0x134>)
 800334c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003350:	6313      	str	r3, [r2, #48]	; 0x30
 8003352:	4b26      	ldr	r3, [pc, #152]	; (80033ec <MX_GPIO_Init+0x134>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800335e:	2200      	movs	r2, #0
 8003360:	f244 0181 	movw	r1, #16513	; 0x4081
 8003364:	4822      	ldr	r0, [pc, #136]	; (80033f0 <MX_GPIO_Init+0x138>)
 8003366:	f001 f8a3 	bl	80044b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800336a:	2200      	movs	r2, #0
 800336c:	2140      	movs	r1, #64	; 0x40
 800336e:	4821      	ldr	r0, [pc, #132]	; (80033f4 <MX_GPIO_Init+0x13c>)
 8003370:	f001 f89e 	bl	80044b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800337a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800337e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003384:	f107 031c 	add.w	r3, r7, #28
 8003388:	4619      	mov	r1, r3
 800338a:	481b      	ldr	r0, [pc, #108]	; (80033f8 <MX_GPIO_Init+0x140>)
 800338c:	f000 fee4 	bl	8004158 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003390:	f244 0381 	movw	r3, #16513	; 0x4081
 8003394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003396:	2301      	movs	r3, #1
 8003398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339e:	2300      	movs	r3, #0
 80033a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a2:	f107 031c 	add.w	r3, r7, #28
 80033a6:	4619      	mov	r1, r3
 80033a8:	4811      	ldr	r0, [pc, #68]	; (80033f0 <MX_GPIO_Init+0x138>)
 80033aa:	f000 fed5 	bl	8004158 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80033ae:	2340      	movs	r3, #64	; 0x40
 80033b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b2:	2301      	movs	r3, #1
 80033b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80033be:	f107 031c 	add.w	r3, r7, #28
 80033c2:	4619      	mov	r1, r3
 80033c4:	480b      	ldr	r0, [pc, #44]	; (80033f4 <MX_GPIO_Init+0x13c>)
 80033c6:	f000 fec7 	bl	8004158 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ce:	2300      	movs	r3, #0
 80033d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80033d6:	f107 031c 	add.w	r3, r7, #28
 80033da:	4619      	mov	r1, r3
 80033dc:	4805      	ldr	r0, [pc, #20]	; (80033f4 <MX_GPIO_Init+0x13c>)
 80033de:	f000 febb 	bl	8004158 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033e2:	bf00      	nop
 80033e4:	3730      	adds	r7, #48	; 0x30
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40020400 	.word	0x40020400
 80033f4:	40021800 	.word	0x40021800
 80033f8:	40020800 	.word	0x40020800

080033fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003400:	b672      	cpsid	i
}
 8003402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003404:	e7fe      	b.n	8003404 <Error_Handler+0x8>
	...

08003408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800340e:	4b0f      	ldr	r3, [pc, #60]	; (800344c <HAL_MspInit+0x44>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	4a0e      	ldr	r2, [pc, #56]	; (800344c <HAL_MspInit+0x44>)
 8003414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003418:	6413      	str	r3, [r2, #64]	; 0x40
 800341a:	4b0c      	ldr	r3, [pc, #48]	; (800344c <HAL_MspInit+0x44>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_MspInit+0x44>)
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	4a08      	ldr	r2, [pc, #32]	; (800344c <HAL_MspInit+0x44>)
 800342c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003430:	6453      	str	r3, [r2, #68]	; 0x44
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_MspInit+0x44>)
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800

08003450 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08e      	sub	sp, #56	; 0x38
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a4e      	ldr	r2, [pc, #312]	; (80035a8 <HAL_ETH_MspInit+0x158>)
 800346e:	4293      	cmp	r3, r2
 8003470:	f040 8096 	bne.w	80035a0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003474:	4b4d      	ldr	r3, [pc, #308]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	4a4c      	ldr	r2, [pc, #304]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 800347a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800347e:	6313      	str	r3, [r2, #48]	; 0x30
 8003480:	4b4a      	ldr	r3, [pc, #296]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003488:	623b      	str	r3, [r7, #32]
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	4b47      	ldr	r3, [pc, #284]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	4a46      	ldr	r2, [pc, #280]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 8003492:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003496:	6313      	str	r3, [r2, #48]	; 0x30
 8003498:	4b44      	ldr	r3, [pc, #272]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	4b41      	ldr	r3, [pc, #260]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	4a40      	ldr	r2, [pc, #256]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 80034aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034ae:	6313      	str	r3, [r2, #48]	; 0x30
 80034b0:	4b3e      	ldr	r3, [pc, #248]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034bc:	4b3b      	ldr	r3, [pc, #236]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	4a3a      	ldr	r2, [pc, #232]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 80034c2:	f043 0304 	orr.w	r3, r3, #4
 80034c6:	6313      	str	r3, [r2, #48]	; 0x30
 80034c8:	4b38      	ldr	r3, [pc, #224]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d4:	4b35      	ldr	r3, [pc, #212]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	4a34      	ldr	r2, [pc, #208]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6313      	str	r3, [r2, #48]	; 0x30
 80034e0:	4b32      	ldr	r3, [pc, #200]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ec:	4b2f      	ldr	r3, [pc, #188]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	4a2e      	ldr	r2, [pc, #184]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 80034f2:	f043 0302 	orr.w	r3, r3, #2
 80034f6:	6313      	str	r3, [r2, #48]	; 0x30
 80034f8:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003504:	4b29      	ldr	r3, [pc, #164]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	4a28      	ldr	r2, [pc, #160]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 800350a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800350e:	6313      	str	r3, [r2, #48]	; 0x30
 8003510:	4b26      	ldr	r3, [pc, #152]	; (80035ac <HAL_ETH_MspInit+0x15c>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800351c:	2332      	movs	r3, #50	; 0x32
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003520:	2302      	movs	r3, #2
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003528:	2303      	movs	r3, #3
 800352a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800352c:	230b      	movs	r3, #11
 800352e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003534:	4619      	mov	r1, r3
 8003536:	481e      	ldr	r0, [pc, #120]	; (80035b0 <HAL_ETH_MspInit+0x160>)
 8003538:	f000 fe0e 	bl	8004158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800353c:	2386      	movs	r3, #134	; 0x86
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003540:	2302      	movs	r3, #2
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003548:	2303      	movs	r3, #3
 800354a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800354c:	230b      	movs	r3, #11
 800354e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003554:	4619      	mov	r1, r3
 8003556:	4817      	ldr	r0, [pc, #92]	; (80035b4 <HAL_ETH_MspInit+0x164>)
 8003558:	f000 fdfe 	bl	8004158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800355c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003562:	2302      	movs	r3, #2
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	2300      	movs	r3, #0
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356a:	2303      	movs	r3, #3
 800356c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800356e:	230b      	movs	r3, #11
 8003570:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003576:	4619      	mov	r1, r3
 8003578:	480f      	ldr	r0, [pc, #60]	; (80035b8 <HAL_ETH_MspInit+0x168>)
 800357a:	f000 fded 	bl	8004158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800357e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358c:	2303      	movs	r3, #3
 800358e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003590:	230b      	movs	r3, #11
 8003592:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003598:	4619      	mov	r1, r3
 800359a:	4808      	ldr	r0, [pc, #32]	; (80035bc <HAL_ETH_MspInit+0x16c>)
 800359c:	f000 fddc 	bl	8004158 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80035a0:	bf00      	nop
 80035a2:	3738      	adds	r7, #56	; 0x38
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40028000 	.word	0x40028000
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40020800 	.word	0x40020800
 80035b4:	40020000 	.word	0x40020000
 80035b8:	40020400 	.word	0x40020400
 80035bc:	40021800 	.word	0x40021800

080035c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b0aa      	sub	sp, #168	; 0xa8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035d8:	f107 0310 	add.w	r3, r7, #16
 80035dc:	2284      	movs	r2, #132	; 0x84
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f003 f8d7 	bl	8006794 <memset>
  if(huart->Instance==USART3)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a22      	ldr	r2, [pc, #136]	; (8003674 <HAL_UART_MspInit+0xb4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d13c      	bne.n	800366a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80035f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80035f6:	2300      	movs	r3, #0
 80035f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035fa:	f107 0310 	add.w	r3, r7, #16
 80035fe:	4618      	mov	r0, r3
 8003600:	f001 fd92 	bl	8005128 <HAL_RCCEx_PeriphCLKConfig>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800360a:	f7ff fef7 	bl	80033fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800360e:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <HAL_UART_MspInit+0xb8>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	4a19      	ldr	r2, [pc, #100]	; (8003678 <HAL_UART_MspInit+0xb8>)
 8003614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003618:	6413      	str	r3, [r2, #64]	; 0x40
 800361a:	4b17      	ldr	r3, [pc, #92]	; (8003678 <HAL_UART_MspInit+0xb8>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003626:	4b14      	ldr	r3, [pc, #80]	; (8003678 <HAL_UART_MspInit+0xb8>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	4a13      	ldr	r2, [pc, #76]	; (8003678 <HAL_UART_MspInit+0xb8>)
 800362c:	f043 0308 	orr.w	r3, r3, #8
 8003630:	6313      	str	r3, [r2, #48]	; 0x30
 8003632:	4b11      	ldr	r3, [pc, #68]	; (8003678 <HAL_UART_MspInit+0xb8>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800363e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003642:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003646:	2302      	movs	r3, #2
 8003648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003652:	2303      	movs	r3, #3
 8003654:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003658:	2307      	movs	r3, #7
 800365a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800365e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003662:	4619      	mov	r1, r3
 8003664:	4805      	ldr	r0, [pc, #20]	; (800367c <HAL_UART_MspInit+0xbc>)
 8003666:	f000 fd77 	bl	8004158 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800366a:	bf00      	nop
 800366c:	37a8      	adds	r7, #168	; 0xa8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40004800 	.word	0x40004800
 8003678:	40023800 	.word	0x40023800
 800367c:	40020c00 	.word	0x40020c00

08003680 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b0ac      	sub	sp, #176	; 0xb0
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003688:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003698:	f107 0318 	add.w	r3, r7, #24
 800369c:	2284      	movs	r2, #132	; 0x84
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f003 f877 	bl	8006794 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036ae:	d159      	bne.n	8003764 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80036b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80036b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036bc:	f107 0318 	add.w	r3, r7, #24
 80036c0:	4618      	mov	r0, r3
 80036c2:	f001 fd31 	bl	8005128 <HAL_RCCEx_PeriphCLKConfig>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80036cc:	f7ff fe96 	bl	80033fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d0:	4b26      	ldr	r3, [pc, #152]	; (800376c <HAL_PCD_MspInit+0xec>)
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	4a25      	ldr	r2, [pc, #148]	; (800376c <HAL_PCD_MspInit+0xec>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6313      	str	r3, [r2, #48]	; 0x30
 80036dc:	4b23      	ldr	r3, [pc, #140]	; (800376c <HAL_PCD_MspInit+0xec>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80036e8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80036ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f0:	2302      	movs	r3, #2
 80036f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036fc:	2303      	movs	r3, #3
 80036fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003702:	230a      	movs	r3, #10
 8003704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003708:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800370c:	4619      	mov	r1, r3
 800370e:	4818      	ldr	r0, [pc, #96]	; (8003770 <HAL_PCD_MspInit+0xf0>)
 8003710:	f000 fd22 	bl	8004158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003718:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800371c:	2300      	movs	r3, #0
 800371e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003728:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800372c:	4619      	mov	r1, r3
 800372e:	4810      	ldr	r0, [pc, #64]	; (8003770 <HAL_PCD_MspInit+0xf0>)
 8003730:	f000 fd12 	bl	8004158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003734:	4b0d      	ldr	r3, [pc, #52]	; (800376c <HAL_PCD_MspInit+0xec>)
 8003736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003738:	4a0c      	ldr	r2, [pc, #48]	; (800376c <HAL_PCD_MspInit+0xec>)
 800373a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800373e:	6353      	str	r3, [r2, #52]	; 0x34
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <HAL_PCD_MspInit+0xec>)
 8003742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4b07      	ldr	r3, [pc, #28]	; (800376c <HAL_PCD_MspInit+0xec>)
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	4a06      	ldr	r2, [pc, #24]	; (800376c <HAL_PCD_MspInit+0xec>)
 8003752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003756:	6453      	str	r3, [r2, #68]	; 0x44
 8003758:	4b04      	ldr	r3, [pc, #16]	; (800376c <HAL_PCD_MspInit+0xec>)
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003764:	bf00      	nop
 8003766:	37b0      	adds	r7, #176	; 0xb0
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40023800 	.word	0x40023800
 8003770:	40020000 	.word	0x40020000

08003774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003778:	e7fe      	b.n	8003778 <NMI_Handler+0x4>

0800377a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800377a:	b480      	push	{r7}
 800377c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800377e:	e7fe      	b.n	800377e <HardFault_Handler+0x4>

08003780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003784:	e7fe      	b.n	8003784 <MemManage_Handler+0x4>

08003786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003786:	b480      	push	{r7}
 8003788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800378a:	e7fe      	b.n	800378a <BusFault_Handler+0x4>

0800378c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003790:	e7fe      	b.n	8003790 <UsageFault_Handler+0x4>

08003792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003792:	b480      	push	{r7}
 8003794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037c0:	f000 f87a 	bl	80038b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037c4:	bf00      	nop
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <SystemInit+0x20>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	4a05      	ldr	r2, [pc, #20]	; (80037e8 <SystemInit+0x20>)
 80037d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037dc:	bf00      	nop
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037f0:	480d      	ldr	r0, [pc, #52]	; (8003828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037f2:	490e      	ldr	r1, [pc, #56]	; (800382c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037f4:	4a0e      	ldr	r2, [pc, #56]	; (8003830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037f8:	e002      	b.n	8003800 <LoopCopyDataInit>

080037fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037fe:	3304      	adds	r3, #4

08003800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003804:	d3f9      	bcc.n	80037fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003806:	4a0b      	ldr	r2, [pc, #44]	; (8003834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003808:	4c0b      	ldr	r4, [pc, #44]	; (8003838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800380a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800380c:	e001      	b.n	8003812 <LoopFillZerobss>

0800380e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800380e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003810:	3204      	adds	r2, #4

08003812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003814:	d3fb      	bcc.n	800380e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003816:	f7ff ffd7 	bl	80037c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800381a:	f002 ffc3 	bl	80067a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800381e:	f7ff fc05 	bl	800302c <main>
  bx  lr    
 8003822:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003824:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800382c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8003830:	08006878 	.word	0x08006878
  ldr r2, =_sbss
 8003834:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8003838:	2000085c 	.word	0x2000085c

0800383c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800383c:	e7fe      	b.n	800383c <ADC_IRQHandler>

0800383e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003842:	2003      	movs	r0, #3
 8003844:	f000 f92e 	bl	8003aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003848:	2000      	movs	r0, #0
 800384a:	f000 f805 	bl	8003858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800384e:	f7ff fddb 	bl	8003408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003860:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_InitTick+0x54>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <HAL_InitTick+0x58>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	4619      	mov	r1, r3
 800386a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800386e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003872:	fbb2 f3f3 	udiv	r3, r2, r3
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f93b 	bl	8003af2 <HAL_SYSTICK_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e00e      	b.n	80038a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b0f      	cmp	r3, #15
 800388a:	d80a      	bhi.n	80038a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800388c:	2200      	movs	r2, #0
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003894:	f000 f911 	bl	8003aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003898:	4a06      	ldr	r2, [pc, #24]	; (80038b4 <HAL_InitTick+0x5c>)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e000      	b.n	80038a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20000020 	.word	0x20000020
 80038b0:	20000028 	.word	0x20000028
 80038b4:	20000024 	.word	0x20000024

080038b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_IncTick+0x20>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_IncTick+0x24>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4413      	add	r3, r2
 80038c8:	4a04      	ldr	r2, [pc, #16]	; (80038dc <HAL_IncTick+0x24>)
 80038ca:	6013      	str	r3, [r2, #0]
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000028 	.word	0x20000028
 80038dc:	20000858 	.word	0x20000858

080038e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return uwTick;
 80038e4:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <HAL_GetTick+0x14>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000858 	.word	0x20000858

080038f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003900:	f7ff ffee 	bl	80038e0 <HAL_GetTick>
 8003904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003910:	d005      	beq.n	800391e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <HAL_Delay+0x44>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4413      	add	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800391e:	bf00      	nop
 8003920:	f7ff ffde 	bl	80038e0 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	429a      	cmp	r2, r3
 800392e:	d8f7      	bhi.n	8003920 <HAL_Delay+0x28>
  {
  }
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000028 	.word	0x20000028

08003940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <__NVIC_SetPriorityGrouping+0x40>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800395c:	4013      	ands	r3, r2
 800395e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003968:	4b06      	ldr	r3, [pc, #24]	; (8003984 <__NVIC_SetPriorityGrouping+0x44>)
 800396a:	4313      	orrs	r3, r2
 800396c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800396e:	4a04      	ldr	r2, [pc, #16]	; (8003980 <__NVIC_SetPriorityGrouping+0x40>)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	60d3      	str	r3, [r2, #12]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	e000ed00 	.word	0xe000ed00
 8003984:	05fa0000 	.word	0x05fa0000

08003988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800398c:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <__NVIC_GetPriorityGrouping+0x18>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	f003 0307 	and.w	r3, r3, #7
}
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	e000ed00 	.word	0xe000ed00

080039a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	6039      	str	r1, [r7, #0]
 80039ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	db0a      	blt.n	80039ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	490c      	ldr	r1, [pc, #48]	; (80039f0 <__NVIC_SetPriority+0x4c>)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	440b      	add	r3, r1
 80039c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039cc:	e00a      	b.n	80039e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4908      	ldr	r1, [pc, #32]	; (80039f4 <__NVIC_SetPriority+0x50>)
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	3b04      	subs	r3, #4
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	440b      	add	r3, r1
 80039e2:	761a      	strb	r2, [r3, #24]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	e000e100 	.word	0xe000e100
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f1c3 0307 	rsb	r3, r3, #7
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	bf28      	it	cs
 8003a16:	2304      	movcs	r3, #4
 8003a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	2b06      	cmp	r3, #6
 8003a20:	d902      	bls.n	8003a28 <NVIC_EncodePriority+0x30>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3b03      	subs	r3, #3
 8003a26:	e000      	b.n	8003a2a <NVIC_EncodePriority+0x32>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43da      	mvns	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	43d9      	mvns	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a50:	4313      	orrs	r3, r2
         );
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3724      	adds	r7, #36	; 0x24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a70:	d301      	bcc.n	8003a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a72:	2301      	movs	r3, #1
 8003a74:	e00f      	b.n	8003a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a76:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <SysTick_Config+0x40>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a7e:	210f      	movs	r1, #15
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a84:	f7ff ff8e 	bl	80039a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <SysTick_Config+0x40>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a8e:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <SysTick_Config+0x40>)
 8003a90:	2207      	movs	r2, #7
 8003a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	e000e010 	.word	0xe000e010

08003aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ff47 	bl	8003940 <__NVIC_SetPriorityGrouping>
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003acc:	f7ff ff5c 	bl	8003988 <__NVIC_GetPriorityGrouping>
 8003ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	f7ff ff8e 	bl	80039f8 <NVIC_EncodePriority>
 8003adc:	4602      	mov	r2, r0
 8003ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff5d 	bl	80039a4 <__NVIC_SetPriority>
}
 8003aea:	bf00      	nop
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff ffb0 	bl	8003a60 <SysTick_Config>
 8003b00:	4603      	mov	r3, r0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e06a      	b.n	8003bf4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d106      	bne.n	8003b36 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2223      	movs	r2, #35	; 0x23
 8003b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff fc8d 	bl	8003450 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b36:	4b31      	ldr	r3, [pc, #196]	; (8003bfc <HAL_ETH_Init+0xf0>)
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	4a30      	ldr	r2, [pc, #192]	; (8003bfc <HAL_ETH_Init+0xf0>)
 8003b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b40:	6453      	str	r3, [r2, #68]	; 0x44
 8003b42:	4b2e      	ldr	r3, [pc, #184]	; (8003bfc <HAL_ETH_Init+0xf0>)
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003b4e:	4b2c      	ldr	r3, [pc, #176]	; (8003c00 <HAL_ETH_Init+0xf4>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4a2b      	ldr	r2, [pc, #172]	; (8003c00 <HAL_ETH_Init+0xf4>)
 8003b54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b58:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003b5a:	4b29      	ldr	r3, [pc, #164]	; (8003c00 <HAL_ETH_Init+0xf4>)
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	4927      	ldr	r1, [pc, #156]	; (8003c00 <HAL_ETH_Init+0xf4>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003b68:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <HAL_ETH_Init+0xf4>)
 8003b6a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b84:	f7ff feac 	bl	80038e0 <HAL_GetTick>
 8003b88:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003b8a:	e011      	b.n	8003bb0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003b8c:	f7ff fea8 	bl	80038e0 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b9a:	d909      	bls.n	8003bb0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2204      	movs	r2, #4
 8003ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	22e0      	movs	r2, #224	; 0xe0
 8003ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e021      	b.n	8003bf4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e4      	bne.n	8003b8c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f958 	bl	8003e78 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f9ff 	bl	8003fcc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fa55 	bl	800407e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	2100      	movs	r1, #0
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f9bd 	bl	8003f5c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2210      	movs	r2, #16
 8003bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40013800 	.word	0x40013800

08003c04 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4b51      	ldr	r3, [pc, #324]	; (8003d60 <ETH_SetMACConfig+0x15c>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	7c1b      	ldrb	r3, [r3, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d102      	bne.n	8003c2c <ETH_SetMACConfig+0x28>
 8003c26:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c2a:	e000      	b.n	8003c2e <ETH_SetMACConfig+0x2a>
 8003c2c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	7c5b      	ldrb	r3, [r3, #17]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <ETH_SetMACConfig+0x38>
 8003c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c3a:	e000      	b.n	8003c3e <ETH_SetMACConfig+0x3a>
 8003c3c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c3e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	7fdb      	ldrb	r3, [r3, #31]
 8003c4a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003c4c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003c52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	7f92      	ldrb	r2, [r2, #30]
 8003c58:	2a00      	cmp	r2, #0
 8003c5a:	d102      	bne.n	8003c62 <ETH_SetMACConfig+0x5e>
 8003c5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c60:	e000      	b.n	8003c64 <ETH_SetMACConfig+0x60>
 8003c62:	2200      	movs	r2, #0
                        macconf->Speed |
 8003c64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	7f1b      	ldrb	r3, [r3, #28]
 8003c6a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003c6c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003c72:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	791b      	ldrb	r3, [r3, #4]
 8003c78:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003c7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003c82:	2a00      	cmp	r2, #0
 8003c84:	d102      	bne.n	8003c8c <ETH_SetMACConfig+0x88>
 8003c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c8a:	e000      	b.n	8003c8e <ETH_SetMACConfig+0x8a>
 8003c8c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003c8e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	7bdb      	ldrb	r3, [r3, #15]
 8003c94:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003c96:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003c9c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ca4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	f7ff fe1a 	bl	80038f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003cda:	4013      	ands	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003cea:	2a00      	cmp	r2, #0
 8003cec:	d101      	bne.n	8003cf2 <ETH_SetMACConfig+0xee>
 8003cee:	2280      	movs	r2, #128	; 0x80
 8003cf0:	e000      	b.n	8003cf4 <ETH_SetMACConfig+0xf0>
 8003cf2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003cf4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003cfa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003d02:	2a01      	cmp	r2, #1
 8003d04:	d101      	bne.n	8003d0a <ETH_SetMACConfig+0x106>
 8003d06:	2208      	movs	r2, #8
 8003d08:	e000      	b.n	8003d0c <ETH_SetMACConfig+0x108>
 8003d0a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003d0c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003d14:	2a01      	cmp	r2, #1
 8003d16:	d101      	bne.n	8003d1c <ETH_SetMACConfig+0x118>
 8003d18:	2204      	movs	r2, #4
 8003d1a:	e000      	b.n	8003d1e <ETH_SetMACConfig+0x11a>
 8003d1c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003d26:	2a01      	cmp	r2, #1
 8003d28:	d101      	bne.n	8003d2e <ETH_SetMACConfig+0x12a>
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	e000      	b.n	8003d30 <ETH_SetMACConfig+0x12c>
 8003d2e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d30:	4313      	orrs	r3, r2
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d48:	2001      	movs	r0, #1
 8003d4a:	f7ff fdd5 	bl	80038f8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	619a      	str	r2, [r3, #24]
}
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	ff20810f 	.word	0xff20810f

08003d64 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4b3d      	ldr	r3, [pc, #244]	; (8003e74 <ETH_SetDMAConfig+0x110>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	7b1b      	ldrb	r3, [r3, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d102      	bne.n	8003d90 <ETH_SetDMAConfig+0x2c>
 8003d8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003d8e:	e000      	b.n	8003d92 <ETH_SetDMAConfig+0x2e>
 8003d90:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	7b5b      	ldrb	r3, [r3, #13]
 8003d96:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003d98:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	7f52      	ldrb	r2, [r2, #29]
 8003d9e:	2a00      	cmp	r2, #0
 8003da0:	d102      	bne.n	8003da8 <ETH_SetDMAConfig+0x44>
 8003da2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003da6:	e000      	b.n	8003daa <ETH_SetDMAConfig+0x46>
 8003da8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003daa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	7b9b      	ldrb	r3, [r3, #14]
 8003db0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003db2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003db8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	7f1b      	ldrb	r3, [r3, #28]
 8003dbe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003dc0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	7f9b      	ldrb	r3, [r3, #30]
 8003dc6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003dc8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003dce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dd6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de8:	461a      	mov	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	f7ff fd7c 	bl	80038f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e08:	461a      	mov	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	791b      	ldrb	r3, [r3, #4]
 8003e12:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e18:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003e1e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e24:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e2c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003e2e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e36:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e3c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6812      	ldr	r2, [r2, #0]
 8003e42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e4a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e58:	2001      	movs	r0, #1
 8003e5a:	f7ff fd4d 	bl	80038f8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e66:	461a      	mov	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6013      	str	r3, [r2, #0]
}
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	f8de3f23 	.word	0xf8de3f23

08003e78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b0a6      	sub	sp, #152	; 0x98
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003e90:	2300      	movs	r3, #0
 8003e92:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003eda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ede:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003ee0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003eec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff fe86 	bl	8003c04 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003efc:	2301      	movs	r3, #1
 8003efe:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003f06:	2301      	movs	r3, #1
 8003f08:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003f24:	2301      	movs	r3, #1
 8003f26:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f2c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f32:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f38:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003f48:	f107 0308 	add.w	r3, r7, #8
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff ff08 	bl	8003d64 <ETH_SetDMAConfig>
}
 8003f54:	bf00      	nop
 8003f56:	3798      	adds	r7, #152	; 0x98
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3305      	adds	r3, #5
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	3204      	adds	r2, #4
 8003f74:	7812      	ldrb	r2, [r2, #0]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <ETH_MACAddressConfig+0x68>)
 8003f7e:	4413      	add	r3, r2
 8003f80:	461a      	mov	r2, r3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3303      	adds	r3, #3
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	061a      	lsls	r2, r3, #24
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3302      	adds	r3, #2
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	7812      	ldrb	r2, [r2, #0]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <ETH_MACAddressConfig+0x6c>)
 8003fae:	4413      	add	r3, r2
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	6013      	str	r3, [r2, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40028040 	.word	0x40028040
 8003fc8:	40028044 	.word	0x40028044

08003fcc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e03e      	b.n	8004058 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68d9      	ldr	r1, [r3, #12]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	440b      	add	r3, r1
 8003fea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2200      	movs	r2, #0
 8004002:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	3206      	adds	r2, #6
 800400c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d80c      	bhi.n	800403c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68d9      	ldr	r1, [r3, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	440b      	add	r3, r1
 8004034:	461a      	mov	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	e004      	b.n	8004046 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	461a      	mov	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	3301      	adds	r3, #1
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b03      	cmp	r3, #3
 800405c:	d9bd      	bls.n	8003fda <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004070:	611a      	str	r2, [r3, #16]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e046      	b.n	800411a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6919      	ldr	r1, [r3, #16]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	440b      	add	r3, r1
 800409c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2200      	movs	r2, #0
 80040a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2200      	movs	r2, #0
 80040ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2200      	movs	r2, #0
 80040b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2200      	movs	r2, #0
 80040ba:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2200      	movs	r2, #0
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040c8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80040d0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	3212      	adds	r2, #18
 80040e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d80c      	bhi.n	800410a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6919      	ldr	r1, [r3, #16]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	440b      	add	r3, r1
 8004102:	461a      	mov	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	60da      	str	r2, [r3, #12]
 8004108:	e004      	b.n	8004114 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	461a      	mov	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3301      	adds	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b03      	cmp	r3, #3
 800411e:	d9b5      	bls.n	800408c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800414a:	60da      	str	r2, [r3, #12]
}
 800414c:	bf00      	nop
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004158:	b480      	push	{r7}
 800415a:	b089      	sub	sp, #36	; 0x24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800416e:	2300      	movs	r3, #0
 8004170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	e175      	b.n	8004464 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004178:	2201      	movs	r2, #1
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4013      	ands	r3, r2
 800418a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	429a      	cmp	r2, r3
 8004192:	f040 8164 	bne.w	800445e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d005      	beq.n	80041ae <HAL_GPIO_Init+0x56>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d130      	bne.n	8004210 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	2203      	movs	r2, #3
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4013      	ands	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041e4:	2201      	movs	r2, #1
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 0201 	and.w	r2, r3, #1
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b03      	cmp	r3, #3
 800421a:	d017      	beq.n	800424c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	2203      	movs	r2, #3
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d123      	bne.n	80042a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	08da      	lsrs	r2, r3, #3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3208      	adds	r2, #8
 8004260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	220f      	movs	r2, #15
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	08da      	lsrs	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3208      	adds	r2, #8
 800429a:	69b9      	ldr	r1, [r7, #24]
 800429c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	2203      	movs	r2, #3
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0203 	and.w	r2, r3, #3
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80be 	beq.w	800445e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042e2:	4b66      	ldr	r3, [pc, #408]	; (800447c <HAL_GPIO_Init+0x324>)
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	4a65      	ldr	r2, [pc, #404]	; (800447c <HAL_GPIO_Init+0x324>)
 80042e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042ec:	6453      	str	r3, [r2, #68]	; 0x44
 80042ee:	4b63      	ldr	r3, [pc, #396]	; (800447c <HAL_GPIO_Init+0x324>)
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80042fa:	4a61      	ldr	r2, [pc, #388]	; (8004480 <HAL_GPIO_Init+0x328>)
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	089b      	lsrs	r3, r3, #2
 8004300:	3302      	adds	r3, #2
 8004302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004306:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	220f      	movs	r2, #15
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4013      	ands	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a58      	ldr	r2, [pc, #352]	; (8004484 <HAL_GPIO_Init+0x32c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d037      	beq.n	8004396 <HAL_GPIO_Init+0x23e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a57      	ldr	r2, [pc, #348]	; (8004488 <HAL_GPIO_Init+0x330>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d031      	beq.n	8004392 <HAL_GPIO_Init+0x23a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a56      	ldr	r2, [pc, #344]	; (800448c <HAL_GPIO_Init+0x334>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d02b      	beq.n	800438e <HAL_GPIO_Init+0x236>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a55      	ldr	r2, [pc, #340]	; (8004490 <HAL_GPIO_Init+0x338>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d025      	beq.n	800438a <HAL_GPIO_Init+0x232>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a54      	ldr	r2, [pc, #336]	; (8004494 <HAL_GPIO_Init+0x33c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01f      	beq.n	8004386 <HAL_GPIO_Init+0x22e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a53      	ldr	r2, [pc, #332]	; (8004498 <HAL_GPIO_Init+0x340>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d019      	beq.n	8004382 <HAL_GPIO_Init+0x22a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a52      	ldr	r2, [pc, #328]	; (800449c <HAL_GPIO_Init+0x344>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d013      	beq.n	800437e <HAL_GPIO_Init+0x226>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a51      	ldr	r2, [pc, #324]	; (80044a0 <HAL_GPIO_Init+0x348>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00d      	beq.n	800437a <HAL_GPIO_Init+0x222>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a50      	ldr	r2, [pc, #320]	; (80044a4 <HAL_GPIO_Init+0x34c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d007      	beq.n	8004376 <HAL_GPIO_Init+0x21e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a4f      	ldr	r2, [pc, #316]	; (80044a8 <HAL_GPIO_Init+0x350>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d101      	bne.n	8004372 <HAL_GPIO_Init+0x21a>
 800436e:	2309      	movs	r3, #9
 8004370:	e012      	b.n	8004398 <HAL_GPIO_Init+0x240>
 8004372:	230a      	movs	r3, #10
 8004374:	e010      	b.n	8004398 <HAL_GPIO_Init+0x240>
 8004376:	2308      	movs	r3, #8
 8004378:	e00e      	b.n	8004398 <HAL_GPIO_Init+0x240>
 800437a:	2307      	movs	r3, #7
 800437c:	e00c      	b.n	8004398 <HAL_GPIO_Init+0x240>
 800437e:	2306      	movs	r3, #6
 8004380:	e00a      	b.n	8004398 <HAL_GPIO_Init+0x240>
 8004382:	2305      	movs	r3, #5
 8004384:	e008      	b.n	8004398 <HAL_GPIO_Init+0x240>
 8004386:	2304      	movs	r3, #4
 8004388:	e006      	b.n	8004398 <HAL_GPIO_Init+0x240>
 800438a:	2303      	movs	r3, #3
 800438c:	e004      	b.n	8004398 <HAL_GPIO_Init+0x240>
 800438e:	2302      	movs	r3, #2
 8004390:	e002      	b.n	8004398 <HAL_GPIO_Init+0x240>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <HAL_GPIO_Init+0x240>
 8004396:	2300      	movs	r3, #0
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	f002 0203 	and.w	r2, r2, #3
 800439e:	0092      	lsls	r2, r2, #2
 80043a0:	4093      	lsls	r3, r2
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80043a8:	4935      	ldr	r1, [pc, #212]	; (8004480 <HAL_GPIO_Init+0x328>)
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	089b      	lsrs	r3, r3, #2
 80043ae:	3302      	adds	r3, #2
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043b6:	4b3d      	ldr	r3, [pc, #244]	; (80044ac <HAL_GPIO_Init+0x354>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	43db      	mvns	r3, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4013      	ands	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043da:	4a34      	ldr	r2, [pc, #208]	; (80044ac <HAL_GPIO_Init+0x354>)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043e0:	4b32      	ldr	r3, [pc, #200]	; (80044ac <HAL_GPIO_Init+0x354>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004404:	4a29      	ldr	r2, [pc, #164]	; (80044ac <HAL_GPIO_Init+0x354>)
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800440a:	4b28      	ldr	r3, [pc, #160]	; (80044ac <HAL_GPIO_Init+0x354>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	43db      	mvns	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4013      	ands	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800442e:	4a1f      	ldr	r2, [pc, #124]	; (80044ac <HAL_GPIO_Init+0x354>)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004434:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <HAL_GPIO_Init+0x354>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004458:	4a14      	ldr	r2, [pc, #80]	; (80044ac <HAL_GPIO_Init+0x354>)
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3301      	adds	r3, #1
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	2b0f      	cmp	r3, #15
 8004468:	f67f ae86 	bls.w	8004178 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800446c:	bf00      	nop
 800446e:	bf00      	nop
 8004470:	3724      	adds	r7, #36	; 0x24
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40023800 	.word	0x40023800
 8004480:	40013800 	.word	0x40013800
 8004484:	40020000 	.word	0x40020000
 8004488:	40020400 	.word	0x40020400
 800448c:	40020800 	.word	0x40020800
 8004490:	40020c00 	.word	0x40020c00
 8004494:	40021000 	.word	0x40021000
 8004498:	40021400 	.word	0x40021400
 800449c:	40021800 	.word	0x40021800
 80044a0:	40021c00 	.word	0x40021c00
 80044a4:	40022000 	.word	0x40022000
 80044a8:	40022400 	.word	0x40022400
 80044ac:	40013c00 	.word	0x40013c00

080044b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	807b      	strh	r3, [r7, #2]
 80044bc:	4613      	mov	r3, r2
 80044be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044c0:	787b      	ldrb	r3, [r7, #1]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044c6:	887a      	ldrh	r2, [r7, #2]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80044cc:	e003      	b.n	80044d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80044ce:	887b      	ldrh	r3, [r7, #2]
 80044d0:	041a      	lsls	r2, r3, #16
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	619a      	str	r2, [r3, #24]
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e4:	b08f      	sub	sp, #60	; 0x3c
 80044e6:	af0a      	add	r7, sp, #40	; 0x28
 80044e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e116      	b.n	8004722 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff f8b6 	bl	8003680 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2203      	movs	r2, #3
 8004518:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d102      	bne.n	800452e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f001 fe92 	bl	800625c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	603b      	str	r3, [r7, #0]
 800453e:	687e      	ldr	r6, [r7, #4]
 8004540:	466d      	mov	r5, sp
 8004542:	f106 0410 	add.w	r4, r6, #16
 8004546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800454a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800454c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800454e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004552:	e885 0003 	stmia.w	r5, {r0, r1}
 8004556:	1d33      	adds	r3, r6, #4
 8004558:	cb0e      	ldmia	r3, {r1, r2, r3}
 800455a:	6838      	ldr	r0, [r7, #0]
 800455c:	f001 fe26 	bl	80061ac <USB_CoreInit>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2202      	movs	r2, #2
 800456a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e0d7      	b.n	8004722 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2100      	movs	r1, #0
 8004578:	4618      	mov	r0, r3
 800457a:	f001 fe80 	bl	800627e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800457e:	2300      	movs	r3, #0
 8004580:	73fb      	strb	r3, [r7, #15]
 8004582:	e04a      	b.n	800461a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004584:	7bfa      	ldrb	r2, [r7, #15]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	333d      	adds	r3, #61	; 0x3d
 8004594:	2201      	movs	r2, #1
 8004596:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004598:	7bfa      	ldrb	r2, [r7, #15]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	333c      	adds	r3, #60	; 0x3c
 80045a8:	7bfa      	ldrb	r2, [r7, #15]
 80045aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045ac:	7bfa      	ldrb	r2, [r7, #15]
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	b298      	uxth	r0, r3
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3344      	adds	r3, #68	; 0x44
 80045c0:	4602      	mov	r2, r0
 80045c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045c4:	7bfa      	ldrb	r2, [r7, #15]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	3340      	adds	r3, #64	; 0x40
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045d8:	7bfa      	ldrb	r2, [r7, #15]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	3348      	adds	r3, #72	; 0x48
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045ec:	7bfa      	ldrb	r2, [r7, #15]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	334c      	adds	r3, #76	; 0x4c
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004600:	7bfa      	ldrb	r2, [r7, #15]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	3354      	adds	r3, #84	; 0x54
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004614:	7bfb      	ldrb	r3, [r7, #15]
 8004616:	3301      	adds	r3, #1
 8004618:	73fb      	strb	r3, [r7, #15]
 800461a:	7bfa      	ldrb	r2, [r7, #15]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d3af      	bcc.n	8004584 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004624:	2300      	movs	r3, #0
 8004626:	73fb      	strb	r3, [r7, #15]
 8004628:	e044      	b.n	80046b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800462a:	7bfa      	ldrb	r2, [r7, #15]
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	4613      	mov	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800463c:	2200      	movs	r2, #0
 800463e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004640:	7bfa      	ldrb	r2, [r7, #15]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004652:	7bfa      	ldrb	r2, [r7, #15]
 8004654:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004656:	7bfa      	ldrb	r2, [r7, #15]
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800466c:	7bfa      	ldrb	r2, [r7, #15]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004682:	7bfa      	ldrb	r2, [r7, #15]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004698:	7bfa      	ldrb	r2, [r7, #15]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	3301      	adds	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
 80046b4:	7bfa      	ldrb	r2, [r7, #15]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d3b5      	bcc.n	800462a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	687e      	ldr	r6, [r7, #4]
 80046c6:	466d      	mov	r5, sp
 80046c8:	f106 0410 	add.w	r4, r6, #16
 80046cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80046dc:	1d33      	adds	r3, r6, #4
 80046de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046e0:	6838      	ldr	r0, [r7, #0]
 80046e2:	f001 fe19 	bl	8006318 <USB_DevInit>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e014      	b.n	8004722 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	2b01      	cmp	r3, #1
 800470e:	d102      	bne.n	8004716 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f80b 	bl	800472c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f001 ffd7 	bl	80066ce <USB_DevDisconnect>

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800472c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <HAL_PCDEx_ActivateLPM+0x44>)
 800475c:	4313      	orrs	r3, r2
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	10000003 	.word	0x10000003

08004774 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004778:	4b05      	ldr	r3, [pc, #20]	; (8004790 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a04      	ldr	r2, [pc, #16]	; (8004790 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800477e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004782:	6013      	str	r3, [r2, #0]
}
 8004784:	bf00      	nop
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40007000 	.word	0x40007000

08004794 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800479c:	2300      	movs	r3, #0
 800479e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e291      	b.n	8004cce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 8087 	beq.w	80048c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047b8:	4b96      	ldr	r3, [pc, #600]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 030c 	and.w	r3, r3, #12
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d00c      	beq.n	80047de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047c4:	4b93      	ldr	r3, [pc, #588]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 030c 	and.w	r3, r3, #12
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d112      	bne.n	80047f6 <HAL_RCC_OscConfig+0x62>
 80047d0:	4b90      	ldr	r3, [pc, #576]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047dc:	d10b      	bne.n	80047f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047de:	4b8d      	ldr	r3, [pc, #564]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d06c      	beq.n	80048c4 <HAL_RCC_OscConfig+0x130>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d168      	bne.n	80048c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e26b      	b.n	8004cce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fe:	d106      	bne.n	800480e <HAL_RCC_OscConfig+0x7a>
 8004800:	4b84      	ldr	r3, [pc, #528]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a83      	ldr	r2, [pc, #524]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 8004806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	e02e      	b.n	800486c <HAL_RCC_OscConfig+0xd8>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10c      	bne.n	8004830 <HAL_RCC_OscConfig+0x9c>
 8004816:	4b7f      	ldr	r3, [pc, #508]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a7e      	ldr	r2, [pc, #504]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 800481c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	4b7c      	ldr	r3, [pc, #496]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a7b      	ldr	r2, [pc, #492]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 8004828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	e01d      	b.n	800486c <HAL_RCC_OscConfig+0xd8>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004838:	d10c      	bne.n	8004854 <HAL_RCC_OscConfig+0xc0>
 800483a:	4b76      	ldr	r3, [pc, #472]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a75      	ldr	r2, [pc, #468]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 8004840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	4b73      	ldr	r3, [pc, #460]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a72      	ldr	r2, [pc, #456]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 800484c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	e00b      	b.n	800486c <HAL_RCC_OscConfig+0xd8>
 8004854:	4b6f      	ldr	r3, [pc, #444]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a6e      	ldr	r2, [pc, #440]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 800485a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	4b6c      	ldr	r3, [pc, #432]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a6b      	ldr	r2, [pc, #428]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 8004866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800486a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d013      	beq.n	800489c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7ff f834 	bl	80038e0 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800487c:	f7ff f830 	bl	80038e0 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b64      	cmp	r3, #100	; 0x64
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e21f      	b.n	8004cce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488e:	4b61      	ldr	r3, [pc, #388]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0xe8>
 800489a:	e014      	b.n	80048c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489c:	f7ff f820 	bl	80038e0 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a4:	f7ff f81c 	bl	80038e0 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b64      	cmp	r3, #100	; 0x64
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e20b      	b.n	8004cce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048b6:	4b57      	ldr	r3, [pc, #348]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCC_OscConfig+0x110>
 80048c2:	e000      	b.n	80048c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d069      	beq.n	80049a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048d2:	4b50      	ldr	r3, [pc, #320]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048de:	4b4d      	ldr	r3, [pc, #308]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d11c      	bne.n	8004924 <HAL_RCC_OscConfig+0x190>
 80048ea:	4b4a      	ldr	r3, [pc, #296]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d116      	bne.n	8004924 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048f6:	4b47      	ldr	r3, [pc, #284]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_RCC_OscConfig+0x17a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d001      	beq.n	800490e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e1df      	b.n	8004cce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490e:	4b41      	ldr	r3, [pc, #260]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	493d      	ldr	r1, [pc, #244]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 800491e:	4313      	orrs	r3, r2
 8004920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004922:	e040      	b.n	80049a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d023      	beq.n	8004974 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800492c:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a38      	ldr	r2, [pc, #224]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fe ffd2 	bl	80038e0 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004940:	f7fe ffce 	bl	80038e0 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e1bd      	b.n	8004cce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004952:	4b30      	ldr	r3, [pc, #192]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495e:	4b2d      	ldr	r3, [pc, #180]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4929      	ldr	r1, [pc, #164]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 800496e:	4313      	orrs	r3, r2
 8004970:	600b      	str	r3, [r1, #0]
 8004972:	e018      	b.n	80049a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004974:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a26      	ldr	r2, [pc, #152]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004980:	f7fe ffae 	bl	80038e0 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004988:	f7fe ffaa 	bl	80038e0 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e199      	b.n	8004cce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800499a:	4b1e      	ldr	r3, [pc, #120]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d038      	beq.n	8004a24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d019      	beq.n	80049ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ba:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 80049bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049be:	4a15      	ldr	r2, [pc, #84]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c6:	f7fe ff8b 	bl	80038e0 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ce:	f7fe ff87 	bl	80038e0 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e176      	b.n	8004cce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e0:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 80049e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <HAL_RCC_OscConfig+0x23a>
 80049ec:	e01a      	b.n	8004a24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 80049f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f2:	4a08      	ldr	r2, [pc, #32]	; (8004a14 <HAL_RCC_OscConfig+0x280>)
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fa:	f7fe ff71 	bl	80038e0 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a00:	e00a      	b.n	8004a18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a02:	f7fe ff6d 	bl	80038e0 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d903      	bls.n	8004a18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e15c      	b.n	8004cce <HAL_RCC_OscConfig+0x53a>
 8004a14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a18:	4b91      	ldr	r3, [pc, #580]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1ee      	bne.n	8004a02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80a4 	beq.w	8004b7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a32:	4b8b      	ldr	r3, [pc, #556]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10d      	bne.n	8004a5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a3e:	4b88      	ldr	r3, [pc, #544]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	4a87      	ldr	r2, [pc, #540]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a48:	6413      	str	r3, [r2, #64]	; 0x40
 8004a4a:	4b85      	ldr	r3, [pc, #532]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a52:	60bb      	str	r3, [r7, #8]
 8004a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a56:	2301      	movs	r3, #1
 8004a58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a5a:	4b82      	ldr	r3, [pc, #520]	; (8004c64 <HAL_RCC_OscConfig+0x4d0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d118      	bne.n	8004a98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a66:	4b7f      	ldr	r3, [pc, #508]	; (8004c64 <HAL_RCC_OscConfig+0x4d0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a7e      	ldr	r2, [pc, #504]	; (8004c64 <HAL_RCC_OscConfig+0x4d0>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a72:	f7fe ff35 	bl	80038e0 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7a:	f7fe ff31 	bl	80038e0 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b64      	cmp	r3, #100	; 0x64
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e120      	b.n	8004cce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a8c:	4b75      	ldr	r3, [pc, #468]	; (8004c64 <HAL_RCC_OscConfig+0x4d0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d106      	bne.n	8004aae <HAL_RCC_OscConfig+0x31a>
 8004aa0:	4b6f      	ldr	r3, [pc, #444]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa4:	4a6e      	ldr	r2, [pc, #440]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004aac:	e02d      	b.n	8004b0a <HAL_RCC_OscConfig+0x376>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x33c>
 8004ab6:	4b6a      	ldr	r3, [pc, #424]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aba:	4a69      	ldr	r2, [pc, #420]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac2:	4b67      	ldr	r3, [pc, #412]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac6:	4a66      	ldr	r2, [pc, #408]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004ac8:	f023 0304 	bic.w	r3, r3, #4
 8004acc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ace:	e01c      	b.n	8004b0a <HAL_RCC_OscConfig+0x376>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b05      	cmp	r3, #5
 8004ad6:	d10c      	bne.n	8004af2 <HAL_RCC_OscConfig+0x35e>
 8004ad8:	4b61      	ldr	r3, [pc, #388]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004adc:	4a60      	ldr	r2, [pc, #384]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004ade:	f043 0304 	orr.w	r3, r3, #4
 8004ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae4:	4b5e      	ldr	r3, [pc, #376]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae8:	4a5d      	ldr	r2, [pc, #372]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	6713      	str	r3, [r2, #112]	; 0x70
 8004af0:	e00b      	b.n	8004b0a <HAL_RCC_OscConfig+0x376>
 8004af2:	4b5b      	ldr	r3, [pc, #364]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	4a5a      	ldr	r2, [pc, #360]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	6713      	str	r3, [r2, #112]	; 0x70
 8004afe:	4b58      	ldr	r3, [pc, #352]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	4a57      	ldr	r2, [pc, #348]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004b04:	f023 0304 	bic.w	r3, r3, #4
 8004b08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d015      	beq.n	8004b3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b12:	f7fe fee5 	bl	80038e0 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b18:	e00a      	b.n	8004b30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b1a:	f7fe fee1 	bl	80038e0 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e0ce      	b.n	8004cce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b30:	4b4b      	ldr	r3, [pc, #300]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0ee      	beq.n	8004b1a <HAL_RCC_OscConfig+0x386>
 8004b3c:	e014      	b.n	8004b68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3e:	f7fe fecf 	bl	80038e0 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b44:	e00a      	b.n	8004b5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b46:	f7fe fecb 	bl	80038e0 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e0b8      	b.n	8004cce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b5c:	4b40      	ldr	r3, [pc, #256]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1ee      	bne.n	8004b46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d105      	bne.n	8004b7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b6e:	4b3c      	ldr	r3, [pc, #240]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	4a3b      	ldr	r2, [pc, #236]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80a4 	beq.w	8004ccc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b84:	4b36      	ldr	r3, [pc, #216]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 030c 	and.w	r3, r3, #12
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d06b      	beq.n	8004c68 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d149      	bne.n	8004c2c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b98:	4b31      	ldr	r3, [pc, #196]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a30      	ldr	r2, [pc, #192]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fe fe9c 	bl	80038e0 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bac:	f7fe fe98 	bl	80038e0 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e087      	b.n	8004cce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bbe:	4b28      	ldr	r3, [pc, #160]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69da      	ldr	r2, [r3, #28]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	019b      	lsls	r3, r3, #6
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	085b      	lsrs	r3, r3, #1
 8004be2:	3b01      	subs	r3, #1
 8004be4:	041b      	lsls	r3, r3, #16
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	061b      	lsls	r3, r3, #24
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	4a1b      	ldr	r2, [pc, #108]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004bf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bf6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bf8:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a18      	ldr	r2, [pc, #96]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c04:	f7fe fe6c 	bl	80038e0 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c0c:	f7fe fe68 	bl	80038e0 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e057      	b.n	8004cce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1e:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f0      	beq.n	8004c0c <HAL_RCC_OscConfig+0x478>
 8004c2a:	e04f      	b.n	8004ccc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2c:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a0b      	ldr	r2, [pc, #44]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c38:	f7fe fe52 	bl	80038e0 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c40:	f7fe fe4e 	bl	80038e0 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e03d      	b.n	8004cce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c52:	4b03      	ldr	r3, [pc, #12]	; (8004c60 <HAL_RCC_OscConfig+0x4cc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x4ac>
 8004c5e:	e035      	b.n	8004ccc <HAL_RCC_OscConfig+0x538>
 8004c60:	40023800 	.word	0x40023800
 8004c64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c68:	4b1b      	ldr	r3, [pc, #108]	; (8004cd8 <HAL_RCC_OscConfig+0x544>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d028      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d121      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d11a      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c98:	4013      	ands	r3, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c9e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d111      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cae:	085b      	lsrs	r3, r3, #1
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d107      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800

08004cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0d0      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf4:	4b6a      	ldr	r3, [pc, #424]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d910      	bls.n	8004d24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d02:	4b67      	ldr	r3, [pc, #412]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 020f 	bic.w	r2, r3, #15
 8004d0a:	4965      	ldr	r1, [pc, #404]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b63      	ldr	r3, [pc, #396]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e0b8      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d020      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d3c:	4b59      	ldr	r3, [pc, #356]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	4a58      	ldr	r2, [pc, #352]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d54:	4b53      	ldr	r3, [pc, #332]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	4a52      	ldr	r2, [pc, #328]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d60:	4b50      	ldr	r3, [pc, #320]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	494d      	ldr	r1, [pc, #308]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d040      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d107      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d86:	4b47      	ldr	r3, [pc, #284]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d115      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e07f      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d107      	bne.n	8004dae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9e:	4b41      	ldr	r3, [pc, #260]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e073      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dae:	4b3d      	ldr	r3, [pc, #244]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e06b      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dbe:	4b39      	ldr	r3, [pc, #228]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f023 0203 	bic.w	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4936      	ldr	r1, [pc, #216]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd0:	f7fe fd86 	bl	80038e0 <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd6:	e00a      	b.n	8004dee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd8:	f7fe fd82 	bl	80038e0 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e053      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dee:	4b2d      	ldr	r3, [pc, #180]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 020c 	and.w	r2, r3, #12
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d1eb      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e00:	4b27      	ldr	r3, [pc, #156]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d210      	bcs.n	8004e30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b24      	ldr	r3, [pc, #144]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 020f 	bic.w	r2, r3, #15
 8004e16:	4922      	ldr	r1, [pc, #136]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1e:	4b20      	ldr	r3, [pc, #128]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d001      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e032      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d008      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e3c:	4b19      	ldr	r3, [pc, #100]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	4916      	ldr	r1, [pc, #88]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e5a:	4b12      	ldr	r3, [pc, #72]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	490e      	ldr	r1, [pc, #56]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e6e:	f000 f821 	bl	8004eb4 <HAL_RCC_GetSysClockFreq>
 8004e72:	4602      	mov	r2, r0
 8004e74:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	091b      	lsrs	r3, r3, #4
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	490a      	ldr	r1, [pc, #40]	; (8004ea8 <HAL_RCC_ClockConfig+0x1cc>)
 8004e80:	5ccb      	ldrb	r3, [r1, r3]
 8004e82:	fa22 f303 	lsr.w	r3, r2, r3
 8004e86:	4a09      	ldr	r2, [pc, #36]	; (8004eac <HAL_RCC_ClockConfig+0x1d0>)
 8004e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e8a:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <HAL_RCC_ClockConfig+0x1d4>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fe fce2 	bl	8003858 <HAL_InitTick>

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40023c00 	.word	0x40023c00
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	08006850 	.word	0x08006850
 8004eac:	20000020 	.word	0x20000020
 8004eb0:	20000024 	.word	0x20000024

08004eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb8:	b094      	sub	sp, #80	; 0x50
 8004eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ecc:	4b79      	ldr	r3, [pc, #484]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 030c 	and.w	r3, r3, #12
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d00d      	beq.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	f200 80e1 	bhi.w	80050a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d003      	beq.n	8004eee <HAL_RCC_GetSysClockFreq+0x3a>
 8004ee6:	e0db      	b.n	80050a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ee8:	4b73      	ldr	r3, [pc, #460]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eec:	e0db      	b.n	80050a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eee:	4b73      	ldr	r3, [pc, #460]	; (80050bc <HAL_RCC_GetSysClockFreq+0x208>)
 8004ef0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ef2:	e0d8      	b.n	80050a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ef4:	4b6f      	ldr	r3, [pc, #444]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004efc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004efe:	4b6d      	ldr	r3, [pc, #436]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d063      	beq.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f0a:	4b6a      	ldr	r3, [pc, #424]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	099b      	lsrs	r3, r3, #6
 8004f10:	2200      	movs	r2, #0
 8004f12:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f1e:	2300      	movs	r3, #0
 8004f20:	637b      	str	r3, [r7, #52]	; 0x34
 8004f22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f26:	4622      	mov	r2, r4
 8004f28:	462b      	mov	r3, r5
 8004f2a:	f04f 0000 	mov.w	r0, #0
 8004f2e:	f04f 0100 	mov.w	r1, #0
 8004f32:	0159      	lsls	r1, r3, #5
 8004f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f38:	0150      	lsls	r0, r2, #5
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4621      	mov	r1, r4
 8004f40:	1a51      	subs	r1, r2, r1
 8004f42:	6139      	str	r1, [r7, #16]
 8004f44:	4629      	mov	r1, r5
 8004f46:	eb63 0301 	sbc.w	r3, r3, r1
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f58:	4659      	mov	r1, fp
 8004f5a:	018b      	lsls	r3, r1, #6
 8004f5c:	4651      	mov	r1, sl
 8004f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f62:	4651      	mov	r1, sl
 8004f64:	018a      	lsls	r2, r1, #6
 8004f66:	4651      	mov	r1, sl
 8004f68:	ebb2 0801 	subs.w	r8, r2, r1
 8004f6c:	4659      	mov	r1, fp
 8004f6e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f86:	4690      	mov	r8, r2
 8004f88:	4699      	mov	r9, r3
 8004f8a:	4623      	mov	r3, r4
 8004f8c:	eb18 0303 	adds.w	r3, r8, r3
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	462b      	mov	r3, r5
 8004f94:	eb49 0303 	adc.w	r3, r9, r3
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	024b      	lsls	r3, r1, #9
 8004faa:	4621      	mov	r1, r4
 8004fac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	024a      	lsls	r2, r1, #9
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fba:	2200      	movs	r2, #0
 8004fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fc4:	f7fb f920 	bl	8000208 <__aeabi_uldivmod>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4613      	mov	r3, r2
 8004fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fd0:	e058      	b.n	8005084 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fd2:	4b38      	ldr	r3, [pc, #224]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	099b      	lsrs	r3, r3, #6
 8004fd8:	2200      	movs	r2, #0
 8004fda:	4618      	mov	r0, r3
 8004fdc:	4611      	mov	r1, r2
 8004fde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fe2:	623b      	str	r3, [r7, #32]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fec:	4642      	mov	r2, r8
 8004fee:	464b      	mov	r3, r9
 8004ff0:	f04f 0000 	mov.w	r0, #0
 8004ff4:	f04f 0100 	mov.w	r1, #0
 8004ff8:	0159      	lsls	r1, r3, #5
 8004ffa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ffe:	0150      	lsls	r0, r2, #5
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4641      	mov	r1, r8
 8005006:	ebb2 0a01 	subs.w	sl, r2, r1
 800500a:	4649      	mov	r1, r9
 800500c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800501c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005020:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005024:	ebb2 040a 	subs.w	r4, r2, sl
 8005028:	eb63 050b 	sbc.w	r5, r3, fp
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	00eb      	lsls	r3, r5, #3
 8005036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800503a:	00e2      	lsls	r2, r4, #3
 800503c:	4614      	mov	r4, r2
 800503e:	461d      	mov	r5, r3
 8005040:	4643      	mov	r3, r8
 8005042:	18e3      	adds	r3, r4, r3
 8005044:	603b      	str	r3, [r7, #0]
 8005046:	464b      	mov	r3, r9
 8005048:	eb45 0303 	adc.w	r3, r5, r3
 800504c:	607b      	str	r3, [r7, #4]
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	f04f 0300 	mov.w	r3, #0
 8005056:	e9d7 4500 	ldrd	r4, r5, [r7]
 800505a:	4629      	mov	r1, r5
 800505c:	028b      	lsls	r3, r1, #10
 800505e:	4621      	mov	r1, r4
 8005060:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005064:	4621      	mov	r1, r4
 8005066:	028a      	lsls	r2, r1, #10
 8005068:	4610      	mov	r0, r2
 800506a:	4619      	mov	r1, r3
 800506c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800506e:	2200      	movs	r2, #0
 8005070:	61bb      	str	r3, [r7, #24]
 8005072:	61fa      	str	r2, [r7, #28]
 8005074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005078:	f7fb f8c6 	bl	8000208 <__aeabi_uldivmod>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4613      	mov	r3, r2
 8005082:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005084:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	0c1b      	lsrs	r3, r3, #16
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	3301      	adds	r3, #1
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005094:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005098:	fbb2 f3f3 	udiv	r3, r2, r3
 800509c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800509e:	e002      	b.n	80050a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050a0:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80050a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3750      	adds	r7, #80	; 0x50
 80050ac:	46bd      	mov	sp, r7
 80050ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050b2:	bf00      	nop
 80050b4:	40023800 	.word	0x40023800
 80050b8:	00f42400 	.word	0x00f42400
 80050bc:	007a1200 	.word	0x007a1200

080050c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050c4:	4b03      	ldr	r3, [pc, #12]	; (80050d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050c6:	681b      	ldr	r3, [r3, #0]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	20000020 	.word	0x20000020

080050d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050dc:	f7ff fff0 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 80050e0:	4602      	mov	r2, r0
 80050e2:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	0a9b      	lsrs	r3, r3, #10
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	4903      	ldr	r1, [pc, #12]	; (80050fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ee:	5ccb      	ldrb	r3, [r1, r3]
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40023800 	.word	0x40023800
 80050fc:	08006860 	.word	0x08006860

08005100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005104:	f7ff ffdc 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 8005108:	4602      	mov	r2, r0
 800510a:	4b05      	ldr	r3, [pc, #20]	; (8005120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	0b5b      	lsrs	r3, r3, #13
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	4903      	ldr	r1, [pc, #12]	; (8005124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005116:	5ccb      	ldrb	r3, [r1, r3]
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800511c:	4618      	mov	r0, r3
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40023800 	.word	0x40023800
 8005124:	08006860 	.word	0x08006860

08005128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005134:	2300      	movs	r3, #0
 8005136:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d012      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005150:	4b69      	ldr	r3, [pc, #420]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	4a68      	ldr	r2, [pc, #416]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005156:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800515a:	6093      	str	r3, [r2, #8]
 800515c:	4b66      	ldr	r3, [pc, #408]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005164:	4964      	ldr	r1, [pc, #400]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005166:	4313      	orrs	r3, r2
 8005168:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005172:	2301      	movs	r3, #1
 8005174:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d017      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005182:	4b5d      	ldr	r3, [pc, #372]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005188:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005190:	4959      	ldr	r1, [pc, #356]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a0:	d101      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80051a2:	2301      	movs	r3, #1
 80051a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80051ae:	2301      	movs	r3, #1
 80051b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d017      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051be:	4b4e      	ldr	r3, [pc, #312]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	494a      	ldr	r1, [pc, #296]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051dc:	d101      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80051de:	2301      	movs	r3, #1
 80051e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80051ea:	2301      	movs	r3, #1
 80051ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80051fa:	2301      	movs	r3, #1
 80051fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 808b 	beq.w	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800520c:	4b3a      	ldr	r3, [pc, #232]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	4a39      	ldr	r2, [pc, #228]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005216:	6413      	str	r3, [r2, #64]	; 0x40
 8005218:	4b37      	ldr	r3, [pc, #220]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005224:	4b35      	ldr	r3, [pc, #212]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a34      	ldr	r2, [pc, #208]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800522a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800522e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005230:	f7fe fb56 	bl	80038e0 <HAL_GetTick>
 8005234:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005236:	e008      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005238:	f7fe fb52 	bl	80038e0 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b64      	cmp	r3, #100	; 0x64
 8005244:	d901      	bls.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e357      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800524a:	4b2c      	ldr	r3, [pc, #176]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f0      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005256:	4b28      	ldr	r3, [pc, #160]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800525e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d035      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	429a      	cmp	r2, r3
 8005272:	d02e      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005274:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800527e:	4b1e      	ldr	r3, [pc, #120]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005282:	4a1d      	ldr	r2, [pc, #116]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005288:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800528a:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	4a1a      	ldr	r2, [pc, #104]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005294:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005296:	4a18      	ldr	r2, [pc, #96]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800529c:	4b16      	ldr	r3, [pc, #88]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800529e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d114      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a8:	f7fe fb1a 	bl	80038e0 <HAL_GetTick>
 80052ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ae:	e00a      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b0:	f7fe fb16 	bl	80038e0 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80052be:	4293      	cmp	r3, r2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e319      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c6:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0ee      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052de:	d111      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80052e0:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052ec:	4b04      	ldr	r3, [pc, #16]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80052ee:	400b      	ands	r3, r1
 80052f0:	4901      	ldr	r1, [pc, #4]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	608b      	str	r3, [r1, #8]
 80052f6:	e00b      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80052f8:	40023800 	.word	0x40023800
 80052fc:	40007000 	.word	0x40007000
 8005300:	0ffffcff 	.word	0x0ffffcff
 8005304:	4baa      	ldr	r3, [pc, #680]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	4aa9      	ldr	r2, [pc, #676]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800530a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800530e:	6093      	str	r3, [r2, #8]
 8005310:	4ba7      	ldr	r3, [pc, #668]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005312:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800531c:	49a4      	ldr	r1, [pc, #656]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800531e:	4313      	orrs	r3, r2
 8005320:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0310 	and.w	r3, r3, #16
 800532a:	2b00      	cmp	r3, #0
 800532c:	d010      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800532e:	4ba0      	ldr	r3, [pc, #640]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005334:	4a9e      	ldr	r2, [pc, #632]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800533a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800533e:	4b9c      	ldr	r3, [pc, #624]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005340:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	4999      	ldr	r1, [pc, #612]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800535c:	4b94      	ldr	r3, [pc, #592]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800536a:	4991      	ldr	r1, [pc, #580]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800537e:	4b8c      	ldr	r3, [pc, #560]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005384:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800538c:	4988      	ldr	r1, [pc, #544]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053a0:	4b83      	ldr	r3, [pc, #524]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ae:	4980      	ldr	r1, [pc, #512]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053c2:	4b7b      	ldr	r3, [pc, #492]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d0:	4977      	ldr	r1, [pc, #476]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053e4:	4b72      	ldr	r3, [pc, #456]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ea:	f023 0203 	bic.w	r2, r3, #3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f2:	496f      	ldr	r1, [pc, #444]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005406:	4b6a      	ldr	r3, [pc, #424]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540c:	f023 020c 	bic.w	r2, r3, #12
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005414:	4966      	ldr	r1, [pc, #408]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005428:	4b61      	ldr	r3, [pc, #388]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800542a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005436:	495e      	ldr	r1, [pc, #376]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800544a:	4b59      	ldr	r3, [pc, #356]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800544c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005450:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005458:	4955      	ldr	r1, [pc, #340]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800545a:	4313      	orrs	r3, r2
 800545c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800546c:	4b50      	ldr	r3, [pc, #320]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800546e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005472:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	494d      	ldr	r1, [pc, #308]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800548e:	4b48      	ldr	r3, [pc, #288]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005494:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549c:	4944      	ldr	r1, [pc, #272]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80054b0:	4b3f      	ldr	r3, [pc, #252]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054be:	493c      	ldr	r1, [pc, #240]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80054d2:	4b37      	ldr	r3, [pc, #220]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e0:	4933      	ldr	r1, [pc, #204]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00a      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054f4:	4b2e      	ldr	r3, [pc, #184]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005502:	492b      	ldr	r1, [pc, #172]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d011      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005516:	4b26      	ldr	r3, [pc, #152]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005524:	4922      	ldr	r1, [pc, #136]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005526:	4313      	orrs	r3, r2
 8005528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005534:	d101      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005536:	2301      	movs	r3, #1
 8005538:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005546:	2301      	movs	r3, #1
 8005548:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005556:	4b16      	ldr	r3, [pc, #88]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005564:	4912      	ldr	r1, [pc, #72]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00b      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005578:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800557a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005588:	4909      	ldr	r1, [pc, #36]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800558a:	4313      	orrs	r3, r2
 800558c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d006      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 80d9 	beq.w	8005756 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055a4:	4b02      	ldr	r3, [pc, #8]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a01      	ldr	r2, [pc, #4]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055ae:	e001      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80055b0:	40023800 	.word	0x40023800
 80055b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b6:	f7fe f993 	bl	80038e0 <HAL_GetTick>
 80055ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055bc:	e008      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055be:	f7fe f98f 	bl	80038e0 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b64      	cmp	r3, #100	; 0x64
 80055ca:	d901      	bls.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e194      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055d0:	4b6c      	ldr	r3, [pc, #432]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f0      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d021      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d11d      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055f0:	4b64      	ldr	r3, [pc, #400]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f6:	0c1b      	lsrs	r3, r3, #16
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055fe:	4b61      	ldr	r3, [pc, #388]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005604:	0e1b      	lsrs	r3, r3, #24
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	019a      	lsls	r2, r3, #6
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	041b      	lsls	r3, r3, #16
 8005616:	431a      	orrs	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	061b      	lsls	r3, r3, #24
 800561c:	431a      	orrs	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	071b      	lsls	r3, r3, #28
 8005624:	4957      	ldr	r1, [pc, #348]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005640:	d00a      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800564a:	2b00      	cmp	r3, #0
 800564c:	d02e      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005656:	d129      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005658:	4b4a      	ldr	r3, [pc, #296]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800565a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800565e:	0c1b      	lsrs	r3, r3, #16
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005666:	4b47      	ldr	r3, [pc, #284]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800566c:	0f1b      	lsrs	r3, r3, #28
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	019a      	lsls	r2, r3, #6
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	041b      	lsls	r3, r3, #16
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	061b      	lsls	r3, r3, #24
 8005686:	431a      	orrs	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	071b      	lsls	r3, r3, #28
 800568c:	493d      	ldr	r1, [pc, #244]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005694:	4b3b      	ldr	r3, [pc, #236]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800569a:	f023 021f 	bic.w	r2, r3, #31
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	3b01      	subs	r3, #1
 80056a4:	4937      	ldr	r1, [pc, #220]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d01d      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056b8:	4b32      	ldr	r3, [pc, #200]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056be:	0e1b      	lsrs	r3, r3, #24
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056c6:	4b2f      	ldr	r3, [pc, #188]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056cc:	0f1b      	lsrs	r3, r3, #28
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	019a      	lsls	r2, r3, #6
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	041b      	lsls	r3, r3, #16
 80056e0:	431a      	orrs	r2, r3
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	061b      	lsls	r3, r3, #24
 80056e6:	431a      	orrs	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	071b      	lsls	r3, r3, #28
 80056ec:	4925      	ldr	r1, [pc, #148]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d011      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	019a      	lsls	r2, r3, #6
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	041b      	lsls	r3, r3, #16
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	061b      	lsls	r3, r3, #24
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	071b      	lsls	r3, r3, #28
 800571c:	4919      	ldr	r1, [pc, #100]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005724:	4b17      	ldr	r3, [pc, #92]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a16      	ldr	r2, [pc, #88]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800572a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800572e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005730:	f7fe f8d6 	bl	80038e0 <HAL_GetTick>
 8005734:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005736:	e008      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005738:	f7fe f8d2 	bl	80038e0 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b64      	cmp	r3, #100	; 0x64
 8005744:	d901      	bls.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e0d7      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800574a:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0f0      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b01      	cmp	r3, #1
 800575a:	f040 80cd 	bne.w	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800575e:	4b09      	ldr	r3, [pc, #36]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a08      	ldr	r2, [pc, #32]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800576a:	f7fe f8b9 	bl	80038e0 <HAL_GetTick>
 800576e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005770:	e00a      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005772:	f7fe f8b5 	bl	80038e0 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b64      	cmp	r3, #100	; 0x64
 800577e:	d903      	bls.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e0ba      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005784:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005788:	4b5e      	ldr	r3, [pc, #376]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005794:	d0ed      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d009      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d02e      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d12a      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057be:	4b51      	ldr	r3, [pc, #324]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c4:	0c1b      	lsrs	r3, r3, #16
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057cc:	4b4d      	ldr	r3, [pc, #308]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	0f1b      	lsrs	r3, r3, #28
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	019a      	lsls	r2, r3, #6
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	061b      	lsls	r3, r3, #24
 80057ec:	431a      	orrs	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	071b      	lsls	r3, r3, #28
 80057f2:	4944      	ldr	r1, [pc, #272]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057fa:	4b42      	ldr	r3, [pc, #264]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005800:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	3b01      	subs	r3, #1
 800580a:	021b      	lsls	r3, r3, #8
 800580c:	493d      	ldr	r1, [pc, #244]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d022      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005828:	d11d      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800582a:	4b36      	ldr	r3, [pc, #216]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005830:	0e1b      	lsrs	r3, r3, #24
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005838:	4b32      	ldr	r3, [pc, #200]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583e:	0f1b      	lsrs	r3, r3, #28
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	019a      	lsls	r2, r3, #6
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	041b      	lsls	r3, r3, #16
 8005852:	431a      	orrs	r2, r3
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	061b      	lsls	r3, r3, #24
 8005858:	431a      	orrs	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	071b      	lsls	r3, r3, #28
 800585e:	4929      	ldr	r1, [pc, #164]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d028      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005872:	4b24      	ldr	r3, [pc, #144]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005878:	0e1b      	lsrs	r3, r3, #24
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005880:	4b20      	ldr	r3, [pc, #128]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005886:	0c1b      	lsrs	r3, r3, #16
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	019a      	lsls	r2, r3, #6
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	041b      	lsls	r3, r3, #16
 8005898:	431a      	orrs	r2, r3
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	061b      	lsls	r3, r3, #24
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	071b      	lsls	r3, r3, #28
 80058a6:	4917      	ldr	r1, [pc, #92]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058ae:	4b15      	ldr	r3, [pc, #84]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	4911      	ldr	r1, [pc, #68]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058c4:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a0e      	ldr	r2, [pc, #56]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d0:	f7fe f806 	bl	80038e0 <HAL_GetTick>
 80058d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058d6:	e008      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058d8:	f7fe f802 	bl	80038e0 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b64      	cmp	r3, #100	; 0x64
 80058e4:	d901      	bls.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e007      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058ea:	4b06      	ldr	r3, [pc, #24]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058f6:	d1ef      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3720      	adds	r7, #32
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40023800 	.word	0x40023800

08005908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e040      	b.n	800599c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fd fe48 	bl	80035c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2224      	movs	r2, #36	; 0x24
 8005934:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0201 	bic.w	r2, r2, #1
 8005944:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f82c 	bl	80059a4 <UART_SetConfig>
 800594c:	4603      	mov	r3, r0
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e022      	b.n	800599c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fa84 	bl	8005e6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005972:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689a      	ldr	r2, [r3, #8]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005982:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fb0b 	bl	8005fb0 <UART_CheckIdleState>
 800599a:	4603      	mov	r3, r0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	4ba6      	ldr	r3, [pc, #664]	; (8005c68 <UART_SetConfig+0x2c4>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6812      	ldr	r2, [r2, #0]
 80059d6:	6979      	ldr	r1, [r7, #20]
 80059d8:	430b      	orrs	r3, r1
 80059da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a94      	ldr	r2, [pc, #592]	; (8005c6c <UART_SetConfig+0x2c8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d120      	bne.n	8005a62 <UART_SetConfig+0xbe>
 8005a20:	4b93      	ldr	r3, [pc, #588]	; (8005c70 <UART_SetConfig+0x2cc>)
 8005a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d816      	bhi.n	8005a5c <UART_SetConfig+0xb8>
 8005a2e:	a201      	add	r2, pc, #4	; (adr r2, 8005a34 <UART_SetConfig+0x90>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005a45 	.word	0x08005a45
 8005a38:	08005a51 	.word	0x08005a51
 8005a3c:	08005a4b 	.word	0x08005a4b
 8005a40:	08005a57 	.word	0x08005a57
 8005a44:	2301      	movs	r3, #1
 8005a46:	77fb      	strb	r3, [r7, #31]
 8005a48:	e150      	b.n	8005cec <UART_SetConfig+0x348>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	77fb      	strb	r3, [r7, #31]
 8005a4e:	e14d      	b.n	8005cec <UART_SetConfig+0x348>
 8005a50:	2304      	movs	r3, #4
 8005a52:	77fb      	strb	r3, [r7, #31]
 8005a54:	e14a      	b.n	8005cec <UART_SetConfig+0x348>
 8005a56:	2308      	movs	r3, #8
 8005a58:	77fb      	strb	r3, [r7, #31]
 8005a5a:	e147      	b.n	8005cec <UART_SetConfig+0x348>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	77fb      	strb	r3, [r7, #31]
 8005a60:	e144      	b.n	8005cec <UART_SetConfig+0x348>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a83      	ldr	r2, [pc, #524]	; (8005c74 <UART_SetConfig+0x2d0>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d132      	bne.n	8005ad2 <UART_SetConfig+0x12e>
 8005a6c:	4b80      	ldr	r3, [pc, #512]	; (8005c70 <UART_SetConfig+0x2cc>)
 8005a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a72:	f003 030c 	and.w	r3, r3, #12
 8005a76:	2b0c      	cmp	r3, #12
 8005a78:	d828      	bhi.n	8005acc <UART_SetConfig+0x128>
 8005a7a:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <UART_SetConfig+0xdc>)
 8005a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a80:	08005ab5 	.word	0x08005ab5
 8005a84:	08005acd 	.word	0x08005acd
 8005a88:	08005acd 	.word	0x08005acd
 8005a8c:	08005acd 	.word	0x08005acd
 8005a90:	08005ac1 	.word	0x08005ac1
 8005a94:	08005acd 	.word	0x08005acd
 8005a98:	08005acd 	.word	0x08005acd
 8005a9c:	08005acd 	.word	0x08005acd
 8005aa0:	08005abb 	.word	0x08005abb
 8005aa4:	08005acd 	.word	0x08005acd
 8005aa8:	08005acd 	.word	0x08005acd
 8005aac:	08005acd 	.word	0x08005acd
 8005ab0:	08005ac7 	.word	0x08005ac7
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	77fb      	strb	r3, [r7, #31]
 8005ab8:	e118      	b.n	8005cec <UART_SetConfig+0x348>
 8005aba:	2302      	movs	r3, #2
 8005abc:	77fb      	strb	r3, [r7, #31]
 8005abe:	e115      	b.n	8005cec <UART_SetConfig+0x348>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	77fb      	strb	r3, [r7, #31]
 8005ac4:	e112      	b.n	8005cec <UART_SetConfig+0x348>
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	77fb      	strb	r3, [r7, #31]
 8005aca:	e10f      	b.n	8005cec <UART_SetConfig+0x348>
 8005acc:	2310      	movs	r3, #16
 8005ace:	77fb      	strb	r3, [r7, #31]
 8005ad0:	e10c      	b.n	8005cec <UART_SetConfig+0x348>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a68      	ldr	r2, [pc, #416]	; (8005c78 <UART_SetConfig+0x2d4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d120      	bne.n	8005b1e <UART_SetConfig+0x17a>
 8005adc:	4b64      	ldr	r3, [pc, #400]	; (8005c70 <UART_SetConfig+0x2cc>)
 8005ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ae6:	2b30      	cmp	r3, #48	; 0x30
 8005ae8:	d013      	beq.n	8005b12 <UART_SetConfig+0x16e>
 8005aea:	2b30      	cmp	r3, #48	; 0x30
 8005aec:	d814      	bhi.n	8005b18 <UART_SetConfig+0x174>
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	d009      	beq.n	8005b06 <UART_SetConfig+0x162>
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	d810      	bhi.n	8005b18 <UART_SetConfig+0x174>
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <UART_SetConfig+0x15c>
 8005afa:	2b10      	cmp	r3, #16
 8005afc:	d006      	beq.n	8005b0c <UART_SetConfig+0x168>
 8005afe:	e00b      	b.n	8005b18 <UART_SetConfig+0x174>
 8005b00:	2300      	movs	r3, #0
 8005b02:	77fb      	strb	r3, [r7, #31]
 8005b04:	e0f2      	b.n	8005cec <UART_SetConfig+0x348>
 8005b06:	2302      	movs	r3, #2
 8005b08:	77fb      	strb	r3, [r7, #31]
 8005b0a:	e0ef      	b.n	8005cec <UART_SetConfig+0x348>
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	77fb      	strb	r3, [r7, #31]
 8005b10:	e0ec      	b.n	8005cec <UART_SetConfig+0x348>
 8005b12:	2308      	movs	r3, #8
 8005b14:	77fb      	strb	r3, [r7, #31]
 8005b16:	e0e9      	b.n	8005cec <UART_SetConfig+0x348>
 8005b18:	2310      	movs	r3, #16
 8005b1a:	77fb      	strb	r3, [r7, #31]
 8005b1c:	e0e6      	b.n	8005cec <UART_SetConfig+0x348>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a56      	ldr	r2, [pc, #344]	; (8005c7c <UART_SetConfig+0x2d8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d120      	bne.n	8005b6a <UART_SetConfig+0x1c6>
 8005b28:	4b51      	ldr	r3, [pc, #324]	; (8005c70 <UART_SetConfig+0x2cc>)
 8005b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b32:	2bc0      	cmp	r3, #192	; 0xc0
 8005b34:	d013      	beq.n	8005b5e <UART_SetConfig+0x1ba>
 8005b36:	2bc0      	cmp	r3, #192	; 0xc0
 8005b38:	d814      	bhi.n	8005b64 <UART_SetConfig+0x1c0>
 8005b3a:	2b80      	cmp	r3, #128	; 0x80
 8005b3c:	d009      	beq.n	8005b52 <UART_SetConfig+0x1ae>
 8005b3e:	2b80      	cmp	r3, #128	; 0x80
 8005b40:	d810      	bhi.n	8005b64 <UART_SetConfig+0x1c0>
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <UART_SetConfig+0x1a8>
 8005b46:	2b40      	cmp	r3, #64	; 0x40
 8005b48:	d006      	beq.n	8005b58 <UART_SetConfig+0x1b4>
 8005b4a:	e00b      	b.n	8005b64 <UART_SetConfig+0x1c0>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	77fb      	strb	r3, [r7, #31]
 8005b50:	e0cc      	b.n	8005cec <UART_SetConfig+0x348>
 8005b52:	2302      	movs	r3, #2
 8005b54:	77fb      	strb	r3, [r7, #31]
 8005b56:	e0c9      	b.n	8005cec <UART_SetConfig+0x348>
 8005b58:	2304      	movs	r3, #4
 8005b5a:	77fb      	strb	r3, [r7, #31]
 8005b5c:	e0c6      	b.n	8005cec <UART_SetConfig+0x348>
 8005b5e:	2308      	movs	r3, #8
 8005b60:	77fb      	strb	r3, [r7, #31]
 8005b62:	e0c3      	b.n	8005cec <UART_SetConfig+0x348>
 8005b64:	2310      	movs	r3, #16
 8005b66:	77fb      	strb	r3, [r7, #31]
 8005b68:	e0c0      	b.n	8005cec <UART_SetConfig+0x348>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a44      	ldr	r2, [pc, #272]	; (8005c80 <UART_SetConfig+0x2dc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d125      	bne.n	8005bc0 <UART_SetConfig+0x21c>
 8005b74:	4b3e      	ldr	r3, [pc, #248]	; (8005c70 <UART_SetConfig+0x2cc>)
 8005b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b82:	d017      	beq.n	8005bb4 <UART_SetConfig+0x210>
 8005b84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b88:	d817      	bhi.n	8005bba <UART_SetConfig+0x216>
 8005b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b8e:	d00b      	beq.n	8005ba8 <UART_SetConfig+0x204>
 8005b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b94:	d811      	bhi.n	8005bba <UART_SetConfig+0x216>
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <UART_SetConfig+0x1fe>
 8005b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b9e:	d006      	beq.n	8005bae <UART_SetConfig+0x20a>
 8005ba0:	e00b      	b.n	8005bba <UART_SetConfig+0x216>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	77fb      	strb	r3, [r7, #31]
 8005ba6:	e0a1      	b.n	8005cec <UART_SetConfig+0x348>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	77fb      	strb	r3, [r7, #31]
 8005bac:	e09e      	b.n	8005cec <UART_SetConfig+0x348>
 8005bae:	2304      	movs	r3, #4
 8005bb0:	77fb      	strb	r3, [r7, #31]
 8005bb2:	e09b      	b.n	8005cec <UART_SetConfig+0x348>
 8005bb4:	2308      	movs	r3, #8
 8005bb6:	77fb      	strb	r3, [r7, #31]
 8005bb8:	e098      	b.n	8005cec <UART_SetConfig+0x348>
 8005bba:	2310      	movs	r3, #16
 8005bbc:	77fb      	strb	r3, [r7, #31]
 8005bbe:	e095      	b.n	8005cec <UART_SetConfig+0x348>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a2f      	ldr	r2, [pc, #188]	; (8005c84 <UART_SetConfig+0x2e0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d125      	bne.n	8005c16 <UART_SetConfig+0x272>
 8005bca:	4b29      	ldr	r3, [pc, #164]	; (8005c70 <UART_SetConfig+0x2cc>)
 8005bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bd8:	d017      	beq.n	8005c0a <UART_SetConfig+0x266>
 8005bda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bde:	d817      	bhi.n	8005c10 <UART_SetConfig+0x26c>
 8005be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005be4:	d00b      	beq.n	8005bfe <UART_SetConfig+0x25a>
 8005be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bea:	d811      	bhi.n	8005c10 <UART_SetConfig+0x26c>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <UART_SetConfig+0x254>
 8005bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf4:	d006      	beq.n	8005c04 <UART_SetConfig+0x260>
 8005bf6:	e00b      	b.n	8005c10 <UART_SetConfig+0x26c>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	77fb      	strb	r3, [r7, #31]
 8005bfc:	e076      	b.n	8005cec <UART_SetConfig+0x348>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	77fb      	strb	r3, [r7, #31]
 8005c02:	e073      	b.n	8005cec <UART_SetConfig+0x348>
 8005c04:	2304      	movs	r3, #4
 8005c06:	77fb      	strb	r3, [r7, #31]
 8005c08:	e070      	b.n	8005cec <UART_SetConfig+0x348>
 8005c0a:	2308      	movs	r3, #8
 8005c0c:	77fb      	strb	r3, [r7, #31]
 8005c0e:	e06d      	b.n	8005cec <UART_SetConfig+0x348>
 8005c10:	2310      	movs	r3, #16
 8005c12:	77fb      	strb	r3, [r7, #31]
 8005c14:	e06a      	b.n	8005cec <UART_SetConfig+0x348>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1b      	ldr	r2, [pc, #108]	; (8005c88 <UART_SetConfig+0x2e4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d138      	bne.n	8005c92 <UART_SetConfig+0x2ee>
 8005c20:	4b13      	ldr	r3, [pc, #76]	; (8005c70 <UART_SetConfig+0x2cc>)
 8005c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c26:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005c2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c2e:	d017      	beq.n	8005c60 <UART_SetConfig+0x2bc>
 8005c30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c34:	d82a      	bhi.n	8005c8c <UART_SetConfig+0x2e8>
 8005c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3a:	d00b      	beq.n	8005c54 <UART_SetConfig+0x2b0>
 8005c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c40:	d824      	bhi.n	8005c8c <UART_SetConfig+0x2e8>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <UART_SetConfig+0x2aa>
 8005c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4a:	d006      	beq.n	8005c5a <UART_SetConfig+0x2b6>
 8005c4c:	e01e      	b.n	8005c8c <UART_SetConfig+0x2e8>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	77fb      	strb	r3, [r7, #31]
 8005c52:	e04b      	b.n	8005cec <UART_SetConfig+0x348>
 8005c54:	2302      	movs	r3, #2
 8005c56:	77fb      	strb	r3, [r7, #31]
 8005c58:	e048      	b.n	8005cec <UART_SetConfig+0x348>
 8005c5a:	2304      	movs	r3, #4
 8005c5c:	77fb      	strb	r3, [r7, #31]
 8005c5e:	e045      	b.n	8005cec <UART_SetConfig+0x348>
 8005c60:	2308      	movs	r3, #8
 8005c62:	77fb      	strb	r3, [r7, #31]
 8005c64:	e042      	b.n	8005cec <UART_SetConfig+0x348>
 8005c66:	bf00      	nop
 8005c68:	efff69f3 	.word	0xefff69f3
 8005c6c:	40011000 	.word	0x40011000
 8005c70:	40023800 	.word	0x40023800
 8005c74:	40004400 	.word	0x40004400
 8005c78:	40004800 	.word	0x40004800
 8005c7c:	40004c00 	.word	0x40004c00
 8005c80:	40005000 	.word	0x40005000
 8005c84:	40011400 	.word	0x40011400
 8005c88:	40007800 	.word	0x40007800
 8005c8c:	2310      	movs	r3, #16
 8005c8e:	77fb      	strb	r3, [r7, #31]
 8005c90:	e02c      	b.n	8005cec <UART_SetConfig+0x348>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a72      	ldr	r2, [pc, #456]	; (8005e60 <UART_SetConfig+0x4bc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d125      	bne.n	8005ce8 <UART_SetConfig+0x344>
 8005c9c:	4b71      	ldr	r3, [pc, #452]	; (8005e64 <UART_SetConfig+0x4c0>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ca6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005caa:	d017      	beq.n	8005cdc <UART_SetConfig+0x338>
 8005cac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005cb0:	d817      	bhi.n	8005ce2 <UART_SetConfig+0x33e>
 8005cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb6:	d00b      	beq.n	8005cd0 <UART_SetConfig+0x32c>
 8005cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cbc:	d811      	bhi.n	8005ce2 <UART_SetConfig+0x33e>
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <UART_SetConfig+0x326>
 8005cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cc6:	d006      	beq.n	8005cd6 <UART_SetConfig+0x332>
 8005cc8:	e00b      	b.n	8005ce2 <UART_SetConfig+0x33e>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	77fb      	strb	r3, [r7, #31]
 8005cce:	e00d      	b.n	8005cec <UART_SetConfig+0x348>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	77fb      	strb	r3, [r7, #31]
 8005cd4:	e00a      	b.n	8005cec <UART_SetConfig+0x348>
 8005cd6:	2304      	movs	r3, #4
 8005cd8:	77fb      	strb	r3, [r7, #31]
 8005cda:	e007      	b.n	8005cec <UART_SetConfig+0x348>
 8005cdc:	2308      	movs	r3, #8
 8005cde:	77fb      	strb	r3, [r7, #31]
 8005ce0:	e004      	b.n	8005cec <UART_SetConfig+0x348>
 8005ce2:	2310      	movs	r3, #16
 8005ce4:	77fb      	strb	r3, [r7, #31]
 8005ce6:	e001      	b.n	8005cec <UART_SetConfig+0x348>
 8005ce8:	2310      	movs	r3, #16
 8005cea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cf4:	d15b      	bne.n	8005dae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005cf6:	7ffb      	ldrb	r3, [r7, #31]
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d828      	bhi.n	8005d4e <UART_SetConfig+0x3aa>
 8005cfc:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <UART_SetConfig+0x360>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d29 	.word	0x08005d29
 8005d08:	08005d31 	.word	0x08005d31
 8005d0c:	08005d39 	.word	0x08005d39
 8005d10:	08005d4f 	.word	0x08005d4f
 8005d14:	08005d3f 	.word	0x08005d3f
 8005d18:	08005d4f 	.word	0x08005d4f
 8005d1c:	08005d4f 	.word	0x08005d4f
 8005d20:	08005d4f 	.word	0x08005d4f
 8005d24:	08005d47 	.word	0x08005d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d28:	f7ff f9d6 	bl	80050d8 <HAL_RCC_GetPCLK1Freq>
 8005d2c:	61b8      	str	r0, [r7, #24]
        break;
 8005d2e:	e013      	b.n	8005d58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d30:	f7ff f9e6 	bl	8005100 <HAL_RCC_GetPCLK2Freq>
 8005d34:	61b8      	str	r0, [r7, #24]
        break;
 8005d36:	e00f      	b.n	8005d58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d38:	4b4b      	ldr	r3, [pc, #300]	; (8005e68 <UART_SetConfig+0x4c4>)
 8005d3a:	61bb      	str	r3, [r7, #24]
        break;
 8005d3c:	e00c      	b.n	8005d58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d3e:	f7ff f8b9 	bl	8004eb4 <HAL_RCC_GetSysClockFreq>
 8005d42:	61b8      	str	r0, [r7, #24]
        break;
 8005d44:	e008      	b.n	8005d58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4a:	61bb      	str	r3, [r7, #24]
        break;
 8005d4c:	e004      	b.n	8005d58 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	77bb      	strb	r3, [r7, #30]
        break;
 8005d56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d074      	beq.n	8005e48 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	005a      	lsls	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	085b      	lsrs	r3, r3, #1
 8005d68:	441a      	add	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b0f      	cmp	r3, #15
 8005d78:	d916      	bls.n	8005da8 <UART_SetConfig+0x404>
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d80:	d212      	bcs.n	8005da8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f023 030f 	bic.w	r3, r3, #15
 8005d8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	89fb      	ldrh	r3, [r7, #14]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	89fa      	ldrh	r2, [r7, #14]
 8005da4:	60da      	str	r2, [r3, #12]
 8005da6:	e04f      	b.n	8005e48 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	77bb      	strb	r3, [r7, #30]
 8005dac:	e04c      	b.n	8005e48 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dae:	7ffb      	ldrb	r3, [r7, #31]
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d828      	bhi.n	8005e06 <UART_SetConfig+0x462>
 8005db4:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <UART_SetConfig+0x418>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005de1 	.word	0x08005de1
 8005dc0:	08005de9 	.word	0x08005de9
 8005dc4:	08005df1 	.word	0x08005df1
 8005dc8:	08005e07 	.word	0x08005e07
 8005dcc:	08005df7 	.word	0x08005df7
 8005dd0:	08005e07 	.word	0x08005e07
 8005dd4:	08005e07 	.word	0x08005e07
 8005dd8:	08005e07 	.word	0x08005e07
 8005ddc:	08005dff 	.word	0x08005dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005de0:	f7ff f97a 	bl	80050d8 <HAL_RCC_GetPCLK1Freq>
 8005de4:	61b8      	str	r0, [r7, #24]
        break;
 8005de6:	e013      	b.n	8005e10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005de8:	f7ff f98a 	bl	8005100 <HAL_RCC_GetPCLK2Freq>
 8005dec:	61b8      	str	r0, [r7, #24]
        break;
 8005dee:	e00f      	b.n	8005e10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005df0:	4b1d      	ldr	r3, [pc, #116]	; (8005e68 <UART_SetConfig+0x4c4>)
 8005df2:	61bb      	str	r3, [r7, #24]
        break;
 8005df4:	e00c      	b.n	8005e10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005df6:	f7ff f85d 	bl	8004eb4 <HAL_RCC_GetSysClockFreq>
 8005dfa:	61b8      	str	r0, [r7, #24]
        break;
 8005dfc:	e008      	b.n	8005e10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e02:	61bb      	str	r3, [r7, #24]
        break;
 8005e04:	e004      	b.n	8005e10 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	77bb      	strb	r3, [r7, #30]
        break;
 8005e0e:	bf00      	nop
    }

    if (pclk != 0U)
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d018      	beq.n	8005e48 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	085a      	lsrs	r2, r3, #1
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	441a      	add	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b0f      	cmp	r3, #15
 8005e2e:	d909      	bls.n	8005e44 <UART_SetConfig+0x4a0>
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e36:	d205      	bcs.n	8005e44 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60da      	str	r2, [r3, #12]
 8005e42:	e001      	b.n	8005e48 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005e54:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	40007c00 	.word	0x40007c00
 8005e64:	40023800 	.word	0x40023800
 8005e68:	00f42400 	.word	0x00f42400

08005e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00a      	beq.n	8005e96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00a      	beq.n	8005eb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00a      	beq.n	8005eda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00a      	beq.n	8005efc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00a      	beq.n	8005f1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01a      	beq.n	8005f82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f6a:	d10a      	bne.n	8005f82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	605a      	str	r2, [r3, #4]
  }
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af02      	add	r7, sp, #8
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fc0:	f7fd fc8e 	bl	80038e0 <HAL_GetTick>
 8005fc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0308 	and.w	r3, r3, #8
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d10e      	bne.n	8005ff2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f81b 	bl	800601e <UART_WaitOnFlagUntilTimeout>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e011      	b.n	8006016 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b09c      	sub	sp, #112	; 0x70
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	603b      	str	r3, [r7, #0]
 800602a:	4613      	mov	r3, r2
 800602c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800602e:	e0a7      	b.n	8006180 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006036:	f000 80a3 	beq.w	8006180 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603a:	f7fd fc51 	bl	80038e0 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006046:	429a      	cmp	r2, r3
 8006048:	d302      	bcc.n	8006050 <UART_WaitOnFlagUntilTimeout+0x32>
 800604a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800604c:	2b00      	cmp	r3, #0
 800604e:	d13f      	bne.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800605e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006060:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006064:	667b      	str	r3, [r7, #100]	; 0x64
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800606e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006070:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006074:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800607c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e6      	bne.n	8006050 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3308      	adds	r3, #8
 8006088:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	f023 0301 	bic.w	r3, r3, #1
 8006098:	663b      	str	r3, [r7, #96]	; 0x60
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3308      	adds	r3, #8
 80060a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80060a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1e5      	bne.n	8006082 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e068      	b.n	80061a2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d050      	beq.n	8006180 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ec:	d148      	bne.n	8006180 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060f6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800610c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006116:	637b      	str	r3, [r7, #52]	; 0x34
 8006118:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800611c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e6      	bne.n	80060f8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3308      	adds	r3, #8
 8006130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	613b      	str	r3, [r7, #16]
   return(result);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	66bb      	str	r3, [r7, #104]	; 0x68
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3308      	adds	r3, #8
 8006148:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800614a:	623a      	str	r2, [r7, #32]
 800614c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	69f9      	ldr	r1, [r7, #28]
 8006150:	6a3a      	ldr	r2, [r7, #32]
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	61bb      	str	r3, [r7, #24]
   return(result);
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e5      	bne.n	800612a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2220      	movs	r2, #32
 8006162:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2220      	movs	r2, #32
 8006170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e010      	b.n	80061a2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	69da      	ldr	r2, [r3, #28]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	4013      	ands	r3, r2
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	429a      	cmp	r2, r3
 800618e:	bf0c      	ite	eq
 8006190:	2301      	moveq	r3, #1
 8006192:	2300      	movne	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	429a      	cmp	r2, r3
 800619c:	f43f af48 	beq.w	8006030 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3770      	adds	r7, #112	; 0x70
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061ac:	b084      	sub	sp, #16
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	f107 001c 	add.w	r0, r7, #28
 80061ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d120      	bne.n	8006206 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	4b20      	ldr	r3, [pc, #128]	; (8006258 <USB_CoreInit+0xac>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d105      	bne.n	80061fa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fa96 	bl	800672c <USB_CoreReset>
 8006200:	4603      	mov	r3, r0
 8006202:	73fb      	strb	r3, [r7, #15]
 8006204:	e010      	b.n	8006228 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fa8a 	bl	800672c <USB_CoreReset>
 8006218:	4603      	mov	r3, r0
 800621a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006220:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	2b01      	cmp	r3, #1
 800622c:	d10b      	bne.n	8006246 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f043 0206 	orr.w	r2, r3, #6
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f043 0220 	orr.w	r2, r3, #32
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006246:	7bfb      	ldrb	r3, [r7, #15]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006252:	b004      	add	sp, #16
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	ffbdffbf 	.word	0xffbdffbf

0800625c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f023 0201 	bic.w	r2, r3, #1
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	460b      	mov	r3, r1
 8006288:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800629a:	78fb      	ldrb	r3, [r7, #3]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d115      	bne.n	80062cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062ac:	2001      	movs	r0, #1
 80062ae:	f7fd fb23 	bl	80038f8 <HAL_Delay>
      ms++;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3301      	adds	r3, #1
 80062b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fa29 	bl	8006710 <USB_GetMode>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d01e      	beq.n	8006302 <USB_SetCurrentMode+0x84>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b31      	cmp	r3, #49	; 0x31
 80062c8:	d9f0      	bls.n	80062ac <USB_SetCurrentMode+0x2e>
 80062ca:	e01a      	b.n	8006302 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d115      	bne.n	80062fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062de:	2001      	movs	r0, #1
 80062e0:	f7fd fb0a 	bl	80038f8 <HAL_Delay>
      ms++;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3301      	adds	r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa10 	bl	8006710 <USB_GetMode>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <USB_SetCurrentMode+0x84>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b31      	cmp	r3, #49	; 0x31
 80062fa:	d9f0      	bls.n	80062de <USB_SetCurrentMode+0x60>
 80062fc:	e001      	b.n	8006302 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e005      	b.n	800630e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b32      	cmp	r3, #50	; 0x32
 8006306:	d101      	bne.n	800630c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e000      	b.n	800630e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006318:	b084      	sub	sp, #16
 800631a:	b580      	push	{r7, lr}
 800631c:	b086      	sub	sp, #24
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006332:	2300      	movs	r3, #0
 8006334:	613b      	str	r3, [r7, #16]
 8006336:	e009      	b.n	800634c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	3340      	adds	r3, #64	; 0x40
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	2200      	movs	r2, #0
 8006344:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	3301      	adds	r3, #1
 800634a:	613b      	str	r3, [r7, #16]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	2b0e      	cmp	r3, #14
 8006350:	d9f2      	bls.n	8006338 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006354:	2b00      	cmp	r3, #0
 8006356:	d11c      	bne.n	8006392 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006366:	f043 0302 	orr.w	r3, r3, #2
 800636a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	e005      	b.n	800639e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063a4:	461a      	mov	r2, r3
 80063a6:	2300      	movs	r3, #0
 80063a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b0:	4619      	mov	r1, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b8:	461a      	mov	r2, r3
 80063ba:	680b      	ldr	r3, [r1, #0]
 80063bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d10c      	bne.n	80063de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d104      	bne.n	80063d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80063ca:	2100      	movs	r1, #0
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f965 	bl	800669c <USB_SetDevSpeed>
 80063d2:	e008      	b.n	80063e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80063d4:	2101      	movs	r1, #1
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f960 	bl	800669c <USB_SetDevSpeed>
 80063dc:	e003      	b.n	80063e6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80063de:	2103      	movs	r1, #3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f95b 	bl	800669c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063e6:	2110      	movs	r1, #16
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f8f3 	bl	80065d4 <USB_FlushTxFifo>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f91f 	bl	800663c <USB_FlushRxFifo>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640e:	461a      	mov	r2, r3
 8006410:	2300      	movs	r3, #0
 8006412:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641a:	461a      	mov	r2, r3
 800641c:	2300      	movs	r3, #0
 800641e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006426:	461a      	mov	r2, r3
 8006428:	2300      	movs	r3, #0
 800642a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800642c:	2300      	movs	r3, #0
 800642e:	613b      	str	r3, [r7, #16]
 8006430:	e043      	b.n	80064ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006448:	d118      	bne.n	800647c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645c:	461a      	mov	r2, r3
 800645e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	e013      	b.n	800648e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006472:	461a      	mov	r2, r3
 8006474:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	e008      	b.n	800648e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006488:	461a      	mov	r2, r3
 800648a:	2300      	movs	r3, #0
 800648c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649a:	461a      	mov	r2, r3
 800649c:	2300      	movs	r3, #0
 800649e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	461a      	mov	r2, r3
 80064ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	3301      	adds	r3, #1
 80064b8:	613b      	str	r3, [r7, #16]
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d3b7      	bcc.n	8006432 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064c2:	2300      	movs	r3, #0
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	e043      	b.n	8006550 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064de:	d118      	bne.n	8006512 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10a      	bne.n	80064fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f2:	461a      	mov	r2, r3
 80064f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	e013      	b.n	8006524 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006508:	461a      	mov	r2, r3
 800650a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	e008      	b.n	8006524 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651e:	461a      	mov	r2, r3
 8006520:	2300      	movs	r3, #0
 8006522:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006530:	461a      	mov	r2, r3
 8006532:	2300      	movs	r3, #0
 8006534:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006542:	461a      	mov	r2, r3
 8006544:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006548:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	3301      	adds	r3, #1
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	429a      	cmp	r2, r3
 8006556:	d3b7      	bcc.n	80064c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800656a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006578:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	2b00      	cmp	r3, #0
 800657e:	d105      	bne.n	800658c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	f043 0210 	orr.w	r2, r3, #16
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699a      	ldr	r2, [r3, #24]
 8006590:	4b0e      	ldr	r3, [pc, #56]	; (80065cc <USB_DevInit+0x2b4>)
 8006592:	4313      	orrs	r3, r2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659a:	2b00      	cmp	r3, #0
 800659c:	d005      	beq.n	80065aa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	f043 0208 	orr.w	r2, r3, #8
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80065aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d105      	bne.n	80065bc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	699a      	ldr	r2, [r3, #24]
 80065b4:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <USB_DevInit+0x2b8>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065c8:	b004      	add	sp, #16
 80065ca:	4770      	bx	lr
 80065cc:	803c3800 	.word	0x803c3800
 80065d0:	40000004 	.word	0x40000004

080065d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3301      	adds	r3, #1
 80065e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4a13      	ldr	r2, [pc, #76]	; (8006638 <USB_FlushTxFifo+0x64>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d901      	bls.n	80065f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e01b      	b.n	800662c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	daf2      	bge.n	80065e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	019b      	lsls	r3, r3, #6
 8006604:	f043 0220 	orr.w	r2, r3, #32
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3301      	adds	r3, #1
 8006610:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4a08      	ldr	r2, [pc, #32]	; (8006638 <USB_FlushTxFifo+0x64>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d901      	bls.n	800661e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e006      	b.n	800662c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b20      	cmp	r3, #32
 8006628:	d0f0      	beq.n	800660c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	00030d40 	.word	0x00030d40

0800663c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3301      	adds	r3, #1
 800664c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4a11      	ldr	r2, [pc, #68]	; (8006698 <USB_FlushRxFifo+0x5c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d901      	bls.n	800665a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e018      	b.n	800668c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	daf2      	bge.n	8006648 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2210      	movs	r2, #16
 800666a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3301      	adds	r3, #1
 8006670:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4a08      	ldr	r2, [pc, #32]	; (8006698 <USB_FlushRxFifo+0x5c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d901      	bls.n	800667e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e006      	b.n	800668c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f003 0310 	and.w	r3, r3, #16
 8006686:	2b10      	cmp	r3, #16
 8006688:	d0f0      	beq.n	800666c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	00030d40 	.word	0x00030d40

0800669c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	68f9      	ldr	r1, [r7, #12]
 80066b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066bc:	4313      	orrs	r3, r2
 80066be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b085      	sub	sp, #20
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066e8:	f023 0303 	bic.w	r3, r3, #3
 80066ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066fc:	f043 0302 	orr.w	r3, r3, #2
 8006700:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	f003 0301 	and.w	r3, r3, #1
}
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3301      	adds	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4a13      	ldr	r2, [pc, #76]	; (8006790 <USB_CoreReset+0x64>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d901      	bls.n	800674a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e01b      	b.n	8006782 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	daf2      	bge.n	8006738 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f043 0201 	orr.w	r2, r3, #1
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	3301      	adds	r3, #1
 8006766:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4a09      	ldr	r2, [pc, #36]	; (8006790 <USB_CoreReset+0x64>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d901      	bls.n	8006774 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e006      	b.n	8006782 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b01      	cmp	r3, #1
 800677e:	d0f0      	beq.n	8006762 <USB_CoreReset+0x36>

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	00030d40 	.word	0x00030d40

08006794 <memset>:
 8006794:	4402      	add	r2, r0
 8006796:	4603      	mov	r3, r0
 8006798:	4293      	cmp	r3, r2
 800679a:	d100      	bne.n	800679e <memset+0xa>
 800679c:	4770      	bx	lr
 800679e:	f803 1b01 	strb.w	r1, [r3], #1
 80067a2:	e7f9      	b.n	8006798 <memset+0x4>

080067a4 <__libc_init_array>:
 80067a4:	b570      	push	{r4, r5, r6, lr}
 80067a6:	4d0d      	ldr	r5, [pc, #52]	; (80067dc <__libc_init_array+0x38>)
 80067a8:	4c0d      	ldr	r4, [pc, #52]	; (80067e0 <__libc_init_array+0x3c>)
 80067aa:	1b64      	subs	r4, r4, r5
 80067ac:	10a4      	asrs	r4, r4, #2
 80067ae:	2600      	movs	r6, #0
 80067b0:	42a6      	cmp	r6, r4
 80067b2:	d109      	bne.n	80067c8 <__libc_init_array+0x24>
 80067b4:	4d0b      	ldr	r5, [pc, #44]	; (80067e4 <__libc_init_array+0x40>)
 80067b6:	4c0c      	ldr	r4, [pc, #48]	; (80067e8 <__libc_init_array+0x44>)
 80067b8:	f000 f826 	bl	8006808 <_init>
 80067bc:	1b64      	subs	r4, r4, r5
 80067be:	10a4      	asrs	r4, r4, #2
 80067c0:	2600      	movs	r6, #0
 80067c2:	42a6      	cmp	r6, r4
 80067c4:	d105      	bne.n	80067d2 <__libc_init_array+0x2e>
 80067c6:	bd70      	pop	{r4, r5, r6, pc}
 80067c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067cc:	4798      	blx	r3
 80067ce:	3601      	adds	r6, #1
 80067d0:	e7ee      	b.n	80067b0 <__libc_init_array+0xc>
 80067d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d6:	4798      	blx	r3
 80067d8:	3601      	adds	r6, #1
 80067da:	e7f2      	b.n	80067c2 <__libc_init_array+0x1e>
 80067dc:	08006870 	.word	0x08006870
 80067e0:	08006870 	.word	0x08006870
 80067e4:	08006870 	.word	0x08006870
 80067e8:	08006874 	.word	0x08006874

080067ec <memcpy>:
 80067ec:	440a      	add	r2, r1
 80067ee:	4291      	cmp	r1, r2
 80067f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80067f4:	d100      	bne.n	80067f8 <memcpy+0xc>
 80067f6:	4770      	bx	lr
 80067f8:	b510      	push	{r4, lr}
 80067fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006802:	4291      	cmp	r1, r2
 8006804:	d1f9      	bne.n	80067fa <memcpy+0xe>
 8006806:	bd10      	pop	{r4, pc}

08006808 <_init>:
 8006808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680a:	bf00      	nop
 800680c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680e:	bc08      	pop	{r3}
 8006810:	469e      	mov	lr, r3
 8006812:	4770      	bx	lr

08006814 <_fini>:
 8006814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006816:	bf00      	nop
 8006818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800681a:	bc08      	pop	{r3}
 800681c:	469e      	mov	lr, r3
 800681e:	4770      	bx	lr
