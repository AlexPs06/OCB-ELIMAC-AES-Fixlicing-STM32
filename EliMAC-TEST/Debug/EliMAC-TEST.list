
EliMAC-TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e3c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800800c  0800800c  0000900c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080d4  080080d4  0000a1e4  2**0
                  CONTENTS
  4 .ARM          00000008  080080d4  080080d4  000090d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080dc  080080dc  0000a1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080dc  080080dc  000090dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080e0  080080e0  000090e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  080080e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000a4  08008188  0000a0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000144  08008228  0000a144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00002c50  200001e4  080082c8  0000a1e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20002e34  080082c8  0000ae34  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000132c4  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002aa5  00000000  00000000  0001d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ef8  00000000  00000000  0001ff80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b78  00000000  00000000  00020e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028756  00000000  00000000  000219f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000128af  00000000  00000000  0004a146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f2e33  00000000  00000000  0005c9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014f828  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000475c  00000000  00000000  0014f86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000008b  00000000  00000000  00153fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ff4 	.word	0x08007ff4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08007ff4 	.word	0x08007ff4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ELIMAC>:
void xor_nonce(unsigned char * plaintext, unsigned char * nonce, unsigned int size);
void ELIMAC(unsigned char* plaintext,  unsigned char plaintext_size, unsigned char* key1, unsigned char* key2, unsigned char rounds, unsigned char* tag);
void H(unsigned char* ptext0,  unsigned char *ptext1, uint32_t* rkeys_ffs_H, unsigned char rounds);
void I(unsigned char* ptext0,  unsigned char *ptext1, uint32_t* rkeys_ffs_H, unsigned char rounds);

void ELIMAC(unsigned char* plaintext,  const unsigned char plaintext_size, unsigned char* key1, unsigned char* key2, unsigned char rounds, unsigned char* tag){
 80005a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005a4:	f5ad 7d65 	sub.w	sp, sp, #916	@ 0x394
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	f507 7662 	add.w	r6, r7, #904	@ 0x388
 80005ae:	f5a6 765d 	sub.w	r6, r6, #884	@ 0x374
 80005b2:	6030      	str	r0, [r6, #0]
 80005b4:	4608      	mov	r0, r1
 80005b6:	f507 7162 	add.w	r1, r7, #904	@ 0x388
 80005ba:	f5a1 715f 	sub.w	r1, r1, #892	@ 0x37c
 80005be:	600a      	str	r2, [r1, #0]
 80005c0:	f507 7262 	add.w	r2, r7, #904	@ 0x388
 80005c4:	f5a2 7260 	sub.w	r2, r2, #896	@ 0x380
 80005c8:	6013      	str	r3, [r2, #0]
 80005ca:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 80005ce:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 80005d2:	4602      	mov	r2, r0
 80005d4:	701a      	strb	r2, [r3, #0]
 80005d6:	466b      	mov	r3, sp
 80005d8:	461e      	mov	r6, r3

    unsigned char ptext0[plaintext_size];
 80005da:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 80005de:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	3b01      	subs	r3, #1
 80005e6:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 80005ea:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 80005ee:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2200      	movs	r2, #0
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	607a      	str	r2, [r7, #4]
 80005fa:	f04f 0200 	mov.w	r2, #0
 80005fe:	f04f 0300 	mov.w	r3, #0
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	00cb      	lsls	r3, r1, #3
 8000606:	6839      	ldr	r1, [r7, #0]
 8000608:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800060c:	6839      	ldr	r1, [r7, #0]
 800060e:	00ca      	lsls	r2, r1, #3
 8000610:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 8000614:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	469a      	mov	sl, r3
 800061e:	4693      	mov	fp, r2
 8000620:	f04f 0200 	mov.w	r2, #0
 8000624:	f04f 0300 	mov.w	r3, #0
 8000628:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800062c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000630:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000634:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 8000638:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	3307      	adds	r3, #7
 8000640:	08db      	lsrs	r3, r3, #3
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	ebad 0d03 	sub.w	sp, sp, r3
 8000648:	ab02      	add	r3, sp, #8
 800064a:	3300      	adds	r3, #0
 800064c:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
    unsigned char ptext1[plaintext_size];
 8000650:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 8000654:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	3b01      	subs	r3, #1
 800065c:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
 8000660:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 8000664:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2200      	movs	r2, #0
 800066c:	4698      	mov	r8, r3
 800066e:	4691      	mov	r9, r2
 8000670:	f04f 0200 	mov.w	r2, #0
 8000674:	f04f 0300 	mov.w	r3, #0
 8000678:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800067c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000680:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000684:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 8000688:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2200      	movs	r2, #0
 8000690:	461c      	mov	r4, r3
 8000692:	4615      	mov	r5, r2
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	00eb      	lsls	r3, r5, #3
 800069e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006a2:	00e2      	lsls	r2, r4, #3
 80006a4:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 80006a8:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	3307      	adds	r3, #7
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	ebad 0d03 	sub.w	sp, sp, r3
 80006b8:	ab02      	add	r3, sp, #8
 80006ba:	3300      	adds	r3, #0
 80006bc:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c

    unsigned char i_n1[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 80006c0:	4b9e      	ldr	r3, [pc, #632]	@ (800093c <ELIMAC+0x39c>)
 80006c2:	f507 7456 	add.w	r4, r7, #856	@ 0x358
 80006c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char i_n2[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 80006cc:	4b9b      	ldr	r3, [pc, #620]	@ (800093c <ELIMAC+0x39c>)
 80006ce:	f507 7452 	add.w	r4, r7, #840	@ 0x348
 80006d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char i_n1_t[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 80006d8:	4b98      	ldr	r3, [pc, #608]	@ (800093c <ELIMAC+0x39c>)
 80006da:	f507 744e 	add.w	r4, r7, #824	@ 0x338
 80006de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char i_n2_t[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 80006e4:	4b95      	ldr	r3, [pc, #596]	@ (800093c <ELIMAC+0x39c>)
 80006e6:	f507 744a 	add.w	r4, r7, #808	@ 0x328
 80006ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char S1[bit_size];
    unsigned char S2[bit_size];

    unsigned int add_nonce_0[4] = {0,0,0,0};
 80006f0:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
    unsigned int add_nonce_1[4] = {1,1,1,1};
 80006fe:	4b90      	ldr	r3, [pc, #576]	@ (8000940 <ELIMAC+0x3a0>)
 8000700:	f507 743a 	add.w	r4, r7, #744	@ 0x2e8
 8000704:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000706:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned int add_nonce_2[4] = {2,2,2,2};
 800070a:	4b8e      	ldr	r3, [pc, #568]	@ (8000944 <ELIMAC+0x3a4>)
 800070c:	f507 7436 	add.w	r4, r7, #728	@ 0x2d8
 8000710:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000712:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    uint32_t rkeys_ffs[88];
    uint32_t rkeys_ffs_H[88];

    for (size_t i = 0; i < plaintext_size; i++)
 8000716:	2300      	movs	r3, #0
 8000718:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 800071c:	e012      	b.n	8000744 <ELIMAC+0x1a4>
    {
        ptext1[i]=0;
 800071e:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8000722:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8000726:	4413      	add	r3, r2
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
        ptext0[i]=0;
 800072c:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8000730:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8000734:	4413      	add	r3, r2
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < plaintext_size; i++)
 800073a:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 800073e:	3301      	adds	r3, #1
 8000740:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8000744:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 8000748:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 8000752:	429a      	cmp	r2, r3
 8000754:	d3e3      	bcc.n	800071e <ELIMAC+0x17e>
    }

    divide_plaintext(plaintext, ptext0, ptext1, plaintext_size);
 8000756:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 800075a:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	f507 7262 	add.w	r2, r7, #904	@ 0x388
 8000764:	f5a2 705d 	sub.w	r0, r2, #884	@ 0x374
 8000768:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 800076c:	f8d7 1374 	ldr.w	r1, [r7, #884]	@ 0x374
 8000770:	6800      	ldr	r0, [r0, #0]
 8000772:	f000 f9c2 	bl	8000afa <divide_plaintext>

    for (size_t i = 0; i < bit_size; i++)
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 800077c:	e012      	b.n	80007a4 <ELIMAC+0x204>
    {
        S1[i]=0;
 800077e:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8000782:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8000786:	4413      	add	r3, r2
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
        S2[i]=0;
 800078c:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8000790:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8000794:	4413      	add	r3, r2
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < bit_size; i++)
 800079a:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 800079e:	3301      	adds	r3, #1
 80007a0:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 80007a4:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80007a8:	2b0f      	cmp	r3, #15
 80007aa:	d9e8      	bls.n	800077e <ELIMAC+0x1de>
    }

    aes128_keyschedule_ffs(rkeys_ffs_H, key1, key1);
 80007ac:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 80007b0:	f5a3 725f 	sub.w	r2, r3, #892	@ 0x37c
 80007b4:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 80007b8:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80007bc:	f107 0018 	add.w	r0, r7, #24
 80007c0:	6812      	ldr	r2, [r2, #0]
 80007c2:	6819      	ldr	r1, [r3, #0]
 80007c4:	f002 fae0 	bl	8002d88 <aes128_keyschedule_ffs>
    aes128_keyschedule_ffs(rkeys_ffs, key2, key2);
 80007c8:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 80007cc:	f5a3 7260 	sub.w	r2, r3, #896	@ 0x380
 80007d0:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 80007d4:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 80007d8:	f507 70bc 	add.w	r0, r7, #376	@ 0x178
 80007dc:	6812      	ldr	r2, [r2, #0]
 80007de:	6819      	ldr	r1, [r3, #0]
 80007e0:	f002 fad2 	bl	8002d88 <aes128_keyschedule_ffs>

    int block_size = plaintext_size/32;
 80007e4:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 80007e8:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	095b      	lsrs	r3, r3, #5
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368

    for (int i = 0; i < block_size; i++){
 80007f6:	2300      	movs	r3, #0
 80007f8:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 80007fc:	e06f      	b.n	80008de <ELIMAC+0x33e>

        add_nonce(add_nonce_0, (unsigned int *)i_n1,(unsigned int *)i_n1_t, 4);
 80007fe:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8000802:	f507 7156 	add.w	r1, r7, #856	@ 0x358
 8000806:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 800080a:	2304      	movs	r3, #4
 800080c:	f000 f928 	bl	8000a60 <add_nonce>
        add_nonce(add_nonce_1, (unsigned int *)i_n2,(unsigned int *)i_n2_t, 4);
 8000810:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 8000814:	f507 7152 	add.w	r1, r7, #840	@ 0x348
 8000818:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 800081c:	2304      	movs	r3, #4
 800081e:	f000 f91f 	bl	8000a60 <add_nonce>

        H(i_n1_t, i_n2_t, rkeys_ffs_H, rounds);
 8000822:	f897 33b0 	ldrb.w	r3, [r7, #944]	@ 0x3b0
 8000826:	f107 0218 	add.w	r2, r7, #24
 800082a:	f507 714a 	add.w	r1, r7, #808	@ 0x328
 800082e:	f507 704e 	add.w	r0, r7, #824	@ 0x338
 8000832:	f000 f889 	bl	8000948 <H>

        //two_Rounds_aes128_encrypt_ffs(ptext0, ptext1, i_n1, i_n2, rkeys_ffs_H);

        xor_nonce( ptext0+ (i*16), i_n1_t, 16);
 8000836:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 800083a:	011b      	lsls	r3, r3, #4
 800083c:	461a      	mov	r2, r3
 800083e:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8000842:	4413      	add	r3, r2
 8000844:	f507 714e 	add.w	r1, r7, #824	@ 0x338
 8000848:	2210      	movs	r2, #16
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f930 	bl	8000ab0 <xor_nonce>
        xor_nonce( ptext1+ (i*16), i_n2_t, 16);
 8000850:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	461a      	mov	r2, r3
 8000858:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800085c:	4413      	add	r3, r2
 800085e:	f507 714a 	add.w	r1, r7, #808	@ 0x328
 8000862:	2210      	movs	r2, #16
 8000864:	4618      	mov	r0, r3
 8000866:	f000 f923 	bl	8000ab0 <xor_nonce>

        I(ptext0,  ptext1, rkeys_ffs, 4);
 800086a:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800086e:	2304      	movs	r3, #4
 8000870:	f8d7 136c 	ldr.w	r1, [r7, #876]	@ 0x36c
 8000874:	f8d7 0374 	ldr.w	r0, [r7, #884]	@ 0x374
 8000878:	f000 f8ac 	bl	80009d4 <I>

        xor_nonce( S1,ptext0+ (i*16), 16);
 800087c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8000880:	011b      	lsls	r3, r3, #4
 8000882:	461a      	mov	r2, r3
 8000884:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8000888:	1899      	adds	r1, r3, r2
 800088a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800088e:	2210      	movs	r2, #16
 8000890:	4618      	mov	r0, r3
 8000892:	f000 f90d 	bl	8000ab0 <xor_nonce>
        xor_nonce( S2,ptext1+ (i*16), 16);
 8000896:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 800089a:	011b      	lsls	r3, r3, #4
 800089c:	461a      	mov	r2, r3
 800089e:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80008a2:	1899      	adds	r1, r3, r2
 80008a4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80008a8:	2210      	movs	r2, #16
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f900 	bl	8000ab0 <xor_nonce>

        add_nonce(add_nonce_2, add_nonce_0,add_nonce_0, 4);
 80008b0:	f507 723e 	add.w	r2, r7, #760	@ 0x2f8
 80008b4:	f507 713e 	add.w	r1, r7, #760	@ 0x2f8
 80008b8:	f507 7036 	add.w	r0, r7, #728	@ 0x2d8
 80008bc:	2304      	movs	r3, #4
 80008be:	f000 f8cf 	bl	8000a60 <add_nonce>
        add_nonce(add_nonce_2, add_nonce_1,add_nonce_1, 4);
 80008c2:	f507 723a 	add.w	r2, r7, #744	@ 0x2e8
 80008c6:	f507 713a 	add.w	r1, r7, #744	@ 0x2e8
 80008ca:	f507 7036 	add.w	r0, r7, #728	@ 0x2d8
 80008ce:	2304      	movs	r3, #4
 80008d0:	f000 f8c6 	bl	8000a60 <add_nonce>
    for (int i = 0; i < block_size; i++){
 80008d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80008d8:	3301      	adds	r3, #1
 80008da:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 80008de:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 80008e2:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80008e6:	429a      	cmp	r2, r3
 80008e8:	db89      	blt.n	80007fe <ELIMAC+0x25e>

    }
    print_array(S1,16);
 80008ea:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80008ee:	2110      	movs	r1, #16
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 f94b 	bl	8000b8c <print_array>
    print_array(S2,16);
 80008f6:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80008fa:	2110      	movs	r1, #16
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 f945 	bl	8000b8c <print_array>
    xor_nonce( S1,S2, 16);
 8000902:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8000906:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800090a:	2210      	movs	r2, #16
 800090c:	4618      	mov	r0, r3
 800090e:	f000 f8cf 	bl	8000ab0 <xor_nonce>


    aes128_encrypt_ffs(tag, S2, S1,S1, rkeys_ffs);
 8000912:	f507 7046 	add.w	r0, r7, #792	@ 0x318
 8000916:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 800091a:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 800091e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	4603      	mov	r3, r0
 8000926:	f8d7 03b4 	ldr.w	r0, [r7, #948]	@ 0x3b4
 800092a:	f001 fdab 	bl	8002484 <aes128_encrypt_ffs>
 800092e:	46b5      	mov	sp, r6

}
 8000930:	bf00      	nop
 8000932:	f507 7763 	add.w	r7, r7, #908	@ 0x38c
 8000936:	46bd      	mov	sp, r7
 8000938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800093c:	0800800c 	.word	0x0800800c
 8000940:	0800801c 	.word	0x0800801c
 8000944:	0800802c 	.word	0x0800802c

08000948 <H>:

void H(unsigned char* ptext0,  unsigned char *ptext1, uint32_t *rkeys_ffs_H, unsigned char rounds){
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af02      	add	r7, sp, #8
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
 8000954:	70fb      	strb	r3, [r7, #3]

    switch (rounds)
 8000956:	78fb      	ldrb	r3, [r7, #3]
 8000958:	3b02      	subs	r3, #2
 800095a:	2b06      	cmp	r3, #6
 800095c:	d834      	bhi.n	80009c8 <H+0x80>
 800095e:	a201      	add	r2, pc, #4	@ (adr r2, 8000964 <H+0x1c>)
 8000960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000964:	08000981 	.word	0x08000981
 8000968:	080009c9 	.word	0x080009c9
 800096c:	08000993 	.word	0x08000993
 8000970:	080009c9 	.word	0x080009c9
 8000974:	080009a5 	.word	0x080009a5
 8000978:	080009c9 	.word	0x080009c9
 800097c:	080009b7 	.word	0x080009b7
    {
    case 2:
        two_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	68b9      	ldr	r1, [r7, #8]
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f001 fe57 	bl	800263e <two_Rounds_aes128_encrypt_ffs>
        break;
 8000990:	e01b      	b.n	80009ca <H+0x82>
    case 4:
        four_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	68b9      	ldr	r1, [r7, #8]
 800099c:	68f8      	ldr	r0, [r7, #12]
 800099e:	f001 fe98 	bl	80026d2 <four_Rounds_aes128_encrypt_ffs>
        break;
 80009a2:	e012      	b.n	80009ca <H+0x82>
    case 6:
        six_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	f001 fefa 	bl	80027a8 <six_Rounds_aes128_encrypt_ffs>
        break;
 80009b4:	e009      	b.n	80009ca <H+0x82>
    case 8:
        eigth_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	68b9      	ldr	r1, [r7, #8]
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f001 ff87 	bl	80028d4 <eigth_Rounds_aes128_encrypt_ffs>
        break;
 80009c6:	e000      	b.n	80009ca <H+0x82>

    default:
        break;
 80009c8:	bf00      	nop
    }

}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop

080009d4 <I>:

void I(unsigned char* ptext0,  unsigned char *ptext1, uint32_t *rkeys_ffs_H, unsigned char rounds){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af02      	add	r7, sp, #8
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
 80009e0:	70fb      	strb	r3, [r7, #3]

    switch (rounds)
 80009e2:	78fb      	ldrb	r3, [r7, #3]
 80009e4:	3b02      	subs	r3, #2
 80009e6:	2b06      	cmp	r3, #6
 80009e8:	d834      	bhi.n	8000a54 <I+0x80>
 80009ea:	a201      	add	r2, pc, #4	@ (adr r2, 80009f0 <I+0x1c>)
 80009ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f0:	08000a0d 	.word	0x08000a0d
 80009f4:	08000a55 	.word	0x08000a55
 80009f8:	08000a1f 	.word	0x08000a1f
 80009fc:	08000a55 	.word	0x08000a55
 8000a00:	08000a31 	.word	0x08000a31
 8000a04:	08000a55 	.word	0x08000a55
 8000a08:	08000a43 	.word	0x08000a43
    {
    case 2:
        two_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f001 fe11 	bl	800263e <two_Rounds_aes128_encrypt_ffs>
        break;
 8000a1c:	e01b      	b.n	8000a56 <I+0x82>
    case 4:
        four_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	68b9      	ldr	r1, [r7, #8]
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f001 fe52 	bl	80026d2 <four_Rounds_aes128_encrypt_ffs>
        break;
 8000a2e:	e012      	b.n	8000a56 <I+0x82>
    case 6:
        six_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f001 feb4 	bl	80027a8 <six_Rounds_aes128_encrypt_ffs>
        break;
 8000a40:	e009      	b.n	8000a56 <I+0x82>
    case 8:
        eigth_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	68b9      	ldr	r1, [r7, #8]
 8000a4c:	68f8      	ldr	r0, [r7, #12]
 8000a4e:	f001 ff41 	bl	80028d4 <eigth_Rounds_aes128_encrypt_ffs>
        break;
 8000a52:	e000      	b.n	8000a56 <I+0x82>

    default:
        break;
 8000a54:	bf00      	nop
    }

}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop

08000a60 <add_nonce>:

void add_nonce(unsigned int * add_nonce, unsigned int * nonce, unsigned int * nonce_result, unsigned int size){
 8000a60:	b480      	push	{r7}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
 8000a6c:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < size; i++){
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e012      	b.n	8000a9a <add_nonce+0x3a>
        nonce_result[i]=nonce[i]+ add_nonce[i];
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	68ba      	ldr	r2, [r7, #8]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	6819      	ldr	r1, [r3, #0]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	4413      	add	r3, r2
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	4403      	add	r3, r0
 8000a90:	440a      	add	r2, r1
 8000a92:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < size; i++){
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	3301      	adds	r3, #1
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	697a      	ldr	r2, [r7, #20]
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d3e8      	bcc.n	8000a74 <add_nonce+0x14>
    }

}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	371c      	adds	r7, #28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <xor_nonce>:

void xor_nonce(unsigned char * plaintext, unsigned char * nonce, unsigned int size){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b087      	sub	sp, #28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < size; i++){
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	e010      	b.n	8000ae4 <xor_nonce+0x34>
        plaintext[i]=nonce[i]^ plaintext[i];
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	7819      	ldrb	r1, [r3, #0]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	4413      	add	r3, r2
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	4403      	add	r3, r0
 8000ad8:	404a      	eors	r2, r1
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < size; i++){
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d3ea      	bcc.n	8000ac2 <xor_nonce+0x12>
    }

}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	371c      	adds	r7, #28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <divide_plaintext>:
void divide_plaintext(unsigned char* plaintext, unsigned char* ptext0,  unsigned char* ptext1,unsigned int plaintext_size){
 8000afa:	b480      	push	{r7}
 8000afc:	b089      	sub	sp, #36	@ 0x24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	603b      	str	r3, [r7, #0]
    int condicion = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61fb      	str	r3, [r7, #28]
    size_t j=0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
    size_t k=0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	e02c      	b.n	8000b74 <divide_plaintext+0x7a>

        if (i%16==0 && i!=0)
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d106      	bne.n	8000b32 <divide_plaintext+0x38>
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <divide_plaintext+0x38>
            condicion=condicion^1;
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	f083 0301 	eor.w	r3, r3, #1
 8000b30:	61fb      	str	r3, [r7, #28]

        if (condicion)
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d008      	beq.n	8000b4a <divide_plaintext+0x50>
            ptext0[j] = plaintext[i];
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	441a      	add	r2, r3
 8000b3e:	68b9      	ldr	r1, [r7, #8]
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	440b      	add	r3, r1
 8000b44:	7812      	ldrb	r2, [r2, #0]
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	e007      	b.n	8000b5a <divide_plaintext+0x60>
        else
            ptext1[k] = plaintext[i];
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	441a      	add	r2, r3
 8000b50:	6879      	ldr	r1, [r7, #4]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	440b      	add	r3, r1
 8000b56:	7812      	ldrb	r2, [r2, #0]
 8000b58:	701a      	strb	r2, [r3, #0]

        if (condicion)
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <divide_plaintext+0x6e>
            j++;
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	3301      	adds	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	e002      	b.n	8000b6e <divide_plaintext+0x74>
        else
            k++;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	3301      	adds	r3, #1
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d3ce      	bcc.n	8000b1a <divide_plaintext+0x20>
    }
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	3724      	adds	r7, #36	@ 0x24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <print_array>:
        key1[i] = key[i];
    }
}


void print_array(uint8_t * plaintext, uint8_t size){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	70fb      	strb	r3, [r7, #3]
    for (size_t i = 0; i < size; i++){
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	e00a      	b.n	8000bb4 <print_array+0x28>
        printf("%02x ", plaintext[i]);
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4808      	ldr	r0, [pc, #32]	@ (8000bcc <print_array+0x40>)
 8000baa:	f006 f9a3 	bl	8006ef4 <iprintf>
    for (size_t i = 0; i < size; i++){
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	78fb      	ldrb	r3, [r7, #3]
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d3f0      	bcc.n	8000b9e <print_array+0x12>
    }
    printf("\n");
 8000bbc:	200a      	movs	r0, #10
 8000bbe:	f006 f9ab 	bl	8006f18 <putchar>
}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	0800803c 	.word	0x0800803c

08000bd0 <packing>:

}


void packing(uint32_t* out, const unsigned char* in0,
		const unsigned char* in1) {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	out[0] = LE_LOAD_32(in0);
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	3303      	adds	r3, #3
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	061a      	lsls	r2, r3, #24
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	3302      	adds	r3, #2
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	041b      	lsls	r3, r3, #16
 8000bec:	431a      	orrs	r2, r3
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	021b      	lsls	r3, r3, #8
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	7812      	ldrb	r2, [r2, #0]
 8000bfc:	431a      	orrs	r2, r3
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	601a      	str	r2, [r3, #0]
	out[1] = LE_LOAD_32(in1);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3303      	adds	r3, #3
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	061a      	lsls	r2, r3, #24
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	041b      	lsls	r3, r3, #16
 8000c12:	431a      	orrs	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3301      	adds	r3, #1
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	4619      	mov	r1, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3304      	adds	r3, #4
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]
	out[2] = LE_LOAD_32(in0 + 4);
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	3307      	adds	r3, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	061a      	lsls	r2, r3, #24
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3306      	adds	r3, #6
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	041b      	lsls	r3, r3, #16
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	3305      	adds	r3, #5
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	021b      	lsls	r3, r3, #8
 8000c46:	431a      	orrs	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	3304      	adds	r3, #4
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	3308      	adds	r3, #8
 8000c54:	430a      	orrs	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]
	out[3] = LE_LOAD_32(in1 + 4);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3307      	adds	r3, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	061a      	lsls	r2, r3, #24
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3306      	adds	r3, #6
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	041b      	lsls	r3, r3, #16
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3305      	adds	r3, #5
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	431a      	orrs	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3304      	adds	r3, #4
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	330c      	adds	r3, #12
 8000c80:	430a      	orrs	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]
	out[4] = LE_LOAD_32(in0 + 8);
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	330b      	adds	r3, #11
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	061a      	lsls	r2, r3, #24
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	330a      	adds	r3, #10
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	041b      	lsls	r3, r3, #16
 8000c94:	431a      	orrs	r2, r3
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	3309      	adds	r3, #9
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	3308      	adds	r3, #8
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3310      	adds	r3, #16
 8000cac:	430a      	orrs	r2, r1
 8000cae:	601a      	str	r2, [r3, #0]
	out[5] = LE_LOAD_32(in1 + 8);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	330b      	adds	r3, #11
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	061a      	lsls	r2, r3, #24
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	330a      	adds	r3, #10
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	041b      	lsls	r3, r3, #16
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3309      	adds	r3, #9
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3308      	adds	r3, #8
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3314      	adds	r3, #20
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]
	out[6] = LE_LOAD_32(in0 + 12);
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	330f      	adds	r3, #15
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	061a      	lsls	r2, r3, #24
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	330e      	adds	r3, #14
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	041b      	lsls	r3, r3, #16
 8000cec:	431a      	orrs	r2, r3
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	330d      	adds	r3, #13
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	330c      	adds	r3, #12
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	3318      	adds	r3, #24
 8000d04:	430a      	orrs	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
	out[7] = LE_LOAD_32(in1 + 12);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	330f      	adds	r3, #15
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	061a      	lsls	r2, r3, #24
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	330e      	adds	r3, #14
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	041b      	lsls	r3, r3, #16
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	330d      	adds	r3, #13
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	431a      	orrs	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	330c      	adds	r3, #12
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	331c      	adds	r3, #28
 8000d30:	430a      	orrs	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[1], out[0], 0x55555555, 1);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	3304      	adds	r3, #4
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	085b      	lsrs	r3, r3, #1
 8000d40:	4053      	eors	r3, r2
 8000d42:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	405a      	eors	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	3304      	adds	r3, #4
 8000d58:	6819      	ldr	r1, [r3, #0]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005a      	lsls	r2, r3, #1
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	3304      	adds	r3, #4
 8000d62:	404a      	eors	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[3], out[2], 0x55555555, 1);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3308      	adds	r3, #8
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	330c      	adds	r3, #12
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	085b      	lsrs	r3, r3, #1
 8000d74:	4053      	eors	r3, r2
 8000d76:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3308      	adds	r3, #8
 8000d80:	6819      	ldr	r1, [r3, #0]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	3308      	adds	r3, #8
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	404a      	eors	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	330c      	adds	r3, #12
 8000d90:	6819      	ldr	r1, [r3, #0]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005a      	lsls	r2, r3, #1
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	330c      	adds	r3, #12
 8000d9a:	404a      	eors	r2, r1
 8000d9c:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[5], out[4], 0x55555555, 1);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	3310      	adds	r3, #16
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	3314      	adds	r3, #20
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	085b      	lsrs	r3, r3, #1
 8000dac:	4053      	eors	r3, r2
 8000dae:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3310      	adds	r3, #16
 8000db8:	6819      	ldr	r1, [r3, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3310      	adds	r3, #16
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	404a      	eors	r2, r1
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3314      	adds	r3, #20
 8000dc8:	6819      	ldr	r1, [r3, #0]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	005a      	lsls	r2, r3, #1
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3314      	adds	r3, #20
 8000dd2:	404a      	eors	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[6], 0x55555555, 1);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3318      	adds	r3, #24
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	331c      	adds	r3, #28
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	085b      	lsrs	r3, r3, #1
 8000de4:	4053      	eors	r3, r2
 8000de6:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3318      	adds	r3, #24
 8000df0:	6819      	ldr	r1, [r3, #0]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3318      	adds	r3, #24
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	404a      	eors	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	331c      	adds	r3, #28
 8000e00:	6819      	ldr	r1, [r3, #0]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005a      	lsls	r2, r3, #1
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	331c      	adds	r3, #28
 8000e0a:	404a      	eors	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[2], out[0], 0x33333333, 2);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3308      	adds	r3, #8
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	4053      	eors	r3, r2
 8000e1c:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	405a      	eors	r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	3308      	adds	r3, #8
 8000e32:	6819      	ldr	r1, [r3, #0]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	009a      	lsls	r2, r3, #2
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3308      	adds	r3, #8
 8000e3c:	404a      	eors	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[3], out[1], 0x33333333, 2);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3304      	adds	r3, #4
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	330c      	adds	r3, #12
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	4053      	eors	r3, r2
 8000e50:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	6819      	ldr	r1, [r3, #0]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3304      	adds	r3, #4
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	404a      	eors	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	330c      	adds	r3, #12
 8000e6a:	6819      	ldr	r1, [r3, #0]
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	009a      	lsls	r2, r3, #2
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	330c      	adds	r3, #12
 8000e74:	404a      	eors	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[6], out[4], 0x33333333, 2);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3310      	adds	r3, #16
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3318      	adds	r3, #24
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	4053      	eors	r3, r2
 8000e88:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	3310      	adds	r3, #16
 8000e92:	6819      	ldr	r1, [r3, #0]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	3310      	adds	r3, #16
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	404a      	eors	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3318      	adds	r3, #24
 8000ea2:	6819      	ldr	r1, [r3, #0]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	009a      	lsls	r2, r3, #2
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	3318      	adds	r3, #24
 8000eac:	404a      	eors	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[5], 0x33333333, 2);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3314      	adds	r3, #20
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	331c      	adds	r3, #28
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	4053      	eors	r3, r2
 8000ec0:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3314      	adds	r3, #20
 8000eca:	6819      	ldr	r1, [r3, #0]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	3314      	adds	r3, #20
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	404a      	eors	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	331c      	adds	r3, #28
 8000eda:	6819      	ldr	r1, [r3, #0]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	009a      	lsls	r2, r3, #2
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	331c      	adds	r3, #28
 8000ee4:	404a      	eors	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[4], out[0], 0x0f0f0f0f, 4);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3310      	adds	r3, #16
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	091b      	lsrs	r3, r3, #4
 8000ef4:	4053      	eors	r3, r2
 8000ef6:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	405a      	eors	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3310      	adds	r3, #16
 8000f0c:	6819      	ldr	r1, [r3, #0]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	011a      	lsls	r2, r3, #4
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3310      	adds	r3, #16
 8000f16:	404a      	eors	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[5], out[1], 0x0f0f0f0f, 4);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3314      	adds	r3, #20
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	4053      	eors	r3, r2
 8000f2a:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3304      	adds	r3, #4
 8000f34:	6819      	ldr	r1, [r3, #0]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	404a      	eors	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3314      	adds	r3, #20
 8000f44:	6819      	ldr	r1, [r3, #0]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	011a      	lsls	r2, r3, #4
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3314      	adds	r3, #20
 8000f4e:	404a      	eors	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[6], out[2], 0x0f0f0f0f, 4);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3308      	adds	r3, #8
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3318      	adds	r3, #24
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	4053      	eors	r3, r2
 8000f62:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3308      	adds	r3, #8
 8000f6c:	6819      	ldr	r1, [r3, #0]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3308      	adds	r3, #8
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	404a      	eors	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	3318      	adds	r3, #24
 8000f7c:	6819      	ldr	r1, [r3, #0]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	011a      	lsls	r2, r3, #4
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3318      	adds	r3, #24
 8000f86:	404a      	eors	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[3], 0x0f0f0f0f, 4);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	330c      	adds	r3, #12
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	331c      	adds	r3, #28
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	4053      	eors	r3, r2
 8000f9a:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	330c      	adds	r3, #12
 8000fa4:	6819      	ldr	r1, [r3, #0]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	330c      	adds	r3, #12
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	404a      	eors	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	331c      	adds	r3, #28
 8000fb4:	6819      	ldr	r1, [r3, #0]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	011a      	lsls	r2, r3, #4
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	331c      	adds	r3, #28
 8000fbe:	404a      	eors	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	371c      	adds	r7, #28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <unpacking>:

/******************************************************************************
* Unpacks the 256-bit internal state in two 128-bit blocs out0, out1.
******************************************************************************/
static void unpacking(unsigned char* out0, unsigned char* out1, uint32_t* in) {
 8000fce:	b480      	push	{r7}
 8000fd0:	b087      	sub	sp, #28
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	SWAPMOVE(in[4], in[0], 0x0f0f0f0f, 4);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3310      	adds	r3, #16
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	4053      	eors	r3, r2
 8000fe8:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	405a      	eors	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3310      	adds	r3, #16
 8000ffe:	6819      	ldr	r1, [r3, #0]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	011a      	lsls	r2, r3, #4
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3310      	adds	r3, #16
 8001008:	404a      	eors	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[5], in[1], 0x0f0f0f0f, 4);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3304      	adds	r3, #4
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3314      	adds	r3, #20
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	091b      	lsrs	r3, r3, #4
 800101a:	4053      	eors	r3, r2
 800101c:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3304      	adds	r3, #4
 8001026:	6819      	ldr	r1, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3304      	adds	r3, #4
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	404a      	eors	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3314      	adds	r3, #20
 8001036:	6819      	ldr	r1, [r3, #0]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	011a      	lsls	r2, r3, #4
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3314      	adds	r3, #20
 8001040:	404a      	eors	r2, r1
 8001042:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[6], in[2], 0x0f0f0f0f, 4);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3308      	adds	r3, #8
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3318      	adds	r3, #24
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	091b      	lsrs	r3, r3, #4
 8001052:	4053      	eors	r3, r2
 8001054:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3308      	adds	r3, #8
 800105e:	6819      	ldr	r1, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3308      	adds	r3, #8
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	404a      	eors	r2, r1
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3318      	adds	r3, #24
 800106e:	6819      	ldr	r1, [r3, #0]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	011a      	lsls	r2, r3, #4
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3318      	adds	r3, #24
 8001078:	404a      	eors	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[3], 0x0f0f0f0f, 4);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	330c      	adds	r3, #12
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	331c      	adds	r3, #28
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	4053      	eors	r3, r2
 800108c:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	330c      	adds	r3, #12
 8001096:	6819      	ldr	r1, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	330c      	adds	r3, #12
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	404a      	eors	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	331c      	adds	r3, #28
 80010a6:	6819      	ldr	r1, [r3, #0]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	011a      	lsls	r2, r3, #4
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	331c      	adds	r3, #28
 80010b0:	404a      	eors	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[2], in[0], 0x33333333, 2);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3308      	adds	r3, #8
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	4053      	eors	r3, r2
 80010c2:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	405a      	eors	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3308      	adds	r3, #8
 80010d8:	6819      	ldr	r1, [r3, #0]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	009a      	lsls	r2, r3, #2
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3308      	adds	r3, #8
 80010e2:	404a      	eors	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[3], in[1], 0x33333333, 2);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3304      	adds	r3, #4
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	330c      	adds	r3, #12
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	4053      	eors	r3, r2
 80010f6:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3304      	adds	r3, #4
 8001100:	6819      	ldr	r1, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3304      	adds	r3, #4
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	404a      	eors	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	330c      	adds	r3, #12
 8001110:	6819      	ldr	r1, [r3, #0]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	009a      	lsls	r2, r3, #2
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	330c      	adds	r3, #12
 800111a:	404a      	eors	r2, r1
 800111c:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[6], in[4], 0x33333333, 2);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3310      	adds	r3, #16
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3318      	adds	r3, #24
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	4053      	eors	r3, r2
 800112e:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3310      	adds	r3, #16
 8001138:	6819      	ldr	r1, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3310      	adds	r3, #16
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	404a      	eors	r2, r1
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3318      	adds	r3, #24
 8001148:	6819      	ldr	r1, [r3, #0]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	009a      	lsls	r2, r3, #2
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3318      	adds	r3, #24
 8001152:	404a      	eors	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[5], 0x33333333, 2);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3314      	adds	r3, #20
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	331c      	adds	r3, #28
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	4053      	eors	r3, r2
 8001166:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3314      	adds	r3, #20
 8001170:	6819      	ldr	r1, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3314      	adds	r3, #20
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	404a      	eors	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	331c      	adds	r3, #28
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	009a      	lsls	r2, r3, #2
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	331c      	adds	r3, #28
 800118a:	404a      	eors	r2, r1
 800118c:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[1], in[0], 0x55555555, 1);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3304      	adds	r3, #4
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	085b      	lsrs	r3, r3, #1
 800119a:	4053      	eors	r3, r2
 800119c:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	405a      	eors	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3304      	adds	r3, #4
 80011b2:	6819      	ldr	r1, [r3, #0]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005a      	lsls	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3304      	adds	r3, #4
 80011bc:	404a      	eors	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[3], in[2], 0x55555555, 1);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3308      	adds	r3, #8
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	330c      	adds	r3, #12
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	085b      	lsrs	r3, r3, #1
 80011ce:	4053      	eors	r3, r2
 80011d0:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3308      	adds	r3, #8
 80011da:	6819      	ldr	r1, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3308      	adds	r3, #8
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	404a      	eors	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	330c      	adds	r3, #12
 80011ea:	6819      	ldr	r1, [r3, #0]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005a      	lsls	r2, r3, #1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	330c      	adds	r3, #12
 80011f4:	404a      	eors	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[5], in[4], 0x55555555, 1);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3310      	adds	r3, #16
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3314      	adds	r3, #20
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	085b      	lsrs	r3, r3, #1
 8001206:	4053      	eors	r3, r2
 8001208:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3310      	adds	r3, #16
 8001212:	6819      	ldr	r1, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3310      	adds	r3, #16
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	404a      	eors	r2, r1
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3314      	adds	r3, #20
 8001222:	6819      	ldr	r1, [r3, #0]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	005a      	lsls	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3314      	adds	r3, #20
 800122c:	404a      	eors	r2, r1
 800122e:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[6], 0x55555555, 1);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3318      	adds	r3, #24
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	331c      	adds	r3, #28
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	085b      	lsrs	r3, r3, #1
 800123e:	4053      	eors	r3, r2
 8001240:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3318      	adds	r3, #24
 800124a:	6819      	ldr	r1, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3318      	adds	r3, #24
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	404a      	eors	r2, r1
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	331c      	adds	r3, #28
 800125a:	6819      	ldr	r1, [r3, #0]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005a      	lsls	r2, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	331c      	adds	r3, #28
 8001264:	404a      	eors	r2, r1
 8001266:	601a      	str	r2, [r3, #0]
	LE_STORE_32(out0, in[0]);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	0a1a      	lsrs	r2, r3, #8
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	3301      	adds	r3, #1
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	701a      	strb	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	0c1a      	lsrs	r2, r3, #16
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3302      	adds	r3, #2
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	0e1a      	lsrs	r2, r3, #24
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3303      	adds	r3, #3
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 4, in[2]);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3308      	adds	r3, #8
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3304      	adds	r3, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3308      	adds	r3, #8
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	0a1a      	lsrs	r2, r3, #8
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	3305      	adds	r3, #5
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3308      	adds	r3, #8
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	0c1a      	lsrs	r2, r3, #16
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3306      	adds	r3, #6
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3308      	adds	r3, #8
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	0e1a      	lsrs	r2, r3, #24
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3307      	adds	r3, #7
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 8, in[4]);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3310      	adds	r3, #16
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3308      	adds	r3, #8
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3310      	adds	r3, #16
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	0a1a      	lsrs	r2, r3, #8
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3309      	adds	r3, #9
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3310      	adds	r3, #16
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	0c1a      	lsrs	r2, r3, #16
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	330a      	adds	r3, #10
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3310      	adds	r3, #16
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	0e1a      	lsrs	r2, r3, #24
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	330b      	adds	r3, #11
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 12, in[6]);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3318      	adds	r3, #24
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	330c      	adds	r3, #12
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3318      	adds	r3, #24
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	0a1a      	lsrs	r2, r3, #8
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	330d      	adds	r3, #13
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3318      	adds	r3, #24
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	0c1a      	lsrs	r2, r3, #16
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	330e      	adds	r3, #14
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	701a      	strb	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3318      	adds	r3, #24
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	0e1a      	lsrs	r2, r3, #24
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	330f      	adds	r3, #15
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1, in[1]);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3304      	adds	r3, #4
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	701a      	strb	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3304      	adds	r3, #4
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0a1a      	lsrs	r2, r3, #8
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	3301      	adds	r3, #1
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3304      	adds	r3, #4
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	0c1a      	lsrs	r2, r3, #16
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	3302      	adds	r3, #2
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3304      	adds	r3, #4
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0e1a      	lsrs	r2, r3, #24
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3303      	adds	r3, #3
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 4, in[3]);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	330c      	adds	r3, #12
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	3304      	adds	r3, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	330c      	adds	r3, #12
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	0a1a      	lsrs	r2, r3, #8
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	3305      	adds	r3, #5
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	330c      	adds	r3, #12
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	0c1a      	lsrs	r2, r3, #16
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	3306      	adds	r3, #6
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	701a      	strb	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	330c      	adds	r3, #12
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	0e1a      	lsrs	r2, r3, #24
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	3307      	adds	r3, #7
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 8, in[5]);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3314      	adds	r3, #20
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3308      	adds	r3, #8
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	701a      	strb	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3314      	adds	r3, #20
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	0a1a      	lsrs	r2, r3, #8
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3309      	adds	r3, #9
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3314      	adds	r3, #20
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	0c1a      	lsrs	r2, r3, #16
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	330a      	adds	r3, #10
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3314      	adds	r3, #20
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0e1a      	lsrs	r2, r3, #24
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	330b      	adds	r3, #11
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 12, in[7]);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	331c      	adds	r3, #28
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	330c      	adds	r3, #12
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	331c      	adds	r3, #28
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0a1a      	lsrs	r2, r3, #8
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	330d      	adds	r3, #13
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	331c      	adds	r3, #28
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	0c1a      	lsrs	r2, r3, #16
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	330e      	adds	r3, #14
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	701a      	strb	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	331c      	adds	r3, #28
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	0e1a      	lsrs	r2, r3, #24
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	330f      	adds	r3, #15
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	701a      	strb	r2, [r3, #0]
}
 800144c:	bf00      	nop
 800144e:	371c      	adds	r7, #28
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <ark>:

/******************************************************************************
* XOR the round key to the internal state. The round keys are expected to be 
* pre-computed and to be packed in the fixsliced representation.
******************************************************************************/
static void ark(uint32_t* state, const uint32_t* rkey) {
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 8; i++)
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e012      	b.n	800148e <ark+0x36>
		state[i] ^= rkey[i];
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	6819      	ldr	r1, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	4413      	add	r3, r2
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	4403      	add	r3, r0
 8001484:	404a      	eors	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3301      	adds	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b07      	cmp	r3, #7
 8001492:	dde9      	ble.n	8001468 <ark+0x10>
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <sbox>:
/******************************************************************************
* Bitsliced implementation of the AES Sbox based on Boyar, Peralta and Calik.
* See http://www.cs.yale.edu/homes/peralta/CircuitStuff/SLP_AES_113.txt
* Note that the 4 NOT (^= 0xffffffff) are moved to the key schedule.
******************************************************************************/
void sbox(uint32_t* state) {
 80014a2:	b480      	push	{r7}
 80014a4:	b095      	sub	sp, #84	@ 0x54
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4, t5,
		t6, t7, t8, t9, t10, t11, t12,
		t13, t14, t15, t16, t17;
	t0			= state[3] ^ state[5];
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	330c      	adds	r3, #12
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3314      	adds	r3, #20
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4053      	eors	r3, r2
 80014b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	t1			= state[0] ^ state[6];
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3318      	adds	r3, #24
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4053      	eors	r3, r2
 80014c6:	64bb      	str	r3, [r7, #72]	@ 0x48
	t2			= t1 ^ t0;
 80014c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80014ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014cc:	4053      	eors	r3, r2
 80014ce:	647b      	str	r3, [r7, #68]	@ 0x44
	t3			= state[4] ^ t2;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3310      	adds	r3, #16
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80014d8:	4053      	eors	r3, r2
 80014da:	643b      	str	r3, [r7, #64]	@ 0x40
	t4			= t3 ^ state[5];
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3314      	adds	r3, #20
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80014e4:	4053      	eors	r3, r2
 80014e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	t5			= t2 & t4;
 80014e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80014ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014ec:	4013      	ands	r3, r2
 80014ee:	63bb      	str	r3, [r7, #56]	@ 0x38
	t6			= t4 ^ state[7];
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	331c      	adds	r3, #28
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014f8:	4053      	eors	r3, r2
 80014fa:	637b      	str	r3, [r7, #52]	@ 0x34
	t7			= t3 ^ state[1];
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3304      	adds	r3, #4
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001504:	4053      	eors	r3, r2
 8001506:	633b      	str	r3, [r7, #48]	@ 0x30
	t8			= state[0] ^ state[3]; 
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	330c      	adds	r3, #12
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4053      	eors	r3, r2
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
	t9			= t7 ^ t8;
 8001516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800151a:	4053      	eors	r3, r2
 800151c:	62bb      	str	r3, [r7, #40]	@ 0x28
	t10			= t8 & t9;
 800151e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001522:	4013      	ands	r3, r2
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
	t11			= state[7] ^ t9; 
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	331c      	adds	r3, #28
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800152e:	4053      	eors	r3, r2
 8001530:	623b      	str	r3, [r7, #32]
	t12			= state[0] ^ state[5];
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3314      	adds	r3, #20
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4053      	eors	r3, r2
 800153e:	61fb      	str	r3, [r7, #28]
	t13			= state[1] ^ state[2];
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3304      	adds	r3, #4
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3308      	adds	r3, #8
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4053      	eors	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
	t14			= t4 ^ t13;
 8001550:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4053      	eors	r3, r2
 8001556:	617b      	str	r3, [r7, #20]
	t15			= t14 ^ t9;
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800155c:	4053      	eors	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
	t16			= t0 & t15;
 8001560:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
	t17			= t16 ^ t10;
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	4053      	eors	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
	state[1]	= t14 ^ t12; 
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3304      	adds	r3, #4
 8001574:	6979      	ldr	r1, [r7, #20]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	404a      	eors	r2, r1
 800157a:	601a      	str	r2, [r3, #0]
	state[2]	= t12 & t14;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3308      	adds	r3, #8
 8001580:	69f9      	ldr	r1, [r7, #28]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	400a      	ands	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3308      	adds	r3, #8
 800158c:	6819      	ldr	r1, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3308      	adds	r3, #8
 8001592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001594:	404a      	eors	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
	state[4]	= t13 ^ t9;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3310      	adds	r3, #16
 800159c:	69b9      	ldr	r1, [r7, #24]
 800159e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015a0:	404a      	eors	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]
	state[5]	= t1 ^ state[4];
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3310      	adds	r3, #16
 80015a8:	6819      	ldr	r1, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3314      	adds	r3, #20
 80015ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80015b0:	404a      	eors	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
	t3			= t1 & state[4];
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3310      	adds	r3, #16
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80015bc:	4013      	ands	r3, r2
 80015be:	643b      	str	r3, [r7, #64]	@ 0x40
	t10			= state[0] ^ state[4];
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3310      	adds	r3, #16
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4053      	eors	r3, r2
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
	t13 		^= state[7];
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	331c      	adds	r3, #28
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4053      	eors	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
	state[3] 	^= t13; 
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	330c      	adds	r3, #12
 80015de:	6819      	ldr	r1, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	330c      	adds	r3, #12
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	404a      	eors	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]
	t16			= state[3] & state[7];
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	330c      	adds	r3, #12
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	331c      	adds	r3, #28
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4013      	ands	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
	t16 		^= t5;
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015fe:	4053      	eors	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
	t16 		^= state[2];
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3308      	adds	r3, #8
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	4053      	eors	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
	state[1] 	^= t16;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3304      	adds	r3, #4
 8001612:	6819      	ldr	r1, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3304      	adds	r3, #4
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	404a      	eors	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
	state[0] 	^= t13;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	405a      	eors	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	601a      	str	r2, [r3, #0]
	t16			= state[0] & t11;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6a3a      	ldr	r2, [r7, #32]
 8001630:	4013      	ands	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
	t16 		^= t3;
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001638:	4053      	eors	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]
	state[2] 	^= t16;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3308      	adds	r3, #8
 8001640:	6819      	ldr	r1, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3308      	adds	r3, #8
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	404a      	eors	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3308      	adds	r3, #8
 8001650:	6819      	ldr	r1, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3308      	adds	r3, #8
 8001656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001658:	404a      	eors	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
	state[6] 	^= t13;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3318      	adds	r3, #24
 8001660:	6819      	ldr	r1, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3318      	adds	r3, #24
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	404a      	eors	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
	t10			= state[6] & t13;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3318      	adds	r3, #24
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
	t3 			^= t10;
 8001678:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	4053      	eors	r3, r2
 800167e:	643b      	str	r3, [r7, #64]	@ 0x40
	t3 			^= t17;
 8001680:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	4053      	eors	r3, r2
 8001686:	643b      	str	r3, [r7, #64]	@ 0x40
	state[5] 	^= t3;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3314      	adds	r3, #20
 800168c:	6819      	ldr	r1, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3314      	adds	r3, #20
 8001692:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001694:	404a      	eors	r2, r1
 8001696:	601a      	str	r2, [r3, #0]
	t3			= state[6] ^ t12;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3318      	adds	r3, #24
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	4053      	eors	r3, r2
 80016a2:	643b      	str	r3, [r7, #64]	@ 0x40
	t10			= t3 & t6;
 80016a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80016a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016a8:	4013      	ands	r3, r2
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
	t5 			^= t10;
 80016ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80016ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b0:	4053      	eors	r3, r2
 80016b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	t5 			^= t7;
 80016b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80016b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016b8:	4053      	eors	r3, r2
 80016ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	t5 			^= t17;
 80016bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	4053      	eors	r3, r2
 80016c2:	63bb      	str	r3, [r7, #56]	@ 0x38
	t7			= t5 & state[5];
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3314      	adds	r3, #20
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80016cc:	4013      	ands	r3, r2
 80016ce:	633b      	str	r3, [r7, #48]	@ 0x30
	t10			= state[2] ^ t7;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3308      	adds	r3, #8
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016d8:	4053      	eors	r3, r2
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
	t7 			^= state[1];
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3304      	adds	r3, #4
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016e4:	4053      	eors	r3, r2
 80016e6:	633b      	str	r3, [r7, #48]	@ 0x30
	t5 			^= state[1];
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3304      	adds	r3, #4
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80016f0:	4053      	eors	r3, r2
 80016f2:	63bb      	str	r3, [r7, #56]	@ 0x38
	t16			= t5 & t10;
 80016f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]
	state[1] 	^= t16;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3304      	adds	r3, #4
 8001700:	6819      	ldr	r1, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3304      	adds	r3, #4
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	404a      	eors	r2, r1
 800170a:	601a      	str	r2, [r3, #0]
	t17			= state[1] & state[0];
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3304      	adds	r3, #4
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4013      	ands	r3, r2
 8001718:	60bb      	str	r3, [r7, #8]
	t11			= state[1] & t11;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3304      	adds	r3, #4
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6a3a      	ldr	r2, [r7, #32]
 8001722:	4013      	ands	r3, r2
 8001724:	623b      	str	r3, [r7, #32]
	t16			= state[5] ^ state[2];
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3314      	adds	r3, #20
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3308      	adds	r3, #8
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4053      	eors	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
	t7 			&= t16;
 8001736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4013      	ands	r3, r2
 800173c:	633b      	str	r3, [r7, #48]	@ 0x30
	t7 			^= state[2];
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3308      	adds	r3, #8
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001746:	4053      	eors	r3, r2
 8001748:	633b      	str	r3, [r7, #48]	@ 0x30
	t16			= t10 ^ t7;
 800174a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800174e:	4053      	eors	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
	state[2] 	&= t16;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3308      	adds	r3, #8
 8001756:	6819      	ldr	r1, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3308      	adds	r3, #8
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	400a      	ands	r2, r1
 8001760:	601a      	str	r2, [r3, #0]
	t10 		^= state[2];
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3308      	adds	r3, #8
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800176a:	4053      	eors	r3, r2
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24
	t10 		&= state[1];
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3304      	adds	r3, #4
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001776:	4013      	ands	r3, r2
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
	t5 			^= t10;
 800177a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	4053      	eors	r3, r2
 8001780:	63bb      	str	r3, [r7, #56]	@ 0x38
	t10			= state[1] ^ t5;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3304      	adds	r3, #4
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800178a:	4053      	eors	r3, r2
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
	state[4] 	&= t10; 
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3310      	adds	r3, #16
 8001792:	6819      	ldr	r1, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3310      	adds	r3, #16
 8001798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800179a:	400a      	ands	r2, r1
 800179c:	601a      	str	r2, [r3, #0]
	t11 		^= state[4];
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3310      	adds	r3, #16
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6a3a      	ldr	r2, [r7, #32]
 80017a6:	4053      	eors	r3, r2
 80017a8:	623b      	str	r3, [r7, #32]
	t1 			&= t10;
 80017aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80017ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ae:	4013      	ands	r3, r2
 80017b0:	64bb      	str	r3, [r7, #72]	@ 0x48
	state[6] 	&= t5; 
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3318      	adds	r3, #24
 80017b6:	6819      	ldr	r1, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3318      	adds	r3, #24
 80017bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017be:	400a      	ands	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]
	t10			= t5 & t13;
 80017c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
	state[4] 	^= t10;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3310      	adds	r3, #16
 80017ce:	6819      	ldr	r1, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3310      	adds	r3, #16
 80017d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017d6:	404a      	eors	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
	state[5] 	^= t7;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3314      	adds	r3, #20
 80017de:	6819      	ldr	r1, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3314      	adds	r3, #20
 80017e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017e6:	404a      	eors	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]
	state[2] 	^= state[5];
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3308      	adds	r3, #8
 80017ee:	6819      	ldr	r1, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3314      	adds	r3, #20
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3308      	adds	r3, #8
 80017fa:	404a      	eors	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]
	state[5]	= t5 ^ state[2];
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3308      	adds	r3, #8
 8001802:	6819      	ldr	r1, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3314      	adds	r3, #20
 8001808:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800180a:	404a      	eors	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
	t5			= state[5] & t14;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3314      	adds	r3, #20
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	4013      	ands	r3, r2
 8001818:	63bb      	str	r3, [r7, #56]	@ 0x38
	t10			= state[5] & t12;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3314      	adds	r3, #20
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	4013      	ands	r3, r2
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
	t12			= t7 ^ state[2];
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3308      	adds	r3, #8
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800182e:	4053      	eors	r3, r2
 8001830:	61fb      	str	r3, [r7, #28]
	t4 			&= t12;
 8001832:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	4013      	ands	r3, r2
 8001838:	63fb      	str	r3, [r7, #60]	@ 0x3c
	t2 			&= t12;
 800183a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	4013      	ands	r3, r2
 8001840:	647b      	str	r3, [r7, #68]	@ 0x44
	t3 			&= state[2]; 
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3308      	adds	r3, #8
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800184a:	4013      	ands	r3, r2
 800184c:	643b      	str	r3, [r7, #64]	@ 0x40
	state[2] 	&= t6;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3308      	adds	r3, #8
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3308      	adds	r3, #8
 8001858:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800185a:	400a      	ands	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
	state[2] 	^= t4;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3308      	adds	r3, #8
 8001862:	6819      	ldr	r1, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3308      	adds	r3, #8
 8001868:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800186a:	404a      	eors	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
	t13			= state[4] ^ state[2];
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3310      	adds	r3, #16
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3308      	adds	r3, #8
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4053      	eors	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
	state[3] 	&= t7;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	330c      	adds	r3, #12
 8001882:	6819      	ldr	r1, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	330c      	adds	r3, #12
 8001888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800188a:	400a      	ands	r2, r1
 800188c:	601a      	str	r2, [r3, #0]
	state[1] 	^= t7;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3304      	adds	r3, #4
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3304      	adds	r3, #4
 8001898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800189a:	404a      	eors	r2, r1
 800189c:	601a      	str	r2, [r3, #0]
	state[5] 	^= state[1];
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3314      	adds	r3, #20
 80018a2:	6819      	ldr	r1, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3304      	adds	r3, #4
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3314      	adds	r3, #20
 80018ae:	404a      	eors	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
	t6			= state[5] & t15;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3314      	adds	r3, #20
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	637b      	str	r3, [r7, #52]	@ 0x34
	state[4] 	^= t6; 
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3310      	adds	r3, #16
 80018c2:	6819      	ldr	r1, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3310      	adds	r3, #16
 80018c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018ca:	404a      	eors	r2, r1
 80018cc:	601a      	str	r2, [r3, #0]
	t0 			&= state[5];
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3314      	adds	r3, #20
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018d6:	4013      	ands	r3, r2
 80018d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	state[5]	= state[1] & t9; 
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3304      	adds	r3, #4
 80018de:	6819      	ldr	r1, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3314      	adds	r3, #20
 80018e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018e6:	400a      	ands	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]
	state[5] 	^= state[4];
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3314      	adds	r3, #20
 80018ee:	6819      	ldr	r1, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3310      	adds	r3, #16
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3314      	adds	r3, #20
 80018fa:	404a      	eors	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]
	state[1] 	&= t8;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3304      	adds	r3, #4
 8001902:	6819      	ldr	r1, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3304      	adds	r3, #4
 8001908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800190a:	400a      	ands	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
	t6			= state[1] ^ state[5];
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3304      	adds	r3, #4
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3314      	adds	r3, #20
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4053      	eors	r3, r2
 800191c:	637b      	str	r3, [r7, #52]	@ 0x34
	t0 			^= state[1];
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3304      	adds	r3, #4
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001926:	4053      	eors	r3, r2
 8001928:	64fb      	str	r3, [r7, #76]	@ 0x4c
	state[1]	= t3 ^ t0;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3304      	adds	r3, #4
 800192e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001930:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001932:	404a      	eors	r2, r1
 8001934:	601a      	str	r2, [r3, #0]
	t15			= state[1] ^ state[3];
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3304      	adds	r3, #4
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	330c      	adds	r3, #12
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4053      	eors	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
	t2 			^= state[1];
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3304      	adds	r3, #4
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800194e:	4053      	eors	r3, r2
 8001950:	647b      	str	r3, [r7, #68]	@ 0x44
	state[0]	= t2 ^ state[5];
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3314      	adds	r3, #20
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800195a:	405a      	eors	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	601a      	str	r2, [r3, #0]
	state[3]	= t2 ^ t13;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	330c      	adds	r3, #12
 8001964:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	404a      	eors	r2, r1
 800196a:	601a      	str	r2, [r3, #0]
	state[1]	= state[3] ^ state[5];
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	330c      	adds	r3, #12
 8001970:	6819      	ldr	r1, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3314      	adds	r3, #20
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3304      	adds	r3, #4
 800197c:	404a      	eors	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
	//state[1] 	^= 0xffffffff;
	t0 			^= state[6];
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3318      	adds	r3, #24
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001988:	4053      	eors	r3, r2
 800198a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	state[5]	= t7 & state[7];
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	331c      	adds	r3, #28
 8001990:	6819      	ldr	r1, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3314      	adds	r3, #20
 8001996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001998:	400a      	ands	r2, r1
 800199a:	601a      	str	r2, [r3, #0]
	t14			= t4 ^ state[5];
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3314      	adds	r3, #20
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019a4:	4053      	eors	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
	state[6]	= t1 ^ t14;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3318      	adds	r3, #24
 80019ac:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	404a      	eors	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
	state[6] 	^= t5; 
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3318      	adds	r3, #24
 80019b8:	6819      	ldr	r1, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3318      	adds	r3, #24
 80019be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019c0:	404a      	eors	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]
	state[6] 	^= state[4];
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3318      	adds	r3, #24
 80019c8:	6819      	ldr	r1, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3310      	adds	r3, #16
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3318      	adds	r3, #24
 80019d4:	404a      	eors	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]
	state[2]	= t17 ^ state[6];
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3318      	adds	r3, #24
 80019dc:	6819      	ldr	r1, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3308      	adds	r3, #8
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	404a      	eors	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
	state[5]	= t15 ^ state[2];
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3308      	adds	r3, #8
 80019ec:	6819      	ldr	r1, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3314      	adds	r3, #20
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	404a      	eors	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]
	state[2] 	^= t6;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3308      	adds	r3, #8
 80019fc:	6819      	ldr	r1, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3308      	adds	r3, #8
 8001a02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a04:	404a      	eors	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3308      	adds	r3, #8
 8001a0c:	6819      	ldr	r1, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3308      	adds	r3, #8
 8001a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a14:	404a      	eors	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]
	//state[2] 	^= 0xffffffff;
	t14 		^= t11;
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	4053      	eors	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
	t0 			^= t14;
 8001a20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	4053      	eors	r3, r2
 8001a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
	state[6] 	^= t0;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3318      	adds	r3, #24
 8001a2c:	6819      	ldr	r1, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3318      	adds	r3, #24
 8001a32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a34:	404a      	eors	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
	//state[6] 	^= 0xffffffff;
	state[7]	= t1 ^ t0;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	331c      	adds	r3, #28
 8001a3c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001a3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a40:	404a      	eors	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]
	//state[7] 	^= 0xffffffff;
	state[4]	= t14 ^ state[3]; 
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	330c      	adds	r3, #12
 8001a48:	6819      	ldr	r1, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3310      	adds	r3, #16
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	404a      	eors	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
}
 8001a54:	bf00      	nop
 8001a56:	3754      	adds	r7, #84	@ 0x54
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <double_shiftrows>:

/******************************************************************************
* Applies the ShiftRows transformation twice (i.e. SR^2) on the internal state.
******************************************************************************/
static void double_shiftrows(uint32_t* state) {
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
    uint32_t tmp;
	for(int i = 0; i < 8; i++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e02a      	b.n	8001ac4 <double_shiftrows+0x64>
        SWAPMOVE(state[i], state[i], 0x0f000f00, 4);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	440b      	add	r3, r1
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	4053      	eors	r3, r2
 8001a86:	f003 230f 	and.w	r3, r3, #251662080	@ 0xf000f00
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	6819      	ldr	r1, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	404a      	eors	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	6819      	ldr	r1, [r3, #0]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	011a      	lsls	r2, r3, #4
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	4403      	add	r3, r0
 8001aba:	404a      	eors	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b07      	cmp	r3, #7
 8001ac8:	ddd1      	ble.n	8001a6e <double_shiftrows+0xe>
}
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <mixcolumns_0>:
/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 0.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 0.
******************************************************************************/
static void mixcolumns_0(uint32_t* state) {
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	@ 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4;
	t3 = ROR(BYTE_ROR_6(state[0]),8);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	099b      	lsrs	r3, r3, #6
 8001ae6:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8001af4:	4313      	orrs	r3, r2
 8001af6:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001afa:	61fb      	str	r3, [r7, #28]
	t0 = state[0] ^ t3;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	4053      	eors	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
	t1 = ROR(BYTE_ROR_6(state[7]),8);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	331c      	adds	r3, #28
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	099b      	lsrs	r3, r3, #6
 8001b0e:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	331c      	adds	r3, #28
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001b24:	617b      	str	r3, [r7, #20]
	t2 = state[7] ^ t1;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	331c      	adds	r3, #28
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	4053      	eors	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
	state[7] = ROR(BYTE_ROR_4(t2),16) ^ t1 ^ t0;
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001b42:	4313      	orrs	r3, r2
 8001b44:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	ea82 0103 	eor.w	r1, r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	331c      	adds	r3, #28
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	404a      	eors	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[6]),8);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3318      	adds	r3, #24
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	099b      	lsrs	r3, r3, #6
 8001b60:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3318      	adds	r3, #24
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8001b70:	4313      	orrs	r3, r2
 8001b72:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001b76:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[6];
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3318      	adds	r3, #24
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4053      	eors	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
	state[6] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	405a      	eors	r2, r3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	ea82 0103 	eor.w	r1, r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	091b      	lsrs	r3, r3, #4
 8001b94:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3318      	adds	r3, #24
 8001baa:	404a      	eors	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[5]),8);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3314      	adds	r3, #20
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	099b      	lsrs	r3, r3, #6
 8001bb6:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3314      	adds	r3, #20
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001bcc:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[5];
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3314      	adds	r3, #20
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	4053      	eors	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
	state[5] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	ea82 0103 	eor.w	r1, r2, r3
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3314      	adds	r3, #20
 8001bfc:	404a      	eors	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[4]),8);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3310      	adds	r3, #16
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	099b      	lsrs	r3, r3, #6
 8001c08:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3310      	adds	r3, #16
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001c1e:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[4];
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3310      	adds	r3, #16
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4053      	eors	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
	state[4] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	405a      	eors	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	ea82 0103 	eor.w	r1, r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	091b      	lsrs	r3, r3, #4
 8001c3c:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3310      	adds	r3, #16
 8001c52:	404a      	eors	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[3]),8);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	330c      	adds	r3, #12
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	099b      	lsrs	r3, r3, #6
 8001c5e:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	330c      	adds	r3, #12
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001c74:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[3];
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	330c      	adds	r3, #12
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	4053      	eors	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
	state[3] = t4 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	405a      	eors	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	ea82 0103 	eor.w	r1, r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	330c      	adds	r3, #12
 8001ca8:	404a      	eors	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[2]),8);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3308      	adds	r3, #8
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	099b      	lsrs	r3, r3, #6
 8001cb4:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3308      	adds	r3, #8
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001cca:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[2];
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3308      	adds	r3, #8
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4053      	eors	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
	state[2] = t2 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	ea82 0103 	eor.w	r1, r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3308      	adds	r3, #8
 8001cfa:	404a      	eors	r2, r1
 8001cfc:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[1]),8);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3304      	adds	r3, #4
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	099b      	lsrs	r3, r3, #6
 8001d06:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8001d16:	4313      	orrs	r3, r2
 8001d18:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001d1c:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[1];
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3304      	adds	r3, #4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	4053      	eors	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
	state[1] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	ea82 0103 	eor.w	r1, r2, r3
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001d42:	4313      	orrs	r3, r2
 8001d44:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	404a      	eors	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]
	state[0] = t2 ^ t3 ^ ROR(BYTE_ROR_4(t0),16);
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	405a      	eors	r2, r3
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001d66:	430b      	orrs	r3, r1
 8001d68:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001d6c:	405a      	eors	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	601a      	str	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	3724      	adds	r7, #36	@ 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <mixcolumns_1>:

/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for round i s.t. (i%4) == 1.
******************************************************************************/
static void mixcolumns_1(uint32_t* state) {
 8001d7e:	b480      	push	{r7}
 8001d80:	b087      	sub	sp, #28
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2;
	t0 = state[0] ^ ROR(BYTE_ROR_4(state[0]),8);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001da4:	4053      	eors	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
	t1 = state[7] ^ ROR(BYTE_ROR_4(state[7]),8);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	331c      	adds	r3, #28
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	331c      	adds	r3, #28
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	331c      	adds	r3, #28
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001dc6:	430b      	orrs	r3, r1
 8001dc8:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001dcc:	4053      	eors	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
	t2 = state[6];
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	60fb      	str	r3, [r7, #12]
	state[6] = t1 ^ t0;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3318      	adds	r3, #24
 8001dda:	6939      	ldr	r1, [r7, #16]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	404a      	eors	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]
	state[7] ^= state[6] ^ ROR(t1,16);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	331c      	adds	r3, #28
 8001de6:	6819      	ldr	r1, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3318      	adds	r3, #24
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001df4:	405a      	eors	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	331c      	adds	r3, #28
 8001dfa:	404a      	eors	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001e14:	613b      	str	r3, [r7, #16]
	state[6] ^= t1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3318      	adds	r3, #24
 8001e1a:	6819      	ldr	r1, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3318      	adds	r3, #24
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	404a      	eors	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4053      	eors	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
	state[6] ^= ROR(t1,16);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3318      	adds	r3, #24
 8001e32:	6819      	ldr	r1, [r3, #0]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3318      	adds	r3, #24
 8001e3e:	404a      	eors	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]
	t2 = state[5];
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	60fb      	str	r3, [r7, #12]
	state[5] = t1;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3314      	adds	r3, #20
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001e60:	4313      	orrs	r3, r2
 8001e62:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001e66:	613b      	str	r3, [r7, #16]
	state[5] ^= t1;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3314      	adds	r3, #20
 8001e6c:	6819      	ldr	r1, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3314      	adds	r3, #20
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	404a      	eors	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4053      	eors	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
	state[5] ^= ROR(t1,16);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3314      	adds	r3, #20
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3314      	adds	r3, #20
 8001e90:	404a      	eors	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
	t2 = state[4];
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	60fb      	str	r3, [r7, #12]
	state[4] = t1 ^ t0;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3310      	adds	r3, #16
 8001e9e:	6939      	ldr	r1, [r7, #16]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	404a      	eors	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001ebc:	613b      	str	r3, [r7, #16]
	state[4] ^= t1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3310      	adds	r3, #16
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3310      	adds	r3, #16
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	404a      	eors	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4053      	eors	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
	state[4] ^= ROR(t1,16);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3310      	adds	r3, #16
 8001eda:	6819      	ldr	r1, [r3, #0]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3310      	adds	r3, #16
 8001ee6:	404a      	eors	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
	t2 = state[3];
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	60fb      	str	r3, [r7, #12]
	state[3] = t1 ^ t0;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	330c      	adds	r3, #12
 8001ef4:	6939      	ldr	r1, [r7, #16]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	404a      	eors	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001f12:	613b      	str	r3, [r7, #16]
	state[3] ^= t1;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	330c      	adds	r3, #12
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	330c      	adds	r3, #12
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	404a      	eors	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4053      	eors	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
	state[3] ^= ROR(t1,16);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	330c      	adds	r3, #12
 8001f30:	6819      	ldr	r1, [r3, #0]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	330c      	adds	r3, #12
 8001f3c:	404a      	eors	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
	t2 = state[2];
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	60fb      	str	r3, [r7, #12]
	state[2] = t1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3308      	adds	r3, #8
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001f64:	613b      	str	r3, [r7, #16]
	state[2] ^= t1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3308      	adds	r3, #8
 8001f6a:	6819      	ldr	r1, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3308      	adds	r3, #8
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	404a      	eors	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4053      	eors	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
	state[2] ^= ROR(t1,16);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3308      	adds	r3, #8
 8001f82:	6819      	ldr	r1, [r3, #0]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3308      	adds	r3, #8
 8001f8e:	404a      	eors	r2, r1
 8001f90:	601a      	str	r2, [r3, #0]
	t2 = state[1];
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	60fb      	str	r3, [r7, #12]
	state[1] = t1;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	091b      	lsrs	r3, r3, #4
 8001fa4:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001fb6:	613b      	str	r3, [r7, #16]
	state[1] ^= t1;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	6819      	ldr	r1, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	404a      	eors	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4053      	eors	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
	state[1] ^= ROR(t1,16);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	6819      	ldr	r1, [r3, #0]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	404a      	eors	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]
	t2 = state[0];
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]
	state[0] = t1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	091b      	lsrs	r3, r3, #4
 8001ff4:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002000:	4313      	orrs	r3, r2
 8002002:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002006:	613b      	str	r3, [r7, #16]
	state[0] ^= t1;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	405a      	eors	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4053      	eors	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
	state[0] ^= ROR(t1,16);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002026:	405a      	eors	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	601a      	str	r2, [r3, #0]
}
 800202c:	bf00      	nop
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <mixcolumns_2>:

/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for rounds i s.t. (i%4) == 2.
******************************************************************************/
static void mixcolumns_2(uint32_t* state) {
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	@ 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4;
	t3 = ROR(BYTE_ROR_2(state[0]),8);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	019b      	lsls	r3, r3, #6
 8002050:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8002054:	4313      	orrs	r3, r2
 8002056:	ea4f 2333 	mov.w	r3, r3, ror #8
 800205a:	61fb      	str	r3, [r7, #28]
	t0 = state[0] ^ t3;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	4053      	eors	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
	t1 = ROR(BYTE_ROR_2(state[7]),8);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	331c      	adds	r3, #28
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	331c      	adds	r3, #28
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	019b      	lsls	r3, r3, #6
 800207a:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 800207e:	4313      	orrs	r3, r2
 8002080:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002084:	617b      	str	r3, [r7, #20]
	t2 = state[7] ^ t1;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	331c      	adds	r3, #28
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	4053      	eors	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
	state[7] = ROR(BYTE_ROR_4(t2),16) ^ t1 ^ t0;
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80020a2:	4313      	orrs	r3, r2
 80020a4:	ea4f 4233 	mov.w	r2, r3, ror #16
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	ea82 0103 	eor.w	r1, r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	331c      	adds	r3, #28
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	404a      	eors	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[6]),8);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3318      	adds	r3, #24
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3318      	adds	r3, #24
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	019b      	lsls	r3, r3, #6
 80020cc:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 80020d0:	4313      	orrs	r3, r2
 80020d2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80020d6:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[6];
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3318      	adds	r3, #24
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4053      	eors	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
	state[6] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	405a      	eors	r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	ea82 0103 	eor.w	r1, r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	091b      	lsrs	r3, r3, #4
 80020f4:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002100:	4313      	orrs	r3, r2
 8002102:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3318      	adds	r3, #24
 800210a:	404a      	eors	r2, r1
 800210c:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[5]),8);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3314      	adds	r3, #20
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3314      	adds	r3, #20
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	019b      	lsls	r3, r3, #6
 8002122:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8002126:	4313      	orrs	r3, r2
 8002128:	ea4f 2333 	mov.w	r3, r3, ror #8
 800212c:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[5];
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3314      	adds	r3, #20
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	4053      	eors	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
	state[5] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	ea82 0103 	eor.w	r1, r2, r3
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002152:	4313      	orrs	r3, r2
 8002154:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3314      	adds	r3, #20
 800215c:	404a      	eors	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[4]),8);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3310      	adds	r3, #16
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3310      	adds	r3, #16
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	019b      	lsls	r3, r3, #6
 8002174:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8002178:	4313      	orrs	r3, r2
 800217a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800217e:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[4];
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3310      	adds	r3, #16
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4053      	eors	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
	state[4] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	405a      	eors	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	ea82 0103 	eor.w	r1, r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80021a8:	4313      	orrs	r3, r2
 80021aa:	ea4f 4233 	mov.w	r2, r3, ror #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3310      	adds	r3, #16
 80021b2:	404a      	eors	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[3]),8);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	330c      	adds	r3, #12
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	330c      	adds	r3, #12
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	019b      	lsls	r3, r3, #6
 80021ca:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 80021ce:	4313      	orrs	r3, r2
 80021d0:	ea4f 2333 	mov.w	r3, r3, ror #8
 80021d4:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[3];
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	330c      	adds	r3, #12
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	4053      	eors	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
	state[3] = t4 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	405a      	eors	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	ea82 0103 	eor.w	r1, r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80021fe:	4313      	orrs	r3, r2
 8002200:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	330c      	adds	r3, #12
 8002208:	404a      	eors	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[2]),8);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3308      	adds	r3, #8
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3308      	adds	r3, #8
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	019b      	lsls	r3, r3, #6
 8002220:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8002224:	4313      	orrs	r3, r2
 8002226:	ea4f 2333 	mov.w	r3, r3, ror #8
 800222a:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[2];
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3308      	adds	r3, #8
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4053      	eors	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
	state[2] = t2 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	ea82 0103 	eor.w	r1, r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002250:	4313      	orrs	r3, r2
 8002252:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3308      	adds	r3, #8
 800225a:	404a      	eors	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[1]),8);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3304      	adds	r3, #4
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	089b      	lsrs	r3, r3, #2
 8002266:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3304      	adds	r3, #4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	019b      	lsls	r3, r3, #6
 8002272:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8002276:	4313      	orrs	r3, r2
 8002278:	ea4f 2333 	mov.w	r3, r3, ror #8
 800227c:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[1];
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3304      	adds	r3, #4
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	4053      	eors	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
	state[1] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	ea82 0103 	eor.w	r1, r2, r3
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80022a2:	4313      	orrs	r3, r2
 80022a4:	ea4f 4233 	mov.w	r2, r3, ror #16
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3304      	adds	r3, #4
 80022ac:	404a      	eors	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
	state[0] = t2 ^ t3 ^ ROR(BYTE_ROR_4(t0),16);
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	405a      	eors	r2, r3
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80022c6:	430b      	orrs	r3, r1
 80022c8:	ea4f 4333 	mov.w	r3, r3, ror #16
 80022cc:	405a      	eors	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	601a      	str	r2, [r3, #0]
}
 80022d2:	bf00      	nop
 80022d4:	3724      	adds	r7, #36	@ 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <mixcolumns_3>:
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 3.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 1.
* Based on Käsper-Schwabe, similar to https://github.com/Ko-/aes-armcortexm.
******************************************************************************/
static void mixcolumns_3(uint32_t* state) {
 80022de:	b480      	push	{r7}
 80022e0:	b087      	sub	sp, #28
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2;
	t0 = state[7] ^ ROR(state[7],8);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	331c      	adds	r3, #28
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	331c      	adds	r3, #28
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80022f6:	4053      	eors	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]
	t2 = state[0] ^ ROR(state[0],8);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002306:	4053      	eors	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
	state[7] = t2 ^ ROR(state[7], 8) ^ ROR(t0, 16);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	331c      	adds	r3, #28
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	ea82 0103 	eor.w	r1, r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	331c      	adds	r3, #28
 8002324:	404a      	eors	r2, r1
 8002326:	601a      	str	r2, [r3, #0]
	t1 = state[6] ^ ROR(state[6],8);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3318      	adds	r3, #24
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3318      	adds	r3, #24
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002338:	4053      	eors	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
	state[6] = t0 ^ t2 ^ ROR(state[6], 8) ^ ROR(t1,16);
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	405a      	eors	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3318      	adds	r3, #24
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	ea4f 2333 	mov.w	r3, r3, ror #8
 800234c:	ea82 0103 	eor.w	r1, r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3318      	adds	r3, #24
 800235a:	404a      	eors	r2, r1
 800235c:	601a      	str	r2, [r3, #0]
	t0 = state[5] ^ ROR(state[5],8);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3314      	adds	r3, #20
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3314      	adds	r3, #20
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800236e:	4053      	eors	r3, r2
 8002370:	617b      	str	r3, [r7, #20]
	state[5] = t1 ^ ROR(state[5],8) ^ ROR(t0,16);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3314      	adds	r3, #20
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	ea4f 2233 	mov.w	r2, r3, ror #8
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	ea82 0103 	eor.w	r1, r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3314      	adds	r3, #20
 800238c:	404a      	eors	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
	t1 = state[4] ^ ROR(state[4],8);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3310      	adds	r3, #16
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3310      	adds	r3, #16
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	ea4f 2333 	mov.w	r3, r3, ror #8
 80023a0:	4053      	eors	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
	state[4] = t0 ^ t2 ^ ROR(state[4],8) ^ ROR(t1,16);
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	405a      	eors	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3310      	adds	r3, #16
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	ea4f 2333 	mov.w	r3, r3, ror #8
 80023b4:	ea82 0103 	eor.w	r1, r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	ea4f 4233 	mov.w	r2, r3, ror #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3310      	adds	r3, #16
 80023c2:	404a      	eors	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]
	t0 = state[3] ^ ROR(state[3],8);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	330c      	adds	r3, #12
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	330c      	adds	r3, #12
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80023d6:	4053      	eors	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]
	state[3] = t1 ^ t2 ^ ROR(state[3],8) ^ ROR(t0,16);
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	405a      	eors	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	330c      	adds	r3, #12
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80023ea:	ea82 0103 	eor.w	r1, r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	ea4f 4233 	mov.w	r2, r3, ror #16
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	330c      	adds	r3, #12
 80023f8:	404a      	eors	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]
	t1 = state[2] ^ ROR(state[2],8);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3308      	adds	r3, #8
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3308      	adds	r3, #8
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	ea4f 2333 	mov.w	r3, r3, ror #8
 800240c:	4053      	eors	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
	state[2] = t0 ^ ROR(state[2],8) ^ ROR(t1,16);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3308      	adds	r3, #8
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	ea4f 2233 	mov.w	r2, r3, ror #8
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	ea82 0103 	eor.w	r1, r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3308      	adds	r3, #8
 800242a:	404a      	eors	r2, r1
 800242c:	601a      	str	r2, [r3, #0]
	t0 = state[1] ^ ROR(state[1],8);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3304      	adds	r3, #4
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3304      	adds	r3, #4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800243e:	4053      	eors	r3, r2
 8002440:	617b      	str	r3, [r7, #20]
	state[1] = t1 ^ ROR(state[1],8) ^ ROR(t0,16);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	ea4f 2233 	mov.w	r2, r3, ror #8
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	ea82 0103 	eor.w	r1, r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3304      	adds	r3, #4
 800245c:	404a      	eors	r2, r1
 800245e:	601a      	str	r2, [r3, #0]
	state[0] = t0 ^ ROR(state[0],8) ^ ROR(t2,16);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	405a      	eors	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002472:	405a      	eors	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	601a      	str	r2, [r3, #0]
}
 8002478:	bf00      	nop
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	@ 0x30
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 8002492:	f107 0310 	add.w	r3, r7, #16
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fb98 	bl	8000bd0 <packing>
	ark(state, rkeys_ffs); 				// key whitening
 80024a0:	f107 0310 	add.w	r3, r7, #16
 80024a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe ffd6 	bl	8001458 <ark>
	sbox(state); 						// 1st round
 80024ac:	f107 0310 	add.w	r3, r7, #16
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe fff6 	bl	80014a2 <sbox>
	mixcolumns_0(state); 				// 1st round
 80024b6:	f107 0310 	add.w	r3, r7, #16
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fb0c 	bl	8001ad8 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 80024c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c2:	f103 0220 	add.w	r2, r3, #32
 80024c6:	f107 0310 	add.w	r3, r7, #16
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe ffc3 	bl	8001458 <ark>
	sbox(state); 						// 2nd round
 80024d2:	f107 0310 	add.w	r3, r7, #16
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe ffe3 	bl	80014a2 <sbox>
	mixcolumns_1(state); 				// 2nd round
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fc4c 	bl	8001d7e <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 80024e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024e8:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80024ec:	f107 0310 	add.w	r3, r7, #16
 80024f0:	4611      	mov	r1, r2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe ffb0 	bl	8001458 <ark>
	sbox(state); 						// 3rd round
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe ffd0 	bl	80014a2 <sbox>
	mixcolumns_2(state); 				// 3rd round
 8002502:	f107 0310 	add.w	r3, r7, #16
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fd96 	bl	8002038 <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 800250c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800250e:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8002512:	f107 0310 	add.w	r3, r7, #16
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe ff9d 	bl	8001458 <ark>
	sbox(state); 						// 4th round
 800251e:	f107 0310 	add.w	r3, r7, #16
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe ffbd 	bl	80014a2 <sbox>
	mixcolumns_3(state); 				// 4th round
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fed6 	bl	80022de <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 8002532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002534:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe ff8a 	bl	8001458 <ark>
	sbox(state); 						// 5th round
 8002544:	f107 0310 	add.w	r3, r7, #16
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe ffaa 	bl	80014a2 <sbox>
	mixcolumns_0(state); 				// 5th round
 800254e:	f107 0310 	add.w	r3, r7, #16
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fac0 	bl	8001ad8 <mixcolumns_0>
	ark(state, rkeys_ffs + 40); 		// 5th round
 8002558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255a:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 800255e:	f107 0310 	add.w	r3, r7, #16
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe ff77 	bl	8001458 <ark>
	sbox(state);						// 6th round
 800256a:	f107 0310 	add.w	r3, r7, #16
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe ff97 	bl	80014a2 <sbox>
	mixcolumns_1(state); 				// 6th round
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fc00 	bl	8001d7e <mixcolumns_1>
	ark(state, rkeys_ffs + 48); 		// 6th round
 800257e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002580:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe ff64 	bl	8001458 <ark>
	sbox(state); 						// 7th round
 8002590:	f107 0310 	add.w	r3, r7, #16
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe ff84 	bl	80014a2 <sbox>
	mixcolumns_2(state); 				// 7th round
 800259a:	f107 0310 	add.w	r3, r7, #16
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fd4a 	bl	8002038 <mixcolumns_2>
	ark(state, rkeys_ffs + 56); 		// 7th round
 80025a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a6:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 80025aa:	f107 0310 	add.w	r3, r7, #16
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe ff51 	bl	8001458 <ark>
	sbox(state); 						// 8th round
 80025b6:	f107 0310 	add.w	r3, r7, #16
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe ff71 	bl	80014a2 <sbox>
	mixcolumns_3(state); 				// 8th round
 80025c0:	f107 0310 	add.w	r3, r7, #16
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fe8a 	bl	80022de <mixcolumns_3>
	ark(state, rkeys_ffs + 64); 		// 8th round
 80025ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025cc:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe ff3e 	bl	8001458 <ark>
	sbox(state); 						// 9th round
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe ff5e 	bl	80014a2 <sbox>
	mixcolumns_0(state); 				// 9th round
 80025e6:	f107 0310 	add.w	r3, r7, #16
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fa74 	bl	8001ad8 <mixcolumns_0>
	ark(state, rkeys_ffs + 72); 		// 9th round
 80025f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f2:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 80025f6:	f107 0310 	add.w	r3, r7, #16
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe ff2b 	bl	8001458 <ark>
	sbox(state); 						// 10th round
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe ff4b 	bl	80014a2 <sbox>
	double_shiftrows(state); 			// 10th round (resynchronization)
 800260c:	f107 0310 	add.w	r3, r7, #16
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fa25 	bl	8001a60 <double_shiftrows>
	ark(state, rkeys_ffs + 80); 		// 10th round
 8002616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002618:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 800261c:	f107 0310 	add.w	r3, r7, #16
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe ff18 	bl	8001458 <ark>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	461a      	mov	r2, r3
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f7fe fccc 	bl	8000fce <unpacking>
}
 8002636:	bf00      	nop
 8002638:	3730      	adds	r7, #48	@ 0x30
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <two_Rounds_aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void two_Rounds_aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 800263e:	b580      	push	{r7, lr}
 8002640:	b08c      	sub	sp, #48	@ 0x30
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fabb 	bl	8000bd0 <packing>
	ark(state, rkeys_ffs); 				// key whitening
 800265a:	f107 0310 	add.w	r3, r7, #16
 800265e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe fef9 	bl	8001458 <ark>
	sbox(state); 						// 1st round
 8002666:	f107 0310 	add.w	r3, r7, #16
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe ff19 	bl	80014a2 <sbox>
	mixcolumns_0(state); 				// 1st round
 8002670:	f107 0310 	add.w	r3, r7, #16
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fa2f 	bl	8001ad8 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 800267a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800267c:	f103 0220 	add.w	r2, r3, #32
 8002680:	f107 0310 	add.w	r3, r7, #16
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fee6 	bl	8001458 <ark>
	sbox(state); 						// 2nd round
 800268c:	f107 0310 	add.w	r3, r7, #16
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe ff06 	bl	80014a2 <sbox>
	mixcolumns_1(state); 				// 2nd round
 8002696:	f107 0310 	add.w	r3, r7, #16
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fb6f 	bl	8001d7e <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 80026a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a2:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80026a6:	f107 0310 	add.w	r3, r7, #16
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fed3 	bl	8001458 <ark>
	double_shiftrows(state); 			// 10th round (resynchronization)
 80026b2:	f107 0310 	add.w	r3, r7, #16
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f9d2 	bl	8001a60 <double_shiftrows>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 80026bc:	f107 0310 	add.w	r3, r7, #16
 80026c0:	461a      	mov	r2, r3
 80026c2:	68b9      	ldr	r1, [r7, #8]
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f7fe fc82 	bl	8000fce <unpacking>
}
 80026ca:	bf00      	nop
 80026cc:	3730      	adds	r7, #48	@ 0x30
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <four_Rounds_aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void four_Rounds_aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b08c      	sub	sp, #48	@ 0x30
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 80026e0:	f107 0310 	add.w	r3, r7, #16
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fa71 	bl	8000bd0 <packing>
	ark(state, rkeys_ffs); 				// key whitening
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe feaf 	bl	8001458 <ark>
	sbox(state); 						// 1st round
 80026fa:	f107 0310 	add.w	r3, r7, #16
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fecf 	bl	80014a2 <sbox>
	mixcolumns_0(state); 				// 1st round
 8002704:	f107 0310 	add.w	r3, r7, #16
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff f9e5 	bl	8001ad8 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 800270e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002710:	f103 0220 	add.w	r2, r3, #32
 8002714:	f107 0310 	add.w	r3, r7, #16
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe fe9c 	bl	8001458 <ark>
	sbox(state); 						// 2nd round
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe febc 	bl	80014a2 <sbox>
	mixcolumns_1(state); 				// 2nd round
 800272a:	f107 0310 	add.w	r3, r7, #16
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fb25 	bl	8001d7e <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 8002734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002736:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800273a:	f107 0310 	add.w	r3, r7, #16
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe fe89 	bl	8001458 <ark>
	sbox(state); 						// 3rd round
 8002746:	f107 0310 	add.w	r3, r7, #16
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe fea9 	bl	80014a2 <sbox>
	mixcolumns_2(state); 				// 3rd round
 8002750:	f107 0310 	add.w	r3, r7, #16
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fc6f 	bl	8002038 <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 800275a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800275c:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8002760:	f107 0310 	add.w	r3, r7, #16
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fe76 	bl	8001458 <ark>
	sbox(state); 						// 4th round
 800276c:	f107 0310 	add.w	r3, r7, #16
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe fe96 	bl	80014a2 <sbox>
	mixcolumns_3(state); 				// 4th round
 8002776:	f107 0310 	add.w	r3, r7, #16
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fdaf 	bl	80022de <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 8002780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002782:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8002786:	f107 0310 	add.w	r3, r7, #16
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f7fe fe63 	bl	8001458 <ark>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 8002792:	f107 0310 	add.w	r3, r7, #16
 8002796:	461a      	mov	r2, r3
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7fe fc17 	bl	8000fce <unpacking>
}
 80027a0:	bf00      	nop
 80027a2:	3730      	adds	r7, #48	@ 0x30
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <six_Rounds_aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void six_Rounds_aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08c      	sub	sp, #48	@ 0x30
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 80027b6:	f107 0310 	add.w	r3, r7, #16
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fa06 	bl	8000bd0 <packing>
	ark(state, rkeys_ffs); 				// key whitening
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fe44 	bl	8001458 <ark>
	sbox(state); 						// 1st round
 80027d0:	f107 0310 	add.w	r3, r7, #16
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fe64 	bl	80014a2 <sbox>
	mixcolumns_0(state); 				// 1st round
 80027da:	f107 0310 	add.w	r3, r7, #16
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff f97a 	bl	8001ad8 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 80027e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e6:	f103 0220 	add.w	r2, r3, #32
 80027ea:	f107 0310 	add.w	r3, r7, #16
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fe31 	bl	8001458 <ark>
	sbox(state); 						// 2nd round
 80027f6:	f107 0310 	add.w	r3, r7, #16
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe fe51 	bl	80014a2 <sbox>
	mixcolumns_1(state); 				// 2nd round
 8002800:	f107 0310 	add.w	r3, r7, #16
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff faba 	bl	8001d7e <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 800280a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800280c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002810:	f107 0310 	add.w	r3, r7, #16
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fe1e 	bl	8001458 <ark>
	sbox(state); 						// 3rd round
 800281c:	f107 0310 	add.w	r3, r7, #16
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fe3e 	bl	80014a2 <sbox>
	mixcolumns_2(state); 				// 3rd round
 8002826:	f107 0310 	add.w	r3, r7, #16
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fc04 	bl	8002038 <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 8002830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002832:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8002836:	f107 0310 	add.w	r3, r7, #16
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe fe0b 	bl	8001458 <ark>
	sbox(state); 						// 4th round
 8002842:	f107 0310 	add.w	r3, r7, #16
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fe2b 	bl	80014a2 <sbox>
	mixcolumns_3(state); 				// 4th round
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fd44 	bl	80022de <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 8002856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002858:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 800285c:	f107 0310 	add.w	r3, r7, #16
 8002860:	4611      	mov	r1, r2
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fdf8 	bl	8001458 <ark>
	sbox(state); 						// 5th round
 8002868:	f107 0310 	add.w	r3, r7, #16
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe fe18 	bl	80014a2 <sbox>
	mixcolumns_0(state); 				// 5th round
 8002872:	f107 0310 	add.w	r3, r7, #16
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff f92e 	bl	8001ad8 <mixcolumns_0>
	ark(state, rkeys_ffs + 40); 		// 5th round
 800287c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800287e:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8002882:	f107 0310 	add.w	r3, r7, #16
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe fde5 	bl	8001458 <ark>
	sbox(state);						// 6th round
 800288e:	f107 0310 	add.w	r3, r7, #16
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fe05 	bl	80014a2 <sbox>
	mixcolumns_1(state); 				// 6th round
 8002898:	f107 0310 	add.w	r3, r7, #16
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fa6e 	bl	8001d7e <mixcolumns_1>
	ark(state, rkeys_ffs + 48); 		// 6th round
 80028a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a4:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 80028a8:	f107 0310 	add.w	r3, r7, #16
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fdd2 	bl	8001458 <ark>
	double_shiftrows(state); 			// 10th round (resynchronization)
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff f8d1 	bl	8001a60 <double_shiftrows>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 80028be:	f107 0310 	add.w	r3, r7, #16
 80028c2:	461a      	mov	r2, r3
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7fe fb81 	bl	8000fce <unpacking>
}
 80028cc:	bf00      	nop
 80028ce:	3730      	adds	r7, #48	@ 0x30
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <eigth_Rounds_aes128_encrypt_ffs>:


void eigth_Rounds_aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08c      	sub	sp, #48	@ 0x30
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 80028e2:	f107 0310 	add.w	r3, r7, #16
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe f970 	bl	8000bd0 <packing>
	ark(state, rkeys_ffs); 				// key whitening
 80028f0:	f107 0310 	add.w	r3, r7, #16
 80028f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fdae 	bl	8001458 <ark>
	sbox(state); 						// 1st round
 80028fc:	f107 0310 	add.w	r3, r7, #16
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe fdce 	bl	80014a2 <sbox>
	mixcolumns_0(state); 				// 1st round
 8002906:	f107 0310 	add.w	r3, r7, #16
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff f8e4 	bl	8001ad8 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 8002910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002912:	f103 0220 	add.w	r2, r3, #32
 8002916:	f107 0310 	add.w	r3, r7, #16
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe fd9b 	bl	8001458 <ark>
	sbox(state); 						// 2nd round
 8002922:	f107 0310 	add.w	r3, r7, #16
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fdbb 	bl	80014a2 <sbox>
	mixcolumns_1(state); 				// 2nd round
 800292c:	f107 0310 	add.w	r3, r7, #16
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fa24 	bl	8001d7e <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 8002936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002938:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800293c:	f107 0310 	add.w	r3, r7, #16
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fd88 	bl	8001458 <ark>
	sbox(state); 						// 3rd round
 8002948:	f107 0310 	add.w	r3, r7, #16
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe fda8 	bl	80014a2 <sbox>
	mixcolumns_2(state); 				// 3rd round
 8002952:	f107 0310 	add.w	r3, r7, #16
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fb6e 	bl	8002038 <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 800295c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800295e:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8002962:	f107 0310 	add.w	r3, r7, #16
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fd75 	bl	8001458 <ark>
	sbox(state); 						// 4th round
 800296e:	f107 0310 	add.w	r3, r7, #16
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe fd95 	bl	80014a2 <sbox>
	mixcolumns_3(state); 				// 4th round
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fcae 	bl	80022de <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 8002982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002984:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8002988:	f107 0310 	add.w	r3, r7, #16
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fd62 	bl	8001458 <ark>
	sbox(state); 						// 5th round
 8002994:	f107 0310 	add.w	r3, r7, #16
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe fd82 	bl	80014a2 <sbox>
	mixcolumns_0(state); 				// 5th round
 800299e:	f107 0310 	add.w	r3, r7, #16
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff f898 	bl	8001ad8 <mixcolumns_0>
	ark(state, rkeys_ffs + 40); 		// 5th round
 80029a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029aa:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 80029ae:	f107 0310 	add.w	r3, r7, #16
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe fd4f 	bl	8001458 <ark>
	sbox(state);						// 6th round
 80029ba:	f107 0310 	add.w	r3, r7, #16
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fd6f 	bl	80014a2 <sbox>
	mixcolumns_1(state); 				// 6th round
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff f9d8 	bl	8001d7e <mixcolumns_1>
	ark(state, rkeys_ffs + 48); 		// 6th round
 80029ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d0:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fd3c 	bl	8001458 <ark>
	sbox(state); 						// 7th round
 80029e0:	f107 0310 	add.w	r3, r7, #16
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe fd5c 	bl	80014a2 <sbox>
	mixcolumns_2(state); 				// 7th round
 80029ea:	f107 0310 	add.w	r3, r7, #16
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fb22 	bl	8002038 <mixcolumns_2>
	ark(state, rkeys_ffs + 56); 		// 7th round
 80029f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f6:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 80029fa:	f107 0310 	add.w	r3, r7, #16
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe fd29 	bl	8001458 <ark>
	sbox(state); 						// 8th round
 8002a06:	f107 0310 	add.w	r3, r7, #16
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fd49 	bl	80014a2 <sbox>
	mixcolumns_3(state); 				// 8th round
 8002a10:	f107 0310 	add.w	r3, r7, #16
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fc62 	bl	80022de <mixcolumns_3>
	ark(state, rkeys_ffs + 64); 		// 8th round
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a1c:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 8002a20:	f107 0310 	add.w	r3, r7, #16
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe fd16 	bl	8001458 <ark>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 8002a2c:	f107 0310 	add.w	r3, r7, #16
 8002a30:	461a      	mov	r2, r3
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7fe faca 	bl	8000fce <unpacking>
 8002a3a:	bf00      	nop
 8002a3c:	3730      	adds	r7, #48	@ 0x30
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <inv_shiftrows_1>:


/******************************************************************************
* Applies ShiftRows^(-1) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_1(uint32_t* rkey) {
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++) {
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e052      	b.n	8002af8 <inv_shiftrows_1+0xb4>
		SWAPMOVE(rkey[i], rkey[i], 0x0c0f0300, 4);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	440b      	add	r3, r1
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	405a      	eors	r2, r3
 8002a6a:	4b28      	ldr	r3, [pc, #160]	@ (8002b0c <inv_shiftrows_1+0xc8>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	6819      	ldr	r1, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	404a      	eors	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	4413      	add	r3, r2
 8002a90:	6819      	ldr	r1, [r3, #0]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	011a      	lsls	r2, r3, #4
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4403      	add	r3, r0
 8002a9e:	404a      	eors	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]
		SWAPMOVE(rkey[i], rkey[i], 0x33003300, 2);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	440b      	add	r3, r1
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	4053      	eors	r3, r2
 8002aba:	f003 2333 	and.w	r3, r3, #855651072	@ 0x33003300
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	6819      	ldr	r1, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	404a      	eors	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	6819      	ldr	r1, [r3, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	009a      	lsls	r2, r3, #2
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	4403      	add	r3, r0
 8002aee:	404a      	eors	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3301      	adds	r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b07      	cmp	r3, #7
 8002afc:	dda9      	ble.n	8002a52 <inv_shiftrows_1+0xe>
	}
}
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	0c0f0300 	.word	0x0c0f0300

08002b10 <inv_shiftrows_2>:
/******************************************************************************
* Applies ShiftRows^(-2) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_2(uint32_t* rkey) {
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++)
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e02a      	b.n	8002b74 <inv_shiftrows_2+0x64>
		SWAPMOVE(rkey[i], rkey[i], 0x0f000f00, 4);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	440b      	add	r3, r1
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	4053      	eors	r3, r2
 8002b36:	f003 230f 	and.w	r3, r3, #251662080	@ 0xf000f00
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	4413      	add	r3, r2
 8002b44:	6819      	ldr	r1, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	404a      	eors	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	6819      	ldr	r1, [r3, #0]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	011a      	lsls	r2, r3, #4
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4403      	add	r3, r0
 8002b6a:	404a      	eors	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3301      	adds	r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b07      	cmp	r3, #7
 8002b78:	ddd1      	ble.n	8002b1e <inv_shiftrows_2+0xe>
}
 8002b7a:	bf00      	nop
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <inv_shiftrows_3>:

/******************************************************************************
* Applies ShiftRows^(-3) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_3(uint32_t* rkey) {
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++) {
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	e052      	b.n	8002c3c <inv_shiftrows_3+0xb4>
		SWAPMOVE(rkey[i], rkey[i], 0x030f0c00, 4);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	440b      	add	r3, r1
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	091b      	lsrs	r3, r3, #4
 8002bac:	405a      	eors	r2, r3
 8002bae:	4b28      	ldr	r3, [pc, #160]	@ (8002c50 <inv_shiftrows_3+0xc8>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	4413      	add	r3, r2
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	404a      	eors	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	6819      	ldr	r1, [r3, #0]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	011a      	lsls	r2, r3, #4
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4403      	add	r3, r0
 8002be2:	404a      	eors	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]
		SWAPMOVE(rkey[i], rkey[i], 0x33003300, 2);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	440b      	add	r3, r1
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	089b      	lsrs	r3, r3, #2
 8002bfc:	4053      	eors	r3, r2
 8002bfe:	f003 2333 	and.w	r3, r3, #855651072	@ 0x33003300
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	6819      	ldr	r1, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	404a      	eors	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	4413      	add	r3, r2
 8002c24:	6819      	ldr	r1, [r3, #0]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	009a      	lsls	r2, r3, #2
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4403      	add	r3, r0
 8002c32:	404a      	eors	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b07      	cmp	r3, #7
 8002c40:	dda9      	ble.n	8002b96 <inv_shiftrows_3+0xe>
	}
}
 8002c42:	bf00      	nop
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	030f0c00 	.word	0x030f0c00

08002c54 <xor_columns>:
* involved in the XOR computation (should be 8 and 16 for AES-128 and AES-256,
* respectively).
* The idx_ror parameter refers to the rotation value. When a Rotword is applied
* the value should be 2, 26 otherwise.
******************************************************************************/
static void xor_columns(uint32_t* rkeys, int idx_xor, int idx_ror) {
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
	rkeys[1] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3304      	adds	r3, #4
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	43d2      	mvns	r2, r2
 8002c6c:	601a      	str	r2, [r3, #0]
	rkeys[2] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3308      	adds	r3, #8
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3308      	adds	r3, #8
 8002c78:	43d2      	mvns	r2, r2
 8002c7a:	601a      	str	r2, [r3, #0]
	rkeys[6] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3318      	adds	r3, #24
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3318      	adds	r3, #24
 8002c86:	43d2      	mvns	r2, r2
 8002c88:	601a      	str	r2, [r3, #0]
	rkeys[7] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	331c      	adds	r3, #28
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	331c      	adds	r3, #28
 8002c94:	43d2      	mvns	r2, r2
 8002c96:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e06a      	b.n	8002d74 <xor_columns+0x120>
		rkeys[i] = (rkeys[i-idx_xor] ^ ROR(rkeys[i], idx_ror))  & 0xc0c0c0c0;
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4413      	add	r3, r2
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	68f9      	ldr	r1, [r7, #12]
 8002cb2:	440b      	add	r3, r1
 8002cb4:	6819      	ldr	r1, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	fa61 f303 	ror.w	r3, r1, r3
 8002cbc:	405a      	eors	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	68f9      	ldr	r1, [r7, #12]
 8002cc4:	440b      	add	r3, r1
 8002cc6:	f002 32c0 	and.w	r2, r2, #3233857728	@ 0xc0c0c0c0
 8002cca:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x30303030);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	6819      	ldr	r1, [r3, #0]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	4403      	add	r3, r0
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	4053      	eors	r3, r2
 8002cf2:	f003 3230 	and.w	r2, r3, #808464432	@ 0x30303030
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	4403      	add	r3, r0
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x0c0c0c0c);
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4413      	add	r3, r2
 8002d0a:	6819      	ldr	r1, [r3, #0]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4413      	add	r3, r2
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	4403      	add	r3, r0
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	4053      	eors	r3, r2
 8002d28:	f003 320c 	and.w	r2, r3, #202116108	@ 0xc0c0c0c
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	4403      	add	r3, r0
 8002d34:	430a      	orrs	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x03030303);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4413      	add	r3, r2
 8002d40:	6819      	ldr	r1, [r3, #0]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	4403      	add	r3, r0
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	4053      	eors	r3, r2
 8002d5e:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	4403      	add	r3, r0
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	3301      	adds	r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b07      	cmp	r3, #7
 8002d78:	dd91      	ble.n	8002c9e <xor_columns+0x4a>
	}
}
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
 8002d7e:	371c      	adds	r7, #28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <aes128_keyschedule_ffs>:
* Fully bitsliced AES-128 key schedule to match the fully-fixsliced (ffs)
* representation. Note that it is possible to pass two different keys as input
* parameters if one wants to encrypt 2 blocks with two different keys.
******************************************************************************/
void aes128_keyschedule_ffs(uint32_t* rkeys, const unsigned char* key0,
						const unsigned char* key1) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
	packing(rkeys, key0, key1); 	// packs the keys into the bitsliced state
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f7fd ff19 	bl	8000bd0 <packing>
	memcpy(rkeys+8, rkeys, 32);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3320      	adds	r3, #32
 8002da2:	2220      	movs	r2, #32
 8002da4:	68f9      	ldr	r1, [r7, #12]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f004 f99d 	bl	80070e6 <memcpy>
	sbox(rkeys+8);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	3320      	adds	r3, #32
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe fb76 	bl	80014a2 <sbox>
	rkeys[15] ^= 0x00000300; 		// 1st rconst
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	333c      	adds	r3, #60	@ 0x3c
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	333c      	adds	r3, #60	@ 0x3c
 8002dc0:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002dc4:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+8, 8, 2); 	// Rotword and XOR between the columns
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3320      	adds	r3, #32
 8002dca:	2202      	movs	r2, #2
 8002dcc:	2108      	movs	r1, #8
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ff40 	bl	8002c54 <xor_columns>
	memcpy(rkeys+16, rkeys+8, 32);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	3320      	adds	r3, #32
 8002dde:	2220      	movs	r2, #32
 8002de0:	4619      	mov	r1, r3
 8002de2:	f004 f980 	bl	80070e6 <memcpy>
	sbox(rkeys+16);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	3340      	adds	r3, #64	@ 0x40
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fb59 	bl	80014a2 <sbox>
	rkeys[22] ^= 0x00000300;		// 2nd rconst
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3358      	adds	r3, #88	@ 0x58
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3358      	adds	r3, #88	@ 0x58
 8002dfa:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002dfe:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+16, 8, 2); 	// Rotword and XOR between the columns
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3340      	adds	r3, #64	@ 0x40
 8002e04:	2202      	movs	r2, #2
 8002e06:	2108      	movs	r1, #8
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff23 	bl	8002c54 <xor_columns>
	inv_shiftrows_1(rkeys+8); 		// to match fixslicing
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3320      	adds	r3, #32
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fe16 	bl	8002a44 <inv_shiftrows_1>
	memcpy(rkeys+24, rkeys+16, 32);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3340      	adds	r3, #64	@ 0x40
 8002e22:	2220      	movs	r2, #32
 8002e24:	4619      	mov	r1, r3
 8002e26:	f004 f95e 	bl	80070e6 <memcpy>
	sbox(rkeys+24);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3360      	adds	r3, #96	@ 0x60
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fb37 	bl	80014a2 <sbox>
	rkeys[29] ^= 0x00000300;		// 3rd rconst
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3374      	adds	r3, #116	@ 0x74
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	3374      	adds	r3, #116	@ 0x74
 8002e3e:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002e42:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+24, 8, 2); 	// Rotword and XOR between the columns
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3360      	adds	r3, #96	@ 0x60
 8002e48:	2202      	movs	r2, #2
 8002e4a:	2108      	movs	r1, #8
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff01 	bl	8002c54 <xor_columns>
	inv_shiftrows_2(rkeys+16); 		// to match fixslicing
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3340      	adds	r3, #64	@ 0x40
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fe5a 	bl	8002b10 <inv_shiftrows_2>
	memcpy(rkeys+32, rkeys+24, 32);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3360      	adds	r3, #96	@ 0x60
 8002e66:	2220      	movs	r2, #32
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f004 f93c 	bl	80070e6 <memcpy>
	sbox(rkeys+32);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	3380      	adds	r3, #128	@ 0x80
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fb15 	bl	80014a2 <sbox>
	rkeys[36] ^= 0x00000300; 		// 4th rconst
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3390      	adds	r3, #144	@ 0x90
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3390      	adds	r3, #144	@ 0x90
 8002e82:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002e86:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+32, 8, 2); 	// Rotword and XOR between the columns
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3380      	adds	r3, #128	@ 0x80
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	2108      	movs	r1, #8
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fedf 	bl	8002c54 <xor_columns>
	inv_shiftrows_3(rkeys+24); 		// to match fixslicing
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3360      	adds	r3, #96	@ 0x60
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fe74 	bl	8002b88 <inv_shiftrows_3>
	memcpy(rkeys+40, rkeys+32, 32);	
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f103 00a0 	add.w	r0, r3, #160	@ 0xa0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3380      	adds	r3, #128	@ 0x80
 8002eaa:	2220      	movs	r2, #32
 8002eac:	4619      	mov	r1, r3
 8002eae:	f004 f91a 	bl	80070e6 <memcpy>
	sbox(rkeys+40);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	33a0      	adds	r3, #160	@ 0xa0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe faf3 	bl	80014a2 <sbox>
	rkeys[43] ^= 0x00000300; 		// 5th rconst
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	33ac      	adds	r3, #172	@ 0xac
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	33ac      	adds	r3, #172	@ 0xac
 8002ec6:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002eca:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+40, 8, 2); 	// Rotword and XOR between the columns
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	33a0      	adds	r3, #160	@ 0xa0
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	2108      	movs	r1, #8
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff febd 	bl	8002c54 <xor_columns>
	memcpy(rkeys+48, rkeys+40, 32);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	33a0      	adds	r3, #160	@ 0xa0
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f004 f8fd 	bl	80070e6 <memcpy>
	sbox(rkeys+48);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	33c0      	adds	r3, #192	@ 0xc0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe fad6 	bl	80014a2 <sbox>
	rkeys[50] ^= 0x00000300;		// 6th rconst
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	33c8      	adds	r3, #200	@ 0xc8
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	33c8      	adds	r3, #200	@ 0xc8
 8002f00:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002f04:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+48, 8, 2); 	// Rotword and XOR between the columns
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	33c0      	adds	r3, #192	@ 0xc0
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	2108      	movs	r1, #8
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fea0 	bl	8002c54 <xor_columns>
	inv_shiftrows_1(rkeys+40); 		// to match fixslicing
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	33a0      	adds	r3, #160	@ 0xa0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fd93 	bl	8002a44 <inv_shiftrows_1>
	memcpy(rkeys+56, rkeys+48, 32);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f103 00e0 	add.w	r0, r3, #224	@ 0xe0
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	33c0      	adds	r3, #192	@ 0xc0
 8002f28:	2220      	movs	r2, #32
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f004 f8db 	bl	80070e6 <memcpy>
	sbox(rkeys+56);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	33e0      	adds	r3, #224	@ 0xe0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fab4 	bl	80014a2 <sbox>
	rkeys[57] ^= 0x00000300;		// 7th rconst
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	33e4      	adds	r3, #228	@ 0xe4
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	33e4      	adds	r3, #228	@ 0xe4
 8002f44:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002f48:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+56, 8, 2); 	// Rotword and XOR between the columns
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	33e0      	adds	r3, #224	@ 0xe0
 8002f4e:	2202      	movs	r2, #2
 8002f50:	2108      	movs	r1, #8
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fe7e 	bl	8002c54 <xor_columns>
	inv_shiftrows_2(rkeys+48); 		// to match fixslicing
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	33c0      	adds	r3, #192	@ 0xc0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fdd7 	bl	8002b10 <inv_shiftrows_2>
	memcpy(rkeys+64, rkeys+56, 32);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	33e0      	adds	r3, #224	@ 0xe0
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f004 f8b9 	bl	80070e6 <memcpy>
	sbox(rkeys+64);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe fa91 	bl	80014a2 <sbox>
	rkeys[64] ^= 0x00000300;		// 8th rconst
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002f8e:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002f92:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+64, 8, 2); 	// Rotword and XOR between the columns
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	2108      	movs	r1, #8
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fe58 	bl	8002c54 <xor_columns>
	inv_shiftrows_3(rkeys+56); 		// to match fixslicing
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	33e0      	adds	r3, #224	@ 0xe0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fded 	bl	8002b88 <inv_shiftrows_3>
	memcpy(rkeys+72, rkeys+64, 32);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002fba:	2220      	movs	r2, #32
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f004 f892 	bl	80070e6 <memcpy>
	sbox(rkeys+72);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe fa6a 	bl	80014a2 <sbox>
	rkeys[79] ^= 0x00000300; 		// 9th rconst
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8002fdc:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002fe0:	601a      	str	r2, [r3, #0]
	rkeys[78] ^= 0x00000300; 		// 9th rconst
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002ff0:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002ff4:	601a      	str	r2, [r3, #0]
	rkeys[76] ^= 0x00000300; 		// 9th rconst
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003004:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003008:	601a      	str	r2, [r3, #0]
	rkeys[75] ^= 0x00000300; 		// 9th rconst
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8003018:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 800301c:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys + 72, 8, 2); 	// Rotword and XOR between the columns
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8003024:	2202      	movs	r2, #2
 8003026:	2108      	movs	r1, #8
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fe13 	bl	8002c54 <xor_columns>
	memcpy(rkeys+80, rkeys+72, 32);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f503 70a0 	add.w	r0, r3, #320	@ 0x140
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800303a:	2220      	movs	r2, #32
 800303c:	4619      	mov	r1, r3
 800303e:	f004 f852 	bl	80070e6 <memcpy>
	sbox(rkeys+80);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe fa2a 	bl	80014a2 <sbox>
	rkeys[86] ^= 0x00000300; 		// 10th rconst
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800305c:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003060:	601a      	str	r2, [r3, #0]
	rkeys[85] ^= 0x00000300; 		// 10th rconst
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003070:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003074:	601a      	str	r2, [r3, #0]
	rkeys[83] ^= 0x00000300;		// 10th rconst
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8003084:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003088:	601a      	str	r2, [r3, #0]
	rkeys[82] ^= 0x00000300; 		// 10th rconst
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003098:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 800309c:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+80, 8, 2); 	// Rotword and XOR between the columns
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80030a4:	2202      	movs	r2, #2
 80030a6:	2108      	movs	r1, #8
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fdd3 	bl	8002c54 <xor_columns>
	inv_shiftrows_1(rkeys+72);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fcc5 	bl	8002a44 <inv_shiftrows_1>
	for(int i = 1; i < 11; i++) {
 80030ba:	2301      	movs	r3, #1
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	e036      	b.n	800312e <aes128_keyschedule_ffs+0x3a6>
		rkeys[i*8 + 1] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	015b      	lsls	r3, r3, #5
 80030c4:	3304      	adds	r3, #4
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	015b      	lsls	r3, r3, #5
 80030d0:	3304      	adds	r3, #4
 80030d2:	68f9      	ldr	r1, [r7, #12]
 80030d4:	440b      	add	r3, r1
 80030d6:	43d2      	mvns	r2, r2
 80030d8:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 2] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	015b      	lsls	r3, r3, #5
 80030de:	3308      	adds	r3, #8
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	015b      	lsls	r3, r3, #5
 80030ea:	3308      	adds	r3, #8
 80030ec:	68f9      	ldr	r1, [r7, #12]
 80030ee:	440b      	add	r3, r1
 80030f0:	43d2      	mvns	r2, r2
 80030f2:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 6] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	015b      	lsls	r3, r3, #5
 80030f8:	3318      	adds	r3, #24
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	015b      	lsls	r3, r3, #5
 8003104:	3318      	adds	r3, #24
 8003106:	68f9      	ldr	r1, [r7, #12]
 8003108:	440b      	add	r3, r1
 800310a:	43d2      	mvns	r2, r2
 800310c:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 7] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	015b      	lsls	r3, r3, #5
 8003112:	331c      	adds	r3, #28
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	015b      	lsls	r3, r3, #5
 800311e:	331c      	adds	r3, #28
 8003120:	68f9      	ldr	r1, [r7, #12]
 8003122:	440b      	add	r3, r1
 8003124:	43d2      	mvns	r2, r2
 8003126:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 11; i++) {
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	3301      	adds	r3, #1
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b0a      	cmp	r3, #10
 8003132:	ddc5      	ble.n	80030c0 <aes128_keyschedule_ffs+0x338>
	// 	printf("%x \n", rkeys[i]);
	// }
	


}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <serial_printf>:
 *      Author: cuauhtemoc
 */

#include "Serial.h"

void serial_printf(UART_HandleTypeDef *huart, uint8_t *pData, uint32_t Timeout){
 800313e:	b580      	push	{r7, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
	uint16_t Size = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	82fb      	strh	r3, [r7, #22]
	do{
		Size++;
 800314e:	8afb      	ldrh	r3, [r7, #22]
 8003150:	3301      	adds	r3, #1
 8003152:	82fb      	strh	r3, [r7, #22]
	}while(pData[Size]!='\0');
 8003154:	8afb      	ldrh	r3, [r7, #22]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	4413      	add	r3, r2
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f6      	bne.n	800314e <serial_printf+0x10>
	HAL_UART_Transmit(huart, pData,Size, HAL_MAX_DELAY);
 8003160:	8afa      	ldrh	r2, [r7, #22]
 8003162:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f002 fe59 	bl	8005e20 <HAL_UART_Transmit>
}
 800316e:	bf00      	nop
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <DWT_Init>:
static unsigned char asociated_data[plaintext_size];
static unsigned int bytes[7] = {32, 64, 128, 192, 256, 320, 512};

char buffer [1024];
unsigned int performance[REP];
void DWT_Init(void) {
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0

    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800317c:	4b0b      	ldr	r3, [pc, #44]	@ (80031ac <DWT_Init+0x34>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4a0a      	ldr	r2, [pc, #40]	@ (80031ac <DWT_Init+0x34>)
 8003182:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003186:	60d3      	str	r3, [r2, #12]
    DWT->LAR = 0xC5ACCE55;
 8003188:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <DWT_Init+0x38>)
 800318a:	4a0a      	ldr	r2, [pc, #40]	@ (80031b4 <DWT_Init+0x3c>)
 800318c:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
    DWT->CYCCNT = 0;
 8003190:	4b07      	ldr	r3, [pc, #28]	@ (80031b0 <DWT_Init+0x38>)
 8003192:	2200      	movs	r2, #0
 8003194:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003196:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <DWT_Init+0x38>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a05      	ldr	r2, [pc, #20]	@ (80031b0 <DWT_Init+0x38>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6013      	str	r3, [r2, #0]
}
 80031a2:	bf00      	nop
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	e000edf0 	.word	0xe000edf0
 80031b0:	e0001000 	.word	0xe0001000
 80031b4:	c5acce55 	.word	0xc5acce55

080031b8 <start_timer>:

void start_timer(void) {
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0;
 80031bc:	4b03      	ldr	r3, [pc, #12]	@ (80031cc <start_timer+0x14>)
 80031be:	2200      	movs	r2, #0
 80031c0:	605a      	str	r2, [r3, #4]
}
 80031c2:	bf00      	nop
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e0001000 	.word	0xe0001000

080031d0 <stop_timer>:

uint32_t stop_timer(void) {
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 80031d4:	4b03      	ldr	r3, [pc, #12]	@ (80031e4 <stop_timer+0x14>)
 80031d6:	685b      	ldr	r3, [r3, #4]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e0001000 	.word	0xe0001000

080031e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031ee:	f000 fd4a 	bl	8003c86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031f2:	f000 f8c9 	bl	8003388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031f6:	f000 f9db 	bl	80035b0 <MX_GPIO_Init>
  MX_ETH_Init();
 80031fa:	f000 f92d 	bl	8003458 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80031fe:	f000 f979 	bl	80034f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003202:	f000 f9a7 	bl	8003554 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  for (size_t i = 0; i < plaintext_size; i++)
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	e010      	b.n	800322e <main+0x46>
    {
  	  plaintext[i] =i;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	b2d9      	uxtb	r1, r3
 8003210:	4a50      	ldr	r2, [pc, #320]	@ (8003354 <main+0x16c>)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	4413      	add	r3, r2
 8003216:	460a      	mov	r2, r1
 8003218:	701a      	strb	r2, [r3, #0]
  	  asociated_data[i]=i;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	b2d9      	uxtb	r1, r3
 800321e:	4a4e      	ldr	r2, [pc, #312]	@ (8003358 <main+0x170>)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	4413      	add	r3, r2
 8003224:	460a      	mov	r2, r1
 8003226:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < plaintext_size; i++)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	3301      	adds	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003234:	d3ea      	bcc.n	800320c <main+0x24>
    }

    DWT_Init(); // Inicializar el contador de ciclos
 8003236:	f7ff ff9f 	bl	8003178 <DWT_Init>
    uint32_t cycles=0;
 800323a:	2300      	movs	r3, #0
 800323c:	603b      	str	r3, [r7, #0]
    uint32_t total_cycles=0;
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]

    int i=0;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]


    cycles=0;
 8003246:	2300      	movs	r3, #0
 8003248:	603b      	str	r3, [r7, #0]
    total_cycles=0;
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
    sprintf(buffer,"\n ELIMAC ROUNDS %i", ROUNDS+4);
 800324e:	220c      	movs	r2, #12
 8003250:	4942      	ldr	r1, [pc, #264]	@ (800335c <main+0x174>)
 8003252:	4843      	ldr	r0, [pc, #268]	@ (8003360 <main+0x178>)
 8003254:	f003 fe68 	bl	8006f28 <siprintf>
        serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003258:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800325c:	4940      	ldr	r1, [pc, #256]	@ (8003360 <main+0x178>)
 800325e:	4841      	ldr	r0, [pc, #260]	@ (8003364 <main+0x17c>)
 8003260:	f7ff ff6d 	bl	800313e <serial_printf>
        for (int j = 0; j < Number_test; j++) {
 8003264:	2300      	movs	r3, #0
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	e02d      	b.n	80032c6 <main+0xde>
            for (i = 0; i < REP; i++) {
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	e019      	b.n	80032a4 <main+0xbc>
                start_timer(); // Iniciar el contador de ciclos
 8003270:	f7ff ffa2 	bl	80031b8 <start_timer>
                ELIMAC(plaintext, bytes[j], key1, key2, ROUNDS, tag);
 8003274:	4a3c      	ldr	r2, [pc, #240]	@ (8003368 <main+0x180>)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327c:	b2d9      	uxtb	r1, r3
 800327e:	4b3b      	ldr	r3, [pc, #236]	@ (800336c <main+0x184>)
 8003280:	9301      	str	r3, [sp, #4]
 8003282:	2308      	movs	r3, #8
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	4b3a      	ldr	r3, [pc, #232]	@ (8003370 <main+0x188>)
 8003288:	4a3a      	ldr	r2, [pc, #232]	@ (8003374 <main+0x18c>)
 800328a:	4832      	ldr	r0, [pc, #200]	@ (8003354 <main+0x16c>)
 800328c:	f7fd f988 	bl	80005a0 <ELIMAC>
                cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 8003290:	f7ff ff9e 	bl	80031d0 <stop_timer>
 8003294:	6038      	str	r0, [r7, #0]
                total_cycles=cycles+total_cycles;
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	4413      	add	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
            for (i = 0; i < REP; i++) {
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3301      	adds	r3, #1
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b1d      	cmp	r3, #29
 80032a8:	dde2      	ble.n	8003270 <main+0x88>
            }
            performance[j] = total_cycles/REP;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4a32      	ldr	r2, [pc, #200]	@ (8003378 <main+0x190>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	091a      	lsrs	r2, r3, #4
 80032b4:	4931      	ldr	r1, [pc, #196]	@ (800337c <main+0x194>)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            total_cycles=0;
 80032bc:	2300      	movs	r3, #0
 80032be:	613b      	str	r3, [r7, #16]
        for (int j = 0; j < Number_test; j++) {
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	3301      	adds	r3, #1
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b06      	cmp	r3, #6
 80032ca:	ddce      	ble.n	800326a <main+0x82>
        }
        for (i = 0; i < Number_test; i++) {
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e020      	b.n	8003314 <main+0x12c>
      	    sprintf(buffer,"\n bytes %u ", bytes[i]);
 80032d2:	4a25      	ldr	r2, [pc, #148]	@ (8003368 <main+0x180>)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032da:	461a      	mov	r2, r3
 80032dc:	4928      	ldr	r1, [pc, #160]	@ (8003380 <main+0x198>)
 80032de:	4820      	ldr	r0, [pc, #128]	@ (8003360 <main+0x178>)
 80032e0:	f003 fe22 	bl	8006f28 <siprintf>
      	    serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 80032e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032e8:	491d      	ldr	r1, [pc, #116]	@ (8003360 <main+0x178>)
 80032ea:	481e      	ldr	r0, [pc, #120]	@ (8003364 <main+0x17c>)
 80032ec:	f7ff ff27 	bl	800313e <serial_printf>
  			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 80032f0:	4a22      	ldr	r2, [pc, #136]	@ (800337c <main+0x194>)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4922      	ldr	r1, [pc, #136]	@ (8003384 <main+0x19c>)
 80032fc:	4818      	ldr	r0, [pc, #96]	@ (8003360 <main+0x178>)
 80032fe:	f003 fe13 	bl	8006f28 <siprintf>
  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003302:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003306:	4916      	ldr	r1, [pc, #88]	@ (8003360 <main+0x178>)
 8003308:	4816      	ldr	r0, [pc, #88]	@ (8003364 <main+0x17c>)
 800330a:	f7ff ff18 	bl	800313e <serial_printf>
        for (i = 0; i < Number_test; i++) {
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3301      	adds	r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b06      	cmp	r3, #6
 8003318:	dddb      	ble.n	80032d2 <main+0xea>
  	   }

        for (size_t i = 0; i < plaintext_size; i++){
 800331a:	2300      	movs	r3, #0
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	e010      	b.n	8003342 <main+0x15a>
      	   plaintext[i] =i;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	b2d9      	uxtb	r1, r3
 8003324:	4a0b      	ldr	r2, [pc, #44]	@ (8003354 <main+0x16c>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	460a      	mov	r2, r1
 800332c:	701a      	strb	r2, [r3, #0]
      	   asociated_data[i]=i;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	b2d9      	uxtb	r1, r3
 8003332:	4a09      	ldr	r2, [pc, #36]	@ (8003358 <main+0x170>)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	460a      	mov	r2, r1
 800333a:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < plaintext_size; i++){
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3301      	adds	r3, #1
 8003340:	607b      	str	r3, [r7, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003348:	d3ea      	bcc.n	8003320 <main+0x138>
 800334a:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000860 	.word	0x20000860
 8003358:	20001860 	.word	0x20001860
 800335c:	08008050 	.word	0x08008050
 8003360:	20002860 	.word	0x20002860
 8003364:	200002e8 	.word	0x200002e8
 8003368:	20000020 	.word	0x20000020
 800336c:	20000850 	.word	0x20000850
 8003370:	20000010 	.word	0x20000010
 8003374:	20000000 	.word	0x20000000
 8003378:	88888889 	.word	0x88888889
 800337c:	20002c60 	.word	0x20002c60
 8003380:	08008064 	.word	0x08008064
 8003384:	08008070 	.word	0x08008070

08003388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b094      	sub	sp, #80	@ 0x50
 800338c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800338e:	f107 0320 	add.w	r3, r7, #32
 8003392:	2230      	movs	r2, #48	@ 0x30
 8003394:	2100      	movs	r1, #0
 8003396:	4618      	mov	r0, r3
 8003398:	f003 fe29 	bl	8006fee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80033ac:	f001 fc20 	bl	8004bf0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033b0:	4b27      	ldr	r3, [pc, #156]	@ (8003450 <SystemClock_Config+0xc8>)
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	4a26      	ldr	r2, [pc, #152]	@ (8003450 <SystemClock_Config+0xc8>)
 80033b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80033bc:	4b24      	ldr	r3, [pc, #144]	@ (8003450 <SystemClock_Config+0xc8>)
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80033c8:	4b22      	ldr	r3, [pc, #136]	@ (8003454 <SystemClock_Config+0xcc>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80033d0:	4a20      	ldr	r2, [pc, #128]	@ (8003454 <SystemClock_Config+0xcc>)
 80033d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003454 <SystemClock_Config+0xcc>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033e4:	2301      	movs	r3, #1
 80033e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80033e8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033ee:	2302      	movs	r3, #2
 80033f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80033f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80033f8:	2304      	movs	r3, #4
 80033fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80033fc:	2348      	movs	r3, #72	@ 0x48
 80033fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003400:	2302      	movs	r3, #2
 8003402:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003404:	2303      	movs	r3, #3
 8003406:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003408:	f107 0320 	add.w	r3, r7, #32
 800340c:	4618      	mov	r0, r3
 800340e:	f001 fbff 	bl	8004c10 <HAL_RCC_OscConfig>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003418:	f000 f96c 	bl	80036f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800341c:	230f      	movs	r3, #15
 800341e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003420:	2302      	movs	r3, #2
 8003422:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800342c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003432:	f107 030c 	add.w	r3, r7, #12
 8003436:	2102      	movs	r1, #2
 8003438:	4618      	mov	r0, r3
 800343a:	f001 fe8d 	bl	8005158 <HAL_RCC_ClockConfig>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003444:	f000 f956 	bl	80036f4 <Error_Handler>
  }
}
 8003448:	bf00      	nop
 800344a:	3750      	adds	r7, #80	@ 0x50
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40023800 	.word	0x40023800
 8003454:	40007000 	.word	0x40007000

08003458 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800345c:	4b1f      	ldr	r3, [pc, #124]	@ (80034dc <MX_ETH_Init+0x84>)
 800345e:	4a20      	ldr	r2, [pc, #128]	@ (80034e0 <MX_ETH_Init+0x88>)
 8003460:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003462:	4b20      	ldr	r3, [pc, #128]	@ (80034e4 <MX_ETH_Init+0x8c>)
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003468:	4b1e      	ldr	r3, [pc, #120]	@ (80034e4 <MX_ETH_Init+0x8c>)
 800346a:	2280      	movs	r2, #128	@ 0x80
 800346c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800346e:	4b1d      	ldr	r3, [pc, #116]	@ (80034e4 <MX_ETH_Init+0x8c>)
 8003470:	22e1      	movs	r2, #225	@ 0xe1
 8003472:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8003474:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <MX_ETH_Init+0x8c>)
 8003476:	2200      	movs	r2, #0
 8003478:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800347a:	4b1a      	ldr	r3, [pc, #104]	@ (80034e4 <MX_ETH_Init+0x8c>)
 800347c:	2200      	movs	r2, #0
 800347e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8003480:	4b18      	ldr	r3, [pc, #96]	@ (80034e4 <MX_ETH_Init+0x8c>)
 8003482:	2200      	movs	r2, #0
 8003484:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003486:	4b15      	ldr	r3, [pc, #84]	@ (80034dc <MX_ETH_Init+0x84>)
 8003488:	4a16      	ldr	r2, [pc, #88]	@ (80034e4 <MX_ETH_Init+0x8c>)
 800348a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800348c:	4b13      	ldr	r3, [pc, #76]	@ (80034dc <MX_ETH_Init+0x84>)
 800348e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003492:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003494:	4b11      	ldr	r3, [pc, #68]	@ (80034dc <MX_ETH_Init+0x84>)
 8003496:	4a14      	ldr	r2, [pc, #80]	@ (80034e8 <MX_ETH_Init+0x90>)
 8003498:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800349a:	4b10      	ldr	r3, [pc, #64]	@ (80034dc <MX_ETH_Init+0x84>)
 800349c:	4a13      	ldr	r2, [pc, #76]	@ (80034ec <MX_ETH_Init+0x94>)
 800349e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80034a0:	4b0e      	ldr	r3, [pc, #56]	@ (80034dc <MX_ETH_Init+0x84>)
 80034a2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80034a6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80034a8:	480c      	ldr	r0, [pc, #48]	@ (80034dc <MX_ETH_Init+0x84>)
 80034aa:	f000 fd53 	bl	8003f54 <HAL_ETH_Init>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80034b4:	f000 f91e 	bl	80036f4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80034b8:	2238      	movs	r2, #56	@ 0x38
 80034ba:	2100      	movs	r1, #0
 80034bc:	480c      	ldr	r0, [pc, #48]	@ (80034f0 <MX_ETH_Init+0x98>)
 80034be:	f003 fd96 	bl	8006fee <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80034c2:	4b0b      	ldr	r3, [pc, #44]	@ (80034f0 <MX_ETH_Init+0x98>)
 80034c4:	2221      	movs	r2, #33	@ 0x21
 80034c6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80034c8:	4b09      	ldr	r3, [pc, #36]	@ (80034f0 <MX_ETH_Init+0x98>)
 80034ca:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80034ce:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80034d0:	4b07      	ldr	r3, [pc, #28]	@ (80034f0 <MX_ETH_Init+0x98>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000238 	.word	0x20000238
 80034e0:	40028000 	.word	0x40028000
 80034e4:	20002cd8 	.word	0x20002cd8
 80034e8:	20000144 	.word	0x20000144
 80034ec:	200000a4 	.word	0x200000a4
 80034f0:	20000200 	.word	0x20000200

080034f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80034f8:	4b14      	ldr	r3, [pc, #80]	@ (800354c <MX_USART3_UART_Init+0x58>)
 80034fa:	4a15      	ldr	r2, [pc, #84]	@ (8003550 <MX_USART3_UART_Init+0x5c>)
 80034fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80034fe:	4b13      	ldr	r3, [pc, #76]	@ (800354c <MX_USART3_UART_Init+0x58>)
 8003500:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003504:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003506:	4b11      	ldr	r3, [pc, #68]	@ (800354c <MX_USART3_UART_Init+0x58>)
 8003508:	2200      	movs	r2, #0
 800350a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800350c:	4b0f      	ldr	r3, [pc, #60]	@ (800354c <MX_USART3_UART_Init+0x58>)
 800350e:	2200      	movs	r2, #0
 8003510:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003512:	4b0e      	ldr	r3, [pc, #56]	@ (800354c <MX_USART3_UART_Init+0x58>)
 8003514:	2200      	movs	r2, #0
 8003516:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003518:	4b0c      	ldr	r3, [pc, #48]	@ (800354c <MX_USART3_UART_Init+0x58>)
 800351a:	220c      	movs	r2, #12
 800351c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800351e:	4b0b      	ldr	r3, [pc, #44]	@ (800354c <MX_USART3_UART_Init+0x58>)
 8003520:	2200      	movs	r2, #0
 8003522:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003524:	4b09      	ldr	r3, [pc, #36]	@ (800354c <MX_USART3_UART_Init+0x58>)
 8003526:	2200      	movs	r2, #0
 8003528:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800352a:	4b08      	ldr	r3, [pc, #32]	@ (800354c <MX_USART3_UART_Init+0x58>)
 800352c:	2200      	movs	r2, #0
 800352e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003530:	4b06      	ldr	r3, [pc, #24]	@ (800354c <MX_USART3_UART_Init+0x58>)
 8003532:	2200      	movs	r2, #0
 8003534:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003536:	4805      	ldr	r0, [pc, #20]	@ (800354c <MX_USART3_UART_Init+0x58>)
 8003538:	f002 fc24 	bl	8005d84 <HAL_UART_Init>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003542:	f000 f8d7 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200002e8 	.word	0x200002e8
 8003550:	40004800 	.word	0x40004800

08003554 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003558:	4b14      	ldr	r3, [pc, #80]	@ (80035ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800355a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800355e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003560:	4b12      	ldr	r3, [pc, #72]	@ (80035ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003562:	2206      	movs	r2, #6
 8003564:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003566:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003568:	2202      	movs	r2, #2
 800356a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800356c:	4b0f      	ldr	r3, [pc, #60]	@ (80035ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800356e:	2200      	movs	r2, #0
 8003570:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003572:	4b0e      	ldr	r3, [pc, #56]	@ (80035ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003574:	2202      	movs	r2, #2
 8003576:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003578:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800357a:	2201      	movs	r2, #1
 800357c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800357e:	4b0b      	ldr	r3, [pc, #44]	@ (80035ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003580:	2200      	movs	r2, #0
 8003582:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003584:	4b09      	ldr	r3, [pc, #36]	@ (80035ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003586:	2200      	movs	r2, #0
 8003588:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800358a:	4b08      	ldr	r3, [pc, #32]	@ (80035ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800358c:	2201      	movs	r2, #1
 800358e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003590:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003592:	2200      	movs	r2, #0
 8003594:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003596:	4805      	ldr	r0, [pc, #20]	@ (80035ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003598:	f001 f9ef 	bl	800497a <HAL_PCD_Init>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80035a2:	f000 f8a7 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000370 	.word	0x20000370

080035b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08c      	sub	sp, #48	@ 0x30
 80035b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b6:	f107 031c 	add.w	r3, r7, #28
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	605a      	str	r2, [r3, #4]
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	60da      	str	r2, [r3, #12]
 80035c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035c6:	4b47      	ldr	r3, [pc, #284]	@ (80036e4 <MX_GPIO_Init+0x134>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	4a46      	ldr	r2, [pc, #280]	@ (80036e4 <MX_GPIO_Init+0x134>)
 80035cc:	f043 0304 	orr.w	r3, r3, #4
 80035d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035d2:	4b44      	ldr	r3, [pc, #272]	@ (80036e4 <MX_GPIO_Init+0x134>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035de:	4b41      	ldr	r3, [pc, #260]	@ (80036e4 <MX_GPIO_Init+0x134>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	4a40      	ldr	r2, [pc, #256]	@ (80036e4 <MX_GPIO_Init+0x134>)
 80035e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ea:	4b3e      	ldr	r3, [pc, #248]	@ (80036e4 <MX_GPIO_Init+0x134>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f6:	4b3b      	ldr	r3, [pc, #236]	@ (80036e4 <MX_GPIO_Init+0x134>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	4a3a      	ldr	r2, [pc, #232]	@ (80036e4 <MX_GPIO_Init+0x134>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6313      	str	r3, [r2, #48]	@ 0x30
 8003602:	4b38      	ldr	r3, [pc, #224]	@ (80036e4 <MX_GPIO_Init+0x134>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800360e:	4b35      	ldr	r3, [pc, #212]	@ (80036e4 <MX_GPIO_Init+0x134>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	4a34      	ldr	r2, [pc, #208]	@ (80036e4 <MX_GPIO_Init+0x134>)
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	6313      	str	r3, [r2, #48]	@ 0x30
 800361a:	4b32      	ldr	r3, [pc, #200]	@ (80036e4 <MX_GPIO_Init+0x134>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003626:	4b2f      	ldr	r3, [pc, #188]	@ (80036e4 <MX_GPIO_Init+0x134>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	4a2e      	ldr	r2, [pc, #184]	@ (80036e4 <MX_GPIO_Init+0x134>)
 800362c:	f043 0308 	orr.w	r3, r3, #8
 8003630:	6313      	str	r3, [r2, #48]	@ 0x30
 8003632:	4b2c      	ldr	r3, [pc, #176]	@ (80036e4 <MX_GPIO_Init+0x134>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800363e:	4b29      	ldr	r3, [pc, #164]	@ (80036e4 <MX_GPIO_Init+0x134>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	4a28      	ldr	r2, [pc, #160]	@ (80036e4 <MX_GPIO_Init+0x134>)
 8003644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003648:	6313      	str	r3, [r2, #48]	@ 0x30
 800364a:	4b26      	ldr	r3, [pc, #152]	@ (80036e4 <MX_GPIO_Init+0x134>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003656:	2200      	movs	r2, #0
 8003658:	f244 0181 	movw	r1, #16513	@ 0x4081
 800365c:	4822      	ldr	r0, [pc, #136]	@ (80036e8 <MX_GPIO_Init+0x138>)
 800365e:	f001 f973 	bl	8004948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003662:	2200      	movs	r2, #0
 8003664:	2140      	movs	r1, #64	@ 0x40
 8003666:	4821      	ldr	r0, [pc, #132]	@ (80036ec <MX_GPIO_Init+0x13c>)
 8003668:	f001 f96e 	bl	8004948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800366c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003672:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800367c:	f107 031c 	add.w	r3, r7, #28
 8003680:	4619      	mov	r1, r3
 8003682:	481b      	ldr	r0, [pc, #108]	@ (80036f0 <MX_GPIO_Init+0x140>)
 8003684:	f000 ffb4 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003688:	f244 0381 	movw	r3, #16513	@ 0x4081
 800368c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800368e:	2301      	movs	r3, #1
 8003690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003696:	2300      	movs	r3, #0
 8003698:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369a:	f107 031c 	add.w	r3, r7, #28
 800369e:	4619      	mov	r1, r3
 80036a0:	4811      	ldr	r0, [pc, #68]	@ (80036e8 <MX_GPIO_Init+0x138>)
 80036a2:	f000 ffa5 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80036a6:	2340      	movs	r3, #64	@ 0x40
 80036a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036aa:	2301      	movs	r3, #1
 80036ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b2:	2300      	movs	r3, #0
 80036b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80036b6:	f107 031c 	add.w	r3, r7, #28
 80036ba:	4619      	mov	r1, r3
 80036bc:	480b      	ldr	r0, [pc, #44]	@ (80036ec <MX_GPIO_Init+0x13c>)
 80036be:	f000 ff97 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80036c2:	2380      	movs	r3, #128	@ 0x80
 80036c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036c6:	2300      	movs	r3, #0
 80036c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80036ce:	f107 031c 	add.w	r3, r7, #28
 80036d2:	4619      	mov	r1, r3
 80036d4:	4805      	ldr	r0, [pc, #20]	@ (80036ec <MX_GPIO_Init+0x13c>)
 80036d6:	f000 ff8b 	bl	80045f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80036da:	bf00      	nop
 80036dc:	3730      	adds	r7, #48	@ 0x30
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40020400 	.word	0x40020400
 80036ec:	40021800 	.word	0x40021800
 80036f0:	40020800 	.word	0x40020800

080036f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036f8:	b672      	cpsid	i
}
 80036fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036fc:	bf00      	nop
 80036fe:	e7fd      	b.n	80036fc <Error_Handler+0x8>

08003700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	4b0f      	ldr	r3, [pc, #60]	@ (8003744 <HAL_MspInit+0x44>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	4a0e      	ldr	r2, [pc, #56]	@ (8003744 <HAL_MspInit+0x44>)
 800370c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003710:	6413      	str	r3, [r2, #64]	@ 0x40
 8003712:	4b0c      	ldr	r3, [pc, #48]	@ (8003744 <HAL_MspInit+0x44>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371e:	4b09      	ldr	r3, [pc, #36]	@ (8003744 <HAL_MspInit+0x44>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	4a08      	ldr	r2, [pc, #32]	@ (8003744 <HAL_MspInit+0x44>)
 8003724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003728:	6453      	str	r3, [r2, #68]	@ 0x44
 800372a:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <HAL_MspInit+0x44>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800

08003748 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08e      	sub	sp, #56	@ 0x38
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a4e      	ldr	r2, [pc, #312]	@ (80038a0 <HAL_ETH_MspInit+0x158>)
 8003766:	4293      	cmp	r3, r2
 8003768:	f040 8096 	bne.w	8003898 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800376c:	4b4d      	ldr	r3, [pc, #308]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 800376e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003770:	4a4c      	ldr	r2, [pc, #304]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 8003772:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003776:	6313      	str	r3, [r2, #48]	@ 0x30
 8003778:	4b4a      	ldr	r3, [pc, #296]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 800377a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003780:	623b      	str	r3, [r7, #32]
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	4b47      	ldr	r3, [pc, #284]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003788:	4a46      	ldr	r2, [pc, #280]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 800378a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800378e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003790:	4b44      	ldr	r3, [pc, #272]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003794:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4b41      	ldr	r3, [pc, #260]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 800379e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a0:	4a40      	ldr	r2, [pc, #256]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 80037a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a8:	4b3e      	ldr	r3, [pc, #248]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 80037aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037b4:	4b3b      	ldr	r3, [pc, #236]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b8:	4a3a      	ldr	r2, [pc, #232]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 80037ba:	f043 0304 	orr.w	r3, r3, #4
 80037be:	6313      	str	r3, [r2, #48]	@ 0x30
 80037c0:	4b38      	ldr	r3, [pc, #224]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 80037c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037cc:	4b35      	ldr	r3, [pc, #212]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 80037ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d0:	4a34      	ldr	r2, [pc, #208]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80037d8:	4b32      	ldr	r3, [pc, #200]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 80037da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e4:	4b2f      	ldr	r3, [pc, #188]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e8:	4a2e      	ldr	r2, [pc, #184]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 80037ea:	f043 0302 	orr.w	r3, r3, #2
 80037ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f0:	4b2c      	ldr	r3, [pc, #176]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 80037f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80037fc:	4b29      	ldr	r3, [pc, #164]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003800:	4a28      	ldr	r2, [pc, #160]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 8003802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003806:	6313      	str	r3, [r2, #48]	@ 0x30
 8003808:	4b26      	ldr	r3, [pc, #152]	@ (80038a4 <HAL_ETH_MspInit+0x15c>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003814:	2332      	movs	r3, #50	@ 0x32
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003818:	2302      	movs	r3, #2
 800381a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003820:	2303      	movs	r3, #3
 8003822:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003824:	230b      	movs	r3, #11
 8003826:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800382c:	4619      	mov	r1, r3
 800382e:	481e      	ldr	r0, [pc, #120]	@ (80038a8 <HAL_ETH_MspInit+0x160>)
 8003830:	f000 fede 	bl	80045f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003834:	2386      	movs	r3, #134	@ 0x86
 8003836:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003838:	2302      	movs	r3, #2
 800383a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383c:	2300      	movs	r3, #0
 800383e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003840:	2303      	movs	r3, #3
 8003842:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003844:	230b      	movs	r3, #11
 8003846:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800384c:	4619      	mov	r1, r3
 800384e:	4817      	ldr	r0, [pc, #92]	@ (80038ac <HAL_ETH_MspInit+0x164>)
 8003850:	f000 fece 	bl	80045f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003854:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385a:	2302      	movs	r3, #2
 800385c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385e:	2300      	movs	r3, #0
 8003860:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003862:	2303      	movs	r3, #3
 8003864:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003866:	230b      	movs	r3, #11
 8003868:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800386a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800386e:	4619      	mov	r1, r3
 8003870:	480f      	ldr	r0, [pc, #60]	@ (80038b0 <HAL_ETH_MspInit+0x168>)
 8003872:	f000 febd 	bl	80045f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003876:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387c:	2302      	movs	r3, #2
 800387e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003880:	2300      	movs	r3, #0
 8003882:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003884:	2303      	movs	r3, #3
 8003886:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003888:	230b      	movs	r3, #11
 800388a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800388c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003890:	4619      	mov	r1, r3
 8003892:	4808      	ldr	r0, [pc, #32]	@ (80038b4 <HAL_ETH_MspInit+0x16c>)
 8003894:	f000 feac 	bl	80045f0 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8003898:	bf00      	nop
 800389a:	3738      	adds	r7, #56	@ 0x38
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40028000 	.word	0x40028000
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40020800 	.word	0x40020800
 80038ac:	40020000 	.word	0x40020000
 80038b0:	40020400 	.word	0x40020400
 80038b4:	40021800 	.word	0x40021800

080038b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b0aa      	sub	sp, #168	@ 0xa8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038d0:	f107 0310 	add.w	r3, r7, #16
 80038d4:	2284      	movs	r2, #132	@ 0x84
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f003 fb88 	bl	8006fee <memset>
  if(huart->Instance==USART3)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a22      	ldr	r2, [pc, #136]	@ (800396c <HAL_UART_MspInit+0xb4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d13c      	bne.n	8003962 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80038e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80038ee:	2300      	movs	r3, #0
 80038f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038f2:	f107 0310 	add.w	r3, r7, #16
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 fe54 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003902:	f7ff fef7 	bl	80036f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003906:	4b1a      	ldr	r3, [pc, #104]	@ (8003970 <HAL_UART_MspInit+0xb8>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	4a19      	ldr	r2, [pc, #100]	@ (8003970 <HAL_UART_MspInit+0xb8>)
 800390c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003910:	6413      	str	r3, [r2, #64]	@ 0x40
 8003912:	4b17      	ldr	r3, [pc, #92]	@ (8003970 <HAL_UART_MspInit+0xb8>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800391e:	4b14      	ldr	r3, [pc, #80]	@ (8003970 <HAL_UART_MspInit+0xb8>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003922:	4a13      	ldr	r2, [pc, #76]	@ (8003970 <HAL_UART_MspInit+0xb8>)
 8003924:	f043 0308 	orr.w	r3, r3, #8
 8003928:	6313      	str	r3, [r2, #48]	@ 0x30
 800392a:	4b11      	ldr	r3, [pc, #68]	@ (8003970 <HAL_UART_MspInit+0xb8>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003936:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800393a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393e:	2302      	movs	r3, #2
 8003940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	2300      	movs	r3, #0
 8003946:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800394a:	2303      	movs	r3, #3
 800394c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003950:	2307      	movs	r3, #7
 8003952:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003956:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800395a:	4619      	mov	r1, r3
 800395c:	4805      	ldr	r0, [pc, #20]	@ (8003974 <HAL_UART_MspInit+0xbc>)
 800395e:	f000 fe47 	bl	80045f0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003962:	bf00      	nop
 8003964:	37a8      	adds	r7, #168	@ 0xa8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40004800 	.word	0x40004800
 8003970:	40023800 	.word	0x40023800
 8003974:	40020c00 	.word	0x40020c00

08003978 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b0ac      	sub	sp, #176	@ 0xb0
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003990:	f107 0318 	add.w	r3, r7, #24
 8003994:	2284      	movs	r2, #132	@ 0x84
 8003996:	2100      	movs	r1, #0
 8003998:	4618      	mov	r0, r3
 800399a:	f003 fb28 	bl	8006fee <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039a6:	d159      	bne.n	8003a5c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80039a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80039ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039b4:	f107 0318 	add.w	r3, r7, #24
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 fdf3 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80039c4:	f7ff fe96 	bl	80036f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c8:	4b26      	ldr	r3, [pc, #152]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 80039ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039cc:	4a25      	ldr	r2, [pc, #148]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80039d4:	4b23      	ldr	r3, [pc, #140]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80039e0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80039e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e8:	2302      	movs	r3, #2
 80039ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f4:	2303      	movs	r3, #3
 80039f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80039fa:	230a      	movs	r3, #10
 80039fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a00:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a04:	4619      	mov	r1, r3
 8003a06:	4818      	ldr	r0, [pc, #96]	@ (8003a68 <HAL_PCD_MspInit+0xf0>)
 8003a08:	f000 fdf2 	bl	80045f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003a0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003a20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a24:	4619      	mov	r1, r3
 8003a26:	4810      	ldr	r0, [pc, #64]	@ (8003a68 <HAL_PCD_MspInit+0xf0>)
 8003a28:	f000 fde2 	bl	80045f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a30:	4a0c      	ldr	r2, [pc, #48]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 8003a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a36:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a38:	4b0a      	ldr	r3, [pc, #40]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4b07      	ldr	r3, [pc, #28]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 8003a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a48:	4a06      	ldr	r2, [pc, #24]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 8003a4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a50:	4b04      	ldr	r3, [pc, #16]	@ (8003a64 <HAL_PCD_MspInit+0xec>)
 8003a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8003a5c:	bf00      	nop
 8003a5e:	37b0      	adds	r7, #176	@ 0xb0
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40020000 	.word	0x40020000

08003a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a70:	bf00      	nop
 8003a72:	e7fd      	b.n	8003a70 <NMI_Handler+0x4>

08003a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a78:	bf00      	nop
 8003a7a:	e7fd      	b.n	8003a78 <HardFault_Handler+0x4>

08003a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a80:	bf00      	nop
 8003a82:	e7fd      	b.n	8003a80 <MemManage_Handler+0x4>

08003a84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a88:	bf00      	nop
 8003a8a:	e7fd      	b.n	8003a88 <BusFault_Handler+0x4>

08003a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a90:	bf00      	nop
 8003a92:	e7fd      	b.n	8003a90 <UsageFault_Handler+0x4>

08003a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ab4:	bf00      	nop
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ac2:	f000 f91d 	bl	8003d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b086      	sub	sp, #24
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	e00a      	b.n	8003af2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003adc:	f3af 8000 	nop.w
 8003ae0:	4601      	mov	r1, r0
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	b2ca      	uxtb	r2, r1
 8003aea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	3301      	adds	r3, #1
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	dbf0      	blt.n	8003adc <_read+0x12>
  }

  return len;
 8003afa:	687b      	ldr	r3, [r7, #4]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	e009      	b.n	8003b2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	60ba      	str	r2, [r7, #8]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	3301      	adds	r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	dbf1      	blt.n	8003b16 <_write+0x12>
  }
  return len;
 8003b32:	687b      	ldr	r3, [r7, #4]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <_close>:

int _close(int file)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b64:	605a      	str	r2, [r3, #4]
  return 0;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <_isatty>:

int _isatty(int file)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b7c:	2301      	movs	r3, #1
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b085      	sub	sp, #20
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bac:	4a14      	ldr	r2, [pc, #80]	@ (8003c00 <_sbrk+0x5c>)
 8003bae:	4b15      	ldr	r3, [pc, #84]	@ (8003c04 <_sbrk+0x60>)
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bb8:	4b13      	ldr	r3, [pc, #76]	@ (8003c08 <_sbrk+0x64>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bc0:	4b11      	ldr	r3, [pc, #68]	@ (8003c08 <_sbrk+0x64>)
 8003bc2:	4a12      	ldr	r2, [pc, #72]	@ (8003c0c <_sbrk+0x68>)
 8003bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bc6:	4b10      	ldr	r3, [pc, #64]	@ (8003c08 <_sbrk+0x64>)
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d207      	bcs.n	8003be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bd4:	f003 fa5a 	bl	800708c <__errno>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	220c      	movs	r2, #12
 8003bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003be2:	e009      	b.n	8003bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003be4:	4b08      	ldr	r3, [pc, #32]	@ (8003c08 <_sbrk+0x64>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bea:	4b07      	ldr	r3, [pc, #28]	@ (8003c08 <_sbrk+0x64>)
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	4a05      	ldr	r2, [pc, #20]	@ (8003c08 <_sbrk+0x64>)
 8003bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20050000 	.word	0x20050000
 8003c04:	00000400 	.word	0x00000400
 8003c08:	20002ce0 	.word	0x20002ce0
 8003c0c:	20002e38 	.word	0x20002e38

08003c10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c14:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <SystemInit+0x20>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1a:	4a05      	ldr	r2, [pc, #20]	@ (8003c30 <SystemInit+0x20>)
 8003c1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	e000ed00 	.word	0xe000ed00

08003c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c38:	f7ff ffea 	bl	8003c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c3c:	480c      	ldr	r0, [pc, #48]	@ (8003c70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c3e:	490d      	ldr	r1, [pc, #52]	@ (8003c74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c40:	4a0d      	ldr	r2, [pc, #52]	@ (8003c78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c44:	e002      	b.n	8003c4c <LoopCopyDataInit>

08003c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c4a:	3304      	adds	r3, #4

08003c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c50:	d3f9      	bcc.n	8003c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c52:	4a0a      	ldr	r2, [pc, #40]	@ (8003c7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c54:	4c0a      	ldr	r4, [pc, #40]	@ (8003c80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c58:	e001      	b.n	8003c5e <LoopFillZerobss>

08003c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c5c:	3204      	adds	r2, #4

08003c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c60:	d3fb      	bcc.n	8003c5a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8003c62:	f003 fa19 	bl	8007098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c66:	f7ff fabf 	bl	80031e8 <main>
  bx  lr    
 8003c6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c6c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c74:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8003c78:	080080e4 	.word	0x080080e4
  ldr r2, =_sbss
 8003c7c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003c80:	20002e34 	.word	0x20002e34

08003c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c84:	e7fe      	b.n	8003c84 <ADC_IRQHandler>

08003c86 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c8a:	2003      	movs	r0, #3
 8003c8c:	f000 f92e 	bl	8003eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c90:	2000      	movs	r0, #0
 8003c92:	f000 f805 	bl	8003ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c96:	f7ff fd33 	bl	8003700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ca8:	4b12      	ldr	r3, [pc, #72]	@ (8003cf4 <HAL_InitTick+0x54>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b12      	ldr	r3, [pc, #72]	@ (8003cf8 <HAL_InitTick+0x58>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 f93b 	bl	8003f3a <HAL_SYSTICK_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e00e      	b.n	8003cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b0f      	cmp	r3, #15
 8003cd2:	d80a      	bhi.n	8003cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cdc:	f000 f911 	bl	8003f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ce0:	4a06      	ldr	r2, [pc, #24]	@ (8003cfc <HAL_InitTick+0x5c>)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e000      	b.n	8003cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	2000003c 	.word	0x2000003c
 8003cf8:	20000044 	.word	0x20000044
 8003cfc:	20000040 	.word	0x20000040

08003d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d04:	4b06      	ldr	r3, [pc, #24]	@ (8003d20 <HAL_IncTick+0x20>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <HAL_IncTick+0x24>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4413      	add	r3, r2
 8003d10:	4a04      	ldr	r2, [pc, #16]	@ (8003d24 <HAL_IncTick+0x24>)
 8003d12:	6013      	str	r3, [r2, #0]
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000044 	.word	0x20000044
 8003d24:	20002ce4 	.word	0x20002ce4

08003d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d2c:	4b03      	ldr	r3, [pc, #12]	@ (8003d3c <HAL_GetTick+0x14>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	20002ce4 	.word	0x20002ce4

08003d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d48:	f7ff ffee 	bl	8003d28 <HAL_GetTick>
 8003d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d58:	d005      	beq.n	8003d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d84 <HAL_Delay+0x44>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d66:	bf00      	nop
 8003d68:	f7ff ffde 	bl	8003d28 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d8f7      	bhi.n	8003d68 <HAL_Delay+0x28>
  {
  }
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000044 	.word	0x20000044

08003d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d98:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003da4:	4013      	ands	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003db0:	4b06      	ldr	r3, [pc, #24]	@ (8003dcc <__NVIC_SetPriorityGrouping+0x44>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003db6:	4a04      	ldr	r2, [pc, #16]	@ (8003dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	60d3      	str	r3, [r2, #12]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000ed00 	.word	0xe000ed00
 8003dcc:	05fa0000 	.word	0x05fa0000

08003dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd4:	4b04      	ldr	r3, [pc, #16]	@ (8003de8 <__NVIC_GetPriorityGrouping+0x18>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	f003 0307 	and.w	r3, r3, #7
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	6039      	str	r1, [r7, #0]
 8003df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	db0a      	blt.n	8003e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	490c      	ldr	r1, [pc, #48]	@ (8003e38 <__NVIC_SetPriority+0x4c>)
 8003e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0a:	0112      	lsls	r2, r2, #4
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	440b      	add	r3, r1
 8003e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e14:	e00a      	b.n	8003e2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	4908      	ldr	r1, [pc, #32]	@ (8003e3c <__NVIC_SetPriority+0x50>)
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	3b04      	subs	r3, #4
 8003e24:	0112      	lsls	r2, r2, #4
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	440b      	add	r3, r1
 8003e2a:	761a      	strb	r2, [r3, #24]
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	e000e100 	.word	0xe000e100
 8003e3c:	e000ed00 	.word	0xe000ed00

08003e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b089      	sub	sp, #36	@ 0x24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f1c3 0307 	rsb	r3, r3, #7
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	bf28      	it	cs
 8003e5e:	2304      	movcs	r3, #4
 8003e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3304      	adds	r3, #4
 8003e66:	2b06      	cmp	r3, #6
 8003e68:	d902      	bls.n	8003e70 <NVIC_EncodePriority+0x30>
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	3b03      	subs	r3, #3
 8003e6e:	e000      	b.n	8003e72 <NVIC_EncodePriority+0x32>
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43da      	mvns	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	401a      	ands	r2, r3
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	43d9      	mvns	r1, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e98:	4313      	orrs	r3, r2
         );
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3724      	adds	r7, #36	@ 0x24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
	...

08003ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003eb8:	d301      	bcc.n	8003ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e00f      	b.n	8003ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee8 <SysTick_Config+0x40>)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ec6:	210f      	movs	r1, #15
 8003ec8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ecc:	f7ff ff8e 	bl	8003dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ed0:	4b05      	ldr	r3, [pc, #20]	@ (8003ee8 <SysTick_Config+0x40>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ed6:	4b04      	ldr	r3, [pc, #16]	@ (8003ee8 <SysTick_Config+0x40>)
 8003ed8:	2207      	movs	r2, #7
 8003eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	e000e010 	.word	0xe000e010

08003eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff ff47 	bl	8003d88 <__NVIC_SetPriorityGrouping>
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b086      	sub	sp, #24
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	4603      	mov	r3, r0
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
 8003f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f14:	f7ff ff5c 	bl	8003dd0 <__NVIC_GetPriorityGrouping>
 8003f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	6978      	ldr	r0, [r7, #20]
 8003f20:	f7ff ff8e 	bl	8003e40 <NVIC_EncodePriority>
 8003f24:	4602      	mov	r2, r0
 8003f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff ff5d 	bl	8003dec <__NVIC_SetPriority>
}
 8003f32:	bf00      	nop
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff ffb0 	bl	8003ea8 <SysTick_Config>
 8003f48:	4603      	mov	r3, r0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e086      	b.n	8004074 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d106      	bne.n	8003f7e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2223      	movs	r2, #35	@ 0x23
 8003f74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff fbe5 	bl	8003748 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800407c <HAL_ETH_Init+0x128>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f82:	4a3e      	ldr	r2, [pc, #248]	@ (800407c <HAL_ETH_Init+0x128>)
 8003f84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f8a:	4b3c      	ldr	r3, [pc, #240]	@ (800407c <HAL_ETH_Init+0x128>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003f96:	4b3a      	ldr	r3, [pc, #232]	@ (8004080 <HAL_ETH_Init+0x12c>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4a39      	ldr	r2, [pc, #228]	@ (8004080 <HAL_ETH_Init+0x12c>)
 8003f9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003fa0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003fa2:	4b37      	ldr	r3, [pc, #220]	@ (8004080 <HAL_ETH_Init+0x12c>)
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	4935      	ldr	r1, [pc, #212]	@ (8004080 <HAL_ETH_Init+0x12c>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003fb0:	4b33      	ldr	r3, [pc, #204]	@ (8004080 <HAL_ETH_Init+0x12c>)
 8003fb2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fcc:	f7ff feac 	bl	8003d28 <HAL_GetTick>
 8003fd0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003fd2:	e011      	b.n	8003ff8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003fd4:	f7ff fea8 	bl	8003d28 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003fe2:	d909      	bls.n	8003ff8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	22e0      	movs	r2, #224	@ 0xe0
 8003ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e03d      	b.n	8004074 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1e4      	bne.n	8003fd4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f97a 	bl	8004304 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fa25 	bl	8004460 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fa7b 	bl	8004512 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	461a      	mov	r2, r3
 8004022:	2100      	movs	r1, #0
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f9e3 	bl	80043f0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8004038:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4b0f      	ldr	r3, [pc, #60]	@ (8004084 <HAL_ETH_Init+0x130>)
 8004048:	430b      	orrs	r3, r1
 800404a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800405e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2210      	movs	r2, #16
 800406e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40023800 	.word	0x40023800
 8004080:	40013800 	.word	0x40013800
 8004084:	00020060 	.word	0x00020060

08004088 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4b53      	ldr	r3, [pc, #332]	@ (80041ec <ETH_SetMACConfig+0x164>)
 800409e:	4013      	ands	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	7b9b      	ldrb	r3, [r3, #14]
 80040a6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	7c12      	ldrb	r2, [r2, #16]
 80040ac:	2a00      	cmp	r2, #0
 80040ae:	d102      	bne.n	80040b6 <ETH_SetMACConfig+0x2e>
 80040b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80040b4:	e000      	b.n	80040b8 <ETH_SetMACConfig+0x30>
 80040b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80040b8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	7c52      	ldrb	r2, [r2, #17]
 80040be:	2a00      	cmp	r2, #0
 80040c0:	d102      	bne.n	80040c8 <ETH_SetMACConfig+0x40>
 80040c2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80040c6:	e000      	b.n	80040ca <ETH_SetMACConfig+0x42>
 80040c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80040ca:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80040d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	7fdb      	ldrb	r3, [r3, #31]
 80040d6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80040d8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80040de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	7f92      	ldrb	r2, [r2, #30]
 80040e4:	2a00      	cmp	r2, #0
 80040e6:	d102      	bne.n	80040ee <ETH_SetMACConfig+0x66>
 80040e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040ec:	e000      	b.n	80040f0 <ETH_SetMACConfig+0x68>
 80040ee:	2200      	movs	r2, #0
                        macconf->Speed |
 80040f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	7f1b      	ldrb	r3, [r3, #28]
 80040f6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80040f8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80040fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	791b      	ldrb	r3, [r3, #4]
 8004104:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004106:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800410e:	2a00      	cmp	r2, #0
 8004110:	d102      	bne.n	8004118 <ETH_SetMACConfig+0x90>
 8004112:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004116:	e000      	b.n	800411a <ETH_SetMACConfig+0x92>
 8004118:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800411a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	7bdb      	ldrb	r3, [r3, #15]
 8004120:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004122:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004128:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004130:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004132:	4313      	orrs	r3, r2
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800414a:	2001      	movs	r0, #1
 800414c:	f7ff fdf8 	bl	8003d40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004166:	4013      	ands	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800416e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004176:	2a00      	cmp	r2, #0
 8004178:	d101      	bne.n	800417e <ETH_SetMACConfig+0xf6>
 800417a:	2280      	movs	r2, #128	@ 0x80
 800417c:	e000      	b.n	8004180 <ETH_SetMACConfig+0xf8>
 800417e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004180:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004186:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800418e:	2a01      	cmp	r2, #1
 8004190:	d101      	bne.n	8004196 <ETH_SetMACConfig+0x10e>
 8004192:	2208      	movs	r2, #8
 8004194:	e000      	b.n	8004198 <ETH_SetMACConfig+0x110>
 8004196:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004198:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80041a0:	2a01      	cmp	r2, #1
 80041a2:	d101      	bne.n	80041a8 <ETH_SetMACConfig+0x120>
 80041a4:	2204      	movs	r2, #4
 80041a6:	e000      	b.n	80041aa <ETH_SetMACConfig+0x122>
 80041a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80041aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80041b2:	2a01      	cmp	r2, #1
 80041b4:	d101      	bne.n	80041ba <ETH_SetMACConfig+0x132>
 80041b6:	2202      	movs	r2, #2
 80041b8:	e000      	b.n	80041bc <ETH_SetMACConfig+0x134>
 80041ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80041bc:	4313      	orrs	r3, r2
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041d4:	2001      	movs	r0, #1
 80041d6:	f7ff fdb3 	bl	8003d40 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	619a      	str	r2, [r3, #24]
}
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	fd20810f 	.word	0xfd20810f

080041f0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4b3d      	ldr	r3, [pc, #244]	@ (8004300 <ETH_SetDMAConfig+0x110>)
 800420a:	4013      	ands	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	7b1b      	ldrb	r3, [r3, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <ETH_SetDMAConfig+0x2c>
 8004216:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800421a:	e000      	b.n	800421e <ETH_SetDMAConfig+0x2e>
 800421c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	7b5b      	ldrb	r3, [r3, #13]
 8004222:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004224:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	7f52      	ldrb	r2, [r2, #29]
 800422a:	2a00      	cmp	r2, #0
 800422c:	d102      	bne.n	8004234 <ETH_SetDMAConfig+0x44>
 800422e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004232:	e000      	b.n	8004236 <ETH_SetDMAConfig+0x46>
 8004234:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004236:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	7b9b      	ldrb	r3, [r3, #14]
 800423c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800423e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004244:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	7f1b      	ldrb	r3, [r3, #28]
 800424a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800424c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	7f9b      	ldrb	r3, [r3, #30]
 8004252:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004254:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800425a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004262:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004264:	4313      	orrs	r3, r2
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004274:	461a      	mov	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004286:	2001      	movs	r0, #1
 8004288:	f7ff fd5a 	bl	8003d40 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004294:	461a      	mov	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	791b      	ldrb	r3, [r3, #4]
 800429e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80042a4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80042aa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80042b0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042b8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80042ba:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80042c2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80042c8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042d6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042e4:	2001      	movs	r0, #1
 80042e6:	f7ff fd2b 	bl	8003d40 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042f2:	461a      	mov	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6013      	str	r3, [r2, #0]
}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	f8de3f23 	.word	0xf8de3f23

08004304 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b0a6      	sub	sp, #152	@ 0x98
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800430c:	2301      	movs	r3, #1
 800430e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004318:	2300      	movs	r3, #0
 800431a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800431c:	2300      	movs	r3, #0
 800431e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004322:	2301      	movs	r3, #1
 8004324:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004328:	2300      	movs	r3, #0
 800432a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004334:	2301      	movs	r3, #1
 8004336:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800433a:	2300      	movs	r3, #0
 800433c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004340:	2300      	movs	r3, #0
 8004342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004346:	2300      	movs	r3, #0
 8004348:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800434a:	2300      	movs	r3, #0
 800434c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004350:	2300      	movs	r3, #0
 8004352:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004354:	2300      	movs	r3, #0
 8004356:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800435a:	2300      	movs	r3, #0
 800435c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004360:	2300      	movs	r3, #0
 8004362:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004366:	2300      	movs	r3, #0
 8004368:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800436c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004370:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004372:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004376:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004378:	2300      	movs	r3, #0
 800437a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800437e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004382:	4619      	mov	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff fe7f 	bl	8004088 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800438a:	2301      	movs	r3, #1
 800438c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800438e:	2301      	movs	r3, #1
 8004390:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004392:	2301      	movs	r3, #1
 8004394:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004398:	2301      	movs	r3, #1
 800439a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800439c:	2300      	movs	r3, #0
 800439e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80043a0:	2300      	movs	r3, #0
 80043a2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80043ac:	2300      	movs	r3, #0
 80043ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80043b6:	2301      	movs	r3, #1
 80043b8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80043ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80043be:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80043c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80043c4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80043c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043ca:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80043da:	f107 0308 	add.w	r3, r7, #8
 80043de:	4619      	mov	r1, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff ff05 	bl	80041f0 <ETH_SetDMAConfig>
}
 80043e6:	bf00      	nop
 80043e8:	3798      	adds	r7, #152	@ 0x98
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3305      	adds	r3, #5
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	3204      	adds	r2, #4
 8004408:	7812      	ldrb	r2, [r2, #0]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	4b11      	ldr	r3, [pc, #68]	@ (8004458 <ETH_MACAddressConfig+0x68>)
 8004412:	4413      	add	r3, r2
 8004414:	461a      	mov	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3303      	adds	r3, #3
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	061a      	lsls	r2, r3, #24
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3302      	adds	r3, #2
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	041b      	lsls	r3, r3, #16
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3301      	adds	r3, #1
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	4313      	orrs	r3, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	7812      	ldrb	r2, [r2, #0]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	4b06      	ldr	r3, [pc, #24]	@ (800445c <ETH_MACAddressConfig+0x6c>)
 8004442:	4413      	add	r3, r2
 8004444:	461a      	mov	r2, r3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	6013      	str	r3, [r2, #0]
}
 800444a:	bf00      	nop
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40028040 	.word	0x40028040
 800445c:	40028044 	.word	0x40028044

08004460 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e03e      	b.n	80044ec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68d9      	ldr	r1, [r3, #12]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	440b      	add	r3, r1
 800447e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2200      	movs	r2, #0
 800448a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2200      	movs	r2, #0
 8004490:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2200      	movs	r2, #0
 8004496:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	3206      	adds	r2, #6
 80044a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d80c      	bhi.n	80044d0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68d9      	ldr	r1, [r3, #12]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	440b      	add	r3, r1
 80044c8:	461a      	mov	r2, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	60da      	str	r2, [r3, #12]
 80044ce:	e004      	b.n	80044da <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	461a      	mov	r2, r3
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3301      	adds	r3, #1
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d9bd      	bls.n	800446e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004504:	611a      	str	r2, [r3, #16]
}
 8004506:	bf00      	nop
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	e048      	b.n	80045b2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6919      	ldr	r1, [r3, #16]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	440b      	add	r3, r1
 8004530:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2200      	movs	r2, #0
 800453c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2200      	movs	r2, #0
 8004542:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2200      	movs	r2, #0
 8004548:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2200      	movs	r2, #0
 800454e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2200      	movs	r2, #0
 8004554:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800455c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	3212      	adds	r2, #18
 800457e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d80c      	bhi.n	80045a2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6919      	ldr	r1, [r3, #16]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	440b      	add	r3, r1
 800459a:	461a      	mov	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	60da      	str	r2, [r3, #12]
 80045a0:	e004      	b.n	80045ac <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	461a      	mov	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3301      	adds	r3, #1
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d9b3      	bls.n	8004520 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045e2:	60da      	str	r2, [r3, #12]
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b089      	sub	sp, #36	@ 0x24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80045fe:	2300      	movs	r3, #0
 8004600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004606:	2300      	movs	r3, #0
 8004608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800460a:	2300      	movs	r3, #0
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	e175      	b.n	80048fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004610:	2201      	movs	r2, #1
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4013      	ands	r3, r2
 8004622:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	429a      	cmp	r2, r3
 800462a:	f040 8164 	bne.w	80048f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b01      	cmp	r3, #1
 8004638:	d005      	beq.n	8004646 <HAL_GPIO_Init+0x56>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d130      	bne.n	80046a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	2203      	movs	r2, #3
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4013      	ands	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4313      	orrs	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800467c:	2201      	movs	r2, #1
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	43db      	mvns	r3, r3
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4013      	ands	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	f003 0201 	and.w	r2, r3, #1
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4313      	orrs	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 0303 	and.w	r3, r3, #3
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d017      	beq.n	80046e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	2203      	movs	r2, #3
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4013      	ands	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d123      	bne.n	8004738 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	08da      	lsrs	r2, r3, #3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3208      	adds	r2, #8
 80046f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	220f      	movs	r2, #15
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4313      	orrs	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	08da      	lsrs	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3208      	adds	r2, #8
 8004732:	69b9      	ldr	r1, [r7, #24]
 8004734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	2203      	movs	r2, #3
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4013      	ands	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 0203 	and.w	r2, r3, #3
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80be 	beq.w	80048f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800477a:	4b66      	ldr	r3, [pc, #408]	@ (8004914 <HAL_GPIO_Init+0x324>)
 800477c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477e:	4a65      	ldr	r2, [pc, #404]	@ (8004914 <HAL_GPIO_Init+0x324>)
 8004780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004784:	6453      	str	r3, [r2, #68]	@ 0x44
 8004786:	4b63      	ldr	r3, [pc, #396]	@ (8004914 <HAL_GPIO_Init+0x324>)
 8004788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004792:	4a61      	ldr	r2, [pc, #388]	@ (8004918 <HAL_GPIO_Init+0x328>)
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	3302      	adds	r3, #2
 800479a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	220f      	movs	r2, #15
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	43db      	mvns	r3, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a58      	ldr	r2, [pc, #352]	@ (800491c <HAL_GPIO_Init+0x32c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d037      	beq.n	800482e <HAL_GPIO_Init+0x23e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a57      	ldr	r2, [pc, #348]	@ (8004920 <HAL_GPIO_Init+0x330>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d031      	beq.n	800482a <HAL_GPIO_Init+0x23a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a56      	ldr	r2, [pc, #344]	@ (8004924 <HAL_GPIO_Init+0x334>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d02b      	beq.n	8004826 <HAL_GPIO_Init+0x236>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a55      	ldr	r2, [pc, #340]	@ (8004928 <HAL_GPIO_Init+0x338>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d025      	beq.n	8004822 <HAL_GPIO_Init+0x232>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a54      	ldr	r2, [pc, #336]	@ (800492c <HAL_GPIO_Init+0x33c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01f      	beq.n	800481e <HAL_GPIO_Init+0x22e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a53      	ldr	r2, [pc, #332]	@ (8004930 <HAL_GPIO_Init+0x340>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d019      	beq.n	800481a <HAL_GPIO_Init+0x22a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a52      	ldr	r2, [pc, #328]	@ (8004934 <HAL_GPIO_Init+0x344>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <HAL_GPIO_Init+0x226>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a51      	ldr	r2, [pc, #324]	@ (8004938 <HAL_GPIO_Init+0x348>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00d      	beq.n	8004812 <HAL_GPIO_Init+0x222>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a50      	ldr	r2, [pc, #320]	@ (800493c <HAL_GPIO_Init+0x34c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <HAL_GPIO_Init+0x21e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a4f      	ldr	r2, [pc, #316]	@ (8004940 <HAL_GPIO_Init+0x350>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <HAL_GPIO_Init+0x21a>
 8004806:	2309      	movs	r3, #9
 8004808:	e012      	b.n	8004830 <HAL_GPIO_Init+0x240>
 800480a:	230a      	movs	r3, #10
 800480c:	e010      	b.n	8004830 <HAL_GPIO_Init+0x240>
 800480e:	2308      	movs	r3, #8
 8004810:	e00e      	b.n	8004830 <HAL_GPIO_Init+0x240>
 8004812:	2307      	movs	r3, #7
 8004814:	e00c      	b.n	8004830 <HAL_GPIO_Init+0x240>
 8004816:	2306      	movs	r3, #6
 8004818:	e00a      	b.n	8004830 <HAL_GPIO_Init+0x240>
 800481a:	2305      	movs	r3, #5
 800481c:	e008      	b.n	8004830 <HAL_GPIO_Init+0x240>
 800481e:	2304      	movs	r3, #4
 8004820:	e006      	b.n	8004830 <HAL_GPIO_Init+0x240>
 8004822:	2303      	movs	r3, #3
 8004824:	e004      	b.n	8004830 <HAL_GPIO_Init+0x240>
 8004826:	2302      	movs	r3, #2
 8004828:	e002      	b.n	8004830 <HAL_GPIO_Init+0x240>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <HAL_GPIO_Init+0x240>
 800482e:	2300      	movs	r3, #0
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	f002 0203 	and.w	r2, r2, #3
 8004836:	0092      	lsls	r2, r2, #2
 8004838:	4093      	lsls	r3, r2
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004840:	4935      	ldr	r1, [pc, #212]	@ (8004918 <HAL_GPIO_Init+0x328>)
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	089b      	lsrs	r3, r3, #2
 8004846:	3302      	adds	r3, #2
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800484e:	4b3d      	ldr	r3, [pc, #244]	@ (8004944 <HAL_GPIO_Init+0x354>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	43db      	mvns	r3, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4013      	ands	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004872:	4a34      	ldr	r2, [pc, #208]	@ (8004944 <HAL_GPIO_Init+0x354>)
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004878:	4b32      	ldr	r3, [pc, #200]	@ (8004944 <HAL_GPIO_Init+0x354>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800489c:	4a29      	ldr	r2, [pc, #164]	@ (8004944 <HAL_GPIO_Init+0x354>)
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048a2:	4b28      	ldr	r3, [pc, #160]	@ (8004944 <HAL_GPIO_Init+0x354>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	43db      	mvns	r3, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4013      	ands	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004944 <HAL_GPIO_Init+0x354>)
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004944 <HAL_GPIO_Init+0x354>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048f0:	4a14      	ldr	r2, [pc, #80]	@ (8004944 <HAL_GPIO_Init+0x354>)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3301      	adds	r3, #1
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	2b0f      	cmp	r3, #15
 8004900:	f67f ae86 	bls.w	8004610 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	3724      	adds	r7, #36	@ 0x24
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800
 8004918:	40013800 	.word	0x40013800
 800491c:	40020000 	.word	0x40020000
 8004920:	40020400 	.word	0x40020400
 8004924:	40020800 	.word	0x40020800
 8004928:	40020c00 	.word	0x40020c00
 800492c:	40021000 	.word	0x40021000
 8004930:	40021400 	.word	0x40021400
 8004934:	40021800 	.word	0x40021800
 8004938:	40021c00 	.word	0x40021c00
 800493c:	40022000 	.word	0x40022000
 8004940:	40022400 	.word	0x40022400
 8004944:	40013c00 	.word	0x40013c00

08004948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	807b      	strh	r3, [r7, #2]
 8004954:	4613      	mov	r3, r2
 8004956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004958:	787b      	ldrb	r3, [r7, #1]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800495e:	887a      	ldrh	r2, [r7, #2]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004964:	e003      	b.n	800496e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004966:	887b      	ldrh	r3, [r7, #2]
 8004968:	041a      	lsls	r2, r3, #16
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	619a      	str	r2, [r3, #24]
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b086      	sub	sp, #24
 800497e:	af02      	add	r7, sp, #8
 8004980:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e108      	b.n	8004b9e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fe ffe6 	bl	8003978 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2203      	movs	r2, #3
 80049b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049ba:	d102      	bne.n	80049c2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 ff3c 	bl	8006844 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6818      	ldr	r0, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	7c1a      	ldrb	r2, [r3, #16]
 80049d4:	f88d 2000 	strb.w	r2, [sp]
 80049d8:	3304      	adds	r3, #4
 80049da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049dc:	f001 fed8 	bl	8006790 <USB_CoreInit>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2202      	movs	r2, #2
 80049ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0d5      	b.n	8004b9e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2100      	movs	r1, #0
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 ff34 	bl	8006866 <USB_SetCurrentMode>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0c6      	b.n	8004b9e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a10:	2300      	movs	r3, #0
 8004a12:	73fb      	strb	r3, [r7, #15]
 8004a14:	e04a      	b.n	8004aac <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a16:	7bfa      	ldrb	r2, [r7, #15]
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	3315      	adds	r3, #21
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a2a:	7bfa      	ldrb	r2, [r7, #15]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	3314      	adds	r3, #20
 8004a3a:	7bfa      	ldrb	r2, [r7, #15]
 8004a3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a3e:	7bfa      	ldrb	r2, [r7, #15]
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	b298      	uxth	r0, r3
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	332e      	adds	r3, #46	@ 0x2e
 8004a52:	4602      	mov	r2, r0
 8004a54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a56:	7bfa      	ldrb	r2, [r7, #15]
 8004a58:	6879      	ldr	r1, [r7, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	440b      	add	r3, r1
 8004a64:	3318      	adds	r3, #24
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a6a:	7bfa      	ldrb	r2, [r7, #15]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	331c      	adds	r3, #28
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a7e:	7bfa      	ldrb	r2, [r7, #15]
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	3320      	adds	r3, #32
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a92:	7bfa      	ldrb	r2, [r7, #15]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	3324      	adds	r3, #36	@ 0x24
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	73fb      	strb	r3, [r7, #15]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	791b      	ldrb	r3, [r3, #4]
 8004ab0:	7bfa      	ldrb	r2, [r7, #15]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d3af      	bcc.n	8004a16 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]
 8004aba:	e044      	b.n	8004b46 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004abc:	7bfa      	ldrb	r2, [r7, #15]
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004ace:	2200      	movs	r2, #0
 8004ad0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ad2:	7bfa      	ldrb	r2, [r7, #15]
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004ae4:	7bfa      	ldrb	r2, [r7, #15]
 8004ae6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ae8:	7bfa      	ldrb	r2, [r7, #15]
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	4613      	mov	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004afa:	2200      	movs	r2, #0
 8004afc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004afe:	7bfa      	ldrb	r2, [r7, #15]
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4413      	add	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b14:	7bfa      	ldrb	r2, [r7, #15]
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b2a:	7bfa      	ldrb	r2, [r7, #15]
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	3301      	adds	r3, #1
 8004b44:	73fb      	strb	r3, [r7, #15]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	791b      	ldrb	r3, [r3, #4]
 8004b4a:	7bfa      	ldrb	r2, [r7, #15]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d3b5      	bcc.n	8004abc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	7c1a      	ldrb	r2, [r3, #16]
 8004b58:	f88d 2000 	strb.w	r2, [sp]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b60:	f001 fece 	bl	8006900 <USB_DevInit>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e013      	b.n	8004b9e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	7b1b      	ldrb	r3, [r3, #12]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d102      	bne.n	8004b92 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f80b 	bl	8004ba8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f002 f889 	bl	8006cae <USB_DevDisconnect>

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bd6:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <HAL_PCDEx_ActivateLPM+0x44>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	10000003 	.word	0x10000003

08004bf0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bf4:	4b05      	ldr	r3, [pc, #20]	@ (8004c0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a04      	ldr	r2, [pc, #16]	@ (8004c0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bfe:	6013      	str	r3, [r2, #0]
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40007000 	.word	0x40007000

08004c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e291      	b.n	800514a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8087 	beq.w	8004d42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c34:	4b96      	ldr	r3, [pc, #600]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d00c      	beq.n	8004c5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c40:	4b93      	ldr	r3, [pc, #588]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 030c 	and.w	r3, r3, #12
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d112      	bne.n	8004c72 <HAL_RCC_OscConfig+0x62>
 8004c4c:	4b90      	ldr	r3, [pc, #576]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c58:	d10b      	bne.n	8004c72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5a:	4b8d      	ldr	r3, [pc, #564]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d06c      	beq.n	8004d40 <HAL_RCC_OscConfig+0x130>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d168      	bne.n	8004d40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e26b      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c7a:	d106      	bne.n	8004c8a <HAL_RCC_OscConfig+0x7a>
 8004c7c:	4b84      	ldr	r3, [pc, #528]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a83      	ldr	r2, [pc, #524]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	e02e      	b.n	8004ce8 <HAL_RCC_OscConfig+0xd8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10c      	bne.n	8004cac <HAL_RCC_OscConfig+0x9c>
 8004c92:	4b7f      	ldr	r3, [pc, #508]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a7e      	ldr	r2, [pc, #504]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a7b      	ldr	r2, [pc, #492]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004ca4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e01d      	b.n	8004ce8 <HAL_RCC_OscConfig+0xd8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0xc0>
 8004cb6:	4b76      	ldr	r3, [pc, #472]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a75      	ldr	r2, [pc, #468]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	4b73      	ldr	r3, [pc, #460]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a72      	ldr	r2, [pc, #456]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e00b      	b.n	8004ce8 <HAL_RCC_OscConfig+0xd8>
 8004cd0:	4b6f      	ldr	r3, [pc, #444]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a6e      	ldr	r2, [pc, #440]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	4b6c      	ldr	r3, [pc, #432]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a6b      	ldr	r2, [pc, #428]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d013      	beq.n	8004d18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7ff f81a 	bl	8003d28 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf8:	f7ff f816 	bl	8003d28 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b64      	cmp	r3, #100	@ 0x64
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e21f      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0a:	4b61      	ldr	r3, [pc, #388]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0xe8>
 8004d16:	e014      	b.n	8004d42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7ff f806 	bl	8003d28 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d20:	f7ff f802 	bl	8003d28 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	@ 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e20b      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d32:	4b57      	ldr	r3, [pc, #348]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x110>
 8004d3e:	e000      	b.n	8004d42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d069      	beq.n	8004e22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d4e:	4b50      	ldr	r3, [pc, #320]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5a:	4b4d      	ldr	r3, [pc, #308]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d11c      	bne.n	8004da0 <HAL_RCC_OscConfig+0x190>
 8004d66:	4b4a      	ldr	r3, [pc, #296]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d116      	bne.n	8004da0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d72:	4b47      	ldr	r3, [pc, #284]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <HAL_RCC_OscConfig+0x17a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d001      	beq.n	8004d8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e1df      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8a:	4b41      	ldr	r3, [pc, #260]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	493d      	ldr	r1, [pc, #244]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9e:	e040      	b.n	8004e22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d023      	beq.n	8004df0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004da8:	4b39      	ldr	r3, [pc, #228]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a38      	ldr	r2, [pc, #224]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fe ffb8 	bl	8003d28 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dbc:	f7fe ffb4 	bl	8003d28 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e1bd      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dce:	4b30      	ldr	r3, [pc, #192]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f0      	beq.n	8004dbc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dda:	4b2d      	ldr	r3, [pc, #180]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4929      	ldr	r1, [pc, #164]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
 8004dee:	e018      	b.n	8004e22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004df0:	4b27      	ldr	r3, [pc, #156]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a26      	ldr	r2, [pc, #152]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7fe ff94 	bl	8003d28 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e04:	f7fe ff90 	bl	8003d28 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e199      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e16:	4b1e      	ldr	r3, [pc, #120]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d038      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d019      	beq.n	8004e6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e36:	4b16      	ldr	r3, [pc, #88]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e3a:	4a15      	ldr	r2, [pc, #84]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e42:	f7fe ff71 	bl	8003d28 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e4a:	f7fe ff6d 	bl	8003d28 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e176      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCC_OscConfig+0x23a>
 8004e68:	e01a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e6a:	4b09      	ldr	r3, [pc, #36]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e6e:	4a08      	ldr	r2, [pc, #32]	@ (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e76:	f7fe ff57 	bl	8003d28 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e7c:	e00a      	b.n	8004e94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e7e:	f7fe ff53 	bl	8003d28 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d903      	bls.n	8004e94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e15c      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
 8004e90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e94:	4b91      	ldr	r3, [pc, #580]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1ee      	bne.n	8004e7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 80a4 	beq.w	8004ff6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eae:	4b8b      	ldr	r3, [pc, #556]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10d      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eba:	4b88      	ldr	r3, [pc, #544]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebe:	4a87      	ldr	r2, [pc, #540]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ec6:	4b85      	ldr	r3, [pc, #532]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ed6:	4b82      	ldr	r3, [pc, #520]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d118      	bne.n	8004f14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a7e      	ldr	r2, [pc, #504]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eee:	f7fe ff1b 	bl	8003d28 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef6:	f7fe ff17 	bl	8003d28 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b64      	cmp	r3, #100	@ 0x64
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e120      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f08:	4b75      	ldr	r3, [pc, #468]	@ (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0f0      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d106      	bne.n	8004f2a <HAL_RCC_OscConfig+0x31a>
 8004f1c:	4b6f      	ldr	r3, [pc, #444]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f20:	4a6e      	ldr	r2, [pc, #440]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f28:	e02d      	b.n	8004f86 <HAL_RCC_OscConfig+0x376>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10c      	bne.n	8004f4c <HAL_RCC_OscConfig+0x33c>
 8004f32:	4b6a      	ldr	r3, [pc, #424]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f36:	4a69      	ldr	r2, [pc, #420]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f38:	f023 0301 	bic.w	r3, r3, #1
 8004f3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f3e:	4b67      	ldr	r3, [pc, #412]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f42:	4a66      	ldr	r2, [pc, #408]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f44:	f023 0304 	bic.w	r3, r3, #4
 8004f48:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f4a:	e01c      	b.n	8004f86 <HAL_RCC_OscConfig+0x376>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b05      	cmp	r3, #5
 8004f52:	d10c      	bne.n	8004f6e <HAL_RCC_OscConfig+0x35e>
 8004f54:	4b61      	ldr	r3, [pc, #388]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f58:	4a60      	ldr	r2, [pc, #384]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f5a:	f043 0304 	orr.w	r3, r3, #4
 8004f5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f60:	4b5e      	ldr	r3, [pc, #376]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f64:	4a5d      	ldr	r2, [pc, #372]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f66:	f043 0301 	orr.w	r3, r3, #1
 8004f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6c:	e00b      	b.n	8004f86 <HAL_RCC_OscConfig+0x376>
 8004f6e:	4b5b      	ldr	r3, [pc, #364]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f72:	4a5a      	ldr	r2, [pc, #360]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f74:	f023 0301 	bic.w	r3, r3, #1
 8004f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f7a:	4b58      	ldr	r3, [pc, #352]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7e:	4a57      	ldr	r2, [pc, #348]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004f80:	f023 0304 	bic.w	r3, r3, #4
 8004f84:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d015      	beq.n	8004fba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8e:	f7fe fecb 	bl	8003d28 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f94:	e00a      	b.n	8004fac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f96:	f7fe fec7 	bl	8003d28 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e0ce      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fac:	4b4b      	ldr	r3, [pc, #300]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0ee      	beq.n	8004f96 <HAL_RCC_OscConfig+0x386>
 8004fb8:	e014      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fba:	f7fe feb5 	bl	8003d28 <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc0:	e00a      	b.n	8004fd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc2:	f7fe feb1 	bl	8003d28 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e0b8      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd8:	4b40      	ldr	r3, [pc, #256]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1ee      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d105      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fea:	4b3c      	ldr	r3, [pc, #240]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	4a3b      	ldr	r2, [pc, #236]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8004ff0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ff4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80a4 	beq.w	8005148 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005000:	4b36      	ldr	r3, [pc, #216]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 030c 	and.w	r3, r3, #12
 8005008:	2b08      	cmp	r3, #8
 800500a:	d06b      	beq.n	80050e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d149      	bne.n	80050a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005014:	4b31      	ldr	r3, [pc, #196]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a30      	ldr	r2, [pc, #192]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 800501a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800501e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005020:	f7fe fe82 	bl	8003d28 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005028:	f7fe fe7e 	bl	8003d28 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e087      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503a:	4b28      	ldr	r3, [pc, #160]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69da      	ldr	r2, [r3, #28]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005054:	019b      	lsls	r3, r3, #6
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	3b01      	subs	r3, #1
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005068:	061b      	lsls	r3, r3, #24
 800506a:	4313      	orrs	r3, r2
 800506c:	4a1b      	ldr	r2, [pc, #108]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 800506e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005072:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005074:	4b19      	ldr	r3, [pc, #100]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a18      	ldr	r2, [pc, #96]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 800507a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800507e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005080:	f7fe fe52 	bl	8003d28 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005088:	f7fe fe4e 	bl	8003d28 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e057      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800509a:	4b10      	ldr	r3, [pc, #64]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x478>
 80050a6:	e04f      	b.n	8005148 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a8:	4b0c      	ldr	r3, [pc, #48]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a0b      	ldr	r2, [pc, #44]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 80050ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b4:	f7fe fe38 	bl	8003d28 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050bc:	f7fe fe34 	bl	8003d28 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e03d      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	4b03      	ldr	r3, [pc, #12]	@ (80050dc <HAL_RCC_OscConfig+0x4cc>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f0      	bne.n	80050bc <HAL_RCC_OscConfig+0x4ac>
 80050da:	e035      	b.n	8005148 <HAL_RCC_OscConfig+0x538>
 80050dc:	40023800 	.word	0x40023800
 80050e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80050e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005154 <HAL_RCC_OscConfig+0x544>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d028      	beq.n	8005144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d121      	bne.n	8005144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510a:	429a      	cmp	r2, r3
 800510c:	d11a      	bne.n	8005144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005114:	4013      	ands	r3, r2
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800511a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800511c:	4293      	cmp	r3, r2
 800511e:	d111      	bne.n	8005144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512a:	085b      	lsrs	r3, r3, #1
 800512c:	3b01      	subs	r3, #1
 800512e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005130:	429a      	cmp	r2, r3
 8005132:	d107      	bne.n	8005144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005140:	429a      	cmp	r2, r3
 8005142:	d001      	beq.n	8005148 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800

08005158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0d0      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005170:	4b6a      	ldr	r3, [pc, #424]	@ (800531c <HAL_RCC_ClockConfig+0x1c4>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d910      	bls.n	80051a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517e:	4b67      	ldr	r3, [pc, #412]	@ (800531c <HAL_RCC_ClockConfig+0x1c4>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f023 020f 	bic.w	r2, r3, #15
 8005186:	4965      	ldr	r1, [pc, #404]	@ (800531c <HAL_RCC_ClockConfig+0x1c4>)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	4313      	orrs	r3, r2
 800518c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800518e:	4b63      	ldr	r3, [pc, #396]	@ (800531c <HAL_RCC_ClockConfig+0x1c4>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d001      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0b8      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d020      	beq.n	80051ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051b8:	4b59      	ldr	r3, [pc, #356]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	4a58      	ldr	r2, [pc, #352]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051d0:	4b53      	ldr	r3, [pc, #332]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4a52      	ldr	r2, [pc, #328]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051dc:	4b50      	ldr	r3, [pc, #320]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	494d      	ldr	r1, [pc, #308]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d040      	beq.n	800527c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d107      	bne.n	8005212 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005202:	4b47      	ldr	r3, [pc, #284]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d115      	bne.n	800523a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e07f      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521a:	4b41      	ldr	r3, [pc, #260]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e073      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522a:	4b3d      	ldr	r3, [pc, #244]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e06b      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800523a:	4b39      	ldr	r3, [pc, #228]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f023 0203 	bic.w	r2, r3, #3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	4936      	ldr	r1, [pc, #216]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 8005248:	4313      	orrs	r3, r2
 800524a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800524c:	f7fe fd6c 	bl	8003d28 <HAL_GetTick>
 8005250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005252:	e00a      	b.n	800526a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005254:	f7fe fd68 	bl	8003d28 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e053      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800526a:	4b2d      	ldr	r3, [pc, #180]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 020c 	and.w	r2, r3, #12
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	429a      	cmp	r2, r3
 800527a:	d1eb      	bne.n	8005254 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800527c:	4b27      	ldr	r3, [pc, #156]	@ (800531c <HAL_RCC_ClockConfig+0x1c4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d210      	bcs.n	80052ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528a:	4b24      	ldr	r3, [pc, #144]	@ (800531c <HAL_RCC_ClockConfig+0x1c4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f023 020f 	bic.w	r2, r3, #15
 8005292:	4922      	ldr	r1, [pc, #136]	@ (800531c <HAL_RCC_ClockConfig+0x1c4>)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	4313      	orrs	r3, r2
 8005298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800529a:	4b20      	ldr	r3, [pc, #128]	@ (800531c <HAL_RCC_ClockConfig+0x1c4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e032      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d008      	beq.n	80052ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052b8:	4b19      	ldr	r3, [pc, #100]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	4916      	ldr	r1, [pc, #88]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052d6:	4b12      	ldr	r3, [pc, #72]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	490e      	ldr	r1, [pc, #56]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052ea:	f000 f821 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 80052ee:	4602      	mov	r2, r0
 80052f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	091b      	lsrs	r3, r3, #4
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	490a      	ldr	r1, [pc, #40]	@ (8005324 <HAL_RCC_ClockConfig+0x1cc>)
 80052fc:	5ccb      	ldrb	r3, [r1, r3]
 80052fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005302:	4a09      	ldr	r2, [pc, #36]	@ (8005328 <HAL_RCC_ClockConfig+0x1d0>)
 8005304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005306:	4b09      	ldr	r3, [pc, #36]	@ (800532c <HAL_RCC_ClockConfig+0x1d4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fcc8 	bl	8003ca0 <HAL_InitTick>

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	40023c00 	.word	0x40023c00
 8005320:	40023800 	.word	0x40023800
 8005324:	08008088 	.word	0x08008088
 8005328:	2000003c 	.word	0x2000003c
 800532c:	20000040 	.word	0x20000040

08005330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005334:	b094      	sub	sp, #80	@ 0x50
 8005336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005338:	2300      	movs	r3, #0
 800533a:	647b      	str	r3, [r7, #68]	@ 0x44
 800533c:	2300      	movs	r3, #0
 800533e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005340:	2300      	movs	r3, #0
 8005342:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005344:	2300      	movs	r3, #0
 8005346:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005348:	4b79      	ldr	r3, [pc, #484]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x200>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 030c 	and.w	r3, r3, #12
 8005350:	2b08      	cmp	r3, #8
 8005352:	d00d      	beq.n	8005370 <HAL_RCC_GetSysClockFreq+0x40>
 8005354:	2b08      	cmp	r3, #8
 8005356:	f200 80e1 	bhi.w	800551c <HAL_RCC_GetSysClockFreq+0x1ec>
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <HAL_RCC_GetSysClockFreq+0x34>
 800535e:	2b04      	cmp	r3, #4
 8005360:	d003      	beq.n	800536a <HAL_RCC_GetSysClockFreq+0x3a>
 8005362:	e0db      	b.n	800551c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005364:	4b73      	ldr	r3, [pc, #460]	@ (8005534 <HAL_RCC_GetSysClockFreq+0x204>)
 8005366:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005368:	e0db      	b.n	8005522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800536a:	4b73      	ldr	r3, [pc, #460]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x208>)
 800536c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800536e:	e0d8      	b.n	8005522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005370:	4b6f      	ldr	r3, [pc, #444]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x200>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005378:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800537a:	4b6d      	ldr	r3, [pc, #436]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x200>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d063      	beq.n	800544e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005386:	4b6a      	ldr	r3, [pc, #424]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x200>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	099b      	lsrs	r3, r3, #6
 800538c:	2200      	movs	r2, #0
 800538e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005390:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005398:	633b      	str	r3, [r7, #48]	@ 0x30
 800539a:	2300      	movs	r3, #0
 800539c:	637b      	str	r3, [r7, #52]	@ 0x34
 800539e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80053a2:	4622      	mov	r2, r4
 80053a4:	462b      	mov	r3, r5
 80053a6:	f04f 0000 	mov.w	r0, #0
 80053aa:	f04f 0100 	mov.w	r1, #0
 80053ae:	0159      	lsls	r1, r3, #5
 80053b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053b4:	0150      	lsls	r0, r2, #5
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4621      	mov	r1, r4
 80053bc:	1a51      	subs	r1, r2, r1
 80053be:	6139      	str	r1, [r7, #16]
 80053c0:	4629      	mov	r1, r5
 80053c2:	eb63 0301 	sbc.w	r3, r3, r1
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053d4:	4659      	mov	r1, fp
 80053d6:	018b      	lsls	r3, r1, #6
 80053d8:	4651      	mov	r1, sl
 80053da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053de:	4651      	mov	r1, sl
 80053e0:	018a      	lsls	r2, r1, #6
 80053e2:	4651      	mov	r1, sl
 80053e4:	ebb2 0801 	subs.w	r8, r2, r1
 80053e8:	4659      	mov	r1, fp
 80053ea:	eb63 0901 	sbc.w	r9, r3, r1
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	f04f 0300 	mov.w	r3, #0
 80053f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005402:	4690      	mov	r8, r2
 8005404:	4699      	mov	r9, r3
 8005406:	4623      	mov	r3, r4
 8005408:	eb18 0303 	adds.w	r3, r8, r3
 800540c:	60bb      	str	r3, [r7, #8]
 800540e:	462b      	mov	r3, r5
 8005410:	eb49 0303 	adc.w	r3, r9, r3
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005422:	4629      	mov	r1, r5
 8005424:	024b      	lsls	r3, r1, #9
 8005426:	4621      	mov	r1, r4
 8005428:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800542c:	4621      	mov	r1, r4
 800542e:	024a      	lsls	r2, r1, #9
 8005430:	4610      	mov	r0, r2
 8005432:	4619      	mov	r1, r3
 8005434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005436:	2200      	movs	r2, #0
 8005438:	62bb      	str	r3, [r7, #40]	@ 0x28
 800543a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800543c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005440:	f7fa ff36 	bl	80002b0 <__aeabi_uldivmod>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4613      	mov	r3, r2
 800544a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800544c:	e058      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800544e:	4b38      	ldr	r3, [pc, #224]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x200>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	099b      	lsrs	r3, r3, #6
 8005454:	2200      	movs	r2, #0
 8005456:	4618      	mov	r0, r3
 8005458:	4611      	mov	r1, r2
 800545a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800545e:	623b      	str	r3, [r7, #32]
 8005460:	2300      	movs	r3, #0
 8005462:	627b      	str	r3, [r7, #36]	@ 0x24
 8005464:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005468:	4642      	mov	r2, r8
 800546a:	464b      	mov	r3, r9
 800546c:	f04f 0000 	mov.w	r0, #0
 8005470:	f04f 0100 	mov.w	r1, #0
 8005474:	0159      	lsls	r1, r3, #5
 8005476:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800547a:	0150      	lsls	r0, r2, #5
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4641      	mov	r1, r8
 8005482:	ebb2 0a01 	subs.w	sl, r2, r1
 8005486:	4649      	mov	r1, r9
 8005488:	eb63 0b01 	sbc.w	fp, r3, r1
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005498:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800549c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054a0:	ebb2 040a 	subs.w	r4, r2, sl
 80054a4:	eb63 050b 	sbc.w	r5, r3, fp
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	00eb      	lsls	r3, r5, #3
 80054b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054b6:	00e2      	lsls	r2, r4, #3
 80054b8:	4614      	mov	r4, r2
 80054ba:	461d      	mov	r5, r3
 80054bc:	4643      	mov	r3, r8
 80054be:	18e3      	adds	r3, r4, r3
 80054c0:	603b      	str	r3, [r7, #0]
 80054c2:	464b      	mov	r3, r9
 80054c4:	eb45 0303 	adc.w	r3, r5, r3
 80054c8:	607b      	str	r3, [r7, #4]
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	f04f 0300 	mov.w	r3, #0
 80054d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054d6:	4629      	mov	r1, r5
 80054d8:	028b      	lsls	r3, r1, #10
 80054da:	4621      	mov	r1, r4
 80054dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054e0:	4621      	mov	r1, r4
 80054e2:	028a      	lsls	r2, r1, #10
 80054e4:	4610      	mov	r0, r2
 80054e6:	4619      	mov	r1, r3
 80054e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054ea:	2200      	movs	r2, #0
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	61fa      	str	r2, [r7, #28]
 80054f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054f4:	f7fa fedc 	bl	80002b0 <__aeabi_uldivmod>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4613      	mov	r3, r2
 80054fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005500:	4b0b      	ldr	r3, [pc, #44]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x200>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	0c1b      	lsrs	r3, r3, #16
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	3301      	adds	r3, #1
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005510:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005514:	fbb2 f3f3 	udiv	r3, r2, r3
 8005518:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800551a:	e002      	b.n	8005522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800551c:	4b05      	ldr	r3, [pc, #20]	@ (8005534 <HAL_RCC_GetSysClockFreq+0x204>)
 800551e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005524:	4618      	mov	r0, r3
 8005526:	3750      	adds	r7, #80	@ 0x50
 8005528:	46bd      	mov	sp, r7
 800552a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800552e:	bf00      	nop
 8005530:	40023800 	.word	0x40023800
 8005534:	00f42400 	.word	0x00f42400
 8005538:	007a1200 	.word	0x007a1200

0800553c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005540:	4b03      	ldr	r3, [pc, #12]	@ (8005550 <HAL_RCC_GetHCLKFreq+0x14>)
 8005542:	681b      	ldr	r3, [r3, #0]
}
 8005544:	4618      	mov	r0, r3
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	2000003c 	.word	0x2000003c

08005554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005558:	f7ff fff0 	bl	800553c <HAL_RCC_GetHCLKFreq>
 800555c:	4602      	mov	r2, r0
 800555e:	4b05      	ldr	r3, [pc, #20]	@ (8005574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	0a9b      	lsrs	r3, r3, #10
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	4903      	ldr	r1, [pc, #12]	@ (8005578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800556a:	5ccb      	ldrb	r3, [r1, r3]
 800556c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005570:	4618      	mov	r0, r3
 8005572:	bd80      	pop	{r7, pc}
 8005574:	40023800 	.word	0x40023800
 8005578:	08008098 	.word	0x08008098

0800557c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005580:	f7ff ffdc 	bl	800553c <HAL_RCC_GetHCLKFreq>
 8005584:	4602      	mov	r2, r0
 8005586:	4b05      	ldr	r3, [pc, #20]	@ (800559c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	0b5b      	lsrs	r3, r3, #13
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	4903      	ldr	r1, [pc, #12]	@ (80055a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005592:	5ccb      	ldrb	r3, [r1, r3]
 8005594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005598:	4618      	mov	r0, r3
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40023800 	.word	0x40023800
 80055a0:	08008098 	.word	0x08008098

080055a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b088      	sub	sp, #32
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d012      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055cc:	4b69      	ldr	r3, [pc, #420]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	4a68      	ldr	r2, [pc, #416]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80055d6:	6093      	str	r3, [r2, #8]
 80055d8:	4b66      	ldr	r3, [pc, #408]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e0:	4964      	ldr	r1, [pc, #400]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80055ee:	2301      	movs	r3, #1
 80055f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d017      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055fe:	4b5d      	ldr	r3, [pc, #372]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005600:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005604:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560c:	4959      	ldr	r1, [pc, #356]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005618:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800561c:	d101      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800561e:	2301      	movs	r3, #1
 8005620:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800562a:	2301      	movs	r3, #1
 800562c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d017      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800563a:	4b4e      	ldr	r3, [pc, #312]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800563c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005640:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005648:	494a      	ldr	r1, [pc, #296]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005654:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005658:	d101      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800565a:	2301      	movs	r3, #1
 800565c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005666:	2301      	movs	r3, #1
 8005668:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005676:	2301      	movs	r3, #1
 8005678:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 808b 	beq.w	800579e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005688:	4b3a      	ldr	r3, [pc, #232]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800568a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568c:	4a39      	ldr	r2, [pc, #228]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800568e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005692:	6413      	str	r3, [r2, #64]	@ 0x40
 8005694:	4b37      	ldr	r3, [pc, #220]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056a0:	4b35      	ldr	r3, [pc, #212]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a34      	ldr	r2, [pc, #208]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ac:	f7fe fb3c 	bl	8003d28 <HAL_GetTick>
 80056b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b4:	f7fe fb38 	bl	8003d28 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b64      	cmp	r3, #100	@ 0x64
 80056c0:	d901      	bls.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e357      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056d2:	4b28      	ldr	r3, [pc, #160]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d035      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d02e      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056f0:	4b20      	ldr	r3, [pc, #128]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056fe:	4a1d      	ldr	r2, [pc, #116]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005704:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005706:	4b1b      	ldr	r3, [pc, #108]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800570a:	4a1a      	ldr	r2, [pc, #104]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800570c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005710:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005712:	4a18      	ldr	r2, [pc, #96]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005718:	4b16      	ldr	r3, [pc, #88]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800571a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b01      	cmp	r3, #1
 8005722:	d114      	bne.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005724:	f7fe fb00 	bl	8003d28 <HAL_GetTick>
 8005728:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800572a:	e00a      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800572c:	f7fe fafc 	bl	8003d28 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800573a:	4293      	cmp	r3, r2
 800573c:	d901      	bls.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e319      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005742:	4b0c      	ldr	r3, [pc, #48]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0ee      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005756:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800575a:	d111      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800575c:	4b05      	ldr	r3, [pc, #20]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005768:	4b04      	ldr	r3, [pc, #16]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800576a:	400b      	ands	r3, r1
 800576c:	4901      	ldr	r1, [pc, #4]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800576e:	4313      	orrs	r3, r2
 8005770:	608b      	str	r3, [r1, #8]
 8005772:	e00b      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005774:	40023800 	.word	0x40023800
 8005778:	40007000 	.word	0x40007000
 800577c:	0ffffcff 	.word	0x0ffffcff
 8005780:	4baa      	ldr	r3, [pc, #680]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	4aa9      	ldr	r2, [pc, #676]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005786:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800578a:	6093      	str	r3, [r2, #8]
 800578c:	4ba7      	ldr	r3, [pc, #668]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800578e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005798:	49a4      	ldr	r1, [pc, #656]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800579a:	4313      	orrs	r3, r2
 800579c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d010      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057aa:	4ba0      	ldr	r3, [pc, #640]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057b0:	4a9e      	ldr	r2, [pc, #632]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80057ba:	4b9c      	ldr	r3, [pc, #624]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c4:	4999      	ldr	r1, [pc, #612]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00a      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057d8:	4b94      	ldr	r3, [pc, #592]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057e6:	4991      	ldr	r1, [pc, #580]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057fa:	4b8c      	ldr	r3, [pc, #560]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005800:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005808:	4988      	ldr	r1, [pc, #544]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800581c:	4b83      	ldr	r3, [pc, #524]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800581e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005822:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800582a:	4980      	ldr	r1, [pc, #512]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800583e:	4b7b      	ldr	r3, [pc, #492]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005844:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800584c:	4977      	ldr	r1, [pc, #476]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005860:	4b72      	ldr	r3, [pc, #456]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005866:	f023 0203 	bic.w	r2, r3, #3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586e:	496f      	ldr	r1, [pc, #444]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005882:	4b6a      	ldr	r3, [pc, #424]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005888:	f023 020c 	bic.w	r2, r3, #12
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005890:	4966      	ldr	r1, [pc, #408]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058a4:	4b61      	ldr	r3, [pc, #388]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058b2:	495e      	ldr	r1, [pc, #376]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058c6:	4b59      	ldr	r3, [pc, #356]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058cc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d4:	4955      	ldr	r1, [pc, #340]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058e8:	4b50      	ldr	r3, [pc, #320]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f6:	494d      	ldr	r1, [pc, #308]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800590a:	4b48      	ldr	r3, [pc, #288]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800590c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005910:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005918:	4944      	ldr	r1, [pc, #272]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800592c:	4b3f      	ldr	r3, [pc, #252]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005932:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593a:	493c      	ldr	r1, [pc, #240]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800594e:	4b37      	ldr	r3, [pc, #220]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005954:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800595c:	4933      	ldr	r1, [pc, #204]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005970:	4b2e      	ldr	r3, [pc, #184]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005976:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800597e:	492b      	ldr	r1, [pc, #172]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d011      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005992:	4b26      	ldr	r3, [pc, #152]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005998:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059a0:	4922      	ldr	r1, [pc, #136]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059b0:	d101      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80059b2:	2301      	movs	r3, #1
 80059b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80059c2:	2301      	movs	r3, #1
 80059c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059d2:	4b16      	ldr	r3, [pc, #88]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059e0:	4912      	ldr	r1, [pc, #72]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00b      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059f4:	4b0d      	ldr	r3, [pc, #52]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a04:	4909      	ldr	r1, [pc, #36]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d006      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 80d9 	beq.w	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a20:	4b02      	ldr	r3, [pc, #8]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a01      	ldr	r2, [pc, #4]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a2a:	e001      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a32:	f7fe f979 	bl	8003d28 <HAL_GetTick>
 8005a36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a38:	e008      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a3a:	f7fe f975 	bl	8003d28 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b64      	cmp	r3, #100	@ 0x64
 8005a46:	d901      	bls.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e194      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a4c:	4b6c      	ldr	r3, [pc, #432]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1f0      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d021      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d11d      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a6c:	4b64      	ldr	r3, [pc, #400]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a72:	0c1b      	lsrs	r3, r3, #16
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a7a:	4b61      	ldr	r3, [pc, #388]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a80:	0e1b      	lsrs	r3, r3, #24
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	019a      	lsls	r2, r3, #6
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	041b      	lsls	r3, r3, #16
 8005a92:	431a      	orrs	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	061b      	lsls	r3, r3, #24
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	071b      	lsls	r3, r3, #28
 8005aa0:	4957      	ldr	r1, [pc, #348]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d004      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005abc:	d00a      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d02e      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ace:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ad2:	d129      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ada:	0c1b      	lsrs	r3, r3, #16
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ae2:	4b47      	ldr	r3, [pc, #284]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ae8:	0f1b      	lsrs	r3, r3, #28
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	019a      	lsls	r2, r3, #6
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	041b      	lsls	r3, r3, #16
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	061b      	lsls	r3, r3, #24
 8005b02:	431a      	orrs	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	071b      	lsls	r3, r3, #28
 8005b08:	493d      	ldr	r1, [pc, #244]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b10:	4b3b      	ldr	r3, [pc, #236]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b16:	f023 021f 	bic.w	r2, r3, #31
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	4937      	ldr	r1, [pc, #220]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01d      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b34:	4b32      	ldr	r3, [pc, #200]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b3a:	0e1b      	lsrs	r3, r3, #24
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b42:	4b2f      	ldr	r3, [pc, #188]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b48:	0f1b      	lsrs	r3, r3, #28
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	019a      	lsls	r2, r3, #6
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	041b      	lsls	r3, r3, #16
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	061b      	lsls	r3, r3, #24
 8005b62:	431a      	orrs	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	071b      	lsls	r3, r3, #28
 8005b68:	4925      	ldr	r1, [pc, #148]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d011      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	019a      	lsls	r2, r3, #6
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	041b      	lsls	r3, r3, #16
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	061b      	lsls	r3, r3, #24
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	071b      	lsls	r3, r3, #28
 8005b98:	4919      	ldr	r1, [pc, #100]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ba0:	4b17      	ldr	r3, [pc, #92]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a16      	ldr	r2, [pc, #88]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ba6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bac:	f7fe f8bc 	bl	8003d28 <HAL_GetTick>
 8005bb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bb4:	f7fe f8b8 	bl	8003d28 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b64      	cmp	r3, #100	@ 0x64
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e0d7      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f0      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	f040 80cd 	bne.w	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005bda:	4b09      	ldr	r3, [pc, #36]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a08      	ldr	r2, [pc, #32]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005be0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be6:	f7fe f89f 	bl	8003d28 <HAL_GetTick>
 8005bea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bec:	e00a      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bee:	f7fe f89b 	bl	8003d28 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b64      	cmp	r3, #100	@ 0x64
 8005bfa:	d903      	bls.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e0ba      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005c00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c04:	4b5e      	ldr	r3, [pc, #376]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c10:	d0ed      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d009      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d02e      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d12a      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c3a:	4b51      	ldr	r3, [pc, #324]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c40:	0c1b      	lsrs	r3, r3, #16
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c48:	4b4d      	ldr	r3, [pc, #308]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4e:	0f1b      	lsrs	r3, r3, #28
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	019a      	lsls	r2, r3, #6
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	041b      	lsls	r3, r3, #16
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	061b      	lsls	r3, r3, #24
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	071b      	lsls	r3, r3, #28
 8005c6e:	4944      	ldr	r1, [pc, #272]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c76:	4b42      	ldr	r3, [pc, #264]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c7c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c84:	3b01      	subs	r3, #1
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	493d      	ldr	r1, [pc, #244]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d022      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ca0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ca4:	d11d      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ca6:	4b36      	ldr	r3, [pc, #216]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cac:	0e1b      	lsrs	r3, r3, #24
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005cb4:	4b32      	ldr	r3, [pc, #200]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cba:	0f1b      	lsrs	r3, r3, #28
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	019a      	lsls	r2, r3, #6
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	041b      	lsls	r3, r3, #16
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	061b      	lsls	r3, r3, #24
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	071b      	lsls	r3, r3, #28
 8005cda:	4929      	ldr	r1, [pc, #164]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d028      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cee:	4b24      	ldr	r3, [pc, #144]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf4:	0e1b      	lsrs	r3, r3, #24
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005cfc:	4b20      	ldr	r3, [pc, #128]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d02:	0c1b      	lsrs	r3, r3, #16
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	019a      	lsls	r2, r3, #6
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	041b      	lsls	r3, r3, #16
 8005d14:	431a      	orrs	r2, r3
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	061b      	lsls	r3, r3, #24
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	071b      	lsls	r3, r3, #28
 8005d22:	4917      	ldr	r1, [pc, #92]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d2a:	4b15      	ldr	r3, [pc, #84]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d38:	4911      	ldr	r1, [pc, #68]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d40:	4b0f      	ldr	r3, [pc, #60]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a0e      	ldr	r2, [pc, #56]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d4c:	f7fd ffec 	bl	8003d28 <HAL_GetTick>
 8005d50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d52:	e008      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d54:	f7fd ffe8 	bl	8003d28 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b64      	cmp	r3, #100	@ 0x64
 8005d60:	d901      	bls.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e007      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d66:	4b06      	ldr	r3, [pc, #24]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d72:	d1ef      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3720      	adds	r7, #32
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40023800 	.word	0x40023800

08005d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e040      	b.n	8005e18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d106      	bne.n	8005dac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fd fd86 	bl	80038b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2224      	movs	r2, #36	@ 0x24
 8005db0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0201 	bic.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fb16 	bl	80063fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f8af 	bl	8005f34 <UART_SetConfig>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e01b      	b.n	8005e18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fb95 	bl	8006540 <UART_CheckIdleState>
 8005e16:	4603      	mov	r3, r0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	@ 0x28
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	603b      	str	r3, [r7, #0]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d177      	bne.n	8005f28 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <HAL_UART_Transmit+0x24>
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e070      	b.n	8005f2a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2221      	movs	r2, #33	@ 0x21
 8005e54:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e56:	f7fd ff67 	bl	8003d28 <HAL_GetTick>
 8005e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	88fa      	ldrh	r2, [r7, #6]
 8005e60:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	88fa      	ldrh	r2, [r7, #6]
 8005e68:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e74:	d108      	bne.n	8005e88 <HAL_UART_Transmit+0x68>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d104      	bne.n	8005e88 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	61bb      	str	r3, [r7, #24]
 8005e86:	e003      	b.n	8005e90 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e90:	e02f      	b.n	8005ef2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2180      	movs	r1, #128	@ 0x80
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fba6 	bl	80065ee <UART_WaitOnFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e03b      	b.n	8005f2a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10b      	bne.n	8005ed0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ec6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	3302      	adds	r3, #2
 8005ecc:	61bb      	str	r3, [r7, #24]
 8005ece:	e007      	b.n	8005ee0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	781a      	ldrb	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	3301      	adds	r3, #1
 8005ede:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1c9      	bne.n	8005e92 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2200      	movs	r2, #0
 8005f06:	2140      	movs	r1, #64	@ 0x40
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fb70 	bl	80065ee <UART_WaitOnFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d004      	beq.n	8005f1e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e005      	b.n	8005f2a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2220      	movs	r2, #32
 8005f22:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	e000      	b.n	8005f2a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005f28:	2302      	movs	r3, #2
  }
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3720      	adds	r7, #32
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	4ba6      	ldr	r3, [pc, #664]	@ (80061f8 <UART_SetConfig+0x2c4>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6812      	ldr	r2, [r2, #0]
 8005f66:	6979      	ldr	r1, [r7, #20]
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a94      	ldr	r2, [pc, #592]	@ (80061fc <UART_SetConfig+0x2c8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d120      	bne.n	8005ff2 <UART_SetConfig+0xbe>
 8005fb0:	4b93      	ldr	r3, [pc, #588]	@ (8006200 <UART_SetConfig+0x2cc>)
 8005fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d816      	bhi.n	8005fec <UART_SetConfig+0xb8>
 8005fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc4 <UART_SetConfig+0x90>)
 8005fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	08005fe1 	.word	0x08005fe1
 8005fcc:	08005fdb 	.word	0x08005fdb
 8005fd0:	08005fe7 	.word	0x08005fe7
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	77fb      	strb	r3, [r7, #31]
 8005fd8:	e150      	b.n	800627c <UART_SetConfig+0x348>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	77fb      	strb	r3, [r7, #31]
 8005fde:	e14d      	b.n	800627c <UART_SetConfig+0x348>
 8005fe0:	2304      	movs	r3, #4
 8005fe2:	77fb      	strb	r3, [r7, #31]
 8005fe4:	e14a      	b.n	800627c <UART_SetConfig+0x348>
 8005fe6:	2308      	movs	r3, #8
 8005fe8:	77fb      	strb	r3, [r7, #31]
 8005fea:	e147      	b.n	800627c <UART_SetConfig+0x348>
 8005fec:	2310      	movs	r3, #16
 8005fee:	77fb      	strb	r3, [r7, #31]
 8005ff0:	e144      	b.n	800627c <UART_SetConfig+0x348>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a83      	ldr	r2, [pc, #524]	@ (8006204 <UART_SetConfig+0x2d0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d132      	bne.n	8006062 <UART_SetConfig+0x12e>
 8005ffc:	4b80      	ldr	r3, [pc, #512]	@ (8006200 <UART_SetConfig+0x2cc>)
 8005ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006002:	f003 030c 	and.w	r3, r3, #12
 8006006:	2b0c      	cmp	r3, #12
 8006008:	d828      	bhi.n	800605c <UART_SetConfig+0x128>
 800600a:	a201      	add	r2, pc, #4	@ (adr r2, 8006010 <UART_SetConfig+0xdc>)
 800600c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006010:	08006045 	.word	0x08006045
 8006014:	0800605d 	.word	0x0800605d
 8006018:	0800605d 	.word	0x0800605d
 800601c:	0800605d 	.word	0x0800605d
 8006020:	08006051 	.word	0x08006051
 8006024:	0800605d 	.word	0x0800605d
 8006028:	0800605d 	.word	0x0800605d
 800602c:	0800605d 	.word	0x0800605d
 8006030:	0800604b 	.word	0x0800604b
 8006034:	0800605d 	.word	0x0800605d
 8006038:	0800605d 	.word	0x0800605d
 800603c:	0800605d 	.word	0x0800605d
 8006040:	08006057 	.word	0x08006057
 8006044:	2300      	movs	r3, #0
 8006046:	77fb      	strb	r3, [r7, #31]
 8006048:	e118      	b.n	800627c <UART_SetConfig+0x348>
 800604a:	2302      	movs	r3, #2
 800604c:	77fb      	strb	r3, [r7, #31]
 800604e:	e115      	b.n	800627c <UART_SetConfig+0x348>
 8006050:	2304      	movs	r3, #4
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e112      	b.n	800627c <UART_SetConfig+0x348>
 8006056:	2308      	movs	r3, #8
 8006058:	77fb      	strb	r3, [r7, #31]
 800605a:	e10f      	b.n	800627c <UART_SetConfig+0x348>
 800605c:	2310      	movs	r3, #16
 800605e:	77fb      	strb	r3, [r7, #31]
 8006060:	e10c      	b.n	800627c <UART_SetConfig+0x348>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a68      	ldr	r2, [pc, #416]	@ (8006208 <UART_SetConfig+0x2d4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d120      	bne.n	80060ae <UART_SetConfig+0x17a>
 800606c:	4b64      	ldr	r3, [pc, #400]	@ (8006200 <UART_SetConfig+0x2cc>)
 800606e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006072:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006076:	2b30      	cmp	r3, #48	@ 0x30
 8006078:	d013      	beq.n	80060a2 <UART_SetConfig+0x16e>
 800607a:	2b30      	cmp	r3, #48	@ 0x30
 800607c:	d814      	bhi.n	80060a8 <UART_SetConfig+0x174>
 800607e:	2b20      	cmp	r3, #32
 8006080:	d009      	beq.n	8006096 <UART_SetConfig+0x162>
 8006082:	2b20      	cmp	r3, #32
 8006084:	d810      	bhi.n	80060a8 <UART_SetConfig+0x174>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <UART_SetConfig+0x15c>
 800608a:	2b10      	cmp	r3, #16
 800608c:	d006      	beq.n	800609c <UART_SetConfig+0x168>
 800608e:	e00b      	b.n	80060a8 <UART_SetConfig+0x174>
 8006090:	2300      	movs	r3, #0
 8006092:	77fb      	strb	r3, [r7, #31]
 8006094:	e0f2      	b.n	800627c <UART_SetConfig+0x348>
 8006096:	2302      	movs	r3, #2
 8006098:	77fb      	strb	r3, [r7, #31]
 800609a:	e0ef      	b.n	800627c <UART_SetConfig+0x348>
 800609c:	2304      	movs	r3, #4
 800609e:	77fb      	strb	r3, [r7, #31]
 80060a0:	e0ec      	b.n	800627c <UART_SetConfig+0x348>
 80060a2:	2308      	movs	r3, #8
 80060a4:	77fb      	strb	r3, [r7, #31]
 80060a6:	e0e9      	b.n	800627c <UART_SetConfig+0x348>
 80060a8:	2310      	movs	r3, #16
 80060aa:	77fb      	strb	r3, [r7, #31]
 80060ac:	e0e6      	b.n	800627c <UART_SetConfig+0x348>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a56      	ldr	r2, [pc, #344]	@ (800620c <UART_SetConfig+0x2d8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d120      	bne.n	80060fa <UART_SetConfig+0x1c6>
 80060b8:	4b51      	ldr	r3, [pc, #324]	@ (8006200 <UART_SetConfig+0x2cc>)
 80060ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80060c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80060c4:	d013      	beq.n	80060ee <UART_SetConfig+0x1ba>
 80060c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80060c8:	d814      	bhi.n	80060f4 <UART_SetConfig+0x1c0>
 80060ca:	2b80      	cmp	r3, #128	@ 0x80
 80060cc:	d009      	beq.n	80060e2 <UART_SetConfig+0x1ae>
 80060ce:	2b80      	cmp	r3, #128	@ 0x80
 80060d0:	d810      	bhi.n	80060f4 <UART_SetConfig+0x1c0>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <UART_SetConfig+0x1a8>
 80060d6:	2b40      	cmp	r3, #64	@ 0x40
 80060d8:	d006      	beq.n	80060e8 <UART_SetConfig+0x1b4>
 80060da:	e00b      	b.n	80060f4 <UART_SetConfig+0x1c0>
 80060dc:	2300      	movs	r3, #0
 80060de:	77fb      	strb	r3, [r7, #31]
 80060e0:	e0cc      	b.n	800627c <UART_SetConfig+0x348>
 80060e2:	2302      	movs	r3, #2
 80060e4:	77fb      	strb	r3, [r7, #31]
 80060e6:	e0c9      	b.n	800627c <UART_SetConfig+0x348>
 80060e8:	2304      	movs	r3, #4
 80060ea:	77fb      	strb	r3, [r7, #31]
 80060ec:	e0c6      	b.n	800627c <UART_SetConfig+0x348>
 80060ee:	2308      	movs	r3, #8
 80060f0:	77fb      	strb	r3, [r7, #31]
 80060f2:	e0c3      	b.n	800627c <UART_SetConfig+0x348>
 80060f4:	2310      	movs	r3, #16
 80060f6:	77fb      	strb	r3, [r7, #31]
 80060f8:	e0c0      	b.n	800627c <UART_SetConfig+0x348>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a44      	ldr	r2, [pc, #272]	@ (8006210 <UART_SetConfig+0x2dc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d125      	bne.n	8006150 <UART_SetConfig+0x21c>
 8006104:	4b3e      	ldr	r3, [pc, #248]	@ (8006200 <UART_SetConfig+0x2cc>)
 8006106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800610a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800610e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006112:	d017      	beq.n	8006144 <UART_SetConfig+0x210>
 8006114:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006118:	d817      	bhi.n	800614a <UART_SetConfig+0x216>
 800611a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800611e:	d00b      	beq.n	8006138 <UART_SetConfig+0x204>
 8006120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006124:	d811      	bhi.n	800614a <UART_SetConfig+0x216>
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <UART_SetConfig+0x1fe>
 800612a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800612e:	d006      	beq.n	800613e <UART_SetConfig+0x20a>
 8006130:	e00b      	b.n	800614a <UART_SetConfig+0x216>
 8006132:	2300      	movs	r3, #0
 8006134:	77fb      	strb	r3, [r7, #31]
 8006136:	e0a1      	b.n	800627c <UART_SetConfig+0x348>
 8006138:	2302      	movs	r3, #2
 800613a:	77fb      	strb	r3, [r7, #31]
 800613c:	e09e      	b.n	800627c <UART_SetConfig+0x348>
 800613e:	2304      	movs	r3, #4
 8006140:	77fb      	strb	r3, [r7, #31]
 8006142:	e09b      	b.n	800627c <UART_SetConfig+0x348>
 8006144:	2308      	movs	r3, #8
 8006146:	77fb      	strb	r3, [r7, #31]
 8006148:	e098      	b.n	800627c <UART_SetConfig+0x348>
 800614a:	2310      	movs	r3, #16
 800614c:	77fb      	strb	r3, [r7, #31]
 800614e:	e095      	b.n	800627c <UART_SetConfig+0x348>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a2f      	ldr	r2, [pc, #188]	@ (8006214 <UART_SetConfig+0x2e0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d125      	bne.n	80061a6 <UART_SetConfig+0x272>
 800615a:	4b29      	ldr	r3, [pc, #164]	@ (8006200 <UART_SetConfig+0x2cc>)
 800615c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006160:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006164:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006168:	d017      	beq.n	800619a <UART_SetConfig+0x266>
 800616a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800616e:	d817      	bhi.n	80061a0 <UART_SetConfig+0x26c>
 8006170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006174:	d00b      	beq.n	800618e <UART_SetConfig+0x25a>
 8006176:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800617a:	d811      	bhi.n	80061a0 <UART_SetConfig+0x26c>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <UART_SetConfig+0x254>
 8006180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006184:	d006      	beq.n	8006194 <UART_SetConfig+0x260>
 8006186:	e00b      	b.n	80061a0 <UART_SetConfig+0x26c>
 8006188:	2301      	movs	r3, #1
 800618a:	77fb      	strb	r3, [r7, #31]
 800618c:	e076      	b.n	800627c <UART_SetConfig+0x348>
 800618e:	2302      	movs	r3, #2
 8006190:	77fb      	strb	r3, [r7, #31]
 8006192:	e073      	b.n	800627c <UART_SetConfig+0x348>
 8006194:	2304      	movs	r3, #4
 8006196:	77fb      	strb	r3, [r7, #31]
 8006198:	e070      	b.n	800627c <UART_SetConfig+0x348>
 800619a:	2308      	movs	r3, #8
 800619c:	77fb      	strb	r3, [r7, #31]
 800619e:	e06d      	b.n	800627c <UART_SetConfig+0x348>
 80061a0:	2310      	movs	r3, #16
 80061a2:	77fb      	strb	r3, [r7, #31]
 80061a4:	e06a      	b.n	800627c <UART_SetConfig+0x348>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006218 <UART_SetConfig+0x2e4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d138      	bne.n	8006222 <UART_SetConfig+0x2ee>
 80061b0:	4b13      	ldr	r3, [pc, #76]	@ (8006200 <UART_SetConfig+0x2cc>)
 80061b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80061ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061be:	d017      	beq.n	80061f0 <UART_SetConfig+0x2bc>
 80061c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061c4:	d82a      	bhi.n	800621c <UART_SetConfig+0x2e8>
 80061c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ca:	d00b      	beq.n	80061e4 <UART_SetConfig+0x2b0>
 80061cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061d0:	d824      	bhi.n	800621c <UART_SetConfig+0x2e8>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <UART_SetConfig+0x2aa>
 80061d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061da:	d006      	beq.n	80061ea <UART_SetConfig+0x2b6>
 80061dc:	e01e      	b.n	800621c <UART_SetConfig+0x2e8>
 80061de:	2300      	movs	r3, #0
 80061e0:	77fb      	strb	r3, [r7, #31]
 80061e2:	e04b      	b.n	800627c <UART_SetConfig+0x348>
 80061e4:	2302      	movs	r3, #2
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	e048      	b.n	800627c <UART_SetConfig+0x348>
 80061ea:	2304      	movs	r3, #4
 80061ec:	77fb      	strb	r3, [r7, #31]
 80061ee:	e045      	b.n	800627c <UART_SetConfig+0x348>
 80061f0:	2308      	movs	r3, #8
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	e042      	b.n	800627c <UART_SetConfig+0x348>
 80061f6:	bf00      	nop
 80061f8:	efff69f3 	.word	0xefff69f3
 80061fc:	40011000 	.word	0x40011000
 8006200:	40023800 	.word	0x40023800
 8006204:	40004400 	.word	0x40004400
 8006208:	40004800 	.word	0x40004800
 800620c:	40004c00 	.word	0x40004c00
 8006210:	40005000 	.word	0x40005000
 8006214:	40011400 	.word	0x40011400
 8006218:	40007800 	.word	0x40007800
 800621c:	2310      	movs	r3, #16
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e02c      	b.n	800627c <UART_SetConfig+0x348>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a72      	ldr	r2, [pc, #456]	@ (80063f0 <UART_SetConfig+0x4bc>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d125      	bne.n	8006278 <UART_SetConfig+0x344>
 800622c:	4b71      	ldr	r3, [pc, #452]	@ (80063f4 <UART_SetConfig+0x4c0>)
 800622e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006232:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006236:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800623a:	d017      	beq.n	800626c <UART_SetConfig+0x338>
 800623c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006240:	d817      	bhi.n	8006272 <UART_SetConfig+0x33e>
 8006242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006246:	d00b      	beq.n	8006260 <UART_SetConfig+0x32c>
 8006248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800624c:	d811      	bhi.n	8006272 <UART_SetConfig+0x33e>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <UART_SetConfig+0x326>
 8006252:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006256:	d006      	beq.n	8006266 <UART_SetConfig+0x332>
 8006258:	e00b      	b.n	8006272 <UART_SetConfig+0x33e>
 800625a:	2300      	movs	r3, #0
 800625c:	77fb      	strb	r3, [r7, #31]
 800625e:	e00d      	b.n	800627c <UART_SetConfig+0x348>
 8006260:	2302      	movs	r3, #2
 8006262:	77fb      	strb	r3, [r7, #31]
 8006264:	e00a      	b.n	800627c <UART_SetConfig+0x348>
 8006266:	2304      	movs	r3, #4
 8006268:	77fb      	strb	r3, [r7, #31]
 800626a:	e007      	b.n	800627c <UART_SetConfig+0x348>
 800626c:	2308      	movs	r3, #8
 800626e:	77fb      	strb	r3, [r7, #31]
 8006270:	e004      	b.n	800627c <UART_SetConfig+0x348>
 8006272:	2310      	movs	r3, #16
 8006274:	77fb      	strb	r3, [r7, #31]
 8006276:	e001      	b.n	800627c <UART_SetConfig+0x348>
 8006278:	2310      	movs	r3, #16
 800627a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006284:	d15b      	bne.n	800633e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006286:	7ffb      	ldrb	r3, [r7, #31]
 8006288:	2b08      	cmp	r3, #8
 800628a:	d828      	bhi.n	80062de <UART_SetConfig+0x3aa>
 800628c:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <UART_SetConfig+0x360>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062c1 	.word	0x080062c1
 800629c:	080062c9 	.word	0x080062c9
 80062a0:	080062df 	.word	0x080062df
 80062a4:	080062cf 	.word	0x080062cf
 80062a8:	080062df 	.word	0x080062df
 80062ac:	080062df 	.word	0x080062df
 80062b0:	080062df 	.word	0x080062df
 80062b4:	080062d7 	.word	0x080062d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b8:	f7ff f94c 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 80062bc:	61b8      	str	r0, [r7, #24]
        break;
 80062be:	e013      	b.n	80062e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062c0:	f7ff f95c 	bl	800557c <HAL_RCC_GetPCLK2Freq>
 80062c4:	61b8      	str	r0, [r7, #24]
        break;
 80062c6:	e00f      	b.n	80062e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062c8:	4b4b      	ldr	r3, [pc, #300]	@ (80063f8 <UART_SetConfig+0x4c4>)
 80062ca:	61bb      	str	r3, [r7, #24]
        break;
 80062cc:	e00c      	b.n	80062e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ce:	f7ff f82f 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 80062d2:	61b8      	str	r0, [r7, #24]
        break;
 80062d4:	e008      	b.n	80062e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062da:	61bb      	str	r3, [r7, #24]
        break;
 80062dc:	e004      	b.n	80062e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	77bb      	strb	r3, [r7, #30]
        break;
 80062e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d074      	beq.n	80063d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	005a      	lsls	r2, r3, #1
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	441a      	add	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006302:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	2b0f      	cmp	r3, #15
 8006308:	d916      	bls.n	8006338 <UART_SetConfig+0x404>
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006310:	d212      	bcs.n	8006338 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f023 030f 	bic.w	r3, r3, #15
 800631a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	b29b      	uxth	r3, r3
 8006322:	f003 0307 	and.w	r3, r3, #7
 8006326:	b29a      	uxth	r2, r3
 8006328:	89fb      	ldrh	r3, [r7, #14]
 800632a:	4313      	orrs	r3, r2
 800632c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	89fa      	ldrh	r2, [r7, #14]
 8006334:	60da      	str	r2, [r3, #12]
 8006336:	e04f      	b.n	80063d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	77bb      	strb	r3, [r7, #30]
 800633c:	e04c      	b.n	80063d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800633e:	7ffb      	ldrb	r3, [r7, #31]
 8006340:	2b08      	cmp	r3, #8
 8006342:	d828      	bhi.n	8006396 <UART_SetConfig+0x462>
 8006344:	a201      	add	r2, pc, #4	@ (adr r2, 800634c <UART_SetConfig+0x418>)
 8006346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634a:	bf00      	nop
 800634c:	08006371 	.word	0x08006371
 8006350:	08006379 	.word	0x08006379
 8006354:	08006381 	.word	0x08006381
 8006358:	08006397 	.word	0x08006397
 800635c:	08006387 	.word	0x08006387
 8006360:	08006397 	.word	0x08006397
 8006364:	08006397 	.word	0x08006397
 8006368:	08006397 	.word	0x08006397
 800636c:	0800638f 	.word	0x0800638f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006370:	f7ff f8f0 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 8006374:	61b8      	str	r0, [r7, #24]
        break;
 8006376:	e013      	b.n	80063a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006378:	f7ff f900 	bl	800557c <HAL_RCC_GetPCLK2Freq>
 800637c:	61b8      	str	r0, [r7, #24]
        break;
 800637e:	e00f      	b.n	80063a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006380:	4b1d      	ldr	r3, [pc, #116]	@ (80063f8 <UART_SetConfig+0x4c4>)
 8006382:	61bb      	str	r3, [r7, #24]
        break;
 8006384:	e00c      	b.n	80063a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006386:	f7fe ffd3 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 800638a:	61b8      	str	r0, [r7, #24]
        break;
 800638c:	e008      	b.n	80063a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800638e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006392:	61bb      	str	r3, [r7, #24]
        break;
 8006394:	e004      	b.n	80063a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	77bb      	strb	r3, [r7, #30]
        break;
 800639e:	bf00      	nop
    }

    if (pclk != 0U)
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d018      	beq.n	80063d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	085a      	lsrs	r2, r3, #1
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	441a      	add	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	2b0f      	cmp	r3, #15
 80063be:	d909      	bls.n	80063d4 <UART_SetConfig+0x4a0>
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063c6:	d205      	bcs.n	80063d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	60da      	str	r2, [r3, #12]
 80063d2:	e001      	b.n	80063d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80063e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3720      	adds	r7, #32
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	40007c00 	.word	0x40007c00
 80063f4:	40023800 	.word	0x40023800
 80063f8:	00f42400 	.word	0x00f42400

080063fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006408:	f003 0308 	and.w	r3, r3, #8
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006490:	f003 0310 	and.w	r3, r3, #16
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00a      	beq.n	80064ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d01a      	beq.n	8006512 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064fa:	d10a      	bne.n	8006512 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	605a      	str	r2, [r3, #4]
  }
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08c      	sub	sp, #48	@ 0x30
 8006544:	af02      	add	r7, sp, #8
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006550:	f7fd fbea 	bl	8003d28 <HAL_GetTick>
 8006554:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0308 	and.w	r3, r3, #8
 8006560:	2b08      	cmp	r3, #8
 8006562:	d12e      	bne.n	80065c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006564:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656c:	2200      	movs	r2, #0
 800656e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f83b 	bl	80065ee <UART_WaitOnFlagUntilTimeout>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d021      	beq.n	80065c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	e853 3f00 	ldrex	r3, [r3]
 800658a:	60fb      	str	r3, [r7, #12]
   return(result);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006592:	623b      	str	r3, [r7, #32]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	461a      	mov	r2, r3
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	61fb      	str	r3, [r7, #28]
 800659e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	69b9      	ldr	r1, [r7, #24]
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	617b      	str	r3, [r7, #20]
   return(result);
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e6      	bne.n	800657e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2220      	movs	r2, #32
 80065b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e011      	b.n	80065e6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3728      	adds	r7, #40	@ 0x28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	603b      	str	r3, [r7, #0]
 80065fa:	4613      	mov	r3, r2
 80065fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065fe:	e04f      	b.n	80066a0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006606:	d04b      	beq.n	80066a0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006608:	f7fd fb8e 	bl	8003d28 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	429a      	cmp	r2, r3
 8006616:	d302      	bcc.n	800661e <UART_WaitOnFlagUntilTimeout+0x30>
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e04e      	b.n	80066c0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d037      	beq.n	80066a0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b80      	cmp	r3, #128	@ 0x80
 8006634:	d034      	beq.n	80066a0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b40      	cmp	r3, #64	@ 0x40
 800663a:	d031      	beq.n	80066a0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b08      	cmp	r3, #8
 8006648:	d110      	bne.n	800666c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2208      	movs	r2, #8
 8006650:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f838 	bl	80066c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2208      	movs	r2, #8
 800665c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e029      	b.n	80066c0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006676:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800667a:	d111      	bne.n	80066a0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006684:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f000 f81e 	bl	80066c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2220      	movs	r2, #32
 8006690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e00f      	b.n	80066c0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	69da      	ldr	r2, [r3, #28]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	4013      	ands	r3, r2
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	bf0c      	ite	eq
 80066b0:	2301      	moveq	r3, #1
 80066b2:	2300      	movne	r3, #0
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	461a      	mov	r2, r3
 80066b8:	79fb      	ldrb	r3, [r7, #7]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d0a0      	beq.n	8006600 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b095      	sub	sp, #84	@ 0x54
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80066f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e6      	bne.n	80066d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3308      	adds	r3, #8
 8006708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	61fb      	str	r3, [r7, #28]
   return(result);
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	64bb      	str	r3, [r7, #72]	@ 0x48
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3308      	adds	r3, #8
 8006720:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006724:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e5      	bne.n	8006702 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800673a:	2b01      	cmp	r3, #1
 800673c:	d118      	bne.n	8006770 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	e853 3f00 	ldrex	r3, [r3]
 800674a:	60bb      	str	r3, [r7, #8]
   return(result);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f023 0310 	bic.w	r3, r3, #16
 8006752:	647b      	str	r3, [r7, #68]	@ 0x44
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	461a      	mov	r2, r3
 800675a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006760:	6979      	ldr	r1, [r7, #20]
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	e841 2300 	strex	r3, r2, [r1]
 8006768:	613b      	str	r3, [r7, #16]
   return(result);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1e6      	bne.n	800673e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006784:	bf00      	nop
 8006786:	3754      	adds	r7, #84	@ 0x54
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006790:	b084      	sub	sp, #16
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	f107 001c 	add.w	r0, r7, #28
 800679e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d121      	bne.n	80067ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	4b21      	ldr	r3, [pc, #132]	@ (8006840 <USB_CoreInit+0xb0>)
 80067bc:	4013      	ands	r3, r2
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d105      	bne.n	80067e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fa92 	bl	8006d0c <USB_CoreReset>
 80067e8:	4603      	mov	r3, r0
 80067ea:	73fb      	strb	r3, [r7, #15]
 80067ec:	e010      	b.n	8006810 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fa86 	bl	8006d0c <USB_CoreReset>
 8006800:	4603      	mov	r3, r0
 8006802:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006808:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006810:	7fbb      	ldrb	r3, [r7, #30]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d10b      	bne.n	800682e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f043 0206 	orr.w	r2, r3, #6
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f043 0220 	orr.w	r2, r3, #32
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800682e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800683a:	b004      	add	sp, #16
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	ffbdffbf 	.word	0xffbdffbf

08006844 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f023 0201 	bic.w	r2, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	460b      	mov	r3, r1
 8006870:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d115      	bne.n	80068b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006894:	200a      	movs	r0, #10
 8006896:	f7fd fa53 	bl	8003d40 <HAL_Delay>
      ms += 10U;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	330a      	adds	r3, #10
 800689e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fa25 	bl	8006cf0 <USB_GetMode>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d01e      	beq.n	80068ea <USB_SetCurrentMode+0x84>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80068b0:	d9f0      	bls.n	8006894 <USB_SetCurrentMode+0x2e>
 80068b2:	e01a      	b.n	80068ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d115      	bne.n	80068e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80068c6:	200a      	movs	r0, #10
 80068c8:	f7fd fa3a 	bl	8003d40 <HAL_Delay>
      ms += 10U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	330a      	adds	r3, #10
 80068d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fa0c 	bl	8006cf0 <USB_GetMode>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <USB_SetCurrentMode+0x84>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80068e2:	d9f0      	bls.n	80068c6 <USB_SetCurrentMode+0x60>
 80068e4:	e001      	b.n	80068ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e005      	b.n	80068f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2bc8      	cmp	r3, #200	@ 0xc8
 80068ee:	d101      	bne.n	80068f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e000      	b.n	80068f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006900:	b084      	sub	sp, #16
 8006902:	b580      	push	{r7, lr}
 8006904:	b086      	sub	sp, #24
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800690e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800691a:	2300      	movs	r3, #0
 800691c:	613b      	str	r3, [r7, #16]
 800691e:	e009      	b.n	8006934 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	3340      	adds	r3, #64	@ 0x40
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	2200      	movs	r2, #0
 800692c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	3301      	adds	r3, #1
 8006932:	613b      	str	r3, [r7, #16]
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	2b0e      	cmp	r3, #14
 8006938:	d9f2      	bls.n	8006920 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800693a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800693e:	2b00      	cmp	r3, #0
 8006940:	d11c      	bne.n	800697c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006950:	f043 0302 	orr.w	r3, r3, #2
 8006954:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	e005      	b.n	8006988 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006980:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800698e:	461a      	mov	r2, r3
 8006990:	2300      	movs	r3, #0
 8006992:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006994:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006998:	2b01      	cmp	r3, #1
 800699a:	d10d      	bne.n	80069b8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800699c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d104      	bne.n	80069ae <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80069a4:	2100      	movs	r1, #0
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f968 	bl	8006c7c <USB_SetDevSpeed>
 80069ac:	e008      	b.n	80069c0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069ae:	2101      	movs	r1, #1
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f963 	bl	8006c7c <USB_SetDevSpeed>
 80069b6:	e003      	b.n	80069c0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069b8:	2103      	movs	r1, #3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f95e 	bl	8006c7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069c0:	2110      	movs	r1, #16
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f8fa 	bl	8006bbc <USB_FlushTxFifo>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f924 	bl	8006c20 <USB_FlushRxFifo>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069e8:	461a      	mov	r2, r3
 80069ea:	2300      	movs	r3, #0
 80069ec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f4:	461a      	mov	r2, r3
 80069f6:	2300      	movs	r3, #0
 80069f8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a00:	461a      	mov	r2, r3
 8006a02:	2300      	movs	r3, #0
 8006a04:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a06:	2300      	movs	r3, #0
 8006a08:	613b      	str	r3, [r7, #16]
 8006a0a:	e043      	b.n	8006a94 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a22:	d118      	bne.n	8006a56 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10a      	bne.n	8006a40 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a36:	461a      	mov	r2, r3
 8006a38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	e013      	b.n	8006a68 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	e008      	b.n	8006a68 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a62:	461a      	mov	r2, r3
 8006a64:	2300      	movs	r3, #0
 8006a66:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a74:	461a      	mov	r2, r3
 8006a76:	2300      	movs	r3, #0
 8006a78:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a86:	461a      	mov	r2, r3
 8006a88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	3301      	adds	r3, #1
 8006a92:	613b      	str	r3, [r7, #16]
 8006a94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a98:	461a      	mov	r2, r3
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d3b5      	bcc.n	8006a0c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	613b      	str	r3, [r7, #16]
 8006aa4:	e043      	b.n	8006b2e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006abc:	d118      	bne.n	8006af0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	e013      	b.n	8006b02 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	e008      	b.n	8006b02 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006afc:	461a      	mov	r2, r3
 8006afe:	2300      	movs	r3, #0
 8006b00:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b0e:	461a      	mov	r2, r3
 8006b10:	2300      	movs	r3, #0
 8006b12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b20:	461a      	mov	r2, r3
 8006b22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006b26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	613b      	str	r3, [r7, #16]
 8006b2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006b32:	461a      	mov	r2, r3
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d3b5      	bcc.n	8006aa6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b4c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006b5a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d105      	bne.n	8006b70 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	f043 0210 	orr.w	r2, r3, #16
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	699a      	ldr	r2, [r3, #24]
 8006b74:	4b0f      	ldr	r3, [pc, #60]	@ (8006bb4 <USB_DevInit+0x2b4>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d005      	beq.n	8006b90 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	f043 0208 	orr.w	r2, r3, #8
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d105      	bne.n	8006ba4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	4b06      	ldr	r3, [pc, #24]	@ (8006bb8 <USB_DevInit+0x2b8>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bb0:	b004      	add	sp, #16
 8006bb2:	4770      	bx	lr
 8006bb4:	803c3800 	.word	0x803c3800
 8006bb8:	40000004 	.word	0x40000004

08006bbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bd6:	d901      	bls.n	8006bdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e01b      	b.n	8006c14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	daf2      	bge.n	8006bca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	019b      	lsls	r3, r3, #6
 8006bec:	f043 0220 	orr.w	r2, r3, #32
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c00:	d901      	bls.n	8006c06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e006      	b.n	8006c14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b20      	cmp	r3, #32
 8006c10:	d0f0      	beq.n	8006bf4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c38:	d901      	bls.n	8006c3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e018      	b.n	8006c70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	daf2      	bge.n	8006c2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2210      	movs	r2, #16
 8006c4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3301      	adds	r3, #1
 8006c54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c5c:	d901      	bls.n	8006c62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e006      	b.n	8006c70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	f003 0310 	and.w	r3, r3, #16
 8006c6a:	2b10      	cmp	r3, #16
 8006c6c:	d0f0      	beq.n	8006c50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	68f9      	ldr	r1, [r7, #12]
 8006c98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b085      	sub	sp, #20
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006cc8:	f023 0303 	bic.w	r3, r3, #3
 8006ccc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cdc:	f043 0302 	orr.w	r3, r3, #2
 8006ce0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	f003 0301 	and.w	r3, r3, #1
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d24:	d901      	bls.n	8006d2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e01b      	b.n	8006d62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	daf2      	bge.n	8006d18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f043 0201 	orr.w	r2, r3, #1
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3301      	adds	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d4e:	d901      	bls.n	8006d54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e006      	b.n	8006d62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d0f0      	beq.n	8006d42 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
	...

08006d70 <std>:
 8006d70:	2300      	movs	r3, #0
 8006d72:	b510      	push	{r4, lr}
 8006d74:	4604      	mov	r4, r0
 8006d76:	e9c0 3300 	strd	r3, r3, [r0]
 8006d7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d7e:	6083      	str	r3, [r0, #8]
 8006d80:	8181      	strh	r1, [r0, #12]
 8006d82:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d84:	81c2      	strh	r2, [r0, #14]
 8006d86:	6183      	str	r3, [r0, #24]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	2208      	movs	r2, #8
 8006d8c:	305c      	adds	r0, #92	@ 0x5c
 8006d8e:	f000 f92e 	bl	8006fee <memset>
 8006d92:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc8 <std+0x58>)
 8006d94:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d96:	4b0d      	ldr	r3, [pc, #52]	@ (8006dcc <std+0x5c>)
 8006d98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd0 <std+0x60>)
 8006d9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd4 <std+0x64>)
 8006da0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006da2:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd8 <std+0x68>)
 8006da4:	6224      	str	r4, [r4, #32]
 8006da6:	429c      	cmp	r4, r3
 8006da8:	d006      	beq.n	8006db8 <std+0x48>
 8006daa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006dae:	4294      	cmp	r4, r2
 8006db0:	d002      	beq.n	8006db8 <std+0x48>
 8006db2:	33d0      	adds	r3, #208	@ 0xd0
 8006db4:	429c      	cmp	r4, r3
 8006db6:	d105      	bne.n	8006dc4 <std+0x54>
 8006db8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dc0:	f000 b98e 	b.w	80070e0 <__retarget_lock_init_recursive>
 8006dc4:	bd10      	pop	{r4, pc}
 8006dc6:	bf00      	nop
 8006dc8:	08006f69 	.word	0x08006f69
 8006dcc:	08006f8b 	.word	0x08006f8b
 8006dd0:	08006fc3 	.word	0x08006fc3
 8006dd4:	08006fe7 	.word	0x08006fe7
 8006dd8:	20002ce8 	.word	0x20002ce8

08006ddc <stdio_exit_handler>:
 8006ddc:	4a02      	ldr	r2, [pc, #8]	@ (8006de8 <stdio_exit_handler+0xc>)
 8006dde:	4903      	ldr	r1, [pc, #12]	@ (8006dec <stdio_exit_handler+0x10>)
 8006de0:	4803      	ldr	r0, [pc, #12]	@ (8006df0 <stdio_exit_handler+0x14>)
 8006de2:	f000 b869 	b.w	8006eb8 <_fwalk_sglue>
 8006de6:	bf00      	nop
 8006de8:	20000048 	.word	0x20000048
 8006dec:	08007c4d 	.word	0x08007c4d
 8006df0:	20000058 	.word	0x20000058

08006df4 <cleanup_stdio>:
 8006df4:	6841      	ldr	r1, [r0, #4]
 8006df6:	4b0c      	ldr	r3, [pc, #48]	@ (8006e28 <cleanup_stdio+0x34>)
 8006df8:	4299      	cmp	r1, r3
 8006dfa:	b510      	push	{r4, lr}
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	d001      	beq.n	8006e04 <cleanup_stdio+0x10>
 8006e00:	f000 ff24 	bl	8007c4c <_fflush_r>
 8006e04:	68a1      	ldr	r1, [r4, #8]
 8006e06:	4b09      	ldr	r3, [pc, #36]	@ (8006e2c <cleanup_stdio+0x38>)
 8006e08:	4299      	cmp	r1, r3
 8006e0a:	d002      	beq.n	8006e12 <cleanup_stdio+0x1e>
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 ff1d 	bl	8007c4c <_fflush_r>
 8006e12:	68e1      	ldr	r1, [r4, #12]
 8006e14:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <cleanup_stdio+0x3c>)
 8006e16:	4299      	cmp	r1, r3
 8006e18:	d004      	beq.n	8006e24 <cleanup_stdio+0x30>
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e20:	f000 bf14 	b.w	8007c4c <_fflush_r>
 8006e24:	bd10      	pop	{r4, pc}
 8006e26:	bf00      	nop
 8006e28:	20002ce8 	.word	0x20002ce8
 8006e2c:	20002d50 	.word	0x20002d50
 8006e30:	20002db8 	.word	0x20002db8

08006e34 <global_stdio_init.part.0>:
 8006e34:	b510      	push	{r4, lr}
 8006e36:	4b0b      	ldr	r3, [pc, #44]	@ (8006e64 <global_stdio_init.part.0+0x30>)
 8006e38:	4c0b      	ldr	r4, [pc, #44]	@ (8006e68 <global_stdio_init.part.0+0x34>)
 8006e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e6c <global_stdio_init.part.0+0x38>)
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	4620      	mov	r0, r4
 8006e40:	2200      	movs	r2, #0
 8006e42:	2104      	movs	r1, #4
 8006e44:	f7ff ff94 	bl	8006d70 <std>
 8006e48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	2109      	movs	r1, #9
 8006e50:	f7ff ff8e 	bl	8006d70 <std>
 8006e54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e58:	2202      	movs	r2, #2
 8006e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e5e:	2112      	movs	r1, #18
 8006e60:	f7ff bf86 	b.w	8006d70 <std>
 8006e64:	20002e20 	.word	0x20002e20
 8006e68:	20002ce8 	.word	0x20002ce8
 8006e6c:	08006ddd 	.word	0x08006ddd

08006e70 <__sfp_lock_acquire>:
 8006e70:	4801      	ldr	r0, [pc, #4]	@ (8006e78 <__sfp_lock_acquire+0x8>)
 8006e72:	f000 b936 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 8006e76:	bf00      	nop
 8006e78:	20002e29 	.word	0x20002e29

08006e7c <__sfp_lock_release>:
 8006e7c:	4801      	ldr	r0, [pc, #4]	@ (8006e84 <__sfp_lock_release+0x8>)
 8006e7e:	f000 b931 	b.w	80070e4 <__retarget_lock_release_recursive>
 8006e82:	bf00      	nop
 8006e84:	20002e29 	.word	0x20002e29

08006e88 <__sinit>:
 8006e88:	b510      	push	{r4, lr}
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	f7ff fff0 	bl	8006e70 <__sfp_lock_acquire>
 8006e90:	6a23      	ldr	r3, [r4, #32]
 8006e92:	b11b      	cbz	r3, 8006e9c <__sinit+0x14>
 8006e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e98:	f7ff bff0 	b.w	8006e7c <__sfp_lock_release>
 8006e9c:	4b04      	ldr	r3, [pc, #16]	@ (8006eb0 <__sinit+0x28>)
 8006e9e:	6223      	str	r3, [r4, #32]
 8006ea0:	4b04      	ldr	r3, [pc, #16]	@ (8006eb4 <__sinit+0x2c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1f5      	bne.n	8006e94 <__sinit+0xc>
 8006ea8:	f7ff ffc4 	bl	8006e34 <global_stdio_init.part.0>
 8006eac:	e7f2      	b.n	8006e94 <__sinit+0xc>
 8006eae:	bf00      	nop
 8006eb0:	08006df5 	.word	0x08006df5
 8006eb4:	20002e20 	.word	0x20002e20

08006eb8 <_fwalk_sglue>:
 8006eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ebc:	4607      	mov	r7, r0
 8006ebe:	4688      	mov	r8, r1
 8006ec0:	4614      	mov	r4, r2
 8006ec2:	2600      	movs	r6, #0
 8006ec4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ec8:	f1b9 0901 	subs.w	r9, r9, #1
 8006ecc:	d505      	bpl.n	8006eda <_fwalk_sglue+0x22>
 8006ece:	6824      	ldr	r4, [r4, #0]
 8006ed0:	2c00      	cmp	r4, #0
 8006ed2:	d1f7      	bne.n	8006ec4 <_fwalk_sglue+0xc>
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eda:	89ab      	ldrh	r3, [r5, #12]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d907      	bls.n	8006ef0 <_fwalk_sglue+0x38>
 8006ee0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	d003      	beq.n	8006ef0 <_fwalk_sglue+0x38>
 8006ee8:	4629      	mov	r1, r5
 8006eea:	4638      	mov	r0, r7
 8006eec:	47c0      	blx	r8
 8006eee:	4306      	orrs	r6, r0
 8006ef0:	3568      	adds	r5, #104	@ 0x68
 8006ef2:	e7e9      	b.n	8006ec8 <_fwalk_sglue+0x10>

08006ef4 <iprintf>:
 8006ef4:	b40f      	push	{r0, r1, r2, r3}
 8006ef6:	b507      	push	{r0, r1, r2, lr}
 8006ef8:	4906      	ldr	r1, [pc, #24]	@ (8006f14 <iprintf+0x20>)
 8006efa:	ab04      	add	r3, sp, #16
 8006efc:	6808      	ldr	r0, [r1, #0]
 8006efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f02:	6881      	ldr	r1, [r0, #8]
 8006f04:	9301      	str	r3, [sp, #4]
 8006f06:	f000 fb77 	bl	80075f8 <_vfiprintf_r>
 8006f0a:	b003      	add	sp, #12
 8006f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f10:	b004      	add	sp, #16
 8006f12:	4770      	bx	lr
 8006f14:	20000054 	.word	0x20000054

08006f18 <putchar>:
 8006f18:	4b02      	ldr	r3, [pc, #8]	@ (8006f24 <putchar+0xc>)
 8006f1a:	4601      	mov	r1, r0
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	6882      	ldr	r2, [r0, #8]
 8006f20:	f000 bebc 	b.w	8007c9c <_putc_r>
 8006f24:	20000054 	.word	0x20000054

08006f28 <siprintf>:
 8006f28:	b40e      	push	{r1, r2, r3}
 8006f2a:	b500      	push	{lr}
 8006f2c:	b09c      	sub	sp, #112	@ 0x70
 8006f2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006f30:	9002      	str	r0, [sp, #8]
 8006f32:	9006      	str	r0, [sp, #24]
 8006f34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f38:	4809      	ldr	r0, [pc, #36]	@ (8006f60 <siprintf+0x38>)
 8006f3a:	9107      	str	r1, [sp, #28]
 8006f3c:	9104      	str	r1, [sp, #16]
 8006f3e:	4909      	ldr	r1, [pc, #36]	@ (8006f64 <siprintf+0x3c>)
 8006f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f44:	9105      	str	r1, [sp, #20]
 8006f46:	6800      	ldr	r0, [r0, #0]
 8006f48:	9301      	str	r3, [sp, #4]
 8006f4a:	a902      	add	r1, sp, #8
 8006f4c:	f000 fa2e 	bl	80073ac <_svfiprintf_r>
 8006f50:	9b02      	ldr	r3, [sp, #8]
 8006f52:	2200      	movs	r2, #0
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	b01c      	add	sp, #112	@ 0x70
 8006f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f5c:	b003      	add	sp, #12
 8006f5e:	4770      	bx	lr
 8006f60:	20000054 	.word	0x20000054
 8006f64:	ffff0208 	.word	0xffff0208

08006f68 <__sread>:
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f70:	f000 f868 	bl	8007044 <_read_r>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	bfab      	itete	ge
 8006f78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f7c:	181b      	addge	r3, r3, r0
 8006f7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f82:	bfac      	ite	ge
 8006f84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f86:	81a3      	strhlt	r3, [r4, #12]
 8006f88:	bd10      	pop	{r4, pc}

08006f8a <__swrite>:
 8006f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8e:	461f      	mov	r7, r3
 8006f90:	898b      	ldrh	r3, [r1, #12]
 8006f92:	05db      	lsls	r3, r3, #23
 8006f94:	4605      	mov	r5, r0
 8006f96:	460c      	mov	r4, r1
 8006f98:	4616      	mov	r6, r2
 8006f9a:	d505      	bpl.n	8006fa8 <__swrite+0x1e>
 8006f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f000 f83c 	bl	8007020 <_lseek_r>
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fb2:	81a3      	strh	r3, [r4, #12]
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	4628      	mov	r0, r5
 8006fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbe:	f000 b853 	b.w	8007068 <_write_r>

08006fc2 <__sseek>:
 8006fc2:	b510      	push	{r4, lr}
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fca:	f000 f829 	bl	8007020 <_lseek_r>
 8006fce:	1c43      	adds	r3, r0, #1
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	bf15      	itete	ne
 8006fd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006fd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006fda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006fde:	81a3      	strheq	r3, [r4, #12]
 8006fe0:	bf18      	it	ne
 8006fe2:	81a3      	strhne	r3, [r4, #12]
 8006fe4:	bd10      	pop	{r4, pc}

08006fe6 <__sclose>:
 8006fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fea:	f000 b809 	b.w	8007000 <_close_r>

08006fee <memset>:
 8006fee:	4402      	add	r2, r0
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d100      	bne.n	8006ff8 <memset+0xa>
 8006ff6:	4770      	bx	lr
 8006ff8:	f803 1b01 	strb.w	r1, [r3], #1
 8006ffc:	e7f9      	b.n	8006ff2 <memset+0x4>
	...

08007000 <_close_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d06      	ldr	r5, [pc, #24]	@ (800701c <_close_r+0x1c>)
 8007004:	2300      	movs	r3, #0
 8007006:	4604      	mov	r4, r0
 8007008:	4608      	mov	r0, r1
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	f7fc fd96 	bl	8003b3c <_close>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_close_r+0x1a>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_close_r+0x1a>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	20002e24 	.word	0x20002e24

08007020 <_lseek_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d07      	ldr	r5, [pc, #28]	@ (8007040 <_lseek_r+0x20>)
 8007024:	4604      	mov	r4, r0
 8007026:	4608      	mov	r0, r1
 8007028:	4611      	mov	r1, r2
 800702a:	2200      	movs	r2, #0
 800702c:	602a      	str	r2, [r5, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	f7fc fdab 	bl	8003b8a <_lseek>
 8007034:	1c43      	adds	r3, r0, #1
 8007036:	d102      	bne.n	800703e <_lseek_r+0x1e>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	b103      	cbz	r3, 800703e <_lseek_r+0x1e>
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	bd38      	pop	{r3, r4, r5, pc}
 8007040:	20002e24 	.word	0x20002e24

08007044 <_read_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4d07      	ldr	r5, [pc, #28]	@ (8007064 <_read_r+0x20>)
 8007048:	4604      	mov	r4, r0
 800704a:	4608      	mov	r0, r1
 800704c:	4611      	mov	r1, r2
 800704e:	2200      	movs	r2, #0
 8007050:	602a      	str	r2, [r5, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	f7fc fd39 	bl	8003aca <_read>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_read_r+0x1e>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_read_r+0x1e>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20002e24 	.word	0x20002e24

08007068 <_write_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d07      	ldr	r5, [pc, #28]	@ (8007088 <_write_r+0x20>)
 800706c:	4604      	mov	r4, r0
 800706e:	4608      	mov	r0, r1
 8007070:	4611      	mov	r1, r2
 8007072:	2200      	movs	r2, #0
 8007074:	602a      	str	r2, [r5, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f7fc fd44 	bl	8003b04 <_write>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_write_r+0x1e>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_write_r+0x1e>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	20002e24 	.word	0x20002e24

0800708c <__errno>:
 800708c:	4b01      	ldr	r3, [pc, #4]	@ (8007094 <__errno+0x8>)
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20000054 	.word	0x20000054

08007098 <__libc_init_array>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	4d0d      	ldr	r5, [pc, #52]	@ (80070d0 <__libc_init_array+0x38>)
 800709c:	4c0d      	ldr	r4, [pc, #52]	@ (80070d4 <__libc_init_array+0x3c>)
 800709e:	1b64      	subs	r4, r4, r5
 80070a0:	10a4      	asrs	r4, r4, #2
 80070a2:	2600      	movs	r6, #0
 80070a4:	42a6      	cmp	r6, r4
 80070a6:	d109      	bne.n	80070bc <__libc_init_array+0x24>
 80070a8:	4d0b      	ldr	r5, [pc, #44]	@ (80070d8 <__libc_init_array+0x40>)
 80070aa:	4c0c      	ldr	r4, [pc, #48]	@ (80070dc <__libc_init_array+0x44>)
 80070ac:	f000 ffa2 	bl	8007ff4 <_init>
 80070b0:	1b64      	subs	r4, r4, r5
 80070b2:	10a4      	asrs	r4, r4, #2
 80070b4:	2600      	movs	r6, #0
 80070b6:	42a6      	cmp	r6, r4
 80070b8:	d105      	bne.n	80070c6 <__libc_init_array+0x2e>
 80070ba:	bd70      	pop	{r4, r5, r6, pc}
 80070bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c0:	4798      	blx	r3
 80070c2:	3601      	adds	r6, #1
 80070c4:	e7ee      	b.n	80070a4 <__libc_init_array+0xc>
 80070c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ca:	4798      	blx	r3
 80070cc:	3601      	adds	r6, #1
 80070ce:	e7f2      	b.n	80070b6 <__libc_init_array+0x1e>
 80070d0:	080080dc 	.word	0x080080dc
 80070d4:	080080dc 	.word	0x080080dc
 80070d8:	080080dc 	.word	0x080080dc
 80070dc:	080080e0 	.word	0x080080e0

080070e0 <__retarget_lock_init_recursive>:
 80070e0:	4770      	bx	lr

080070e2 <__retarget_lock_acquire_recursive>:
 80070e2:	4770      	bx	lr

080070e4 <__retarget_lock_release_recursive>:
 80070e4:	4770      	bx	lr

080070e6 <memcpy>:
 80070e6:	440a      	add	r2, r1
 80070e8:	4291      	cmp	r1, r2
 80070ea:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80070ee:	d100      	bne.n	80070f2 <memcpy+0xc>
 80070f0:	4770      	bx	lr
 80070f2:	b510      	push	{r4, lr}
 80070f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070fc:	4291      	cmp	r1, r2
 80070fe:	d1f9      	bne.n	80070f4 <memcpy+0xe>
 8007100:	bd10      	pop	{r4, pc}
	...

08007104 <_free_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4605      	mov	r5, r0
 8007108:	2900      	cmp	r1, #0
 800710a:	d041      	beq.n	8007190 <_free_r+0x8c>
 800710c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007110:	1f0c      	subs	r4, r1, #4
 8007112:	2b00      	cmp	r3, #0
 8007114:	bfb8      	it	lt
 8007116:	18e4      	addlt	r4, r4, r3
 8007118:	f000 f8e0 	bl	80072dc <__malloc_lock>
 800711c:	4a1d      	ldr	r2, [pc, #116]	@ (8007194 <_free_r+0x90>)
 800711e:	6813      	ldr	r3, [r2, #0]
 8007120:	b933      	cbnz	r3, 8007130 <_free_r+0x2c>
 8007122:	6063      	str	r3, [r4, #4]
 8007124:	6014      	str	r4, [r2, #0]
 8007126:	4628      	mov	r0, r5
 8007128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800712c:	f000 b8dc 	b.w	80072e8 <__malloc_unlock>
 8007130:	42a3      	cmp	r3, r4
 8007132:	d908      	bls.n	8007146 <_free_r+0x42>
 8007134:	6820      	ldr	r0, [r4, #0]
 8007136:	1821      	adds	r1, r4, r0
 8007138:	428b      	cmp	r3, r1
 800713a:	bf01      	itttt	eq
 800713c:	6819      	ldreq	r1, [r3, #0]
 800713e:	685b      	ldreq	r3, [r3, #4]
 8007140:	1809      	addeq	r1, r1, r0
 8007142:	6021      	streq	r1, [r4, #0]
 8007144:	e7ed      	b.n	8007122 <_free_r+0x1e>
 8007146:	461a      	mov	r2, r3
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	b10b      	cbz	r3, 8007150 <_free_r+0x4c>
 800714c:	42a3      	cmp	r3, r4
 800714e:	d9fa      	bls.n	8007146 <_free_r+0x42>
 8007150:	6811      	ldr	r1, [r2, #0]
 8007152:	1850      	adds	r0, r2, r1
 8007154:	42a0      	cmp	r0, r4
 8007156:	d10b      	bne.n	8007170 <_free_r+0x6c>
 8007158:	6820      	ldr	r0, [r4, #0]
 800715a:	4401      	add	r1, r0
 800715c:	1850      	adds	r0, r2, r1
 800715e:	4283      	cmp	r3, r0
 8007160:	6011      	str	r1, [r2, #0]
 8007162:	d1e0      	bne.n	8007126 <_free_r+0x22>
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	6053      	str	r3, [r2, #4]
 800716a:	4408      	add	r0, r1
 800716c:	6010      	str	r0, [r2, #0]
 800716e:	e7da      	b.n	8007126 <_free_r+0x22>
 8007170:	d902      	bls.n	8007178 <_free_r+0x74>
 8007172:	230c      	movs	r3, #12
 8007174:	602b      	str	r3, [r5, #0]
 8007176:	e7d6      	b.n	8007126 <_free_r+0x22>
 8007178:	6820      	ldr	r0, [r4, #0]
 800717a:	1821      	adds	r1, r4, r0
 800717c:	428b      	cmp	r3, r1
 800717e:	bf04      	itt	eq
 8007180:	6819      	ldreq	r1, [r3, #0]
 8007182:	685b      	ldreq	r3, [r3, #4]
 8007184:	6063      	str	r3, [r4, #4]
 8007186:	bf04      	itt	eq
 8007188:	1809      	addeq	r1, r1, r0
 800718a:	6021      	streq	r1, [r4, #0]
 800718c:	6054      	str	r4, [r2, #4]
 800718e:	e7ca      	b.n	8007126 <_free_r+0x22>
 8007190:	bd38      	pop	{r3, r4, r5, pc}
 8007192:	bf00      	nop
 8007194:	20002e30 	.word	0x20002e30

08007198 <sbrk_aligned>:
 8007198:	b570      	push	{r4, r5, r6, lr}
 800719a:	4e0f      	ldr	r6, [pc, #60]	@ (80071d8 <sbrk_aligned+0x40>)
 800719c:	460c      	mov	r4, r1
 800719e:	6831      	ldr	r1, [r6, #0]
 80071a0:	4605      	mov	r5, r0
 80071a2:	b911      	cbnz	r1, 80071aa <sbrk_aligned+0x12>
 80071a4:	f000 fe5c 	bl	8007e60 <_sbrk_r>
 80071a8:	6030      	str	r0, [r6, #0]
 80071aa:	4621      	mov	r1, r4
 80071ac:	4628      	mov	r0, r5
 80071ae:	f000 fe57 	bl	8007e60 <_sbrk_r>
 80071b2:	1c43      	adds	r3, r0, #1
 80071b4:	d103      	bne.n	80071be <sbrk_aligned+0x26>
 80071b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80071ba:	4620      	mov	r0, r4
 80071bc:	bd70      	pop	{r4, r5, r6, pc}
 80071be:	1cc4      	adds	r4, r0, #3
 80071c0:	f024 0403 	bic.w	r4, r4, #3
 80071c4:	42a0      	cmp	r0, r4
 80071c6:	d0f8      	beq.n	80071ba <sbrk_aligned+0x22>
 80071c8:	1a21      	subs	r1, r4, r0
 80071ca:	4628      	mov	r0, r5
 80071cc:	f000 fe48 	bl	8007e60 <_sbrk_r>
 80071d0:	3001      	adds	r0, #1
 80071d2:	d1f2      	bne.n	80071ba <sbrk_aligned+0x22>
 80071d4:	e7ef      	b.n	80071b6 <sbrk_aligned+0x1e>
 80071d6:	bf00      	nop
 80071d8:	20002e2c 	.word	0x20002e2c

080071dc <_malloc_r>:
 80071dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e0:	1ccd      	adds	r5, r1, #3
 80071e2:	f025 0503 	bic.w	r5, r5, #3
 80071e6:	3508      	adds	r5, #8
 80071e8:	2d0c      	cmp	r5, #12
 80071ea:	bf38      	it	cc
 80071ec:	250c      	movcc	r5, #12
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	4606      	mov	r6, r0
 80071f2:	db01      	blt.n	80071f8 <_malloc_r+0x1c>
 80071f4:	42a9      	cmp	r1, r5
 80071f6:	d904      	bls.n	8007202 <_malloc_r+0x26>
 80071f8:	230c      	movs	r3, #12
 80071fa:	6033      	str	r3, [r6, #0]
 80071fc:	2000      	movs	r0, #0
 80071fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007202:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072d8 <_malloc_r+0xfc>
 8007206:	f000 f869 	bl	80072dc <__malloc_lock>
 800720a:	f8d8 3000 	ldr.w	r3, [r8]
 800720e:	461c      	mov	r4, r3
 8007210:	bb44      	cbnz	r4, 8007264 <_malloc_r+0x88>
 8007212:	4629      	mov	r1, r5
 8007214:	4630      	mov	r0, r6
 8007216:	f7ff ffbf 	bl	8007198 <sbrk_aligned>
 800721a:	1c43      	adds	r3, r0, #1
 800721c:	4604      	mov	r4, r0
 800721e:	d158      	bne.n	80072d2 <_malloc_r+0xf6>
 8007220:	f8d8 4000 	ldr.w	r4, [r8]
 8007224:	4627      	mov	r7, r4
 8007226:	2f00      	cmp	r7, #0
 8007228:	d143      	bne.n	80072b2 <_malloc_r+0xd6>
 800722a:	2c00      	cmp	r4, #0
 800722c:	d04b      	beq.n	80072c6 <_malloc_r+0xea>
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	4639      	mov	r1, r7
 8007232:	4630      	mov	r0, r6
 8007234:	eb04 0903 	add.w	r9, r4, r3
 8007238:	f000 fe12 	bl	8007e60 <_sbrk_r>
 800723c:	4581      	cmp	r9, r0
 800723e:	d142      	bne.n	80072c6 <_malloc_r+0xea>
 8007240:	6821      	ldr	r1, [r4, #0]
 8007242:	1a6d      	subs	r5, r5, r1
 8007244:	4629      	mov	r1, r5
 8007246:	4630      	mov	r0, r6
 8007248:	f7ff ffa6 	bl	8007198 <sbrk_aligned>
 800724c:	3001      	adds	r0, #1
 800724e:	d03a      	beq.n	80072c6 <_malloc_r+0xea>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	442b      	add	r3, r5
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	f8d8 3000 	ldr.w	r3, [r8]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	bb62      	cbnz	r2, 80072b8 <_malloc_r+0xdc>
 800725e:	f8c8 7000 	str.w	r7, [r8]
 8007262:	e00f      	b.n	8007284 <_malloc_r+0xa8>
 8007264:	6822      	ldr	r2, [r4, #0]
 8007266:	1b52      	subs	r2, r2, r5
 8007268:	d420      	bmi.n	80072ac <_malloc_r+0xd0>
 800726a:	2a0b      	cmp	r2, #11
 800726c:	d917      	bls.n	800729e <_malloc_r+0xc2>
 800726e:	1961      	adds	r1, r4, r5
 8007270:	42a3      	cmp	r3, r4
 8007272:	6025      	str	r5, [r4, #0]
 8007274:	bf18      	it	ne
 8007276:	6059      	strne	r1, [r3, #4]
 8007278:	6863      	ldr	r3, [r4, #4]
 800727a:	bf08      	it	eq
 800727c:	f8c8 1000 	streq.w	r1, [r8]
 8007280:	5162      	str	r2, [r4, r5]
 8007282:	604b      	str	r3, [r1, #4]
 8007284:	4630      	mov	r0, r6
 8007286:	f000 f82f 	bl	80072e8 <__malloc_unlock>
 800728a:	f104 000b 	add.w	r0, r4, #11
 800728e:	1d23      	adds	r3, r4, #4
 8007290:	f020 0007 	bic.w	r0, r0, #7
 8007294:	1ac2      	subs	r2, r0, r3
 8007296:	bf1c      	itt	ne
 8007298:	1a1b      	subne	r3, r3, r0
 800729a:	50a3      	strne	r3, [r4, r2]
 800729c:	e7af      	b.n	80071fe <_malloc_r+0x22>
 800729e:	6862      	ldr	r2, [r4, #4]
 80072a0:	42a3      	cmp	r3, r4
 80072a2:	bf0c      	ite	eq
 80072a4:	f8c8 2000 	streq.w	r2, [r8]
 80072a8:	605a      	strne	r2, [r3, #4]
 80072aa:	e7eb      	b.n	8007284 <_malloc_r+0xa8>
 80072ac:	4623      	mov	r3, r4
 80072ae:	6864      	ldr	r4, [r4, #4]
 80072b0:	e7ae      	b.n	8007210 <_malloc_r+0x34>
 80072b2:	463c      	mov	r4, r7
 80072b4:	687f      	ldr	r7, [r7, #4]
 80072b6:	e7b6      	b.n	8007226 <_malloc_r+0x4a>
 80072b8:	461a      	mov	r2, r3
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	42a3      	cmp	r3, r4
 80072be:	d1fb      	bne.n	80072b8 <_malloc_r+0xdc>
 80072c0:	2300      	movs	r3, #0
 80072c2:	6053      	str	r3, [r2, #4]
 80072c4:	e7de      	b.n	8007284 <_malloc_r+0xa8>
 80072c6:	230c      	movs	r3, #12
 80072c8:	6033      	str	r3, [r6, #0]
 80072ca:	4630      	mov	r0, r6
 80072cc:	f000 f80c 	bl	80072e8 <__malloc_unlock>
 80072d0:	e794      	b.n	80071fc <_malloc_r+0x20>
 80072d2:	6005      	str	r5, [r0, #0]
 80072d4:	e7d6      	b.n	8007284 <_malloc_r+0xa8>
 80072d6:	bf00      	nop
 80072d8:	20002e30 	.word	0x20002e30

080072dc <__malloc_lock>:
 80072dc:	4801      	ldr	r0, [pc, #4]	@ (80072e4 <__malloc_lock+0x8>)
 80072de:	f7ff bf00 	b.w	80070e2 <__retarget_lock_acquire_recursive>
 80072e2:	bf00      	nop
 80072e4:	20002e28 	.word	0x20002e28

080072e8 <__malloc_unlock>:
 80072e8:	4801      	ldr	r0, [pc, #4]	@ (80072f0 <__malloc_unlock+0x8>)
 80072ea:	f7ff befb 	b.w	80070e4 <__retarget_lock_release_recursive>
 80072ee:	bf00      	nop
 80072f0:	20002e28 	.word	0x20002e28

080072f4 <__ssputs_r>:
 80072f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f8:	688e      	ldr	r6, [r1, #8]
 80072fa:	461f      	mov	r7, r3
 80072fc:	42be      	cmp	r6, r7
 80072fe:	680b      	ldr	r3, [r1, #0]
 8007300:	4682      	mov	sl, r0
 8007302:	460c      	mov	r4, r1
 8007304:	4690      	mov	r8, r2
 8007306:	d82d      	bhi.n	8007364 <__ssputs_r+0x70>
 8007308:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800730c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007310:	d026      	beq.n	8007360 <__ssputs_r+0x6c>
 8007312:	6965      	ldr	r5, [r4, #20]
 8007314:	6909      	ldr	r1, [r1, #16]
 8007316:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800731a:	eba3 0901 	sub.w	r9, r3, r1
 800731e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007322:	1c7b      	adds	r3, r7, #1
 8007324:	444b      	add	r3, r9
 8007326:	106d      	asrs	r5, r5, #1
 8007328:	429d      	cmp	r5, r3
 800732a:	bf38      	it	cc
 800732c:	461d      	movcc	r5, r3
 800732e:	0553      	lsls	r3, r2, #21
 8007330:	d527      	bpl.n	8007382 <__ssputs_r+0x8e>
 8007332:	4629      	mov	r1, r5
 8007334:	f7ff ff52 	bl	80071dc <_malloc_r>
 8007338:	4606      	mov	r6, r0
 800733a:	b360      	cbz	r0, 8007396 <__ssputs_r+0xa2>
 800733c:	6921      	ldr	r1, [r4, #16]
 800733e:	464a      	mov	r2, r9
 8007340:	f7ff fed1 	bl	80070e6 <memcpy>
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800734a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	6126      	str	r6, [r4, #16]
 8007352:	6165      	str	r5, [r4, #20]
 8007354:	444e      	add	r6, r9
 8007356:	eba5 0509 	sub.w	r5, r5, r9
 800735a:	6026      	str	r6, [r4, #0]
 800735c:	60a5      	str	r5, [r4, #8]
 800735e:	463e      	mov	r6, r7
 8007360:	42be      	cmp	r6, r7
 8007362:	d900      	bls.n	8007366 <__ssputs_r+0x72>
 8007364:	463e      	mov	r6, r7
 8007366:	6820      	ldr	r0, [r4, #0]
 8007368:	4632      	mov	r2, r6
 800736a:	4641      	mov	r1, r8
 800736c:	f000 fd5e 	bl	8007e2c <memmove>
 8007370:	68a3      	ldr	r3, [r4, #8]
 8007372:	1b9b      	subs	r3, r3, r6
 8007374:	60a3      	str	r3, [r4, #8]
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	4433      	add	r3, r6
 800737a:	6023      	str	r3, [r4, #0]
 800737c:	2000      	movs	r0, #0
 800737e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007382:	462a      	mov	r2, r5
 8007384:	f000 fd7c 	bl	8007e80 <_realloc_r>
 8007388:	4606      	mov	r6, r0
 800738a:	2800      	cmp	r0, #0
 800738c:	d1e0      	bne.n	8007350 <__ssputs_r+0x5c>
 800738e:	6921      	ldr	r1, [r4, #16]
 8007390:	4650      	mov	r0, sl
 8007392:	f7ff feb7 	bl	8007104 <_free_r>
 8007396:	230c      	movs	r3, #12
 8007398:	f8ca 3000 	str.w	r3, [sl]
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073a2:	81a3      	strh	r3, [r4, #12]
 80073a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073a8:	e7e9      	b.n	800737e <__ssputs_r+0x8a>
	...

080073ac <_svfiprintf_r>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	4698      	mov	r8, r3
 80073b2:	898b      	ldrh	r3, [r1, #12]
 80073b4:	061b      	lsls	r3, r3, #24
 80073b6:	b09d      	sub	sp, #116	@ 0x74
 80073b8:	4607      	mov	r7, r0
 80073ba:	460d      	mov	r5, r1
 80073bc:	4614      	mov	r4, r2
 80073be:	d510      	bpl.n	80073e2 <_svfiprintf_r+0x36>
 80073c0:	690b      	ldr	r3, [r1, #16]
 80073c2:	b973      	cbnz	r3, 80073e2 <_svfiprintf_r+0x36>
 80073c4:	2140      	movs	r1, #64	@ 0x40
 80073c6:	f7ff ff09 	bl	80071dc <_malloc_r>
 80073ca:	6028      	str	r0, [r5, #0]
 80073cc:	6128      	str	r0, [r5, #16]
 80073ce:	b930      	cbnz	r0, 80073de <_svfiprintf_r+0x32>
 80073d0:	230c      	movs	r3, #12
 80073d2:	603b      	str	r3, [r7, #0]
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073d8:	b01d      	add	sp, #116	@ 0x74
 80073da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073de:	2340      	movs	r3, #64	@ 0x40
 80073e0:	616b      	str	r3, [r5, #20]
 80073e2:	2300      	movs	r3, #0
 80073e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073e6:	2320      	movs	r3, #32
 80073e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80073f0:	2330      	movs	r3, #48	@ 0x30
 80073f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007590 <_svfiprintf_r+0x1e4>
 80073f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073fa:	f04f 0901 	mov.w	r9, #1
 80073fe:	4623      	mov	r3, r4
 8007400:	469a      	mov	sl, r3
 8007402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007406:	b10a      	cbz	r2, 800740c <_svfiprintf_r+0x60>
 8007408:	2a25      	cmp	r2, #37	@ 0x25
 800740a:	d1f9      	bne.n	8007400 <_svfiprintf_r+0x54>
 800740c:	ebba 0b04 	subs.w	fp, sl, r4
 8007410:	d00b      	beq.n	800742a <_svfiprintf_r+0x7e>
 8007412:	465b      	mov	r3, fp
 8007414:	4622      	mov	r2, r4
 8007416:	4629      	mov	r1, r5
 8007418:	4638      	mov	r0, r7
 800741a:	f7ff ff6b 	bl	80072f4 <__ssputs_r>
 800741e:	3001      	adds	r0, #1
 8007420:	f000 80a7 	beq.w	8007572 <_svfiprintf_r+0x1c6>
 8007424:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007426:	445a      	add	r2, fp
 8007428:	9209      	str	r2, [sp, #36]	@ 0x24
 800742a:	f89a 3000 	ldrb.w	r3, [sl]
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 809f 	beq.w	8007572 <_svfiprintf_r+0x1c6>
 8007434:	2300      	movs	r3, #0
 8007436:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800743a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800743e:	f10a 0a01 	add.w	sl, sl, #1
 8007442:	9304      	str	r3, [sp, #16]
 8007444:	9307      	str	r3, [sp, #28]
 8007446:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800744a:	931a      	str	r3, [sp, #104]	@ 0x68
 800744c:	4654      	mov	r4, sl
 800744e:	2205      	movs	r2, #5
 8007450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007454:	484e      	ldr	r0, [pc, #312]	@ (8007590 <_svfiprintf_r+0x1e4>)
 8007456:	f7f8 fedb 	bl	8000210 <memchr>
 800745a:	9a04      	ldr	r2, [sp, #16]
 800745c:	b9d8      	cbnz	r0, 8007496 <_svfiprintf_r+0xea>
 800745e:	06d0      	lsls	r0, r2, #27
 8007460:	bf44      	itt	mi
 8007462:	2320      	movmi	r3, #32
 8007464:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007468:	0711      	lsls	r1, r2, #28
 800746a:	bf44      	itt	mi
 800746c:	232b      	movmi	r3, #43	@ 0x2b
 800746e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007472:	f89a 3000 	ldrb.w	r3, [sl]
 8007476:	2b2a      	cmp	r3, #42	@ 0x2a
 8007478:	d015      	beq.n	80074a6 <_svfiprintf_r+0xfa>
 800747a:	9a07      	ldr	r2, [sp, #28]
 800747c:	4654      	mov	r4, sl
 800747e:	2000      	movs	r0, #0
 8007480:	f04f 0c0a 	mov.w	ip, #10
 8007484:	4621      	mov	r1, r4
 8007486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800748a:	3b30      	subs	r3, #48	@ 0x30
 800748c:	2b09      	cmp	r3, #9
 800748e:	d94b      	bls.n	8007528 <_svfiprintf_r+0x17c>
 8007490:	b1b0      	cbz	r0, 80074c0 <_svfiprintf_r+0x114>
 8007492:	9207      	str	r2, [sp, #28]
 8007494:	e014      	b.n	80074c0 <_svfiprintf_r+0x114>
 8007496:	eba0 0308 	sub.w	r3, r0, r8
 800749a:	fa09 f303 	lsl.w	r3, r9, r3
 800749e:	4313      	orrs	r3, r2
 80074a0:	9304      	str	r3, [sp, #16]
 80074a2:	46a2      	mov	sl, r4
 80074a4:	e7d2      	b.n	800744c <_svfiprintf_r+0xa0>
 80074a6:	9b03      	ldr	r3, [sp, #12]
 80074a8:	1d19      	adds	r1, r3, #4
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	9103      	str	r1, [sp, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bfbb      	ittet	lt
 80074b2:	425b      	neglt	r3, r3
 80074b4:	f042 0202 	orrlt.w	r2, r2, #2
 80074b8:	9307      	strge	r3, [sp, #28]
 80074ba:	9307      	strlt	r3, [sp, #28]
 80074bc:	bfb8      	it	lt
 80074be:	9204      	strlt	r2, [sp, #16]
 80074c0:	7823      	ldrb	r3, [r4, #0]
 80074c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80074c4:	d10a      	bne.n	80074dc <_svfiprintf_r+0x130>
 80074c6:	7863      	ldrb	r3, [r4, #1]
 80074c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80074ca:	d132      	bne.n	8007532 <_svfiprintf_r+0x186>
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	1d1a      	adds	r2, r3, #4
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	9203      	str	r2, [sp, #12]
 80074d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074d8:	3402      	adds	r4, #2
 80074da:	9305      	str	r3, [sp, #20]
 80074dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80075a0 <_svfiprintf_r+0x1f4>
 80074e0:	7821      	ldrb	r1, [r4, #0]
 80074e2:	2203      	movs	r2, #3
 80074e4:	4650      	mov	r0, sl
 80074e6:	f7f8 fe93 	bl	8000210 <memchr>
 80074ea:	b138      	cbz	r0, 80074fc <_svfiprintf_r+0x150>
 80074ec:	9b04      	ldr	r3, [sp, #16]
 80074ee:	eba0 000a 	sub.w	r0, r0, sl
 80074f2:	2240      	movs	r2, #64	@ 0x40
 80074f4:	4082      	lsls	r2, r0
 80074f6:	4313      	orrs	r3, r2
 80074f8:	3401      	adds	r4, #1
 80074fa:	9304      	str	r3, [sp, #16]
 80074fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007500:	4824      	ldr	r0, [pc, #144]	@ (8007594 <_svfiprintf_r+0x1e8>)
 8007502:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007506:	2206      	movs	r2, #6
 8007508:	f7f8 fe82 	bl	8000210 <memchr>
 800750c:	2800      	cmp	r0, #0
 800750e:	d036      	beq.n	800757e <_svfiprintf_r+0x1d2>
 8007510:	4b21      	ldr	r3, [pc, #132]	@ (8007598 <_svfiprintf_r+0x1ec>)
 8007512:	bb1b      	cbnz	r3, 800755c <_svfiprintf_r+0x1b0>
 8007514:	9b03      	ldr	r3, [sp, #12]
 8007516:	3307      	adds	r3, #7
 8007518:	f023 0307 	bic.w	r3, r3, #7
 800751c:	3308      	adds	r3, #8
 800751e:	9303      	str	r3, [sp, #12]
 8007520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007522:	4433      	add	r3, r6
 8007524:	9309      	str	r3, [sp, #36]	@ 0x24
 8007526:	e76a      	b.n	80073fe <_svfiprintf_r+0x52>
 8007528:	fb0c 3202 	mla	r2, ip, r2, r3
 800752c:	460c      	mov	r4, r1
 800752e:	2001      	movs	r0, #1
 8007530:	e7a8      	b.n	8007484 <_svfiprintf_r+0xd8>
 8007532:	2300      	movs	r3, #0
 8007534:	3401      	adds	r4, #1
 8007536:	9305      	str	r3, [sp, #20]
 8007538:	4619      	mov	r1, r3
 800753a:	f04f 0c0a 	mov.w	ip, #10
 800753e:	4620      	mov	r0, r4
 8007540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007544:	3a30      	subs	r2, #48	@ 0x30
 8007546:	2a09      	cmp	r2, #9
 8007548:	d903      	bls.n	8007552 <_svfiprintf_r+0x1a6>
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0c6      	beq.n	80074dc <_svfiprintf_r+0x130>
 800754e:	9105      	str	r1, [sp, #20]
 8007550:	e7c4      	b.n	80074dc <_svfiprintf_r+0x130>
 8007552:	fb0c 2101 	mla	r1, ip, r1, r2
 8007556:	4604      	mov	r4, r0
 8007558:	2301      	movs	r3, #1
 800755a:	e7f0      	b.n	800753e <_svfiprintf_r+0x192>
 800755c:	ab03      	add	r3, sp, #12
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	462a      	mov	r2, r5
 8007562:	4b0e      	ldr	r3, [pc, #56]	@ (800759c <_svfiprintf_r+0x1f0>)
 8007564:	a904      	add	r1, sp, #16
 8007566:	4638      	mov	r0, r7
 8007568:	f3af 8000 	nop.w
 800756c:	1c42      	adds	r2, r0, #1
 800756e:	4606      	mov	r6, r0
 8007570:	d1d6      	bne.n	8007520 <_svfiprintf_r+0x174>
 8007572:	89ab      	ldrh	r3, [r5, #12]
 8007574:	065b      	lsls	r3, r3, #25
 8007576:	f53f af2d 	bmi.w	80073d4 <_svfiprintf_r+0x28>
 800757a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800757c:	e72c      	b.n	80073d8 <_svfiprintf_r+0x2c>
 800757e:	ab03      	add	r3, sp, #12
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	462a      	mov	r2, r5
 8007584:	4b05      	ldr	r3, [pc, #20]	@ (800759c <_svfiprintf_r+0x1f0>)
 8007586:	a904      	add	r1, sp, #16
 8007588:	4638      	mov	r0, r7
 800758a:	f000 f9bb 	bl	8007904 <_printf_i>
 800758e:	e7ed      	b.n	800756c <_svfiprintf_r+0x1c0>
 8007590:	080080a0 	.word	0x080080a0
 8007594:	080080aa 	.word	0x080080aa
 8007598:	00000000 	.word	0x00000000
 800759c:	080072f5 	.word	0x080072f5
 80075a0:	080080a6 	.word	0x080080a6

080075a4 <__sfputc_r>:
 80075a4:	6893      	ldr	r3, [r2, #8]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	b410      	push	{r4}
 80075ac:	6093      	str	r3, [r2, #8]
 80075ae:	da08      	bge.n	80075c2 <__sfputc_r+0x1e>
 80075b0:	6994      	ldr	r4, [r2, #24]
 80075b2:	42a3      	cmp	r3, r4
 80075b4:	db01      	blt.n	80075ba <__sfputc_r+0x16>
 80075b6:	290a      	cmp	r1, #10
 80075b8:	d103      	bne.n	80075c2 <__sfputc_r+0x1e>
 80075ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075be:	f000 bba1 	b.w	8007d04 <__swbuf_r>
 80075c2:	6813      	ldr	r3, [r2, #0]
 80075c4:	1c58      	adds	r0, r3, #1
 80075c6:	6010      	str	r0, [r2, #0]
 80075c8:	7019      	strb	r1, [r3, #0]
 80075ca:	4608      	mov	r0, r1
 80075cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <__sfputs_r>:
 80075d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d4:	4606      	mov	r6, r0
 80075d6:	460f      	mov	r7, r1
 80075d8:	4614      	mov	r4, r2
 80075da:	18d5      	adds	r5, r2, r3
 80075dc:	42ac      	cmp	r4, r5
 80075de:	d101      	bne.n	80075e4 <__sfputs_r+0x12>
 80075e0:	2000      	movs	r0, #0
 80075e2:	e007      	b.n	80075f4 <__sfputs_r+0x22>
 80075e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075e8:	463a      	mov	r2, r7
 80075ea:	4630      	mov	r0, r6
 80075ec:	f7ff ffda 	bl	80075a4 <__sfputc_r>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d1f3      	bne.n	80075dc <__sfputs_r+0xa>
 80075f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075f8 <_vfiprintf_r>:
 80075f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fc:	460d      	mov	r5, r1
 80075fe:	b09d      	sub	sp, #116	@ 0x74
 8007600:	4614      	mov	r4, r2
 8007602:	4698      	mov	r8, r3
 8007604:	4606      	mov	r6, r0
 8007606:	b118      	cbz	r0, 8007610 <_vfiprintf_r+0x18>
 8007608:	6a03      	ldr	r3, [r0, #32]
 800760a:	b90b      	cbnz	r3, 8007610 <_vfiprintf_r+0x18>
 800760c:	f7ff fc3c 	bl	8006e88 <__sinit>
 8007610:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007612:	07d9      	lsls	r1, r3, #31
 8007614:	d405      	bmi.n	8007622 <_vfiprintf_r+0x2a>
 8007616:	89ab      	ldrh	r3, [r5, #12]
 8007618:	059a      	lsls	r2, r3, #22
 800761a:	d402      	bmi.n	8007622 <_vfiprintf_r+0x2a>
 800761c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800761e:	f7ff fd60 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8007622:	89ab      	ldrh	r3, [r5, #12]
 8007624:	071b      	lsls	r3, r3, #28
 8007626:	d501      	bpl.n	800762c <_vfiprintf_r+0x34>
 8007628:	692b      	ldr	r3, [r5, #16]
 800762a:	b99b      	cbnz	r3, 8007654 <_vfiprintf_r+0x5c>
 800762c:	4629      	mov	r1, r5
 800762e:	4630      	mov	r0, r6
 8007630:	f000 fba6 	bl	8007d80 <__swsetup_r>
 8007634:	b170      	cbz	r0, 8007654 <_vfiprintf_r+0x5c>
 8007636:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007638:	07dc      	lsls	r4, r3, #31
 800763a:	d504      	bpl.n	8007646 <_vfiprintf_r+0x4e>
 800763c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007640:	b01d      	add	sp, #116	@ 0x74
 8007642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007646:	89ab      	ldrh	r3, [r5, #12]
 8007648:	0598      	lsls	r0, r3, #22
 800764a:	d4f7      	bmi.n	800763c <_vfiprintf_r+0x44>
 800764c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800764e:	f7ff fd49 	bl	80070e4 <__retarget_lock_release_recursive>
 8007652:	e7f3      	b.n	800763c <_vfiprintf_r+0x44>
 8007654:	2300      	movs	r3, #0
 8007656:	9309      	str	r3, [sp, #36]	@ 0x24
 8007658:	2320      	movs	r3, #32
 800765a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800765e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007662:	2330      	movs	r3, #48	@ 0x30
 8007664:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007814 <_vfiprintf_r+0x21c>
 8007668:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800766c:	f04f 0901 	mov.w	r9, #1
 8007670:	4623      	mov	r3, r4
 8007672:	469a      	mov	sl, r3
 8007674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007678:	b10a      	cbz	r2, 800767e <_vfiprintf_r+0x86>
 800767a:	2a25      	cmp	r2, #37	@ 0x25
 800767c:	d1f9      	bne.n	8007672 <_vfiprintf_r+0x7a>
 800767e:	ebba 0b04 	subs.w	fp, sl, r4
 8007682:	d00b      	beq.n	800769c <_vfiprintf_r+0xa4>
 8007684:	465b      	mov	r3, fp
 8007686:	4622      	mov	r2, r4
 8007688:	4629      	mov	r1, r5
 800768a:	4630      	mov	r0, r6
 800768c:	f7ff ffa1 	bl	80075d2 <__sfputs_r>
 8007690:	3001      	adds	r0, #1
 8007692:	f000 80a7 	beq.w	80077e4 <_vfiprintf_r+0x1ec>
 8007696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007698:	445a      	add	r2, fp
 800769a:	9209      	str	r2, [sp, #36]	@ 0x24
 800769c:	f89a 3000 	ldrb.w	r3, [sl]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 809f 	beq.w	80077e4 <_vfiprintf_r+0x1ec>
 80076a6:	2300      	movs	r3, #0
 80076a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076b0:	f10a 0a01 	add.w	sl, sl, #1
 80076b4:	9304      	str	r3, [sp, #16]
 80076b6:	9307      	str	r3, [sp, #28]
 80076b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80076be:	4654      	mov	r4, sl
 80076c0:	2205      	movs	r2, #5
 80076c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c6:	4853      	ldr	r0, [pc, #332]	@ (8007814 <_vfiprintf_r+0x21c>)
 80076c8:	f7f8 fda2 	bl	8000210 <memchr>
 80076cc:	9a04      	ldr	r2, [sp, #16]
 80076ce:	b9d8      	cbnz	r0, 8007708 <_vfiprintf_r+0x110>
 80076d0:	06d1      	lsls	r1, r2, #27
 80076d2:	bf44      	itt	mi
 80076d4:	2320      	movmi	r3, #32
 80076d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076da:	0713      	lsls	r3, r2, #28
 80076dc:	bf44      	itt	mi
 80076de:	232b      	movmi	r3, #43	@ 0x2b
 80076e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076e4:	f89a 3000 	ldrb.w	r3, [sl]
 80076e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80076ea:	d015      	beq.n	8007718 <_vfiprintf_r+0x120>
 80076ec:	9a07      	ldr	r2, [sp, #28]
 80076ee:	4654      	mov	r4, sl
 80076f0:	2000      	movs	r0, #0
 80076f2:	f04f 0c0a 	mov.w	ip, #10
 80076f6:	4621      	mov	r1, r4
 80076f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076fc:	3b30      	subs	r3, #48	@ 0x30
 80076fe:	2b09      	cmp	r3, #9
 8007700:	d94b      	bls.n	800779a <_vfiprintf_r+0x1a2>
 8007702:	b1b0      	cbz	r0, 8007732 <_vfiprintf_r+0x13a>
 8007704:	9207      	str	r2, [sp, #28]
 8007706:	e014      	b.n	8007732 <_vfiprintf_r+0x13a>
 8007708:	eba0 0308 	sub.w	r3, r0, r8
 800770c:	fa09 f303 	lsl.w	r3, r9, r3
 8007710:	4313      	orrs	r3, r2
 8007712:	9304      	str	r3, [sp, #16]
 8007714:	46a2      	mov	sl, r4
 8007716:	e7d2      	b.n	80076be <_vfiprintf_r+0xc6>
 8007718:	9b03      	ldr	r3, [sp, #12]
 800771a:	1d19      	adds	r1, r3, #4
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	9103      	str	r1, [sp, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	bfbb      	ittet	lt
 8007724:	425b      	neglt	r3, r3
 8007726:	f042 0202 	orrlt.w	r2, r2, #2
 800772a:	9307      	strge	r3, [sp, #28]
 800772c:	9307      	strlt	r3, [sp, #28]
 800772e:	bfb8      	it	lt
 8007730:	9204      	strlt	r2, [sp, #16]
 8007732:	7823      	ldrb	r3, [r4, #0]
 8007734:	2b2e      	cmp	r3, #46	@ 0x2e
 8007736:	d10a      	bne.n	800774e <_vfiprintf_r+0x156>
 8007738:	7863      	ldrb	r3, [r4, #1]
 800773a:	2b2a      	cmp	r3, #42	@ 0x2a
 800773c:	d132      	bne.n	80077a4 <_vfiprintf_r+0x1ac>
 800773e:	9b03      	ldr	r3, [sp, #12]
 8007740:	1d1a      	adds	r2, r3, #4
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	9203      	str	r2, [sp, #12]
 8007746:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800774a:	3402      	adds	r4, #2
 800774c:	9305      	str	r3, [sp, #20]
 800774e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007824 <_vfiprintf_r+0x22c>
 8007752:	7821      	ldrb	r1, [r4, #0]
 8007754:	2203      	movs	r2, #3
 8007756:	4650      	mov	r0, sl
 8007758:	f7f8 fd5a 	bl	8000210 <memchr>
 800775c:	b138      	cbz	r0, 800776e <_vfiprintf_r+0x176>
 800775e:	9b04      	ldr	r3, [sp, #16]
 8007760:	eba0 000a 	sub.w	r0, r0, sl
 8007764:	2240      	movs	r2, #64	@ 0x40
 8007766:	4082      	lsls	r2, r0
 8007768:	4313      	orrs	r3, r2
 800776a:	3401      	adds	r4, #1
 800776c:	9304      	str	r3, [sp, #16]
 800776e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007772:	4829      	ldr	r0, [pc, #164]	@ (8007818 <_vfiprintf_r+0x220>)
 8007774:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007778:	2206      	movs	r2, #6
 800777a:	f7f8 fd49 	bl	8000210 <memchr>
 800777e:	2800      	cmp	r0, #0
 8007780:	d03f      	beq.n	8007802 <_vfiprintf_r+0x20a>
 8007782:	4b26      	ldr	r3, [pc, #152]	@ (800781c <_vfiprintf_r+0x224>)
 8007784:	bb1b      	cbnz	r3, 80077ce <_vfiprintf_r+0x1d6>
 8007786:	9b03      	ldr	r3, [sp, #12]
 8007788:	3307      	adds	r3, #7
 800778a:	f023 0307 	bic.w	r3, r3, #7
 800778e:	3308      	adds	r3, #8
 8007790:	9303      	str	r3, [sp, #12]
 8007792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007794:	443b      	add	r3, r7
 8007796:	9309      	str	r3, [sp, #36]	@ 0x24
 8007798:	e76a      	b.n	8007670 <_vfiprintf_r+0x78>
 800779a:	fb0c 3202 	mla	r2, ip, r2, r3
 800779e:	460c      	mov	r4, r1
 80077a0:	2001      	movs	r0, #1
 80077a2:	e7a8      	b.n	80076f6 <_vfiprintf_r+0xfe>
 80077a4:	2300      	movs	r3, #0
 80077a6:	3401      	adds	r4, #1
 80077a8:	9305      	str	r3, [sp, #20]
 80077aa:	4619      	mov	r1, r3
 80077ac:	f04f 0c0a 	mov.w	ip, #10
 80077b0:	4620      	mov	r0, r4
 80077b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077b6:	3a30      	subs	r2, #48	@ 0x30
 80077b8:	2a09      	cmp	r2, #9
 80077ba:	d903      	bls.n	80077c4 <_vfiprintf_r+0x1cc>
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0c6      	beq.n	800774e <_vfiprintf_r+0x156>
 80077c0:	9105      	str	r1, [sp, #20]
 80077c2:	e7c4      	b.n	800774e <_vfiprintf_r+0x156>
 80077c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80077c8:	4604      	mov	r4, r0
 80077ca:	2301      	movs	r3, #1
 80077cc:	e7f0      	b.n	80077b0 <_vfiprintf_r+0x1b8>
 80077ce:	ab03      	add	r3, sp, #12
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	462a      	mov	r2, r5
 80077d4:	4b12      	ldr	r3, [pc, #72]	@ (8007820 <_vfiprintf_r+0x228>)
 80077d6:	a904      	add	r1, sp, #16
 80077d8:	4630      	mov	r0, r6
 80077da:	f3af 8000 	nop.w
 80077de:	4607      	mov	r7, r0
 80077e0:	1c78      	adds	r0, r7, #1
 80077e2:	d1d6      	bne.n	8007792 <_vfiprintf_r+0x19a>
 80077e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077e6:	07d9      	lsls	r1, r3, #31
 80077e8:	d405      	bmi.n	80077f6 <_vfiprintf_r+0x1fe>
 80077ea:	89ab      	ldrh	r3, [r5, #12]
 80077ec:	059a      	lsls	r2, r3, #22
 80077ee:	d402      	bmi.n	80077f6 <_vfiprintf_r+0x1fe>
 80077f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077f2:	f7ff fc77 	bl	80070e4 <__retarget_lock_release_recursive>
 80077f6:	89ab      	ldrh	r3, [r5, #12]
 80077f8:	065b      	lsls	r3, r3, #25
 80077fa:	f53f af1f 	bmi.w	800763c <_vfiprintf_r+0x44>
 80077fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007800:	e71e      	b.n	8007640 <_vfiprintf_r+0x48>
 8007802:	ab03      	add	r3, sp, #12
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	462a      	mov	r2, r5
 8007808:	4b05      	ldr	r3, [pc, #20]	@ (8007820 <_vfiprintf_r+0x228>)
 800780a:	a904      	add	r1, sp, #16
 800780c:	4630      	mov	r0, r6
 800780e:	f000 f879 	bl	8007904 <_printf_i>
 8007812:	e7e4      	b.n	80077de <_vfiprintf_r+0x1e6>
 8007814:	080080a0 	.word	0x080080a0
 8007818:	080080aa 	.word	0x080080aa
 800781c:	00000000 	.word	0x00000000
 8007820:	080075d3 	.word	0x080075d3
 8007824:	080080a6 	.word	0x080080a6

08007828 <_printf_common>:
 8007828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800782c:	4616      	mov	r6, r2
 800782e:	4698      	mov	r8, r3
 8007830:	688a      	ldr	r2, [r1, #8]
 8007832:	690b      	ldr	r3, [r1, #16]
 8007834:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007838:	4293      	cmp	r3, r2
 800783a:	bfb8      	it	lt
 800783c:	4613      	movlt	r3, r2
 800783e:	6033      	str	r3, [r6, #0]
 8007840:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007844:	4607      	mov	r7, r0
 8007846:	460c      	mov	r4, r1
 8007848:	b10a      	cbz	r2, 800784e <_printf_common+0x26>
 800784a:	3301      	adds	r3, #1
 800784c:	6033      	str	r3, [r6, #0]
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	0699      	lsls	r1, r3, #26
 8007852:	bf42      	ittt	mi
 8007854:	6833      	ldrmi	r3, [r6, #0]
 8007856:	3302      	addmi	r3, #2
 8007858:	6033      	strmi	r3, [r6, #0]
 800785a:	6825      	ldr	r5, [r4, #0]
 800785c:	f015 0506 	ands.w	r5, r5, #6
 8007860:	d106      	bne.n	8007870 <_printf_common+0x48>
 8007862:	f104 0a19 	add.w	sl, r4, #25
 8007866:	68e3      	ldr	r3, [r4, #12]
 8007868:	6832      	ldr	r2, [r6, #0]
 800786a:	1a9b      	subs	r3, r3, r2
 800786c:	42ab      	cmp	r3, r5
 800786e:	dc26      	bgt.n	80078be <_printf_common+0x96>
 8007870:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007874:	6822      	ldr	r2, [r4, #0]
 8007876:	3b00      	subs	r3, #0
 8007878:	bf18      	it	ne
 800787a:	2301      	movne	r3, #1
 800787c:	0692      	lsls	r2, r2, #26
 800787e:	d42b      	bmi.n	80078d8 <_printf_common+0xb0>
 8007880:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007884:	4641      	mov	r1, r8
 8007886:	4638      	mov	r0, r7
 8007888:	47c8      	blx	r9
 800788a:	3001      	adds	r0, #1
 800788c:	d01e      	beq.n	80078cc <_printf_common+0xa4>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	6922      	ldr	r2, [r4, #16]
 8007892:	f003 0306 	and.w	r3, r3, #6
 8007896:	2b04      	cmp	r3, #4
 8007898:	bf02      	ittt	eq
 800789a:	68e5      	ldreq	r5, [r4, #12]
 800789c:	6833      	ldreq	r3, [r6, #0]
 800789e:	1aed      	subeq	r5, r5, r3
 80078a0:	68a3      	ldr	r3, [r4, #8]
 80078a2:	bf0c      	ite	eq
 80078a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078a8:	2500      	movne	r5, #0
 80078aa:	4293      	cmp	r3, r2
 80078ac:	bfc4      	itt	gt
 80078ae:	1a9b      	subgt	r3, r3, r2
 80078b0:	18ed      	addgt	r5, r5, r3
 80078b2:	2600      	movs	r6, #0
 80078b4:	341a      	adds	r4, #26
 80078b6:	42b5      	cmp	r5, r6
 80078b8:	d11a      	bne.n	80078f0 <_printf_common+0xc8>
 80078ba:	2000      	movs	r0, #0
 80078bc:	e008      	b.n	80078d0 <_printf_common+0xa8>
 80078be:	2301      	movs	r3, #1
 80078c0:	4652      	mov	r2, sl
 80078c2:	4641      	mov	r1, r8
 80078c4:	4638      	mov	r0, r7
 80078c6:	47c8      	blx	r9
 80078c8:	3001      	adds	r0, #1
 80078ca:	d103      	bne.n	80078d4 <_printf_common+0xac>
 80078cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d4:	3501      	adds	r5, #1
 80078d6:	e7c6      	b.n	8007866 <_printf_common+0x3e>
 80078d8:	18e1      	adds	r1, r4, r3
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	2030      	movs	r0, #48	@ 0x30
 80078de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078e2:	4422      	add	r2, r4
 80078e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078ec:	3302      	adds	r3, #2
 80078ee:	e7c7      	b.n	8007880 <_printf_common+0x58>
 80078f0:	2301      	movs	r3, #1
 80078f2:	4622      	mov	r2, r4
 80078f4:	4641      	mov	r1, r8
 80078f6:	4638      	mov	r0, r7
 80078f8:	47c8      	blx	r9
 80078fa:	3001      	adds	r0, #1
 80078fc:	d0e6      	beq.n	80078cc <_printf_common+0xa4>
 80078fe:	3601      	adds	r6, #1
 8007900:	e7d9      	b.n	80078b6 <_printf_common+0x8e>
	...

08007904 <_printf_i>:
 8007904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007908:	7e0f      	ldrb	r7, [r1, #24]
 800790a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800790c:	2f78      	cmp	r7, #120	@ 0x78
 800790e:	4691      	mov	r9, r2
 8007910:	4680      	mov	r8, r0
 8007912:	460c      	mov	r4, r1
 8007914:	469a      	mov	sl, r3
 8007916:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800791a:	d807      	bhi.n	800792c <_printf_i+0x28>
 800791c:	2f62      	cmp	r7, #98	@ 0x62
 800791e:	d80a      	bhi.n	8007936 <_printf_i+0x32>
 8007920:	2f00      	cmp	r7, #0
 8007922:	f000 80d2 	beq.w	8007aca <_printf_i+0x1c6>
 8007926:	2f58      	cmp	r7, #88	@ 0x58
 8007928:	f000 80b9 	beq.w	8007a9e <_printf_i+0x19a>
 800792c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007930:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007934:	e03a      	b.n	80079ac <_printf_i+0xa8>
 8007936:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800793a:	2b15      	cmp	r3, #21
 800793c:	d8f6      	bhi.n	800792c <_printf_i+0x28>
 800793e:	a101      	add	r1, pc, #4	@ (adr r1, 8007944 <_printf_i+0x40>)
 8007940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007944:	0800799d 	.word	0x0800799d
 8007948:	080079b1 	.word	0x080079b1
 800794c:	0800792d 	.word	0x0800792d
 8007950:	0800792d 	.word	0x0800792d
 8007954:	0800792d 	.word	0x0800792d
 8007958:	0800792d 	.word	0x0800792d
 800795c:	080079b1 	.word	0x080079b1
 8007960:	0800792d 	.word	0x0800792d
 8007964:	0800792d 	.word	0x0800792d
 8007968:	0800792d 	.word	0x0800792d
 800796c:	0800792d 	.word	0x0800792d
 8007970:	08007ab1 	.word	0x08007ab1
 8007974:	080079db 	.word	0x080079db
 8007978:	08007a6b 	.word	0x08007a6b
 800797c:	0800792d 	.word	0x0800792d
 8007980:	0800792d 	.word	0x0800792d
 8007984:	08007ad3 	.word	0x08007ad3
 8007988:	0800792d 	.word	0x0800792d
 800798c:	080079db 	.word	0x080079db
 8007990:	0800792d 	.word	0x0800792d
 8007994:	0800792d 	.word	0x0800792d
 8007998:	08007a73 	.word	0x08007a73
 800799c:	6833      	ldr	r3, [r6, #0]
 800799e:	1d1a      	adds	r2, r3, #4
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6032      	str	r2, [r6, #0]
 80079a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079ac:	2301      	movs	r3, #1
 80079ae:	e09d      	b.n	8007aec <_printf_i+0x1e8>
 80079b0:	6833      	ldr	r3, [r6, #0]
 80079b2:	6820      	ldr	r0, [r4, #0]
 80079b4:	1d19      	adds	r1, r3, #4
 80079b6:	6031      	str	r1, [r6, #0]
 80079b8:	0606      	lsls	r6, r0, #24
 80079ba:	d501      	bpl.n	80079c0 <_printf_i+0xbc>
 80079bc:	681d      	ldr	r5, [r3, #0]
 80079be:	e003      	b.n	80079c8 <_printf_i+0xc4>
 80079c0:	0645      	lsls	r5, r0, #25
 80079c2:	d5fb      	bpl.n	80079bc <_printf_i+0xb8>
 80079c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079c8:	2d00      	cmp	r5, #0
 80079ca:	da03      	bge.n	80079d4 <_printf_i+0xd0>
 80079cc:	232d      	movs	r3, #45	@ 0x2d
 80079ce:	426d      	negs	r5, r5
 80079d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079d4:	4859      	ldr	r0, [pc, #356]	@ (8007b3c <_printf_i+0x238>)
 80079d6:	230a      	movs	r3, #10
 80079d8:	e011      	b.n	80079fe <_printf_i+0xfa>
 80079da:	6821      	ldr	r1, [r4, #0]
 80079dc:	6833      	ldr	r3, [r6, #0]
 80079de:	0608      	lsls	r0, r1, #24
 80079e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80079e4:	d402      	bmi.n	80079ec <_printf_i+0xe8>
 80079e6:	0649      	lsls	r1, r1, #25
 80079e8:	bf48      	it	mi
 80079ea:	b2ad      	uxthmi	r5, r5
 80079ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80079ee:	4853      	ldr	r0, [pc, #332]	@ (8007b3c <_printf_i+0x238>)
 80079f0:	6033      	str	r3, [r6, #0]
 80079f2:	bf14      	ite	ne
 80079f4:	230a      	movne	r3, #10
 80079f6:	2308      	moveq	r3, #8
 80079f8:	2100      	movs	r1, #0
 80079fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079fe:	6866      	ldr	r6, [r4, #4]
 8007a00:	60a6      	str	r6, [r4, #8]
 8007a02:	2e00      	cmp	r6, #0
 8007a04:	bfa2      	ittt	ge
 8007a06:	6821      	ldrge	r1, [r4, #0]
 8007a08:	f021 0104 	bicge.w	r1, r1, #4
 8007a0c:	6021      	strge	r1, [r4, #0]
 8007a0e:	b90d      	cbnz	r5, 8007a14 <_printf_i+0x110>
 8007a10:	2e00      	cmp	r6, #0
 8007a12:	d04b      	beq.n	8007aac <_printf_i+0x1a8>
 8007a14:	4616      	mov	r6, r2
 8007a16:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a1a:	fb03 5711 	mls	r7, r3, r1, r5
 8007a1e:	5dc7      	ldrb	r7, [r0, r7]
 8007a20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a24:	462f      	mov	r7, r5
 8007a26:	42bb      	cmp	r3, r7
 8007a28:	460d      	mov	r5, r1
 8007a2a:	d9f4      	bls.n	8007a16 <_printf_i+0x112>
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d10b      	bne.n	8007a48 <_printf_i+0x144>
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	07df      	lsls	r7, r3, #31
 8007a34:	d508      	bpl.n	8007a48 <_printf_i+0x144>
 8007a36:	6923      	ldr	r3, [r4, #16]
 8007a38:	6861      	ldr	r1, [r4, #4]
 8007a3a:	4299      	cmp	r1, r3
 8007a3c:	bfde      	ittt	le
 8007a3e:	2330      	movle	r3, #48	@ 0x30
 8007a40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a44:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007a48:	1b92      	subs	r2, r2, r6
 8007a4a:	6122      	str	r2, [r4, #16]
 8007a4c:	f8cd a000 	str.w	sl, [sp]
 8007a50:	464b      	mov	r3, r9
 8007a52:	aa03      	add	r2, sp, #12
 8007a54:	4621      	mov	r1, r4
 8007a56:	4640      	mov	r0, r8
 8007a58:	f7ff fee6 	bl	8007828 <_printf_common>
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d14a      	bne.n	8007af6 <_printf_i+0x1f2>
 8007a60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a64:	b004      	add	sp, #16
 8007a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	f043 0320 	orr.w	r3, r3, #32
 8007a70:	6023      	str	r3, [r4, #0]
 8007a72:	4833      	ldr	r0, [pc, #204]	@ (8007b40 <_printf_i+0x23c>)
 8007a74:	2778      	movs	r7, #120	@ 0x78
 8007a76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	6831      	ldr	r1, [r6, #0]
 8007a7e:	061f      	lsls	r7, r3, #24
 8007a80:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a84:	d402      	bmi.n	8007a8c <_printf_i+0x188>
 8007a86:	065f      	lsls	r7, r3, #25
 8007a88:	bf48      	it	mi
 8007a8a:	b2ad      	uxthmi	r5, r5
 8007a8c:	6031      	str	r1, [r6, #0]
 8007a8e:	07d9      	lsls	r1, r3, #31
 8007a90:	bf44      	itt	mi
 8007a92:	f043 0320 	orrmi.w	r3, r3, #32
 8007a96:	6023      	strmi	r3, [r4, #0]
 8007a98:	b11d      	cbz	r5, 8007aa2 <_printf_i+0x19e>
 8007a9a:	2310      	movs	r3, #16
 8007a9c:	e7ac      	b.n	80079f8 <_printf_i+0xf4>
 8007a9e:	4827      	ldr	r0, [pc, #156]	@ (8007b3c <_printf_i+0x238>)
 8007aa0:	e7e9      	b.n	8007a76 <_printf_i+0x172>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	f023 0320 	bic.w	r3, r3, #32
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	e7f6      	b.n	8007a9a <_printf_i+0x196>
 8007aac:	4616      	mov	r6, r2
 8007aae:	e7bd      	b.n	8007a2c <_printf_i+0x128>
 8007ab0:	6833      	ldr	r3, [r6, #0]
 8007ab2:	6825      	ldr	r5, [r4, #0]
 8007ab4:	6961      	ldr	r1, [r4, #20]
 8007ab6:	1d18      	adds	r0, r3, #4
 8007ab8:	6030      	str	r0, [r6, #0]
 8007aba:	062e      	lsls	r6, r5, #24
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	d501      	bpl.n	8007ac4 <_printf_i+0x1c0>
 8007ac0:	6019      	str	r1, [r3, #0]
 8007ac2:	e002      	b.n	8007aca <_printf_i+0x1c6>
 8007ac4:	0668      	lsls	r0, r5, #25
 8007ac6:	d5fb      	bpl.n	8007ac0 <_printf_i+0x1bc>
 8007ac8:	8019      	strh	r1, [r3, #0]
 8007aca:	2300      	movs	r3, #0
 8007acc:	6123      	str	r3, [r4, #16]
 8007ace:	4616      	mov	r6, r2
 8007ad0:	e7bc      	b.n	8007a4c <_printf_i+0x148>
 8007ad2:	6833      	ldr	r3, [r6, #0]
 8007ad4:	1d1a      	adds	r2, r3, #4
 8007ad6:	6032      	str	r2, [r6, #0]
 8007ad8:	681e      	ldr	r6, [r3, #0]
 8007ada:	6862      	ldr	r2, [r4, #4]
 8007adc:	2100      	movs	r1, #0
 8007ade:	4630      	mov	r0, r6
 8007ae0:	f7f8 fb96 	bl	8000210 <memchr>
 8007ae4:	b108      	cbz	r0, 8007aea <_printf_i+0x1e6>
 8007ae6:	1b80      	subs	r0, r0, r6
 8007ae8:	6060      	str	r0, [r4, #4]
 8007aea:	6863      	ldr	r3, [r4, #4]
 8007aec:	6123      	str	r3, [r4, #16]
 8007aee:	2300      	movs	r3, #0
 8007af0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007af4:	e7aa      	b.n	8007a4c <_printf_i+0x148>
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	4632      	mov	r2, r6
 8007afa:	4649      	mov	r1, r9
 8007afc:	4640      	mov	r0, r8
 8007afe:	47d0      	blx	sl
 8007b00:	3001      	adds	r0, #1
 8007b02:	d0ad      	beq.n	8007a60 <_printf_i+0x15c>
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	079b      	lsls	r3, r3, #30
 8007b08:	d413      	bmi.n	8007b32 <_printf_i+0x22e>
 8007b0a:	68e0      	ldr	r0, [r4, #12]
 8007b0c:	9b03      	ldr	r3, [sp, #12]
 8007b0e:	4298      	cmp	r0, r3
 8007b10:	bfb8      	it	lt
 8007b12:	4618      	movlt	r0, r3
 8007b14:	e7a6      	b.n	8007a64 <_printf_i+0x160>
 8007b16:	2301      	movs	r3, #1
 8007b18:	4632      	mov	r2, r6
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	47d0      	blx	sl
 8007b20:	3001      	adds	r0, #1
 8007b22:	d09d      	beq.n	8007a60 <_printf_i+0x15c>
 8007b24:	3501      	adds	r5, #1
 8007b26:	68e3      	ldr	r3, [r4, #12]
 8007b28:	9903      	ldr	r1, [sp, #12]
 8007b2a:	1a5b      	subs	r3, r3, r1
 8007b2c:	42ab      	cmp	r3, r5
 8007b2e:	dcf2      	bgt.n	8007b16 <_printf_i+0x212>
 8007b30:	e7eb      	b.n	8007b0a <_printf_i+0x206>
 8007b32:	2500      	movs	r5, #0
 8007b34:	f104 0619 	add.w	r6, r4, #25
 8007b38:	e7f5      	b.n	8007b26 <_printf_i+0x222>
 8007b3a:	bf00      	nop
 8007b3c:	080080b1 	.word	0x080080b1
 8007b40:	080080c2 	.word	0x080080c2

08007b44 <__sflush_r>:
 8007b44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4c:	0716      	lsls	r6, r2, #28
 8007b4e:	4605      	mov	r5, r0
 8007b50:	460c      	mov	r4, r1
 8007b52:	d454      	bmi.n	8007bfe <__sflush_r+0xba>
 8007b54:	684b      	ldr	r3, [r1, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	dc02      	bgt.n	8007b60 <__sflush_r+0x1c>
 8007b5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	dd48      	ble.n	8007bf2 <__sflush_r+0xae>
 8007b60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b62:	2e00      	cmp	r6, #0
 8007b64:	d045      	beq.n	8007bf2 <__sflush_r+0xae>
 8007b66:	2300      	movs	r3, #0
 8007b68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b6c:	682f      	ldr	r7, [r5, #0]
 8007b6e:	6a21      	ldr	r1, [r4, #32]
 8007b70:	602b      	str	r3, [r5, #0]
 8007b72:	d030      	beq.n	8007bd6 <__sflush_r+0x92>
 8007b74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b76:	89a3      	ldrh	r3, [r4, #12]
 8007b78:	0759      	lsls	r1, r3, #29
 8007b7a:	d505      	bpl.n	8007b88 <__sflush_r+0x44>
 8007b7c:	6863      	ldr	r3, [r4, #4]
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b82:	b10b      	cbz	r3, 8007b88 <__sflush_r+0x44>
 8007b84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b86:	1ad2      	subs	r2, r2, r3
 8007b88:	2300      	movs	r3, #0
 8007b8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b8c:	6a21      	ldr	r1, [r4, #32]
 8007b8e:	4628      	mov	r0, r5
 8007b90:	47b0      	blx	r6
 8007b92:	1c43      	adds	r3, r0, #1
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	d106      	bne.n	8007ba6 <__sflush_r+0x62>
 8007b98:	6829      	ldr	r1, [r5, #0]
 8007b9a:	291d      	cmp	r1, #29
 8007b9c:	d82b      	bhi.n	8007bf6 <__sflush_r+0xb2>
 8007b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8007c48 <__sflush_r+0x104>)
 8007ba0:	410a      	asrs	r2, r1
 8007ba2:	07d6      	lsls	r6, r2, #31
 8007ba4:	d427      	bmi.n	8007bf6 <__sflush_r+0xb2>
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	6062      	str	r2, [r4, #4]
 8007baa:	04d9      	lsls	r1, r3, #19
 8007bac:	6922      	ldr	r2, [r4, #16]
 8007bae:	6022      	str	r2, [r4, #0]
 8007bb0:	d504      	bpl.n	8007bbc <__sflush_r+0x78>
 8007bb2:	1c42      	adds	r2, r0, #1
 8007bb4:	d101      	bne.n	8007bba <__sflush_r+0x76>
 8007bb6:	682b      	ldr	r3, [r5, #0]
 8007bb8:	b903      	cbnz	r3, 8007bbc <__sflush_r+0x78>
 8007bba:	6560      	str	r0, [r4, #84]	@ 0x54
 8007bbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bbe:	602f      	str	r7, [r5, #0]
 8007bc0:	b1b9      	cbz	r1, 8007bf2 <__sflush_r+0xae>
 8007bc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bc6:	4299      	cmp	r1, r3
 8007bc8:	d002      	beq.n	8007bd0 <__sflush_r+0x8c>
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f7ff fa9a 	bl	8007104 <_free_r>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bd4:	e00d      	b.n	8007bf2 <__sflush_r+0xae>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	4628      	mov	r0, r5
 8007bda:	47b0      	blx	r6
 8007bdc:	4602      	mov	r2, r0
 8007bde:	1c50      	adds	r0, r2, #1
 8007be0:	d1c9      	bne.n	8007b76 <__sflush_r+0x32>
 8007be2:	682b      	ldr	r3, [r5, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0c6      	beq.n	8007b76 <__sflush_r+0x32>
 8007be8:	2b1d      	cmp	r3, #29
 8007bea:	d001      	beq.n	8007bf0 <__sflush_r+0xac>
 8007bec:	2b16      	cmp	r3, #22
 8007bee:	d11e      	bne.n	8007c2e <__sflush_r+0xea>
 8007bf0:	602f      	str	r7, [r5, #0]
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	e022      	b.n	8007c3c <__sflush_r+0xf8>
 8007bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bfa:	b21b      	sxth	r3, r3
 8007bfc:	e01b      	b.n	8007c36 <__sflush_r+0xf2>
 8007bfe:	690f      	ldr	r7, [r1, #16]
 8007c00:	2f00      	cmp	r7, #0
 8007c02:	d0f6      	beq.n	8007bf2 <__sflush_r+0xae>
 8007c04:	0793      	lsls	r3, r2, #30
 8007c06:	680e      	ldr	r6, [r1, #0]
 8007c08:	bf08      	it	eq
 8007c0a:	694b      	ldreq	r3, [r1, #20]
 8007c0c:	600f      	str	r7, [r1, #0]
 8007c0e:	bf18      	it	ne
 8007c10:	2300      	movne	r3, #0
 8007c12:	eba6 0807 	sub.w	r8, r6, r7
 8007c16:	608b      	str	r3, [r1, #8]
 8007c18:	f1b8 0f00 	cmp.w	r8, #0
 8007c1c:	dde9      	ble.n	8007bf2 <__sflush_r+0xae>
 8007c1e:	6a21      	ldr	r1, [r4, #32]
 8007c20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c22:	4643      	mov	r3, r8
 8007c24:	463a      	mov	r2, r7
 8007c26:	4628      	mov	r0, r5
 8007c28:	47b0      	blx	r6
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	dc08      	bgt.n	8007c40 <__sflush_r+0xfc>
 8007c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c36:	81a3      	strh	r3, [r4, #12]
 8007c38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c40:	4407      	add	r7, r0
 8007c42:	eba8 0800 	sub.w	r8, r8, r0
 8007c46:	e7e7      	b.n	8007c18 <__sflush_r+0xd4>
 8007c48:	dfbffffe 	.word	0xdfbffffe

08007c4c <_fflush_r>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	690b      	ldr	r3, [r1, #16]
 8007c50:	4605      	mov	r5, r0
 8007c52:	460c      	mov	r4, r1
 8007c54:	b913      	cbnz	r3, 8007c5c <_fflush_r+0x10>
 8007c56:	2500      	movs	r5, #0
 8007c58:	4628      	mov	r0, r5
 8007c5a:	bd38      	pop	{r3, r4, r5, pc}
 8007c5c:	b118      	cbz	r0, 8007c66 <_fflush_r+0x1a>
 8007c5e:	6a03      	ldr	r3, [r0, #32]
 8007c60:	b90b      	cbnz	r3, 8007c66 <_fflush_r+0x1a>
 8007c62:	f7ff f911 	bl	8006e88 <__sinit>
 8007c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0f3      	beq.n	8007c56 <_fflush_r+0xa>
 8007c6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c70:	07d0      	lsls	r0, r2, #31
 8007c72:	d404      	bmi.n	8007c7e <_fflush_r+0x32>
 8007c74:	0599      	lsls	r1, r3, #22
 8007c76:	d402      	bmi.n	8007c7e <_fflush_r+0x32>
 8007c78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c7a:	f7ff fa32 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8007c7e:	4628      	mov	r0, r5
 8007c80:	4621      	mov	r1, r4
 8007c82:	f7ff ff5f 	bl	8007b44 <__sflush_r>
 8007c86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c88:	07da      	lsls	r2, r3, #31
 8007c8a:	4605      	mov	r5, r0
 8007c8c:	d4e4      	bmi.n	8007c58 <_fflush_r+0xc>
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	059b      	lsls	r3, r3, #22
 8007c92:	d4e1      	bmi.n	8007c58 <_fflush_r+0xc>
 8007c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c96:	f7ff fa25 	bl	80070e4 <__retarget_lock_release_recursive>
 8007c9a:	e7dd      	b.n	8007c58 <_fflush_r+0xc>

08007c9c <_putc_r>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	460d      	mov	r5, r1
 8007ca0:	4614      	mov	r4, r2
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	b118      	cbz	r0, 8007cae <_putc_r+0x12>
 8007ca6:	6a03      	ldr	r3, [r0, #32]
 8007ca8:	b90b      	cbnz	r3, 8007cae <_putc_r+0x12>
 8007caa:	f7ff f8ed 	bl	8006e88 <__sinit>
 8007cae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cb0:	07d8      	lsls	r0, r3, #31
 8007cb2:	d405      	bmi.n	8007cc0 <_putc_r+0x24>
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	0599      	lsls	r1, r3, #22
 8007cb8:	d402      	bmi.n	8007cc0 <_putc_r+0x24>
 8007cba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cbc:	f7ff fa11 	bl	80070e2 <__retarget_lock_acquire_recursive>
 8007cc0:	68a3      	ldr	r3, [r4, #8]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	60a3      	str	r3, [r4, #8]
 8007cc8:	da05      	bge.n	8007cd6 <_putc_r+0x3a>
 8007cca:	69a2      	ldr	r2, [r4, #24]
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	db12      	blt.n	8007cf6 <_putc_r+0x5a>
 8007cd0:	b2eb      	uxtb	r3, r5
 8007cd2:	2b0a      	cmp	r3, #10
 8007cd4:	d00f      	beq.n	8007cf6 <_putc_r+0x5a>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	6022      	str	r2, [r4, #0]
 8007cdc:	701d      	strb	r5, [r3, #0]
 8007cde:	b2ed      	uxtb	r5, r5
 8007ce0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ce2:	07da      	lsls	r2, r3, #31
 8007ce4:	d405      	bmi.n	8007cf2 <_putc_r+0x56>
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	059b      	lsls	r3, r3, #22
 8007cea:	d402      	bmi.n	8007cf2 <_putc_r+0x56>
 8007cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cee:	f7ff f9f9 	bl	80070e4 <__retarget_lock_release_recursive>
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	bd70      	pop	{r4, r5, r6, pc}
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	4622      	mov	r2, r4
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f000 f802 	bl	8007d04 <__swbuf_r>
 8007d00:	4605      	mov	r5, r0
 8007d02:	e7ed      	b.n	8007ce0 <_putc_r+0x44>

08007d04 <__swbuf_r>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	460e      	mov	r6, r1
 8007d08:	4614      	mov	r4, r2
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	b118      	cbz	r0, 8007d16 <__swbuf_r+0x12>
 8007d0e:	6a03      	ldr	r3, [r0, #32]
 8007d10:	b90b      	cbnz	r3, 8007d16 <__swbuf_r+0x12>
 8007d12:	f7ff f8b9 	bl	8006e88 <__sinit>
 8007d16:	69a3      	ldr	r3, [r4, #24]
 8007d18:	60a3      	str	r3, [r4, #8]
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	071a      	lsls	r2, r3, #28
 8007d1e:	d501      	bpl.n	8007d24 <__swbuf_r+0x20>
 8007d20:	6923      	ldr	r3, [r4, #16]
 8007d22:	b943      	cbnz	r3, 8007d36 <__swbuf_r+0x32>
 8007d24:	4621      	mov	r1, r4
 8007d26:	4628      	mov	r0, r5
 8007d28:	f000 f82a 	bl	8007d80 <__swsetup_r>
 8007d2c:	b118      	cbz	r0, 8007d36 <__swbuf_r+0x32>
 8007d2e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007d32:	4638      	mov	r0, r7
 8007d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	6922      	ldr	r2, [r4, #16]
 8007d3a:	1a98      	subs	r0, r3, r2
 8007d3c:	6963      	ldr	r3, [r4, #20]
 8007d3e:	b2f6      	uxtb	r6, r6
 8007d40:	4283      	cmp	r3, r0
 8007d42:	4637      	mov	r7, r6
 8007d44:	dc05      	bgt.n	8007d52 <__swbuf_r+0x4e>
 8007d46:	4621      	mov	r1, r4
 8007d48:	4628      	mov	r0, r5
 8007d4a:	f7ff ff7f 	bl	8007c4c <_fflush_r>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d1ed      	bne.n	8007d2e <__swbuf_r+0x2a>
 8007d52:	68a3      	ldr	r3, [r4, #8]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	60a3      	str	r3, [r4, #8]
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	6022      	str	r2, [r4, #0]
 8007d5e:	701e      	strb	r6, [r3, #0]
 8007d60:	6962      	ldr	r2, [r4, #20]
 8007d62:	1c43      	adds	r3, r0, #1
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d004      	beq.n	8007d72 <__swbuf_r+0x6e>
 8007d68:	89a3      	ldrh	r3, [r4, #12]
 8007d6a:	07db      	lsls	r3, r3, #31
 8007d6c:	d5e1      	bpl.n	8007d32 <__swbuf_r+0x2e>
 8007d6e:	2e0a      	cmp	r6, #10
 8007d70:	d1df      	bne.n	8007d32 <__swbuf_r+0x2e>
 8007d72:	4621      	mov	r1, r4
 8007d74:	4628      	mov	r0, r5
 8007d76:	f7ff ff69 	bl	8007c4c <_fflush_r>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d0d9      	beq.n	8007d32 <__swbuf_r+0x2e>
 8007d7e:	e7d6      	b.n	8007d2e <__swbuf_r+0x2a>

08007d80 <__swsetup_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4b29      	ldr	r3, [pc, #164]	@ (8007e28 <__swsetup_r+0xa8>)
 8007d84:	4605      	mov	r5, r0
 8007d86:	6818      	ldr	r0, [r3, #0]
 8007d88:	460c      	mov	r4, r1
 8007d8a:	b118      	cbz	r0, 8007d94 <__swsetup_r+0x14>
 8007d8c:	6a03      	ldr	r3, [r0, #32]
 8007d8e:	b90b      	cbnz	r3, 8007d94 <__swsetup_r+0x14>
 8007d90:	f7ff f87a 	bl	8006e88 <__sinit>
 8007d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d98:	0719      	lsls	r1, r3, #28
 8007d9a:	d422      	bmi.n	8007de2 <__swsetup_r+0x62>
 8007d9c:	06da      	lsls	r2, r3, #27
 8007d9e:	d407      	bmi.n	8007db0 <__swsetup_r+0x30>
 8007da0:	2209      	movs	r2, #9
 8007da2:	602a      	str	r2, [r5, #0]
 8007da4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007da8:	81a3      	strh	r3, [r4, #12]
 8007daa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dae:	e033      	b.n	8007e18 <__swsetup_r+0x98>
 8007db0:	0758      	lsls	r0, r3, #29
 8007db2:	d512      	bpl.n	8007dda <__swsetup_r+0x5a>
 8007db4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007db6:	b141      	cbz	r1, 8007dca <__swsetup_r+0x4a>
 8007db8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007dbc:	4299      	cmp	r1, r3
 8007dbe:	d002      	beq.n	8007dc6 <__swsetup_r+0x46>
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	f7ff f99f 	bl	8007104 <_free_r>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007dd0:	81a3      	strh	r3, [r4, #12]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	6063      	str	r3, [r4, #4]
 8007dd6:	6923      	ldr	r3, [r4, #16]
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	f043 0308 	orr.w	r3, r3, #8
 8007de0:	81a3      	strh	r3, [r4, #12]
 8007de2:	6923      	ldr	r3, [r4, #16]
 8007de4:	b94b      	cbnz	r3, 8007dfa <__swsetup_r+0x7a>
 8007de6:	89a3      	ldrh	r3, [r4, #12]
 8007de8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007df0:	d003      	beq.n	8007dfa <__swsetup_r+0x7a>
 8007df2:	4621      	mov	r1, r4
 8007df4:	4628      	mov	r0, r5
 8007df6:	f000 f897 	bl	8007f28 <__smakebuf_r>
 8007dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dfe:	f013 0201 	ands.w	r2, r3, #1
 8007e02:	d00a      	beq.n	8007e1a <__swsetup_r+0x9a>
 8007e04:	2200      	movs	r2, #0
 8007e06:	60a2      	str	r2, [r4, #8]
 8007e08:	6962      	ldr	r2, [r4, #20]
 8007e0a:	4252      	negs	r2, r2
 8007e0c:	61a2      	str	r2, [r4, #24]
 8007e0e:	6922      	ldr	r2, [r4, #16]
 8007e10:	b942      	cbnz	r2, 8007e24 <__swsetup_r+0xa4>
 8007e12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e16:	d1c5      	bne.n	8007da4 <__swsetup_r+0x24>
 8007e18:	bd38      	pop	{r3, r4, r5, pc}
 8007e1a:	0799      	lsls	r1, r3, #30
 8007e1c:	bf58      	it	pl
 8007e1e:	6962      	ldrpl	r2, [r4, #20]
 8007e20:	60a2      	str	r2, [r4, #8]
 8007e22:	e7f4      	b.n	8007e0e <__swsetup_r+0x8e>
 8007e24:	2000      	movs	r0, #0
 8007e26:	e7f7      	b.n	8007e18 <__swsetup_r+0x98>
 8007e28:	20000054 	.word	0x20000054

08007e2c <memmove>:
 8007e2c:	4288      	cmp	r0, r1
 8007e2e:	b510      	push	{r4, lr}
 8007e30:	eb01 0402 	add.w	r4, r1, r2
 8007e34:	d902      	bls.n	8007e3c <memmove+0x10>
 8007e36:	4284      	cmp	r4, r0
 8007e38:	4623      	mov	r3, r4
 8007e3a:	d807      	bhi.n	8007e4c <memmove+0x20>
 8007e3c:	1e43      	subs	r3, r0, #1
 8007e3e:	42a1      	cmp	r1, r4
 8007e40:	d008      	beq.n	8007e54 <memmove+0x28>
 8007e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e4a:	e7f8      	b.n	8007e3e <memmove+0x12>
 8007e4c:	4402      	add	r2, r0
 8007e4e:	4601      	mov	r1, r0
 8007e50:	428a      	cmp	r2, r1
 8007e52:	d100      	bne.n	8007e56 <memmove+0x2a>
 8007e54:	bd10      	pop	{r4, pc}
 8007e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e5e:	e7f7      	b.n	8007e50 <memmove+0x24>

08007e60 <_sbrk_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4d06      	ldr	r5, [pc, #24]	@ (8007e7c <_sbrk_r+0x1c>)
 8007e64:	2300      	movs	r3, #0
 8007e66:	4604      	mov	r4, r0
 8007e68:	4608      	mov	r0, r1
 8007e6a:	602b      	str	r3, [r5, #0]
 8007e6c:	f7fb fe9a 	bl	8003ba4 <_sbrk>
 8007e70:	1c43      	adds	r3, r0, #1
 8007e72:	d102      	bne.n	8007e7a <_sbrk_r+0x1a>
 8007e74:	682b      	ldr	r3, [r5, #0]
 8007e76:	b103      	cbz	r3, 8007e7a <_sbrk_r+0x1a>
 8007e78:	6023      	str	r3, [r4, #0]
 8007e7a:	bd38      	pop	{r3, r4, r5, pc}
 8007e7c:	20002e24 	.word	0x20002e24

08007e80 <_realloc_r>:
 8007e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e84:	4680      	mov	r8, r0
 8007e86:	4615      	mov	r5, r2
 8007e88:	460c      	mov	r4, r1
 8007e8a:	b921      	cbnz	r1, 8007e96 <_realloc_r+0x16>
 8007e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e90:	4611      	mov	r1, r2
 8007e92:	f7ff b9a3 	b.w	80071dc <_malloc_r>
 8007e96:	b92a      	cbnz	r2, 8007ea4 <_realloc_r+0x24>
 8007e98:	f7ff f934 	bl	8007104 <_free_r>
 8007e9c:	2400      	movs	r4, #0
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea4:	f000 f89e 	bl	8007fe4 <_malloc_usable_size_r>
 8007ea8:	4285      	cmp	r5, r0
 8007eaa:	4606      	mov	r6, r0
 8007eac:	d802      	bhi.n	8007eb4 <_realloc_r+0x34>
 8007eae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007eb2:	d8f4      	bhi.n	8007e9e <_realloc_r+0x1e>
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	4640      	mov	r0, r8
 8007eb8:	f7ff f990 	bl	80071dc <_malloc_r>
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d0ec      	beq.n	8007e9c <_realloc_r+0x1c>
 8007ec2:	42b5      	cmp	r5, r6
 8007ec4:	462a      	mov	r2, r5
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	bf28      	it	cs
 8007eca:	4632      	movcs	r2, r6
 8007ecc:	f7ff f90b 	bl	80070e6 <memcpy>
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	f7ff f916 	bl	8007104 <_free_r>
 8007ed8:	463c      	mov	r4, r7
 8007eda:	e7e0      	b.n	8007e9e <_realloc_r+0x1e>

08007edc <__swhatbuf_r>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	460c      	mov	r4, r1
 8007ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee4:	2900      	cmp	r1, #0
 8007ee6:	b096      	sub	sp, #88	@ 0x58
 8007ee8:	4615      	mov	r5, r2
 8007eea:	461e      	mov	r6, r3
 8007eec:	da0d      	bge.n	8007f0a <__swhatbuf_r+0x2e>
 8007eee:	89a3      	ldrh	r3, [r4, #12]
 8007ef0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ef4:	f04f 0100 	mov.w	r1, #0
 8007ef8:	bf14      	ite	ne
 8007efa:	2340      	movne	r3, #64	@ 0x40
 8007efc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f00:	2000      	movs	r0, #0
 8007f02:	6031      	str	r1, [r6, #0]
 8007f04:	602b      	str	r3, [r5, #0]
 8007f06:	b016      	add	sp, #88	@ 0x58
 8007f08:	bd70      	pop	{r4, r5, r6, pc}
 8007f0a:	466a      	mov	r2, sp
 8007f0c:	f000 f848 	bl	8007fa0 <_fstat_r>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	dbec      	blt.n	8007eee <__swhatbuf_r+0x12>
 8007f14:	9901      	ldr	r1, [sp, #4]
 8007f16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f1e:	4259      	negs	r1, r3
 8007f20:	4159      	adcs	r1, r3
 8007f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f26:	e7eb      	b.n	8007f00 <__swhatbuf_r+0x24>

08007f28 <__smakebuf_r>:
 8007f28:	898b      	ldrh	r3, [r1, #12]
 8007f2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f2c:	079d      	lsls	r5, r3, #30
 8007f2e:	4606      	mov	r6, r0
 8007f30:	460c      	mov	r4, r1
 8007f32:	d507      	bpl.n	8007f44 <__smakebuf_r+0x1c>
 8007f34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	6123      	str	r3, [r4, #16]
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	6163      	str	r3, [r4, #20]
 8007f40:	b003      	add	sp, #12
 8007f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f44:	ab01      	add	r3, sp, #4
 8007f46:	466a      	mov	r2, sp
 8007f48:	f7ff ffc8 	bl	8007edc <__swhatbuf_r>
 8007f4c:	9f00      	ldr	r7, [sp, #0]
 8007f4e:	4605      	mov	r5, r0
 8007f50:	4639      	mov	r1, r7
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7ff f942 	bl	80071dc <_malloc_r>
 8007f58:	b948      	cbnz	r0, 8007f6e <__smakebuf_r+0x46>
 8007f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f5e:	059a      	lsls	r2, r3, #22
 8007f60:	d4ee      	bmi.n	8007f40 <__smakebuf_r+0x18>
 8007f62:	f023 0303 	bic.w	r3, r3, #3
 8007f66:	f043 0302 	orr.w	r3, r3, #2
 8007f6a:	81a3      	strh	r3, [r4, #12]
 8007f6c:	e7e2      	b.n	8007f34 <__smakebuf_r+0xc>
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	6020      	str	r0, [r4, #0]
 8007f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f76:	81a3      	strh	r3, [r4, #12]
 8007f78:	9b01      	ldr	r3, [sp, #4]
 8007f7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f7e:	b15b      	cbz	r3, 8007f98 <__smakebuf_r+0x70>
 8007f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f84:	4630      	mov	r0, r6
 8007f86:	f000 f81d 	bl	8007fc4 <_isatty_r>
 8007f8a:	b128      	cbz	r0, 8007f98 <__smakebuf_r+0x70>
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	f023 0303 	bic.w	r3, r3, #3
 8007f92:	f043 0301 	orr.w	r3, r3, #1
 8007f96:	81a3      	strh	r3, [r4, #12]
 8007f98:	89a3      	ldrh	r3, [r4, #12]
 8007f9a:	431d      	orrs	r5, r3
 8007f9c:	81a5      	strh	r5, [r4, #12]
 8007f9e:	e7cf      	b.n	8007f40 <__smakebuf_r+0x18>

08007fa0 <_fstat_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4d07      	ldr	r5, [pc, #28]	@ (8007fc0 <_fstat_r+0x20>)
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	4608      	mov	r0, r1
 8007faa:	4611      	mov	r1, r2
 8007fac:	602b      	str	r3, [r5, #0]
 8007fae:	f7fb fdd1 	bl	8003b54 <_fstat>
 8007fb2:	1c43      	adds	r3, r0, #1
 8007fb4:	d102      	bne.n	8007fbc <_fstat_r+0x1c>
 8007fb6:	682b      	ldr	r3, [r5, #0]
 8007fb8:	b103      	cbz	r3, 8007fbc <_fstat_r+0x1c>
 8007fba:	6023      	str	r3, [r4, #0]
 8007fbc:	bd38      	pop	{r3, r4, r5, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20002e24 	.word	0x20002e24

08007fc4 <_isatty_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4d06      	ldr	r5, [pc, #24]	@ (8007fe0 <_isatty_r+0x1c>)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4604      	mov	r4, r0
 8007fcc:	4608      	mov	r0, r1
 8007fce:	602b      	str	r3, [r5, #0]
 8007fd0:	f7fb fdd0 	bl	8003b74 <_isatty>
 8007fd4:	1c43      	adds	r3, r0, #1
 8007fd6:	d102      	bne.n	8007fde <_isatty_r+0x1a>
 8007fd8:	682b      	ldr	r3, [r5, #0]
 8007fda:	b103      	cbz	r3, 8007fde <_isatty_r+0x1a>
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	bd38      	pop	{r3, r4, r5, pc}
 8007fe0:	20002e24 	.word	0x20002e24

08007fe4 <_malloc_usable_size_r>:
 8007fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fe8:	1f18      	subs	r0, r3, #4
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	bfbc      	itt	lt
 8007fee:	580b      	ldrlt	r3, [r1, r0]
 8007ff0:	18c0      	addlt	r0, r0, r3
 8007ff2:	4770      	bx	lr

08007ff4 <_init>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	bf00      	nop
 8007ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffa:	bc08      	pop	{r3}
 8007ffc:	469e      	mov	lr, r3
 8007ffe:	4770      	bx	lr

08008000 <_fini>:
 8008000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008002:	bf00      	nop
 8008004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008006:	bc08      	pop	{r3}
 8008008:	469e      	mov	lr, r3
 800800a:	4770      	bx	lr
