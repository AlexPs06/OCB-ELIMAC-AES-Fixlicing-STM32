
OCBRA-TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007338  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08007508  08007508  00017508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075c8  080075c8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075d0  080075d0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075d0  080075d0  000175d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075d4  080075d4  000175d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080075d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  08007670  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  08007710  00020138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00002c74  200001d8  080077b0  000201d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20002e4c  080077b0  00022e4c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 15 .debug_info   000129c9  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000284d  00000000  00000000  00032c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000e38  00000000  00000000  00035468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000aef  00000000  00000000  000362a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00027ccf  00000000  00000000  00036d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00011d82  00000000  00000000  0005ea5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f1abf  00000000  00000000  000707e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003fd8  00000000  00000000  001622a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005e  00000000  00000000  00166278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080074f0 	.word	0x080074f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	080074f0 	.word	0x080074f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ELIMAC>:
void divide_plaintext(unsigned char* plaintext, unsigned char* ptext0,  unsigned char* ptext1,unsigned int plaintext_size);




void ELIMAC(unsigned char* plaintext,  const unsigned int plaintext_size, unsigned char* key1, unsigned char* key2, unsigned char rounds, unsigned char* tag){
 80005ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005b0:	f5ad 7d65 	sub.w	sp, sp, #916	; 0x394
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	f507 7662 	add.w	r6, r7, #904	; 0x388
 80005ba:	f5a6 765d 	sub.w	r6, r6, #884	; 0x374
 80005be:	6030      	str	r0, [r6, #0]
 80005c0:	f507 7062 	add.w	r0, r7, #904	; 0x388
 80005c4:	f5a0 705e 	sub.w	r0, r0, #888	; 0x378
 80005c8:	6001      	str	r1, [r0, #0]
 80005ca:	f507 7162 	add.w	r1, r7, #904	; 0x388
 80005ce:	f5a1 715f 	sub.w	r1, r1, #892	; 0x37c
 80005d2:	600a      	str	r2, [r1, #0]
 80005d4:	f507 7262 	add.w	r2, r7, #904	; 0x388
 80005d8:	f5a2 7260 	sub.w	r2, r2, #896	; 0x380
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	466b      	mov	r3, sp
 80005e0:	461e      	mov	r6, r3

    unsigned char ptext0[plaintext_size];
 80005e2:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80005e6:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 80005f2:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80005f6:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2200      	movs	r2, #0
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	607a      	str	r2, [r7, #4]
 8000602:	f04f 0200 	mov.w	r2, #0
 8000606:	f04f 0300 	mov.w	r3, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	00cb      	lsls	r3, r1, #3
 800060e:	6839      	ldr	r1, [r7, #0]
 8000610:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000614:	6839      	ldr	r1, [r7, #0]
 8000616:	00ca      	lsls	r2, r1, #3
 8000618:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800061c:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2200      	movs	r2, #0
 8000624:	469a      	mov	sl, r3
 8000626:	4693      	mov	fp, r2
 8000628:	f04f 0200 	mov.w	r2, #0
 800062c:	f04f 0300 	mov.w	r3, #0
 8000630:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000634:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800063c:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8000640:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3307      	adds	r3, #7
 8000648:	08db      	lsrs	r3, r3, #3
 800064a:	00db      	lsls	r3, r3, #3
 800064c:	ebad 0d03 	sub.w	sp, sp, r3
 8000650:	ab02      	add	r3, sp, #8
 8000652:	3300      	adds	r3, #0
 8000654:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
    unsigned char ptext1[plaintext_size];
 8000658:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800065c:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3b01      	subs	r3, #1
 8000664:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8000668:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800066c:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2200      	movs	r2, #0
 8000674:	4698      	mov	r8, r3
 8000676:	4691      	mov	r9, r2
 8000678:	f04f 0200 	mov.w	r2, #0
 800067c:	f04f 0300 	mov.w	r3, #0
 8000680:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000684:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000688:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800068c:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8000690:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2200      	movs	r2, #0
 8000698:	461c      	mov	r4, r3
 800069a:	4615      	mov	r5, r2
 800069c:	f04f 0200 	mov.w	r2, #0
 80006a0:	f04f 0300 	mov.w	r3, #0
 80006a4:	00eb      	lsls	r3, r5, #3
 80006a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006aa:	00e2      	lsls	r2, r4, #3
 80006ac:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80006b0:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3307      	adds	r3, #7
 80006b8:	08db      	lsrs	r3, r3, #3
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	ebad 0d03 	sub.w	sp, sp, r3
 80006c0:	ab02      	add	r3, sp, #8
 80006c2:	3300      	adds	r3, #0
 80006c4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c

    unsigned char i_n1[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 80006c8:	4b98      	ldr	r3, [pc, #608]	; (800092c <ELIMAC+0x380>)
 80006ca:	f507 7456 	add.w	r4, r7, #856	; 0x358
 80006ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char i_n2[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 80006d4:	4b95      	ldr	r3, [pc, #596]	; (800092c <ELIMAC+0x380>)
 80006d6:	f507 7452 	add.w	r4, r7, #840	; 0x348
 80006da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char i_n1_t[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 80006e0:	4b92      	ldr	r3, [pc, #584]	; (800092c <ELIMAC+0x380>)
 80006e2:	f507 744e 	add.w	r4, r7, #824	; 0x338
 80006e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char i_n2_t[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 80006ec:	4b8f      	ldr	r3, [pc, #572]	; (800092c <ELIMAC+0x380>)
 80006ee:	f507 744a 	add.w	r4, r7, #808	; 0x328
 80006f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char S1[bit_size];
    unsigned char S2[bit_size];
    
    unsigned int add_nonce_0[4] = {0,0,0,0};
 80006f8:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
    unsigned int add_nonce_1[4] = {1,1,1,1};
 8000706:	4b8a      	ldr	r3, [pc, #552]	; (8000930 <ELIMAC+0x384>)
 8000708:	f507 743a 	add.w	r4, r7, #744	; 0x2e8
 800070c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800070e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned int add_nonce_2[4] = {2,2,2,2};
 8000712:	4b88      	ldr	r3, [pc, #544]	; (8000934 <ELIMAC+0x388>)
 8000714:	f507 7436 	add.w	r4, r7, #728	; 0x2d8
 8000718:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800071a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    uint32_t rkeys_ffs[88];
    uint32_t rkeys_ffs_H[88];

    for (size_t i = 0; i < plaintext_size; i++)
 800071e:	2300      	movs	r3, #0
 8000720:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8000724:	e012      	b.n	800074c <ELIMAC+0x1a0>
    {
        ptext1[i]=0;
 8000726:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 800072a:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800072e:	4413      	add	r3, r2
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
        ptext0[i]=0;
 8000734:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8000738:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800073c:	4413      	add	r3, r2
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < plaintext_size; i++)
 8000742:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8000746:	3301      	adds	r3, #1
 8000748:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800074c:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8000750:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8000754:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	429a      	cmp	r2, r3
 800075c:	d3e3      	bcc.n	8000726 <ELIMAC+0x17a>
    }    

    divide_plaintext(plaintext, ptext0, ptext1, plaintext_size);
 800075e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8000762:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8000766:	f507 7262 	add.w	r2, r7, #904	; 0x388
 800076a:	f5a2 705d 	sub.w	r0, r2, #884	; 0x374
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8000774:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8000778:	6800      	ldr	r0, [r0, #0]
 800077a:	f000 f969 	bl	8000a50 <divide_plaintext>

    for (size_t i = 0; i < bit_size; i++)
 800077e:	2300      	movs	r3, #0
 8000780:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8000784:	e012      	b.n	80007ac <ELIMAC+0x200>
    {
        S1[i]=0;
 8000786:	f507 7246 	add.w	r2, r7, #792	; 0x318
 800078a:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 800078e:	4413      	add	r3, r2
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
        S2[i]=0;
 8000794:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8000798:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 800079c:	4413      	add	r3, r2
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < bit_size; i++)
 80007a2:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 80007a6:	3301      	adds	r3, #1
 80007a8:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 80007ac:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 80007b0:	2b0f      	cmp	r3, #15
 80007b2:	d9e8      	bls.n	8000786 <ELIMAC+0x1da>
    }    

    aes128_keyschedule_ffs(rkeys_ffs_H, key1, key1);
 80007b4:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80007b8:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 80007bc:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80007c0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80007c4:	f107 0018 	add.w	r0, r7, #24
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	6819      	ldr	r1, [r3, #0]
 80007cc:	f002 fab0 	bl	8002d30 <aes128_keyschedule_ffs>
    aes128_keyschedule_ffs(rkeys_ffs, key2, key2);
 80007d0:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80007d4:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80007d8:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80007dc:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80007e0:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 80007e4:	6812      	ldr	r2, [r2, #0]
 80007e6:	6819      	ldr	r1, [r3, #0]
 80007e8:	f002 faa2 	bl	8002d30 <aes128_keyschedule_ffs>

    int block_size = plaintext_size/32;
 80007ec:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80007f0:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	095b      	lsrs	r3, r3, #5
 80007f8:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368

    for (int i = 0; i < block_size; i++){
 80007fc:	2300      	movs	r3, #0
 80007fe:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8000802:	e06f      	b.n	80008e4 <ELIMAC+0x338>

        add_nonce(add_nonce_0, (unsigned int *)i_n1,(unsigned int *)i_n1_t, 4);
 8000804:	f507 724e 	add.w	r2, r7, #824	; 0x338
 8000808:	f507 7156 	add.w	r1, r7, #856	; 0x358
 800080c:	f507 703e 	add.w	r0, r7, #760	; 0x2f8
 8000810:	2304      	movs	r3, #4
 8000812:	f000 f965 	bl	8000ae0 <add_nonce>
        add_nonce(add_nonce_1, (unsigned int *)i_n2,(unsigned int *)i_n2_t, 4);
 8000816:	f507 724a 	add.w	r2, r7, #808	; 0x328
 800081a:	f507 7152 	add.w	r1, r7, #840	; 0x348
 800081e:	f507 703a 	add.w	r0, r7, #744	; 0x2e8
 8000822:	2304      	movs	r3, #4
 8000824:	f000 f95c 	bl	8000ae0 <add_nonce>

        H(i_n1_t, i_n2_t, rkeys_ffs_H, rounds);
 8000828:	f897 33b0 	ldrb.w	r3, [r7, #944]	; 0x3b0
 800082c:	f107 0218 	add.w	r2, r7, #24
 8000830:	f507 714a 	add.w	r1, r7, #808	; 0x328
 8000834:	f507 704e 	add.w	r0, r7, #824	; 0x338
 8000838:	f000 f87e 	bl	8000938 <H>
        //two_Rounds_aes128_encrypt_ffs(ptext0, ptext1, i_n1, i_n2, rkeys_ffs_H);

        xor_nonce( ptext0+ (i*16), i_n1_t, 16);
 800083c:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8000840:	011b      	lsls	r3, r3, #4
 8000842:	461a      	mov	r2, r3
 8000844:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000848:	4413      	add	r3, r2
 800084a:	f507 714e 	add.w	r1, r7, #824	; 0x338
 800084e:	2210      	movs	r2, #16
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f96d 	bl	8000b30 <xor_nonce>
        xor_nonce( ptext1+ (i*16), i_n2_t, 16);
 8000856:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	461a      	mov	r2, r3
 800085e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8000862:	4413      	add	r3, r2
 8000864:	f507 714a 	add.w	r1, r7, #808	; 0x328
 8000868:	2210      	movs	r2, #16
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f960 	bl	8000b30 <xor_nonce>

        I(ptext0,  ptext1, rkeys_ffs, 4);
 8000870:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8000874:	2304      	movs	r3, #4
 8000876:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 800087a:	f8d7 0374 	ldr.w	r0, [r7, #884]	; 0x374
 800087e:	f000 f8a1 	bl	80009c4 <I>

        xor_nonce( S1,ptext0+ (i*16), 16);
 8000882:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	461a      	mov	r2, r3
 800088a:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800088e:	1899      	adds	r1, r3, r2
 8000890:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000894:	2210      	movs	r2, #16
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f94a 	bl	8000b30 <xor_nonce>
        xor_nonce( S2,ptext1+ (i*16), 16);
 800089c:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80008a0:	011b      	lsls	r3, r3, #4
 80008a2:	461a      	mov	r2, r3
 80008a4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80008a8:	1899      	adds	r1, r3, r2
 80008aa:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80008ae:	2210      	movs	r2, #16
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f93d 	bl	8000b30 <xor_nonce>

        add_nonce(add_nonce_2, add_nonce_0,add_nonce_0, 4);
 80008b6:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 80008ba:	f507 713e 	add.w	r1, r7, #760	; 0x2f8
 80008be:	f507 7036 	add.w	r0, r7, #728	; 0x2d8
 80008c2:	2304      	movs	r3, #4
 80008c4:	f000 f90c 	bl	8000ae0 <add_nonce>
        add_nonce(add_nonce_2, add_nonce_1,add_nonce_1, 4);
 80008c8:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 80008cc:	f507 713a 	add.w	r1, r7, #744	; 0x2e8
 80008d0:	f507 7036 	add.w	r0, r7, #728	; 0x2d8
 80008d4:	2304      	movs	r3, #4
 80008d6:	f000 f903 	bl	8000ae0 <add_nonce>
    for (int i = 0; i < block_size; i++){
 80008da:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80008de:	3301      	adds	r3, #1
 80008e0:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 80008e4:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 80008e8:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 80008ec:	429a      	cmp	r2, r3
 80008ee:	db89      	blt.n	8000804 <ELIMAC+0x258>

    }
    
    xor_nonce( S1,S2, 16);
 80008f0:	f507 7142 	add.w	r1, r7, #776	; 0x308
 80008f4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80008f8:	2210      	movs	r2, #16
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f918 	bl	8000b30 <xor_nonce>

    aes128_encrypt_ffs(tag, S2, S1,S1, rkeys_ffs);
 8000900:	f507 7046 	add.w	r0, r7, #792	; 0x318
 8000904:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8000908:	f507 7142 	add.w	r1, r7, #776	; 0x308
 800090c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	4603      	mov	r3, r0
 8000914:	f8d7 03b4 	ldr.w	r0, [r7, #948]	; 0x3b4
 8000918:	f001 fd89 	bl	800242e <aes128_encrypt_ffs>
 800091c:	46b5      	mov	sp, r6

}
 800091e:	bf00      	nop
 8000920:	f507 7763 	add.w	r7, r7, #908	; 0x38c
 8000924:	46bd      	mov	sp, r7
 8000926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800092a:	bf00      	nop
 800092c:	08007508 	.word	0x08007508
 8000930:	08007518 	.word	0x08007518
 8000934:	08007528 	.word	0x08007528

08000938 <H>:

void H(unsigned char* ptext0,  unsigned char *ptext1, uint32_t *rkeys_ffs_H, unsigned char rounds){
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af02      	add	r7, sp, #8
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	70fb      	strb	r3, [r7, #3]

    switch (rounds)
 8000946:	78fb      	ldrb	r3, [r7, #3]
 8000948:	3b02      	subs	r3, #2
 800094a:	2b06      	cmp	r3, #6
 800094c:	d834      	bhi.n	80009b8 <H+0x80>
 800094e:	a201      	add	r2, pc, #4	; (adr r2, 8000954 <H+0x1c>)
 8000950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000954:	08000971 	.word	0x08000971
 8000958:	080009b9 	.word	0x080009b9
 800095c:	08000983 	.word	0x08000983
 8000960:	080009b9 	.word	0x080009b9
 8000964:	08000995 	.word	0x08000995
 8000968:	080009b9 	.word	0x080009b9
 800096c:	080009a7 	.word	0x080009a7
    {
    case 2:
        two_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f001 fe34 	bl	80025e8 <two_Rounds_aes128_encrypt_ffs>
        break;
 8000980:	e01b      	b.n	80009ba <H+0x82>
    case 4:
        four_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f001 fe75 	bl	800267c <four_Rounds_aes128_encrypt_ffs>
        break;
 8000992:	e012      	b.n	80009ba <H+0x82>
    case 6:
        six_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f001 fed7 	bl	8002752 <six_Rounds_aes128_encrypt_ffs>
        break;
 80009a4:	e009      	b.n	80009ba <H+0x82>
    case 8:
        eigth_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	68b9      	ldr	r1, [r7, #8]
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f001 ff64 	bl	800287e <eigth_Rounds_aes128_encrypt_ffs>
        break;
 80009b6:	e000      	b.n	80009ba <H+0x82>
    
    default:
        break;
 80009b8:	bf00      	nop
    }

}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop

080009c4 <I>:

void I(unsigned char* ptext0,  unsigned char *ptext1, uint32_t *rkeys_ffs_H, unsigned char rounds){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af02      	add	r7, sp, #8
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	70fb      	strb	r3, [r7, #3]

    switch (rounds)
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	3b02      	subs	r3, #2
 80009d6:	2b06      	cmp	r3, #6
 80009d8:	d834      	bhi.n	8000a44 <I+0x80>
 80009da:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <I+0x1c>)
 80009dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e0:	080009fd 	.word	0x080009fd
 80009e4:	08000a45 	.word	0x08000a45
 80009e8:	08000a0f 	.word	0x08000a0f
 80009ec:	08000a45 	.word	0x08000a45
 80009f0:	08000a21 	.word	0x08000a21
 80009f4:	08000a45 	.word	0x08000a45
 80009f8:	08000a33 	.word	0x08000a33
    {
    case 2:
        two_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	68b9      	ldr	r1, [r7, #8]
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f001 fdee 	bl	80025e8 <two_Rounds_aes128_encrypt_ffs>
        break;
 8000a0c:	e01b      	b.n	8000a46 <I+0x82>
    case 4:
        four_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	68b9      	ldr	r1, [r7, #8]
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f001 fe2f 	bl	800267c <four_Rounds_aes128_encrypt_ffs>
        break;
 8000a1e:	e012      	b.n	8000a46 <I+0x82>
    case 6:
        six_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	68b9      	ldr	r1, [r7, #8]
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f001 fe91 	bl	8002752 <six_Rounds_aes128_encrypt_ffs>
        break;
 8000a30:	e009      	b.n	8000a46 <I+0x82>
    case 8:
        eigth_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	68b9      	ldr	r1, [r7, #8]
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f001 ff1e 	bl	800287e <eigth_Rounds_aes128_encrypt_ffs>
        break;
 8000a42:	e000      	b.n	8000a46 <I+0x82>
    
    default:
        break;
 8000a44:	bf00      	nop
    }

}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop

08000a50 <divide_plaintext>:

void divide_plaintext(unsigned char* plaintext, unsigned char* ptext0,  unsigned char* ptext1,unsigned int plaintext_size){
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	; 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
 8000a5c:	603b      	str	r3, [r7, #0]
    int condicion = 1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61fb      	str	r3, [r7, #28]
    size_t j=0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
    size_t k=0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	e02c      	b.n	8000aca <divide_plaintext+0x7a>
        
        if (i%16==0 && i!=0)
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d106      	bne.n	8000a88 <divide_plaintext+0x38>
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <divide_plaintext+0x38>
            condicion=condicion^1;
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f083 0301 	eor.w	r3, r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]

        if (condicion)
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d008      	beq.n	8000aa0 <divide_plaintext+0x50>
            ptext0[j] = plaintext[i];
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	441a      	add	r2, r3
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	440b      	add	r3, r1
 8000a9a:	7812      	ldrb	r2, [r2, #0]
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e007      	b.n	8000ab0 <divide_plaintext+0x60>
        else
            ptext1[k] = plaintext[i];
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	441a      	add	r2, r3
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	440b      	add	r3, r1
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	701a      	strb	r2, [r3, #0]
        
        if (condicion)
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <divide_plaintext+0x6e>
            j++;
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
 8000abc:	e002      	b.n	8000ac4 <divide_plaintext+0x74>
        else
            k++;
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d3ce      	bcc.n	8000a70 <divide_plaintext+0x20>
    }
}
 8000ad2:	bf00      	nop
 8000ad4:	bf00      	nop
 8000ad6:	3724      	adds	r7, #36	; 0x24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <add_nonce>:

void add_nonce(unsigned int * add_nonce, unsigned int * nonce, unsigned int * nonce_result, unsigned int size){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b087      	sub	sp, #28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
 8000aec:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < size; i++){
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	e012      	b.n	8000b1a <add_nonce+0x3a>
        nonce_result[i]=nonce[i]+ add_nonce[i];
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	68ba      	ldr	r2, [r7, #8]
 8000afa:	4413      	add	r3, r2
 8000afc:	6819      	ldr	r1, [r3, #0]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	4413      	add	r3, r2
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	4403      	add	r3, r0
 8000b10:	440a      	add	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < size; i++){
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	3301      	adds	r3, #1
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d3e8      	bcc.n	8000af4 <add_nonce+0x14>
    }

}
 8000b22:	bf00      	nop
 8000b24:	bf00      	nop
 8000b26:	371c      	adds	r7, #28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <xor_nonce>:

void xor_nonce(unsigned char * plaintext, unsigned char * nonce, unsigned int size){
 8000b30:	b480      	push	{r7}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < size; i++){
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	e010      	b.n	8000b64 <xor_nonce+0x34>
        plaintext[i]=nonce[i]^ plaintext[i];
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	4413      	add	r3, r2
 8000b48:	7819      	ldrb	r1, [r3, #0]
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	4413      	add	r3, r2
 8000b50:	781a      	ldrb	r2, [r3, #0]
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	4403      	add	r3, r0
 8000b58:	404a      	eors	r2, r1
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < size; i++){
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3301      	adds	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d3ea      	bcc.n	8000b42 <xor_nonce+0x12>
    }

}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	371c      	adds	r7, #28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <packing>:

}


void packing(uint32_t* out, const unsigned char* in0,
		const unsigned char* in1) {
 8000b7a:	b480      	push	{r7}
 8000b7c:	b087      	sub	sp, #28
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	60f8      	str	r0, [r7, #12]
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	out[0] = LE_LOAD_32(in0);
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	3303      	adds	r3, #3
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	061a      	lsls	r2, r3, #24
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	3302      	adds	r3, #2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	041b      	lsls	r3, r3, #16
 8000b96:	431a      	orrs	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	021b      	lsls	r3, r3, #8
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	7812      	ldrb	r2, [r2, #0]
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	601a      	str	r2, [r3, #0]
	out[1] = LE_LOAD_32(in1);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3303      	adds	r3, #3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	061a      	lsls	r2, r3, #24
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	041b      	lsls	r3, r3, #16
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]
	out[2] = LE_LOAD_32(in0 + 4);
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	3307      	adds	r3, #7
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	061a      	lsls	r2, r3, #24
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	3306      	adds	r3, #6
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	041b      	lsls	r3, r3, #16
 8000be6:	431a      	orrs	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	3305      	adds	r3, #5
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	021b      	lsls	r3, r3, #8
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3308      	adds	r3, #8
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]
	out[3] = LE_LOAD_32(in1 + 4);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3307      	adds	r3, #7
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	061a      	lsls	r2, r3, #24
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3306      	adds	r3, #6
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	041b      	lsls	r3, r3, #16
 8000c12:	431a      	orrs	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3305      	adds	r3, #5
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3304      	adds	r3, #4
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	330c      	adds	r3, #12
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	601a      	str	r2, [r3, #0]
	out[4] = LE_LOAD_32(in0 + 8);
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	330b      	adds	r3, #11
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	061a      	lsls	r2, r3, #24
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	330a      	adds	r3, #10
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	041b      	lsls	r3, r3, #16
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	3309      	adds	r3, #9
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	3308      	adds	r3, #8
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3310      	adds	r3, #16
 8000c56:	430a      	orrs	r2, r1
 8000c58:	601a      	str	r2, [r3, #0]
	out[5] = LE_LOAD_32(in1 + 8);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	330b      	adds	r3, #11
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	061a      	lsls	r2, r3, #24
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	330a      	adds	r3, #10
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	041b      	lsls	r3, r3, #16
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3309      	adds	r3, #9
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3308      	adds	r3, #8
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3314      	adds	r3, #20
 8000c82:	430a      	orrs	r2, r1
 8000c84:	601a      	str	r2, [r3, #0]
	out[6] = LE_LOAD_32(in0 + 12);
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	330f      	adds	r3, #15
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	061a      	lsls	r2, r3, #24
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	330e      	adds	r3, #14
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	041b      	lsls	r3, r3, #16
 8000c96:	431a      	orrs	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	330d      	adds	r3, #13
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	021b      	lsls	r3, r3, #8
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	330c      	adds	r3, #12
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3318      	adds	r3, #24
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	601a      	str	r2, [r3, #0]
	out[7] = LE_LOAD_32(in1 + 12);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	330f      	adds	r3, #15
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	061a      	lsls	r2, r3, #24
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	330e      	adds	r3, #14
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	041b      	lsls	r3, r3, #16
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	330d      	adds	r3, #13
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	330c      	adds	r3, #12
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	331c      	adds	r3, #28
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[1], out[0], 0x55555555, 1);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	085b      	lsrs	r3, r3, #1
 8000cea:	4053      	eors	r3, r2
 8000cec:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	405a      	eors	r2, r3
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	3304      	adds	r3, #4
 8000d02:	6819      	ldr	r1, [r3, #0]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	005a      	lsls	r2, r3, #1
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3304      	adds	r3, #4
 8000d0c:	404a      	eors	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[3], out[2], 0x55555555, 1);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3308      	adds	r3, #8
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	330c      	adds	r3, #12
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	085b      	lsrs	r3, r3, #1
 8000d1e:	4053      	eors	r3, r2
 8000d20:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3308      	adds	r3, #8
 8000d2a:	6819      	ldr	r1, [r3, #0]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	3308      	adds	r3, #8
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	404a      	eors	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	330c      	adds	r3, #12
 8000d3a:	6819      	ldr	r1, [r3, #0]
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005a      	lsls	r2, r3, #1
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	330c      	adds	r3, #12
 8000d44:	404a      	eors	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[5], out[4], 0x55555555, 1);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	3310      	adds	r3, #16
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	3314      	adds	r3, #20
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	085b      	lsrs	r3, r3, #1
 8000d56:	4053      	eors	r3, r2
 8000d58:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	3310      	adds	r3, #16
 8000d62:	6819      	ldr	r1, [r3, #0]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	3310      	adds	r3, #16
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	404a      	eors	r2, r1
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3314      	adds	r3, #20
 8000d72:	6819      	ldr	r1, [r3, #0]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005a      	lsls	r2, r3, #1
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3314      	adds	r3, #20
 8000d7c:	404a      	eors	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[6], 0x55555555, 1);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	3318      	adds	r3, #24
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	331c      	adds	r3, #28
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	085b      	lsrs	r3, r3, #1
 8000d8e:	4053      	eors	r3, r2
 8000d90:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	3318      	adds	r3, #24
 8000d9a:	6819      	ldr	r1, [r3, #0]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3318      	adds	r3, #24
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	404a      	eors	r2, r1
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	331c      	adds	r3, #28
 8000daa:	6819      	ldr	r1, [r3, #0]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	005a      	lsls	r2, r3, #1
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	331c      	adds	r3, #28
 8000db4:	404a      	eors	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[2], out[0], 0x33333333, 2);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	3308      	adds	r3, #8
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	4053      	eors	r3, r2
 8000dc6:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	405a      	eors	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	3308      	adds	r3, #8
 8000ddc:	6819      	ldr	r1, [r3, #0]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	009a      	lsls	r2, r3, #2
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3308      	adds	r3, #8
 8000de6:	404a      	eors	r2, r1
 8000de8:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[3], out[1], 0x33333333, 2);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3304      	adds	r3, #4
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	330c      	adds	r3, #12
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	4053      	eors	r3, r2
 8000dfa:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3304      	adds	r3, #4
 8000e04:	6819      	ldr	r1, [r3, #0]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	404a      	eors	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	330c      	adds	r3, #12
 8000e14:	6819      	ldr	r1, [r3, #0]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	009a      	lsls	r2, r3, #2
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	330c      	adds	r3, #12
 8000e1e:	404a      	eors	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[6], out[4], 0x33333333, 2);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	3310      	adds	r3, #16
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3318      	adds	r3, #24
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	4053      	eors	r3, r2
 8000e32:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3310      	adds	r3, #16
 8000e3c:	6819      	ldr	r1, [r3, #0]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	3310      	adds	r3, #16
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	404a      	eors	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	3318      	adds	r3, #24
 8000e4c:	6819      	ldr	r1, [r3, #0]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	009a      	lsls	r2, r3, #2
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	3318      	adds	r3, #24
 8000e56:	404a      	eors	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[5], 0x33333333, 2);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3314      	adds	r3, #20
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	331c      	adds	r3, #28
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	4053      	eors	r3, r2
 8000e6a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	3314      	adds	r3, #20
 8000e74:	6819      	ldr	r1, [r3, #0]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3314      	adds	r3, #20
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	404a      	eors	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	331c      	adds	r3, #28
 8000e84:	6819      	ldr	r1, [r3, #0]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	009a      	lsls	r2, r3, #2
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	331c      	adds	r3, #28
 8000e8e:	404a      	eors	r2, r1
 8000e90:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[4], out[0], 0x0f0f0f0f, 4);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	3310      	adds	r3, #16
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	4053      	eors	r3, r2
 8000ea0:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	405a      	eors	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3310      	adds	r3, #16
 8000eb6:	6819      	ldr	r1, [r3, #0]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	011a      	lsls	r2, r3, #4
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	3310      	adds	r3, #16
 8000ec0:	404a      	eors	r2, r1
 8000ec2:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[5], out[1], 0x0f0f0f0f, 4);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	3314      	adds	r3, #20
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	4053      	eors	r3, r2
 8000ed4:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	3304      	adds	r3, #4
 8000ede:	6819      	ldr	r1, [r3, #0]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	404a      	eors	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3314      	adds	r3, #20
 8000eee:	6819      	ldr	r1, [r3, #0]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	011a      	lsls	r2, r3, #4
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	3314      	adds	r3, #20
 8000ef8:	404a      	eors	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[6], out[2], 0x0f0f0f0f, 4);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3308      	adds	r3, #8
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	3318      	adds	r3, #24
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	4053      	eors	r3, r2
 8000f0c:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3308      	adds	r3, #8
 8000f16:	6819      	ldr	r1, [r3, #0]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3308      	adds	r3, #8
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	404a      	eors	r2, r1
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3318      	adds	r3, #24
 8000f26:	6819      	ldr	r1, [r3, #0]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	011a      	lsls	r2, r3, #4
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3318      	adds	r3, #24
 8000f30:	404a      	eors	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[3], 0x0f0f0f0f, 4);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	330c      	adds	r3, #12
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	331c      	adds	r3, #28
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	091b      	lsrs	r3, r3, #4
 8000f42:	4053      	eors	r3, r2
 8000f44:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	330c      	adds	r3, #12
 8000f4e:	6819      	ldr	r1, [r3, #0]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	330c      	adds	r3, #12
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	404a      	eors	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	331c      	adds	r3, #28
 8000f5e:	6819      	ldr	r1, [r3, #0]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	011a      	lsls	r2, r3, #4
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	331c      	adds	r3, #28
 8000f68:	404a      	eors	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	371c      	adds	r7, #28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <unpacking>:

/******************************************************************************
* Unpacks the 256-bit internal state in two 128-bit blocs out0, out1.
******************************************************************************/
static void unpacking(unsigned char* out0, unsigned char* out1, uint32_t* in) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	SWAPMOVE(in[4], in[0], 0x0f0f0f0f, 4);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3310      	adds	r3, #16
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	4053      	eors	r3, r2
 8000f92:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	405a      	eors	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3310      	adds	r3, #16
 8000fa8:	6819      	ldr	r1, [r3, #0]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	011a      	lsls	r2, r3, #4
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3310      	adds	r3, #16
 8000fb2:	404a      	eors	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[5], in[1], 0x0f0f0f0f, 4);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3314      	adds	r3, #20
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	091b      	lsrs	r3, r3, #4
 8000fc4:	4053      	eors	r3, r2
 8000fc6:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3304      	adds	r3, #4
 8000fd0:	6819      	ldr	r1, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	404a      	eors	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3314      	adds	r3, #20
 8000fe0:	6819      	ldr	r1, [r3, #0]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	011a      	lsls	r2, r3, #4
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3314      	adds	r3, #20
 8000fea:	404a      	eors	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[6], in[2], 0x0f0f0f0f, 4);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3308      	adds	r3, #8
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3318      	adds	r3, #24
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	4053      	eors	r3, r2
 8000ffe:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3308      	adds	r3, #8
 8001008:	6819      	ldr	r1, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3308      	adds	r3, #8
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	404a      	eors	r2, r1
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3318      	adds	r3, #24
 8001018:	6819      	ldr	r1, [r3, #0]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	011a      	lsls	r2, r3, #4
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3318      	adds	r3, #24
 8001022:	404a      	eors	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[3], 0x0f0f0f0f, 4);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	330c      	adds	r3, #12
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	331c      	adds	r3, #28
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	091b      	lsrs	r3, r3, #4
 8001034:	4053      	eors	r3, r2
 8001036:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	330c      	adds	r3, #12
 8001040:	6819      	ldr	r1, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	330c      	adds	r3, #12
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	404a      	eors	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	331c      	adds	r3, #28
 8001050:	6819      	ldr	r1, [r3, #0]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	011a      	lsls	r2, r3, #4
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	331c      	adds	r3, #28
 800105a:	404a      	eors	r2, r1
 800105c:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[2], in[0], 0x33333333, 2);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3308      	adds	r3, #8
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	4053      	eors	r3, r2
 800106c:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	405a      	eors	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3308      	adds	r3, #8
 8001082:	6819      	ldr	r1, [r3, #0]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	009a      	lsls	r2, r3, #2
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3308      	adds	r3, #8
 800108c:	404a      	eors	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[3], in[1], 0x33333333, 2);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3304      	adds	r3, #4
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	330c      	adds	r3, #12
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	4053      	eors	r3, r2
 80010a0:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3304      	adds	r3, #4
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3304      	adds	r3, #4
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	404a      	eors	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	330c      	adds	r3, #12
 80010ba:	6819      	ldr	r1, [r3, #0]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	009a      	lsls	r2, r3, #2
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	330c      	adds	r3, #12
 80010c4:	404a      	eors	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[6], in[4], 0x33333333, 2);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3310      	adds	r3, #16
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3318      	adds	r3, #24
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	4053      	eors	r3, r2
 80010d8:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3310      	adds	r3, #16
 80010e2:	6819      	ldr	r1, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3310      	adds	r3, #16
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	404a      	eors	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3318      	adds	r3, #24
 80010f2:	6819      	ldr	r1, [r3, #0]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	009a      	lsls	r2, r3, #2
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3318      	adds	r3, #24
 80010fc:	404a      	eors	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[5], 0x33333333, 2);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3314      	adds	r3, #20
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	331c      	adds	r3, #28
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	4053      	eors	r3, r2
 8001110:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3314      	adds	r3, #20
 800111a:	6819      	ldr	r1, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3314      	adds	r3, #20
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	404a      	eors	r2, r1
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	331c      	adds	r3, #28
 800112a:	6819      	ldr	r1, [r3, #0]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	009a      	lsls	r2, r3, #2
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	331c      	adds	r3, #28
 8001134:	404a      	eors	r2, r1
 8001136:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[1], in[0], 0x55555555, 1);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3304      	adds	r3, #4
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	085b      	lsrs	r3, r3, #1
 8001144:	4053      	eors	r3, r2
 8001146:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	405a      	eors	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3304      	adds	r3, #4
 800115c:	6819      	ldr	r1, [r3, #0]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005a      	lsls	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3304      	adds	r3, #4
 8001166:	404a      	eors	r2, r1
 8001168:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[3], in[2], 0x55555555, 1);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3308      	adds	r3, #8
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	330c      	adds	r3, #12
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	085b      	lsrs	r3, r3, #1
 8001178:	4053      	eors	r3, r2
 800117a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3308      	adds	r3, #8
 8001184:	6819      	ldr	r1, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3308      	adds	r3, #8
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	404a      	eors	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	330c      	adds	r3, #12
 8001194:	6819      	ldr	r1, [r3, #0]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005a      	lsls	r2, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	330c      	adds	r3, #12
 800119e:	404a      	eors	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[5], in[4], 0x55555555, 1);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3310      	adds	r3, #16
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3314      	adds	r3, #20
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	085b      	lsrs	r3, r3, #1
 80011b0:	4053      	eors	r3, r2
 80011b2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3310      	adds	r3, #16
 80011bc:	6819      	ldr	r1, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3310      	adds	r3, #16
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	404a      	eors	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3314      	adds	r3, #20
 80011cc:	6819      	ldr	r1, [r3, #0]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005a      	lsls	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3314      	adds	r3, #20
 80011d6:	404a      	eors	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[6], 0x55555555, 1);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3318      	adds	r3, #24
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	331c      	adds	r3, #28
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	085b      	lsrs	r3, r3, #1
 80011e8:	4053      	eors	r3, r2
 80011ea:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3318      	adds	r3, #24
 80011f4:	6819      	ldr	r1, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3318      	adds	r3, #24
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	404a      	eors	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	331c      	adds	r3, #28
 8001204:	6819      	ldr	r1, [r3, #0]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005a      	lsls	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	331c      	adds	r3, #28
 800120e:	404a      	eors	r2, r1
 8001210:	601a      	str	r2, [r3, #0]
	LE_STORE_32(out0, in[0]);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	0a1a      	lsrs	r2, r3, #8
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3301      	adds	r3, #1
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	701a      	strb	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	0c1a      	lsrs	r2, r3, #16
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3302      	adds	r3, #2
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	701a      	strb	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0e1a      	lsrs	r2, r3, #24
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3303      	adds	r3, #3
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 4, in[2]);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3308      	adds	r3, #8
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3304      	adds	r3, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3308      	adds	r3, #8
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	0a1a      	lsrs	r2, r3, #8
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3305      	adds	r3, #5
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3308      	adds	r3, #8
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	0c1a      	lsrs	r2, r3, #16
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3306      	adds	r3, #6
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3308      	adds	r3, #8
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	0e1a      	lsrs	r2, r3, #24
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3307      	adds	r3, #7
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 8, in[4]);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3310      	adds	r3, #16
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3308      	adds	r3, #8
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3310      	adds	r3, #16
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	0a1a      	lsrs	r2, r3, #8
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3309      	adds	r3, #9
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3310      	adds	r3, #16
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	0c1a      	lsrs	r2, r3, #16
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	330a      	adds	r3, #10
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3310      	adds	r3, #16
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0e1a      	lsrs	r2, r3, #24
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	330b      	adds	r3, #11
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 12, in[6]);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3318      	adds	r3, #24
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	330c      	adds	r3, #12
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3318      	adds	r3, #24
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	0a1a      	lsrs	r2, r3, #8
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	330d      	adds	r3, #13
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	701a      	strb	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3318      	adds	r3, #24
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	0c1a      	lsrs	r2, r3, #16
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	330e      	adds	r3, #14
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3318      	adds	r3, #24
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	0e1a      	lsrs	r2, r3, #24
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	330f      	adds	r3, #15
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1, in[1]);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3304      	adds	r3, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3304      	adds	r3, #4
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	0a1a      	lsrs	r2, r3, #8
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	3301      	adds	r3, #1
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	701a      	strb	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3304      	adds	r3, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	0c1a      	lsrs	r2, r3, #16
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	3302      	adds	r3, #2
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	701a      	strb	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3304      	adds	r3, #4
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	0e1a      	lsrs	r2, r3, #24
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	3303      	adds	r3, #3
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 4, in[3]);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	330c      	adds	r3, #12
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	3304      	adds	r3, #4
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	701a      	strb	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	330c      	adds	r3, #12
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	0a1a      	lsrs	r2, r3, #8
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	3305      	adds	r3, #5
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	701a      	strb	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	330c      	adds	r3, #12
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	0c1a      	lsrs	r2, r3, #16
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	3306      	adds	r3, #6
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	330c      	adds	r3, #12
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	0e1a      	lsrs	r2, r3, #24
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	3307      	adds	r3, #7
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 8, in[5]);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3314      	adds	r3, #20
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	3308      	adds	r3, #8
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3314      	adds	r3, #20
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	0a1a      	lsrs	r2, r3, #8
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	3309      	adds	r3, #9
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3314      	adds	r3, #20
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	0c1a      	lsrs	r2, r3, #16
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	330a      	adds	r3, #10
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	701a      	strb	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3314      	adds	r3, #20
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	0e1a      	lsrs	r2, r3, #24
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	330b      	adds	r3, #11
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 12, in[7]);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	331c      	adds	r3, #28
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	330c      	adds	r3, #12
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	331c      	adds	r3, #28
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	0a1a      	lsrs	r2, r3, #8
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	330d      	adds	r3, #13
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	331c      	adds	r3, #28
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	0c1a      	lsrs	r2, r3, #16
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	330e      	adds	r3, #14
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	331c      	adds	r3, #28
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	0e1a      	lsrs	r2, r3, #24
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	330f      	adds	r3, #15
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]
}
 80013f6:	bf00      	nop
 80013f8:	371c      	adds	r7, #28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <ark>:

/******************************************************************************
* XOR the round key to the internal state. The round keys are expected to be 
* pre-computed and to be packed in the fixsliced representation.
******************************************************************************/
static void ark(uint32_t* state, const uint32_t* rkey) {
 8001402:	b480      	push	{r7}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 8; i++)
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e012      	b.n	8001438 <ark+0x36>
		state[i] ^= rkey[i];
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	6819      	ldr	r1, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	4413      	add	r3, r2
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	4403      	add	r3, r0
 800142e:	404a      	eors	r2, r1
 8001430:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3301      	adds	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b07      	cmp	r3, #7
 800143c:	dde9      	ble.n	8001412 <ark+0x10>
}
 800143e:	bf00      	nop
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <sbox>:
/******************************************************************************
* Bitsliced implementation of the AES Sbox based on Boyar, Peralta and Calik.
* See http://www.cs.yale.edu/homes/peralta/CircuitStuff/SLP_AES_113.txt
* Note that the 4 NOT (^= 0xffffffff) are moved to the key schedule.
******************************************************************************/
void sbox(uint32_t* state) {
 800144c:	b480      	push	{r7}
 800144e:	b095      	sub	sp, #84	; 0x54
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4, t5,
		t6, t7, t8, t9, t10, t11, t12,
		t13, t14, t15, t16, t17;
	t0			= state[3] ^ state[5];
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	330c      	adds	r3, #12
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3314      	adds	r3, #20
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4053      	eors	r3, r2
 8001462:	64fb      	str	r3, [r7, #76]	; 0x4c
	t1			= state[0] ^ state[6];
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3318      	adds	r3, #24
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4053      	eors	r3, r2
 8001470:	64bb      	str	r3, [r7, #72]	; 0x48
	t2			= t1 ^ t0;
 8001472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001476:	4053      	eors	r3, r2
 8001478:	647b      	str	r3, [r7, #68]	; 0x44
	t3			= state[4] ^ t2;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3310      	adds	r3, #16
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001482:	4053      	eors	r3, r2
 8001484:	643b      	str	r3, [r7, #64]	; 0x40
	t4			= t3 ^ state[5];
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3314      	adds	r3, #20
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800148e:	4053      	eors	r3, r2
 8001490:	63fb      	str	r3, [r7, #60]	; 0x3c
	t5			= t2 & t4;
 8001492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001496:	4013      	ands	r3, r2
 8001498:	63bb      	str	r3, [r7, #56]	; 0x38
	t6			= t4 ^ state[7];
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	331c      	adds	r3, #28
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014a2:	4053      	eors	r3, r2
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
	t7			= t3 ^ state[1];
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3304      	adds	r3, #4
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014ae:	4053      	eors	r3, r2
 80014b0:	633b      	str	r3, [r7, #48]	; 0x30
	t8			= state[0] ^ state[3]; 
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	330c      	adds	r3, #12
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4053      	eors	r3, r2
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
	t9			= t7 ^ t8;
 80014c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	4053      	eors	r3, r2
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
	t10			= t8 & t9;
 80014c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	4013      	ands	r3, r2
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
	t11			= state[7] ^ t9; 
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	331c      	adds	r3, #28
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014d8:	4053      	eors	r3, r2
 80014da:	623b      	str	r3, [r7, #32]
	t12			= state[0] ^ state[5];
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3314      	adds	r3, #20
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4053      	eors	r3, r2
 80014e8:	61fb      	str	r3, [r7, #28]
	t13			= state[1] ^ state[2];
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3304      	adds	r3, #4
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3308      	adds	r3, #8
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4053      	eors	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
	t14			= t4 ^ t13;
 80014fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	4053      	eors	r3, r2
 8001500:	617b      	str	r3, [r7, #20]
	t15			= t14 ^ t9;
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	4053      	eors	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
	t16			= t0 & t15;
 800150a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
	t17			= t16 ^ t10;
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	4053      	eors	r3, r2
 8001518:	60bb      	str	r3, [r7, #8]
	state[1]	= t14 ^ t12; 
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3304      	adds	r3, #4
 800151e:	6979      	ldr	r1, [r7, #20]
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	404a      	eors	r2, r1
 8001524:	601a      	str	r2, [r3, #0]
	state[2]	= t12 & t14;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3308      	adds	r3, #8
 800152a:	69f9      	ldr	r1, [r7, #28]
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	400a      	ands	r2, r1
 8001530:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3308      	adds	r3, #8
 8001536:	6819      	ldr	r1, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3308      	adds	r3, #8
 800153c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800153e:	404a      	eors	r2, r1
 8001540:	601a      	str	r2, [r3, #0]
	state[4]	= t13 ^ t9;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3310      	adds	r3, #16
 8001546:	69b9      	ldr	r1, [r7, #24]
 8001548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800154a:	404a      	eors	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
	state[5]	= t1 ^ state[4];
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3310      	adds	r3, #16
 8001552:	6819      	ldr	r1, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3314      	adds	r3, #20
 8001558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800155a:	404a      	eors	r2, r1
 800155c:	601a      	str	r2, [r3, #0]
	t3			= t1 & state[4];
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3310      	adds	r3, #16
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001566:	4013      	ands	r3, r2
 8001568:	643b      	str	r3, [r7, #64]	; 0x40
	t10			= state[0] ^ state[4];
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3310      	adds	r3, #16
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4053      	eors	r3, r2
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
	t13 		^= state[7];
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	331c      	adds	r3, #28
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4053      	eors	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
	state[3] 	^= t13; 
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	330c      	adds	r3, #12
 8001588:	6819      	ldr	r1, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	330c      	adds	r3, #12
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	404a      	eors	r2, r1
 8001592:	601a      	str	r2, [r3, #0]
	t16			= state[3] & state[7];
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	330c      	adds	r3, #12
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	331c      	adds	r3, #28
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4013      	ands	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
	t16 		^= t5;
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a8:	4053      	eors	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]
	t16 		^= state[2];
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3308      	adds	r3, #8
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4053      	eors	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
	state[1] 	^= t16;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3304      	adds	r3, #4
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3304      	adds	r3, #4
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	404a      	eors	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]
	state[0] 	^= t13;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	405a      	eors	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	601a      	str	r2, [r3, #0]
	t16			= state[0] & t11;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6a3a      	ldr	r2, [r7, #32]
 80015da:	4013      	ands	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
	t16 		^= t3;
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015e2:	4053      	eors	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
	state[2] 	^= t16;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3308      	adds	r3, #8
 80015ea:	6819      	ldr	r1, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3308      	adds	r3, #8
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	404a      	eors	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3308      	adds	r3, #8
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3308      	adds	r3, #8
 8001600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001602:	404a      	eors	r2, r1
 8001604:	601a      	str	r2, [r3, #0]
	state[6] 	^= t13;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3318      	adds	r3, #24
 800160a:	6819      	ldr	r1, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3318      	adds	r3, #24
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	404a      	eors	r2, r1
 8001614:	601a      	str	r2, [r3, #0]
	t10			= state[6] & t13;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3318      	adds	r3, #24
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
	t3 			^= t10;
 8001622:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	4053      	eors	r3, r2
 8001628:	643b      	str	r3, [r7, #64]	; 0x40
	t3 			^= t17;
 800162a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4053      	eors	r3, r2
 8001630:	643b      	str	r3, [r7, #64]	; 0x40
	state[5] 	^= t3;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3314      	adds	r3, #20
 8001636:	6819      	ldr	r1, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3314      	adds	r3, #20
 800163c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800163e:	404a      	eors	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
	t3			= state[6] ^ t12;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3318      	adds	r3, #24
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	69fa      	ldr	r2, [r7, #28]
 800164a:	4053      	eors	r3, r2
 800164c:	643b      	str	r3, [r7, #64]	; 0x40
	t10			= t3 & t6;
 800164e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001652:	4013      	ands	r3, r2
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
	t5 			^= t10;
 8001656:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	4053      	eors	r3, r2
 800165c:	63bb      	str	r3, [r7, #56]	; 0x38
	t5 			^= t7;
 800165e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001662:	4053      	eors	r3, r2
 8001664:	63bb      	str	r3, [r7, #56]	; 0x38
	t5 			^= t17;
 8001666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4053      	eors	r3, r2
 800166c:	63bb      	str	r3, [r7, #56]	; 0x38
	t7			= t5 & state[5];
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3314      	adds	r3, #20
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001676:	4013      	ands	r3, r2
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
	t10			= state[2] ^ t7;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3308      	adds	r3, #8
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001682:	4053      	eors	r3, r2
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
	t7 			^= state[1];
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3304      	adds	r3, #4
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800168e:	4053      	eors	r3, r2
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
	t5 			^= state[1];
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3304      	adds	r3, #4
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800169a:	4053      	eors	r3, r2
 800169c:	63bb      	str	r3, [r7, #56]	; 0x38
	t16			= t5 & t10;
 800169e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	4013      	ands	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
	state[1] 	^= t16;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3304      	adds	r3, #4
 80016aa:	6819      	ldr	r1, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3304      	adds	r3, #4
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	404a      	eors	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]
	t17			= state[1] & state[0];
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3304      	adds	r3, #4
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
	t11			= state[1] & t11;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3304      	adds	r3, #4
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6a3a      	ldr	r2, [r7, #32]
 80016cc:	4013      	ands	r3, r2
 80016ce:	623b      	str	r3, [r7, #32]
	t16			= state[5] ^ state[2];
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3314      	adds	r3, #20
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3308      	adds	r3, #8
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4053      	eors	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
	t7 			&= t16;
 80016e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4013      	ands	r3, r2
 80016e6:	633b      	str	r3, [r7, #48]	; 0x30
	t7 			^= state[2];
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3308      	adds	r3, #8
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016f0:	4053      	eors	r3, r2
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
	t16			= t10 ^ t7;
 80016f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f8:	4053      	eors	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]
	state[2] 	&= t16;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3308      	adds	r3, #8
 8001700:	6819      	ldr	r1, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3308      	adds	r3, #8
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	400a      	ands	r2, r1
 800170a:	601a      	str	r2, [r3, #0]
	t10 		^= state[2];
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3308      	adds	r3, #8
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001714:	4053      	eors	r3, r2
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
	t10 		&= state[1];
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3304      	adds	r3, #4
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001720:	4013      	ands	r3, r2
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
	t5 			^= t10;
 8001724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	4053      	eors	r3, r2
 800172a:	63bb      	str	r3, [r7, #56]	; 0x38
	t10			= state[1] ^ t5;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3304      	adds	r3, #4
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001734:	4053      	eors	r3, r2
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
	state[4] 	&= t10; 
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3310      	adds	r3, #16
 800173c:	6819      	ldr	r1, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3310      	adds	r3, #16
 8001742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001744:	400a      	ands	r2, r1
 8001746:	601a      	str	r2, [r3, #0]
	t11 		^= state[4];
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3310      	adds	r3, #16
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6a3a      	ldr	r2, [r7, #32]
 8001750:	4053      	eors	r3, r2
 8001752:	623b      	str	r3, [r7, #32]
	t1 			&= t10;
 8001754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	4013      	ands	r3, r2
 800175a:	64bb      	str	r3, [r7, #72]	; 0x48
	state[6] 	&= t5; 
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3318      	adds	r3, #24
 8001760:	6819      	ldr	r1, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3318      	adds	r3, #24
 8001766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001768:	400a      	ands	r2, r1
 800176a:	601a      	str	r2, [r3, #0]
	t10			= t5 & t13;
 800176c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
	state[4] 	^= t10;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3310      	adds	r3, #16
 8001778:	6819      	ldr	r1, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3310      	adds	r3, #16
 800177e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001780:	404a      	eors	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
	state[5] 	^= t7;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3314      	adds	r3, #20
 8001788:	6819      	ldr	r1, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3314      	adds	r3, #20
 800178e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001790:	404a      	eors	r2, r1
 8001792:	601a      	str	r2, [r3, #0]
	state[2] 	^= state[5];
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3308      	adds	r3, #8
 8001798:	6819      	ldr	r1, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3314      	adds	r3, #20
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3308      	adds	r3, #8
 80017a4:	404a      	eors	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
	state[5]	= t5 ^ state[2];
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3308      	adds	r3, #8
 80017ac:	6819      	ldr	r1, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3314      	adds	r3, #20
 80017b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017b4:	404a      	eors	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
	t5			= state[5] & t14;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3314      	adds	r3, #20
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4013      	ands	r3, r2
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38
	t10			= state[5] & t12;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3314      	adds	r3, #20
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	4013      	ands	r3, r2
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
	t12			= t7 ^ state[2];
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3308      	adds	r3, #8
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017d8:	4053      	eors	r3, r2
 80017da:	61fb      	str	r3, [r7, #28]
	t4 			&= t12;
 80017dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	4013      	ands	r3, r2
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	t2 			&= t12;
 80017e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	4013      	ands	r3, r2
 80017ea:	647b      	str	r3, [r7, #68]	; 0x44
	t3 			&= state[2]; 
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3308      	adds	r3, #8
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017f4:	4013      	ands	r3, r2
 80017f6:	643b      	str	r3, [r7, #64]	; 0x40
	state[2] 	&= t6;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3308      	adds	r3, #8
 80017fc:	6819      	ldr	r1, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3308      	adds	r3, #8
 8001802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001804:	400a      	ands	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
	state[2] 	^= t4;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3308      	adds	r3, #8
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3308      	adds	r3, #8
 8001812:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001814:	404a      	eors	r2, r1
 8001816:	601a      	str	r2, [r3, #0]
	t13			= state[4] ^ state[2];
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3310      	adds	r3, #16
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3308      	adds	r3, #8
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4053      	eors	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
	state[3] 	&= t7;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	330c      	adds	r3, #12
 800182c:	6819      	ldr	r1, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	330c      	adds	r3, #12
 8001832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001834:	400a      	ands	r2, r1
 8001836:	601a      	str	r2, [r3, #0]
	state[1] 	^= t7;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3304      	adds	r3, #4
 800183c:	6819      	ldr	r1, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3304      	adds	r3, #4
 8001842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001844:	404a      	eors	r2, r1
 8001846:	601a      	str	r2, [r3, #0]
	state[5] 	^= state[1];
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3314      	adds	r3, #20
 800184c:	6819      	ldr	r1, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3304      	adds	r3, #4
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3314      	adds	r3, #20
 8001858:	404a      	eors	r2, r1
 800185a:	601a      	str	r2, [r3, #0]
	t6			= state[5] & t15;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3314      	adds	r3, #20
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
	state[4] 	^= t6; 
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3310      	adds	r3, #16
 800186c:	6819      	ldr	r1, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3310      	adds	r3, #16
 8001872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001874:	404a      	eors	r2, r1
 8001876:	601a      	str	r2, [r3, #0]
	t0 			&= state[5];
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3314      	adds	r3, #20
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001880:	4013      	ands	r3, r2
 8001882:	64fb      	str	r3, [r7, #76]	; 0x4c
	state[5]	= state[1] & t9; 
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3304      	adds	r3, #4
 8001888:	6819      	ldr	r1, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3314      	adds	r3, #20
 800188e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001890:	400a      	ands	r2, r1
 8001892:	601a      	str	r2, [r3, #0]
	state[5] 	^= state[4];
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3314      	adds	r3, #20
 8001898:	6819      	ldr	r1, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3310      	adds	r3, #16
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3314      	adds	r3, #20
 80018a4:	404a      	eors	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]
	state[1] 	&= t8;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3304      	adds	r3, #4
 80018ac:	6819      	ldr	r1, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3304      	adds	r3, #4
 80018b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b4:	400a      	ands	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
	t6			= state[1] ^ state[5];
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3304      	adds	r3, #4
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3314      	adds	r3, #20
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4053      	eors	r3, r2
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
	t0 			^= state[1];
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3304      	adds	r3, #4
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018d0:	4053      	eors	r3, r2
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	state[1]	= t3 ^ t0;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3304      	adds	r3, #4
 80018d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80018da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018dc:	404a      	eors	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
	t15			= state[1] ^ state[3];
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3304      	adds	r3, #4
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	330c      	adds	r3, #12
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4053      	eors	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
	t2 			^= state[1];
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3304      	adds	r3, #4
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018f8:	4053      	eors	r3, r2
 80018fa:	647b      	str	r3, [r7, #68]	; 0x44
	state[0]	= t2 ^ state[5];
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3314      	adds	r3, #20
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001904:	405a      	eors	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	601a      	str	r2, [r3, #0]
	state[3]	= t2 ^ t13;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	330c      	adds	r3, #12
 800190e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	404a      	eors	r2, r1
 8001914:	601a      	str	r2, [r3, #0]
	state[1]	= state[3] ^ state[5];
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	330c      	adds	r3, #12
 800191a:	6819      	ldr	r1, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3314      	adds	r3, #20
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3304      	adds	r3, #4
 8001926:	404a      	eors	r2, r1
 8001928:	601a      	str	r2, [r3, #0]
	//state[1] 	^= 0xffffffff;
	t0 			^= state[6];
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3318      	adds	r3, #24
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001932:	4053      	eors	r3, r2
 8001934:	64fb      	str	r3, [r7, #76]	; 0x4c
	state[5]	= t7 & state[7];
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	331c      	adds	r3, #28
 800193a:	6819      	ldr	r1, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3314      	adds	r3, #20
 8001940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001942:	400a      	ands	r2, r1
 8001944:	601a      	str	r2, [r3, #0]
	t14			= t4 ^ state[5];
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3314      	adds	r3, #20
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800194e:	4053      	eors	r3, r2
 8001950:	617b      	str	r3, [r7, #20]
	state[6]	= t1 ^ t14;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3318      	adds	r3, #24
 8001956:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	404a      	eors	r2, r1
 800195c:	601a      	str	r2, [r3, #0]
	state[6] 	^= t5; 
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3318      	adds	r3, #24
 8001962:	6819      	ldr	r1, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3318      	adds	r3, #24
 8001968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800196a:	404a      	eors	r2, r1
 800196c:	601a      	str	r2, [r3, #0]
	state[6] 	^= state[4];
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3318      	adds	r3, #24
 8001972:	6819      	ldr	r1, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3310      	adds	r3, #16
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3318      	adds	r3, #24
 800197e:	404a      	eors	r2, r1
 8001980:	601a      	str	r2, [r3, #0]
	state[2]	= t17 ^ state[6];
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3318      	adds	r3, #24
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3308      	adds	r3, #8
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	404a      	eors	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
	state[5]	= t15 ^ state[2];
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3308      	adds	r3, #8
 8001996:	6819      	ldr	r1, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3314      	adds	r3, #20
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	404a      	eors	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
	state[2] 	^= t6;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3308      	adds	r3, #8
 80019a6:	6819      	ldr	r1, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3308      	adds	r3, #8
 80019ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019ae:	404a      	eors	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3308      	adds	r3, #8
 80019b6:	6819      	ldr	r1, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3308      	adds	r3, #8
 80019bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019be:	404a      	eors	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]
	//state[2] 	^= 0xffffffff;
	t14 		^= t11;
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	4053      	eors	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]
	t0 			^= t14;
 80019ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	4053      	eors	r3, r2
 80019d0:	64fb      	str	r3, [r7, #76]	; 0x4c
	state[6] 	^= t0;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3318      	adds	r3, #24
 80019d6:	6819      	ldr	r1, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3318      	adds	r3, #24
 80019dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019de:	404a      	eors	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]
	//state[6] 	^= 0xffffffff;
	state[7]	= t1 ^ t0;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	331c      	adds	r3, #28
 80019e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80019e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019ea:	404a      	eors	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]
	//state[7] 	^= 0xffffffff;
	state[4]	= t14 ^ state[3]; 
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	330c      	adds	r3, #12
 80019f2:	6819      	ldr	r1, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3310      	adds	r3, #16
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	404a      	eors	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]
}
 80019fe:	bf00      	nop
 8001a00:	3754      	adds	r7, #84	; 0x54
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <double_shiftrows>:

/******************************************************************************
* Applies the ShiftRows transformation twice (i.e. SR^2) on the internal state.
******************************************************************************/
static void double_shiftrows(uint32_t* state) {
 8001a0a:	b480      	push	{r7}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
    uint32_t tmp;
	for(int i = 0; i < 8; i++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	e02a      	b.n	8001a6e <double_shiftrows+0x64>
        SWAPMOVE(state[i], state[i], 0x0f000f00, 4);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	440b      	add	r3, r1
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	4053      	eors	r3, r2
 8001a30:	f003 230f 	and.w	r3, r3, #251662080	; 0xf000f00
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	6819      	ldr	r1, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	4413      	add	r3, r2
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	404a      	eors	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	6819      	ldr	r1, [r3, #0]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	011a      	lsls	r2, r3, #4
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	4403      	add	r3, r0
 8001a64:	404a      	eors	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b07      	cmp	r3, #7
 8001a72:	ddd1      	ble.n	8001a18 <double_shiftrows+0xe>
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <mixcolumns_0>:
/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 0.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 0.
******************************************************************************/
static void mixcolumns_0(uint32_t* state) {
 8001a82:	b480      	push	{r7}
 8001a84:	b089      	sub	sp, #36	; 0x24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4;
	t3 = ROR(BYTE_ROR_6(state[0]),8);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	099b      	lsrs	r3, r3, #6
 8001a90:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001aa4:	61fb      	str	r3, [r7, #28]
	t0 = state[0] ^ t3;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	4053      	eors	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
	t1 = ROR(BYTE_ROR_6(state[7]),8);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	331c      	adds	r3, #28
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	099b      	lsrs	r3, r3, #6
 8001ab8:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	331c      	adds	r3, #28
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001ace:	617b      	str	r3, [r7, #20]
	t2 = state[7] ^ t1;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	331c      	adds	r3, #28
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4053      	eors	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
	state[7] = ROR(BYTE_ROR_4(t2),16) ^ t1 ^ t0;
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001aec:	4313      	orrs	r3, r2
 8001aee:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	ea82 0103 	eor.w	r1, r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	331c      	adds	r3, #28
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	404a      	eors	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[6]),8);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3318      	adds	r3, #24
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	099b      	lsrs	r3, r3, #6
 8001b0a:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3318      	adds	r3, #24
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001b20:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[6];
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3318      	adds	r3, #24
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	4053      	eors	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
	state[6] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	405a      	eors	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	ea82 0103 	eor.w	r1, r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3318      	adds	r3, #24
 8001b54:	404a      	eors	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[5]),8);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3314      	adds	r3, #20
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	099b      	lsrs	r3, r3, #6
 8001b60:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3314      	adds	r3, #20
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8001b70:	4313      	orrs	r3, r2
 8001b72:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001b76:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[5];
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3314      	adds	r3, #20
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4053      	eors	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
	state[5] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	ea82 0103 	eor.w	r1, r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	091b      	lsrs	r3, r3, #4
 8001b90:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3314      	adds	r3, #20
 8001ba6:	404a      	eors	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[4]),8);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3310      	adds	r3, #16
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	099b      	lsrs	r3, r3, #6
 8001bb2:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3310      	adds	r3, #16
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001bc8:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[4];
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3310      	adds	r3, #16
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	4053      	eors	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
	state[4] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	405a      	eors	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	ea82 0103 	eor.w	r1, r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3310      	adds	r3, #16
 8001bfc:	404a      	eors	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[3]),8);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	330c      	adds	r3, #12
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	099b      	lsrs	r3, r3, #6
 8001c08:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	330c      	adds	r3, #12
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001c1e:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[3];
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	330c      	adds	r3, #12
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4053      	eors	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
	state[3] = t4 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	405a      	eors	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	ea82 0103 	eor.w	r1, r2, r3
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	091b      	lsrs	r3, r3, #4
 8001c3c:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	330c      	adds	r3, #12
 8001c52:	404a      	eors	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[2]),8);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3308      	adds	r3, #8
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	099b      	lsrs	r3, r3, #6
 8001c5e:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3308      	adds	r3, #8
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001c74:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[2];
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3308      	adds	r3, #8
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	4053      	eors	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
	state[2] = t2 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	ea82 0103 	eor.w	r1, r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3308      	adds	r3, #8
 8001ca4:	404a      	eors	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[1]),8);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3304      	adds	r3, #4
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	099b      	lsrs	r3, r3, #6
 8001cb0:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001cc6:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[1];
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3304      	adds	r3, #4
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4053      	eors	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
	state[1] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	ea82 0103 	eor.w	r1, r2, r3
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	091b      	lsrs	r3, r3, #4
 8001ce0:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001cec:	4313      	orrs	r3, r2
 8001cee:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	404a      	eors	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]
	state[0] = t2 ^ t3 ^ ROR(BYTE_ROR_4(t0),16);
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	405a      	eors	r2, r3
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	091b      	lsrs	r3, r3, #4
 8001d04:	f003 310f 	and.w	r1, r3, #252645135	; 0xf0f0f0f
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001d10:	430b      	orrs	r3, r1
 8001d12:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001d16:	405a      	eors	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	601a      	str	r2, [r3, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	3724      	adds	r7, #36	; 0x24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <mixcolumns_1>:

/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for round i s.t. (i%4) == 1.
******************************************************************************/
static void mixcolumns_1(uint32_t* state) {
 8001d28:	b480      	push	{r7}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2;
	t0 = state[0] ^ ROR(BYTE_ROR_4(state[0]),8);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 310f 	and.w	r1, r3, #252645135	; 0xf0f0f0f
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001d4e:	4053      	eors	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]
	t1 = state[7] ^ ROR(BYTE_ROR_4(state[7]),8);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	331c      	adds	r3, #28
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	331c      	adds	r3, #28
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	091b      	lsrs	r3, r3, #4
 8001d60:	f003 310f 	and.w	r1, r3, #252645135	; 0xf0f0f0f
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	331c      	adds	r3, #28
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001d70:	430b      	orrs	r3, r1
 8001d72:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001d76:	4053      	eors	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
	t2 = state[6];
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	60fb      	str	r3, [r7, #12]
	state[6] = t1 ^ t0;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3318      	adds	r3, #24
 8001d84:	6939      	ldr	r1, [r7, #16]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	404a      	eors	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]
	state[7] ^= state[6] ^ ROR(t1,16);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	331c      	adds	r3, #28
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3318      	adds	r3, #24
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001d9e:	405a      	eors	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	331c      	adds	r3, #28
 8001da4:	404a      	eors	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001db8:	4313      	orrs	r3, r2
 8001dba:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001dbe:	613b      	str	r3, [r7, #16]
	state[6] ^= t1;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3318      	adds	r3, #24
 8001dc4:	6819      	ldr	r1, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3318      	adds	r3, #24
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	404a      	eors	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4053      	eors	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
	state[6] ^= ROR(t1,16);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3318      	adds	r3, #24
 8001ddc:	6819      	ldr	r1, [r3, #0]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3318      	adds	r3, #24
 8001de8:	404a      	eors	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]
	t2 = state[5];
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	60fb      	str	r3, [r7, #12]
	state[5] = t1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3314      	adds	r3, #20
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001e10:	613b      	str	r3, [r7, #16]
	state[5] ^= t1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3314      	adds	r3, #20
 8001e16:	6819      	ldr	r1, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3314      	adds	r3, #20
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	404a      	eors	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4053      	eors	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
	state[5] ^= ROR(t1,16);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3314      	adds	r3, #20
 8001e2e:	6819      	ldr	r1, [r3, #0]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3314      	adds	r3, #20
 8001e3a:	404a      	eors	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
	t2 = state[4];
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	60fb      	str	r3, [r7, #12]
	state[4] = t1 ^ t0;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3310      	adds	r3, #16
 8001e48:	6939      	ldr	r1, [r7, #16]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	404a      	eors	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001e60:	4313      	orrs	r3, r2
 8001e62:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001e66:	613b      	str	r3, [r7, #16]
	state[4] ^= t1;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3310      	adds	r3, #16
 8001e6c:	6819      	ldr	r1, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3310      	adds	r3, #16
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	404a      	eors	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4053      	eors	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
	state[4] ^= ROR(t1,16);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3310      	adds	r3, #16
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3310      	adds	r3, #16
 8001e90:	404a      	eors	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
	t2 = state[3];
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60fb      	str	r3, [r7, #12]
	state[3] = t1 ^ t0;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	330c      	adds	r3, #12
 8001e9e:	6939      	ldr	r1, [r7, #16]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	404a      	eors	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001ebc:	613b      	str	r3, [r7, #16]
	state[3] ^= t1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	330c      	adds	r3, #12
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	330c      	adds	r3, #12
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	404a      	eors	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4053      	eors	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
	state[3] ^= ROR(t1,16);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	330c      	adds	r3, #12
 8001eda:	6819      	ldr	r1, [r3, #0]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	330c      	adds	r3, #12
 8001ee6:	404a      	eors	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
	t2 = state[2];
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	60fb      	str	r3, [r7, #12]
	state[2] = t1;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3308      	adds	r3, #8
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	091b      	lsrs	r3, r3, #4
 8001efc:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001f0e:	613b      	str	r3, [r7, #16]
	state[2] ^= t1;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3308      	adds	r3, #8
 8001f14:	6819      	ldr	r1, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3308      	adds	r3, #8
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	404a      	eors	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4053      	eors	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
	state[2] ^= ROR(t1,16);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3308      	adds	r3, #8
 8001f2c:	6819      	ldr	r1, [r3, #0]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3308      	adds	r3, #8
 8001f38:	404a      	eors	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]
	t2 = state[1];
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	60fb      	str	r3, [r7, #12]
	state[1] = t1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3304      	adds	r3, #4
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001f60:	613b      	str	r3, [r7, #16]
	state[1] ^= t1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3304      	adds	r3, #4
 8001f66:	6819      	ldr	r1, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	404a      	eors	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4053      	eors	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
	state[1] ^= ROR(t1,16);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	404a      	eors	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
	t2 = state[0];
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]
	state[0] = t1;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001faa:	4313      	orrs	r3, r2
 8001fac:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001fb0:	613b      	str	r3, [r7, #16]
	state[0] ^= t1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	405a      	eors	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4053      	eors	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
	state[0] ^= ROR(t1,16);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001fd0:	405a      	eors	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	601a      	str	r2, [r3, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <mixcolumns_2>:

/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for rounds i s.t. (i%4) == 2.
******************************************************************************/
static void mixcolumns_2(uint32_t* state) {
 8001fe2:	b480      	push	{r7}
 8001fe4:	b089      	sub	sp, #36	; 0x24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4;
	t3 = ROR(BYTE_ROR_2(state[0]),8);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	019b      	lsls	r3, r3, #6
 8001ffa:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8001ffe:	4313      	orrs	r3, r2
 8002000:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002004:	61fb      	str	r3, [r7, #28]
	t0 = state[0] ^ t3;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	4053      	eors	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
	t1 = ROR(BYTE_ROR_2(state[7]),8);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	331c      	adds	r3, #28
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	331c      	adds	r3, #28
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	019b      	lsls	r3, r3, #6
 8002024:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8002028:	4313      	orrs	r3, r2
 800202a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800202e:	617b      	str	r3, [r7, #20]
	t2 = state[7] ^ t1;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	331c      	adds	r3, #28
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4053      	eors	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
	state[7] = ROR(BYTE_ROR_4(t2),16) ^ t1 ^ t0;
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800204c:	4313      	orrs	r3, r2
 800204e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	ea82 0103 	eor.w	r1, r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	331c      	adds	r3, #28
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	404a      	eors	r2, r1
 8002060:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[6]),8);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3318      	adds	r3, #24
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3318      	adds	r3, #24
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 800207a:	4313      	orrs	r3, r2
 800207c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002080:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[6];
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3318      	adds	r3, #24
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4053      	eors	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
	state[6] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	405a      	eors	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	ea82 0103 	eor.w	r1, r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80020aa:	4313      	orrs	r3, r2
 80020ac:	ea4f 4233 	mov.w	r2, r3, ror #16
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3318      	adds	r3, #24
 80020b4:	404a      	eors	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[5]),8);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3314      	adds	r3, #20
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3314      	adds	r3, #20
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	019b      	lsls	r3, r3, #6
 80020cc:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 80020d0:	4313      	orrs	r3, r2
 80020d2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80020d6:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[5];
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3314      	adds	r3, #20
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4053      	eors	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
	state[5] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	ea82 0103 	eor.w	r1, r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	091b      	lsrs	r3, r3, #4
 80020f0:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80020fc:	4313      	orrs	r3, r2
 80020fe:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3314      	adds	r3, #20
 8002106:	404a      	eors	r2, r1
 8002108:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[4]),8);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3310      	adds	r3, #16
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3310      	adds	r3, #16
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	019b      	lsls	r3, r3, #6
 800211e:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8002122:	4313      	orrs	r3, r2
 8002124:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002128:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[4];
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3310      	adds	r3, #16
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	4053      	eors	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
	state[4] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	405a      	eors	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	ea82 0103 	eor.w	r1, r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002152:	4313      	orrs	r3, r2
 8002154:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3310      	adds	r3, #16
 800215c:	404a      	eors	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[3]),8);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	330c      	adds	r3, #12
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	330c      	adds	r3, #12
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	019b      	lsls	r3, r3, #6
 8002174:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8002178:	4313      	orrs	r3, r2
 800217a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800217e:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[3];
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	330c      	adds	r3, #12
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4053      	eors	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
	state[3] = t4 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	405a      	eors	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	ea82 0103 	eor.w	r1, r2, r3
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80021a8:	4313      	orrs	r3, r2
 80021aa:	ea4f 4233 	mov.w	r2, r3, ror #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	330c      	adds	r3, #12
 80021b2:	404a      	eors	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[2]),8);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3308      	adds	r3, #8
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3308      	adds	r3, #8
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	019b      	lsls	r3, r3, #6
 80021ca:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 80021ce:	4313      	orrs	r3, r2
 80021d0:	ea4f 2333 	mov.w	r3, r3, ror #8
 80021d4:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[2];
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3308      	adds	r3, #8
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	4053      	eors	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
	state[2] = t2 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	ea82 0103 	eor.w	r1, r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80021fa:	4313      	orrs	r3, r2
 80021fc:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3308      	adds	r3, #8
 8002204:	404a      	eors	r2, r1
 8002206:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[1]),8);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3304      	adds	r3, #4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	089b      	lsrs	r3, r3, #2
 8002210:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3304      	adds	r3, #4
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	019b      	lsls	r3, r3, #6
 800221c:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8002220:	4313      	orrs	r3, r2
 8002222:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002226:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[1];
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3304      	adds	r3, #4
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4053      	eors	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
	state[1] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	ea82 0103 	eor.w	r1, r2, r3
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	091b      	lsrs	r3, r3, #4
 8002240:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800224c:	4313      	orrs	r3, r2
 800224e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	404a      	eors	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
	state[0] = t2 ^ t3 ^ ROR(BYTE_ROR_4(t0),16);
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	405a      	eors	r2, r3
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	f003 310f 	and.w	r1, r3, #252645135	; 0xf0f0f0f
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002270:	430b      	orrs	r3, r1
 8002272:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002276:	405a      	eors	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	601a      	str	r2, [r3, #0]
}
 800227c:	bf00      	nop
 800227e:	3724      	adds	r7, #36	; 0x24
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <mixcolumns_3>:
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 3.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 1.
* Based on Käsper-Schwabe, similar to https://github.com/Ko-/aes-armcortexm.
******************************************************************************/
static void mixcolumns_3(uint32_t* state) {
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2;
	t0 = state[7] ^ ROR(state[7],8);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	331c      	adds	r3, #28
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	331c      	adds	r3, #28
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	ea4f 2333 	mov.w	r3, r3, ror #8
 80022a0:	4053      	eors	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
	t2 = state[0] ^ ROR(state[0],8);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	ea4f 2333 	mov.w	r3, r3, ror #8
 80022b0:	4053      	eors	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
	state[7] = t2 ^ ROR(state[7], 8) ^ ROR(t0, 16);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	331c      	adds	r3, #28
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	ea4f 2233 	mov.w	r2, r3, ror #8
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	ea82 0103 	eor.w	r1, r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	ea4f 4233 	mov.w	r2, r3, ror #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	331c      	adds	r3, #28
 80022ce:	404a      	eors	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]
	t1 = state[6] ^ ROR(state[6],8);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3318      	adds	r3, #24
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3318      	adds	r3, #24
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	ea4f 2333 	mov.w	r3, r3, ror #8
 80022e2:	4053      	eors	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
	state[6] = t0 ^ t2 ^ ROR(state[6], 8) ^ ROR(t1,16);
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	405a      	eors	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3318      	adds	r3, #24
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80022f6:	ea82 0103 	eor.w	r1, r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3318      	adds	r3, #24
 8002304:	404a      	eors	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
	t0 = state[5] ^ ROR(state[5],8);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3314      	adds	r3, #20
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3314      	adds	r3, #20
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002318:	4053      	eors	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
	state[5] = t1 ^ ROR(state[5],8) ^ ROR(t0,16);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3314      	adds	r3, #20
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	ea82 0103 	eor.w	r1, r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3314      	adds	r3, #20
 8002336:	404a      	eors	r2, r1
 8002338:	601a      	str	r2, [r3, #0]
	t1 = state[4] ^ ROR(state[4],8);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3310      	adds	r3, #16
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3310      	adds	r3, #16
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	ea4f 2333 	mov.w	r3, r3, ror #8
 800234a:	4053      	eors	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
	state[4] = t0 ^ t2 ^ ROR(state[4],8) ^ ROR(t1,16);
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	405a      	eors	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3310      	adds	r3, #16
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800235e:	ea82 0103 	eor.w	r1, r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3310      	adds	r3, #16
 800236c:	404a      	eors	r2, r1
 800236e:	601a      	str	r2, [r3, #0]
	t0 = state[3] ^ ROR(state[3],8);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	330c      	adds	r3, #12
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	330c      	adds	r3, #12
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002380:	4053      	eors	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
	state[3] = t1 ^ t2 ^ ROR(state[3],8) ^ ROR(t0,16);
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	405a      	eors	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	330c      	adds	r3, #12
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002394:	ea82 0103 	eor.w	r1, r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	ea4f 4233 	mov.w	r2, r3, ror #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	330c      	adds	r3, #12
 80023a2:	404a      	eors	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]
	t1 = state[2] ^ ROR(state[2],8);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3308      	adds	r3, #8
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3308      	adds	r3, #8
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80023b6:	4053      	eors	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
	state[2] = t0 ^ ROR(state[2],8) ^ ROR(t1,16);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3308      	adds	r3, #8
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	ea4f 2233 	mov.w	r2, r3, ror #8
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	ea82 0103 	eor.w	r1, r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	ea4f 4233 	mov.w	r2, r3, ror #16
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3308      	adds	r3, #8
 80023d4:	404a      	eors	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]
	t0 = state[1] ^ ROR(state[1],8);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3304      	adds	r3, #4
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80023e8:	4053      	eors	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
	state[1] = t1 ^ ROR(state[1],8) ^ ROR(t0,16);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3304      	adds	r3, #4
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	ea4f 2233 	mov.w	r2, r3, ror #8
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	ea82 0103 	eor.w	r1, r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3304      	adds	r3, #4
 8002406:	404a      	eors	r2, r1
 8002408:	601a      	str	r2, [r3, #0]
	state[0] = t0 ^ ROR(state[0],8) ^ ROR(t2,16);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	405a      	eors	r2, r3
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	ea4f 4333 	mov.w	r3, r3, ror #16
 800241c:	405a      	eors	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	601a      	str	r2, [r3, #0]
}
 8002422:	bf00      	nop
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 800242e:	b580      	push	{r7, lr}
 8002430:	b08c      	sub	sp, #48	; 0x30
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fb98 	bl	8000b7a <packing>
	ark(state, rkeys_ffs); 				// key whitening
 800244a:	f107 0310 	add.w	r3, r7, #16
 800244e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe ffd6 	bl	8001402 <ark>
	sbox(state); 						// 1st round
 8002456:	f107 0310 	add.w	r3, r7, #16
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fff6 	bl	800144c <sbox>
	mixcolumns_0(state); 				// 1st round
 8002460:	f107 0310 	add.w	r3, r7, #16
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fb0c 	bl	8001a82 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 800246a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246c:	f103 0220 	add.w	r2, r3, #32
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe ffc3 	bl	8001402 <ark>
	sbox(state); 						// 2nd round
 800247c:	f107 0310 	add.w	r3, r7, #16
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe ffe3 	bl	800144c <sbox>
	mixcolumns_1(state); 				// 2nd round
 8002486:	f107 0310 	add.w	r3, r7, #16
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fc4c 	bl	8001d28 <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 8002490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002492:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002496:	f107 0310 	add.w	r3, r7, #16
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe ffb0 	bl	8001402 <ark>
	sbox(state); 						// 3rd round
 80024a2:	f107 0310 	add.w	r3, r7, #16
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe ffd0 	bl	800144c <sbox>
	mixcolumns_2(state); 				// 3rd round
 80024ac:	f107 0310 	add.w	r3, r7, #16
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fd96 	bl	8001fe2 <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 80024b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b8:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe ff9d 	bl	8001402 <ark>
	sbox(state); 						// 4th round
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe ffbd 	bl	800144c <sbox>
	mixcolumns_3(state); 				// 4th round
 80024d2:	f107 0310 	add.w	r3, r7, #16
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fed6 	bl	8002288 <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 80024dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024de:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe ff8a 	bl	8001402 <ark>
	sbox(state); 						// 5th round
 80024ee:	f107 0310 	add.w	r3, r7, #16
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe ffaa 	bl	800144c <sbox>
	mixcolumns_0(state); 				// 5th round
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fac0 	bl	8001a82 <mixcolumns_0>
	ark(state, rkeys_ffs + 40); 		// 5th round
 8002502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002504:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8002508:	f107 0310 	add.w	r3, r7, #16
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe ff77 	bl	8001402 <ark>
	sbox(state);						// 6th round
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe ff97 	bl	800144c <sbox>
	mixcolumns_1(state); 				// 6th round
 800251e:	f107 0310 	add.w	r3, r7, #16
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fc00 	bl	8001d28 <mixcolumns_1>
	ark(state, rkeys_ffs + 48); 		// 6th round
 8002528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252a:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 800252e:	f107 0310 	add.w	r3, r7, #16
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe ff64 	bl	8001402 <ark>
	sbox(state); 						// 7th round
 800253a:	f107 0310 	add.w	r3, r7, #16
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe ff84 	bl	800144c <sbox>
	mixcolumns_2(state); 				// 7th round
 8002544:	f107 0310 	add.w	r3, r7, #16
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fd4a 	bl	8001fe2 <mixcolumns_2>
	ark(state, rkeys_ffs + 56); 		// 7th round
 800254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002550:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8002554:	f107 0310 	add.w	r3, r7, #16
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe ff51 	bl	8001402 <ark>
	sbox(state); 						// 8th round
 8002560:	f107 0310 	add.w	r3, r7, #16
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe ff71 	bl	800144c <sbox>
	mixcolumns_3(state); 				// 8th round
 800256a:	f107 0310 	add.w	r3, r7, #16
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fe8a 	bl	8002288 <mixcolumns_3>
	ark(state, rkeys_ffs + 64); 		// 8th round
 8002574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002576:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800257a:	f107 0310 	add.w	r3, r7, #16
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe ff3e 	bl	8001402 <ark>
	sbox(state); 						// 9th round
 8002586:	f107 0310 	add.w	r3, r7, #16
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe ff5e 	bl	800144c <sbox>
	mixcolumns_0(state); 				// 9th round
 8002590:	f107 0310 	add.w	r3, r7, #16
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fa74 	bl	8001a82 <mixcolumns_0>
	ark(state, rkeys_ffs + 72); 		// 9th round
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	f503 7290 	add.w	r2, r3, #288	; 0x120
 80025a0:	f107 0310 	add.w	r3, r7, #16
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe ff2b 	bl	8001402 <ark>
	sbox(state); 						// 10th round
 80025ac:	f107 0310 	add.w	r3, r7, #16
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe ff4b 	bl	800144c <sbox>
	double_shiftrows(state); 			// 10th round (resynchronization)
 80025b6:	f107 0310 	add.w	r3, r7, #16
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fa25 	bl	8001a0a <double_shiftrows>
	ark(state, rkeys_ffs + 80); 		// 10th round
 80025c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80025c6:	f107 0310 	add.w	r3, r7, #16
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe ff18 	bl	8001402 <ark>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 80025d2:	f107 0310 	add.w	r3, r7, #16
 80025d6:	461a      	mov	r2, r3
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7fe fccc 	bl	8000f78 <unpacking>
}
 80025e0:	bf00      	nop
 80025e2:	3730      	adds	r7, #48	; 0x30
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <two_Rounds_aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void two_Rounds_aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08c      	sub	sp, #48	; 0x30
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 80025f6:	f107 0310 	add.w	r3, r7, #16
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fabb 	bl	8000b7a <packing>
	ark(state, rkeys_ffs); 				// key whitening
 8002604:	f107 0310 	add.w	r3, r7, #16
 8002608:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fef9 	bl	8001402 <ark>
	sbox(state); 						// 1st round
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe ff19 	bl	800144c <sbox>
	mixcolumns_0(state); 				// 1st round
 800261a:	f107 0310 	add.w	r3, r7, #16
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fa2f 	bl	8001a82 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 8002624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002626:	f103 0220 	add.w	r2, r3, #32
 800262a:	f107 0310 	add.w	r3, r7, #16
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fee6 	bl	8001402 <ark>
	sbox(state); 						// 2nd round
 8002636:	f107 0310 	add.w	r3, r7, #16
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe ff06 	bl	800144c <sbox>
	mixcolumns_1(state); 				// 2nd round
 8002640:	f107 0310 	add.w	r3, r7, #16
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fb6f 	bl	8001d28 <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 800264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe fed3 	bl	8001402 <ark>
	double_shiftrows(state); 			// 10th round (resynchronization)
 800265c:	f107 0310 	add.w	r3, r7, #16
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff f9d2 	bl	8001a0a <double_shiftrows>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 8002666:	f107 0310 	add.w	r3, r7, #16
 800266a:	461a      	mov	r2, r3
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f7fe fc82 	bl	8000f78 <unpacking>
}
 8002674:	bf00      	nop
 8002676:	3730      	adds	r7, #48	; 0x30
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <four_Rounds_aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void four_Rounds_aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 800267c:	b580      	push	{r7, lr}
 800267e:	b08c      	sub	sp, #48	; 0x30
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 800268a:	f107 0310 	add.w	r3, r7, #16
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fa71 	bl	8000b7a <packing>
	ark(state, rkeys_ffs); 				// key whitening
 8002698:	f107 0310 	add.w	r3, r7, #16
 800269c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe feaf 	bl	8001402 <ark>
	sbox(state); 						// 1st round
 80026a4:	f107 0310 	add.w	r3, r7, #16
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe fecf 	bl	800144c <sbox>
	mixcolumns_0(state); 				// 1st round
 80026ae:	f107 0310 	add.w	r3, r7, #16
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff f9e5 	bl	8001a82 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 80026b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ba:	f103 0220 	add.w	r2, r3, #32
 80026be:	f107 0310 	add.w	r3, r7, #16
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe fe9c 	bl	8001402 <ark>
	sbox(state); 						// 2nd round
 80026ca:	f107 0310 	add.w	r3, r7, #16
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe febc 	bl	800144c <sbox>
	mixcolumns_1(state); 				// 2nd round
 80026d4:	f107 0310 	add.w	r3, r7, #16
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fb25 	bl	8001d28 <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80026e4:	f107 0310 	add.w	r3, r7, #16
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fe89 	bl	8001402 <ark>
	sbox(state); 						// 3rd round
 80026f0:	f107 0310 	add.w	r3, r7, #16
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fea9 	bl	800144c <sbox>
	mixcolumns_2(state); 				// 3rd round
 80026fa:	f107 0310 	add.w	r3, r7, #16
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fc6f 	bl	8001fe2 <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 8002704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002706:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800270a:	f107 0310 	add.w	r3, r7, #16
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f7fe fe76 	bl	8001402 <ark>
	sbox(state); 						// 4th round
 8002716:	f107 0310 	add.w	r3, r7, #16
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe fe96 	bl	800144c <sbox>
	mixcolumns_3(state); 				// 4th round
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fdaf 	bl	8002288 <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 800272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fe63 	bl	8001402 <ark>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 800273c:	f107 0310 	add.w	r3, r7, #16
 8002740:	461a      	mov	r2, r3
 8002742:	68b9      	ldr	r1, [r7, #8]
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f7fe fc17 	bl	8000f78 <unpacking>
}
 800274a:	bf00      	nop
 800274c:	3730      	adds	r7, #48	; 0x30
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <six_Rounds_aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void six_Rounds_aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 8002752:	b580      	push	{r7, lr}
 8002754:	b08c      	sub	sp, #48	; 0x30
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 8002760:	f107 0310 	add.w	r3, r7, #16
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4618      	mov	r0, r3
 800276a:	f7fe fa06 	bl	8000b7a <packing>
	ark(state, rkeys_ffs); 				// key whitening
 800276e:	f107 0310 	add.w	r3, r7, #16
 8002772:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe fe44 	bl	8001402 <ark>
	sbox(state); 						// 1st round
 800277a:	f107 0310 	add.w	r3, r7, #16
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fe64 	bl	800144c <sbox>
	mixcolumns_0(state); 				// 1st round
 8002784:	f107 0310 	add.w	r3, r7, #16
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff f97a 	bl	8001a82 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 800278e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002790:	f103 0220 	add.w	r2, r3, #32
 8002794:	f107 0310 	add.w	r3, r7, #16
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fe31 	bl	8001402 <ark>
	sbox(state); 						// 2nd round
 80027a0:	f107 0310 	add.w	r3, r7, #16
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fe51 	bl	800144c <sbox>
	mixcolumns_1(state); 				// 2nd round
 80027aa:	f107 0310 	add.w	r3, r7, #16
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff faba 	bl	8001d28 <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 80027b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80027ba:	f107 0310 	add.w	r3, r7, #16
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe fe1e 	bl	8001402 <ark>
	sbox(state); 						// 3rd round
 80027c6:	f107 0310 	add.w	r3, r7, #16
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fe3e 	bl	800144c <sbox>
	mixcolumns_2(state); 				// 3rd round
 80027d0:	f107 0310 	add.w	r3, r7, #16
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fc04 	bl	8001fe2 <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 80027da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027dc:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80027e0:	f107 0310 	add.w	r3, r7, #16
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fe0b 	bl	8001402 <ark>
	sbox(state); 						// 4th round
 80027ec:	f107 0310 	add.w	r3, r7, #16
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fe2b 	bl	800144c <sbox>
	mixcolumns_3(state); 				// 4th round
 80027f6:	f107 0310 	add.w	r3, r7, #16
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff fd44 	bl	8002288 <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 8002800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002802:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002806:	f107 0310 	add.w	r3, r7, #16
 800280a:	4611      	mov	r1, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fdf8 	bl	8001402 <ark>
	sbox(state); 						// 5th round
 8002812:	f107 0310 	add.w	r3, r7, #16
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fe18 	bl	800144c <sbox>
	mixcolumns_0(state); 				// 5th round
 800281c:	f107 0310 	add.w	r3, r7, #16
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff f92e 	bl	8001a82 <mixcolumns_0>
	ark(state, rkeys_ffs + 40); 		// 5th round
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fde5 	bl	8001402 <ark>
	sbox(state);						// 6th round
 8002838:	f107 0310 	add.w	r3, r7, #16
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe fe05 	bl	800144c <sbox>
	mixcolumns_1(state); 				// 6th round
 8002842:	f107 0310 	add.w	r3, r7, #16
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fa6e 	bl	8001d28 <mixcolumns_1>
	ark(state, rkeys_ffs + 48); 		// 6th round
 800284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284e:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 8002852:	f107 0310 	add.w	r3, r7, #16
 8002856:	4611      	mov	r1, r2
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe fdd2 	bl	8001402 <ark>
	double_shiftrows(state); 			// 10th round (resynchronization)
 800285e:	f107 0310 	add.w	r3, r7, #16
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff f8d1 	bl	8001a0a <double_shiftrows>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 8002868:	f107 0310 	add.w	r3, r7, #16
 800286c:	461a      	mov	r2, r3
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f7fe fb81 	bl	8000f78 <unpacking>
}
 8002876:	bf00      	nop
 8002878:	3730      	adds	r7, #48	; 0x30
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <eigth_Rounds_aes128_encrypt_ffs>:


void eigth_Rounds_aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 800287e:	b580      	push	{r7, lr}
 8002880:	b08c      	sub	sp, #48	; 0x30
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe f970 	bl	8000b7a <packing>
	ark(state, rkeys_ffs); 				// key whitening
 800289a:	f107 0310 	add.w	r3, r7, #16
 800289e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fdae 	bl	8001402 <ark>
	sbox(state); 						// 1st round
 80028a6:	f107 0310 	add.w	r3, r7, #16
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fdce 	bl	800144c <sbox>
	mixcolumns_0(state); 				// 1st round
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff f8e4 	bl	8001a82 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 80028ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028bc:	f103 0220 	add.w	r2, r3, #32
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fd9b 	bl	8001402 <ark>
	sbox(state); 						// 2nd round
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe fdbb 	bl	800144c <sbox>
	mixcolumns_1(state); 				// 2nd round
 80028d6:	f107 0310 	add.w	r3, r7, #16
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fa24 	bl	8001d28 <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 80028e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80028e6:	f107 0310 	add.w	r3, r7, #16
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe fd88 	bl	8001402 <ark>
	sbox(state); 						// 3rd round
 80028f2:	f107 0310 	add.w	r3, r7, #16
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fda8 	bl	800144c <sbox>
	mixcolumns_2(state); 				// 3rd round
 80028fc:	f107 0310 	add.w	r3, r7, #16
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fb6e 	bl	8001fe2 <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800290c:	f107 0310 	add.w	r3, r7, #16
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fd75 	bl	8001402 <ark>
	sbox(state); 						// 4th round
 8002918:	f107 0310 	add.w	r3, r7, #16
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe fd95 	bl	800144c <sbox>
	mixcolumns_3(state); 				// 4th round
 8002922:	f107 0310 	add.w	r3, r7, #16
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fcae 	bl	8002288 <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 800292c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002932:	f107 0310 	add.w	r3, r7, #16
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fd62 	bl	8001402 <ark>
	sbox(state); 						// 5th round
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fd82 	bl	800144c <sbox>
	mixcolumns_0(state); 				// 5th round
 8002948:	f107 0310 	add.w	r3, r7, #16
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff f898 	bl	8001a82 <mixcolumns_0>
	ark(state, rkeys_ffs + 40); 		// 5th round
 8002952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002954:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8002958:	f107 0310 	add.w	r3, r7, #16
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fd4f 	bl	8001402 <ark>
	sbox(state);						// 6th round
 8002964:	f107 0310 	add.w	r3, r7, #16
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fd6f 	bl	800144c <sbox>
	mixcolumns_1(state); 				// 6th round
 800296e:	f107 0310 	add.w	r3, r7, #16
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff f9d8 	bl	8001d28 <mixcolumns_1>
	ark(state, rkeys_ffs + 48); 		// 6th round
 8002978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297a:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 800297e:	f107 0310 	add.w	r3, r7, #16
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe fd3c 	bl	8001402 <ark>
	sbox(state); 						// 7th round
 800298a:	f107 0310 	add.w	r3, r7, #16
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fd5c 	bl	800144c <sbox>
	mixcolumns_2(state); 				// 7th round
 8002994:	f107 0310 	add.w	r3, r7, #16
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fb22 	bl	8001fe2 <mixcolumns_2>
	ark(state, rkeys_ffs + 56); 		// 7th round
 800299e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a0:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 80029a4:	f107 0310 	add.w	r3, r7, #16
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fd29 	bl	8001402 <ark>
	sbox(state); 						// 8th round
 80029b0:	f107 0310 	add.w	r3, r7, #16
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe fd49 	bl	800144c <sbox>
	mixcolumns_3(state); 				// 8th round
 80029ba:	f107 0310 	add.w	r3, r7, #16
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fc62 	bl	8002288 <mixcolumns_3>
	ark(state, rkeys_ffs + 64); 		// 8th round
 80029c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c6:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80029ca:	f107 0310 	add.w	r3, r7, #16
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe fd16 	bl	8001402 <ark>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 80029d6:	f107 0310 	add.w	r3, r7, #16
 80029da:	461a      	mov	r2, r3
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f7fe faca 	bl	8000f78 <unpacking>
 80029e4:	bf00      	nop
 80029e6:	3730      	adds	r7, #48	; 0x30
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <inv_shiftrows_1>:


/******************************************************************************
* Applies ShiftRows^(-1) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_1(uint32_t* rkey) {
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++) {
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e052      	b.n	8002aa0 <inv_shiftrows_1+0xb4>
		SWAPMOVE(rkey[i], rkey[i], 0x0c0f0300, 4);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	440b      	add	r3, r1
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	405a      	eors	r2, r3
 8002a12:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <inv_shiftrows_1+0xc8>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4413      	add	r3, r2
 8002a20:	6819      	ldr	r1, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	404a      	eors	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	4413      	add	r3, r2
 8002a38:	6819      	ldr	r1, [r3, #0]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	011a      	lsls	r2, r3, #4
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	4403      	add	r3, r0
 8002a46:	404a      	eors	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]
		SWAPMOVE(rkey[i], rkey[i], 0x33003300, 2);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	440b      	add	r3, r1
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	4053      	eors	r3, r2
 8002a62:	f003 2333 	and.w	r3, r3, #855651072	; 0x33003300
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	6819      	ldr	r1, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	404a      	eors	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	4413      	add	r3, r2
 8002a88:	6819      	ldr	r1, [r3, #0]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	009a      	lsls	r2, r3, #2
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4403      	add	r3, r0
 8002a96:	404a      	eors	r2, r1
 8002a98:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b07      	cmp	r3, #7
 8002aa4:	dda9      	ble.n	80029fa <inv_shiftrows_1+0xe>
	}
}
 8002aa6:	bf00      	nop
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	0c0f0300 	.word	0x0c0f0300

08002ab8 <inv_shiftrows_2>:
/******************************************************************************
* Applies ShiftRows^(-2) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_2(uint32_t* rkey) {
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	e02a      	b.n	8002b1c <inv_shiftrows_2+0x64>
		SWAPMOVE(rkey[i], rkey[i], 0x0f000f00, 4);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	440b      	add	r3, r1
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	4053      	eors	r3, r2
 8002ade:	f003 230f 	and.w	r3, r3, #251662080	; 0xf000f00
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	6819      	ldr	r1, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	404a      	eors	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	4413      	add	r3, r2
 8002b04:	6819      	ldr	r1, [r3, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	011a      	lsls	r2, r3, #4
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4403      	add	r3, r0
 8002b12:	404a      	eors	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b07      	cmp	r3, #7
 8002b20:	ddd1      	ble.n	8002ac6 <inv_shiftrows_2+0xe>
}
 8002b22:	bf00      	nop
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <inv_shiftrows_3>:

/******************************************************************************
* Applies ShiftRows^(-3) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_3(uint32_t* rkey) {
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++) {
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e052      	b.n	8002be4 <inv_shiftrows_3+0xb4>
		SWAPMOVE(rkey[i], rkey[i], 0x030f0c00, 4);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	440b      	add	r3, r1
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	405a      	eors	r2, r3
 8002b56:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <inv_shiftrows_3+0xc8>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	6819      	ldr	r1, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	404a      	eors	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	6819      	ldr	r1, [r3, #0]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	011a      	lsls	r2, r3, #4
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	4403      	add	r3, r0
 8002b8a:	404a      	eors	r2, r1
 8002b8c:	601a      	str	r2, [r3, #0]
		SWAPMOVE(rkey[i], rkey[i], 0x33003300, 2);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	440b      	add	r3, r1
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	089b      	lsrs	r3, r3, #2
 8002ba4:	4053      	eors	r3, r2
 8002ba6:	f003 2333 	and.w	r3, r3, #855651072	; 0x33003300
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	6819      	ldr	r1, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	404a      	eors	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	4413      	add	r3, r2
 8002bcc:	6819      	ldr	r1, [r3, #0]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	009a      	lsls	r2, r3, #2
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4403      	add	r3, r0
 8002bda:	404a      	eors	r2, r1
 8002bdc:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3301      	adds	r3, #1
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b07      	cmp	r3, #7
 8002be8:	dda9      	ble.n	8002b3e <inv_shiftrows_3+0xe>
	}
}
 8002bea:	bf00      	nop
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	030f0c00 	.word	0x030f0c00

08002bfc <xor_columns>:
* involved in the XOR computation (should be 8 and 16 for AES-128 and AES-256,
* respectively).
* The idx_ror parameter refers to the rotation value. When a Rotword is applied
* the value should be 2, 26 otherwise.
******************************************************************************/
static void xor_columns(uint32_t* rkeys, int idx_xor, int idx_ror) {
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
	rkeys[1] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3304      	adds	r3, #4
 8002c12:	43d2      	mvns	r2, r2
 8002c14:	601a      	str	r2, [r3, #0]
	rkeys[2] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3308      	adds	r3, #8
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3308      	adds	r3, #8
 8002c20:	43d2      	mvns	r2, r2
 8002c22:	601a      	str	r2, [r3, #0]
	rkeys[6] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3318      	adds	r3, #24
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3318      	adds	r3, #24
 8002c2e:	43d2      	mvns	r2, r2
 8002c30:	601a      	str	r2, [r3, #0]
	rkeys[7] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	331c      	adds	r3, #28
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	331c      	adds	r3, #28
 8002c3c:	43d2      	mvns	r2, r2
 8002c3e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e06a      	b.n	8002d1c <xor_columns+0x120>
		rkeys[i] = (rkeys[i-idx_xor] ^ ROR(rkeys[i], idx_ror))  & 0xc0c0c0c0;
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4413      	add	r3, r2
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	68f9      	ldr	r1, [r7, #12]
 8002c5a:	440b      	add	r3, r1
 8002c5c:	6819      	ldr	r1, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	fa61 f303 	ror.w	r3, r1, r3
 8002c64:	405a      	eors	r2, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	68f9      	ldr	r1, [r7, #12]
 8002c6c:	440b      	add	r3, r1
 8002c6e:	f002 32c0 	and.w	r2, r2, #3233857728	; 0xc0c0c0c0
 8002c72:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x30303030);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	6819      	ldr	r1, [r3, #0]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4413      	add	r3, r2
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	4403      	add	r3, r0
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	4053      	eors	r3, r2
 8002c9a:	f003 3230 	and.w	r2, r3, #808464432	; 0x30303030
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	4403      	add	r3, r0
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x0c0c0c0c);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	6819      	ldr	r1, [r3, #0]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	4403      	add	r3, r0
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	4053      	eors	r3, r2
 8002cd0:	f003 320c 	and.w	r2, r3, #202116108	; 0xc0c0c0c
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	4403      	add	r3, r0
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x03030303);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	6819      	ldr	r1, [r3, #0]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	4403      	add	r3, r0
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	089b      	lsrs	r3, r3, #2
 8002d04:	4053      	eors	r3, r2
 8002d06:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	4403      	add	r3, r0
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b07      	cmp	r3, #7
 8002d20:	dd91      	ble.n	8002c46 <xor_columns+0x4a>
	}
}
 8002d22:	bf00      	nop
 8002d24:	bf00      	nop
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <aes128_keyschedule_ffs>:
* Fully bitsliced AES-128 key schedule to match the fully-fixsliced (ffs)
* representation. Note that it is possible to pass two different keys as input
* parameters if one wants to encrypt 2 blocks with two different keys.
******************************************************************************/
void aes128_keyschedule_ffs(uint32_t* rkeys, const unsigned char* key0,
						const unsigned char* key1) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
	packing(rkeys, key0, key1); 	// packs the keys into the bitsliced state
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7fd ff1a 	bl	8000b7a <packing>
	memcpy(rkeys+8, rkeys, 32);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3320      	adds	r3, #32
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	68f9      	ldr	r1, [r7, #12]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 ff7e 	bl	8006c50 <memcpy>
	sbox(rkeys+8);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3320      	adds	r3, #32
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe fb77 	bl	800144c <sbox>
	rkeys[15] ^= 0x00000300; 		// 1st rconst
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	333c      	adds	r3, #60	; 0x3c
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	333c      	adds	r3, #60	; 0x3c
 8002d68:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002d6c:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+8, 8, 2); 	// Rotword and XOR between the columns
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3320      	adds	r3, #32
 8002d72:	2202      	movs	r2, #2
 8002d74:	2108      	movs	r1, #8
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ff40 	bl	8002bfc <xor_columns>
	memcpy(rkeys+16, rkeys+8, 32);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	3320      	adds	r3, #32
 8002d86:	2220      	movs	r2, #32
 8002d88:	4619      	mov	r1, r3
 8002d8a:	f003 ff61 	bl	8006c50 <memcpy>
	sbox(rkeys+16);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3340      	adds	r3, #64	; 0x40
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe fb5a 	bl	800144c <sbox>
	rkeys[22] ^= 0x00000300;		// 2nd rconst
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	3358      	adds	r3, #88	; 0x58
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3358      	adds	r3, #88	; 0x58
 8002da2:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002da6:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+16, 8, 2); 	// Rotword and XOR between the columns
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3340      	adds	r3, #64	; 0x40
 8002dac:	2202      	movs	r2, #2
 8002dae:	2108      	movs	r1, #8
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff23 	bl	8002bfc <xor_columns>
	inv_shiftrows_1(rkeys+8); 		// to match fixslicing
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3320      	adds	r3, #32
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fe16 	bl	80029ec <inv_shiftrows_1>
	memcpy(rkeys+24, rkeys+16, 32);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3340      	adds	r3, #64	; 0x40
 8002dca:	2220      	movs	r2, #32
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f003 ff3f 	bl	8006c50 <memcpy>
	sbox(rkeys+24);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3360      	adds	r3, #96	; 0x60
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe fb38 	bl	800144c <sbox>
	rkeys[29] ^= 0x00000300;		// 3rd rconst
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3374      	adds	r3, #116	; 0x74
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3374      	adds	r3, #116	; 0x74
 8002de6:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002dea:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+24, 8, 2); 	// Rotword and XOR between the columns
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3360      	adds	r3, #96	; 0x60
 8002df0:	2202      	movs	r2, #2
 8002df2:	2108      	movs	r1, #8
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff01 	bl	8002bfc <xor_columns>
	inv_shiftrows_2(rkeys+16); 		// to match fixslicing
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3340      	adds	r3, #64	; 0x40
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fe5a 	bl	8002ab8 <inv_shiftrows_2>
	memcpy(rkeys+32, rkeys+24, 32);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3360      	adds	r3, #96	; 0x60
 8002e0e:	2220      	movs	r2, #32
 8002e10:	4619      	mov	r1, r3
 8002e12:	f003 ff1d 	bl	8006c50 <memcpy>
	sbox(rkeys+32);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3380      	adds	r3, #128	; 0x80
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fb16 	bl	800144c <sbox>
	rkeys[36] ^= 0x00000300; 		// 4th rconst
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3390      	adds	r3, #144	; 0x90
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3390      	adds	r3, #144	; 0x90
 8002e2a:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002e2e:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+32, 8, 2); 	// Rotword and XOR between the columns
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3380      	adds	r3, #128	; 0x80
 8002e34:	2202      	movs	r2, #2
 8002e36:	2108      	movs	r1, #8
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fedf 	bl	8002bfc <xor_columns>
	inv_shiftrows_3(rkeys+24); 		// to match fixslicing
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3360      	adds	r3, #96	; 0x60
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fe74 	bl	8002b30 <inv_shiftrows_3>
	memcpy(rkeys+40, rkeys+32, 32);	
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3380      	adds	r3, #128	; 0x80
 8002e52:	2220      	movs	r2, #32
 8002e54:	4619      	mov	r1, r3
 8002e56:	f003 fefb 	bl	8006c50 <memcpy>
	sbox(rkeys+40);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	33a0      	adds	r3, #160	; 0xa0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe faf4 	bl	800144c <sbox>
	rkeys[43] ^= 0x00000300; 		// 5th rconst
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	33ac      	adds	r3, #172	; 0xac
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	33ac      	adds	r3, #172	; 0xac
 8002e6e:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002e72:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+40, 8, 2); 	// Rotword and XOR between the columns
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	33a0      	adds	r3, #160	; 0xa0
 8002e78:	2202      	movs	r2, #2
 8002e7a:	2108      	movs	r1, #8
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff febd 	bl	8002bfc <xor_columns>
	memcpy(rkeys+48, rkeys+40, 32);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	33a0      	adds	r3, #160	; 0xa0
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f003 fede 	bl	8006c50 <memcpy>
	sbox(rkeys+48);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	33c0      	adds	r3, #192	; 0xc0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fad7 	bl	800144c <sbox>
	rkeys[50] ^= 0x00000300;		// 6th rconst
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	33c8      	adds	r3, #200	; 0xc8
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	33c8      	adds	r3, #200	; 0xc8
 8002ea8:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002eac:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+48, 8, 2); 	// Rotword and XOR between the columns
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	33c0      	adds	r3, #192	; 0xc0
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	2108      	movs	r1, #8
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fea0 	bl	8002bfc <xor_columns>
	inv_shiftrows_1(rkeys+40); 		// to match fixslicing
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	33a0      	adds	r3, #160	; 0xa0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fd93 	bl	80029ec <inv_shiftrows_1>
	memcpy(rkeys+56, rkeys+48, 32);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	33c0      	adds	r3, #192	; 0xc0
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f003 febc 	bl	8006c50 <memcpy>
	sbox(rkeys+56);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	33e0      	adds	r3, #224	; 0xe0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe fab5 	bl	800144c <sbox>
	rkeys[57] ^= 0x00000300;		// 7th rconst
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	33e4      	adds	r3, #228	; 0xe4
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	33e4      	adds	r3, #228	; 0xe4
 8002eec:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002ef0:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+56, 8, 2); 	// Rotword and XOR between the columns
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	33e0      	adds	r3, #224	; 0xe0
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	2108      	movs	r1, #8
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fe7e 	bl	8002bfc <xor_columns>
	inv_shiftrows_2(rkeys+48); 		// to match fixslicing
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	33c0      	adds	r3, #192	; 0xc0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fdd7 	bl	8002ab8 <inv_shiftrows_2>
	memcpy(rkeys+64, rkeys+56, 32);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	33e0      	adds	r3, #224	; 0xe0
 8002f14:	2220      	movs	r2, #32
 8002f16:	4619      	mov	r1, r3
 8002f18:	f003 fe9a 	bl	8006c50 <memcpy>
	sbox(rkeys+64);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fa92 	bl	800144c <sbox>
	rkeys[64] ^= 0x00000300;		// 8th rconst
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f36:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002f3a:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+64, 8, 2); 	// Rotword and XOR between the columns
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f42:	2202      	movs	r2, #2
 8002f44:	2108      	movs	r1, #8
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fe58 	bl	8002bfc <xor_columns>
	inv_shiftrows_3(rkeys+56); 		// to match fixslicing
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	33e0      	adds	r3, #224	; 0xe0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fded 	bl	8002b30 <inv_shiftrows_3>
	memcpy(rkeys+72, rkeys+64, 32);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f62:	2220      	movs	r2, #32
 8002f64:	4619      	mov	r1, r3
 8002f66:	f003 fe73 	bl	8006c50 <memcpy>
	sbox(rkeys+72);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fe fa6b 	bl	800144c <sbox>
	rkeys[79] ^= 0x00000300; 		// 9th rconst
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002f84:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002f88:	601a      	str	r2, [r3, #0]
	rkeys[78] ^= 0x00000300; 		// 9th rconst
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002f98:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002f9c:	601a      	str	r2, [r3, #0]
	rkeys[76] ^= 0x00000300; 		// 9th rconst
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002fac:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002fb0:	601a      	str	r2, [r3, #0]
	rkeys[75] ^= 0x00000300; 		// 9th rconst
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002fc0:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8002fc4:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys + 72, 8, 2); 	// Rotword and XOR between the columns
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002fcc:	2202      	movs	r2, #2
 8002fce:	2108      	movs	r1, #8
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fe13 	bl	8002bfc <xor_columns>
	memcpy(rkeys+80, rkeys+72, 32);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f003 fe33 	bl	8006c50 <memcpy>
	sbox(rkeys+80);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe fa2b 	bl	800144c <sbox>
	rkeys[86] ^= 0x00000300; 		// 10th rconst
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8003004:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8003008:	601a      	str	r2, [r3, #0]
	rkeys[85] ^= 0x00000300; 		// 10th rconst
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003018:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 800301c:	601a      	str	r2, [r3, #0]
	rkeys[83] ^= 0x00000300;		// 10th rconst
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800302c:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8003030:	601a      	str	r2, [r3, #0]
	rkeys[82] ^= 0x00000300; 		// 10th rconst
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003040:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8003044:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+80, 8, 2); 	// Rotword and XOR between the columns
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800304c:	2202      	movs	r2, #2
 800304e:	2108      	movs	r1, #8
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fdd3 	bl	8002bfc <xor_columns>
	inv_shiftrows_1(rkeys+72);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fcc5 	bl	80029ec <inv_shiftrows_1>
	for(int i = 1; i < 11; i++) {
 8003062:	2301      	movs	r3, #1
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	e036      	b.n	80030d6 <aes128_keyschedule_ffs+0x3a6>
		rkeys[i*8 + 1] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	015b      	lsls	r3, r3, #5
 800306c:	3304      	adds	r3, #4
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4413      	add	r3, r2
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	015b      	lsls	r3, r3, #5
 8003078:	3304      	adds	r3, #4
 800307a:	68f9      	ldr	r1, [r7, #12]
 800307c:	440b      	add	r3, r1
 800307e:	43d2      	mvns	r2, r2
 8003080:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 2] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	015b      	lsls	r3, r3, #5
 8003086:	3308      	adds	r3, #8
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4413      	add	r3, r2
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	015b      	lsls	r3, r3, #5
 8003092:	3308      	adds	r3, #8
 8003094:	68f9      	ldr	r1, [r7, #12]
 8003096:	440b      	add	r3, r1
 8003098:	43d2      	mvns	r2, r2
 800309a:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 6] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	015b      	lsls	r3, r3, #5
 80030a0:	3318      	adds	r3, #24
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	015b      	lsls	r3, r3, #5
 80030ac:	3318      	adds	r3, #24
 80030ae:	68f9      	ldr	r1, [r7, #12]
 80030b0:	440b      	add	r3, r1
 80030b2:	43d2      	mvns	r2, r2
 80030b4:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 7] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	015b      	lsls	r3, r3, #5
 80030ba:	331c      	adds	r3, #28
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4413      	add	r3, r2
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	015b      	lsls	r3, r3, #5
 80030c6:	331c      	adds	r3, #28
 80030c8:	68f9      	ldr	r1, [r7, #12]
 80030ca:	440b      	add	r3, r1
 80030cc:	43d2      	mvns	r2, r2
 80030ce:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 11; i++) {
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	3301      	adds	r3, #1
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2b0a      	cmp	r3, #10
 80030da:	ddc5      	ble.n	8003068 <aes128_keyschedule_ffs+0x338>
	// 	printf("%x \n", rkeys[i]);
	// }
	


}
 80030dc:	bf00      	nop
 80030de:	bf00      	nop
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <serial_printf>:
 *      Author: cuauhtemoc
 */

#include "Serial.h"

void serial_printf(UART_HandleTypeDef *huart, uint8_t *pData, uint32_t Timeout){
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b086      	sub	sp, #24
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
	uint16_t Size = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	82fb      	strh	r3, [r7, #22]
	do{
		Size++;
 80030f6:	8afb      	ldrh	r3, [r7, #22]
 80030f8:	3301      	adds	r3, #1
 80030fa:	82fb      	strh	r3, [r7, #22]
	}while(pData[Size]!='\0');
 80030fc:	8afb      	ldrh	r3, [r7, #22]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	4413      	add	r3, r2
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f6      	bne.n	80030f6 <serial_printf+0x10>
	HAL_UART_Transmit(huart, pData,Size, HAL_MAX_DELAY);
 8003108:	8afa      	ldrh	r2, [r7, #22]
 800310a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f002 fdcd 	bl	8005cb0 <HAL_UART_Transmit>
}
 8003116:	bf00      	nop
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <DWT_Init>:
static unsigned char asociated_data[plaintext_size];
static unsigned int bytes[7] = {32, 64, 128, 192, 256, 320, 512};

char buffer [1024];
unsigned int performance[REP];
void DWT_Init(void) {
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0

    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <DWT_Init+0x34>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <DWT_Init+0x34>)
 800312a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800312e:	60d3      	str	r3, [r2, #12]
    DWT->LAR = 0xC5ACCE55;
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <DWT_Init+0x38>)
 8003132:	4a0a      	ldr	r2, [pc, #40]	; (800315c <DWT_Init+0x3c>)
 8003134:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    DWT->CYCCNT = 0;
 8003138:	4b07      	ldr	r3, [pc, #28]	; (8003158 <DWT_Init+0x38>)
 800313a:	2200      	movs	r2, #0
 800313c:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <DWT_Init+0x38>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a05      	ldr	r2, [pc, #20]	; (8003158 <DWT_Init+0x38>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	6013      	str	r3, [r2, #0]
}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000edf0 	.word	0xe000edf0
 8003158:	e0001000 	.word	0xe0001000
 800315c:	c5acce55 	.word	0xc5acce55

08003160 <start_timer>:

void start_timer(void) {
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0;
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <start_timer+0x14>)
 8003166:	2200      	movs	r2, #0
 8003168:	605a      	str	r2, [r3, #4]
}
 800316a:	bf00      	nop
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e0001000 	.word	0xe0001000

08003178 <stop_timer>:

uint32_t stop_timer(void) {
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <stop_timer+0x14>)
 800317e:	685b      	ldr	r3, [r3, #4]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e0001000 	.word	0xe0001000

08003190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003196:	f000 fcd8 	bl	8003b4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800319a:	f000 f8c9 	bl	8003330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800319e:	f000 f9db 	bl	8003558 <MX_GPIO_Init>
  MX_ETH_Init();
 80031a2:	f000 f92d 	bl	8003400 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80031a6:	f000 f979 	bl	800349c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80031aa:	f000 f9a7 	bl	80034fc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */


  for (size_t i = 0; i < plaintext_size; i++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e010      	b.n	80031d6 <main+0x46>
  {
	  plaintext[i] =i;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	b2d9      	uxtb	r1, r3
 80031b8:	4a50      	ldr	r2, [pc, #320]	; (80032fc <main+0x16c>)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	4413      	add	r3, r2
 80031be:	460a      	mov	r2, r1
 80031c0:	701a      	strb	r2, [r3, #0]
	  asociated_data[i]=i;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	b2d9      	uxtb	r1, r3
 80031c6:	4a4e      	ldr	r2, [pc, #312]	; (8003300 <main+0x170>)
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	4413      	add	r3, r2
 80031cc:	460a      	mov	r2, r1
 80031ce:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < plaintext_size; i++)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	3301      	adds	r3, #1
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031dc:	d3ea      	bcc.n	80031b4 <main+0x24>
  }

  DWT_Init(); // Inicializar el contador de ciclos
 80031de:	f7ff ff9f 	bl	8003120 <DWT_Init>
  uint32_t cycles=0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	603b      	str	r3, [r7, #0]
  uint32_t total_cycles=0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]

  int i=0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]


  cycles=0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	603b      	str	r3, [r7, #0]
  total_cycles=0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
  sprintf(buffer,"\n ELIMAC ROUNDS %i", ROUNDS+4);
 80031f6:	220a      	movs	r2, #10
 80031f8:	4942      	ldr	r1, [pc, #264]	; (8003304 <main+0x174>)
 80031fa:	4843      	ldr	r0, [pc, #268]	; (8003308 <main+0x178>)
 80031fc:	f003 fcd4 	bl	8006ba8 <siprintf>
      serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003204:	4940      	ldr	r1, [pc, #256]	; (8003308 <main+0x178>)
 8003206:	4841      	ldr	r0, [pc, #260]	; (800330c <main+0x17c>)
 8003208:	f7ff ff6d 	bl	80030e6 <serial_printf>
      for (int j = 0; j < Number_test; j++) {
 800320c:	2300      	movs	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	e02c      	b.n	800326c <main+0xdc>
          for (i = 0; i < REP; i++) {
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	e018      	b.n	800324a <main+0xba>
              start_timer(); // Iniciar el contador de ciclos
 8003218:	f7ff ffa2 	bl	8003160 <start_timer>
              ELIMAC(plaintext, bytes[j], key1, key2, ROUNDS, tag);
 800321c:	4a3c      	ldr	r2, [pc, #240]	; (8003310 <main+0x180>)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003224:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <main+0x184>)
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	2306      	movs	r3, #6
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	4b3a      	ldr	r3, [pc, #232]	; (8003318 <main+0x188>)
 800322e:	4a3b      	ldr	r2, [pc, #236]	; (800331c <main+0x18c>)
 8003230:	4832      	ldr	r0, [pc, #200]	; (80032fc <main+0x16c>)
 8003232:	f7fd f9bb 	bl	80005ac <ELIMAC>
              cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 8003236:	f7ff ff9f 	bl	8003178 <stop_timer>
 800323a:	6038      	str	r0, [r7, #0]
              total_cycles=cycles+total_cycles;
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	4413      	add	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
          for (i = 0; i < REP; i++) {
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3301      	adds	r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b1d      	cmp	r3, #29
 800324e:	dde3      	ble.n	8003218 <main+0x88>
          }
          performance[j] = total_cycles/REP;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4a33      	ldr	r2, [pc, #204]	; (8003320 <main+0x190>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	091a      	lsrs	r2, r3, #4
 800325a:	4932      	ldr	r1, [pc, #200]	; (8003324 <main+0x194>)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          total_cycles=0;
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
      for (int j = 0; j < Number_test; j++) {
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	3301      	adds	r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b06      	cmp	r3, #6
 8003270:	ddcf      	ble.n	8003212 <main+0x82>
      }
      for (i = 0; i < Number_test; i++) {
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	e020      	b.n	80032ba <main+0x12a>
    	    sprintf(buffer,"\n bytes %u ", bytes[i]);
 8003278:	4a25      	ldr	r2, [pc, #148]	; (8003310 <main+0x180>)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003280:	461a      	mov	r2, r3
 8003282:	4929      	ldr	r1, [pc, #164]	; (8003328 <main+0x198>)
 8003284:	4820      	ldr	r0, [pc, #128]	; (8003308 <main+0x178>)
 8003286:	f003 fc8f 	bl	8006ba8 <siprintf>
    	    serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 800328a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800328e:	491e      	ldr	r1, [pc, #120]	; (8003308 <main+0x178>)
 8003290:	481e      	ldr	r0, [pc, #120]	; (800330c <main+0x17c>)
 8003292:	f7ff ff28 	bl	80030e6 <serial_printf>
			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 8003296:	4a23      	ldr	r2, [pc, #140]	; (8003324 <main+0x194>)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4922      	ldr	r1, [pc, #136]	; (800332c <main+0x19c>)
 80032a2:	4819      	ldr	r0, [pc, #100]	; (8003308 <main+0x178>)
 80032a4:	f003 fc80 	bl	8006ba8 <siprintf>
			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032ac:	4916      	ldr	r1, [pc, #88]	; (8003308 <main+0x178>)
 80032ae:	4817      	ldr	r0, [pc, #92]	; (800330c <main+0x17c>)
 80032b0:	f7ff ff19 	bl	80030e6 <serial_printf>
      for (i = 0; i < Number_test; i++) {
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3301      	adds	r3, #1
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b06      	cmp	r3, #6
 80032be:	dddb      	ble.n	8003278 <main+0xe8>
	   }

      for (size_t i = 0; i < plaintext_size; i++){
 80032c0:	2300      	movs	r3, #0
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	e010      	b.n	80032e8 <main+0x158>
    	   plaintext[i] =i;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	b2d9      	uxtb	r1, r3
 80032ca:	4a0c      	ldr	r2, [pc, #48]	; (80032fc <main+0x16c>)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4413      	add	r3, r2
 80032d0:	460a      	mov	r2, r1
 80032d2:	701a      	strb	r2, [r3, #0]
    	   asociated_data[i]=i;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	b2d9      	uxtb	r1, r3
 80032d8:	4a09      	ldr	r2, [pc, #36]	; (8003300 <main+0x170>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	460a      	mov	r2, r1
 80032e0:	701a      	strb	r2, [r3, #0]
      for (size_t i = 0; i < plaintext_size; i++){
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3301      	adds	r3, #1
 80032e6:	607b      	str	r3, [r7, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ee:	d3ea      	bcc.n	80032c6 <main+0x136>
 80032f0:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	2000087c 	.word	0x2000087c
 8003300:	2000187c 	.word	0x2000187c
 8003304:	08007544 	.word	0x08007544
 8003308:	2000287c 	.word	0x2000287c
 800330c:	200002dc 	.word	0x200002dc
 8003310:	20000020 	.word	0x20000020
 8003314:	2000086c 	.word	0x2000086c
 8003318:	20000010 	.word	0x20000010
 800331c:	20000000 	.word	0x20000000
 8003320:	88888889 	.word	0x88888889
 8003324:	20002c7c 	.word	0x20002c7c
 8003328:	08007558 	.word	0x08007558
 800332c:	08007564 	.word	0x08007564

08003330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b094      	sub	sp, #80	; 0x50
 8003334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003336:	f107 0320 	add.w	r3, r7, #32
 800333a:	2230      	movs	r2, #48	; 0x30
 800333c:	2100      	movs	r1, #0
 800333e:	4618      	mov	r0, r3
 8003340:	f003 fc52 	bl	8006be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003344:	f107 030c 	add.w	r3, r7, #12
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003354:	f001 fb94 	bl	8004a80 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003358:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <SystemClock_Config+0xc8>)
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	4a26      	ldr	r2, [pc, #152]	; (80033f8 <SystemClock_Config+0xc8>)
 800335e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003362:	6413      	str	r3, [r2, #64]	; 0x40
 8003364:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <SystemClock_Config+0xc8>)
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003370:	4b22      	ldr	r3, [pc, #136]	; (80033fc <SystemClock_Config+0xcc>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003378:	4a20      	ldr	r2, [pc, #128]	; (80033fc <SystemClock_Config+0xcc>)
 800337a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <SystemClock_Config+0xcc>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003388:	607b      	str	r3, [r7, #4]
 800338a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800338c:	2301      	movs	r3, #1
 800338e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003390:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003396:	2302      	movs	r3, #2
 8003398:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800339a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800339e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80033a0:	2304      	movs	r3, #4
 80033a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80033a4:	2348      	movs	r3, #72	; 0x48
 80033a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033a8:	2302      	movs	r3, #2
 80033aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80033ac:	2303      	movs	r3, #3
 80033ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033b0:	f107 0320 	add.w	r3, r7, #32
 80033b4:	4618      	mov	r0, r3
 80033b6:	f001 fb73 	bl	8004aa0 <HAL_RCC_OscConfig>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80033c0:	f000 f96c 	bl	800369c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033c4:	230f      	movs	r3, #15
 80033c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033c8:	2302      	movs	r3, #2
 80033ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033da:	f107 030c 	add.w	r3, r7, #12
 80033de:	2102      	movs	r1, #2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f001 fe01 	bl	8004fe8 <HAL_RCC_ClockConfig>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80033ec:	f000 f956 	bl	800369c <Error_Handler>
  }
}
 80033f0:	bf00      	nop
 80033f2:	3750      	adds	r7, #80	; 0x50
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40007000 	.word	0x40007000

08003400 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8003404:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <MX_ETH_Init+0x84>)
 8003406:	4a20      	ldr	r2, [pc, #128]	; (8003488 <MX_ETH_Init+0x88>)
 8003408:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800340a:	4b20      	ldr	r3, [pc, #128]	; (800348c <MX_ETH_Init+0x8c>)
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003410:	4b1e      	ldr	r3, [pc, #120]	; (800348c <MX_ETH_Init+0x8c>)
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8003416:	4b1d      	ldr	r3, [pc, #116]	; (800348c <MX_ETH_Init+0x8c>)
 8003418:	22e1      	movs	r2, #225	; 0xe1
 800341a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800341c:	4b1b      	ldr	r3, [pc, #108]	; (800348c <MX_ETH_Init+0x8c>)
 800341e:	2200      	movs	r2, #0
 8003420:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8003422:	4b1a      	ldr	r3, [pc, #104]	; (800348c <MX_ETH_Init+0x8c>)
 8003424:	2200      	movs	r2, #0
 8003426:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8003428:	4b18      	ldr	r3, [pc, #96]	; (800348c <MX_ETH_Init+0x8c>)
 800342a:	2200      	movs	r2, #0
 800342c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800342e:	4b15      	ldr	r3, [pc, #84]	; (8003484 <MX_ETH_Init+0x84>)
 8003430:	4a16      	ldr	r2, [pc, #88]	; (800348c <MX_ETH_Init+0x8c>)
 8003432:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003434:	4b13      	ldr	r3, [pc, #76]	; (8003484 <MX_ETH_Init+0x84>)
 8003436:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800343a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <MX_ETH_Init+0x84>)
 800343e:	4a14      	ldr	r2, [pc, #80]	; (8003490 <MX_ETH_Init+0x90>)
 8003440:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <MX_ETH_Init+0x84>)
 8003444:	4a13      	ldr	r2, [pc, #76]	; (8003494 <MX_ETH_Init+0x94>)
 8003446:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <MX_ETH_Init+0x84>)
 800344a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800344e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8003450:	480c      	ldr	r0, [pc, #48]	; (8003484 <MX_ETH_Init+0x84>)
 8003452:	f000 fce1 	bl	8003e18 <HAL_ETH_Init>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800345c:	f000 f91e 	bl	800369c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003460:	2238      	movs	r2, #56	; 0x38
 8003462:	2100      	movs	r1, #0
 8003464:	480c      	ldr	r0, [pc, #48]	; (8003498 <MX_ETH_Init+0x98>)
 8003466:	f003 fbbf 	bl	8006be8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <MX_ETH_Init+0x98>)
 800346c:	2221      	movs	r2, #33	; 0x21
 800346e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <MX_ETH_Init+0x98>)
 8003472:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8003476:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003478:	4b07      	ldr	r3, [pc, #28]	; (8003498 <MX_ETH_Init+0x98>)
 800347a:	2200      	movs	r2, #0
 800347c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	2000022c 	.word	0x2000022c
 8003488:	40028000 	.word	0x40028000
 800348c:	20002cf4 	.word	0x20002cf4
 8003490:	20000138 	.word	0x20000138
 8003494:	20000098 	.word	0x20000098
 8003498:	200001f4 	.word	0x200001f4

0800349c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80034a0:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <MX_USART3_UART_Init+0x58>)
 80034a2:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <MX_USART3_UART_Init+0x5c>)
 80034a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80034a6:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <MX_USART3_UART_Init+0x58>)
 80034a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80034ae:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <MX_USART3_UART_Init+0x58>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80034b4:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <MX_USART3_UART_Init+0x58>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <MX_USART3_UART_Init+0x58>)
 80034bc:	2200      	movs	r2, #0
 80034be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <MX_USART3_UART_Init+0x58>)
 80034c2:	220c      	movs	r2, #12
 80034c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034c6:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <MX_USART3_UART_Init+0x58>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034cc:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <MX_USART3_UART_Init+0x58>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034d2:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <MX_USART3_UART_Init+0x58>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <MX_USART3_UART_Init+0x58>)
 80034da:	2200      	movs	r2, #0
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80034de:	4805      	ldr	r0, [pc, #20]	; (80034f4 <MX_USART3_UART_Init+0x58>)
 80034e0:	f002 fb98 	bl	8005c14 <HAL_UART_Init>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80034ea:	f000 f8d7 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	200002dc 	.word	0x200002dc
 80034f8:	40004800 	.word	0x40004800

080034fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003500:	4b14      	ldr	r3, [pc, #80]	; (8003554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003502:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003506:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003508:	4b12      	ldr	r3, [pc, #72]	; (8003554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800350a:	2206      	movs	r2, #6
 800350c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800350e:	4b11      	ldr	r3, [pc, #68]	; (8003554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003510:	2202      	movs	r2, #2
 8003512:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003514:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003516:	2200      	movs	r2, #0
 8003518:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800351a:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800351c:	2202      	movs	r2, #2
 800351e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003522:	2201      	movs	r2, #1
 8003524:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003526:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003528:	2200      	movs	r2, #0
 800352a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800352e:	2200      	movs	r2, #0
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003532:	4b08      	ldr	r3, [pc, #32]	; (8003554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003534:	2201      	movs	r2, #1
 8003536:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003538:	4b06      	ldr	r3, [pc, #24]	; (8003554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800353a:	2200      	movs	r2, #0
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800353e:	4805      	ldr	r0, [pc, #20]	; (8003554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003540:	f001 f955 	bl	80047ee <HAL_PCD_Init>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800354a:	f000 f8a7 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000364 	.word	0x20000364

08003558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08c      	sub	sp, #48	; 0x30
 800355c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355e:	f107 031c 	add.w	r3, r7, #28
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	609a      	str	r2, [r3, #8]
 800356a:	60da      	str	r2, [r3, #12]
 800356c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800356e:	4b47      	ldr	r3, [pc, #284]	; (800368c <MX_GPIO_Init+0x134>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	4a46      	ldr	r2, [pc, #280]	; (800368c <MX_GPIO_Init+0x134>)
 8003574:	f043 0304 	orr.w	r3, r3, #4
 8003578:	6313      	str	r3, [r2, #48]	; 0x30
 800357a:	4b44      	ldr	r3, [pc, #272]	; (800368c <MX_GPIO_Init+0x134>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003586:	4b41      	ldr	r3, [pc, #260]	; (800368c <MX_GPIO_Init+0x134>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	4a40      	ldr	r2, [pc, #256]	; (800368c <MX_GPIO_Init+0x134>)
 800358c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003590:	6313      	str	r3, [r2, #48]	; 0x30
 8003592:	4b3e      	ldr	r3, [pc, #248]	; (800368c <MX_GPIO_Init+0x134>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800359e:	4b3b      	ldr	r3, [pc, #236]	; (800368c <MX_GPIO_Init+0x134>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	4a3a      	ldr	r2, [pc, #232]	; (800368c <MX_GPIO_Init+0x134>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6313      	str	r3, [r2, #48]	; 0x30
 80035aa:	4b38      	ldr	r3, [pc, #224]	; (800368c <MX_GPIO_Init+0x134>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b6:	4b35      	ldr	r3, [pc, #212]	; (800368c <MX_GPIO_Init+0x134>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	4a34      	ldr	r2, [pc, #208]	; (800368c <MX_GPIO_Init+0x134>)
 80035bc:	f043 0302 	orr.w	r3, r3, #2
 80035c0:	6313      	str	r3, [r2, #48]	; 0x30
 80035c2:	4b32      	ldr	r3, [pc, #200]	; (800368c <MX_GPIO_Init+0x134>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ce:	4b2f      	ldr	r3, [pc, #188]	; (800368c <MX_GPIO_Init+0x134>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a2e      	ldr	r2, [pc, #184]	; (800368c <MX_GPIO_Init+0x134>)
 80035d4:	f043 0308 	orr.w	r3, r3, #8
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b2c      	ldr	r3, [pc, #176]	; (800368c <MX_GPIO_Init+0x134>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80035e6:	4b29      	ldr	r3, [pc, #164]	; (800368c <MX_GPIO_Init+0x134>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	4a28      	ldr	r2, [pc, #160]	; (800368c <MX_GPIO_Init+0x134>)
 80035ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035f0:	6313      	str	r3, [r2, #48]	; 0x30
 80035f2:	4b26      	ldr	r3, [pc, #152]	; (800368c <MX_GPIO_Init+0x134>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80035fe:	2200      	movs	r2, #0
 8003600:	f244 0181 	movw	r1, #16513	; 0x4081
 8003604:	4822      	ldr	r0, [pc, #136]	; (8003690 <MX_GPIO_Init+0x138>)
 8003606:	f001 f8d9 	bl	80047bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800360a:	2200      	movs	r2, #0
 800360c:	2140      	movs	r1, #64	; 0x40
 800360e:	4821      	ldr	r0, [pc, #132]	; (8003694 <MX_GPIO_Init+0x13c>)
 8003610:	f001 f8d4 	bl	80047bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800361a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800361e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003624:	f107 031c 	add.w	r3, r7, #28
 8003628:	4619      	mov	r1, r3
 800362a:	481b      	ldr	r0, [pc, #108]	; (8003698 <MX_GPIO_Init+0x140>)
 800362c:	f000 ff1a 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003630:	f244 0381 	movw	r3, #16513	; 0x4081
 8003634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003636:	2301      	movs	r3, #1
 8003638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363a:	2300      	movs	r3, #0
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363e:	2300      	movs	r3, #0
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003642:	f107 031c 	add.w	r3, r7, #28
 8003646:	4619      	mov	r1, r3
 8003648:	4811      	ldr	r0, [pc, #68]	; (8003690 <MX_GPIO_Init+0x138>)
 800364a:	f000 ff0b 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800364e:	2340      	movs	r3, #64	; 0x40
 8003650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003652:	2301      	movs	r3, #1
 8003654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003656:	2300      	movs	r3, #0
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365a:	2300      	movs	r3, #0
 800365c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800365e:	f107 031c 	add.w	r3, r7, #28
 8003662:	4619      	mov	r1, r3
 8003664:	480b      	ldr	r0, [pc, #44]	; (8003694 <MX_GPIO_Init+0x13c>)
 8003666:	f000 fefd 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800366e:	2300      	movs	r3, #0
 8003670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	2300      	movs	r3, #0
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003676:	f107 031c 	add.w	r3, r7, #28
 800367a:	4619      	mov	r1, r3
 800367c:	4805      	ldr	r0, [pc, #20]	; (8003694 <MX_GPIO_Init+0x13c>)
 800367e:	f000 fef1 	bl	8004464 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003682:	bf00      	nop
 8003684:	3730      	adds	r7, #48	; 0x30
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800
 8003690:	40020400 	.word	0x40020400
 8003694:	40021800 	.word	0x40021800
 8003698:	40020800 	.word	0x40020800

0800369c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036a0:	b672      	cpsid	i
}
 80036a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036a4:	e7fe      	b.n	80036a4 <Error_Handler+0x8>
	...

080036a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80036ae:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <HAL_MspInit+0x44>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a0e      	ldr	r2, [pc, #56]	; (80036ec <HAL_MspInit+0x44>)
 80036b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ba:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_MspInit+0x44>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c6:	4b09      	ldr	r3, [pc, #36]	; (80036ec <HAL_MspInit+0x44>)
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	4a08      	ldr	r2, [pc, #32]	; (80036ec <HAL_MspInit+0x44>)
 80036cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036d0:	6453      	str	r3, [r2, #68]	; 0x44
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_MspInit+0x44>)
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800

080036f0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08e      	sub	sp, #56	; 0x38
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a4e      	ldr	r2, [pc, #312]	; (8003848 <HAL_ETH_MspInit+0x158>)
 800370e:	4293      	cmp	r3, r2
 8003710:	f040 8096 	bne.w	8003840 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003714:	4b4d      	ldr	r3, [pc, #308]	; (800384c <HAL_ETH_MspInit+0x15c>)
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	4a4c      	ldr	r2, [pc, #304]	; (800384c <HAL_ETH_MspInit+0x15c>)
 800371a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800371e:	6313      	str	r3, [r2, #48]	; 0x30
 8003720:	4b4a      	ldr	r3, [pc, #296]	; (800384c <HAL_ETH_MspInit+0x15c>)
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003728:	623b      	str	r3, [r7, #32]
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	4b47      	ldr	r3, [pc, #284]	; (800384c <HAL_ETH_MspInit+0x15c>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	4a46      	ldr	r2, [pc, #280]	; (800384c <HAL_ETH_MspInit+0x15c>)
 8003732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003736:	6313      	str	r3, [r2, #48]	; 0x30
 8003738:	4b44      	ldr	r3, [pc, #272]	; (800384c <HAL_ETH_MspInit+0x15c>)
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	4b41      	ldr	r3, [pc, #260]	; (800384c <HAL_ETH_MspInit+0x15c>)
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	4a40      	ldr	r2, [pc, #256]	; (800384c <HAL_ETH_MspInit+0x15c>)
 800374a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800374e:	6313      	str	r3, [r2, #48]	; 0x30
 8003750:	4b3e      	ldr	r3, [pc, #248]	; (800384c <HAL_ETH_MspInit+0x15c>)
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800375c:	4b3b      	ldr	r3, [pc, #236]	; (800384c <HAL_ETH_MspInit+0x15c>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	4a3a      	ldr	r2, [pc, #232]	; (800384c <HAL_ETH_MspInit+0x15c>)
 8003762:	f043 0304 	orr.w	r3, r3, #4
 8003766:	6313      	str	r3, [r2, #48]	; 0x30
 8003768:	4b38      	ldr	r3, [pc, #224]	; (800384c <HAL_ETH_MspInit+0x15c>)
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003774:	4b35      	ldr	r3, [pc, #212]	; (800384c <HAL_ETH_MspInit+0x15c>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	4a34      	ldr	r2, [pc, #208]	; (800384c <HAL_ETH_MspInit+0x15c>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	6313      	str	r3, [r2, #48]	; 0x30
 8003780:	4b32      	ldr	r3, [pc, #200]	; (800384c <HAL_ETH_MspInit+0x15c>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800378c:	4b2f      	ldr	r3, [pc, #188]	; (800384c <HAL_ETH_MspInit+0x15c>)
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	4a2e      	ldr	r2, [pc, #184]	; (800384c <HAL_ETH_MspInit+0x15c>)
 8003792:	f043 0302 	orr.w	r3, r3, #2
 8003796:	6313      	str	r3, [r2, #48]	; 0x30
 8003798:	4b2c      	ldr	r3, [pc, #176]	; (800384c <HAL_ETH_MspInit+0x15c>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80037a4:	4b29      	ldr	r3, [pc, #164]	; (800384c <HAL_ETH_MspInit+0x15c>)
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	4a28      	ldr	r2, [pc, #160]	; (800384c <HAL_ETH_MspInit+0x15c>)
 80037aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ae:	6313      	str	r3, [r2, #48]	; 0x30
 80037b0:	4b26      	ldr	r3, [pc, #152]	; (800384c <HAL_ETH_MspInit+0x15c>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80037bc:	2332      	movs	r3, #50	; 0x32
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c0:	2302      	movs	r3, #2
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c8:	2303      	movs	r3, #3
 80037ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037cc:	230b      	movs	r3, #11
 80037ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d4:	4619      	mov	r1, r3
 80037d6:	481e      	ldr	r0, [pc, #120]	; (8003850 <HAL_ETH_MspInit+0x160>)
 80037d8:	f000 fe44 	bl	8004464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80037dc:	2386      	movs	r3, #134	; 0x86
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e0:	2302      	movs	r3, #2
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e8:	2303      	movs	r3, #3
 80037ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037ec:	230b      	movs	r3, #11
 80037ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037f4:	4619      	mov	r1, r3
 80037f6:	4817      	ldr	r0, [pc, #92]	; (8003854 <HAL_ETH_MspInit+0x164>)
 80037f8:	f000 fe34 	bl	8004464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80037fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003802:	2302      	movs	r3, #2
 8003804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003806:	2300      	movs	r3, #0
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800380a:	2303      	movs	r3, #3
 800380c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800380e:	230b      	movs	r3, #11
 8003810:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003816:	4619      	mov	r1, r3
 8003818:	480f      	ldr	r0, [pc, #60]	; (8003858 <HAL_ETH_MspInit+0x168>)
 800381a:	f000 fe23 	bl	8004464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800381e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003824:	2302      	movs	r3, #2
 8003826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800382c:	2303      	movs	r3, #3
 800382e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003830:	230b      	movs	r3, #11
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003838:	4619      	mov	r1, r3
 800383a:	4808      	ldr	r0, [pc, #32]	; (800385c <HAL_ETH_MspInit+0x16c>)
 800383c:	f000 fe12 	bl	8004464 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003840:	bf00      	nop
 8003842:	3738      	adds	r7, #56	; 0x38
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40028000 	.word	0x40028000
 800384c:	40023800 	.word	0x40023800
 8003850:	40020800 	.word	0x40020800
 8003854:	40020000 	.word	0x40020000
 8003858:	40020400 	.word	0x40020400
 800385c:	40021800 	.word	0x40021800

08003860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b0aa      	sub	sp, #168	; 0xa8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003868:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003878:	f107 0310 	add.w	r3, r7, #16
 800387c:	2284      	movs	r2, #132	; 0x84
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f003 f9b1 	bl	8006be8 <memset>
  if(huart->Instance==USART3)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a22      	ldr	r2, [pc, #136]	; (8003914 <HAL_UART_MspInit+0xb4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d13c      	bne.n	800390a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003890:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003894:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003896:	2300      	movs	r3, #0
 8003898:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800389a:	f107 0310 	add.w	r3, r7, #16
 800389e:	4618      	mov	r0, r3
 80038a0:	f001 fdc8 	bl	8005434 <HAL_RCCEx_PeriphCLKConfig>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80038aa:	f7ff fef7 	bl	800369c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80038ae:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <HAL_UART_MspInit+0xb8>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	4a19      	ldr	r2, [pc, #100]	; (8003918 <HAL_UART_MspInit+0xb8>)
 80038b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ba:	4b17      	ldr	r3, [pc, #92]	; (8003918 <HAL_UART_MspInit+0xb8>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038c6:	4b14      	ldr	r3, [pc, #80]	; (8003918 <HAL_UART_MspInit+0xb8>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	4a13      	ldr	r2, [pc, #76]	; (8003918 <HAL_UART_MspInit+0xb8>)
 80038cc:	f043 0308 	orr.w	r3, r3, #8
 80038d0:	6313      	str	r3, [r2, #48]	; 0x30
 80038d2:	4b11      	ldr	r3, [pc, #68]	; (8003918 <HAL_UART_MspInit+0xb8>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80038de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f2:	2303      	movs	r3, #3
 80038f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038f8:	2307      	movs	r3, #7
 80038fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003902:	4619      	mov	r1, r3
 8003904:	4805      	ldr	r0, [pc, #20]	; (800391c <HAL_UART_MspInit+0xbc>)
 8003906:	f000 fdad 	bl	8004464 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800390a:	bf00      	nop
 800390c:	37a8      	adds	r7, #168	; 0xa8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40004800 	.word	0x40004800
 8003918:	40023800 	.word	0x40023800
 800391c:	40020c00 	.word	0x40020c00

08003920 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b0ac      	sub	sp, #176	; 0xb0
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003928:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003938:	f107 0318 	add.w	r3, r7, #24
 800393c:	2284      	movs	r2, #132	; 0x84
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f003 f951 	bl	8006be8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800394e:	d159      	bne.n	8003a04 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003950:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003954:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003956:	2300      	movs	r3, #0
 8003958:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800395c:	f107 0318 	add.w	r3, r7, #24
 8003960:	4618      	mov	r0, r3
 8003962:	f001 fd67 	bl	8005434 <HAL_RCCEx_PeriphCLKConfig>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800396c:	f7ff fe96 	bl	800369c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003970:	4b26      	ldr	r3, [pc, #152]	; (8003a0c <HAL_PCD_MspInit+0xec>)
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	4a25      	ldr	r2, [pc, #148]	; (8003a0c <HAL_PCD_MspInit+0xec>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6313      	str	r3, [r2, #48]	; 0x30
 800397c:	4b23      	ldr	r3, [pc, #140]	; (8003a0c <HAL_PCD_MspInit+0xec>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003988:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800398c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003990:	2302      	movs	r3, #2
 8003992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	2300      	movs	r3, #0
 8003998:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399c:	2303      	movs	r3, #3
 800399e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80039a2:	230a      	movs	r3, #10
 80039a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80039ac:	4619      	mov	r1, r3
 80039ae:	4818      	ldr	r0, [pc, #96]	; (8003a10 <HAL_PCD_MspInit+0xf0>)
 80039b0:	f000 fd58 	bl	8004464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80039b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039bc:	2300      	movs	r3, #0
 80039be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80039c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80039cc:	4619      	mov	r1, r3
 80039ce:	4810      	ldr	r0, [pc, #64]	; (8003a10 <HAL_PCD_MspInit+0xf0>)
 80039d0:	f000 fd48 	bl	8004464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80039d4:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <HAL_PCD_MspInit+0xec>)
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d8:	4a0c      	ldr	r2, [pc, #48]	; (8003a0c <HAL_PCD_MspInit+0xec>)
 80039da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039de:	6353      	str	r3, [r2, #52]	; 0x34
 80039e0:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <HAL_PCD_MspInit+0xec>)
 80039e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <HAL_PCD_MspInit+0xec>)
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f0:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <HAL_PCD_MspInit+0xec>)
 80039f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039f6:	6453      	str	r3, [r2, #68]	; 0x44
 80039f8:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <HAL_PCD_MspInit+0xec>)
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003a04:	bf00      	nop
 8003a06:	37b0      	adds	r7, #176	; 0xb0
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40020000 	.word	0x40020000

08003a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a18:	e7fe      	b.n	8003a18 <NMI_Handler+0x4>

08003a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a1e:	e7fe      	b.n	8003a1e <HardFault_Handler+0x4>

08003a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a24:	e7fe      	b.n	8003a24 <MemManage_Handler+0x4>

08003a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a26:	b480      	push	{r7}
 8003a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a2a:	e7fe      	b.n	8003a2a <BusFault_Handler+0x4>

08003a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a30:	e7fe      	b.n	8003a30 <UsageFault_Handler+0x4>

08003a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a32:	b480      	push	{r7}
 8003a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a36:	bf00      	nop
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a60:	f000 f8b0 	bl	8003bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a64:	bf00      	nop
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a70:	4a14      	ldr	r2, [pc, #80]	; (8003ac4 <_sbrk+0x5c>)
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <_sbrk+0x60>)
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a7c:	4b13      	ldr	r3, [pc, #76]	; (8003acc <_sbrk+0x64>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d102      	bne.n	8003a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a84:	4b11      	ldr	r3, [pc, #68]	; (8003acc <_sbrk+0x64>)
 8003a86:	4a12      	ldr	r2, [pc, #72]	; (8003ad0 <_sbrk+0x68>)
 8003a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <_sbrk+0x64>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d207      	bcs.n	8003aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a98:	f003 f8ae 	bl	8006bf8 <__errno>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	220c      	movs	r2, #12
 8003aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aa6:	e009      	b.n	8003abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003aa8:	4b08      	ldr	r3, [pc, #32]	; (8003acc <_sbrk+0x64>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aae:	4b07      	ldr	r3, [pc, #28]	; (8003acc <_sbrk+0x64>)
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	4a05      	ldr	r2, [pc, #20]	; (8003acc <_sbrk+0x64>)
 8003ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003aba:	68fb      	ldr	r3, [r7, #12]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	20050000 	.word	0x20050000
 8003ac8:	00000400 	.word	0x00000400
 8003acc:	20002cfc 	.word	0x20002cfc
 8003ad0:	20002e50 	.word	0x20002e50

08003ad4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ad8:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <SystemInit+0x20>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	4a05      	ldr	r2, [pc, #20]	; (8003af4 <SystemInit+0x20>)
 8003ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	e000ed00 	.word	0xe000ed00

08003af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003afc:	480d      	ldr	r0, [pc, #52]	; (8003b34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003afe:	490e      	ldr	r1, [pc, #56]	; (8003b38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b00:	4a0e      	ldr	r2, [pc, #56]	; (8003b3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b04:	e002      	b.n	8003b0c <LoopCopyDataInit>

08003b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b0a:	3304      	adds	r3, #4

08003b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b10:	d3f9      	bcc.n	8003b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b12:	4a0b      	ldr	r2, [pc, #44]	; (8003b40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b14:	4c0b      	ldr	r4, [pc, #44]	; (8003b44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b18:	e001      	b.n	8003b1e <LoopFillZerobss>

08003b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b1c:	3204      	adds	r2, #4

08003b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b20:	d3fb      	bcc.n	8003b1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b22:	f7ff ffd7 	bl	8003ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b26:	f003 f86d 	bl	8006c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b2a:	f7ff fb31 	bl	8003190 <main>
  bx  lr    
 8003b2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b30:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b38:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003b3c:	080075d8 	.word	0x080075d8
  ldr r2, =_sbss
 8003b40:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003b44:	20002e4c 	.word	0x20002e4c

08003b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b48:	e7fe      	b.n	8003b48 <ADC_IRQHandler>

08003b4a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b4e:	2003      	movs	r0, #3
 8003b50:	f000 f92e 	bl	8003db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b54:	2000      	movs	r0, #0
 8003b56:	f000 f805 	bl	8003b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b5a:	f7ff fda5 	bl	80036a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <HAL_InitTick+0x54>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <HAL_InitTick+0x58>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	4619      	mov	r1, r3
 8003b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 f93b 	bl	8003dfe <HAL_SYSTICK_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e00e      	b.n	8003bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b0f      	cmp	r3, #15
 8003b96:	d80a      	bhi.n	8003bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b98:	2200      	movs	r2, #0
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ba0:	f000 f911 	bl	8003dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ba4:	4a06      	ldr	r2, [pc, #24]	; (8003bc0 <HAL_InitTick+0x5c>)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e000      	b.n	8003bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	2000003c 	.word	0x2000003c
 8003bbc:	20000044 	.word	0x20000044
 8003bc0:	20000040 	.word	0x20000040

08003bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <HAL_IncTick+0x20>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_IncTick+0x24>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <HAL_IncTick+0x24>)
 8003bd6:	6013      	str	r3, [r2, #0]
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000044 	.word	0x20000044
 8003be8:	20002d00 	.word	0x20002d00

08003bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return uwTick;
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <HAL_GetTick+0x14>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20002d00 	.word	0x20002d00

08003c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c0c:	f7ff ffee 	bl	8003bec <HAL_GetTick>
 8003c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c1c:	d005      	beq.n	8003c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <HAL_Delay+0x44>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c2a:	bf00      	nop
 8003c2c:	f7ff ffde 	bl	8003bec <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d8f7      	bhi.n	8003c2c <HAL_Delay+0x28>
  {
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000044 	.word	0x20000044

08003c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <__NVIC_SetPriorityGrouping+0x40>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c68:	4013      	ands	r3, r2
 8003c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <__NVIC_SetPriorityGrouping+0x44>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c7a:	4a04      	ldr	r2, [pc, #16]	; (8003c8c <__NVIC_SetPriorityGrouping+0x40>)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	60d3      	str	r3, [r2, #12]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	e000ed00 	.word	0xe000ed00
 8003c90:	05fa0000 	.word	0x05fa0000

08003c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c98:	4b04      	ldr	r3, [pc, #16]	; (8003cac <__NVIC_GetPriorityGrouping+0x18>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	0a1b      	lsrs	r3, r3, #8
 8003c9e:	f003 0307 	and.w	r3, r3, #7
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	6039      	str	r1, [r7, #0]
 8003cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	db0a      	blt.n	8003cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	490c      	ldr	r1, [pc, #48]	; (8003cfc <__NVIC_SetPriority+0x4c>)
 8003cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cce:	0112      	lsls	r2, r2, #4
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cd8:	e00a      	b.n	8003cf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	4908      	ldr	r1, [pc, #32]	; (8003d00 <__NVIC_SetPriority+0x50>)
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	3b04      	subs	r3, #4
 8003ce8:	0112      	lsls	r2, r2, #4
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	440b      	add	r3, r1
 8003cee:	761a      	strb	r2, [r3, #24]
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	e000e100 	.word	0xe000e100
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b089      	sub	sp, #36	; 0x24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f1c3 0307 	rsb	r3, r3, #7
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	bf28      	it	cs
 8003d22:	2304      	movcs	r3, #4
 8003d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	2b06      	cmp	r3, #6
 8003d2c:	d902      	bls.n	8003d34 <NVIC_EncodePriority+0x30>
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3b03      	subs	r3, #3
 8003d32:	e000      	b.n	8003d36 <NVIC_EncodePriority+0x32>
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43da      	mvns	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	401a      	ands	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	43d9      	mvns	r1, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d5c:	4313      	orrs	r3, r2
         );
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3724      	adds	r7, #36	; 0x24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d7c:	d301      	bcc.n	8003d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e00f      	b.n	8003da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d82:	4a0a      	ldr	r2, [pc, #40]	; (8003dac <SysTick_Config+0x40>)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d8a:	210f      	movs	r1, #15
 8003d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d90:	f7ff ff8e 	bl	8003cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <SysTick_Config+0x40>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d9a:	4b04      	ldr	r3, [pc, #16]	; (8003dac <SysTick_Config+0x40>)
 8003d9c:	2207      	movs	r2, #7
 8003d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	e000e010 	.word	0xe000e010

08003db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff ff47 	bl	8003c4c <__NVIC_SetPriorityGrouping>
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b086      	sub	sp, #24
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	4603      	mov	r3, r0
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dd8:	f7ff ff5c 	bl	8003c94 <__NVIC_GetPriorityGrouping>
 8003ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	6978      	ldr	r0, [r7, #20]
 8003de4:	f7ff ff8e 	bl	8003d04 <NVIC_EncodePriority>
 8003de8:	4602      	mov	r2, r0
 8003dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dee:	4611      	mov	r1, r2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff ff5d 	bl	8003cb0 <__NVIC_SetPriority>
}
 8003df6:	bf00      	nop
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff ffb0 	bl	8003d6c <SysTick_Config>
 8003e0c:	4603      	mov	r3, r0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e06a      	b.n	8003f00 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d106      	bne.n	8003e42 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2223      	movs	r2, #35	; 0x23
 8003e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff fc57 	bl	80036f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e42:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <HAL_ETH_Init+0xf0>)
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	4a30      	ldr	r2, [pc, #192]	; (8003f08 <HAL_ETH_Init+0xf0>)
 8003e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e4e:	4b2e      	ldr	r3, [pc, #184]	; (8003f08 <HAL_ETH_Init+0xf0>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003e5a:	4b2c      	ldr	r3, [pc, #176]	; (8003f0c <HAL_ETH_Init+0xf4>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4a2b      	ldr	r2, [pc, #172]	; (8003f0c <HAL_ETH_Init+0xf4>)
 8003e60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e64:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003e66:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <HAL_ETH_Init+0xf4>)
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	4927      	ldr	r1, [pc, #156]	; (8003f0c <HAL_ETH_Init+0xf4>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003e74:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <HAL_ETH_Init+0xf4>)
 8003e76:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e90:	f7ff feac 	bl	8003bec <HAL_GetTick>
 8003e94:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003e96:	e011      	b.n	8003ebc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003e98:	f7ff fea8 	bl	8003bec <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ea6:	d909      	bls.n	8003ebc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	22e0      	movs	r2, #224	; 0xe0
 8003eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e021      	b.n	8003f00 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1e4      	bne.n	8003e98 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f958 	bl	8004184 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f9ff 	bl	80042d8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fa55 	bl	800438a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f9bd 	bl	8004268 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2210      	movs	r2, #16
 8003efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40013800 	.word	0x40013800

08003f10 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4b51      	ldr	r3, [pc, #324]	; (800406c <ETH_SetMACConfig+0x15c>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	7c1b      	ldrb	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <ETH_SetMACConfig+0x28>
 8003f32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003f36:	e000      	b.n	8003f3a <ETH_SetMACConfig+0x2a>
 8003f38:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	7c5b      	ldrb	r3, [r3, #17]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d102      	bne.n	8003f48 <ETH_SetMACConfig+0x38>
 8003f42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f46:	e000      	b.n	8003f4a <ETH_SetMACConfig+0x3a>
 8003f48:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003f4a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003f50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	7fdb      	ldrb	r3, [r3, #31]
 8003f56:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003f58:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003f5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	7f92      	ldrb	r2, [r2, #30]
 8003f64:	2a00      	cmp	r2, #0
 8003f66:	d102      	bne.n	8003f6e <ETH_SetMACConfig+0x5e>
 8003f68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f6c:	e000      	b.n	8003f70 <ETH_SetMACConfig+0x60>
 8003f6e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003f70:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	7f1b      	ldrb	r3, [r3, #28]
 8003f76:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003f78:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003f7e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	791b      	ldrb	r3, [r3, #4]
 8003f84:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003f86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003f8e:	2a00      	cmp	r2, #0
 8003f90:	d102      	bne.n	8003f98 <ETH_SetMACConfig+0x88>
 8003f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f96:	e000      	b.n	8003f9a <ETH_SetMACConfig+0x8a>
 8003f98:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003f9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	7bdb      	ldrb	r3, [r3, #15]
 8003fa0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003fa2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003fa8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fb0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fca:	2001      	movs	r0, #1
 8003fcc:	f7ff fe1a 	bl	8003c04 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003ff6:	2a00      	cmp	r2, #0
 8003ff8:	d101      	bne.n	8003ffe <ETH_SetMACConfig+0xee>
 8003ffa:	2280      	movs	r2, #128	; 0x80
 8003ffc:	e000      	b.n	8004000 <ETH_SetMACConfig+0xf0>
 8003ffe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004000:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004006:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800400e:	2a01      	cmp	r2, #1
 8004010:	d101      	bne.n	8004016 <ETH_SetMACConfig+0x106>
 8004012:	2208      	movs	r2, #8
 8004014:	e000      	b.n	8004018 <ETH_SetMACConfig+0x108>
 8004016:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004018:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004020:	2a01      	cmp	r2, #1
 8004022:	d101      	bne.n	8004028 <ETH_SetMACConfig+0x118>
 8004024:	2204      	movs	r2, #4
 8004026:	e000      	b.n	800402a <ETH_SetMACConfig+0x11a>
 8004028:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800402a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004032:	2a01      	cmp	r2, #1
 8004034:	d101      	bne.n	800403a <ETH_SetMACConfig+0x12a>
 8004036:	2202      	movs	r2, #2
 8004038:	e000      	b.n	800403c <ETH_SetMACConfig+0x12c>
 800403a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800403c:	4313      	orrs	r3, r2
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004054:	2001      	movs	r0, #1
 8004056:	f7ff fdd5 	bl	8003c04 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	619a      	str	r2, [r3, #24]
}
 8004062:	bf00      	nop
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	ff20810f 	.word	0xff20810f

08004070 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4b3d      	ldr	r3, [pc, #244]	; (8004180 <ETH_SetDMAConfig+0x110>)
 800408a:	4013      	ands	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	7b1b      	ldrb	r3, [r3, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d102      	bne.n	800409c <ETH_SetDMAConfig+0x2c>
 8004096:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800409a:	e000      	b.n	800409e <ETH_SetDMAConfig+0x2e>
 800409c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	7b5b      	ldrb	r3, [r3, #13]
 80040a2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80040a4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	7f52      	ldrb	r2, [r2, #29]
 80040aa:	2a00      	cmp	r2, #0
 80040ac:	d102      	bne.n	80040b4 <ETH_SetDMAConfig+0x44>
 80040ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040b2:	e000      	b.n	80040b6 <ETH_SetDMAConfig+0x46>
 80040b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80040b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	7b9b      	ldrb	r3, [r3, #14]
 80040bc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80040be:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80040c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	7f1b      	ldrb	r3, [r3, #28]
 80040ca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80040cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	7f9b      	ldrb	r3, [r3, #30]
 80040d2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80040d4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80040da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040e2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80040e4:	4313      	orrs	r3, r2
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f4:	461a      	mov	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004106:	2001      	movs	r0, #1
 8004108:	f7ff fd7c 	bl	8003c04 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004114:	461a      	mov	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	791b      	ldrb	r3, [r3, #4]
 800411e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004124:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800412a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004130:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004138:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800413a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004142:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004148:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004152:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004156:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004164:	2001      	movs	r0, #1
 8004166:	f7ff fd4d 	bl	8003c04 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004172:	461a      	mov	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6013      	str	r3, [r2, #0]
}
 8004178:	bf00      	nop
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	f8de3f23 	.word	0xf8de3f23

08004184 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b0a6      	sub	sp, #152	; 0x98
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800418c:	2301      	movs	r3, #1
 800418e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004198:	2300      	movs	r3, #0
 800419a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800419c:	2300      	movs	r3, #0
 800419e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80041c0:	2300      	movs	r3, #0
 80041c2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80041d4:	2300      	movs	r3, #0
 80041d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80041da:	2300      	movs	r3, #0
 80041dc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80041e0:	2300      	movs	r3, #0
 80041e2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80041e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041ea:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80041ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80041f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff fe86 	bl	8003f10 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004204:	2301      	movs	r3, #1
 8004206:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004208:	2301      	movs	r3, #1
 800420a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800420c:	2301      	movs	r3, #1
 800420e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004212:	2301      	movs	r3, #1
 8004214:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800421a:	2300      	movs	r3, #0
 800421c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004220:	2300      	movs	r3, #0
 8004222:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004226:	2300      	movs	r3, #0
 8004228:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004230:	2301      	movs	r3, #1
 8004232:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004238:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800423a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800423e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004244:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800424c:	2300      	movs	r3, #0
 800424e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004250:	2300      	movs	r3, #0
 8004252:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004254:	f107 0308 	add.w	r3, r7, #8
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff ff08 	bl	8004070 <ETH_SetDMAConfig>
}
 8004260:	bf00      	nop
 8004262:	3798      	adds	r7, #152	; 0x98
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3305      	adds	r3, #5
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	3204      	adds	r2, #4
 8004280:	7812      	ldrb	r2, [r2, #0]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <ETH_MACAddressConfig+0x68>)
 800428a:	4413      	add	r3, r2
 800428c:	461a      	mov	r2, r3
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3303      	adds	r3, #3
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	061a      	lsls	r2, r3, #24
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3302      	adds	r3, #2
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3301      	adds	r3, #1
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	4313      	orrs	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	7812      	ldrb	r2, [r2, #0]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <ETH_MACAddressConfig+0x6c>)
 80042ba:	4413      	add	r3, r2
 80042bc:	461a      	mov	r2, r3
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	6013      	str	r3, [r2, #0]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40028040 	.word	0x40028040
 80042d4:	40028044 	.word	0x40028044

080042d8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e03e      	b.n	8004364 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68d9      	ldr	r1, [r3, #12]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	440b      	add	r3, r1
 80042f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2200      	movs	r2, #0
 8004302:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2200      	movs	r2, #0
 8004308:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2200      	movs	r2, #0
 800430e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	3206      	adds	r2, #6
 8004318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d80c      	bhi.n	8004348 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68d9      	ldr	r1, [r3, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	440b      	add	r3, r1
 8004340:	461a      	mov	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	60da      	str	r2, [r3, #12]
 8004346:	e004      	b.n	8004352 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	461a      	mov	r2, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3301      	adds	r3, #1
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b03      	cmp	r3, #3
 8004368:	d9bd      	bls.n	80042e6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437c:	611a      	str	r2, [r3, #16]
}
 800437e:	bf00      	nop
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800438a:	b480      	push	{r7}
 800438c:	b085      	sub	sp, #20
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	e046      	b.n	8004426 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6919      	ldr	r1, [r3, #16]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	440b      	add	r3, r1
 80043a8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2200      	movs	r2, #0
 80043b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2200      	movs	r2, #0
 80043ba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2200      	movs	r2, #0
 80043c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2200      	movs	r2, #0
 80043c6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2200      	movs	r2, #0
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043d4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80043dc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	3212      	adds	r2, #18
 80043f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d80c      	bhi.n	8004416 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6919      	ldr	r1, [r3, #16]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	440b      	add	r3, r1
 800440e:	461a      	mov	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	60da      	str	r2, [r3, #12]
 8004414:	e004      	b.n	8004420 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	461a      	mov	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3301      	adds	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b03      	cmp	r3, #3
 800442a:	d9b5      	bls.n	8004398 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004456:	60da      	str	r2, [r3, #12]
}
 8004458:	bf00      	nop
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	; 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004476:	2300      	movs	r3, #0
 8004478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800447a:	2300      	movs	r3, #0
 800447c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	e175      	b.n	8004770 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004484:	2201      	movs	r2, #1
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4013      	ands	r3, r2
 8004496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	429a      	cmp	r2, r3
 800449e:	f040 8164 	bne.w	800476a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d005      	beq.n	80044ba <HAL_GPIO_Init+0x56>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d130      	bne.n	800451c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	2203      	movs	r2, #3
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	43db      	mvns	r3, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4013      	ands	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044f0:	2201      	movs	r2, #1
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	43db      	mvns	r3, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4013      	ands	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 0201 	and.w	r2, r3, #1
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	2b03      	cmp	r3, #3
 8004526:	d017      	beq.n	8004558 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	2203      	movs	r2, #3
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d123      	bne.n	80045ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	08da      	lsrs	r2, r3, #3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3208      	adds	r2, #8
 800456c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	220f      	movs	r2, #15
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	08da      	lsrs	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3208      	adds	r2, #8
 80045a6:	69b9      	ldr	r1, [r7, #24]
 80045a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	2203      	movs	r2, #3
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 0203 	and.w	r2, r3, #3
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80be 	beq.w	800476a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ee:	4b66      	ldr	r3, [pc, #408]	; (8004788 <HAL_GPIO_Init+0x324>)
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	4a65      	ldr	r2, [pc, #404]	; (8004788 <HAL_GPIO_Init+0x324>)
 80045f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045f8:	6453      	str	r3, [r2, #68]	; 0x44
 80045fa:	4b63      	ldr	r3, [pc, #396]	; (8004788 <HAL_GPIO_Init+0x324>)
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004606:	4a61      	ldr	r2, [pc, #388]	; (800478c <HAL_GPIO_Init+0x328>)
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	089b      	lsrs	r3, r3, #2
 800460c:	3302      	adds	r3, #2
 800460e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004612:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	220f      	movs	r2, #15
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	4013      	ands	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a58      	ldr	r2, [pc, #352]	; (8004790 <HAL_GPIO_Init+0x32c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d037      	beq.n	80046a2 <HAL_GPIO_Init+0x23e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a57      	ldr	r2, [pc, #348]	; (8004794 <HAL_GPIO_Init+0x330>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d031      	beq.n	800469e <HAL_GPIO_Init+0x23a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a56      	ldr	r2, [pc, #344]	; (8004798 <HAL_GPIO_Init+0x334>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d02b      	beq.n	800469a <HAL_GPIO_Init+0x236>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a55      	ldr	r2, [pc, #340]	; (800479c <HAL_GPIO_Init+0x338>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d025      	beq.n	8004696 <HAL_GPIO_Init+0x232>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a54      	ldr	r2, [pc, #336]	; (80047a0 <HAL_GPIO_Init+0x33c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d01f      	beq.n	8004692 <HAL_GPIO_Init+0x22e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a53      	ldr	r2, [pc, #332]	; (80047a4 <HAL_GPIO_Init+0x340>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d019      	beq.n	800468e <HAL_GPIO_Init+0x22a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a52      	ldr	r2, [pc, #328]	; (80047a8 <HAL_GPIO_Init+0x344>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d013      	beq.n	800468a <HAL_GPIO_Init+0x226>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a51      	ldr	r2, [pc, #324]	; (80047ac <HAL_GPIO_Init+0x348>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00d      	beq.n	8004686 <HAL_GPIO_Init+0x222>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a50      	ldr	r2, [pc, #320]	; (80047b0 <HAL_GPIO_Init+0x34c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d007      	beq.n	8004682 <HAL_GPIO_Init+0x21e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a4f      	ldr	r2, [pc, #316]	; (80047b4 <HAL_GPIO_Init+0x350>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d101      	bne.n	800467e <HAL_GPIO_Init+0x21a>
 800467a:	2309      	movs	r3, #9
 800467c:	e012      	b.n	80046a4 <HAL_GPIO_Init+0x240>
 800467e:	230a      	movs	r3, #10
 8004680:	e010      	b.n	80046a4 <HAL_GPIO_Init+0x240>
 8004682:	2308      	movs	r3, #8
 8004684:	e00e      	b.n	80046a4 <HAL_GPIO_Init+0x240>
 8004686:	2307      	movs	r3, #7
 8004688:	e00c      	b.n	80046a4 <HAL_GPIO_Init+0x240>
 800468a:	2306      	movs	r3, #6
 800468c:	e00a      	b.n	80046a4 <HAL_GPIO_Init+0x240>
 800468e:	2305      	movs	r3, #5
 8004690:	e008      	b.n	80046a4 <HAL_GPIO_Init+0x240>
 8004692:	2304      	movs	r3, #4
 8004694:	e006      	b.n	80046a4 <HAL_GPIO_Init+0x240>
 8004696:	2303      	movs	r3, #3
 8004698:	e004      	b.n	80046a4 <HAL_GPIO_Init+0x240>
 800469a:	2302      	movs	r3, #2
 800469c:	e002      	b.n	80046a4 <HAL_GPIO_Init+0x240>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <HAL_GPIO_Init+0x240>
 80046a2:	2300      	movs	r3, #0
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	f002 0203 	and.w	r2, r2, #3
 80046aa:	0092      	lsls	r2, r2, #2
 80046ac:	4093      	lsls	r3, r2
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80046b4:	4935      	ldr	r1, [pc, #212]	; (800478c <HAL_GPIO_Init+0x328>)
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	089b      	lsrs	r3, r3, #2
 80046ba:	3302      	adds	r3, #2
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046c2:	4b3d      	ldr	r3, [pc, #244]	; (80047b8 <HAL_GPIO_Init+0x354>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	43db      	mvns	r3, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4013      	ands	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046e6:	4a34      	ldr	r2, [pc, #208]	; (80047b8 <HAL_GPIO_Init+0x354>)
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046ec:	4b32      	ldr	r3, [pc, #200]	; (80047b8 <HAL_GPIO_Init+0x354>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4013      	ands	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004710:	4a29      	ldr	r2, [pc, #164]	; (80047b8 <HAL_GPIO_Init+0x354>)
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004716:	4b28      	ldr	r3, [pc, #160]	; (80047b8 <HAL_GPIO_Init+0x354>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	43db      	mvns	r3, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4013      	ands	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800473a:	4a1f      	ldr	r2, [pc, #124]	; (80047b8 <HAL_GPIO_Init+0x354>)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004740:	4b1d      	ldr	r3, [pc, #116]	; (80047b8 <HAL_GPIO_Init+0x354>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	43db      	mvns	r3, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4013      	ands	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004764:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <HAL_GPIO_Init+0x354>)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	3301      	adds	r3, #1
 800476e:	61fb      	str	r3, [r7, #28]
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	2b0f      	cmp	r3, #15
 8004774:	f67f ae86 	bls.w	8004484 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004778:	bf00      	nop
 800477a:	bf00      	nop
 800477c:	3724      	adds	r7, #36	; 0x24
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40023800 	.word	0x40023800
 800478c:	40013800 	.word	0x40013800
 8004790:	40020000 	.word	0x40020000
 8004794:	40020400 	.word	0x40020400
 8004798:	40020800 	.word	0x40020800
 800479c:	40020c00 	.word	0x40020c00
 80047a0:	40021000 	.word	0x40021000
 80047a4:	40021400 	.word	0x40021400
 80047a8:	40021800 	.word	0x40021800
 80047ac:	40021c00 	.word	0x40021c00
 80047b0:	40022000 	.word	0x40022000
 80047b4:	40022400 	.word	0x40022400
 80047b8:	40013c00 	.word	0x40013c00

080047bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	807b      	strh	r3, [r7, #2]
 80047c8:	4613      	mov	r3, r2
 80047ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047cc:	787b      	ldrb	r3, [r7, #1]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047d2:	887a      	ldrh	r2, [r7, #2]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80047d8:	e003      	b.n	80047e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80047da:	887b      	ldrh	r3, [r7, #2]
 80047dc:	041a      	lsls	r2, r3, #16
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	619a      	str	r2, [r3, #24]
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f0:	b08f      	sub	sp, #60	; 0x3c
 80047f2:	af0a      	add	r7, sp, #40	; 0x28
 80047f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e116      	b.n	8004a2e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff f880 	bl	8003920 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2203      	movs	r2, #3
 8004824:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d102      	bne.n	800483a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f001 ff16 	bl	8006670 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	603b      	str	r3, [r7, #0]
 800484a:	687e      	ldr	r6, [r7, #4]
 800484c:	466d      	mov	r5, sp
 800484e:	f106 0410 	add.w	r4, r6, #16
 8004852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800485a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800485e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004862:	1d33      	adds	r3, r6, #4
 8004864:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004866:	6838      	ldr	r0, [r7, #0]
 8004868:	f001 feaa 	bl	80065c0 <USB_CoreInit>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e0d7      	b.n	8004a2e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2100      	movs	r1, #0
 8004884:	4618      	mov	r0, r3
 8004886:	f001 ff04 	bl	8006692 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800488a:	2300      	movs	r3, #0
 800488c:	73fb      	strb	r3, [r7, #15]
 800488e:	e04a      	b.n	8004926 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004890:	7bfa      	ldrb	r2, [r7, #15]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	333d      	adds	r3, #61	; 0x3d
 80048a0:	2201      	movs	r2, #1
 80048a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80048a4:	7bfa      	ldrb	r2, [r7, #15]
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	333c      	adds	r3, #60	; 0x3c
 80048b4:	7bfa      	ldrb	r2, [r7, #15]
 80048b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048b8:	7bfa      	ldrb	r2, [r7, #15]
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
 80048bc:	b298      	uxth	r0, r3
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	4413      	add	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	3344      	adds	r3, #68	; 0x44
 80048cc:	4602      	mov	r2, r0
 80048ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048d0:	7bfa      	ldrb	r2, [r7, #15]
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	3340      	adds	r3, #64	; 0x40
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048e4:	7bfa      	ldrb	r2, [r7, #15]
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	3348      	adds	r3, #72	; 0x48
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048f8:	7bfa      	ldrb	r2, [r7, #15]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	334c      	adds	r3, #76	; 0x4c
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800490c:	7bfa      	ldrb	r2, [r7, #15]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	3354      	adds	r3, #84	; 0x54
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	3301      	adds	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
 8004926:	7bfa      	ldrb	r2, [r7, #15]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	429a      	cmp	r2, r3
 800492e:	d3af      	bcc.n	8004890 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004930:	2300      	movs	r3, #0
 8004932:	73fb      	strb	r3, [r7, #15]
 8004934:	e044      	b.n	80049c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004936:	7bfa      	ldrb	r2, [r7, #15]
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004948:	2200      	movs	r2, #0
 800494a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800494c:	7bfa      	ldrb	r2, [r7, #15]
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800495e:	7bfa      	ldrb	r2, [r7, #15]
 8004960:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004962:	7bfa      	ldrb	r2, [r7, #15]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004974:	2200      	movs	r2, #0
 8004976:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004978:	7bfa      	ldrb	r2, [r7, #15]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800498e:	7bfa      	ldrb	r2, [r7, #15]
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80049a4:	7bfa      	ldrb	r2, [r7, #15]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4413      	add	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	3301      	adds	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
 80049c0:	7bfa      	ldrb	r2, [r7, #15]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d3b5      	bcc.n	8004936 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	687e      	ldr	r6, [r7, #4]
 80049d2:	466d      	mov	r5, sp
 80049d4:	f106 0410 	add.w	r4, r6, #16
 80049d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80049e8:	1d33      	adds	r3, r6, #4
 80049ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049ec:	6838      	ldr	r0, [r7, #0]
 80049ee:	f001 fe9d 	bl	800672c <USB_DevInit>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e014      	b.n	8004a2e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d102      	bne.n	8004a22 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f80b 	bl	8004a38 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f002 f85b 	bl	8006ae2 <USB_DevDisconnect>

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004a38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_PCDEx_ActivateLPM+0x44>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	10000003 	.word	0x10000003

08004a80 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a84:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a04      	ldr	r2, [pc, #16]	; (8004a9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8e:	6013      	str	r3, [r2, #0]
}
 8004a90:	bf00      	nop
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40007000 	.word	0x40007000

08004aa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e291      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 8087 	beq.w	8004bd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac4:	4b96      	ldr	r3, [pc, #600]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d00c      	beq.n	8004aea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ad0:	4b93      	ldr	r3, [pc, #588]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 030c 	and.w	r3, r3, #12
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d112      	bne.n	8004b02 <HAL_RCC_OscConfig+0x62>
 8004adc:	4b90      	ldr	r3, [pc, #576]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ae8:	d10b      	bne.n	8004b02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aea:	4b8d      	ldr	r3, [pc, #564]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d06c      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x130>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d168      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e26b      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0a:	d106      	bne.n	8004b1a <HAL_RCC_OscConfig+0x7a>
 8004b0c:	4b84      	ldr	r3, [pc, #528]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a83      	ldr	r2, [pc, #524]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	e02e      	b.n	8004b78 <HAL_RCC_OscConfig+0xd8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10c      	bne.n	8004b3c <HAL_RCC_OscConfig+0x9c>
 8004b22:	4b7f      	ldr	r3, [pc, #508]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a7e      	ldr	r2, [pc, #504]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	4b7c      	ldr	r3, [pc, #496]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a7b      	ldr	r2, [pc, #492]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e01d      	b.n	8004b78 <HAL_RCC_OscConfig+0xd8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0xc0>
 8004b46:	4b76      	ldr	r3, [pc, #472]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a75      	ldr	r2, [pc, #468]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	4b73      	ldr	r3, [pc, #460]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a72      	ldr	r2, [pc, #456]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	e00b      	b.n	8004b78 <HAL_RCC_OscConfig+0xd8>
 8004b60:	4b6f      	ldr	r3, [pc, #444]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a6e      	ldr	r2, [pc, #440]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	4b6c      	ldr	r3, [pc, #432]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a6b      	ldr	r2, [pc, #428]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d013      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7ff f834 	bl	8003bec <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b88:	f7ff f830 	bl	8003bec <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e21f      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b61      	ldr	r3, [pc, #388]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0xe8>
 8004ba6:	e014      	b.n	8004bd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7ff f820 	bl	8003bec <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7ff f81c 	bl	8003bec <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e20b      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc2:	4b57      	ldr	r3, [pc, #348]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x110>
 8004bce:	e000      	b.n	8004bd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d069      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bde:	4b50      	ldr	r3, [pc, #320]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bea:	4b4d      	ldr	r3, [pc, #308]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d11c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x190>
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d116      	bne.n	8004c30 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c02:	4b47      	ldr	r3, [pc, #284]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_RCC_OscConfig+0x17a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d001      	beq.n	8004c1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e1df      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1a:	4b41      	ldr	r3, [pc, #260]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	493d      	ldr	r1, [pc, #244]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2e:	e040      	b.n	8004cb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d023      	beq.n	8004c80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c38:	4b39      	ldr	r3, [pc, #228]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a38      	ldr	r2, [pc, #224]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c3e:	f043 0301 	orr.w	r3, r3, #1
 8004c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c44:	f7fe ffd2 	bl	8003bec <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4c:	f7fe ffce 	bl	8003bec <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e1bd      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5e:	4b30      	ldr	r3, [pc, #192]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6a:	4b2d      	ldr	r3, [pc, #180]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4929      	ldr	r1, [pc, #164]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]
 8004c7e:	e018      	b.n	8004cb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c80:	4b27      	ldr	r3, [pc, #156]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a26      	ldr	r2, [pc, #152]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fe ffae 	bl	8003bec <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c94:	f7fe ffaa 	bl	8003bec <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e199      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca6:	4b1e      	ldr	r3, [pc, #120]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d038      	beq.n	8004d30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d019      	beq.n	8004cfa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc6:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cca:	4a15      	ldr	r2, [pc, #84]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd2:	f7fe ff8b 	bl	8003bec <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cda:	f7fe ff87 	bl	8003bec <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e176      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cec:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_OscConfig+0x23a>
 8004cf8:	e01a      	b.n	8004d30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cfa:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfe:	4a08      	ldr	r2, [pc, #32]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004d00:	f023 0301 	bic.w	r3, r3, #1
 8004d04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d06:	f7fe ff71 	bl	8003bec <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d0e:	f7fe ff6d 	bl	8003bec <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d903      	bls.n	8004d24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e15c      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
 8004d20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d24:	4b91      	ldr	r3, [pc, #580]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1ee      	bne.n	8004d0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 80a4 	beq.w	8004e86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d3e:	4b8b      	ldr	r3, [pc, #556]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10d      	bne.n	8004d66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d4a:	4b88      	ldr	r3, [pc, #544]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	4a87      	ldr	r2, [pc, #540]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d54:	6413      	str	r3, [r2, #64]	; 0x40
 8004d56:	4b85      	ldr	r3, [pc, #532]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5e:	60bb      	str	r3, [r7, #8]
 8004d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d62:	2301      	movs	r3, #1
 8004d64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d66:	4b82      	ldr	r3, [pc, #520]	; (8004f70 <HAL_RCC_OscConfig+0x4d0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d118      	bne.n	8004da4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d72:	4b7f      	ldr	r3, [pc, #508]	; (8004f70 <HAL_RCC_OscConfig+0x4d0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a7e      	ldr	r2, [pc, #504]	; (8004f70 <HAL_RCC_OscConfig+0x4d0>)
 8004d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7e:	f7fe ff35 	bl	8003bec <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d86:	f7fe ff31 	bl	8003bec <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b64      	cmp	r3, #100	; 0x64
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e120      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d98:	4b75      	ldr	r3, [pc, #468]	; (8004f70 <HAL_RCC_OscConfig+0x4d0>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d106      	bne.n	8004dba <HAL_RCC_OscConfig+0x31a>
 8004dac:	4b6f      	ldr	r3, [pc, #444]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	4a6e      	ldr	r2, [pc, #440]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	6713      	str	r3, [r2, #112]	; 0x70
 8004db8:	e02d      	b.n	8004e16 <HAL_RCC_OscConfig+0x376>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10c      	bne.n	8004ddc <HAL_RCC_OscConfig+0x33c>
 8004dc2:	4b6a      	ldr	r3, [pc, #424]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc6:	4a69      	ldr	r2, [pc, #420]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dc8:	f023 0301 	bic.w	r3, r3, #1
 8004dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dce:	4b67      	ldr	r3, [pc, #412]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a66      	ldr	r2, [pc, #408]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dd4:	f023 0304 	bic.w	r3, r3, #4
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dda:	e01c      	b.n	8004e16 <HAL_RCC_OscConfig+0x376>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b05      	cmp	r3, #5
 8004de2:	d10c      	bne.n	8004dfe <HAL_RCC_OscConfig+0x35e>
 8004de4:	4b61      	ldr	r3, [pc, #388]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	4a60      	ldr	r2, [pc, #384]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dea:	f043 0304 	orr.w	r3, r3, #4
 8004dee:	6713      	str	r3, [r2, #112]	; 0x70
 8004df0:	4b5e      	ldr	r3, [pc, #376]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	4a5d      	ldr	r2, [pc, #372]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfc:	e00b      	b.n	8004e16 <HAL_RCC_OscConfig+0x376>
 8004dfe:	4b5b      	ldr	r3, [pc, #364]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	4a5a      	ldr	r2, [pc, #360]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e04:	f023 0301 	bic.w	r3, r3, #1
 8004e08:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0a:	4b58      	ldr	r3, [pc, #352]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0e:	4a57      	ldr	r2, [pc, #348]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e10:	f023 0304 	bic.w	r3, r3, #4
 8004e14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d015      	beq.n	8004e4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1e:	f7fe fee5 	bl	8003bec <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e24:	e00a      	b.n	8004e3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e26:	f7fe fee1 	bl	8003bec <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e0ce      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3c:	4b4b      	ldr	r3, [pc, #300]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0ee      	beq.n	8004e26 <HAL_RCC_OscConfig+0x386>
 8004e48:	e014      	b.n	8004e74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4a:	f7fe fecf 	bl	8003bec <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e52:	f7fe fecb 	bl	8003bec <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e0b8      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e68:	4b40      	ldr	r3, [pc, #256]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ee      	bne.n	8004e52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d105      	bne.n	8004e86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7a:	4b3c      	ldr	r3, [pc, #240]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	4a3b      	ldr	r2, [pc, #236]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80a4 	beq.w	8004fd8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e90:	4b36      	ldr	r3, [pc, #216]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 030c 	and.w	r3, r3, #12
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d06b      	beq.n	8004f74 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d149      	bne.n	8004f38 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea4:	4b31      	ldr	r3, [pc, #196]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a30      	ldr	r2, [pc, #192]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fe fe9c 	bl	8003bec <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7fe fe98 	bl	8003bec <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e087      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eca:	4b28      	ldr	r3, [pc, #160]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69da      	ldr	r2, [r3, #28]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	019b      	lsls	r3, r3, #6
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	061b      	lsls	r3, r3, #24
 8004efa:	4313      	orrs	r3, r2
 8004efc:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004efe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f02:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f04:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fe fe6c 	bl	8003bec <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fe fe68 	bl	8003bec <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e057      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f2a:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0x478>
 8004f36:	e04f      	b.n	8004fd8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a0b      	ldr	r2, [pc, #44]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fe fe52 	bl	8003bec <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fe fe4e 	bl	8003bec <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e03d      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	4b03      	ldr	r3, [pc, #12]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x4ac>
 8004f6a:	e035      	b.n	8004fd8 <HAL_RCC_OscConfig+0x538>
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f74:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <HAL_RCC_OscConfig+0x544>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d028      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d121      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d11a      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004faa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d111      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d107      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800

08004fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0d0      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005000:	4b6a      	ldr	r3, [pc, #424]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d910      	bls.n	8005030 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500e:	4b67      	ldr	r3, [pc, #412]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f023 020f 	bic.w	r2, r3, #15
 8005016:	4965      	ldr	r1, [pc, #404]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	4313      	orrs	r3, r2
 800501c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800501e:	4b63      	ldr	r3, [pc, #396]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0b8      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d020      	beq.n	800507e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005048:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	4a58      	ldr	r2, [pc, #352]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800504e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005052:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005060:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a52      	ldr	r2, [pc, #328]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800506a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800506c:	4b50      	ldr	r3, [pc, #320]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	494d      	ldr	r1, [pc, #308]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800507a:	4313      	orrs	r3, r2
 800507c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d040      	beq.n	800510c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005092:	4b47      	ldr	r3, [pc, #284]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d115      	bne.n	80050ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e07f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050aa:	4b41      	ldr	r3, [pc, #260]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d109      	bne.n	80050ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e073      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ba:	4b3d      	ldr	r3, [pc, #244]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e06b      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ca:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f023 0203 	bic.w	r2, r3, #3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4936      	ldr	r1, [pc, #216]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050dc:	f7fe fd86 	bl	8003bec <HAL_GetTick>
 80050e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	e00a      	b.n	80050fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e4:	f7fe fd82 	bl	8003bec <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e053      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fa:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 020c 	and.w	r2, r3, #12
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	429a      	cmp	r2, r3
 800510a:	d1eb      	bne.n	80050e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800510c:	4b27      	ldr	r3, [pc, #156]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d210      	bcs.n	800513c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511a:	4b24      	ldr	r3, [pc, #144]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f023 020f 	bic.w	r2, r3, #15
 8005122:	4922      	ldr	r1, [pc, #136]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	4313      	orrs	r3, r2
 8005128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800512a:	4b20      	ldr	r3, [pc, #128]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d001      	beq.n	800513c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e032      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4916      	ldr	r1, [pc, #88]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	490e      	ldr	r1, [pc, #56]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005176:	4313      	orrs	r3, r2
 8005178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800517a:	f000 f821 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 800517e:	4602      	mov	r2, r0
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	490a      	ldr	r1, [pc, #40]	; (80051b4 <HAL_RCC_ClockConfig+0x1cc>)
 800518c:	5ccb      	ldrb	r3, [r1, r3]
 800518e:	fa22 f303 	lsr.w	r3, r2, r3
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <HAL_RCC_ClockConfig+0x1d0>)
 8005194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <HAL_RCC_ClockConfig+0x1d4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7fe fce2 	bl	8003b64 <HAL_InitTick>

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40023c00 	.word	0x40023c00
 80051b0:	40023800 	.word	0x40023800
 80051b4:	0800757c 	.word	0x0800757c
 80051b8:	2000003c 	.word	0x2000003c
 80051bc:	20000040 	.word	0x20000040

080051c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c4:	b094      	sub	sp, #80	; 0x50
 80051c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	647b      	str	r3, [r7, #68]	; 0x44
 80051cc:	2300      	movs	r3, #0
 80051ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d0:	2300      	movs	r3, #0
 80051d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80051d4:	2300      	movs	r3, #0
 80051d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d8:	4b79      	ldr	r3, [pc, #484]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 030c 	and.w	r3, r3, #12
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d00d      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0x40>
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	f200 80e1 	bhi.w	80053ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_RCC_GetSysClockFreq+0x34>
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d003      	beq.n	80051fa <HAL_RCC_GetSysClockFreq+0x3a>
 80051f2:	e0db      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051f4:	4b73      	ldr	r3, [pc, #460]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80051f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051f8:	e0db      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051fa:	4b73      	ldr	r3, [pc, #460]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80051fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051fe:	e0d8      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005200:	4b6f      	ldr	r3, [pc, #444]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005208:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800520a:	4b6d      	ldr	r3, [pc, #436]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d063      	beq.n	80052de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005216:	4b6a      	ldr	r3, [pc, #424]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	099b      	lsrs	r3, r3, #6
 800521c:	2200      	movs	r2, #0
 800521e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005220:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005228:	633b      	str	r3, [r7, #48]	; 0x30
 800522a:	2300      	movs	r3, #0
 800522c:	637b      	str	r3, [r7, #52]	; 0x34
 800522e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005232:	4622      	mov	r2, r4
 8005234:	462b      	mov	r3, r5
 8005236:	f04f 0000 	mov.w	r0, #0
 800523a:	f04f 0100 	mov.w	r1, #0
 800523e:	0159      	lsls	r1, r3, #5
 8005240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005244:	0150      	lsls	r0, r2, #5
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4621      	mov	r1, r4
 800524c:	1a51      	subs	r1, r2, r1
 800524e:	6139      	str	r1, [r7, #16]
 8005250:	4629      	mov	r1, r5
 8005252:	eb63 0301 	sbc.w	r3, r3, r1
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005264:	4659      	mov	r1, fp
 8005266:	018b      	lsls	r3, r1, #6
 8005268:	4651      	mov	r1, sl
 800526a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800526e:	4651      	mov	r1, sl
 8005270:	018a      	lsls	r2, r1, #6
 8005272:	4651      	mov	r1, sl
 8005274:	ebb2 0801 	subs.w	r8, r2, r1
 8005278:	4659      	mov	r1, fp
 800527a:	eb63 0901 	sbc.w	r9, r3, r1
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800528a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800528e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005292:	4690      	mov	r8, r2
 8005294:	4699      	mov	r9, r3
 8005296:	4623      	mov	r3, r4
 8005298:	eb18 0303 	adds.w	r3, r8, r3
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	462b      	mov	r3, r5
 80052a0:	eb49 0303 	adc.w	r3, r9, r3
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052b2:	4629      	mov	r1, r5
 80052b4:	024b      	lsls	r3, r1, #9
 80052b6:	4621      	mov	r1, r4
 80052b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052bc:	4621      	mov	r1, r4
 80052be:	024a      	lsls	r2, r1, #9
 80052c0:	4610      	mov	r0, r2
 80052c2:	4619      	mov	r1, r3
 80052c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c6:	2200      	movs	r2, #0
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052d0:	f7fa ffee 	bl	80002b0 <__aeabi_uldivmod>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4613      	mov	r3, r2
 80052da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052dc:	e058      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052de:	4b38      	ldr	r3, [pc, #224]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	099b      	lsrs	r3, r3, #6
 80052e4:	2200      	movs	r2, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	4611      	mov	r1, r2
 80052ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ee:	623b      	str	r3, [r7, #32]
 80052f0:	2300      	movs	r3, #0
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
 80052f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052f8:	4642      	mov	r2, r8
 80052fa:	464b      	mov	r3, r9
 80052fc:	f04f 0000 	mov.w	r0, #0
 8005300:	f04f 0100 	mov.w	r1, #0
 8005304:	0159      	lsls	r1, r3, #5
 8005306:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800530a:	0150      	lsls	r0, r2, #5
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4641      	mov	r1, r8
 8005312:	ebb2 0a01 	subs.w	sl, r2, r1
 8005316:	4649      	mov	r1, r9
 8005318:	eb63 0b01 	sbc.w	fp, r3, r1
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005328:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800532c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005330:	ebb2 040a 	subs.w	r4, r2, sl
 8005334:	eb63 050b 	sbc.w	r5, r3, fp
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	00eb      	lsls	r3, r5, #3
 8005342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005346:	00e2      	lsls	r2, r4, #3
 8005348:	4614      	mov	r4, r2
 800534a:	461d      	mov	r5, r3
 800534c:	4643      	mov	r3, r8
 800534e:	18e3      	adds	r3, r4, r3
 8005350:	603b      	str	r3, [r7, #0]
 8005352:	464b      	mov	r3, r9
 8005354:	eb45 0303 	adc.w	r3, r5, r3
 8005358:	607b      	str	r3, [r7, #4]
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005366:	4629      	mov	r1, r5
 8005368:	028b      	lsls	r3, r1, #10
 800536a:	4621      	mov	r1, r4
 800536c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005370:	4621      	mov	r1, r4
 8005372:	028a      	lsls	r2, r1, #10
 8005374:	4610      	mov	r0, r2
 8005376:	4619      	mov	r1, r3
 8005378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800537a:	2200      	movs	r2, #0
 800537c:	61bb      	str	r3, [r7, #24]
 800537e:	61fa      	str	r2, [r7, #28]
 8005380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005384:	f7fa ff94 	bl	80002b0 <__aeabi_uldivmod>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4613      	mov	r3, r2
 800538e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005390:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	0c1b      	lsrs	r3, r3, #16
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	3301      	adds	r3, #1
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80053a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053aa:	e002      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80053ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3750      	adds	r7, #80	; 0x50
 80053b8:	46bd      	mov	sp, r7
 80053ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053be:	bf00      	nop
 80053c0:	40023800 	.word	0x40023800
 80053c4:	00f42400 	.word	0x00f42400
 80053c8:	007a1200 	.word	0x007a1200

080053cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053d0:	4b03      	ldr	r3, [pc, #12]	; (80053e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053d2:	681b      	ldr	r3, [r3, #0]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	2000003c 	.word	0x2000003c

080053e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053e8:	f7ff fff0 	bl	80053cc <HAL_RCC_GetHCLKFreq>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	0a9b      	lsrs	r3, r3, #10
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	4903      	ldr	r1, [pc, #12]	; (8005408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053fa:	5ccb      	ldrb	r3, [r1, r3]
 80053fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005400:	4618      	mov	r0, r3
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40023800 	.word	0x40023800
 8005408:	0800758c 	.word	0x0800758c

0800540c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005410:	f7ff ffdc 	bl	80053cc <HAL_RCC_GetHCLKFreq>
 8005414:	4602      	mov	r2, r0
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	0b5b      	lsrs	r3, r3, #13
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	4903      	ldr	r1, [pc, #12]	; (8005430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005422:	5ccb      	ldrb	r3, [r1, r3]
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005428:	4618      	mov	r0, r3
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40023800 	.word	0x40023800
 8005430:	0800758c 	.word	0x0800758c

08005434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d012      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800545c:	4b69      	ldr	r3, [pc, #420]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	4a68      	ldr	r2, [pc, #416]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005462:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005466:	6093      	str	r3, [r2, #8]
 8005468:	4b66      	ldr	r3, [pc, #408]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005470:	4964      	ldr	r1, [pc, #400]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005472:	4313      	orrs	r3, r2
 8005474:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800547e:	2301      	movs	r3, #1
 8005480:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d017      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800548e:	4b5d      	ldr	r3, [pc, #372]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005494:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549c:	4959      	ldr	r1, [pc, #356]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ac:	d101      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80054ae:	2301      	movs	r3, #1
 80054b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80054ba:	2301      	movs	r3, #1
 80054bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d017      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054ca:	4b4e      	ldr	r3, [pc, #312]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	494a      	ldr	r1, [pc, #296]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054e8:	d101      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80054ea:	2301      	movs	r3, #1
 80054ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80054f6:	2301      	movs	r3, #1
 80054f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005506:	2301      	movs	r3, #1
 8005508:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 808b 	beq.w	800562e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005518:	4b3a      	ldr	r3, [pc, #232]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	4a39      	ldr	r2, [pc, #228]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800551e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005522:	6413      	str	r3, [r2, #64]	; 0x40
 8005524:	4b37      	ldr	r3, [pc, #220]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005530:	4b35      	ldr	r3, [pc, #212]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a34      	ldr	r2, [pc, #208]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800553c:	f7fe fb56 	bl	8003bec <HAL_GetTick>
 8005540:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005542:	e008      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005544:	f7fe fb52 	bl	8003bec <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b64      	cmp	r3, #100	; 0x64
 8005550:	d901      	bls.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e357      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005556:	4b2c      	ldr	r3, [pc, #176]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f0      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005562:	4b28      	ldr	r3, [pc, #160]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d035      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	429a      	cmp	r2, r3
 800557e:	d02e      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005580:	4b20      	ldr	r3, [pc, #128]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005588:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800558a:	4b1e      	ldr	r3, [pc, #120]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558e:	4a1d      	ldr	r2, [pc, #116]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005594:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005596:	4b1b      	ldr	r3, [pc, #108]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559a:	4a1a      	ldr	r2, [pc, #104]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800559c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80055a2:	4a18      	ldr	r2, [pc, #96]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055a8:	4b16      	ldr	r3, [pc, #88]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d114      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b4:	f7fe fb1a 	bl	8003bec <HAL_GetTick>
 80055b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ba:	e00a      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055bc:	f7fe fb16 	bl	8003bec <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e319      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0ee      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ea:	d111      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055f8:	4b04      	ldr	r3, [pc, #16]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80055fa:	400b      	ands	r3, r1
 80055fc:	4901      	ldr	r1, [pc, #4]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]
 8005602:	e00b      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005604:	40023800 	.word	0x40023800
 8005608:	40007000 	.word	0x40007000
 800560c:	0ffffcff 	.word	0x0ffffcff
 8005610:	4baa      	ldr	r3, [pc, #680]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	4aa9      	ldr	r2, [pc, #676]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005616:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800561a:	6093      	str	r3, [r2, #8]
 800561c:	4ba7      	ldr	r3, [pc, #668]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800561e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005628:	49a4      	ldr	r1, [pc, #656]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800562a:	4313      	orrs	r3, r2
 800562c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0310 	and.w	r3, r3, #16
 8005636:	2b00      	cmp	r3, #0
 8005638:	d010      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800563a:	4ba0      	ldr	r3, [pc, #640]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800563c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005640:	4a9e      	ldr	r2, [pc, #632]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005646:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800564a:	4b9c      	ldr	r3, [pc, #624]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800564c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	4999      	ldr	r1, [pc, #612]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005668:	4b94      	ldr	r3, [pc, #592]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800566a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005676:	4991      	ldr	r1, [pc, #580]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800568a:	4b8c      	ldr	r3, [pc, #560]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800568c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005690:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005698:	4988      	ldr	r1, [pc, #544]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00a      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056ac:	4b83      	ldr	r3, [pc, #524]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ba:	4980      	ldr	r1, [pc, #512]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056ce:	4b7b      	ldr	r3, [pc, #492]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056dc:	4977      	ldr	r1, [pc, #476]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056f0:	4b72      	ldr	r3, [pc, #456]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f6:	f023 0203 	bic.w	r2, r3, #3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fe:	496f      	ldr	r1, [pc, #444]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005712:	4b6a      	ldr	r3, [pc, #424]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005718:	f023 020c 	bic.w	r2, r3, #12
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005720:	4966      	ldr	r1, [pc, #408]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005722:	4313      	orrs	r3, r2
 8005724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00a      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005734:	4b61      	ldr	r3, [pc, #388]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005742:	495e      	ldr	r1, [pc, #376]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005744:	4313      	orrs	r3, r2
 8005746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005756:	4b59      	ldr	r3, [pc, #356]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005764:	4955      	ldr	r1, [pc, #340]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005778:	4b50      	ldr	r3, [pc, #320]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005786:	494d      	ldr	r1, [pc, #308]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800579a:	4b48      	ldr	r3, [pc, #288]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800579c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a8:	4944      	ldr	r1, [pc, #272]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80057bc:	4b3f      	ldr	r3, [pc, #252]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ca:	493c      	ldr	r1, [pc, #240]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80057de:	4b37      	ldr	r3, [pc, #220]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ec:	4933      	ldr	r1, [pc, #204]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005800:	4b2e      	ldr	r3, [pc, #184]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005806:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800580e:	492b      	ldr	r1, [pc, #172]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d011      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005822:	4b26      	ldr	r3, [pc, #152]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005828:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005830:	4922      	ldr	r1, [pc, #136]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800583c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005840:	d101      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005842:	2301      	movs	r3, #1
 8005844:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005852:	2301      	movs	r3, #1
 8005854:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005862:	4b16      	ldr	r3, [pc, #88]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005868:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005870:	4912      	ldr	r1, [pc, #72]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005872:	4313      	orrs	r3, r2
 8005874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00b      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005884:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005894:	4909      	ldr	r1, [pc, #36]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d006      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80d9 	beq.w	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058b0:	4b02      	ldr	r3, [pc, #8]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a01      	ldr	r2, [pc, #4]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058ba:	e001      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80058bc:	40023800 	.word	0x40023800
 80058c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c2:	f7fe f993 	bl	8003bec <HAL_GetTick>
 80058c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058c8:	e008      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058ca:	f7fe f98f 	bl	8003bec <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b64      	cmp	r3, #100	; 0x64
 80058d6:	d901      	bls.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e194      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058dc:	4b6c      	ldr	r3, [pc, #432]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f0      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d021      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d11d      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058fc:	4b64      	ldr	r3, [pc, #400]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005902:	0c1b      	lsrs	r3, r3, #16
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800590a:	4b61      	ldr	r3, [pc, #388]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800590c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005910:	0e1b      	lsrs	r3, r3, #24
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	019a      	lsls	r2, r3, #6
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	041b      	lsls	r3, r3, #16
 8005922:	431a      	orrs	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	061b      	lsls	r3, r3, #24
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	071b      	lsls	r3, r3, #28
 8005930:	4957      	ldr	r1, [pc, #348]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d004      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800594c:	d00a      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005956:	2b00      	cmp	r3, #0
 8005958:	d02e      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005962:	d129      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005964:	4b4a      	ldr	r3, [pc, #296]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800596a:	0c1b      	lsrs	r3, r3, #16
 800596c:	f003 0303 	and.w	r3, r3, #3
 8005970:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005972:	4b47      	ldr	r3, [pc, #284]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005978:	0f1b      	lsrs	r3, r3, #28
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	019a      	lsls	r2, r3, #6
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	041b      	lsls	r3, r3, #16
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	061b      	lsls	r3, r3, #24
 8005992:	431a      	orrs	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	071b      	lsls	r3, r3, #28
 8005998:	493d      	ldr	r1, [pc, #244]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059a0:	4b3b      	ldr	r3, [pc, #236]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059a6:	f023 021f 	bic.w	r2, r3, #31
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	3b01      	subs	r3, #1
 80059b0:	4937      	ldr	r1, [pc, #220]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01d      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059c4:	4b32      	ldr	r3, [pc, #200]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ca:	0e1b      	lsrs	r3, r3, #24
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059d2:	4b2f      	ldr	r3, [pc, #188]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d8:	0f1b      	lsrs	r3, r3, #28
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	019a      	lsls	r2, r3, #6
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	041b      	lsls	r3, r3, #16
 80059ec:	431a      	orrs	r2, r3
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	061b      	lsls	r3, r3, #24
 80059f2:	431a      	orrs	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	071b      	lsls	r3, r3, #28
 80059f8:	4925      	ldr	r1, [pc, #148]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d011      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	019a      	lsls	r2, r3, #6
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	041b      	lsls	r3, r3, #16
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	061b      	lsls	r3, r3, #24
 8005a20:	431a      	orrs	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	071b      	lsls	r3, r3, #28
 8005a28:	4919      	ldr	r1, [pc, #100]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a30:	4b17      	ldr	r3, [pc, #92]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a16      	ldr	r2, [pc, #88]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a3c:	f7fe f8d6 	bl	8003bec <HAL_GetTick>
 8005a40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a42:	e008      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a44:	f7fe f8d2 	bl	8003bec <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b64      	cmp	r3, #100	; 0x64
 8005a50:	d901      	bls.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e0d7      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a56:	4b0e      	ldr	r3, [pc, #56]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0f0      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	f040 80cd 	bne.w	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a6a:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a08      	ldr	r2, [pc, #32]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a76:	f7fe f8b9 	bl	8003bec <HAL_GetTick>
 8005a7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a7c:	e00a      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a7e:	f7fe f8b5 	bl	8003bec <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b64      	cmp	r3, #100	; 0x64
 8005a8a:	d903      	bls.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e0ba      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005a90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a94:	4b5e      	ldr	r3, [pc, #376]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aa0:	d0ed      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d009      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d02e      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d12a      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005aca:	4b51      	ldr	r3, [pc, #324]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad0:	0c1b      	lsrs	r3, r3, #16
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ad8:	4b4d      	ldr	r3, [pc, #308]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ade:	0f1b      	lsrs	r3, r3, #28
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	019a      	lsls	r2, r3, #6
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	041b      	lsls	r3, r3, #16
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	061b      	lsls	r3, r3, #24
 8005af8:	431a      	orrs	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	071b      	lsls	r3, r3, #28
 8005afe:	4944      	ldr	r1, [pc, #272]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b06:	4b42      	ldr	r3, [pc, #264]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b14:	3b01      	subs	r3, #1
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	493d      	ldr	r1, [pc, #244]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d022      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b34:	d11d      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b36:	4b36      	ldr	r3, [pc, #216]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3c:	0e1b      	lsrs	r3, r3, #24
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b44:	4b32      	ldr	r3, [pc, #200]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4a:	0f1b      	lsrs	r3, r3, #28
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	019a      	lsls	r2, r3, #6
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	041b      	lsls	r3, r3, #16
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	061b      	lsls	r3, r3, #24
 8005b64:	431a      	orrs	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	071b      	lsls	r3, r3, #28
 8005b6a:	4929      	ldr	r1, [pc, #164]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0308 	and.w	r3, r3, #8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d028      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b7e:	4b24      	ldr	r3, [pc, #144]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b84:	0e1b      	lsrs	r3, r3, #24
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b8c:	4b20      	ldr	r3, [pc, #128]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b92:	0c1b      	lsrs	r3, r3, #16
 8005b94:	f003 0303 	and.w	r3, r3, #3
 8005b98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	019a      	lsls	r2, r3, #6
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	041b      	lsls	r3, r3, #16
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	061b      	lsls	r3, r3, #24
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	071b      	lsls	r3, r3, #28
 8005bb2:	4917      	ldr	r1, [pc, #92]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bba:	4b15      	ldr	r3, [pc, #84]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	4911      	ldr	r1, [pc, #68]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005bd0:	4b0f      	ldr	r3, [pc, #60]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a0e      	ldr	r2, [pc, #56]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bdc:	f7fe f806 	bl	8003bec <HAL_GetTick>
 8005be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005be4:	f7fe f802 	bl	8003bec <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b64      	cmp	r3, #100	; 0x64
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e007      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bf6:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c02:	d1ef      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3720      	adds	r7, #32
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	40023800 	.word	0x40023800

08005c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e040      	b.n	8005ca8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7fd fe12 	bl	8003860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2224      	movs	r2, #36	; 0x24
 8005c40:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0201 	bic.w	r2, r2, #1
 8005c50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f8b0 	bl	8005db8 <UART_SetConfig>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e022      	b.n	8005ca8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fb08 	bl	8006280 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fb8f 	bl	80063c4 <UART_CheckIdleState>
 8005ca6:	4603      	mov	r3, r0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	; 0x28
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cc4:	2b20      	cmp	r3, #32
 8005cc6:	d171      	bne.n	8005dac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <HAL_UART_Transmit+0x24>
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e06a      	b.n	8005dae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2221      	movs	r2, #33	; 0x21
 8005ce4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ce6:	f7fd ff81 	bl	8003bec <HAL_GetTick>
 8005cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	88fa      	ldrh	r2, [r7, #6]
 8005cf0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	88fa      	ldrh	r2, [r7, #6]
 8005cf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d04:	d108      	bne.n	8005d18 <HAL_UART_Transmit+0x68>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d104      	bne.n	8005d18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	61bb      	str	r3, [r7, #24]
 8005d16:	e003      	b.n	8005d20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d20:	e02c      	b.n	8005d7c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2180      	movs	r1, #128	; 0x80
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 fb80 	bl	8006432 <UART_WaitOnFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e038      	b.n	8005dae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10b      	bne.n	8005d5a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	3302      	adds	r3, #2
 8005d56:	61bb      	str	r3, [r7, #24]
 8005d58:	e007      	b.n	8005d6a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	781a      	ldrb	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	3301      	adds	r3, #1
 8005d68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1cc      	bne.n	8005d22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2140      	movs	r1, #64	; 0x40
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 fb4d 	bl	8006432 <UART_WaitOnFlagUntilTimeout>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e005      	b.n	8005dae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	e000      	b.n	8005dae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005dac:	2302      	movs	r3, #2
  }
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3720      	adds	r7, #32
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	4ba6      	ldr	r3, [pc, #664]	; (800607c <UART_SetConfig+0x2c4>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6812      	ldr	r2, [r2, #0]
 8005dea:	6979      	ldr	r1, [r7, #20]
 8005dec:	430b      	orrs	r3, r1
 8005dee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a94      	ldr	r2, [pc, #592]	; (8006080 <UART_SetConfig+0x2c8>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d120      	bne.n	8005e76 <UART_SetConfig+0xbe>
 8005e34:	4b93      	ldr	r3, [pc, #588]	; (8006084 <UART_SetConfig+0x2cc>)
 8005e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d816      	bhi.n	8005e70 <UART_SetConfig+0xb8>
 8005e42:	a201      	add	r2, pc, #4	; (adr r2, 8005e48 <UART_SetConfig+0x90>)
 8005e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e48:	08005e59 	.word	0x08005e59
 8005e4c:	08005e65 	.word	0x08005e65
 8005e50:	08005e5f 	.word	0x08005e5f
 8005e54:	08005e6b 	.word	0x08005e6b
 8005e58:	2301      	movs	r3, #1
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e150      	b.n	8006100 <UART_SetConfig+0x348>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e14d      	b.n	8006100 <UART_SetConfig+0x348>
 8005e64:	2304      	movs	r3, #4
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e14a      	b.n	8006100 <UART_SetConfig+0x348>
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	77fb      	strb	r3, [r7, #31]
 8005e6e:	e147      	b.n	8006100 <UART_SetConfig+0x348>
 8005e70:	2310      	movs	r3, #16
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e144      	b.n	8006100 <UART_SetConfig+0x348>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a83      	ldr	r2, [pc, #524]	; (8006088 <UART_SetConfig+0x2d0>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d132      	bne.n	8005ee6 <UART_SetConfig+0x12e>
 8005e80:	4b80      	ldr	r3, [pc, #512]	; (8006084 <UART_SetConfig+0x2cc>)
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e86:	f003 030c 	and.w	r3, r3, #12
 8005e8a:	2b0c      	cmp	r3, #12
 8005e8c:	d828      	bhi.n	8005ee0 <UART_SetConfig+0x128>
 8005e8e:	a201      	add	r2, pc, #4	; (adr r2, 8005e94 <UART_SetConfig+0xdc>)
 8005e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e94:	08005ec9 	.word	0x08005ec9
 8005e98:	08005ee1 	.word	0x08005ee1
 8005e9c:	08005ee1 	.word	0x08005ee1
 8005ea0:	08005ee1 	.word	0x08005ee1
 8005ea4:	08005ed5 	.word	0x08005ed5
 8005ea8:	08005ee1 	.word	0x08005ee1
 8005eac:	08005ee1 	.word	0x08005ee1
 8005eb0:	08005ee1 	.word	0x08005ee1
 8005eb4:	08005ecf 	.word	0x08005ecf
 8005eb8:	08005ee1 	.word	0x08005ee1
 8005ebc:	08005ee1 	.word	0x08005ee1
 8005ec0:	08005ee1 	.word	0x08005ee1
 8005ec4:	08005edb 	.word	0x08005edb
 8005ec8:	2300      	movs	r3, #0
 8005eca:	77fb      	strb	r3, [r7, #31]
 8005ecc:	e118      	b.n	8006100 <UART_SetConfig+0x348>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	77fb      	strb	r3, [r7, #31]
 8005ed2:	e115      	b.n	8006100 <UART_SetConfig+0x348>
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e112      	b.n	8006100 <UART_SetConfig+0x348>
 8005eda:	2308      	movs	r3, #8
 8005edc:	77fb      	strb	r3, [r7, #31]
 8005ede:	e10f      	b.n	8006100 <UART_SetConfig+0x348>
 8005ee0:	2310      	movs	r3, #16
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	e10c      	b.n	8006100 <UART_SetConfig+0x348>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a68      	ldr	r2, [pc, #416]	; (800608c <UART_SetConfig+0x2d4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d120      	bne.n	8005f32 <UART_SetConfig+0x17a>
 8005ef0:	4b64      	ldr	r3, [pc, #400]	; (8006084 <UART_SetConfig+0x2cc>)
 8005ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005efa:	2b30      	cmp	r3, #48	; 0x30
 8005efc:	d013      	beq.n	8005f26 <UART_SetConfig+0x16e>
 8005efe:	2b30      	cmp	r3, #48	; 0x30
 8005f00:	d814      	bhi.n	8005f2c <UART_SetConfig+0x174>
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d009      	beq.n	8005f1a <UART_SetConfig+0x162>
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d810      	bhi.n	8005f2c <UART_SetConfig+0x174>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <UART_SetConfig+0x15c>
 8005f0e:	2b10      	cmp	r3, #16
 8005f10:	d006      	beq.n	8005f20 <UART_SetConfig+0x168>
 8005f12:	e00b      	b.n	8005f2c <UART_SetConfig+0x174>
 8005f14:	2300      	movs	r3, #0
 8005f16:	77fb      	strb	r3, [r7, #31]
 8005f18:	e0f2      	b.n	8006100 <UART_SetConfig+0x348>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	77fb      	strb	r3, [r7, #31]
 8005f1e:	e0ef      	b.n	8006100 <UART_SetConfig+0x348>
 8005f20:	2304      	movs	r3, #4
 8005f22:	77fb      	strb	r3, [r7, #31]
 8005f24:	e0ec      	b.n	8006100 <UART_SetConfig+0x348>
 8005f26:	2308      	movs	r3, #8
 8005f28:	77fb      	strb	r3, [r7, #31]
 8005f2a:	e0e9      	b.n	8006100 <UART_SetConfig+0x348>
 8005f2c:	2310      	movs	r3, #16
 8005f2e:	77fb      	strb	r3, [r7, #31]
 8005f30:	e0e6      	b.n	8006100 <UART_SetConfig+0x348>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a56      	ldr	r2, [pc, #344]	; (8006090 <UART_SetConfig+0x2d8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d120      	bne.n	8005f7e <UART_SetConfig+0x1c6>
 8005f3c:	4b51      	ldr	r3, [pc, #324]	; (8006084 <UART_SetConfig+0x2cc>)
 8005f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f46:	2bc0      	cmp	r3, #192	; 0xc0
 8005f48:	d013      	beq.n	8005f72 <UART_SetConfig+0x1ba>
 8005f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8005f4c:	d814      	bhi.n	8005f78 <UART_SetConfig+0x1c0>
 8005f4e:	2b80      	cmp	r3, #128	; 0x80
 8005f50:	d009      	beq.n	8005f66 <UART_SetConfig+0x1ae>
 8005f52:	2b80      	cmp	r3, #128	; 0x80
 8005f54:	d810      	bhi.n	8005f78 <UART_SetConfig+0x1c0>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <UART_SetConfig+0x1a8>
 8005f5a:	2b40      	cmp	r3, #64	; 0x40
 8005f5c:	d006      	beq.n	8005f6c <UART_SetConfig+0x1b4>
 8005f5e:	e00b      	b.n	8005f78 <UART_SetConfig+0x1c0>
 8005f60:	2300      	movs	r3, #0
 8005f62:	77fb      	strb	r3, [r7, #31]
 8005f64:	e0cc      	b.n	8006100 <UART_SetConfig+0x348>
 8005f66:	2302      	movs	r3, #2
 8005f68:	77fb      	strb	r3, [r7, #31]
 8005f6a:	e0c9      	b.n	8006100 <UART_SetConfig+0x348>
 8005f6c:	2304      	movs	r3, #4
 8005f6e:	77fb      	strb	r3, [r7, #31]
 8005f70:	e0c6      	b.n	8006100 <UART_SetConfig+0x348>
 8005f72:	2308      	movs	r3, #8
 8005f74:	77fb      	strb	r3, [r7, #31]
 8005f76:	e0c3      	b.n	8006100 <UART_SetConfig+0x348>
 8005f78:	2310      	movs	r3, #16
 8005f7a:	77fb      	strb	r3, [r7, #31]
 8005f7c:	e0c0      	b.n	8006100 <UART_SetConfig+0x348>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a44      	ldr	r2, [pc, #272]	; (8006094 <UART_SetConfig+0x2dc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d125      	bne.n	8005fd4 <UART_SetConfig+0x21c>
 8005f88:	4b3e      	ldr	r3, [pc, #248]	; (8006084 <UART_SetConfig+0x2cc>)
 8005f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f96:	d017      	beq.n	8005fc8 <UART_SetConfig+0x210>
 8005f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f9c:	d817      	bhi.n	8005fce <UART_SetConfig+0x216>
 8005f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa2:	d00b      	beq.n	8005fbc <UART_SetConfig+0x204>
 8005fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa8:	d811      	bhi.n	8005fce <UART_SetConfig+0x216>
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <UART_SetConfig+0x1fe>
 8005fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb2:	d006      	beq.n	8005fc2 <UART_SetConfig+0x20a>
 8005fb4:	e00b      	b.n	8005fce <UART_SetConfig+0x216>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	77fb      	strb	r3, [r7, #31]
 8005fba:	e0a1      	b.n	8006100 <UART_SetConfig+0x348>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	77fb      	strb	r3, [r7, #31]
 8005fc0:	e09e      	b.n	8006100 <UART_SetConfig+0x348>
 8005fc2:	2304      	movs	r3, #4
 8005fc4:	77fb      	strb	r3, [r7, #31]
 8005fc6:	e09b      	b.n	8006100 <UART_SetConfig+0x348>
 8005fc8:	2308      	movs	r3, #8
 8005fca:	77fb      	strb	r3, [r7, #31]
 8005fcc:	e098      	b.n	8006100 <UART_SetConfig+0x348>
 8005fce:	2310      	movs	r3, #16
 8005fd0:	77fb      	strb	r3, [r7, #31]
 8005fd2:	e095      	b.n	8006100 <UART_SetConfig+0x348>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a2f      	ldr	r2, [pc, #188]	; (8006098 <UART_SetConfig+0x2e0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d125      	bne.n	800602a <UART_SetConfig+0x272>
 8005fde:	4b29      	ldr	r3, [pc, #164]	; (8006084 <UART_SetConfig+0x2cc>)
 8005fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fec:	d017      	beq.n	800601e <UART_SetConfig+0x266>
 8005fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ff2:	d817      	bhi.n	8006024 <UART_SetConfig+0x26c>
 8005ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff8:	d00b      	beq.n	8006012 <UART_SetConfig+0x25a>
 8005ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ffe:	d811      	bhi.n	8006024 <UART_SetConfig+0x26c>
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <UART_SetConfig+0x254>
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006008:	d006      	beq.n	8006018 <UART_SetConfig+0x260>
 800600a:	e00b      	b.n	8006024 <UART_SetConfig+0x26c>
 800600c:	2301      	movs	r3, #1
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e076      	b.n	8006100 <UART_SetConfig+0x348>
 8006012:	2302      	movs	r3, #2
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e073      	b.n	8006100 <UART_SetConfig+0x348>
 8006018:	2304      	movs	r3, #4
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e070      	b.n	8006100 <UART_SetConfig+0x348>
 800601e:	2308      	movs	r3, #8
 8006020:	77fb      	strb	r3, [r7, #31]
 8006022:	e06d      	b.n	8006100 <UART_SetConfig+0x348>
 8006024:	2310      	movs	r3, #16
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e06a      	b.n	8006100 <UART_SetConfig+0x348>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1b      	ldr	r2, [pc, #108]	; (800609c <UART_SetConfig+0x2e4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d138      	bne.n	80060a6 <UART_SetConfig+0x2ee>
 8006034:	4b13      	ldr	r3, [pc, #76]	; (8006084 <UART_SetConfig+0x2cc>)
 8006036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800603e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006042:	d017      	beq.n	8006074 <UART_SetConfig+0x2bc>
 8006044:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006048:	d82a      	bhi.n	80060a0 <UART_SetConfig+0x2e8>
 800604a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604e:	d00b      	beq.n	8006068 <UART_SetConfig+0x2b0>
 8006050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006054:	d824      	bhi.n	80060a0 <UART_SetConfig+0x2e8>
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <UART_SetConfig+0x2aa>
 800605a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605e:	d006      	beq.n	800606e <UART_SetConfig+0x2b6>
 8006060:	e01e      	b.n	80060a0 <UART_SetConfig+0x2e8>
 8006062:	2300      	movs	r3, #0
 8006064:	77fb      	strb	r3, [r7, #31]
 8006066:	e04b      	b.n	8006100 <UART_SetConfig+0x348>
 8006068:	2302      	movs	r3, #2
 800606a:	77fb      	strb	r3, [r7, #31]
 800606c:	e048      	b.n	8006100 <UART_SetConfig+0x348>
 800606e:	2304      	movs	r3, #4
 8006070:	77fb      	strb	r3, [r7, #31]
 8006072:	e045      	b.n	8006100 <UART_SetConfig+0x348>
 8006074:	2308      	movs	r3, #8
 8006076:	77fb      	strb	r3, [r7, #31]
 8006078:	e042      	b.n	8006100 <UART_SetConfig+0x348>
 800607a:	bf00      	nop
 800607c:	efff69f3 	.word	0xefff69f3
 8006080:	40011000 	.word	0x40011000
 8006084:	40023800 	.word	0x40023800
 8006088:	40004400 	.word	0x40004400
 800608c:	40004800 	.word	0x40004800
 8006090:	40004c00 	.word	0x40004c00
 8006094:	40005000 	.word	0x40005000
 8006098:	40011400 	.word	0x40011400
 800609c:	40007800 	.word	0x40007800
 80060a0:	2310      	movs	r3, #16
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e02c      	b.n	8006100 <UART_SetConfig+0x348>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a72      	ldr	r2, [pc, #456]	; (8006274 <UART_SetConfig+0x4bc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d125      	bne.n	80060fc <UART_SetConfig+0x344>
 80060b0:	4b71      	ldr	r3, [pc, #452]	; (8006278 <UART_SetConfig+0x4c0>)
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80060ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060be:	d017      	beq.n	80060f0 <UART_SetConfig+0x338>
 80060c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060c4:	d817      	bhi.n	80060f6 <UART_SetConfig+0x33e>
 80060c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ca:	d00b      	beq.n	80060e4 <UART_SetConfig+0x32c>
 80060cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d0:	d811      	bhi.n	80060f6 <UART_SetConfig+0x33e>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <UART_SetConfig+0x326>
 80060d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060da:	d006      	beq.n	80060ea <UART_SetConfig+0x332>
 80060dc:	e00b      	b.n	80060f6 <UART_SetConfig+0x33e>
 80060de:	2300      	movs	r3, #0
 80060e0:	77fb      	strb	r3, [r7, #31]
 80060e2:	e00d      	b.n	8006100 <UART_SetConfig+0x348>
 80060e4:	2302      	movs	r3, #2
 80060e6:	77fb      	strb	r3, [r7, #31]
 80060e8:	e00a      	b.n	8006100 <UART_SetConfig+0x348>
 80060ea:	2304      	movs	r3, #4
 80060ec:	77fb      	strb	r3, [r7, #31]
 80060ee:	e007      	b.n	8006100 <UART_SetConfig+0x348>
 80060f0:	2308      	movs	r3, #8
 80060f2:	77fb      	strb	r3, [r7, #31]
 80060f4:	e004      	b.n	8006100 <UART_SetConfig+0x348>
 80060f6:	2310      	movs	r3, #16
 80060f8:	77fb      	strb	r3, [r7, #31]
 80060fa:	e001      	b.n	8006100 <UART_SetConfig+0x348>
 80060fc:	2310      	movs	r3, #16
 80060fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006108:	d15b      	bne.n	80061c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800610a:	7ffb      	ldrb	r3, [r7, #31]
 800610c:	2b08      	cmp	r3, #8
 800610e:	d828      	bhi.n	8006162 <UART_SetConfig+0x3aa>
 8006110:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <UART_SetConfig+0x360>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	0800613d 	.word	0x0800613d
 800611c:	08006145 	.word	0x08006145
 8006120:	0800614d 	.word	0x0800614d
 8006124:	08006163 	.word	0x08006163
 8006128:	08006153 	.word	0x08006153
 800612c:	08006163 	.word	0x08006163
 8006130:	08006163 	.word	0x08006163
 8006134:	08006163 	.word	0x08006163
 8006138:	0800615b 	.word	0x0800615b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800613c:	f7ff f952 	bl	80053e4 <HAL_RCC_GetPCLK1Freq>
 8006140:	61b8      	str	r0, [r7, #24]
        break;
 8006142:	e013      	b.n	800616c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006144:	f7ff f962 	bl	800540c <HAL_RCC_GetPCLK2Freq>
 8006148:	61b8      	str	r0, [r7, #24]
        break;
 800614a:	e00f      	b.n	800616c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800614c:	4b4b      	ldr	r3, [pc, #300]	; (800627c <UART_SetConfig+0x4c4>)
 800614e:	61bb      	str	r3, [r7, #24]
        break;
 8006150:	e00c      	b.n	800616c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006152:	f7ff f835 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 8006156:	61b8      	str	r0, [r7, #24]
        break;
 8006158:	e008      	b.n	800616c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800615a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800615e:	61bb      	str	r3, [r7, #24]
        break;
 8006160:	e004      	b.n	800616c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	77bb      	strb	r3, [r7, #30]
        break;
 800616a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d074      	beq.n	800625c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	005a      	lsls	r2, r3, #1
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	085b      	lsrs	r3, r3, #1
 800617c:	441a      	add	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	fbb2 f3f3 	udiv	r3, r2, r3
 8006186:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	2b0f      	cmp	r3, #15
 800618c:	d916      	bls.n	80061bc <UART_SetConfig+0x404>
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006194:	d212      	bcs.n	80061bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	b29b      	uxth	r3, r3
 800619a:	f023 030f 	bic.w	r3, r3, #15
 800619e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	085b      	lsrs	r3, r3, #1
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	89fb      	ldrh	r3, [r7, #14]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	89fa      	ldrh	r2, [r7, #14]
 80061b8:	60da      	str	r2, [r3, #12]
 80061ba:	e04f      	b.n	800625c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	77bb      	strb	r3, [r7, #30]
 80061c0:	e04c      	b.n	800625c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061c2:	7ffb      	ldrb	r3, [r7, #31]
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d828      	bhi.n	800621a <UART_SetConfig+0x462>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <UART_SetConfig+0x418>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	080061f5 	.word	0x080061f5
 80061d4:	080061fd 	.word	0x080061fd
 80061d8:	08006205 	.word	0x08006205
 80061dc:	0800621b 	.word	0x0800621b
 80061e0:	0800620b 	.word	0x0800620b
 80061e4:	0800621b 	.word	0x0800621b
 80061e8:	0800621b 	.word	0x0800621b
 80061ec:	0800621b 	.word	0x0800621b
 80061f0:	08006213 	.word	0x08006213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061f4:	f7ff f8f6 	bl	80053e4 <HAL_RCC_GetPCLK1Freq>
 80061f8:	61b8      	str	r0, [r7, #24]
        break;
 80061fa:	e013      	b.n	8006224 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061fc:	f7ff f906 	bl	800540c <HAL_RCC_GetPCLK2Freq>
 8006200:	61b8      	str	r0, [r7, #24]
        break;
 8006202:	e00f      	b.n	8006224 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006204:	4b1d      	ldr	r3, [pc, #116]	; (800627c <UART_SetConfig+0x4c4>)
 8006206:	61bb      	str	r3, [r7, #24]
        break;
 8006208:	e00c      	b.n	8006224 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800620a:	f7fe ffd9 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 800620e:	61b8      	str	r0, [r7, #24]
        break;
 8006210:	e008      	b.n	8006224 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006216:	61bb      	str	r3, [r7, #24]
        break;
 8006218:	e004      	b.n	8006224 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	77bb      	strb	r3, [r7, #30]
        break;
 8006222:	bf00      	nop
    }

    if (pclk != 0U)
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d018      	beq.n	800625c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	085a      	lsrs	r2, r3, #1
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	441a      	add	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	fbb2 f3f3 	udiv	r3, r2, r3
 800623c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b0f      	cmp	r3, #15
 8006242:	d909      	bls.n	8006258 <UART_SetConfig+0x4a0>
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800624a:	d205      	bcs.n	8006258 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	b29a      	uxth	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60da      	str	r2, [r3, #12]
 8006256:	e001      	b.n	800625c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006268:	7fbb      	ldrb	r3, [r7, #30]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3720      	adds	r7, #32
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40007c00 	.word	0x40007c00
 8006278:	40023800 	.word	0x40023800
 800627c:	00f42400 	.word	0x00f42400

08006280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01a      	beq.n	8006396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800637e:	d10a      	bne.n	8006396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	605a      	str	r2, [r3, #4]
  }
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063d4:	f7fd fc0a 	bl	8003bec <HAL_GetTick>
 80063d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d10e      	bne.n	8006406 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f81b 	bl	8006432 <UART_WaitOnFlagUntilTimeout>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e011      	b.n	800642a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2220      	movs	r2, #32
 8006410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b09c      	sub	sp, #112	; 0x70
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	603b      	str	r3, [r7, #0]
 800643e:	4613      	mov	r3, r2
 8006440:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006442:	e0a7      	b.n	8006594 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800644a:	f000 80a3 	beq.w	8006594 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644e:	f7fd fbcd 	bl	8003bec <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800645a:	429a      	cmp	r2, r3
 800645c:	d302      	bcc.n	8006464 <UART_WaitOnFlagUntilTimeout+0x32>
 800645e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006460:	2b00      	cmp	r3, #0
 8006462:	d13f      	bne.n	80064e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006474:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006478:	667b      	str	r3, [r7, #100]	; 0x64
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006482:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006484:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006488:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e6      	bne.n	8006464 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3308      	adds	r3, #8
 800649c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	663b      	str	r3, [r7, #96]	; 0x60
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80064b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e5      	bne.n	8006496 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2220      	movs	r2, #32
 80064ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e068      	b.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0304 	and.w	r3, r3, #4
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d050      	beq.n	8006594 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006500:	d148      	bne.n	8006594 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800650a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006520:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800652a:	637b      	str	r3, [r7, #52]	; 0x34
 800652c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e6      	bne.n	800650c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3308      	adds	r3, #8
 8006544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	613b      	str	r3, [r7, #16]
   return(result);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f023 0301 	bic.w	r3, r3, #1
 8006554:	66bb      	str	r3, [r7, #104]	; 0x68
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3308      	adds	r3, #8
 800655c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800655e:	623a      	str	r2, [r7, #32]
 8006560:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	69f9      	ldr	r1, [r7, #28]
 8006564:	6a3a      	ldr	r2, [r7, #32]
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	61bb      	str	r3, [r7, #24]
   return(result);
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e5      	bne.n	800653e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2220      	movs	r2, #32
 8006576:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2220      	movs	r2, #32
 800657c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e010      	b.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69da      	ldr	r2, [r3, #28]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4013      	ands	r3, r2
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	bf0c      	ite	eq
 80065a4:	2301      	moveq	r3, #1
 80065a6:	2300      	movne	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	461a      	mov	r2, r3
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	f43f af48 	beq.w	8006444 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3770      	adds	r7, #112	; 0x70
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065c0:	b084      	sub	sp, #16
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b084      	sub	sp, #16
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	f107 001c 	add.w	r0, r7, #28
 80065ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d120      	bne.n	800661a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	4b20      	ldr	r3, [pc, #128]	; (800666c <USB_CoreInit+0xac>)
 80065ea:	4013      	ands	r3, r2
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d105      	bne.n	800660e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fa96 	bl	8006b40 <USB_CoreReset>
 8006614:	4603      	mov	r3, r0
 8006616:	73fb      	strb	r3, [r7, #15]
 8006618:	e010      	b.n	800663c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fa8a 	bl	8006b40 <USB_CoreReset>
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006634:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	2b01      	cmp	r3, #1
 8006640:	d10b      	bne.n	800665a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f043 0206 	orr.w	r2, r3, #6
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f043 0220 	orr.w	r2, r3, #32
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800665a:	7bfb      	ldrb	r3, [r7, #15]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006666:	b004      	add	sp, #16
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	ffbdffbf 	.word	0xffbdffbf

08006670 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f023 0201 	bic.w	r2, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	460b      	mov	r3, r1
 800669c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d115      	bne.n	80066e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066c0:	2001      	movs	r0, #1
 80066c2:	f7fd fa9f 	bl	8003c04 <HAL_Delay>
      ms++;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3301      	adds	r3, #1
 80066ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fa29 	bl	8006b24 <USB_GetMode>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d01e      	beq.n	8006716 <USB_SetCurrentMode+0x84>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b31      	cmp	r3, #49	; 0x31
 80066dc:	d9f0      	bls.n	80066c0 <USB_SetCurrentMode+0x2e>
 80066de:	e01a      	b.n	8006716 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d115      	bne.n	8006712 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066f2:	2001      	movs	r0, #1
 80066f4:	f7fd fa86 	bl	8003c04 <HAL_Delay>
      ms++;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3301      	adds	r3, #1
 80066fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fa10 	bl	8006b24 <USB_GetMode>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d005      	beq.n	8006716 <USB_SetCurrentMode+0x84>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b31      	cmp	r3, #49	; 0x31
 800670e:	d9f0      	bls.n	80066f2 <USB_SetCurrentMode+0x60>
 8006710:	e001      	b.n	8006716 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e005      	b.n	8006722 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b32      	cmp	r3, #50	; 0x32
 800671a:	d101      	bne.n	8006720 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
	...

0800672c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800672c:	b084      	sub	sp, #16
 800672e:	b580      	push	{r7, lr}
 8006730:	b086      	sub	sp, #24
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800673a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006746:	2300      	movs	r3, #0
 8006748:	613b      	str	r3, [r7, #16]
 800674a:	e009      	b.n	8006760 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	3340      	adds	r3, #64	; 0x40
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	2200      	movs	r2, #0
 8006758:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	3301      	adds	r3, #1
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b0e      	cmp	r3, #14
 8006764:	d9f2      	bls.n	800674c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006768:	2b00      	cmp	r3, #0
 800676a:	d11c      	bne.n	80067a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800677a:	f043 0302 	orr.w	r3, r3, #2
 800677e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006784:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	e005      	b.n	80067b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067b8:	461a      	mov	r2, r3
 80067ba:	2300      	movs	r3, #0
 80067bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c4:	4619      	mov	r1, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067cc:	461a      	mov	r2, r3
 80067ce:	680b      	ldr	r3, [r1, #0]
 80067d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d10c      	bne.n	80067f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d104      	bne.n	80067e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067de:	2100      	movs	r1, #0
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f965 	bl	8006ab0 <USB_SetDevSpeed>
 80067e6:	e008      	b.n	80067fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067e8:	2101      	movs	r1, #1
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f960 	bl	8006ab0 <USB_SetDevSpeed>
 80067f0:	e003      	b.n	80067fa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067f2:	2103      	movs	r1, #3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f95b 	bl	8006ab0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067fa:	2110      	movs	r1, #16
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f8f3 	bl	80069e8 <USB_FlushTxFifo>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f91f 	bl	8006a50 <USB_FlushRxFifo>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006822:	461a      	mov	r2, r3
 8006824:	2300      	movs	r3, #0
 8006826:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682e:	461a      	mov	r2, r3
 8006830:	2300      	movs	r3, #0
 8006832:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683a:	461a      	mov	r2, r3
 800683c:	2300      	movs	r3, #0
 800683e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006840:	2300      	movs	r3, #0
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	e043      	b.n	80068ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006858:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800685c:	d118      	bne.n	8006890 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10a      	bne.n	800687a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006870:	461a      	mov	r2, r3
 8006872:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	e013      	b.n	80068a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006886:	461a      	mov	r2, r3
 8006888:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	e008      	b.n	80068a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689c:	461a      	mov	r2, r3
 800689e:	2300      	movs	r3, #0
 80068a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ae:	461a      	mov	r2, r3
 80068b0:	2300      	movs	r3, #0
 80068b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c0:	461a      	mov	r2, r3
 80068c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	3301      	adds	r3, #1
 80068cc:	613b      	str	r3, [r7, #16]
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d3b7      	bcc.n	8006846 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068d6:	2300      	movs	r3, #0
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	e043      	b.n	8006964 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068f2:	d118      	bne.n	8006926 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006906:	461a      	mov	r2, r3
 8006908:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	e013      	b.n	8006938 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691c:	461a      	mov	r2, r3
 800691e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	e008      	b.n	8006938 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006932:	461a      	mov	r2, r3
 8006934:	2300      	movs	r3, #0
 8006936:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006944:	461a      	mov	r2, r3
 8006946:	2300      	movs	r3, #0
 8006948:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006956:	461a      	mov	r2, r3
 8006958:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800695c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	3301      	adds	r3, #1
 8006962:	613b      	str	r3, [r7, #16]
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	429a      	cmp	r2, r3
 800696a:	d3b7      	bcc.n	80068dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800697a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800697e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800698c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	2b00      	cmp	r3, #0
 8006992:	d105      	bne.n	80069a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	f043 0210 	orr.w	r2, r3, #16
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699a      	ldr	r2, [r3, #24]
 80069a4:	4b0e      	ldr	r3, [pc, #56]	; (80069e0 <USB_DevInit+0x2b4>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	f043 0208 	orr.w	r2, r3, #8
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d105      	bne.n	80069d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699a      	ldr	r2, [r3, #24]
 80069c8:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <USB_DevInit+0x2b8>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069dc:	b004      	add	sp, #16
 80069de:	4770      	bx	lr
 80069e0:	803c3800 	.word	0x803c3800
 80069e4:	40000004 	.word	0x40000004

080069e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3301      	adds	r3, #1
 80069fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a13      	ldr	r2, [pc, #76]	; (8006a4c <USB_FlushTxFifo+0x64>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d901      	bls.n	8006a08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e01b      	b.n	8006a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	daf2      	bge.n	80069f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	019b      	lsls	r3, r3, #6
 8006a18:	f043 0220 	orr.w	r2, r3, #32
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3301      	adds	r3, #1
 8006a24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4a08      	ldr	r2, [pc, #32]	; (8006a4c <USB_FlushTxFifo+0x64>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d901      	bls.n	8006a32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e006      	b.n	8006a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d0f0      	beq.n	8006a20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	00030d40 	.word	0x00030d40

08006a50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4a11      	ldr	r2, [pc, #68]	; (8006aac <USB_FlushRxFifo+0x5c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d901      	bls.n	8006a6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e018      	b.n	8006aa0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	daf2      	bge.n	8006a5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2210      	movs	r2, #16
 8006a7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3301      	adds	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4a08      	ldr	r2, [pc, #32]	; (8006aac <USB_FlushRxFifo+0x5c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d901      	bls.n	8006a92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e006      	b.n	8006aa0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f003 0310 	and.w	r3, r3, #16
 8006a9a:	2b10      	cmp	r3, #16
 8006a9c:	d0f0      	beq.n	8006a80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	00030d40 	.word	0x00030d40

08006ab0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	68f9      	ldr	r1, [r7, #12]
 8006acc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006afc:	f023 0303 	bic.w	r3, r3, #3
 8006b00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b10:	f043 0302 	orr.w	r3, r3, #2
 8006b14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	f003 0301 	and.w	r3, r3, #1
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4a13      	ldr	r2, [pc, #76]	; (8006ba4 <USB_CoreReset+0x64>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d901      	bls.n	8006b5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e01b      	b.n	8006b96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	daf2      	bge.n	8006b4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f043 0201 	orr.w	r2, r3, #1
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4a09      	ldr	r2, [pc, #36]	; (8006ba4 <USB_CoreReset+0x64>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d901      	bls.n	8006b88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e006      	b.n	8006b96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d0f0      	beq.n	8006b76 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	00030d40 	.word	0x00030d40

08006ba8 <siprintf>:
 8006ba8:	b40e      	push	{r1, r2, r3}
 8006baa:	b500      	push	{lr}
 8006bac:	b09c      	sub	sp, #112	; 0x70
 8006bae:	ab1d      	add	r3, sp, #116	; 0x74
 8006bb0:	9002      	str	r0, [sp, #8]
 8006bb2:	9006      	str	r0, [sp, #24]
 8006bb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006bb8:	4809      	ldr	r0, [pc, #36]	; (8006be0 <siprintf+0x38>)
 8006bba:	9107      	str	r1, [sp, #28]
 8006bbc:	9104      	str	r1, [sp, #16]
 8006bbe:	4909      	ldr	r1, [pc, #36]	; (8006be4 <siprintf+0x3c>)
 8006bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bc4:	9105      	str	r1, [sp, #20]
 8006bc6:	6800      	ldr	r0, [r0, #0]
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	a902      	add	r1, sp, #8
 8006bcc:	f000 f9a0 	bl	8006f10 <_svfiprintf_r>
 8006bd0:	9b02      	ldr	r3, [sp, #8]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	b01c      	add	sp, #112	; 0x70
 8006bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bdc:	b003      	add	sp, #12
 8006bde:	4770      	bx	lr
 8006be0:	20000094 	.word	0x20000094
 8006be4:	ffff0208 	.word	0xffff0208

08006be8 <memset>:
 8006be8:	4402      	add	r2, r0
 8006bea:	4603      	mov	r3, r0
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d100      	bne.n	8006bf2 <memset+0xa>
 8006bf0:	4770      	bx	lr
 8006bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8006bf6:	e7f9      	b.n	8006bec <memset+0x4>

08006bf8 <__errno>:
 8006bf8:	4b01      	ldr	r3, [pc, #4]	; (8006c00 <__errno+0x8>)
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	20000094 	.word	0x20000094

08006c04 <__libc_init_array>:
 8006c04:	b570      	push	{r4, r5, r6, lr}
 8006c06:	4d0d      	ldr	r5, [pc, #52]	; (8006c3c <__libc_init_array+0x38>)
 8006c08:	4c0d      	ldr	r4, [pc, #52]	; (8006c40 <__libc_init_array+0x3c>)
 8006c0a:	1b64      	subs	r4, r4, r5
 8006c0c:	10a4      	asrs	r4, r4, #2
 8006c0e:	2600      	movs	r6, #0
 8006c10:	42a6      	cmp	r6, r4
 8006c12:	d109      	bne.n	8006c28 <__libc_init_array+0x24>
 8006c14:	4d0b      	ldr	r5, [pc, #44]	; (8006c44 <__libc_init_array+0x40>)
 8006c16:	4c0c      	ldr	r4, [pc, #48]	; (8006c48 <__libc_init_array+0x44>)
 8006c18:	f000 fc6a 	bl	80074f0 <_init>
 8006c1c:	1b64      	subs	r4, r4, r5
 8006c1e:	10a4      	asrs	r4, r4, #2
 8006c20:	2600      	movs	r6, #0
 8006c22:	42a6      	cmp	r6, r4
 8006c24:	d105      	bne.n	8006c32 <__libc_init_array+0x2e>
 8006c26:	bd70      	pop	{r4, r5, r6, pc}
 8006c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c2c:	4798      	blx	r3
 8006c2e:	3601      	adds	r6, #1
 8006c30:	e7ee      	b.n	8006c10 <__libc_init_array+0xc>
 8006c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c36:	4798      	blx	r3
 8006c38:	3601      	adds	r6, #1
 8006c3a:	e7f2      	b.n	8006c22 <__libc_init_array+0x1e>
 8006c3c:	080075d0 	.word	0x080075d0
 8006c40:	080075d0 	.word	0x080075d0
 8006c44:	080075d0 	.word	0x080075d0
 8006c48:	080075d4 	.word	0x080075d4

08006c4c <__retarget_lock_acquire_recursive>:
 8006c4c:	4770      	bx	lr

08006c4e <__retarget_lock_release_recursive>:
 8006c4e:	4770      	bx	lr

08006c50 <memcpy>:
 8006c50:	440a      	add	r2, r1
 8006c52:	4291      	cmp	r1, r2
 8006c54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006c58:	d100      	bne.n	8006c5c <memcpy+0xc>
 8006c5a:	4770      	bx	lr
 8006c5c:	b510      	push	{r4, lr}
 8006c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c66:	4291      	cmp	r1, r2
 8006c68:	d1f9      	bne.n	8006c5e <memcpy+0xe>
 8006c6a:	bd10      	pop	{r4, pc}

08006c6c <_free_r>:
 8006c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c6e:	2900      	cmp	r1, #0
 8006c70:	d044      	beq.n	8006cfc <_free_r+0x90>
 8006c72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c76:	9001      	str	r0, [sp, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f1a1 0404 	sub.w	r4, r1, #4
 8006c7e:	bfb8      	it	lt
 8006c80:	18e4      	addlt	r4, r4, r3
 8006c82:	f000 f8df 	bl	8006e44 <__malloc_lock>
 8006c86:	4a1e      	ldr	r2, [pc, #120]	; (8006d00 <_free_r+0x94>)
 8006c88:	9801      	ldr	r0, [sp, #4]
 8006c8a:	6813      	ldr	r3, [r2, #0]
 8006c8c:	b933      	cbnz	r3, 8006c9c <_free_r+0x30>
 8006c8e:	6063      	str	r3, [r4, #4]
 8006c90:	6014      	str	r4, [r2, #0]
 8006c92:	b003      	add	sp, #12
 8006c94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c98:	f000 b8da 	b.w	8006e50 <__malloc_unlock>
 8006c9c:	42a3      	cmp	r3, r4
 8006c9e:	d908      	bls.n	8006cb2 <_free_r+0x46>
 8006ca0:	6825      	ldr	r5, [r4, #0]
 8006ca2:	1961      	adds	r1, r4, r5
 8006ca4:	428b      	cmp	r3, r1
 8006ca6:	bf01      	itttt	eq
 8006ca8:	6819      	ldreq	r1, [r3, #0]
 8006caa:	685b      	ldreq	r3, [r3, #4]
 8006cac:	1949      	addeq	r1, r1, r5
 8006cae:	6021      	streq	r1, [r4, #0]
 8006cb0:	e7ed      	b.n	8006c8e <_free_r+0x22>
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	b10b      	cbz	r3, 8006cbc <_free_r+0x50>
 8006cb8:	42a3      	cmp	r3, r4
 8006cba:	d9fa      	bls.n	8006cb2 <_free_r+0x46>
 8006cbc:	6811      	ldr	r1, [r2, #0]
 8006cbe:	1855      	adds	r5, r2, r1
 8006cc0:	42a5      	cmp	r5, r4
 8006cc2:	d10b      	bne.n	8006cdc <_free_r+0x70>
 8006cc4:	6824      	ldr	r4, [r4, #0]
 8006cc6:	4421      	add	r1, r4
 8006cc8:	1854      	adds	r4, r2, r1
 8006cca:	42a3      	cmp	r3, r4
 8006ccc:	6011      	str	r1, [r2, #0]
 8006cce:	d1e0      	bne.n	8006c92 <_free_r+0x26>
 8006cd0:	681c      	ldr	r4, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	6053      	str	r3, [r2, #4]
 8006cd6:	440c      	add	r4, r1
 8006cd8:	6014      	str	r4, [r2, #0]
 8006cda:	e7da      	b.n	8006c92 <_free_r+0x26>
 8006cdc:	d902      	bls.n	8006ce4 <_free_r+0x78>
 8006cde:	230c      	movs	r3, #12
 8006ce0:	6003      	str	r3, [r0, #0]
 8006ce2:	e7d6      	b.n	8006c92 <_free_r+0x26>
 8006ce4:	6825      	ldr	r5, [r4, #0]
 8006ce6:	1961      	adds	r1, r4, r5
 8006ce8:	428b      	cmp	r3, r1
 8006cea:	bf04      	itt	eq
 8006cec:	6819      	ldreq	r1, [r3, #0]
 8006cee:	685b      	ldreq	r3, [r3, #4]
 8006cf0:	6063      	str	r3, [r4, #4]
 8006cf2:	bf04      	itt	eq
 8006cf4:	1949      	addeq	r1, r1, r5
 8006cf6:	6021      	streq	r1, [r4, #0]
 8006cf8:	6054      	str	r4, [r2, #4]
 8006cfa:	e7ca      	b.n	8006c92 <_free_r+0x26>
 8006cfc:	b003      	add	sp, #12
 8006cfe:	bd30      	pop	{r4, r5, pc}
 8006d00:	20002e44 	.word	0x20002e44

08006d04 <sbrk_aligned>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	4e0e      	ldr	r6, [pc, #56]	; (8006d40 <sbrk_aligned+0x3c>)
 8006d08:	460c      	mov	r4, r1
 8006d0a:	6831      	ldr	r1, [r6, #0]
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	b911      	cbnz	r1, 8006d16 <sbrk_aligned+0x12>
 8006d10:	f000 fba6 	bl	8007460 <_sbrk_r>
 8006d14:	6030      	str	r0, [r6, #0]
 8006d16:	4621      	mov	r1, r4
 8006d18:	4628      	mov	r0, r5
 8006d1a:	f000 fba1 	bl	8007460 <_sbrk_r>
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	d00a      	beq.n	8006d38 <sbrk_aligned+0x34>
 8006d22:	1cc4      	adds	r4, r0, #3
 8006d24:	f024 0403 	bic.w	r4, r4, #3
 8006d28:	42a0      	cmp	r0, r4
 8006d2a:	d007      	beq.n	8006d3c <sbrk_aligned+0x38>
 8006d2c:	1a21      	subs	r1, r4, r0
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f000 fb96 	bl	8007460 <_sbrk_r>
 8006d34:	3001      	adds	r0, #1
 8006d36:	d101      	bne.n	8006d3c <sbrk_aligned+0x38>
 8006d38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
 8006d40:	20002e48 	.word	0x20002e48

08006d44 <_malloc_r>:
 8006d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d48:	1ccd      	adds	r5, r1, #3
 8006d4a:	f025 0503 	bic.w	r5, r5, #3
 8006d4e:	3508      	adds	r5, #8
 8006d50:	2d0c      	cmp	r5, #12
 8006d52:	bf38      	it	cc
 8006d54:	250c      	movcc	r5, #12
 8006d56:	2d00      	cmp	r5, #0
 8006d58:	4607      	mov	r7, r0
 8006d5a:	db01      	blt.n	8006d60 <_malloc_r+0x1c>
 8006d5c:	42a9      	cmp	r1, r5
 8006d5e:	d905      	bls.n	8006d6c <_malloc_r+0x28>
 8006d60:	230c      	movs	r3, #12
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	2600      	movs	r6, #0
 8006d66:	4630      	mov	r0, r6
 8006d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006e40 <_malloc_r+0xfc>
 8006d70:	f000 f868 	bl	8006e44 <__malloc_lock>
 8006d74:	f8d8 3000 	ldr.w	r3, [r8]
 8006d78:	461c      	mov	r4, r3
 8006d7a:	bb5c      	cbnz	r4, 8006dd4 <_malloc_r+0x90>
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	4638      	mov	r0, r7
 8006d80:	f7ff ffc0 	bl	8006d04 <sbrk_aligned>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	4604      	mov	r4, r0
 8006d88:	d155      	bne.n	8006e36 <_malloc_r+0xf2>
 8006d8a:	f8d8 4000 	ldr.w	r4, [r8]
 8006d8e:	4626      	mov	r6, r4
 8006d90:	2e00      	cmp	r6, #0
 8006d92:	d145      	bne.n	8006e20 <_malloc_r+0xdc>
 8006d94:	2c00      	cmp	r4, #0
 8006d96:	d048      	beq.n	8006e2a <_malloc_r+0xe6>
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	eb04 0903 	add.w	r9, r4, r3
 8006da2:	f000 fb5d 	bl	8007460 <_sbrk_r>
 8006da6:	4581      	cmp	r9, r0
 8006da8:	d13f      	bne.n	8006e2a <_malloc_r+0xe6>
 8006daa:	6821      	ldr	r1, [r4, #0]
 8006dac:	1a6d      	subs	r5, r5, r1
 8006dae:	4629      	mov	r1, r5
 8006db0:	4638      	mov	r0, r7
 8006db2:	f7ff ffa7 	bl	8006d04 <sbrk_aligned>
 8006db6:	3001      	adds	r0, #1
 8006db8:	d037      	beq.n	8006e2a <_malloc_r+0xe6>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	442b      	add	r3, r5
 8006dbe:	6023      	str	r3, [r4, #0]
 8006dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d038      	beq.n	8006e3a <_malloc_r+0xf6>
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	42a2      	cmp	r2, r4
 8006dcc:	d12b      	bne.n	8006e26 <_malloc_r+0xe2>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	605a      	str	r2, [r3, #4]
 8006dd2:	e00f      	b.n	8006df4 <_malloc_r+0xb0>
 8006dd4:	6822      	ldr	r2, [r4, #0]
 8006dd6:	1b52      	subs	r2, r2, r5
 8006dd8:	d41f      	bmi.n	8006e1a <_malloc_r+0xd6>
 8006dda:	2a0b      	cmp	r2, #11
 8006ddc:	d917      	bls.n	8006e0e <_malloc_r+0xca>
 8006dde:	1961      	adds	r1, r4, r5
 8006de0:	42a3      	cmp	r3, r4
 8006de2:	6025      	str	r5, [r4, #0]
 8006de4:	bf18      	it	ne
 8006de6:	6059      	strne	r1, [r3, #4]
 8006de8:	6863      	ldr	r3, [r4, #4]
 8006dea:	bf08      	it	eq
 8006dec:	f8c8 1000 	streq.w	r1, [r8]
 8006df0:	5162      	str	r2, [r4, r5]
 8006df2:	604b      	str	r3, [r1, #4]
 8006df4:	4638      	mov	r0, r7
 8006df6:	f104 060b 	add.w	r6, r4, #11
 8006dfa:	f000 f829 	bl	8006e50 <__malloc_unlock>
 8006dfe:	f026 0607 	bic.w	r6, r6, #7
 8006e02:	1d23      	adds	r3, r4, #4
 8006e04:	1af2      	subs	r2, r6, r3
 8006e06:	d0ae      	beq.n	8006d66 <_malloc_r+0x22>
 8006e08:	1b9b      	subs	r3, r3, r6
 8006e0a:	50a3      	str	r3, [r4, r2]
 8006e0c:	e7ab      	b.n	8006d66 <_malloc_r+0x22>
 8006e0e:	42a3      	cmp	r3, r4
 8006e10:	6862      	ldr	r2, [r4, #4]
 8006e12:	d1dd      	bne.n	8006dd0 <_malloc_r+0x8c>
 8006e14:	f8c8 2000 	str.w	r2, [r8]
 8006e18:	e7ec      	b.n	8006df4 <_malloc_r+0xb0>
 8006e1a:	4623      	mov	r3, r4
 8006e1c:	6864      	ldr	r4, [r4, #4]
 8006e1e:	e7ac      	b.n	8006d7a <_malloc_r+0x36>
 8006e20:	4634      	mov	r4, r6
 8006e22:	6876      	ldr	r6, [r6, #4]
 8006e24:	e7b4      	b.n	8006d90 <_malloc_r+0x4c>
 8006e26:	4613      	mov	r3, r2
 8006e28:	e7cc      	b.n	8006dc4 <_malloc_r+0x80>
 8006e2a:	230c      	movs	r3, #12
 8006e2c:	603b      	str	r3, [r7, #0]
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f000 f80e 	bl	8006e50 <__malloc_unlock>
 8006e34:	e797      	b.n	8006d66 <_malloc_r+0x22>
 8006e36:	6025      	str	r5, [r4, #0]
 8006e38:	e7dc      	b.n	8006df4 <_malloc_r+0xb0>
 8006e3a:	605b      	str	r3, [r3, #4]
 8006e3c:	deff      	udf	#255	; 0xff
 8006e3e:	bf00      	nop
 8006e40:	20002e44 	.word	0x20002e44

08006e44 <__malloc_lock>:
 8006e44:	4801      	ldr	r0, [pc, #4]	; (8006e4c <__malloc_lock+0x8>)
 8006e46:	f7ff bf01 	b.w	8006c4c <__retarget_lock_acquire_recursive>
 8006e4a:	bf00      	nop
 8006e4c:	20002e40 	.word	0x20002e40

08006e50 <__malloc_unlock>:
 8006e50:	4801      	ldr	r0, [pc, #4]	; (8006e58 <__malloc_unlock+0x8>)
 8006e52:	f7ff befc 	b.w	8006c4e <__retarget_lock_release_recursive>
 8006e56:	bf00      	nop
 8006e58:	20002e40 	.word	0x20002e40

08006e5c <__ssputs_r>:
 8006e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e60:	688e      	ldr	r6, [r1, #8]
 8006e62:	461f      	mov	r7, r3
 8006e64:	42be      	cmp	r6, r7
 8006e66:	680b      	ldr	r3, [r1, #0]
 8006e68:	4682      	mov	sl, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	4690      	mov	r8, r2
 8006e6e:	d82c      	bhi.n	8006eca <__ssputs_r+0x6e>
 8006e70:	898a      	ldrh	r2, [r1, #12]
 8006e72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e76:	d026      	beq.n	8006ec6 <__ssputs_r+0x6a>
 8006e78:	6965      	ldr	r5, [r4, #20]
 8006e7a:	6909      	ldr	r1, [r1, #16]
 8006e7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e80:	eba3 0901 	sub.w	r9, r3, r1
 8006e84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e88:	1c7b      	adds	r3, r7, #1
 8006e8a:	444b      	add	r3, r9
 8006e8c:	106d      	asrs	r5, r5, #1
 8006e8e:	429d      	cmp	r5, r3
 8006e90:	bf38      	it	cc
 8006e92:	461d      	movcc	r5, r3
 8006e94:	0553      	lsls	r3, r2, #21
 8006e96:	d527      	bpl.n	8006ee8 <__ssputs_r+0x8c>
 8006e98:	4629      	mov	r1, r5
 8006e9a:	f7ff ff53 	bl	8006d44 <_malloc_r>
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	b360      	cbz	r0, 8006efc <__ssputs_r+0xa0>
 8006ea2:	6921      	ldr	r1, [r4, #16]
 8006ea4:	464a      	mov	r2, r9
 8006ea6:	f7ff fed3 	bl	8006c50 <memcpy>
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb4:	81a3      	strh	r3, [r4, #12]
 8006eb6:	6126      	str	r6, [r4, #16]
 8006eb8:	6165      	str	r5, [r4, #20]
 8006eba:	444e      	add	r6, r9
 8006ebc:	eba5 0509 	sub.w	r5, r5, r9
 8006ec0:	6026      	str	r6, [r4, #0]
 8006ec2:	60a5      	str	r5, [r4, #8]
 8006ec4:	463e      	mov	r6, r7
 8006ec6:	42be      	cmp	r6, r7
 8006ec8:	d900      	bls.n	8006ecc <__ssputs_r+0x70>
 8006eca:	463e      	mov	r6, r7
 8006ecc:	6820      	ldr	r0, [r4, #0]
 8006ece:	4632      	mov	r2, r6
 8006ed0:	4641      	mov	r1, r8
 8006ed2:	f000 faab 	bl	800742c <memmove>
 8006ed6:	68a3      	ldr	r3, [r4, #8]
 8006ed8:	1b9b      	subs	r3, r3, r6
 8006eda:	60a3      	str	r3, [r4, #8]
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	4433      	add	r3, r6
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee8:	462a      	mov	r2, r5
 8006eea:	f000 fac9 	bl	8007480 <_realloc_r>
 8006eee:	4606      	mov	r6, r0
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d1e0      	bne.n	8006eb6 <__ssputs_r+0x5a>
 8006ef4:	6921      	ldr	r1, [r4, #16]
 8006ef6:	4650      	mov	r0, sl
 8006ef8:	f7ff feb8 	bl	8006c6c <_free_r>
 8006efc:	230c      	movs	r3, #12
 8006efe:	f8ca 3000 	str.w	r3, [sl]
 8006f02:	89a3      	ldrh	r3, [r4, #12]
 8006f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f08:	81a3      	strh	r3, [r4, #12]
 8006f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f0e:	e7e9      	b.n	8006ee4 <__ssputs_r+0x88>

08006f10 <_svfiprintf_r>:
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	4698      	mov	r8, r3
 8006f16:	898b      	ldrh	r3, [r1, #12]
 8006f18:	061b      	lsls	r3, r3, #24
 8006f1a:	b09d      	sub	sp, #116	; 0x74
 8006f1c:	4607      	mov	r7, r0
 8006f1e:	460d      	mov	r5, r1
 8006f20:	4614      	mov	r4, r2
 8006f22:	d50e      	bpl.n	8006f42 <_svfiprintf_r+0x32>
 8006f24:	690b      	ldr	r3, [r1, #16]
 8006f26:	b963      	cbnz	r3, 8006f42 <_svfiprintf_r+0x32>
 8006f28:	2140      	movs	r1, #64	; 0x40
 8006f2a:	f7ff ff0b 	bl	8006d44 <_malloc_r>
 8006f2e:	6028      	str	r0, [r5, #0]
 8006f30:	6128      	str	r0, [r5, #16]
 8006f32:	b920      	cbnz	r0, 8006f3e <_svfiprintf_r+0x2e>
 8006f34:	230c      	movs	r3, #12
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f3c:	e0d0      	b.n	80070e0 <_svfiprintf_r+0x1d0>
 8006f3e:	2340      	movs	r3, #64	; 0x40
 8006f40:	616b      	str	r3, [r5, #20]
 8006f42:	2300      	movs	r3, #0
 8006f44:	9309      	str	r3, [sp, #36]	; 0x24
 8006f46:	2320      	movs	r3, #32
 8006f48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f50:	2330      	movs	r3, #48	; 0x30
 8006f52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80070f8 <_svfiprintf_r+0x1e8>
 8006f56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f5a:	f04f 0901 	mov.w	r9, #1
 8006f5e:	4623      	mov	r3, r4
 8006f60:	469a      	mov	sl, r3
 8006f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f66:	b10a      	cbz	r2, 8006f6c <_svfiprintf_r+0x5c>
 8006f68:	2a25      	cmp	r2, #37	; 0x25
 8006f6a:	d1f9      	bne.n	8006f60 <_svfiprintf_r+0x50>
 8006f6c:	ebba 0b04 	subs.w	fp, sl, r4
 8006f70:	d00b      	beq.n	8006f8a <_svfiprintf_r+0x7a>
 8006f72:	465b      	mov	r3, fp
 8006f74:	4622      	mov	r2, r4
 8006f76:	4629      	mov	r1, r5
 8006f78:	4638      	mov	r0, r7
 8006f7a:	f7ff ff6f 	bl	8006e5c <__ssputs_r>
 8006f7e:	3001      	adds	r0, #1
 8006f80:	f000 80a9 	beq.w	80070d6 <_svfiprintf_r+0x1c6>
 8006f84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f86:	445a      	add	r2, fp
 8006f88:	9209      	str	r2, [sp, #36]	; 0x24
 8006f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 80a1 	beq.w	80070d6 <_svfiprintf_r+0x1c6>
 8006f94:	2300      	movs	r3, #0
 8006f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f9e:	f10a 0a01 	add.w	sl, sl, #1
 8006fa2:	9304      	str	r3, [sp, #16]
 8006fa4:	9307      	str	r3, [sp, #28]
 8006fa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006faa:	931a      	str	r3, [sp, #104]	; 0x68
 8006fac:	4654      	mov	r4, sl
 8006fae:	2205      	movs	r2, #5
 8006fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb4:	4850      	ldr	r0, [pc, #320]	; (80070f8 <_svfiprintf_r+0x1e8>)
 8006fb6:	f7f9 f92b 	bl	8000210 <memchr>
 8006fba:	9a04      	ldr	r2, [sp, #16]
 8006fbc:	b9d8      	cbnz	r0, 8006ff6 <_svfiprintf_r+0xe6>
 8006fbe:	06d0      	lsls	r0, r2, #27
 8006fc0:	bf44      	itt	mi
 8006fc2:	2320      	movmi	r3, #32
 8006fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fc8:	0711      	lsls	r1, r2, #28
 8006fca:	bf44      	itt	mi
 8006fcc:	232b      	movmi	r3, #43	; 0x2b
 8006fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006fd8:	d015      	beq.n	8007006 <_svfiprintf_r+0xf6>
 8006fda:	9a07      	ldr	r2, [sp, #28]
 8006fdc:	4654      	mov	r4, sl
 8006fde:	2000      	movs	r0, #0
 8006fe0:	f04f 0c0a 	mov.w	ip, #10
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fea:	3b30      	subs	r3, #48	; 0x30
 8006fec:	2b09      	cmp	r3, #9
 8006fee:	d94d      	bls.n	800708c <_svfiprintf_r+0x17c>
 8006ff0:	b1b0      	cbz	r0, 8007020 <_svfiprintf_r+0x110>
 8006ff2:	9207      	str	r2, [sp, #28]
 8006ff4:	e014      	b.n	8007020 <_svfiprintf_r+0x110>
 8006ff6:	eba0 0308 	sub.w	r3, r0, r8
 8006ffa:	fa09 f303 	lsl.w	r3, r9, r3
 8006ffe:	4313      	orrs	r3, r2
 8007000:	9304      	str	r3, [sp, #16]
 8007002:	46a2      	mov	sl, r4
 8007004:	e7d2      	b.n	8006fac <_svfiprintf_r+0x9c>
 8007006:	9b03      	ldr	r3, [sp, #12]
 8007008:	1d19      	adds	r1, r3, #4
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	9103      	str	r1, [sp, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	bfbb      	ittet	lt
 8007012:	425b      	neglt	r3, r3
 8007014:	f042 0202 	orrlt.w	r2, r2, #2
 8007018:	9307      	strge	r3, [sp, #28]
 800701a:	9307      	strlt	r3, [sp, #28]
 800701c:	bfb8      	it	lt
 800701e:	9204      	strlt	r2, [sp, #16]
 8007020:	7823      	ldrb	r3, [r4, #0]
 8007022:	2b2e      	cmp	r3, #46	; 0x2e
 8007024:	d10c      	bne.n	8007040 <_svfiprintf_r+0x130>
 8007026:	7863      	ldrb	r3, [r4, #1]
 8007028:	2b2a      	cmp	r3, #42	; 0x2a
 800702a:	d134      	bne.n	8007096 <_svfiprintf_r+0x186>
 800702c:	9b03      	ldr	r3, [sp, #12]
 800702e:	1d1a      	adds	r2, r3, #4
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	9203      	str	r2, [sp, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	bfb8      	it	lt
 8007038:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800703c:	3402      	adds	r4, #2
 800703e:	9305      	str	r3, [sp, #20]
 8007040:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007108 <_svfiprintf_r+0x1f8>
 8007044:	7821      	ldrb	r1, [r4, #0]
 8007046:	2203      	movs	r2, #3
 8007048:	4650      	mov	r0, sl
 800704a:	f7f9 f8e1 	bl	8000210 <memchr>
 800704e:	b138      	cbz	r0, 8007060 <_svfiprintf_r+0x150>
 8007050:	9b04      	ldr	r3, [sp, #16]
 8007052:	eba0 000a 	sub.w	r0, r0, sl
 8007056:	2240      	movs	r2, #64	; 0x40
 8007058:	4082      	lsls	r2, r0
 800705a:	4313      	orrs	r3, r2
 800705c:	3401      	adds	r4, #1
 800705e:	9304      	str	r3, [sp, #16]
 8007060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007064:	4825      	ldr	r0, [pc, #148]	; (80070fc <_svfiprintf_r+0x1ec>)
 8007066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800706a:	2206      	movs	r2, #6
 800706c:	f7f9 f8d0 	bl	8000210 <memchr>
 8007070:	2800      	cmp	r0, #0
 8007072:	d038      	beq.n	80070e6 <_svfiprintf_r+0x1d6>
 8007074:	4b22      	ldr	r3, [pc, #136]	; (8007100 <_svfiprintf_r+0x1f0>)
 8007076:	bb1b      	cbnz	r3, 80070c0 <_svfiprintf_r+0x1b0>
 8007078:	9b03      	ldr	r3, [sp, #12]
 800707a:	3307      	adds	r3, #7
 800707c:	f023 0307 	bic.w	r3, r3, #7
 8007080:	3308      	adds	r3, #8
 8007082:	9303      	str	r3, [sp, #12]
 8007084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007086:	4433      	add	r3, r6
 8007088:	9309      	str	r3, [sp, #36]	; 0x24
 800708a:	e768      	b.n	8006f5e <_svfiprintf_r+0x4e>
 800708c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007090:	460c      	mov	r4, r1
 8007092:	2001      	movs	r0, #1
 8007094:	e7a6      	b.n	8006fe4 <_svfiprintf_r+0xd4>
 8007096:	2300      	movs	r3, #0
 8007098:	3401      	adds	r4, #1
 800709a:	9305      	str	r3, [sp, #20]
 800709c:	4619      	mov	r1, r3
 800709e:	f04f 0c0a 	mov.w	ip, #10
 80070a2:	4620      	mov	r0, r4
 80070a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070a8:	3a30      	subs	r2, #48	; 0x30
 80070aa:	2a09      	cmp	r2, #9
 80070ac:	d903      	bls.n	80070b6 <_svfiprintf_r+0x1a6>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d0c6      	beq.n	8007040 <_svfiprintf_r+0x130>
 80070b2:	9105      	str	r1, [sp, #20]
 80070b4:	e7c4      	b.n	8007040 <_svfiprintf_r+0x130>
 80070b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80070ba:	4604      	mov	r4, r0
 80070bc:	2301      	movs	r3, #1
 80070be:	e7f0      	b.n	80070a2 <_svfiprintf_r+0x192>
 80070c0:	ab03      	add	r3, sp, #12
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	462a      	mov	r2, r5
 80070c6:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <_svfiprintf_r+0x1f4>)
 80070c8:	a904      	add	r1, sp, #16
 80070ca:	4638      	mov	r0, r7
 80070cc:	f3af 8000 	nop.w
 80070d0:	1c42      	adds	r2, r0, #1
 80070d2:	4606      	mov	r6, r0
 80070d4:	d1d6      	bne.n	8007084 <_svfiprintf_r+0x174>
 80070d6:	89ab      	ldrh	r3, [r5, #12]
 80070d8:	065b      	lsls	r3, r3, #25
 80070da:	f53f af2d 	bmi.w	8006f38 <_svfiprintf_r+0x28>
 80070de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070e0:	b01d      	add	sp, #116	; 0x74
 80070e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e6:	ab03      	add	r3, sp, #12
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	462a      	mov	r2, r5
 80070ec:	4b05      	ldr	r3, [pc, #20]	; (8007104 <_svfiprintf_r+0x1f4>)
 80070ee:	a904      	add	r1, sp, #16
 80070f0:	4638      	mov	r0, r7
 80070f2:	f000 f879 	bl	80071e8 <_printf_i>
 80070f6:	e7eb      	b.n	80070d0 <_svfiprintf_r+0x1c0>
 80070f8:	08007594 	.word	0x08007594
 80070fc:	0800759e 	.word	0x0800759e
 8007100:	00000000 	.word	0x00000000
 8007104:	08006e5d 	.word	0x08006e5d
 8007108:	0800759a 	.word	0x0800759a

0800710c <_printf_common>:
 800710c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007110:	4616      	mov	r6, r2
 8007112:	4699      	mov	r9, r3
 8007114:	688a      	ldr	r2, [r1, #8]
 8007116:	690b      	ldr	r3, [r1, #16]
 8007118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800711c:	4293      	cmp	r3, r2
 800711e:	bfb8      	it	lt
 8007120:	4613      	movlt	r3, r2
 8007122:	6033      	str	r3, [r6, #0]
 8007124:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007128:	4607      	mov	r7, r0
 800712a:	460c      	mov	r4, r1
 800712c:	b10a      	cbz	r2, 8007132 <_printf_common+0x26>
 800712e:	3301      	adds	r3, #1
 8007130:	6033      	str	r3, [r6, #0]
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	0699      	lsls	r1, r3, #26
 8007136:	bf42      	ittt	mi
 8007138:	6833      	ldrmi	r3, [r6, #0]
 800713a:	3302      	addmi	r3, #2
 800713c:	6033      	strmi	r3, [r6, #0]
 800713e:	6825      	ldr	r5, [r4, #0]
 8007140:	f015 0506 	ands.w	r5, r5, #6
 8007144:	d106      	bne.n	8007154 <_printf_common+0x48>
 8007146:	f104 0a19 	add.w	sl, r4, #25
 800714a:	68e3      	ldr	r3, [r4, #12]
 800714c:	6832      	ldr	r2, [r6, #0]
 800714e:	1a9b      	subs	r3, r3, r2
 8007150:	42ab      	cmp	r3, r5
 8007152:	dc26      	bgt.n	80071a2 <_printf_common+0x96>
 8007154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007158:	1e13      	subs	r3, r2, #0
 800715a:	6822      	ldr	r2, [r4, #0]
 800715c:	bf18      	it	ne
 800715e:	2301      	movne	r3, #1
 8007160:	0692      	lsls	r2, r2, #26
 8007162:	d42b      	bmi.n	80071bc <_printf_common+0xb0>
 8007164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007168:	4649      	mov	r1, r9
 800716a:	4638      	mov	r0, r7
 800716c:	47c0      	blx	r8
 800716e:	3001      	adds	r0, #1
 8007170:	d01e      	beq.n	80071b0 <_printf_common+0xa4>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	6922      	ldr	r2, [r4, #16]
 8007176:	f003 0306 	and.w	r3, r3, #6
 800717a:	2b04      	cmp	r3, #4
 800717c:	bf02      	ittt	eq
 800717e:	68e5      	ldreq	r5, [r4, #12]
 8007180:	6833      	ldreq	r3, [r6, #0]
 8007182:	1aed      	subeq	r5, r5, r3
 8007184:	68a3      	ldr	r3, [r4, #8]
 8007186:	bf0c      	ite	eq
 8007188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800718c:	2500      	movne	r5, #0
 800718e:	4293      	cmp	r3, r2
 8007190:	bfc4      	itt	gt
 8007192:	1a9b      	subgt	r3, r3, r2
 8007194:	18ed      	addgt	r5, r5, r3
 8007196:	2600      	movs	r6, #0
 8007198:	341a      	adds	r4, #26
 800719a:	42b5      	cmp	r5, r6
 800719c:	d11a      	bne.n	80071d4 <_printf_common+0xc8>
 800719e:	2000      	movs	r0, #0
 80071a0:	e008      	b.n	80071b4 <_printf_common+0xa8>
 80071a2:	2301      	movs	r3, #1
 80071a4:	4652      	mov	r2, sl
 80071a6:	4649      	mov	r1, r9
 80071a8:	4638      	mov	r0, r7
 80071aa:	47c0      	blx	r8
 80071ac:	3001      	adds	r0, #1
 80071ae:	d103      	bne.n	80071b8 <_printf_common+0xac>
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b8:	3501      	adds	r5, #1
 80071ba:	e7c6      	b.n	800714a <_printf_common+0x3e>
 80071bc:	18e1      	adds	r1, r4, r3
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	2030      	movs	r0, #48	; 0x30
 80071c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071c6:	4422      	add	r2, r4
 80071c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071d0:	3302      	adds	r3, #2
 80071d2:	e7c7      	b.n	8007164 <_printf_common+0x58>
 80071d4:	2301      	movs	r3, #1
 80071d6:	4622      	mov	r2, r4
 80071d8:	4649      	mov	r1, r9
 80071da:	4638      	mov	r0, r7
 80071dc:	47c0      	blx	r8
 80071de:	3001      	adds	r0, #1
 80071e0:	d0e6      	beq.n	80071b0 <_printf_common+0xa4>
 80071e2:	3601      	adds	r6, #1
 80071e4:	e7d9      	b.n	800719a <_printf_common+0x8e>
	...

080071e8 <_printf_i>:
 80071e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071ec:	7e0f      	ldrb	r7, [r1, #24]
 80071ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071f0:	2f78      	cmp	r7, #120	; 0x78
 80071f2:	4691      	mov	r9, r2
 80071f4:	4680      	mov	r8, r0
 80071f6:	460c      	mov	r4, r1
 80071f8:	469a      	mov	sl, r3
 80071fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071fe:	d807      	bhi.n	8007210 <_printf_i+0x28>
 8007200:	2f62      	cmp	r7, #98	; 0x62
 8007202:	d80a      	bhi.n	800721a <_printf_i+0x32>
 8007204:	2f00      	cmp	r7, #0
 8007206:	f000 80d4 	beq.w	80073b2 <_printf_i+0x1ca>
 800720a:	2f58      	cmp	r7, #88	; 0x58
 800720c:	f000 80c0 	beq.w	8007390 <_printf_i+0x1a8>
 8007210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007218:	e03a      	b.n	8007290 <_printf_i+0xa8>
 800721a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800721e:	2b15      	cmp	r3, #21
 8007220:	d8f6      	bhi.n	8007210 <_printf_i+0x28>
 8007222:	a101      	add	r1, pc, #4	; (adr r1, 8007228 <_printf_i+0x40>)
 8007224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007228:	08007281 	.word	0x08007281
 800722c:	08007295 	.word	0x08007295
 8007230:	08007211 	.word	0x08007211
 8007234:	08007211 	.word	0x08007211
 8007238:	08007211 	.word	0x08007211
 800723c:	08007211 	.word	0x08007211
 8007240:	08007295 	.word	0x08007295
 8007244:	08007211 	.word	0x08007211
 8007248:	08007211 	.word	0x08007211
 800724c:	08007211 	.word	0x08007211
 8007250:	08007211 	.word	0x08007211
 8007254:	08007399 	.word	0x08007399
 8007258:	080072c1 	.word	0x080072c1
 800725c:	08007353 	.word	0x08007353
 8007260:	08007211 	.word	0x08007211
 8007264:	08007211 	.word	0x08007211
 8007268:	080073bb 	.word	0x080073bb
 800726c:	08007211 	.word	0x08007211
 8007270:	080072c1 	.word	0x080072c1
 8007274:	08007211 	.word	0x08007211
 8007278:	08007211 	.word	0x08007211
 800727c:	0800735b 	.word	0x0800735b
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	1d1a      	adds	r2, r3, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	602a      	str	r2, [r5, #0]
 8007288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800728c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007290:	2301      	movs	r3, #1
 8007292:	e09f      	b.n	80073d4 <_printf_i+0x1ec>
 8007294:	6820      	ldr	r0, [r4, #0]
 8007296:	682b      	ldr	r3, [r5, #0]
 8007298:	0607      	lsls	r7, r0, #24
 800729a:	f103 0104 	add.w	r1, r3, #4
 800729e:	6029      	str	r1, [r5, #0]
 80072a0:	d501      	bpl.n	80072a6 <_printf_i+0xbe>
 80072a2:	681e      	ldr	r6, [r3, #0]
 80072a4:	e003      	b.n	80072ae <_printf_i+0xc6>
 80072a6:	0646      	lsls	r6, r0, #25
 80072a8:	d5fb      	bpl.n	80072a2 <_printf_i+0xba>
 80072aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80072ae:	2e00      	cmp	r6, #0
 80072b0:	da03      	bge.n	80072ba <_printf_i+0xd2>
 80072b2:	232d      	movs	r3, #45	; 0x2d
 80072b4:	4276      	negs	r6, r6
 80072b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ba:	485a      	ldr	r0, [pc, #360]	; (8007424 <_printf_i+0x23c>)
 80072bc:	230a      	movs	r3, #10
 80072be:	e012      	b.n	80072e6 <_printf_i+0xfe>
 80072c0:	682b      	ldr	r3, [r5, #0]
 80072c2:	6820      	ldr	r0, [r4, #0]
 80072c4:	1d19      	adds	r1, r3, #4
 80072c6:	6029      	str	r1, [r5, #0]
 80072c8:	0605      	lsls	r5, r0, #24
 80072ca:	d501      	bpl.n	80072d0 <_printf_i+0xe8>
 80072cc:	681e      	ldr	r6, [r3, #0]
 80072ce:	e002      	b.n	80072d6 <_printf_i+0xee>
 80072d0:	0641      	lsls	r1, r0, #25
 80072d2:	d5fb      	bpl.n	80072cc <_printf_i+0xe4>
 80072d4:	881e      	ldrh	r6, [r3, #0]
 80072d6:	4853      	ldr	r0, [pc, #332]	; (8007424 <_printf_i+0x23c>)
 80072d8:	2f6f      	cmp	r7, #111	; 0x6f
 80072da:	bf0c      	ite	eq
 80072dc:	2308      	moveq	r3, #8
 80072de:	230a      	movne	r3, #10
 80072e0:	2100      	movs	r1, #0
 80072e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072e6:	6865      	ldr	r5, [r4, #4]
 80072e8:	60a5      	str	r5, [r4, #8]
 80072ea:	2d00      	cmp	r5, #0
 80072ec:	bfa2      	ittt	ge
 80072ee:	6821      	ldrge	r1, [r4, #0]
 80072f0:	f021 0104 	bicge.w	r1, r1, #4
 80072f4:	6021      	strge	r1, [r4, #0]
 80072f6:	b90e      	cbnz	r6, 80072fc <_printf_i+0x114>
 80072f8:	2d00      	cmp	r5, #0
 80072fa:	d04b      	beq.n	8007394 <_printf_i+0x1ac>
 80072fc:	4615      	mov	r5, r2
 80072fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007302:	fb03 6711 	mls	r7, r3, r1, r6
 8007306:	5dc7      	ldrb	r7, [r0, r7]
 8007308:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800730c:	4637      	mov	r7, r6
 800730e:	42bb      	cmp	r3, r7
 8007310:	460e      	mov	r6, r1
 8007312:	d9f4      	bls.n	80072fe <_printf_i+0x116>
 8007314:	2b08      	cmp	r3, #8
 8007316:	d10b      	bne.n	8007330 <_printf_i+0x148>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	07de      	lsls	r6, r3, #31
 800731c:	d508      	bpl.n	8007330 <_printf_i+0x148>
 800731e:	6923      	ldr	r3, [r4, #16]
 8007320:	6861      	ldr	r1, [r4, #4]
 8007322:	4299      	cmp	r1, r3
 8007324:	bfde      	ittt	le
 8007326:	2330      	movle	r3, #48	; 0x30
 8007328:	f805 3c01 	strble.w	r3, [r5, #-1]
 800732c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007330:	1b52      	subs	r2, r2, r5
 8007332:	6122      	str	r2, [r4, #16]
 8007334:	f8cd a000 	str.w	sl, [sp]
 8007338:	464b      	mov	r3, r9
 800733a:	aa03      	add	r2, sp, #12
 800733c:	4621      	mov	r1, r4
 800733e:	4640      	mov	r0, r8
 8007340:	f7ff fee4 	bl	800710c <_printf_common>
 8007344:	3001      	adds	r0, #1
 8007346:	d14a      	bne.n	80073de <_printf_i+0x1f6>
 8007348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800734c:	b004      	add	sp, #16
 800734e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	f043 0320 	orr.w	r3, r3, #32
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	4833      	ldr	r0, [pc, #204]	; (8007428 <_printf_i+0x240>)
 800735c:	2778      	movs	r7, #120	; 0x78
 800735e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	6829      	ldr	r1, [r5, #0]
 8007366:	061f      	lsls	r7, r3, #24
 8007368:	f851 6b04 	ldr.w	r6, [r1], #4
 800736c:	d402      	bmi.n	8007374 <_printf_i+0x18c>
 800736e:	065f      	lsls	r7, r3, #25
 8007370:	bf48      	it	mi
 8007372:	b2b6      	uxthmi	r6, r6
 8007374:	07df      	lsls	r7, r3, #31
 8007376:	bf48      	it	mi
 8007378:	f043 0320 	orrmi.w	r3, r3, #32
 800737c:	6029      	str	r1, [r5, #0]
 800737e:	bf48      	it	mi
 8007380:	6023      	strmi	r3, [r4, #0]
 8007382:	b91e      	cbnz	r6, 800738c <_printf_i+0x1a4>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	f023 0320 	bic.w	r3, r3, #32
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	2310      	movs	r3, #16
 800738e:	e7a7      	b.n	80072e0 <_printf_i+0xf8>
 8007390:	4824      	ldr	r0, [pc, #144]	; (8007424 <_printf_i+0x23c>)
 8007392:	e7e4      	b.n	800735e <_printf_i+0x176>
 8007394:	4615      	mov	r5, r2
 8007396:	e7bd      	b.n	8007314 <_printf_i+0x12c>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	6826      	ldr	r6, [r4, #0]
 800739c:	6961      	ldr	r1, [r4, #20]
 800739e:	1d18      	adds	r0, r3, #4
 80073a0:	6028      	str	r0, [r5, #0]
 80073a2:	0635      	lsls	r5, r6, #24
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	d501      	bpl.n	80073ac <_printf_i+0x1c4>
 80073a8:	6019      	str	r1, [r3, #0]
 80073aa:	e002      	b.n	80073b2 <_printf_i+0x1ca>
 80073ac:	0670      	lsls	r0, r6, #25
 80073ae:	d5fb      	bpl.n	80073a8 <_printf_i+0x1c0>
 80073b0:	8019      	strh	r1, [r3, #0]
 80073b2:	2300      	movs	r3, #0
 80073b4:	6123      	str	r3, [r4, #16]
 80073b6:	4615      	mov	r5, r2
 80073b8:	e7bc      	b.n	8007334 <_printf_i+0x14c>
 80073ba:	682b      	ldr	r3, [r5, #0]
 80073bc:	1d1a      	adds	r2, r3, #4
 80073be:	602a      	str	r2, [r5, #0]
 80073c0:	681d      	ldr	r5, [r3, #0]
 80073c2:	6862      	ldr	r2, [r4, #4]
 80073c4:	2100      	movs	r1, #0
 80073c6:	4628      	mov	r0, r5
 80073c8:	f7f8 ff22 	bl	8000210 <memchr>
 80073cc:	b108      	cbz	r0, 80073d2 <_printf_i+0x1ea>
 80073ce:	1b40      	subs	r0, r0, r5
 80073d0:	6060      	str	r0, [r4, #4]
 80073d2:	6863      	ldr	r3, [r4, #4]
 80073d4:	6123      	str	r3, [r4, #16]
 80073d6:	2300      	movs	r3, #0
 80073d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073dc:	e7aa      	b.n	8007334 <_printf_i+0x14c>
 80073de:	6923      	ldr	r3, [r4, #16]
 80073e0:	462a      	mov	r2, r5
 80073e2:	4649      	mov	r1, r9
 80073e4:	4640      	mov	r0, r8
 80073e6:	47d0      	blx	sl
 80073e8:	3001      	adds	r0, #1
 80073ea:	d0ad      	beq.n	8007348 <_printf_i+0x160>
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	079b      	lsls	r3, r3, #30
 80073f0:	d413      	bmi.n	800741a <_printf_i+0x232>
 80073f2:	68e0      	ldr	r0, [r4, #12]
 80073f4:	9b03      	ldr	r3, [sp, #12]
 80073f6:	4298      	cmp	r0, r3
 80073f8:	bfb8      	it	lt
 80073fa:	4618      	movlt	r0, r3
 80073fc:	e7a6      	b.n	800734c <_printf_i+0x164>
 80073fe:	2301      	movs	r3, #1
 8007400:	4632      	mov	r2, r6
 8007402:	4649      	mov	r1, r9
 8007404:	4640      	mov	r0, r8
 8007406:	47d0      	blx	sl
 8007408:	3001      	adds	r0, #1
 800740a:	d09d      	beq.n	8007348 <_printf_i+0x160>
 800740c:	3501      	adds	r5, #1
 800740e:	68e3      	ldr	r3, [r4, #12]
 8007410:	9903      	ldr	r1, [sp, #12]
 8007412:	1a5b      	subs	r3, r3, r1
 8007414:	42ab      	cmp	r3, r5
 8007416:	dcf2      	bgt.n	80073fe <_printf_i+0x216>
 8007418:	e7eb      	b.n	80073f2 <_printf_i+0x20a>
 800741a:	2500      	movs	r5, #0
 800741c:	f104 0619 	add.w	r6, r4, #25
 8007420:	e7f5      	b.n	800740e <_printf_i+0x226>
 8007422:	bf00      	nop
 8007424:	080075a5 	.word	0x080075a5
 8007428:	080075b6 	.word	0x080075b6

0800742c <memmove>:
 800742c:	4288      	cmp	r0, r1
 800742e:	b510      	push	{r4, lr}
 8007430:	eb01 0402 	add.w	r4, r1, r2
 8007434:	d902      	bls.n	800743c <memmove+0x10>
 8007436:	4284      	cmp	r4, r0
 8007438:	4623      	mov	r3, r4
 800743a:	d807      	bhi.n	800744c <memmove+0x20>
 800743c:	1e43      	subs	r3, r0, #1
 800743e:	42a1      	cmp	r1, r4
 8007440:	d008      	beq.n	8007454 <memmove+0x28>
 8007442:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800744a:	e7f8      	b.n	800743e <memmove+0x12>
 800744c:	4402      	add	r2, r0
 800744e:	4601      	mov	r1, r0
 8007450:	428a      	cmp	r2, r1
 8007452:	d100      	bne.n	8007456 <memmove+0x2a>
 8007454:	bd10      	pop	{r4, pc}
 8007456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800745a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800745e:	e7f7      	b.n	8007450 <memmove+0x24>

08007460 <_sbrk_r>:
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	4d06      	ldr	r5, [pc, #24]	; (800747c <_sbrk_r+0x1c>)
 8007464:	2300      	movs	r3, #0
 8007466:	4604      	mov	r4, r0
 8007468:	4608      	mov	r0, r1
 800746a:	602b      	str	r3, [r5, #0]
 800746c:	f7fc fafc 	bl	8003a68 <_sbrk>
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	d102      	bne.n	800747a <_sbrk_r+0x1a>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	b103      	cbz	r3, 800747a <_sbrk_r+0x1a>
 8007478:	6023      	str	r3, [r4, #0]
 800747a:	bd38      	pop	{r3, r4, r5, pc}
 800747c:	20002e3c 	.word	0x20002e3c

08007480 <_realloc_r>:
 8007480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007484:	4680      	mov	r8, r0
 8007486:	4614      	mov	r4, r2
 8007488:	460e      	mov	r6, r1
 800748a:	b921      	cbnz	r1, 8007496 <_realloc_r+0x16>
 800748c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007490:	4611      	mov	r1, r2
 8007492:	f7ff bc57 	b.w	8006d44 <_malloc_r>
 8007496:	b92a      	cbnz	r2, 80074a4 <_realloc_r+0x24>
 8007498:	f7ff fbe8 	bl	8006c6c <_free_r>
 800749c:	4625      	mov	r5, r4
 800749e:	4628      	mov	r0, r5
 80074a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a4:	f000 f81b 	bl	80074de <_malloc_usable_size_r>
 80074a8:	4284      	cmp	r4, r0
 80074aa:	4607      	mov	r7, r0
 80074ac:	d802      	bhi.n	80074b4 <_realloc_r+0x34>
 80074ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80074b2:	d812      	bhi.n	80074da <_realloc_r+0x5a>
 80074b4:	4621      	mov	r1, r4
 80074b6:	4640      	mov	r0, r8
 80074b8:	f7ff fc44 	bl	8006d44 <_malloc_r>
 80074bc:	4605      	mov	r5, r0
 80074be:	2800      	cmp	r0, #0
 80074c0:	d0ed      	beq.n	800749e <_realloc_r+0x1e>
 80074c2:	42bc      	cmp	r4, r7
 80074c4:	4622      	mov	r2, r4
 80074c6:	4631      	mov	r1, r6
 80074c8:	bf28      	it	cs
 80074ca:	463a      	movcs	r2, r7
 80074cc:	f7ff fbc0 	bl	8006c50 <memcpy>
 80074d0:	4631      	mov	r1, r6
 80074d2:	4640      	mov	r0, r8
 80074d4:	f7ff fbca 	bl	8006c6c <_free_r>
 80074d8:	e7e1      	b.n	800749e <_realloc_r+0x1e>
 80074da:	4635      	mov	r5, r6
 80074dc:	e7df      	b.n	800749e <_realloc_r+0x1e>

080074de <_malloc_usable_size_r>:
 80074de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074e2:	1f18      	subs	r0, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	bfbc      	itt	lt
 80074e8:	580b      	ldrlt	r3, [r1, r0]
 80074ea:	18c0      	addlt	r0, r0, r3
 80074ec:	4770      	bx	lr
	...

080074f0 <_init>:
 80074f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f2:	bf00      	nop
 80074f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074f6:	bc08      	pop	{r3}
 80074f8:	469e      	mov	lr, r3
 80074fa:	4770      	bx	lr

080074fc <_fini>:
 80074fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fe:	bf00      	nop
 8007500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007502:	bc08      	pop	{r3}
 8007504:	469e      	mov	lr, r3
 8007506:	4770      	bx	lr
