
#include <stdio.h>
#include <stdint.h>
#include "OCBRA.h"
#include "aes.h"
#define L_size 16

uint8_t L[L_size][L_size];

void mult_by_2(uint32_t *block);
void array_copy(uint8_t *A, uint8_t *B, uint32_t size);

void OCB3_INIT(unsigned char* key){

	uint8_t L_asterisk[16]={0,0,0,0 ,0,0,0,0, 0,0,0,0, 0,0,0,0};
	uint8_t L_0[16]={0,0,0,0 ,0,0,0,0, 0,0,0,0, 0,0,0,0};
	uint8_t L_dollar[16]={0,0,0,0 ,0,0,0,0, 0,0,0,0, 0,0,0,0};
	uint32_t rkeys_ffs[88];

	aes128_keyschedule_ffs(rkeys_ffs, key, key);

	aes128_encrypt_ffs(L_0, L_asterisk, L_0, L_0, rkeys_ffs);

	array_copy(L_asterisk, L[0], 16);

	mult_by_2((uint32_t *)L[0]);

	array_copy(L[0], L_dollar, 16);

	mult_by_2((uint32_t *)L[0]);
	for (int i = 1; i < L_size; i=i+1) {
		array_copy(L[i-1], L[i], 16);
		mult_by_2((uint32_t *)L[i]);
	}
}

void array_copy(uint8_t *A, uint8_t *B, uint32_t size){
	for (int i = 0; i < size; ++i) {
		B[i]=A[i];
	}
}

void mult_by_2(uint32_t *block){

	unsigned int msb = -(block[0]>>31);
	for (int i = 0; i < 3; ++i) {
		block[i] &= 0x7FFFFFFF;
		block[i] <<=1;
		block[i] |= block[i]>>31;
	}
	block[3] &= 0x7FFFFFFF;
	block[3] <<=1;
	block[3] ^= msb & 0x00000087;

}

void xor_block_u8 (uint8_t * a, uint8_t *b){
	int i;
	for( i = 0; i < 16; i++){
		a[i] ^= b[i];
	}
}

void u8_to_u32(uint32_t*a, uint8_t* b){
	int i;
	int j;
	for(i = 0; i < 4 ; i ++){
		a[i] = 0;
		for(j = 0; j < 4; j ++){
			a[i] |= b[i*4 + j]<<(3-j)*8;
		}
	}
}

static inline uint32_t ntz(uint32_t x) {
		static const unsigned char tz_table[32] =
		{ 0,  1, 28,  2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17,  4, 8,
		 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18,  6, 11,  5, 10, 9};
		return (uint32_t)tz_table[((uint32_t)((x & -x) * 0x077CB531u)) >> 27];
}

void OCB3(unsigned char* plaintext, unsigned char* ciphertext, unsigned char* nonce,
        unsigned char* asociated_data, unsigned int plaintext_size,unsigned int nonce_size, unsigned int asociated_data_size,
        unsigned char* key, unsigned char* tag){

	OCB3_INIT(key);

	 if (asociated_data_size!=0)
	    {
		 PMAC_OCB3(nonce,asociated_data,asociated_data_size,key,tag);

	    }

	int size_ptext = plaintext_size/32;

	unsigned char ptext0[size_ptext];
	unsigned char ptext1[size_ptext];

	unsigned char ctext0[size_ptext];
	unsigned char ctext1[size_ptext];
	for (size_t i = 0; i < size_ptext; i++){
		ptext0[i]=0;
		ptext1[i]=0;
		ctext0[i]=0;
		ctext1[i]=0;
	}
	divide_plaintext(plaintext, ptext0,  ptext1, plaintext_size);

	// 128 + 64 bits
	uint8_t Stretch[24] = {0};
	int index = 15 - nonce_size;
	Stretch[index++] |= 1;
	for (int i = 0; i < nonce_size; index++, i++)
	  Stretch[index] = nonce[i];

	// 1^{122} 0^{6}
	uint8_t Top[16] = {0xFF, 0xFF, 0xFF, 0xFF,
					 0xFF, 0xFF, 0xFF, 0xFF,
					 0xFF, 0xFF, 0xFF, 0xFF,
					 0xFF, 0xFF, 0xFF, 0xC0};
	xor_block_u8(Top, Stretch);

	uint8_t KTop [16];
	array_copy(Top, KTop, 16);

	//u8_to_u32( u32KTop, Top);

	// Nonce & 0^{122} 1^{6}
	// solo se extraen los últimos 6 bits;
	uint32_t bottom = Stretch[15] % 64;
	// offset[15] ^= bottom;
	//HAL_CRYP_Encrypt(&hcryp, u32KTop, 4, u32KTop, HAL_MAX_DELAY);
	uint32_t rkeys_ffs[88];

	aes128_keyschedule_ffs(rkeys_ffs, key, key);

	aes128_encrypt_ffs(KTop, KTop, KTop, KTop, rkeys_ffs);

	array_copy(KTop, Stretch, 16);
	//u32_to_u8(Stretch, u32KTop);

	// KTop || KTOP
	for (int i = 0; i < 8; i++)
	  Stretch[16 + i] = Stretch[i];
	// KTop || (KTOP ^ (KTop << 8)
	for (int i = 0; i < 8; i++)
	  Stretch[16 + i] ^= Stretch[i + 1];

	uint32_t bot_shift = bottom / 8;
	uint32_t bot_bit_shift = bottom % 8;

	// Stretch << Bottom
	for (int i = 0; i < 16; i++)
	  Stretch[i] = ((Stretch[i + bot_shift] << bot_bit_shift) | (Stretch[i + bot_shift + 1] >> (8 - bot_bit_shift)));
	// Delta = (Stretch << Bottom) [1... 128]
	uint8_t Delta [16];
	//u8_to_u32( Delta, Stretch);
	array_copy(Stretch, Delta, 16);
	//uint8_t Delta_aux[16] = {0};
	uint8_t Checksum[16] = {0};



	for(int i = 0; i < size_ptext; i++){
	  xor_block_u8(Delta, L[ntz(i+1)]);

	  xor_block_u8(ptext0+(i*16), Delta);

	  xor_block_u8(Delta, L[ntz(i+2)]);

	  xor_block_u8(ptext1+(i*16), Delta);

	  aes128_encrypt_ffs(ctext0+ (i*16), ctext1+ (i*16), ptext0+ ((i)*16), ptext1 + (i*16), rkeys_ffs);


	  xor_block_u8(ctext0+(i*16), Delta);
	  xor_block_u8(ctext1+(i*16), Delta);


	  xor_block_u8(Checksum+(i*16), ctext0+(i*16));
	  xor_block_u8(Checksum+(i*16), ctext1+(i*16));

	}


}

void PMAC_OCB3( unsigned char* nonce, unsigned char* asociated_data, unsigned int asociated_data_size,unsigned char* key, unsigned char* tag){

    unsigned char ptext0[asociated_data_size];
    unsigned char ptext1[asociated_data_size];


    for (size_t i = 0; i < asociated_data_size; i++){
        ptext0[i]=0;
        ptext1[i]=0;

    }

    unsigned char key_2AES[key_size] = {0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3};

    unsigned char N_0[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
    unsigned char N_1[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;

    unsigned char N_0_t[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
    unsigned char N_1_t[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;

    unsigned char c_N_0[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;
    unsigned char c_N_1[16]= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};;

    unsigned int add_nonce_0[4] = {0,0,0,0};
    unsigned int add_nonce_1[4] = {1,1,1,1};

    unsigned int add_nonce_2[4] = {2,2,2,2};

    divide_plaintext(asociated_data, ptext0,  ptext1, asociated_data_size);

    //key schedule
	uint32_t rkeys_ffs[88];
    uint32_t two_AES_keys_ffs[88];

	aes128_keyschedule_ffs(rkeys_ffs, key, key);
	aes128_keyschedule_ffs(two_AES_keys_ffs, key_2AES, key_2AES);
    //aes128_2rounds_keyschedule_ffs(two_AES_keys_ffs, key_2AES, key_2AES);

	//generate the N from nonce using 10 aes rounds
    aes128_encrypt_ffs(N_0, N_1, nonce, nonce, rkeys_ffs);

    int block_size = asociated_data_size/32;



    // 128 + 64 bits
    	uint8_t Stretch[24] = {0};
    	int index = 15 - nonce_size;
    	Stretch[index++] |= 1;
    	for (int i = 0; i < nonce_size; index++, i++)
    	  Stretch[index] = nonce[i];

    	// 1^{122} 0^{6}
    	uint8_t Top[16] = {0xFF, 0xFF, 0xFF, 0xFF,
    					 0xFF, 0xFF, 0xFF, 0xFF,
    					 0xFF, 0xFF, 0xFF, 0xFF,
    					 0xFF, 0xFF, 0xFF, 0xC0};
    	xor_block_u8(Top, Stretch);

    	uint8_t KTop [16];
    	array_copy(Top, KTop, 16);

    	//u8_to_u32( u32KTop, Top);

    	// Nonce & 0^{122} 1^{6}
    	// solo se extraen los últimos 6 bits;
    	uint32_t bottom = Stretch[15] % 64;
    	// offset[15] ^= bottom;
    	//HAL_CRYP_Encrypt(&hcryp, u32KTop, 4, u32KTop, HAL_MAX_DELAY);
    	uint32_t rkeys_ffs[88];

    	aes128_keyschedule_ffs(rkeys_ffs, key, key);

    	aes128_encrypt_ffs(KTop, KTop, KTop, KTop, rkeys_ffs);

    	array_copy(KTop, Stretch, 16);
    	//u32_to_u8(Stretch, u32KTop);

    	// KTop || KTOP
    	for (int i = 0; i < 8; i++)
    	  Stretch[16 + i] = Stretch[i];
    	// KTop || (KTOP ^ (KTop << 8)
    	for (int i = 0; i < 8; i++)
    	  Stretch[16 + i] ^= Stretch[i + 1];

    	uint32_t bot_shift = bottom / 8;
    	uint32_t bot_bit_shift = bottom % 8;

    	// Stretch << Bottom
    	for (int i = 0; i < 16; i++)
    	  Stretch[i] = ((Stretch[i + bot_shift] << bot_bit_shift) | (Stretch[i + bot_shift + 1] >> (8 - bot_bit_shift)));
    	// Delta = (Stretch << Bottom) [1... 128]
    	uint8_t Delta [16];
    	//u8_to_u32( Delta, Stretch);
    	array_copy(Stretch, Delta, 16);
    	//uint8_t Delta_aux[16] = {0};
    	uint8_t Checksum[16] = {0};

    for(int i = 0; i < block_size; i++){
    	  xor_block_u8(Delta, L[ntz(i+1)]);

    	  xor_block_u8(ptext0+(i*16), Delta);

    	  xor_block_u8(Delta, L[ntz(i+2)]);

    	  xor_block_u8(ptext1+(i*16), Delta);

    	  aes128_encrypt_ffs(ctext0+ (i*16), ctext1+ (i*16), ptext0+ ((i)*16), ptext1 + (i*16), rkeys_ffs);


    	  xor_block_u8(ctext0+(i*16), Delta);
    	  xor_block_u8(ctext1+(i*16), Delta);


    	  xor_block_u8(Checksum+(i*16), ctext0+(i*16));
    	  xor_block_u8(Checksum+(i*16), ctext1+(i*16));

    	}

}
