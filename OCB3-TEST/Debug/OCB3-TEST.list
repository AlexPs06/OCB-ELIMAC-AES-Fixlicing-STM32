
OCB3-TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007948  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08007b18  08007b18  00008b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bfc  08007bfc  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007bfc  08007bfc  00008bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c04  08007c04  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c04  08007c04  00008c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c08  08007c08  00008c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08007c0c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  08007ca4  00009098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  08007d44  00009138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00003e8c  200001d8  08007de4  000091d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20004064  08007de4  0000a064  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012d5f  00000000  00000000  00009208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000028cb  00000000  00000000  0001bf67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e50  00000000  00000000  0001e838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b03  00000000  00000000  0001f688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027cf5  00000000  00000000  0002018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001253b  00000000  00000000  00047e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f1b26  00000000  00000000  0005a3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014bee1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004068  00000000  00000000  0014bf24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000089  00000000  00000000  0014ff8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b00 	.word	0x08007b00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08007b00 	.word	0x08007b00

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <OCB3_INIT>:
void mult_by_2(uint32_t *block);
void array_copy(uint8_t *A, uint8_t *B, uint32_t size);
void divide_plaintext(unsigned char* plaintext, unsigned char* ptext0,  unsigned char* ptext1,unsigned int plaintext_size);
void union_ciphertext(unsigned char* ciphertext, unsigned char* ctext0,  unsigned char* ctext1,unsigned int plaintext_size);
void PMAC_OCB3( unsigned char* nonce, unsigned char* asociated_data, unsigned int asociated_data_size,unsigned int nonce_size,unsigned char* key, unsigned char* tag);
void OCB3_INIT(unsigned char* key){
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b0eb      	sub	sp, #428	@ 0x1ac
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80005aa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80005ae:	6018      	str	r0, [r3, #0]

	uint8_t L_asterisk[16]={0,0,0,0 ,0,0,0,0, 0,0,0,0, 0,0,0,0};
 80005b0:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <OCB3_INIT+0xe8>)
 80005b2:	f507 74c6 	add.w	r4, r7, #396	@ 0x18c
 80005b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t L_0[16]={0,0,0,0 ,0,0,0,0, 0,0,0,0, 0,0,0,0};
 80005bc:	4b32      	ldr	r3, [pc, #200]	@ (8000688 <OCB3_INIT+0xe8>)
 80005be:	f507 74be 	add.w	r4, r7, #380	@ 0x17c
 80005c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t L_dollar[16]={0,0,0,0 ,0,0,0,0, 0,0,0,0, 0,0,0,0};
 80005c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000688 <OCB3_INIT+0xe8>)
 80005ca:	f507 74b6 	add.w	r4, r7, #364	@ 0x16c
 80005ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t rkeys_ffs[88];

	aes128_keyschedule_ffs(rkeys_ffs, key, key);
 80005d4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80005d8:	f5a3 72ce 	sub.w	r2, r3, #412	@ 0x19c
 80005dc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80005e0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80005e4:	f107 000c 	add.w	r0, r7, #12
 80005e8:	6812      	ldr	r2, [r2, #0]
 80005ea:	6819      	ldr	r1, [r3, #0]
 80005ec:	f002 fd84 	bl	80030f8 <aes128_keyschedule_ffs>

	aes128_encrypt_ffs(L_0, L_asterisk, L_0, L_0, rkeys_ffs);
 80005f0:	f507 74be 	add.w	r4, r7, #380	@ 0x17c
 80005f4:	f507 72be 	add.w	r2, r7, #380	@ 0x17c
 80005f8:	f507 71c6 	add.w	r1, r7, #396	@ 0x18c
 80005fc:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	4623      	mov	r3, r4
 8000608:	f002 faf6 	bl	8002bf8 <aes128_encrypt_ffs>

	array_copy(L_asterisk, L[0], 16);
 800060c:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8000610:	2210      	movs	r2, #16
 8000612:	491e      	ldr	r1, [pc, #120]	@ (800068c <OCB3_INIT+0xec>)
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f83b 	bl	8000690 <array_copy>

	mult_by_2((uint32_t *)L[0]);
 800061a:	481c      	ldr	r0, [pc, #112]	@ (800068c <OCB3_INIT+0xec>)
 800061c:	f000 f857 	bl	80006ce <mult_by_2>

	array_copy(L[0], L_dollar, 16);
 8000620:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8000624:	2210      	movs	r2, #16
 8000626:	4619      	mov	r1, r3
 8000628:	4818      	ldr	r0, [pc, #96]	@ (800068c <OCB3_INIT+0xec>)
 800062a:	f000 f831 	bl	8000690 <array_copy>

	mult_by_2((uint32_t *)L[0]);
 800062e:	4817      	ldr	r0, [pc, #92]	@ (800068c <OCB3_INIT+0xec>)
 8000630:	f000 f84d 	bl	80006ce <mult_by_2>
	for (int i = 1; i < L_size; i=i+1) {
 8000634:	2301      	movs	r3, #1
 8000636:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800063a:	e01b      	b.n	8000674 <OCB3_INIT+0xd4>
		array_copy(L[i-1], L[i], 16);
 800063c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8000640:	3b01      	subs	r3, #1
 8000642:	011b      	lsls	r3, r3, #4
 8000644:	4a11      	ldr	r2, [pc, #68]	@ (800068c <OCB3_INIT+0xec>)
 8000646:	1898      	adds	r0, r3, r2
 8000648:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800064c:	011b      	lsls	r3, r3, #4
 800064e:	4a0f      	ldr	r2, [pc, #60]	@ (800068c <OCB3_INIT+0xec>)
 8000650:	4413      	add	r3, r2
 8000652:	2210      	movs	r2, #16
 8000654:	4619      	mov	r1, r3
 8000656:	f000 f81b 	bl	8000690 <array_copy>
		mult_by_2((uint32_t *)L[i]);
 800065a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800065e:	011b      	lsls	r3, r3, #4
 8000660:	4a0a      	ldr	r2, [pc, #40]	@ (800068c <OCB3_INIT+0xec>)
 8000662:	4413      	add	r3, r2
 8000664:	4618      	mov	r0, r3
 8000666:	f000 f832 	bl	80006ce <mult_by_2>
	for (int i = 1; i < L_size; i=i+1) {
 800066a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800066e:	3301      	adds	r3, #1
 8000670:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000674:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8000678:	2b0f      	cmp	r3, #15
 800067a:	dddf      	ble.n	800063c <OCB3_INIT+0x9c>
	}
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8000684:	46bd      	mov	sp, r7
 8000686:	bd90      	pop	{r4, r7, pc}
 8000688:	08007b18 	.word	0x08007b18
 800068c:	200001f4 	.word	0x200001f4

08000690 <array_copy>:

void array_copy(uint8_t *A, uint8_t *B, uint32_t size){
 8000690:	b480      	push	{r7}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < size; ++i) {
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	e00a      	b.n	80006b8 <array_copy+0x28>
		B[i]=A[i];
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	441a      	add	r2, r3
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	68b9      	ldr	r1, [r7, #8]
 80006ac:	440b      	add	r3, r1
 80006ae:	7812      	ldrb	r2, [r2, #0]
 80006b0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; ++i) {
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3301      	adds	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d8f0      	bhi.n	80006a2 <array_copy+0x12>
	}
}
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	371c      	adds	r7, #28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <mult_by_2>:

void mult_by_2(uint32_t *block){
 80006ce:	b480      	push	{r7}
 80006d0:	b085      	sub	sp, #20
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]

	unsigned int msb = -(block[0]>>31);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	17db      	asrs	r3, r3, #31
 80006dc:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 3; ++i) {
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	e02a      	b.n	800073a <mult_by_2+0x6c>
		block[i] &= 0x7FFFFFFF;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	4413      	add	r3, r2
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	440b      	add	r3, r1
 80006f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80006fa:	601a      	str	r2, [r3, #0]
		block[i] <<=1;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	440b      	add	r3, r1
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	601a      	str	r2, [r3, #0]
		block[i] |= block[i]>>31;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	6819      	ldr	r1, [r3, #0]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	4413      	add	r3, r2
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	0fda      	lsrs	r2, r3, #31
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	4403      	add	r3, r0
 8000730:	430a      	orrs	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; ++i) {
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3301      	adds	r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b02      	cmp	r3, #2
 800073e:	ddd1      	ble.n	80006e4 <mult_by_2+0x16>
	}
	block[3] &= 0x7FFFFFFF;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	330c      	adds	r3, #12
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	330c      	adds	r3, #12
 800074a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800074e:	601a      	str	r2, [r3, #0]
	block[3] <<=1;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	330c      	adds	r3, #12
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	330c      	adds	r3, #12
 800075a:	0052      	lsls	r2, r2, #1
 800075c:	601a      	str	r2, [r3, #0]
	block[3] ^= msb & 0x00000087;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	330c      	adds	r3, #12
 8000762:	6819      	ldr	r1, [r3, #0]
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	f003 0287 	and.w	r2, r3, #135	@ 0x87
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	330c      	adds	r3, #12
 800076e:	404a      	eors	r2, r1
 8000770:	601a      	str	r2, [r3, #0]

}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <xor_block_u8>:

void xor_block_u8 (uint8_t * a, uint8_t *b){
 800077e:	b480      	push	{r7}
 8000780:	b085      	sub	sp, #20
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	6039      	str	r1, [r7, #0]
	int i;
	for( i = 0; i < 16; i++){
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	e010      	b.n	80007b0 <xor_block_u8+0x32>
		a[i] ^= b[i];
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4413      	add	r3, r2
 8000794:	7819      	ldrb	r1, [r3, #0]
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	4413      	add	r3, r2
 800079c:	781a      	ldrb	r2, [r3, #0]
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	4403      	add	r3, r0
 80007a4:	404a      	eors	r2, r1
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++){
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	3301      	adds	r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b0f      	cmp	r3, #15
 80007b4:	ddeb      	ble.n	800078e <xor_block_u8+0x10>
	}
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <ntz>:
			a[i] |= b[i*4 + j]<<(3-j)*8;
		}
	}
}

static inline uint32_t ntz(uint32_t x) {
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
		static const unsigned char tz_table[32] =
		{ 0,  1, 28,  2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17,  4, 8,
		 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18,  6, 11,  5, 10, 9};
		return (uint32_t)tz_table[((uint32_t)((x & -x) * 0x077CB531u)) >> 27];
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	425a      	negs	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4013      	ands	r3, r2
 80007d4:	4a05      	ldr	r2, [pc, #20]	@ (80007ec <ntz+0x28>)
 80007d6:	fb02 f303 	mul.w	r3, r2, r3
 80007da:	0edb      	lsrs	r3, r3, #27
 80007dc:	4a04      	ldr	r2, [pc, #16]	@ (80007f0 <ntz+0x2c>)
 80007de:	5cd3      	ldrb	r3, [r2, r3]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	077cb531 	.word	0x077cb531
 80007f0:	08007b90 	.word	0x08007b90

080007f4 <OCB3>:

void OCB3(unsigned char* plaintext, unsigned char* ciphertext, unsigned char* nonce,
        unsigned char* asociated_data, unsigned int plaintext_size,unsigned int nonce_size, unsigned int asociated_data_size,
        unsigned char* key, unsigned char* tag){
 80007f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007f8:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 80007fc:	af02      	add	r7, sp, #8
 80007fe:	f507 7412 	add.w	r4, r7, #584	@ 0x248
 8000802:	f5a4 7403 	sub.w	r4, r4, #524	@ 0x20c
 8000806:	6020      	str	r0, [r4, #0]
 8000808:	f507 7012 	add.w	r0, r7, #584	@ 0x248
 800080c:	f5a0 7004 	sub.w	r0, r0, #528	@ 0x210
 8000810:	6001      	str	r1, [r0, #0]
 8000812:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 8000816:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 800081a:	600a      	str	r2, [r1, #0]
 800081c:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8000820:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8000824:	6013      	str	r3, [r2, #0]
 8000826:	466b      	mov	r3, sp
 8000828:	607b      	str	r3, [r7, #4]

	OCB3_INIT(key);
 800082a:	f8d7 027c 	ldr.w	r0, [r7, #636]	@ 0x27c
 800082e:	f7ff feb7 	bl	80005a0 <OCB3_INIT>

	 if (asociated_data_size!=0)
 8000832:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 8000836:	2b00      	cmp	r3, #0
 8000838:	d015      	beq.n	8000866 <OCB3+0x72>
	    {
		 	 PMAC_OCB3(nonce,asociated_data,asociated_data_size,nonce_size,key,tag);
 800083a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800083e:	f5a3 7106 	sub.w	r1, r3, #536	@ 0x218
 8000842:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000846:	f5a3 7005 	sub.w	r0, r3, #532	@ 0x214
 800084a:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800085a:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 800085e:	6809      	ldr	r1, [r1, #0]
 8000860:	6800      	ldr	r0, [r0, #0]
 8000862:	f000 fad3 	bl	8000e0c <PMAC_OCB3>

	    }

	int size_ptext = plaintext_size;
 8000866:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 800086a:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228

	unsigned char ptext0[size_ptext];
 800086e:	f8d7 1228 	ldr.w	r1, [r7, #552]	@ 0x228
 8000872:	1e4b      	subs	r3, r1, #1
 8000874:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8000878:	460a      	mov	r2, r1
 800087a:	2300      	movs	r3, #0
 800087c:	4690      	mov	r8, r2
 800087e:	4699      	mov	r9, r3
 8000880:	f04f 0200 	mov.w	r2, #0
 8000884:	f04f 0300 	mov.w	r3, #0
 8000888:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800088c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000890:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000894:	460a      	mov	r2, r1
 8000896:	2300      	movs	r3, #0
 8000898:	4692      	mov	sl, r2
 800089a:	469b      	mov	fp, r3
 800089c:	f04f 0200 	mov.w	r2, #0
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80008a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80008ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80008b0:	460b      	mov	r3, r1
 80008b2:	3307      	adds	r3, #7
 80008b4:	08db      	lsrs	r3, r3, #3
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	ebad 0d03 	sub.w	sp, sp, r3
 80008bc:	ab02      	add	r3, sp, #8
 80008be:	3300      	adds	r3, #0
 80008c0:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
	unsigned char ptext1[size_ptext];
 80008c4:	f8d7 1228 	ldr.w	r1, [r7, #552]	@ 0x228
 80008c8:	1e4b      	subs	r3, r1, #1
 80008ca:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80008ce:	460a      	mov	r2, r1
 80008d0:	2300      	movs	r3, #0
 80008d2:	4615      	mov	r5, r2
 80008d4:	461e      	mov	r6, r3
 80008d6:	f04f 0200 	mov.w	r2, #0
 80008da:	f04f 0300 	mov.w	r3, #0
 80008de:	00f3      	lsls	r3, r6, #3
 80008e0:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80008e4:	00ea      	lsls	r2, r5, #3
 80008e6:	460a      	mov	r2, r1
 80008e8:	2300      	movs	r3, #0
 80008ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008ee:	f04f 0200 	mov.w	r2, #0
 80008f2:	f04f 0300 	mov.w	r3, #0
 80008f6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80008fa:	4628      	mov	r0, r5
 80008fc:	00c3      	lsls	r3, r0, #3
 80008fe:	4620      	mov	r0, r4
 8000900:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000904:	4620      	mov	r0, r4
 8000906:	00c2      	lsls	r2, r0, #3
 8000908:	460b      	mov	r3, r1
 800090a:	3307      	adds	r3, #7
 800090c:	08db      	lsrs	r3, r3, #3
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	ebad 0d03 	sub.w	sp, sp, r3
 8000914:	ab02      	add	r3, sp, #8
 8000916:	3300      	adds	r3, #0
 8000918:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218

	unsigned char ctext0[size_ptext];
 800091c:	f8d7 1228 	ldr.w	r1, [r7, #552]	@ 0x228
 8000920:	1e4b      	subs	r3, r1, #1
 8000922:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8000926:	460a      	mov	r2, r1
 8000928:	2300      	movs	r3, #0
 800092a:	623a      	str	r2, [r7, #32]
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
 800092e:	f04f 0200 	mov.w	r2, #0
 8000932:	f04f 0300 	mov.w	r3, #0
 8000936:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800093a:	4628      	mov	r0, r5
 800093c:	00c3      	lsls	r3, r0, #3
 800093e:	4620      	mov	r0, r4
 8000940:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000944:	4620      	mov	r0, r4
 8000946:	00c2      	lsls	r2, r0, #3
 8000948:	460a      	mov	r2, r1
 800094a:	2300      	movs	r3, #0
 800094c:	61ba      	str	r2, [r7, #24]
 800094e:	61fb      	str	r3, [r7, #28]
 8000950:	f04f 0200 	mov.w	r2, #0
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800095c:	4628      	mov	r0, r5
 800095e:	00c3      	lsls	r3, r0, #3
 8000960:	4620      	mov	r0, r4
 8000962:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000966:	4620      	mov	r0, r4
 8000968:	00c2      	lsls	r2, r0, #3
 800096a:	460b      	mov	r3, r1
 800096c:	3307      	adds	r3, #7
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	ebad 0d03 	sub.w	sp, sp, r3
 8000976:	ab02      	add	r3, sp, #8
 8000978:	3300      	adds	r3, #0
 800097a:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	unsigned char ctext1[size_ptext];
 800097e:	f8d7 1228 	ldr.w	r1, [r7, #552]	@ 0x228
 8000982:	1e4b      	subs	r3, r1, #1
 8000984:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000988:	460a      	mov	r2, r1
 800098a:	2300      	movs	r3, #0
 800098c:	613a      	str	r2, [r7, #16]
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	f04f 0200 	mov.w	r2, #0
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800099c:	4628      	mov	r0, r5
 800099e:	00c3      	lsls	r3, r0, #3
 80009a0:	4620      	mov	r0, r4
 80009a2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80009a6:	4620      	mov	r0, r4
 80009a8:	00c2      	lsls	r2, r0, #3
 80009aa:	460a      	mov	r2, r1
 80009ac:	2300      	movs	r3, #0
 80009ae:	60ba      	str	r2, [r7, #8]
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	f04f 0200 	mov.w	r2, #0
 80009b6:	f04f 0300 	mov.w	r3, #0
 80009ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80009be:	4628      	mov	r0, r5
 80009c0:	00c3      	lsls	r3, r0, #3
 80009c2:	4620      	mov	r0, r4
 80009c4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80009c8:	4620      	mov	r0, r4
 80009ca:	00c2      	lsls	r2, r0, #3
 80009cc:	460b      	mov	r3, r1
 80009ce:	3307      	adds	r3, #7
 80009d0:	08db      	lsrs	r3, r3, #3
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	ebad 0d03 	sub.w	sp, sp, r3
 80009d8:	ab02      	add	r3, sp, #8
 80009da:	3300      	adds	r3, #0
 80009dc:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
	for (size_t i = 0; i < size_ptext; i++){
 80009e0:	2300      	movs	r3, #0
 80009e2:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 80009e6:	e020      	b.n	8000a2a <OCB3+0x236>
		ptext0[i]=0;
 80009e8:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 80009ec:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80009f0:	4413      	add	r3, r2
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
		ptext1[i]=0;
 80009f6:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 80009fa:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80009fe:	4413      	add	r3, r2
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
		ctext0[i]=0;
 8000a04:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8000a08:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000a0c:	4413      	add	r3, r2
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
		ctext1[i]=0;
 8000a12:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8000a16:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000a1a:	4413      	add	r3, r2
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < size_ptext; i++){
 8000a20:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000a24:	3301      	adds	r3, #1
 8000a26:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8000a2a:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8000a2e:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d3d8      	bcc.n	80009e8 <OCB3+0x1f4>
	}
	divide_plaintext(plaintext, ptext0,  ptext1, plaintext_size);
 8000a36:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000a3a:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8000a3e:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8000a42:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8000a46:	f8d7 1220 	ldr.w	r1, [r7, #544]	@ 0x220
 8000a4a:	6800      	ldr	r0, [r0, #0]
 8000a4c:	f000 fc32 	bl	80012b4 <divide_plaintext>

	// 128 + 64 bits
	uint8_t Stretch[24] = {0};
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000a56:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
	int index = 15 - nonce_size;
 8000a66:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8000a6a:	f1c3 030f 	rsb	r3, r3, #15
 8000a6e:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
	Stretch[index++] |= 1;
 8000a72:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	f8c7 2240 	str.w	r2, [r7, #576]	@ 0x240
 8000a7c:	f503 7206 	add.w	r2, r3, #536	@ 0x218
 8000a80:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000a84:	440a      	add	r2, r1
 8000a86:	f812 2c64 	ldrb.w	r2, [r2, #-100]
 8000a8a:	f042 0201 	orr.w	r2, r2, #1
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8000a94:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000a98:	440b      	add	r3, r1
 8000a9a:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (int i = 0; i < nonce_size; index++, i++)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8000aa4:	e019      	b.n	8000ada <OCB3+0x2e6>
	  Stretch[index] = nonce[i];
 8000aa6:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8000aaa:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8000aae:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 8000ab2:	6812      	ldr	r2, [r2, #0]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	7819      	ldrb	r1, [r3, #0]
 8000ab8:	f507 72f2 	add.w	r2, r7, #484	@ 0x1e4
 8000abc:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000ac0:	4413      	add	r3, r2
 8000ac2:	460a      	mov	r2, r1
 8000ac4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < nonce_size; index++, i++)
 8000ac6:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000aca:	3301      	adds	r3, #1
 8000acc:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8000ad0:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8000ada:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8000ade:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d8df      	bhi.n	8000aa6 <OCB3+0x2b2>

	// 1^{122} 0^{6}
	uint8_t Top[16] = {0xFF, 0xFF, 0xFF, 0xFF,
 8000ae6:	4bc7      	ldr	r3, [pc, #796]	@ (8000e04 <OCB3+0x610>)
 8000ae8:	f507 74ea 	add.w	r4, r7, #468	@ 0x1d4
 8000aec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					 0xFF, 0xFF, 0xFF, 0xFF,
					 0xFF, 0xFF, 0xFF, 0xFF,
					 0xFF, 0xFF, 0xFF, 0xC0};
	xor_block_u8(Top, Stretch);
 8000af2:	f507 72f2 	add.w	r2, r7, #484	@ 0x1e4
 8000af6:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 8000afa:	4611      	mov	r1, r2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fe3e 	bl	800077e <xor_block_u8>

	uint8_t KTop [16];
	array_copy(Top, KTop, 16);
 8000b02:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 8000b06:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 8000b0a:	2210      	movs	r2, #16
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fdbf 	bl	8000690 <array_copy>

	//u8_to_u32( u32KTop, Top);

	// Nonce & 0^{122} 1^{6}
	// solo se extraen los últimos 6 bits;
	uint32_t bottom = Stretch[15] % 64;
 8000b12:	f897 31f3 	ldrb.w	r3, [r7, #499]	@ 0x1f3
 8000b16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b1a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
	// offset[15] ^= bottom;
	//HAL_CRYP_Encrypt(&hcryp, u32KTop, 4, u32KTop, HAL_MAX_DELAY);
	uint32_t rkeys_ffs[88];

	aes128_keyschedule_ffs(rkeys_ffs, key, key);
 8000b1e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b22:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8000b26:	f8d7 127c 	ldr.w	r1, [r7, #636]	@ 0x27c
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f002 fae4 	bl	80030f8 <aes128_keyschedule_ffs>

	aes128_encrypt_ffs(KTop, KTop, KTop, KTop, rkeys_ffs);
 8000b30:	f507 74e2 	add.w	r4, r7, #452	@ 0x1c4
 8000b34:	f507 72e2 	add.w	r2, r7, #452	@ 0x1c4
 8000b38:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 8000b3c:	f507 70e2 	add.w	r0, r7, #452	@ 0x1c4
 8000b40:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	4623      	mov	r3, r4
 8000b48:	f002 f856 	bl	8002bf8 <aes128_encrypt_ffs>

	array_copy(KTop, Stretch, 16);
 8000b4c:	f507 71f2 	add.w	r1, r7, #484	@ 0x1e4
 8000b50:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 8000b54:	2210      	movs	r2, #16
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fd9a 	bl	8000690 <array_copy>
	//u32_to_u8(Stretch, u32KTop);

	// KTop || KTOP
	for (int i = 0; i < 8; i++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8000b62:	e014      	b.n	8000b8e <OCB3+0x39a>
	  Stretch[16 + i] = Stretch[i];
 8000b64:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8000b68:	3310      	adds	r3, #16
 8000b6a:	f507 71f2 	add.w	r1, r7, #484	@ 0x1e4
 8000b6e:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8000b72:	440a      	add	r2, r1
 8000b74:	7812      	ldrb	r2, [r2, #0]
 8000b76:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8000b7a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000b7e:	440b      	add	r3, r1
 8000b80:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (int i = 0; i < 8; i++)
 8000b84:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8000b88:	3301      	adds	r3, #1
 8000b8a:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8000b8e:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	dde6      	ble.n	8000b64 <OCB3+0x370>
	// KTop || (KTOP ^ (KTop << 8)
	for (int i = 0; i < 8; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8000b9c:	e024      	b.n	8000be8 <OCB3+0x3f4>
	  Stretch[16 + i] ^= Stretch[i + 1];
 8000b9e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8000ba2:	3310      	adds	r3, #16
 8000ba4:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8000ba8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000bac:	4413      	add	r3, r2
 8000bae:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 8000bb2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8000bbc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000bc0:	4413      	add	r3, r2
 8000bc2:	f813 2c64 	ldrb.w	r2, [r3, #-100]
 8000bc6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8000bca:	3310      	adds	r3, #16
 8000bcc:	404a      	eors	r2, r1
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8000bd4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000bd8:	440b      	add	r3, r1
 8000bda:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (int i = 0; i < 8; i++)
 8000bde:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8000be2:	3301      	adds	r3, #1
 8000be4:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8000be8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8000bec:	2b07      	cmp	r3, #7
 8000bee:	ddd6      	ble.n	8000b9e <OCB3+0x3aa>

	uint32_t bot_shift = bottom / 8;
 8000bf0:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000bf4:	08db      	lsrs	r3, r3, #3
 8000bf6:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
	uint32_t bot_bit_shift = bottom % 8;
 8000bfa:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc

	// Stretch << Bottom
	for (int i = 0; i < 16; i++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 8000c0c:	e035      	b.n	8000c7a <OCB3+0x486>
	  Stretch[i] = ((Stretch[i + bot_shift] << bot_bit_shift) | (Stretch[i + bot_shift + 1] >> (8 - bot_bit_shift)));
 8000c0e:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8000c12:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000c16:	4413      	add	r3, r2
 8000c18:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8000c1c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000c20:	4413      	add	r3, r2
 8000c22:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 8000c26:	461a      	mov	r2, r3
 8000c28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	b25a      	sxtb	r2, r3
 8000c32:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8000c36:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8000c42:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000c46:	440b      	add	r3, r1
 8000c48:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000c52:	f1c3 0308 	rsb	r3, r3, #8
 8000c56:	fa41 f303 	asr.w	r3, r1, r3
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	b2d9      	uxtb	r1, r3
 8000c62:	f507 72f2 	add.w	r2, r7, #484	@ 0x1e4
 8000c66:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8000c6a:	4413      	add	r3, r2
 8000c6c:	460a      	mov	r2, r1
 8000c6e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8000c70:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8000c74:	3301      	adds	r3, #1
 8000c76:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 8000c7a:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8000c7e:	2b0f      	cmp	r3, #15
 8000c80:	ddc5      	ble.n	8000c0e <OCB3+0x41a>
	// Delta = (Stretch << Bottom) [1... 128]
	uint8_t Delta [16];
	//u8_to_u32( Delta, Stretch);
	array_copy(Stretch, Delta, 16);
 8000c82:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8000c86:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 8000c8a:	2210      	movs	r2, #16
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fcff 	bl	8000690 <array_copy>
	//uint8_t Delta_aux[16] = {0};
	uint8_t Checksum[16] = {0};
 8000c92:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000c96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	3304      	adds	r3, #4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]



	for(int i = 0; i < size_ptext/32; i++){
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 8000cae:	e094      	b.n	8000dda <OCB3+0x5e6>
	  xor_block_u8(Delta, L[ntz(i+1)]);
 8000cb0:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fd84 	bl	80007c4 <ntz>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	4a51      	ldr	r2, [pc, #324]	@ (8000e08 <OCB3+0x614>)
 8000cc2:	441a      	add	r2, r3
 8000cc4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fd57 	bl	800077e <xor_block_u8>

	  xor_block_u8(ptext0+(i*16), Delta);
 8000cd0:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000cd4:	011b      	lsls	r3, r3, #4
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8000cdc:	4413      	add	r3, r2
 8000cde:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fd4a 	bl	800077e <xor_block_u8>

	  xor_block_u8(Delta, L[ntz(i+2)]);
 8000cea:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000cee:	3302      	adds	r3, #2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fd67 	bl	80007c4 <ntz>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	4a43      	ldr	r2, [pc, #268]	@ (8000e08 <OCB3+0x614>)
 8000cfc:	441a      	add	r2, r3
 8000cfe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fd3a 	bl	800077e <xor_block_u8>

	  xor_block_u8(ptext1+(i*16), Delta);
 8000d0a:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000d0e:	011b      	lsls	r3, r3, #4
 8000d10:	461a      	mov	r2, r3
 8000d12:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000d16:	4413      	add	r3, r2
 8000d18:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fd2d 	bl	800077e <xor_block_u8>

	  aes128_encrypt_ffs(ctext0+ (i*16), ctext1+ (i*16), ptext0+ ((i)*16), ptext1 + (i*16), rkeys_ffs);
 8000d24:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8000d30:	1898      	adds	r0, r3, r2
 8000d32:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8000d3e:	1899      	adds	r1, r3, r2
 8000d40:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000d44:	011b      	lsls	r3, r3, #4
 8000d46:	461a      	mov	r2, r3
 8000d48:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8000d4c:	441a      	add	r2, r3
 8000d4e:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000d52:	011b      	lsls	r3, r3, #4
 8000d54:	461c      	mov	r4, r3
 8000d56:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000d5a:	441c      	add	r4, r3
 8000d5c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	4623      	mov	r3, r4
 8000d64:	f001 ff48 	bl	8002bf8 <aes128_encrypt_ffs>


	  xor_block_u8(ctext0+(i*16), Delta);
 8000d68:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000d6c:	011b      	lsls	r3, r3, #4
 8000d6e:	461a      	mov	r2, r3
 8000d70:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8000d74:	4413      	add	r3, r2
 8000d76:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcfe 	bl	800077e <xor_block_u8>
	  xor_block_u8(ctext1+(i*16), Delta);
 8000d82:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8000d8e:	4413      	add	r3, r2
 8000d90:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fcf1 	bl	800077e <xor_block_u8>


	  xor_block_u8(Checksum, ctext0+(i*16));
 8000d9c:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000da0:	011b      	lsls	r3, r3, #4
 8000da2:	461a      	mov	r2, r3
 8000da4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8000da8:	441a      	add	r2, r3
 8000daa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fce4 	bl	800077e <xor_block_u8>
	  xor_block_u8(Checksum, ctext1+(i*16));
 8000db6:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8000dc2:	441a      	add	r2, r3
 8000dc4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fcd7 	bl	800077e <xor_block_u8>
	for(int i = 0; i < size_ptext/32; i++){
 8000dd0:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 8000dda:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	da00      	bge.n	8000de4 <OCB3+0x5f0>
 8000de2:	331f      	adds	r3, #31
 8000de4:	115b      	asrs	r3, r3, #5
 8000de6:	461a      	mov	r2, r3
 8000de8:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000dec:	4293      	cmp	r3, r2
 8000dee:	f6ff af5f 	blt.w	8000cb0 <OCB3+0x4bc>
 8000df2:	f8d7 d004 	ldr.w	sp, [r7, #4]

	}


}
 8000df6:	bf00      	nop
 8000df8:	f507 7713 	add.w	r7, r7, #588	@ 0x24c
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e02:	bf00      	nop
 8000e04:	08007b28 	.word	0x08007b28
 8000e08:	200001f4 	.word	0x200001f4

08000e0c <PMAC_OCB3>:

void PMAC_OCB3( unsigned char* nonce, unsigned char* asociated_data, unsigned int asociated_data_size,unsigned int nonce_size,unsigned char* key, unsigned char* tag){
 8000e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e10:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	f507 7608 	add.w	r6, r7, #544	@ 0x220
 8000e1a:	f5a6 7603 	sub.w	r6, r6, #524	@ 0x20c
 8000e1e:	6030      	str	r0, [r6, #0]
 8000e20:	f507 7008 	add.w	r0, r7, #544	@ 0x220
 8000e24:	f5a0 7004 	sub.w	r0, r0, #528	@ 0x210
 8000e28:	6001      	str	r1, [r0, #0]
 8000e2a:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8000e2e:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 8000e32:	600a      	str	r2, [r1, #0]
 8000e34:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8000e38:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	466b      	mov	r3, sp
 8000e40:	461e      	mov	r6, r3

	int size_ptext = asociated_data_size;
 8000e42:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000e46:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200

	unsigned char ptext0[size_ptext];
 8000e50:	f8d7 1200 	ldr.w	r1, [r7, #512]	@ 0x200
 8000e54:	1e4b      	subs	r3, r1, #1
 8000e56:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8000e5a:	460a      	mov	r2, r1
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	603a      	str	r2, [r7, #0]
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	f04f 0300 	mov.w	r3, #0
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	00c3      	lsls	r3, r0, #3
 8000e6e:	6838      	ldr	r0, [r7, #0]
 8000e70:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e74:	6838      	ldr	r0, [r7, #0]
 8000e76:	00c2      	lsls	r2, r0, #3
 8000e78:	460a      	mov	r2, r1
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	4692      	mov	sl, r2
 8000e7e:	469b      	mov	fp, r3
 8000e80:	f04f 0200 	mov.w	r2, #0
 8000e84:	f04f 0300 	mov.w	r3, #0
 8000e88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000e8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000e90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000e94:	460b      	mov	r3, r1
 8000e96:	3307      	adds	r3, #7
 8000e98:	08db      	lsrs	r3, r3, #3
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	ebad 0d03 	sub.w	sp, sp, r3
 8000ea0:	ab02      	add	r3, sp, #8
 8000ea2:	3300      	adds	r3, #0
 8000ea4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
	unsigned char ptext1[size_ptext];
 8000ea8:	f8d7 1200 	ldr.w	r1, [r7, #512]	@ 0x200
 8000eac:	1e4b      	subs	r3, r1, #1
 8000eae:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8000eb2:	460a      	mov	r2, r1
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	4699      	mov	r9, r3
 8000eba:	f04f 0200 	mov.w	r2, #0
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ece:	460a      	mov	r2, r1
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	4614      	mov	r4, r2
 8000ed4:	461d      	mov	r5, r3
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	f04f 0300 	mov.w	r3, #0
 8000ede:	00eb      	lsls	r3, r5, #3
 8000ee0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ee4:	00e2      	lsls	r2, r4, #3
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	3307      	adds	r3, #7
 8000eea:	08db      	lsrs	r3, r3, #3
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	ebad 0d03 	sub.w	sp, sp, r3
 8000ef2:	ab02      	add	r3, sp, #8
 8000ef4:	3300      	adds	r3, #0
 8000ef6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
	unsigned char ctext0[16];
	unsigned char ctext1[16];
	for (size_t i = 0; i < size_ptext; i++){
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8000f00:	e012      	b.n	8000f28 <PMAC_OCB3+0x11c>
		ptext0[i]=0;
 8000f02:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 8000f06:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8000f0a:	4413      	add	r3, r2
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
		ptext1[i]=0;
 8000f10:	f8d7 21f0 	ldr.w	r2, [r7, #496]	@ 0x1f0
 8000f14:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8000f18:	4413      	add	r3, r2
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < size_ptext; i++){
 8000f1e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8000f22:	3301      	adds	r3, #1
 8000f24:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8000f28:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f2c:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d3e6      	bcc.n	8000f02 <PMAC_OCB3+0xf6>
	}

	divide_plaintext(asociated_data, ptext0,  ptext1, asociated_data_size);
 8000f34:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000f38:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000f3c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8000f40:	f5a2 7004 	sub.w	r0, r2, #528	@ 0x210
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f8d7 21f0 	ldr.w	r2, [r7, #496]	@ 0x1f0
 8000f4a:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8000f4e:	6800      	ldr	r0, [r0, #0]
 8000f50:	f000 f9b0 	bl	80012b4 <divide_plaintext>

	// 128 + 64 bits
	uint8_t Stretch[24] = {0};
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8000f5a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]
	int index = 15 - nonce_size;
 8000f6a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000f6e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1c3 030f 	rsb	r3, r3, #15
 8000f78:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	Stretch[index++] |= 1;
 8000f7c:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 8000f86:	f503 7206 	add.w	r2, r3, #536	@ 0x218
 8000f8a:	f107 0108 	add.w	r1, r7, #8
 8000f8e:	440a      	add	r2, r1
 8000f90:	f812 2c74 	ldrb.w	r2, [r2, #-116]
 8000f94:	f042 0201 	orr.w	r2, r2, #1
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8000f9e:	f107 0108 	add.w	r1, r7, #8
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f803 2c74 	strb.w	r2, [r3, #-116]
	for (int i = 0; i < nonce_size; index++, i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8000fae:	e019      	b.n	8000fe4 <PMAC_OCB3+0x1d8>
	  Stretch[index] = nonce[i];
 8000fb0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000fb4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8000fb8:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8000fbc:	6812      	ldr	r2, [r2, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	7819      	ldrb	r1, [r3, #0]
 8000fc2:	f507 72d6 	add.w	r2, r7, #428	@ 0x1ac
 8000fc6:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000fca:	4413      	add	r3, r2
 8000fcc:	460a      	mov	r2, r1
 8000fce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < nonce_size; index++, i++)
 8000fd0:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8000fda:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000fde:	3301      	adds	r3, #1
 8000fe0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8000fe4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8000fe8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8000fec:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8000ff0:	6812      	ldr	r2, [r2, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d8dc      	bhi.n	8000fb0 <PMAC_OCB3+0x1a4>

	// 1^{122} 0^{6}
	uint8_t Top[16] = {0xFF, 0xFF, 0xFF, 0xFF,
 8000ff6:	4bad      	ldr	r3, [pc, #692]	@ (80012ac <PMAC_OCB3+0x4a0>)
 8000ff8:	f507 74ce 	add.w	r4, r7, #412	@ 0x19c
 8000ffc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ffe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					 0xFF, 0xFF, 0xFF, 0xFF,
					 0xFF, 0xFF, 0xFF, 0xFF,
					 0xFF, 0xFF, 0xFF, 0xC0};
	xor_block_u8(Top, Stretch);
 8001002:	f507 72d6 	add.w	r2, r7, #428	@ 0x1ac
 8001006:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fbb6 	bl	800077e <xor_block_u8>

	uint8_t KTop [16];
	array_copy(Top, KTop, 16);
 8001012:	f507 71c6 	add.w	r1, r7, #396	@ 0x18c
 8001016:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 800101a:	2210      	movs	r2, #16
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fb37 	bl	8000690 <array_copy>

	//u8_to_u32( u32KTop, Top);

	// Nonce & 0^{122} 1^{6}
	// solo se extraen los últimos 6 bits;
	uint32_t bottom = Stretch[15] % 64;
 8001022:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 8001026:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800102a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
	// offset[15] ^= bottom;
	//HAL_CRYP_Encrypt(&hcryp, u32KTop, 4, u32KTop, HAL_MAX_DELAY);
	uint32_t rkeys_ffs[88];

	aes128_keyschedule_ffs(rkeys_ffs, key, key);
 800102e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001032:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8001036:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 800103a:	4618      	mov	r0, r3
 800103c:	f002 f85c 	bl	80030f8 <aes128_keyschedule_ffs>

	aes128_encrypt_ffs(KTop, KTop, KTop, KTop, rkeys_ffs);
 8001040:	f507 74c6 	add.w	r4, r7, #396	@ 0x18c
 8001044:	f507 72c6 	add.w	r2, r7, #396	@ 0x18c
 8001048:	f507 71c6 	add.w	r1, r7, #396	@ 0x18c
 800104c:	f507 70c6 	add.w	r0, r7, #396	@ 0x18c
 8001050:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	4623      	mov	r3, r4
 8001058:	f001 fdce 	bl	8002bf8 <aes128_encrypt_ffs>

	array_copy(KTop, Stretch, 16);
 800105c:	f507 71d6 	add.w	r1, r7, #428	@ 0x1ac
 8001060:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8001064:	2210      	movs	r2, #16
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fb12 	bl	8000690 <array_copy>
	//u32_to_u8(Stretch, u32KTop);

	// KTop || KTOP
	for (int i = 0; i < 8; i++)
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001072:	e014      	b.n	800109e <PMAC_OCB3+0x292>
	  Stretch[16 + i] = Stretch[i];
 8001074:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001078:	3310      	adds	r3, #16
 800107a:	f507 71d6 	add.w	r1, r7, #428	@ 0x1ac
 800107e:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001082:	440a      	add	r2, r1
 8001084:	7812      	ldrb	r2, [r2, #0]
 8001086:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800108a:	f107 0108 	add.w	r1, r7, #8
 800108e:	440b      	add	r3, r1
 8001090:	f803 2c74 	strb.w	r2, [r3, #-116]
	for (int i = 0; i < 8; i++)
 8001094:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001098:	3301      	adds	r3, #1
 800109a:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 800109e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80010a2:	2b07      	cmp	r3, #7
 80010a4:	dde6      	ble.n	8001074 <PMAC_OCB3+0x268>
	// KTop || (KTOP ^ (KTop << 8)
	for (int i = 0; i < 8; i++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80010ac:	e024      	b.n	80010f8 <PMAC_OCB3+0x2ec>
	  Stretch[16 + i] ^= Stretch[i + 1];
 80010ae:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80010b2:	3310      	adds	r3, #16
 80010b4:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80010b8:	f107 0208 	add.w	r2, r7, #8
 80010bc:	4413      	add	r3, r2
 80010be:	f813 1c74 	ldrb.w	r1, [r3, #-116]
 80010c2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80010c6:	3301      	adds	r3, #1
 80010c8:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80010cc:	f107 0208 	add.w	r2, r7, #8
 80010d0:	4413      	add	r3, r2
 80010d2:	f813 2c74 	ldrb.w	r2, [r3, #-116]
 80010d6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80010da:	3310      	adds	r3, #16
 80010dc:	404a      	eors	r2, r1
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80010e4:	f107 0108 	add.w	r1, r7, #8
 80010e8:	440b      	add	r3, r1
 80010ea:	f803 2c74 	strb.w	r2, [r3, #-116]
	for (int i = 0; i < 8; i++)
 80010ee:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80010f2:	3301      	adds	r3, #1
 80010f4:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80010f8:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80010fc:	2b07      	cmp	r3, #7
 80010fe:	ddd6      	ble.n	80010ae <PMAC_OCB3+0x2a2>

	uint32_t bot_shift = bottom / 8;
 8001100:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
	uint32_t bot_bit_shift = bottom % 8;
 800110a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

	// Stretch << Bottom
	for (int i = 0; i < 16; i++)
 8001116:	2300      	movs	r3, #0
 8001118:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 800111c:	e035      	b.n	800118a <PMAC_OCB3+0x37e>
	  Stretch[i] = ((Stretch[i + bot_shift] << bot_bit_shift) | (Stretch[i + bot_shift + 1] >> (8 - bot_bit_shift)));
 800111e:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8001122:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001126:	4413      	add	r3, r2
 8001128:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800112c:	f107 0208 	add.w	r2, r7, #8
 8001130:	4413      	add	r3, r2
 8001132:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8001136:	461a      	mov	r2, r3
 8001138:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	b25a      	sxtb	r2, r3
 8001142:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 8001146:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800114a:	440b      	add	r3, r1
 800114c:	3301      	adds	r3, #1
 800114e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8001152:	f107 0108 	add.w	r1, r7, #8
 8001156:	440b      	add	r3, r1
 8001158:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 800115c:	4619      	mov	r1, r3
 800115e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001162:	f1c3 0308 	rsb	r3, r3, #8
 8001166:	fa41 f303 	asr.w	r3, r1, r3
 800116a:	b25b      	sxtb	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b25b      	sxtb	r3, r3
 8001170:	b2d9      	uxtb	r1, r3
 8001172:	f507 72d6 	add.w	r2, r7, #428	@ 0x1ac
 8001176:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800117a:	4413      	add	r3, r2
 800117c:	460a      	mov	r2, r1
 800117e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8001180:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8001184:	3301      	adds	r3, #1
 8001186:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 800118a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800118e:	2b0f      	cmp	r3, #15
 8001190:	ddc5      	ble.n	800111e <PMAC_OCB3+0x312>
	// Delta = (Stretch << Bottom) [1... 128]
	uint8_t Delta [16];
	//u8_to_u32( Delta, Stretch);
	array_copy(Stretch, Delta, 16);
 8001192:	f107 011c 	add.w	r1, r7, #28
 8001196:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 800119a:	2210      	movs	r2, #16
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fa77 	bl	8000690 <array_copy>
	//uint8_t Delta_aux[16] = {0};



	for(int i = 0; i < size_ptext/32; i++){
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80011a8:	e06e      	b.n	8001288 <PMAC_OCB3+0x47c>
	  xor_block_u8(Delta, L[ntz(i+1)]);
 80011aa:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80011ae:	3301      	adds	r3, #1
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fb07 	bl	80007c4 <ntz>
 80011b6:	4603      	mov	r3, r0
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	4a3d      	ldr	r2, [pc, #244]	@ (80012b0 <PMAC_OCB3+0x4a4>)
 80011bc:	441a      	add	r2, r3
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fada 	bl	800077e <xor_block_u8>

	  xor_block_u8(ptext0+(i*16), Delta);
 80011ca:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	461a      	mov	r2, r3
 80011d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011d6:	4413      	add	r3, r2
 80011d8:	f107 021c 	add.w	r2, r7, #28
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff facd 	bl	800077e <xor_block_u8>

	  xor_block_u8(Delta, L[ntz(i+2)]);
 80011e4:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80011e8:	3302      	adds	r3, #2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff faea 	bl	80007c4 <ntz>
 80011f0:	4603      	mov	r3, r0
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	4a2e      	ldr	r2, [pc, #184]	@ (80012b0 <PMAC_OCB3+0x4a4>)
 80011f6:	441a      	add	r2, r3
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fabd 	bl	800077e <xor_block_u8>

	  xor_block_u8(ptext1+(i*16), Delta);
 8001204:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	461a      	mov	r2, r3
 800120c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001210:	4413      	add	r3, r2
 8001212:	f107 021c 	add.w	r2, r7, #28
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fab0 	bl	800077e <xor_block_u8>

	  aes128_encrypt_ffs(ctext0, ctext1, ptext0+ ((i)*16), ptext1 + (i*16), rkeys_ffs);
 800121e:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	461a      	mov	r2, r3
 8001226:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800122a:	441a      	add	r2, r3
 800122c:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4619      	mov	r1, r3
 8001234:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001238:	185c      	adds	r4, r3, r1
 800123a:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 800123e:	f507 70ea 	add.w	r0, r7, #468	@ 0x1d4
 8001242:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	4623      	mov	r3, r4
 800124a:	f001 fcd5 	bl	8002bf8 <aes128_encrypt_ffs>

	  xor_block_u8(tag, ctext0+(i*16));
 800124e:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	461a      	mov	r2, r3
 8001256:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 800125a:	4413      	add	r3, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f8d7 024c 	ldr.w	r0, [r7, #588]	@ 0x24c
 8001262:	f7ff fa8c 	bl	800077e <xor_block_u8>

	  xor_block_u8(tag, ctext1+(i*16));
 8001266:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	461a      	mov	r2, r3
 800126e:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 8001272:	4413      	add	r3, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f8d7 024c 	ldr.w	r0, [r7, #588]	@ 0x24c
 800127a:	f7ff fa80 	bl	800077e <xor_block_u8>
	for(int i = 0; i < size_ptext/32; i++){
 800127e:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001282:	3301      	adds	r3, #1
 8001284:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8001288:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800128c:	2b00      	cmp	r3, #0
 800128e:	da00      	bge.n	8001292 <PMAC_OCB3+0x486>
 8001290:	331f      	adds	r3, #31
 8001292:	115b      	asrs	r3, r3, #5
 8001294:	461a      	mov	r2, r3
 8001296:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800129a:	4293      	cmp	r3, r2
 800129c:	db85      	blt.n	80011aa <PMAC_OCB3+0x39e>
 800129e:	46b5      	mov	sp, r6

	}

}
 80012a0:	bf00      	nop
 80012a2:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 80012a6:	46bd      	mov	sp, r7
 80012a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012ac:	08007b28 	.word	0x08007b28
 80012b0:	200001f4 	.word	0x200001f4

080012b4 <divide_plaintext>:


void divide_plaintext(unsigned char* plaintext, unsigned char* ptext0,  unsigned char* ptext1,unsigned int plaintext_size){
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	@ 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	603b      	str	r3, [r7, #0]
    int condicion = 1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61fb      	str	r3, [r7, #28]
    size_t j=0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
    size_t k=0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	e02c      	b.n	800132e <divide_plaintext+0x7a>

        if (i%16==0 && i!=0)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d106      	bne.n	80012ec <divide_plaintext+0x38>
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <divide_plaintext+0x38>
            condicion=condicion^1;
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f083 0301 	eor.w	r3, r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]

        if (condicion)
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d008      	beq.n	8001304 <divide_plaintext+0x50>
            ptext0[j] = plaintext[i];
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	441a      	add	r2, r3
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	440b      	add	r3, r1
 80012fe:	7812      	ldrb	r2, [r2, #0]
 8001300:	701a      	strb	r2, [r3, #0]
 8001302:	e007      	b.n	8001314 <divide_plaintext+0x60>
        else
            ptext1[k] = plaintext[i];
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	441a      	add	r2, r3
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	440b      	add	r3, r1
 8001310:	7812      	ldrb	r2, [r2, #0]
 8001312:	701a      	strb	r2, [r3, #0]

        if (condicion)
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <divide_plaintext+0x6e>
            j++;
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	3301      	adds	r3, #1
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	e002      	b.n	8001328 <divide_plaintext+0x74>
        else
            k++;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	3301      	adds	r3, #1
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d3ce      	bcc.n	80012d4 <divide_plaintext+0x20>
    }
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	3724      	adds	r7, #36	@ 0x24
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <packing>:
******************************************************************************/



void packing(uint32_t* out, const unsigned char* in0,
		const unsigned char* in1) {
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	out[0] = LE_LOAD_32(in0);
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	3303      	adds	r3, #3
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	061a      	lsls	r2, r3, #24
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	3302      	adds	r3, #2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	041b      	lsls	r3, r3, #16
 8001360:	431a      	orrs	r2, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	3301      	adds	r3, #1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	4313      	orrs	r3, r2
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	431a      	orrs	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	601a      	str	r2, [r3, #0]
	out[1] = LE_LOAD_32(in1);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3303      	adds	r3, #3
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	061a      	lsls	r2, r3, #24
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3302      	adds	r3, #2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	041b      	lsls	r3, r3, #16
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3301      	adds	r3, #1
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	4619      	mov	r1, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3304      	adds	r3, #4
 800139c:	430a      	orrs	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
	out[2] = LE_LOAD_32(in0 + 4);
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	3307      	adds	r3, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	061a      	lsls	r2, r3, #24
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	3306      	adds	r3, #6
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	041b      	lsls	r3, r3, #16
 80013b0:	431a      	orrs	r2, r3
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	3305      	adds	r3, #5
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	431a      	orrs	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	3304      	adds	r3, #4
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	4619      	mov	r1, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3308      	adds	r3, #8
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
	out[3] = LE_LOAD_32(in1 + 4);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3307      	adds	r3, #7
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	061a      	lsls	r2, r3, #24
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3306      	adds	r3, #6
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	041b      	lsls	r3, r3, #16
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3305      	adds	r3, #5
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3304      	adds	r3, #4
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4619      	mov	r1, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	330c      	adds	r3, #12
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
	out[4] = LE_LOAD_32(in0 + 8);
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	330b      	adds	r3, #11
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	061a      	lsls	r2, r3, #24
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	330a      	adds	r3, #10
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	041b      	lsls	r3, r3, #16
 8001408:	431a      	orrs	r2, r3
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	3309      	adds	r3, #9
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	431a      	orrs	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	3308      	adds	r3, #8
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4619      	mov	r1, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3310      	adds	r3, #16
 8001420:	430a      	orrs	r2, r1
 8001422:	601a      	str	r2, [r3, #0]
	out[5] = LE_LOAD_32(in1 + 8);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	330b      	adds	r3, #11
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	061a      	lsls	r2, r3, #24
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	330a      	adds	r3, #10
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	041b      	lsls	r3, r3, #16
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3309      	adds	r3, #9
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3308      	adds	r3, #8
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3314      	adds	r3, #20
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
	out[6] = LE_LOAD_32(in0 + 12);
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	330f      	adds	r3, #15
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	061a      	lsls	r2, r3, #24
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	330e      	adds	r3, #14
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	041b      	lsls	r3, r3, #16
 8001460:	431a      	orrs	r2, r3
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	330d      	adds	r3, #13
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	431a      	orrs	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	330c      	adds	r3, #12
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4619      	mov	r1, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3318      	adds	r3, #24
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]
	out[7] = LE_LOAD_32(in1 + 12);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	330f      	adds	r3, #15
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	061a      	lsls	r2, r3, #24
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	330e      	adds	r3, #14
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	041b      	lsls	r3, r3, #16
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	330d      	adds	r3, #13
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	330c      	adds	r3, #12
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4619      	mov	r1, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	331c      	adds	r3, #28
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[1], out[0], 0x55555555, 1);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3304      	adds	r3, #4
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	4053      	eors	r3, r2
 80014b6:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	405a      	eors	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3304      	adds	r3, #4
 80014cc:	6819      	ldr	r1, [r3, #0]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005a      	lsls	r2, r3, #1
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3304      	adds	r3, #4
 80014d6:	404a      	eors	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[3], out[2], 0x55555555, 1);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3308      	adds	r3, #8
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	330c      	adds	r3, #12
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	085b      	lsrs	r3, r3, #1
 80014e8:	4053      	eors	r3, r2
 80014ea:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3308      	adds	r3, #8
 80014f4:	6819      	ldr	r1, [r3, #0]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3308      	adds	r3, #8
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	404a      	eors	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	330c      	adds	r3, #12
 8001504:	6819      	ldr	r1, [r3, #0]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005a      	lsls	r2, r3, #1
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	330c      	adds	r3, #12
 800150e:	404a      	eors	r2, r1
 8001510:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[5], out[4], 0x55555555, 1);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3310      	adds	r3, #16
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3314      	adds	r3, #20
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	085b      	lsrs	r3, r3, #1
 8001520:	4053      	eors	r3, r2
 8001522:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3310      	adds	r3, #16
 800152c:	6819      	ldr	r1, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	3310      	adds	r3, #16
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	404a      	eors	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3314      	adds	r3, #20
 800153c:	6819      	ldr	r1, [r3, #0]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	005a      	lsls	r2, r3, #1
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3314      	adds	r3, #20
 8001546:	404a      	eors	r2, r1
 8001548:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[6], 0x55555555, 1);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3318      	adds	r3, #24
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	331c      	adds	r3, #28
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	085b      	lsrs	r3, r3, #1
 8001558:	4053      	eors	r3, r2
 800155a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3318      	adds	r3, #24
 8001564:	6819      	ldr	r1, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3318      	adds	r3, #24
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	404a      	eors	r2, r1
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	331c      	adds	r3, #28
 8001574:	6819      	ldr	r1, [r3, #0]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005a      	lsls	r2, r3, #1
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	331c      	adds	r3, #28
 800157e:	404a      	eors	r2, r1
 8001580:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[2], out[0], 0x33333333, 2);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3308      	adds	r3, #8
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	089b      	lsrs	r3, r3, #2
 800158e:	4053      	eors	r3, r2
 8001590:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	405a      	eors	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3308      	adds	r3, #8
 80015a6:	6819      	ldr	r1, [r3, #0]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	009a      	lsls	r2, r3, #2
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3308      	adds	r3, #8
 80015b0:	404a      	eors	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[3], out[1], 0x33333333, 2);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3304      	adds	r3, #4
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	330c      	adds	r3, #12
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	089b      	lsrs	r3, r3, #2
 80015c2:	4053      	eors	r3, r2
 80015c4:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3304      	adds	r3, #4
 80015ce:	6819      	ldr	r1, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3304      	adds	r3, #4
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	404a      	eors	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	330c      	adds	r3, #12
 80015de:	6819      	ldr	r1, [r3, #0]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	009a      	lsls	r2, r3, #2
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	330c      	adds	r3, #12
 80015e8:	404a      	eors	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[6], out[4], 0x33333333, 2);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3310      	adds	r3, #16
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3318      	adds	r3, #24
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	4053      	eors	r3, r2
 80015fc:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3310      	adds	r3, #16
 8001606:	6819      	ldr	r1, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3310      	adds	r3, #16
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	404a      	eors	r2, r1
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3318      	adds	r3, #24
 8001616:	6819      	ldr	r1, [r3, #0]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	009a      	lsls	r2, r3, #2
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3318      	adds	r3, #24
 8001620:	404a      	eors	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[5], 0x33333333, 2);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3314      	adds	r3, #20
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	331c      	adds	r3, #28
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	4053      	eors	r3, r2
 8001634:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3314      	adds	r3, #20
 800163e:	6819      	ldr	r1, [r3, #0]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3314      	adds	r3, #20
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	404a      	eors	r2, r1
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	331c      	adds	r3, #28
 800164e:	6819      	ldr	r1, [r3, #0]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	009a      	lsls	r2, r3, #2
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	331c      	adds	r3, #28
 8001658:	404a      	eors	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[4], out[0], 0x0f0f0f0f, 4);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3310      	adds	r3, #16
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	4053      	eors	r3, r2
 800166a:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	405a      	eors	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3310      	adds	r3, #16
 8001680:	6819      	ldr	r1, [r3, #0]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	011a      	lsls	r2, r3, #4
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	3310      	adds	r3, #16
 800168a:	404a      	eors	r2, r1
 800168c:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[5], out[1], 0x0f0f0f0f, 4);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3304      	adds	r3, #4
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3314      	adds	r3, #20
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	4053      	eors	r3, r2
 800169e:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3304      	adds	r3, #4
 80016a8:	6819      	ldr	r1, [r3, #0]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3304      	adds	r3, #4
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	404a      	eors	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3314      	adds	r3, #20
 80016b8:	6819      	ldr	r1, [r3, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	011a      	lsls	r2, r3, #4
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3314      	adds	r3, #20
 80016c2:	404a      	eors	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[6], out[2], 0x0f0f0f0f, 4);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3308      	adds	r3, #8
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3318      	adds	r3, #24
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	091b      	lsrs	r3, r3, #4
 80016d4:	4053      	eors	r3, r2
 80016d6:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3308      	adds	r3, #8
 80016e0:	6819      	ldr	r1, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3308      	adds	r3, #8
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	404a      	eors	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3318      	adds	r3, #24
 80016f0:	6819      	ldr	r1, [r3, #0]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	011a      	lsls	r2, r3, #4
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3318      	adds	r3, #24
 80016fa:	404a      	eors	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[3], 0x0f0f0f0f, 4);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	330c      	adds	r3, #12
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	331c      	adds	r3, #28
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	4053      	eors	r3, r2
 800170e:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	330c      	adds	r3, #12
 8001718:	6819      	ldr	r1, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	330c      	adds	r3, #12
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	404a      	eors	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	331c      	adds	r3, #28
 8001728:	6819      	ldr	r1, [r3, #0]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	011a      	lsls	r2, r3, #4
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	331c      	adds	r3, #28
 8001732:	404a      	eors	r2, r1
 8001734:	601a      	str	r2, [r3, #0]
}
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <unpacking>:

/******************************************************************************
* Unpacks the 256-bit internal state in two 128-bit blocs out0, out1.
******************************************************************************/
static void unpacking(unsigned char* out0, unsigned char* out1, uint32_t* in) {
 8001742:	b480      	push	{r7}
 8001744:	b087      	sub	sp, #28
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	SWAPMOVE(in[4], in[0], 0x0f0f0f0f, 4);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3310      	adds	r3, #16
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	4053      	eors	r3, r2
 800175c:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	405a      	eors	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3310      	adds	r3, #16
 8001772:	6819      	ldr	r1, [r3, #0]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	011a      	lsls	r2, r3, #4
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3310      	adds	r3, #16
 800177c:	404a      	eors	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[5], in[1], 0x0f0f0f0f, 4);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3304      	adds	r3, #4
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3314      	adds	r3, #20
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	4053      	eors	r3, r2
 8001790:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3304      	adds	r3, #4
 800179a:	6819      	ldr	r1, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3304      	adds	r3, #4
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	404a      	eors	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3314      	adds	r3, #20
 80017aa:	6819      	ldr	r1, [r3, #0]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	011a      	lsls	r2, r3, #4
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3314      	adds	r3, #20
 80017b4:	404a      	eors	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[6], in[2], 0x0f0f0f0f, 4);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3308      	adds	r3, #8
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3318      	adds	r3, #24
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	4053      	eors	r3, r2
 80017c8:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3308      	adds	r3, #8
 80017d2:	6819      	ldr	r1, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3308      	adds	r3, #8
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	404a      	eors	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3318      	adds	r3, #24
 80017e2:	6819      	ldr	r1, [r3, #0]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	011a      	lsls	r2, r3, #4
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3318      	adds	r3, #24
 80017ec:	404a      	eors	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[3], 0x0f0f0f0f, 4);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	330c      	adds	r3, #12
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	331c      	adds	r3, #28
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	4053      	eors	r3, r2
 8001800:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	330c      	adds	r3, #12
 800180a:	6819      	ldr	r1, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	330c      	adds	r3, #12
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	404a      	eors	r2, r1
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	331c      	adds	r3, #28
 800181a:	6819      	ldr	r1, [r3, #0]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	011a      	lsls	r2, r3, #4
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	331c      	adds	r3, #28
 8001824:	404a      	eors	r2, r1
 8001826:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[2], in[0], 0x33333333, 2);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3308      	adds	r3, #8
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	4053      	eors	r3, r2
 8001836:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	405a      	eors	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3308      	adds	r3, #8
 800184c:	6819      	ldr	r1, [r3, #0]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	009a      	lsls	r2, r3, #2
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3308      	adds	r3, #8
 8001856:	404a      	eors	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[3], in[1], 0x33333333, 2);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3304      	adds	r3, #4
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	330c      	adds	r3, #12
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	4053      	eors	r3, r2
 800186a:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3304      	adds	r3, #4
 8001874:	6819      	ldr	r1, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3304      	adds	r3, #4
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	404a      	eors	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	330c      	adds	r3, #12
 8001884:	6819      	ldr	r1, [r3, #0]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	009a      	lsls	r2, r3, #2
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	330c      	adds	r3, #12
 800188e:	404a      	eors	r2, r1
 8001890:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[6], in[4], 0x33333333, 2);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3310      	adds	r3, #16
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3318      	adds	r3, #24
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	4053      	eors	r3, r2
 80018a2:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3310      	adds	r3, #16
 80018ac:	6819      	ldr	r1, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3310      	adds	r3, #16
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	404a      	eors	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3318      	adds	r3, #24
 80018bc:	6819      	ldr	r1, [r3, #0]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	009a      	lsls	r2, r3, #2
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3318      	adds	r3, #24
 80018c6:	404a      	eors	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[5], 0x33333333, 2);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3314      	adds	r3, #20
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	331c      	adds	r3, #28
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	4053      	eors	r3, r2
 80018da:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3314      	adds	r3, #20
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3314      	adds	r3, #20
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	404a      	eors	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	331c      	adds	r3, #28
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	009a      	lsls	r2, r3, #2
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	331c      	adds	r3, #28
 80018fe:	404a      	eors	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[1], in[0], 0x55555555, 1);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3304      	adds	r3, #4
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	4053      	eors	r3, r2
 8001910:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	405a      	eors	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3304      	adds	r3, #4
 8001926:	6819      	ldr	r1, [r3, #0]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005a      	lsls	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3304      	adds	r3, #4
 8001930:	404a      	eors	r2, r1
 8001932:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[3], in[2], 0x55555555, 1);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3308      	adds	r3, #8
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	330c      	adds	r3, #12
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	4053      	eors	r3, r2
 8001944:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3308      	adds	r3, #8
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3308      	adds	r3, #8
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	404a      	eors	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	330c      	adds	r3, #12
 800195e:	6819      	ldr	r1, [r3, #0]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	005a      	lsls	r2, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	330c      	adds	r3, #12
 8001968:	404a      	eors	r2, r1
 800196a:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[5], in[4], 0x55555555, 1);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3310      	adds	r3, #16
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3314      	adds	r3, #20
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	4053      	eors	r3, r2
 800197c:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3310      	adds	r3, #16
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3310      	adds	r3, #16
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	404a      	eors	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3314      	adds	r3, #20
 8001996:	6819      	ldr	r1, [r3, #0]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005a      	lsls	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3314      	adds	r3, #20
 80019a0:	404a      	eors	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[6], 0x55555555, 1);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3318      	adds	r3, #24
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	331c      	adds	r3, #28
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	4053      	eors	r3, r2
 80019b4:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3318      	adds	r3, #24
 80019be:	6819      	ldr	r1, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3318      	adds	r3, #24
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	404a      	eors	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	331c      	adds	r3, #28
 80019ce:	6819      	ldr	r1, [r3, #0]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005a      	lsls	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	331c      	adds	r3, #28
 80019d8:	404a      	eors	r2, r1
 80019da:	601a      	str	r2, [r3, #0]
	LE_STORE_32(out0, in[0]);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	0a1a      	lsrs	r2, r3, #8
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3301      	adds	r3, #1
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0c1a      	lsrs	r2, r3, #16
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3302      	adds	r3, #2
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	0e1a      	lsrs	r2, r3, #24
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3303      	adds	r3, #3
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 4, in[2]);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3308      	adds	r3, #8
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3308      	adds	r3, #8
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	0a1a      	lsrs	r2, r3, #8
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3305      	adds	r3, #5
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3308      	adds	r3, #8
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0c1a      	lsrs	r2, r3, #16
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3306      	adds	r3, #6
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3308      	adds	r3, #8
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0e1a      	lsrs	r2, r3, #24
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	3307      	adds	r3, #7
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 8, in[4]);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3310      	adds	r3, #16
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3308      	adds	r3, #8
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3310      	adds	r3, #16
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	0a1a      	lsrs	r2, r3, #8
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3309      	adds	r3, #9
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	701a      	strb	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3310      	adds	r3, #16
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	0c1a      	lsrs	r2, r3, #16
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	330a      	adds	r3, #10
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3310      	adds	r3, #16
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	0e1a      	lsrs	r2, r3, #24
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	330b      	adds	r3, #11
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 12, in[6]);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3318      	adds	r3, #24
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	330c      	adds	r3, #12
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3318      	adds	r3, #24
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0a1a      	lsrs	r2, r3, #8
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	330d      	adds	r3, #13
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3318      	adds	r3, #24
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0c1a      	lsrs	r2, r3, #16
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	330e      	adds	r3, #14
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3318      	adds	r3, #24
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	0e1a      	lsrs	r2, r3, #24
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	330f      	adds	r3, #15
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1, in[1]);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3304      	adds	r3, #4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	701a      	strb	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	0a1a      	lsrs	r2, r3, #8
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	0c1a      	lsrs	r2, r3, #16
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	3302      	adds	r3, #2
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3304      	adds	r3, #4
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0e1a      	lsrs	r2, r3, #24
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	3303      	adds	r3, #3
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 4, in[3]);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	330c      	adds	r3, #12
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	330c      	adds	r3, #12
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	0a1a      	lsrs	r2, r3, #8
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	3305      	adds	r3, #5
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	701a      	strb	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	330c      	adds	r3, #12
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	0c1a      	lsrs	r2, r3, #16
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	3306      	adds	r3, #6
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	330c      	adds	r3, #12
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	0e1a      	lsrs	r2, r3, #24
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	3307      	adds	r3, #7
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 8, in[5]);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3314      	adds	r3, #20
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	3308      	adds	r3, #8
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	701a      	strb	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3314      	adds	r3, #20
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0a1a      	lsrs	r2, r3, #8
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	3309      	adds	r3, #9
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3314      	adds	r3, #20
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	0c1a      	lsrs	r2, r3, #16
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	330a      	adds	r3, #10
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3314      	adds	r3, #20
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	0e1a      	lsrs	r2, r3, #24
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	330b      	adds	r3, #11
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 12, in[7]);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	331c      	adds	r3, #28
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	330c      	adds	r3, #12
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	331c      	adds	r3, #28
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	0a1a      	lsrs	r2, r3, #8
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	330d      	adds	r3, #13
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	331c      	adds	r3, #28
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	0c1a      	lsrs	r2, r3, #16
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	330e      	adds	r3, #14
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	331c      	adds	r3, #28
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0e1a      	lsrs	r2, r3, #24
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	330f      	adds	r3, #15
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	371c      	adds	r7, #28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <ark>:

/******************************************************************************
* XOR the round key to the internal state. The round keys are expected to be 
* pre-computed and to be packed in the fixsliced representation.
******************************************************************************/
static void ark(uint32_t* state, const uint32_t* rkey) {
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 8; i++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	e012      	b.n	8001c02 <ark+0x36>
		state[i] ^= rkey[i];
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	4413      	add	r3, r2
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4403      	add	r3, r0
 8001bf8:	404a      	eors	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b07      	cmp	r3, #7
 8001c06:	dde9      	ble.n	8001bdc <ark+0x10>
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <sbox>:
/******************************************************************************
* Bitsliced implementation of the AES Sbox based on Boyar, Peralta and Calik.
* See http://www.cs.yale.edu/homes/peralta/CircuitStuff/SLP_AES_113.txt
* Note that the 4 NOT (^= 0xffffffff) are moved to the key schedule.
******************************************************************************/
void sbox(uint32_t* state) {
 8001c16:	b480      	push	{r7}
 8001c18:	b095      	sub	sp, #84	@ 0x54
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4, t5,
		t6, t7, t8, t9, t10, t11, t12,
		t13, t14, t15, t16, t17;
	t0			= state[3] ^ state[5];
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	330c      	adds	r3, #12
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3314      	adds	r3, #20
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4053      	eors	r3, r2
 8001c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	t1			= state[0] ^ state[6];
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3318      	adds	r3, #24
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4053      	eors	r3, r2
 8001c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
	t2			= t1 ^ t0;
 8001c3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c40:	4053      	eors	r3, r2
 8001c42:	647b      	str	r3, [r7, #68]	@ 0x44
	t3			= state[4] ^ t2;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3310      	adds	r3, #16
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c4c:	4053      	eors	r3, r2
 8001c4e:	643b      	str	r3, [r7, #64]	@ 0x40
	t4			= t3 ^ state[5];
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3314      	adds	r3, #20
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c58:	4053      	eors	r3, r2
 8001c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	t5			= t2 & t4;
 8001c5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c60:	4013      	ands	r3, r2
 8001c62:	63bb      	str	r3, [r7, #56]	@ 0x38
	t6			= t4 ^ state[7];
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	331c      	adds	r3, #28
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c6c:	4053      	eors	r3, r2
 8001c6e:	637b      	str	r3, [r7, #52]	@ 0x34
	t7			= t3 ^ state[1];
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3304      	adds	r3, #4
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c78:	4053      	eors	r3, r2
 8001c7a:	633b      	str	r3, [r7, #48]	@ 0x30
	t8			= state[0] ^ state[3]; 
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	330c      	adds	r3, #12
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4053      	eors	r3, r2
 8001c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	t9			= t7 ^ t8;
 8001c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c8e:	4053      	eors	r3, r2
 8001c90:	62bb      	str	r3, [r7, #40]	@ 0x28
	t10			= t8 & t9;
 8001c92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c96:	4013      	ands	r3, r2
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
	t11			= state[7] ^ t9; 
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	331c      	adds	r3, #28
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ca2:	4053      	eors	r3, r2
 8001ca4:	623b      	str	r3, [r7, #32]
	t12			= state[0] ^ state[5];
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3314      	adds	r3, #20
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4053      	eors	r3, r2
 8001cb2:	61fb      	str	r3, [r7, #28]
	t13			= state[1] ^ state[2];
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3308      	adds	r3, #8
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4053      	eors	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
	t14			= t4 ^ t13;
 8001cc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	4053      	eors	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
	t15			= t14 ^ t9;
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd0:	4053      	eors	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
	t16			= t0 & t15;
 8001cd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
	t17			= t16 ^ t10;
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	4053      	eors	r3, r2
 8001ce2:	60bb      	str	r3, [r7, #8]
	state[1]	= t14 ^ t12; 
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	6979      	ldr	r1, [r7, #20]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	404a      	eors	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]
	state[2]	= t12 & t14;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3308      	adds	r3, #8
 8001cf4:	69f9      	ldr	r1, [r7, #28]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3308      	adds	r3, #8
 8001d00:	6819      	ldr	r1, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3308      	adds	r3, #8
 8001d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d08:	404a      	eors	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]
	state[4]	= t13 ^ t9;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3310      	adds	r3, #16
 8001d10:	69b9      	ldr	r1, [r7, #24]
 8001d12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d14:	404a      	eors	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]
	state[5]	= t1 ^ state[4];
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3310      	adds	r3, #16
 8001d1c:	6819      	ldr	r1, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3314      	adds	r3, #20
 8001d22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d24:	404a      	eors	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]
	t3			= t1 & state[4];
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3310      	adds	r3, #16
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d30:	4013      	ands	r3, r2
 8001d32:	643b      	str	r3, [r7, #64]	@ 0x40
	t10			= state[0] ^ state[4];
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3310      	adds	r3, #16
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4053      	eors	r3, r2
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
	t13 		^= state[7];
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	331c      	adds	r3, #28
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4053      	eors	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
	state[3] 	^= t13; 
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	330c      	adds	r3, #12
 8001d52:	6819      	ldr	r1, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	330c      	adds	r3, #12
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	404a      	eors	r2, r1
 8001d5c:	601a      	str	r2, [r3, #0]
	t16			= state[3] & state[7];
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	330c      	adds	r3, #12
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	331c      	adds	r3, #28
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
	t16 		^= t5;
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d72:	4053      	eors	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
	t16 		^= state[2];
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3308      	adds	r3, #8
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4053      	eors	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
	state[1] 	^= t16;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3304      	adds	r3, #4
 8001d86:	6819      	ldr	r1, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	404a      	eors	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]
	state[0] 	^= t13;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	405a      	eors	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	601a      	str	r2, [r3, #0]
	t16			= state[0] & t11;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a3a      	ldr	r2, [r7, #32]
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
	t16 		^= t3;
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dac:	4053      	eors	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
	state[2] 	^= t16;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3308      	adds	r3, #8
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3308      	adds	r3, #8
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	404a      	eors	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	6819      	ldr	r1, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3308      	adds	r3, #8
 8001dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dcc:	404a      	eors	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
	state[6] 	^= t13;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3318      	adds	r3, #24
 8001dd4:	6819      	ldr	r1, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3318      	adds	r3, #24
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	404a      	eors	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]
	t10			= state[6] & t13;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3318      	adds	r3, #24
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24
	t3 			^= t10;
 8001dec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	4053      	eors	r3, r2
 8001df2:	643b      	str	r3, [r7, #64]	@ 0x40
	t3 			^= t17;
 8001df4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	4053      	eors	r3, r2
 8001dfa:	643b      	str	r3, [r7, #64]	@ 0x40
	state[5] 	^= t3;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3314      	adds	r3, #20
 8001e00:	6819      	ldr	r1, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3314      	adds	r3, #20
 8001e06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e08:	404a      	eors	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
	t3			= state[6] ^ t12;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3318      	adds	r3, #24
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	4053      	eors	r3, r2
 8001e16:	643b      	str	r3, [r7, #64]	@ 0x40
	t10			= t3 & t6;
 8001e18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
	t5 			^= t10;
 8001e20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	4053      	eors	r3, r2
 8001e26:	63bb      	str	r3, [r7, #56]	@ 0x38
	t5 			^= t7;
 8001e28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2c:	4053      	eors	r3, r2
 8001e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
	t5 			^= t17;
 8001e30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	4053      	eors	r3, r2
 8001e36:	63bb      	str	r3, [r7, #56]	@ 0x38
	t7			= t5 & state[5];
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3314      	adds	r3, #20
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e40:	4013      	ands	r3, r2
 8001e42:	633b      	str	r3, [r7, #48]	@ 0x30
	t10			= state[2] ^ t7;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3308      	adds	r3, #8
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e4c:	4053      	eors	r3, r2
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
	t7 			^= state[1];
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3304      	adds	r3, #4
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e58:	4053      	eors	r3, r2
 8001e5a:	633b      	str	r3, [r7, #48]	@ 0x30
	t5 			^= state[1];
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3304      	adds	r3, #4
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e64:	4053      	eors	r3, r2
 8001e66:	63bb      	str	r3, [r7, #56]	@ 0x38
	t16			= t5 & t10;
 8001e68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]
	state[1] 	^= t16;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3304      	adds	r3, #4
 8001e74:	6819      	ldr	r1, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	404a      	eors	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]
	t17			= state[1] & state[0];
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3304      	adds	r3, #4
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	60bb      	str	r3, [r7, #8]
	t11			= state[1] & t11;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3304      	adds	r3, #4
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6a3a      	ldr	r2, [r7, #32]
 8001e96:	4013      	ands	r3, r2
 8001e98:	623b      	str	r3, [r7, #32]
	t16			= state[5] ^ state[2];
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3314      	adds	r3, #20
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3308      	adds	r3, #8
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4053      	eors	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
	t7 			&= t16;
 8001eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	633b      	str	r3, [r7, #48]	@ 0x30
	t7 			^= state[2];
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3308      	adds	r3, #8
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001eba:	4053      	eors	r3, r2
 8001ebc:	633b      	str	r3, [r7, #48]	@ 0x30
	t16			= t10 ^ t7;
 8001ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec2:	4053      	eors	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
	state[2] 	&= t16;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3308      	adds	r3, #8
 8001eca:	6819      	ldr	r1, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3308      	adds	r3, #8
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]
	t10 		^= state[2];
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3308      	adds	r3, #8
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ede:	4053      	eors	r3, r2
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
	t10 		&= state[1];
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eea:	4013      	ands	r3, r2
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
	t5 			^= t10;
 8001eee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	4053      	eors	r3, r2
 8001ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
	t10			= state[1] ^ t5;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001efe:	4053      	eors	r3, r2
 8001f00:	627b      	str	r3, [r7, #36]	@ 0x24
	state[4] 	&= t10; 
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3310      	adds	r3, #16
 8001f06:	6819      	ldr	r1, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3310      	adds	r3, #16
 8001f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f0e:	400a      	ands	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
	t11 		^= state[4];
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3310      	adds	r3, #16
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6a3a      	ldr	r2, [r7, #32]
 8001f1a:	4053      	eors	r3, r2
 8001f1c:	623b      	str	r3, [r7, #32]
	t1 			&= t10;
 8001f1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f22:	4013      	ands	r3, r2
 8001f24:	64bb      	str	r3, [r7, #72]	@ 0x48
	state[6] 	&= t5; 
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3318      	adds	r3, #24
 8001f2a:	6819      	ldr	r1, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3318      	adds	r3, #24
 8001f30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f32:	400a      	ands	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]
	t10			= t5 & t13;
 8001f36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24
	state[4] 	^= t10;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3310      	adds	r3, #16
 8001f42:	6819      	ldr	r1, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3310      	adds	r3, #16
 8001f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f4a:	404a      	eors	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
	state[5] 	^= t7;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3314      	adds	r3, #20
 8001f52:	6819      	ldr	r1, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3314      	adds	r3, #20
 8001f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f5a:	404a      	eors	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]
	state[2] 	^= state[5];
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3308      	adds	r3, #8
 8001f62:	6819      	ldr	r1, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3314      	adds	r3, #20
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	404a      	eors	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
	state[5]	= t5 ^ state[2];
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3308      	adds	r3, #8
 8001f76:	6819      	ldr	r1, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3314      	adds	r3, #20
 8001f7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f7e:	404a      	eors	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]
	t5			= state[5] & t14;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3314      	adds	r3, #20
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
	t10			= state[5] & t12;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3314      	adds	r3, #20
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	4013      	ands	r3, r2
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
	t12			= t7 ^ state[2];
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3308      	adds	r3, #8
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fa2:	4053      	eors	r3, r2
 8001fa4:	61fb      	str	r3, [r7, #28]
	t4 			&= t12;
 8001fa6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	4013      	ands	r3, r2
 8001fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
	t2 			&= t12;
 8001fae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	647b      	str	r3, [r7, #68]	@ 0x44
	t3 			&= state[2]; 
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3308      	adds	r3, #8
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	643b      	str	r3, [r7, #64]	@ 0x40
	state[2] 	&= t6;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3308      	adds	r3, #8
 8001fc6:	6819      	ldr	r1, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3308      	adds	r3, #8
 8001fcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fce:	400a      	ands	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]
	state[2] 	^= t4;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3308      	adds	r3, #8
 8001fd6:	6819      	ldr	r1, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3308      	adds	r3, #8
 8001fdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001fde:	404a      	eors	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
	t13			= state[4] ^ state[2];
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3310      	adds	r3, #16
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3308      	adds	r3, #8
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4053      	eors	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
	state[3] 	&= t7;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	330c      	adds	r3, #12
 8001ff6:	6819      	ldr	r1, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	330c      	adds	r3, #12
 8001ffc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ffe:	400a      	ands	r2, r1
 8002000:	601a      	str	r2, [r3, #0]
	state[1] 	^= t7;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3304      	adds	r3, #4
 8002006:	6819      	ldr	r1, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3304      	adds	r3, #4
 800200c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800200e:	404a      	eors	r2, r1
 8002010:	601a      	str	r2, [r3, #0]
	state[5] 	^= state[1];
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3314      	adds	r3, #20
 8002016:	6819      	ldr	r1, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3304      	adds	r3, #4
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3314      	adds	r3, #20
 8002022:	404a      	eors	r2, r1
 8002024:	601a      	str	r2, [r3, #0]
	t6			= state[5] & t15;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3314      	adds	r3, #20
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	637b      	str	r3, [r7, #52]	@ 0x34
	state[4] 	^= t6; 
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3310      	adds	r3, #16
 8002036:	6819      	ldr	r1, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3310      	adds	r3, #16
 800203c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800203e:	404a      	eors	r2, r1
 8002040:	601a      	str	r2, [r3, #0]
	t0 			&= state[5];
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3314      	adds	r3, #20
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800204a:	4013      	ands	r3, r2
 800204c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	state[5]	= state[1] & t9; 
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3304      	adds	r3, #4
 8002052:	6819      	ldr	r1, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3314      	adds	r3, #20
 8002058:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800205a:	400a      	ands	r2, r1
 800205c:	601a      	str	r2, [r3, #0]
	state[5] 	^= state[4];
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3314      	adds	r3, #20
 8002062:	6819      	ldr	r1, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3310      	adds	r3, #16
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3314      	adds	r3, #20
 800206e:	404a      	eors	r2, r1
 8002070:	601a      	str	r2, [r3, #0]
	state[1] 	&= t8;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3304      	adds	r3, #4
 8002076:	6819      	ldr	r1, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3304      	adds	r3, #4
 800207c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800207e:	400a      	ands	r2, r1
 8002080:	601a      	str	r2, [r3, #0]
	t6			= state[1] ^ state[5];
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3304      	adds	r3, #4
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3314      	adds	r3, #20
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4053      	eors	r3, r2
 8002090:	637b      	str	r3, [r7, #52]	@ 0x34
	t0 			^= state[1];
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800209a:	4053      	eors	r3, r2
 800209c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	state[1]	= t3 ^ t0;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3304      	adds	r3, #4
 80020a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80020a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020a6:	404a      	eors	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]
	t15			= state[1] ^ state[3];
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3304      	adds	r3, #4
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	330c      	adds	r3, #12
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4053      	eors	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
	t2 			^= state[1];
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3304      	adds	r3, #4
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020c2:	4053      	eors	r3, r2
 80020c4:	647b      	str	r3, [r7, #68]	@ 0x44
	state[0]	= t2 ^ state[5];
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3314      	adds	r3, #20
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ce:	405a      	eors	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	601a      	str	r2, [r3, #0]
	state[3]	= t2 ^ t13;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	330c      	adds	r3, #12
 80020d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	404a      	eors	r2, r1
 80020de:	601a      	str	r2, [r3, #0]
	state[1]	= state[3] ^ state[5];
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	330c      	adds	r3, #12
 80020e4:	6819      	ldr	r1, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3314      	adds	r3, #20
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3304      	adds	r3, #4
 80020f0:	404a      	eors	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
	//state[1] 	^= 0xffffffff;
	t0 			^= state[6];
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3318      	adds	r3, #24
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020fc:	4053      	eors	r3, r2
 80020fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
	state[5]	= t7 & state[7];
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	331c      	adds	r3, #28
 8002104:	6819      	ldr	r1, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3314      	adds	r3, #20
 800210a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800210c:	400a      	ands	r2, r1
 800210e:	601a      	str	r2, [r3, #0]
	t14			= t4 ^ state[5];
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3314      	adds	r3, #20
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002118:	4053      	eors	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
	state[6]	= t1 ^ t14;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3318      	adds	r3, #24
 8002120:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	404a      	eors	r2, r1
 8002126:	601a      	str	r2, [r3, #0]
	state[6] 	^= t5; 
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3318      	adds	r3, #24
 800212c:	6819      	ldr	r1, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3318      	adds	r3, #24
 8002132:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002134:	404a      	eors	r2, r1
 8002136:	601a      	str	r2, [r3, #0]
	state[6] 	^= state[4];
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3318      	adds	r3, #24
 800213c:	6819      	ldr	r1, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3310      	adds	r3, #16
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3318      	adds	r3, #24
 8002148:	404a      	eors	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
	state[2]	= t17 ^ state[6];
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3318      	adds	r3, #24
 8002150:	6819      	ldr	r1, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3308      	adds	r3, #8
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	404a      	eors	r2, r1
 800215a:	601a      	str	r2, [r3, #0]
	state[5]	= t15 ^ state[2];
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3308      	adds	r3, #8
 8002160:	6819      	ldr	r1, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3314      	adds	r3, #20
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	404a      	eors	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
	state[2] 	^= t6;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3308      	adds	r3, #8
 8002170:	6819      	ldr	r1, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3308      	adds	r3, #8
 8002176:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002178:	404a      	eors	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3308      	adds	r3, #8
 8002180:	6819      	ldr	r1, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3308      	adds	r3, #8
 8002186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002188:	404a      	eors	r2, r1
 800218a:	601a      	str	r2, [r3, #0]
	//state[2] 	^= 0xffffffff;
	t14 		^= t11;
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	4053      	eors	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
	t0 			^= t14;
 8002194:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	4053      	eors	r3, r2
 800219a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	state[6] 	^= t0;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3318      	adds	r3, #24
 80021a0:	6819      	ldr	r1, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3318      	adds	r3, #24
 80021a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021a8:	404a      	eors	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
	//state[6] 	^= 0xffffffff;
	state[7]	= t1 ^ t0;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	331c      	adds	r3, #28
 80021b0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80021b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021b4:	404a      	eors	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]
	//state[7] 	^= 0xffffffff;
	state[4]	= t14 ^ state[3]; 
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	330c      	adds	r3, #12
 80021bc:	6819      	ldr	r1, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3310      	adds	r3, #16
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	404a      	eors	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]
}
 80021c8:	bf00      	nop
 80021ca:	3754      	adds	r7, #84	@ 0x54
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <double_shiftrows>:

/******************************************************************************
* Applies the ShiftRows transformation twice (i.e. SR^2) on the internal state.
******************************************************************************/
static void double_shiftrows(uint32_t* state) {
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
    uint32_t tmp;
	for(int i = 0; i < 8; i++)
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	e02a      	b.n	8002238 <double_shiftrows+0x64>
        SWAPMOVE(state[i], state[i], 0x0f000f00, 4);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	440b      	add	r3, r1
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	4053      	eors	r3, r2
 80021fa:	f003 230f 	and.w	r3, r3, #251662080	@ 0xf000f00
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	4413      	add	r3, r2
 8002208:	6819      	ldr	r1, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	404a      	eors	r2, r1
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	4413      	add	r3, r2
 8002220:	6819      	ldr	r1, [r3, #0]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	011a      	lsls	r2, r3, #4
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	4403      	add	r3, r0
 800222e:	404a      	eors	r2, r1
 8002230:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3301      	adds	r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b07      	cmp	r3, #7
 800223c:	ddd1      	ble.n	80021e2 <double_shiftrows+0xe>
}
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <mixcolumns_0>:
/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 0.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 0.
******************************************************************************/
static void mixcolumns_0(uint32_t* state) {
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	@ 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4;
	t3 = ROR(BYTE_ROR_6(state[0]),8);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	099b      	lsrs	r3, r3, #6
 800225a:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8002268:	4313      	orrs	r3, r2
 800226a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800226e:	61fb      	str	r3, [r7, #28]
	t0 = state[0] ^ t3;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	4053      	eors	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
	t1 = ROR(BYTE_ROR_6(state[7]),8);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	331c      	adds	r3, #28
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	099b      	lsrs	r3, r3, #6
 8002282:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	331c      	adds	r3, #28
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8002292:	4313      	orrs	r3, r2
 8002294:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002298:	617b      	str	r3, [r7, #20]
	t2 = state[7] ^ t1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	331c      	adds	r3, #28
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	4053      	eors	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
	state[7] = ROR(BYTE_ROR_4(t2),16) ^ t1 ^ t0;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80022b6:	4313      	orrs	r3, r2
 80022b8:	ea4f 4233 	mov.w	r2, r3, ror #16
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	ea82 0103 	eor.w	r1, r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	331c      	adds	r3, #28
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	404a      	eors	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[6]),8);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3318      	adds	r3, #24
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	099b      	lsrs	r3, r3, #6
 80022d4:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3318      	adds	r3, #24
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 80022e4:	4313      	orrs	r3, r2
 80022e6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80022ea:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[6];
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3318      	adds	r3, #24
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4053      	eors	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
	state[6] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	405a      	eors	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	ea82 0103 	eor.w	r1, r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002314:	4313      	orrs	r3, r2
 8002316:	ea4f 4233 	mov.w	r2, r3, ror #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3318      	adds	r3, #24
 800231e:	404a      	eors	r2, r1
 8002320:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[5]),8);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3314      	adds	r3, #20
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3314      	adds	r3, #20
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 800233a:	4313      	orrs	r3, r2
 800233c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002340:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[5];
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3314      	adds	r3, #20
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	4053      	eors	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
	state[5] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	ea82 0103 	eor.w	r1, r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002366:	4313      	orrs	r3, r2
 8002368:	ea4f 4233 	mov.w	r2, r3, ror #16
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3314      	adds	r3, #20
 8002370:	404a      	eors	r2, r1
 8002372:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[4]),8);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3310      	adds	r3, #16
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	099b      	lsrs	r3, r3, #6
 800237c:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3310      	adds	r3, #16
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 800238c:	4313      	orrs	r3, r2
 800238e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002392:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[4];
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3310      	adds	r3, #16
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	4053      	eors	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
	state[4] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	405a      	eors	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	ea82 0103 	eor.w	r1, r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80023bc:	4313      	orrs	r3, r2
 80023be:	ea4f 4233 	mov.w	r2, r3, ror #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3310      	adds	r3, #16
 80023c6:	404a      	eors	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[3]),8);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	330c      	adds	r3, #12
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	099b      	lsrs	r3, r3, #6
 80023d2:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	330c      	adds	r3, #12
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 80023e2:	4313      	orrs	r3, r2
 80023e4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80023e8:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[3];
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	330c      	adds	r3, #12
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	4053      	eors	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
	state[3] = t4 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	405a      	eors	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	ea82 0103 	eor.w	r1, r2, r3
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002412:	4313      	orrs	r3, r2
 8002414:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	330c      	adds	r3, #12
 800241c:	404a      	eors	r2, r1
 800241e:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[2]),8);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3308      	adds	r3, #8
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3308      	adds	r3, #8
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8002438:	4313      	orrs	r3, r2
 800243a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800243e:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[2];
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3308      	adds	r3, #8
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4053      	eors	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
	state[2] = t2 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	ea82 0103 	eor.w	r1, r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002464:	4313      	orrs	r3, r2
 8002466:	ea4f 4233 	mov.w	r2, r3, ror #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3308      	adds	r3, #8
 800246e:	404a      	eors	r2, r1
 8002470:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[1]),8);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3304      	adds	r3, #4
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	099b      	lsrs	r3, r3, #6
 800247a:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 800248a:	4313      	orrs	r3, r2
 800248c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002490:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[1];
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3304      	adds	r3, #4
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4053      	eors	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
	state[1] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	ea82 0103 	eor.w	r1, r2, r3
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80024b6:	4313      	orrs	r3, r2
 80024b8:	ea4f 4233 	mov.w	r2, r3, ror #16
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3304      	adds	r3, #4
 80024c0:	404a      	eors	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
	state[0] = t2 ^ t3 ^ ROR(BYTE_ROR_4(t0),16);
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	405a      	eors	r2, r3
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80024da:	430b      	orrs	r3, r1
 80024dc:	ea4f 4333 	mov.w	r3, r3, ror #16
 80024e0:	405a      	eors	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	601a      	str	r2, [r3, #0]
}
 80024e6:	bf00      	nop
 80024e8:	3724      	adds	r7, #36	@ 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <mixcolumns_1>:

/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for round i s.t. (i%4) == 1.
******************************************************************************/
static void mixcolumns_1(uint32_t* state) {
 80024f2:	b480      	push	{r7}
 80024f4:	b087      	sub	sp, #28
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2;
	t0 = state[0] ^ ROR(BYTE_ROR_4(state[0]),8);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002512:	430b      	orrs	r3, r1
 8002514:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002518:	4053      	eors	r3, r2
 800251a:	617b      	str	r3, [r7, #20]
	t1 = state[7] ^ ROR(BYTE_ROR_4(state[7]),8);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	331c      	adds	r3, #28
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	331c      	adds	r3, #28
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	331c      	adds	r3, #28
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 800253a:	430b      	orrs	r3, r1
 800253c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002540:	4053      	eors	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
	t2 = state[6];
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	60fb      	str	r3, [r7, #12]
	state[6] = t1 ^ t0;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3318      	adds	r3, #24
 800254e:	6939      	ldr	r1, [r7, #16]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	404a      	eors	r2, r1
 8002554:	601a      	str	r2, [r3, #0]
	state[7] ^= state[6] ^ ROR(t1,16);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	331c      	adds	r3, #28
 800255a:	6819      	ldr	r1, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3318      	adds	r3, #24
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002568:	405a      	eors	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	331c      	adds	r3, #28
 800256e:	404a      	eors	r2, r1
 8002570:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002582:	4313      	orrs	r3, r2
 8002584:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002588:	613b      	str	r3, [r7, #16]
	state[6] ^= t1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3318      	adds	r3, #24
 800258e:	6819      	ldr	r1, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3318      	adds	r3, #24
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	404a      	eors	r2, r1
 8002598:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4053      	eors	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
	state[6] ^= ROR(t1,16);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3318      	adds	r3, #24
 80025a6:	6819      	ldr	r1, [r3, #0]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	ea4f 4233 	mov.w	r2, r3, ror #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3318      	adds	r3, #24
 80025b2:	404a      	eors	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]
	t2 = state[5];
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	60fb      	str	r3, [r7, #12]
	state[5] = t1;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3314      	adds	r3, #20
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80025d4:	4313      	orrs	r3, r2
 80025d6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80025da:	613b      	str	r3, [r7, #16]
	state[5] ^= t1;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3314      	adds	r3, #20
 80025e0:	6819      	ldr	r1, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3314      	adds	r3, #20
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	404a      	eors	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4053      	eors	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
	state[5] ^= ROR(t1,16);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3314      	adds	r3, #20
 80025f8:	6819      	ldr	r1, [r3, #0]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3314      	adds	r3, #20
 8002604:	404a      	eors	r2, r1
 8002606:	601a      	str	r2, [r3, #0]
	t2 = state[4];
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	60fb      	str	r3, [r7, #12]
	state[4] = t1 ^ t0;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3310      	adds	r3, #16
 8002612:	6939      	ldr	r1, [r7, #16]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	404a      	eors	r2, r1
 8002618:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 800262a:	4313      	orrs	r3, r2
 800262c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002630:	613b      	str	r3, [r7, #16]
	state[4] ^= t1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3310      	adds	r3, #16
 8002636:	6819      	ldr	r1, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3310      	adds	r3, #16
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	404a      	eors	r2, r1
 8002640:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4053      	eors	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
	state[4] ^= ROR(t1,16);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3310      	adds	r3, #16
 800264e:	6819      	ldr	r1, [r3, #0]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3310      	adds	r3, #16
 800265a:	404a      	eors	r2, r1
 800265c:	601a      	str	r2, [r3, #0]
	t2 = state[3];
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	60fb      	str	r3, [r7, #12]
	state[3] = t1 ^ t0;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	330c      	adds	r3, #12
 8002668:	6939      	ldr	r1, [r7, #16]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	404a      	eors	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002680:	4313      	orrs	r3, r2
 8002682:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002686:	613b      	str	r3, [r7, #16]
	state[3] ^= t1;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	330c      	adds	r3, #12
 800268c:	6819      	ldr	r1, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	330c      	adds	r3, #12
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	404a      	eors	r2, r1
 8002696:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4053      	eors	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
	state[3] ^= ROR(t1,16);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	330c      	adds	r3, #12
 80026a4:	6819      	ldr	r1, [r3, #0]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	ea4f 4233 	mov.w	r2, r3, ror #16
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	330c      	adds	r3, #12
 80026b0:	404a      	eors	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]
	t2 = state[2];
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	60fb      	str	r3, [r7, #12]
	state[2] = t1;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3308      	adds	r3, #8
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80026d2:	4313      	orrs	r3, r2
 80026d4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80026d8:	613b      	str	r3, [r7, #16]
	state[2] ^= t1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3308      	adds	r3, #8
 80026de:	6819      	ldr	r1, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3308      	adds	r3, #8
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	404a      	eors	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4053      	eors	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
	state[2] ^= ROR(t1,16);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3308      	adds	r3, #8
 80026f6:	6819      	ldr	r1, [r3, #0]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	ea4f 4233 	mov.w	r2, r3, ror #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3308      	adds	r3, #8
 8002702:	404a      	eors	r2, r1
 8002704:	601a      	str	r2, [r3, #0]
	t2 = state[1];
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	60fb      	str	r3, [r7, #12]
	state[1] = t1;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3304      	adds	r3, #4
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002724:	4313      	orrs	r3, r2
 8002726:	ea4f 2333 	mov.w	r3, r3, ror #8
 800272a:	613b      	str	r3, [r7, #16]
	state[1] ^= t1;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3304      	adds	r3, #4
 8002730:	6819      	ldr	r1, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3304      	adds	r3, #4
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	404a      	eors	r2, r1
 800273a:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4053      	eors	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
	state[1] ^= ROR(t1,16);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3304      	adds	r3, #4
 8002748:	6819      	ldr	r1, [r3, #0]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3304      	adds	r3, #4
 8002754:	404a      	eors	r2, r1
 8002756:	601a      	str	r2, [r3, #0]
	t2 = state[0];
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]
	state[0] = t1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002774:	4313      	orrs	r3, r2
 8002776:	ea4f 2333 	mov.w	r3, r3, ror #8
 800277a:	613b      	str	r3, [r7, #16]
	state[0] ^= t1;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	405a      	eors	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4053      	eors	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
	state[0] ^= ROR(t1,16);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	ea4f 4333 	mov.w	r3, r3, ror #16
 800279a:	405a      	eors	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	601a      	str	r2, [r3, #0]
}
 80027a0:	bf00      	nop
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <mixcolumns_2>:

/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for rounds i s.t. (i%4) == 2.
******************************************************************************/
static void mixcolumns_2(uint32_t* state) {
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	@ 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4;
	t3 = ROR(BYTE_ROR_2(state[0]),8);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	089b      	lsrs	r3, r3, #2
 80027ba:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	019b      	lsls	r3, r3, #6
 80027c4:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 80027c8:	4313      	orrs	r3, r2
 80027ca:	ea4f 2333 	mov.w	r3, r3, ror #8
 80027ce:	61fb      	str	r3, [r7, #28]
	t0 = state[0] ^ t3;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	4053      	eors	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
	t1 = ROR(BYTE_ROR_2(state[7]),8);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	331c      	adds	r3, #28
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	331c      	adds	r3, #28
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	019b      	lsls	r3, r3, #6
 80027ee:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 80027f2:	4313      	orrs	r3, r2
 80027f4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80027f8:	617b      	str	r3, [r7, #20]
	t2 = state[7] ^ t1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	331c      	adds	r3, #28
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4053      	eors	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
	state[7] = ROR(BYTE_ROR_4(t2),16) ^ t1 ^ t0;
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002816:	4313      	orrs	r3, r2
 8002818:	ea4f 4233 	mov.w	r2, r3, ror #16
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	ea82 0103 	eor.w	r1, r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	331c      	adds	r3, #28
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	404a      	eors	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[6]),8);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3318      	adds	r3, #24
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3318      	adds	r3, #24
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	019b      	lsls	r3, r3, #6
 8002840:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8002844:	4313      	orrs	r3, r2
 8002846:	ea4f 2333 	mov.w	r3, r3, ror #8
 800284a:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[6];
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3318      	adds	r3, #24
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4053      	eors	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
	state[6] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	405a      	eors	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	ea82 0103 	eor.w	r1, r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002874:	4313      	orrs	r3, r2
 8002876:	ea4f 4233 	mov.w	r2, r3, ror #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3318      	adds	r3, #24
 800287e:	404a      	eors	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[5]),8);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3314      	adds	r3, #20
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3314      	adds	r3, #20
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	019b      	lsls	r3, r3, #6
 8002896:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 800289a:	4313      	orrs	r3, r2
 800289c:	ea4f 2333 	mov.w	r3, r3, ror #8
 80028a0:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[5];
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3314      	adds	r3, #20
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	4053      	eors	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
	state[5] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	ea82 0103 	eor.w	r1, r2, r3
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80028c6:	4313      	orrs	r3, r2
 80028c8:	ea4f 4233 	mov.w	r2, r3, ror #16
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3314      	adds	r3, #20
 80028d0:	404a      	eors	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[4]),8);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3310      	adds	r3, #16
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3310      	adds	r3, #16
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	019b      	lsls	r3, r3, #6
 80028e8:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 80028ec:	4313      	orrs	r3, r2
 80028ee:	ea4f 2333 	mov.w	r3, r3, ror #8
 80028f2:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[4];
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3310      	adds	r3, #16
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4053      	eors	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
	state[4] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	405a      	eors	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	ea82 0103 	eor.w	r1, r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 800291c:	4313      	orrs	r3, r2
 800291e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3310      	adds	r3, #16
 8002926:	404a      	eors	r2, r1
 8002928:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[3]),8);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	330c      	adds	r3, #12
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	330c      	adds	r3, #12
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	019b      	lsls	r3, r3, #6
 800293e:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8002942:	4313      	orrs	r3, r2
 8002944:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002948:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[3];
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	330c      	adds	r3, #12
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4053      	eors	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
	state[3] = t4 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	405a      	eors	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	ea82 0103 	eor.w	r1, r2, r3
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002972:	4313      	orrs	r3, r2
 8002974:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	330c      	adds	r3, #12
 800297c:	404a      	eors	r2, r1
 800297e:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[2]),8);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3308      	adds	r3, #8
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3308      	adds	r3, #8
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	019b      	lsls	r3, r3, #6
 8002994:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8002998:	4313      	orrs	r3, r2
 800299a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800299e:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[2];
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3308      	adds	r3, #8
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4053      	eors	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
	state[2] = t2 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	ea82 0103 	eor.w	r1, r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80029c4:	4313      	orrs	r3, r2
 80029c6:	ea4f 4233 	mov.w	r2, r3, ror #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3308      	adds	r3, #8
 80029ce:	404a      	eors	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[1]),8);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3304      	adds	r3, #4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	019b      	lsls	r3, r3, #6
 80029e6:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 80029ea:	4313      	orrs	r3, r2
 80029ec:	ea4f 2333 	mov.w	r3, r3, ror #8
 80029f0:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[1];
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3304      	adds	r3, #4
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	4053      	eors	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
	state[1] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	ea82 0103 	eor.w	r1, r2, r3
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002a16:	4313      	orrs	r3, r2
 8002a18:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	404a      	eors	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]
	state[0] = t2 ^ t3 ^ ROR(BYTE_ROR_4(t0),16);
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	405a      	eors	r2, r3
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002a40:	405a      	eors	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	601a      	str	r2, [r3, #0]
}
 8002a46:	bf00      	nop
 8002a48:	3724      	adds	r7, #36	@ 0x24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <mixcolumns_3>:
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 3.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 1.
* Based on Käsper-Schwabe, similar to https://github.com/Ko-/aes-armcortexm.
******************************************************************************/
static void mixcolumns_3(uint32_t* state) {
 8002a52:	b480      	push	{r7}
 8002a54:	b087      	sub	sp, #28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2;
	t0 = state[7] ^ ROR(state[7],8);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	331c      	adds	r3, #28
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	331c      	adds	r3, #28
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002a6a:	4053      	eors	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
	t2 = state[0] ^ ROR(state[0],8);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002a7a:	4053      	eors	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
	state[7] = t2 ^ ROR(state[7], 8) ^ ROR(t0, 16);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	331c      	adds	r3, #28
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	ea82 0103 	eor.w	r1, r2, r3
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	331c      	adds	r3, #28
 8002a98:	404a      	eors	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
	t1 = state[6] ^ ROR(state[6],8);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3318      	adds	r3, #24
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3318      	adds	r3, #24
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002aac:	4053      	eors	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
	state[6] = t0 ^ t2 ^ ROR(state[6], 8) ^ ROR(t1,16);
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	405a      	eors	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3318      	adds	r3, #24
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002ac0:	ea82 0103 	eor.w	r1, r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3318      	adds	r3, #24
 8002ace:	404a      	eors	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]
	t0 = state[5] ^ ROR(state[5],8);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3314      	adds	r3, #20
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3314      	adds	r3, #20
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002ae2:	4053      	eors	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]
	state[5] = t1 ^ ROR(state[5],8) ^ ROR(t0,16);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3314      	adds	r3, #20
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	ea82 0103 	eor.w	r1, r2, r3
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3314      	adds	r3, #20
 8002b00:	404a      	eors	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]
	t1 = state[4] ^ ROR(state[4],8);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3310      	adds	r3, #16
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3310      	adds	r3, #16
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002b14:	4053      	eors	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
	state[4] = t0 ^ t2 ^ ROR(state[4],8) ^ ROR(t1,16);
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	405a      	eors	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3310      	adds	r3, #16
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002b28:	ea82 0103 	eor.w	r1, r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3310      	adds	r3, #16
 8002b36:	404a      	eors	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]
	t0 = state[3] ^ ROR(state[3],8);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	330c      	adds	r3, #12
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002b4a:	4053      	eors	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
	state[3] = t1 ^ t2 ^ ROR(state[3],8) ^ ROR(t0,16);
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	405a      	eors	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	330c      	adds	r3, #12
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002b5e:	ea82 0103 	eor.w	r1, r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	330c      	adds	r3, #12
 8002b6c:	404a      	eors	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]
	t1 = state[2] ^ ROR(state[2],8);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3308      	adds	r3, #8
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3308      	adds	r3, #8
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002b80:	4053      	eors	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
	state[2] = t0 ^ ROR(state[2],8) ^ ROR(t1,16);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3308      	adds	r3, #8
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	ea82 0103 	eor.w	r1, r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	404a      	eors	r2, r1
 8002ba0:	601a      	str	r2, [r3, #0]
	t0 = state[1] ^ ROR(state[1],8);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3304      	adds	r3, #4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002bb2:	4053      	eors	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
	state[1] = t1 ^ ROR(state[1],8) ^ ROR(t0,16);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	ea82 0103 	eor.w	r1, r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	404a      	eors	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]
	state[0] = t0 ^ ROR(state[0],8) ^ ROR(t2,16);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	405a      	eors	r2, r3
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002be6:	405a      	eors	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	601a      	str	r2, [r3, #0]
}
 8002bec:	bf00      	nop
 8002bee:	371c      	adds	r7, #28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08c      	sub	sp, #48	@ 0x30
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 8002c06:	f107 0310 	add.w	r3, r7, #16
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fb98 	bl	8001344 <packing>
	ark(state, rkeys_ffs); 				// key whitening
 8002c14:	f107 0310 	add.w	r3, r7, #16
 8002c18:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe ffd6 	bl	8001bcc <ark>
	sbox(state); 						// 1st round
 8002c20:	f107 0310 	add.w	r3, r7, #16
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe fff6 	bl	8001c16 <sbox>
	mixcolumns_0(state); 				// 1st round
 8002c2a:	f107 0310 	add.w	r3, r7, #16
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fb0c 	bl	800224c <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 8002c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c36:	f103 0220 	add.w	r2, r3, #32
 8002c3a:	f107 0310 	add.w	r3, r7, #16
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe ffc3 	bl	8001bcc <ark>
	sbox(state); 						// 2nd round
 8002c46:	f107 0310 	add.w	r3, r7, #16
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe ffe3 	bl	8001c16 <sbox>
	mixcolumns_1(state); 				// 2nd round
 8002c50:	f107 0310 	add.w	r3, r7, #16
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fc4c 	bl	80024f2 <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c5c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002c60:	f107 0310 	add.w	r3, r7, #16
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe ffb0 	bl	8001bcc <ark>
	sbox(state); 						// 3rd round
 8002c6c:	f107 0310 	add.w	r3, r7, #16
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe ffd0 	bl	8001c16 <sbox>
	mixcolumns_2(state); 				// 3rd round
 8002c76:	f107 0310 	add.w	r3, r7, #16
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fd96 	bl	80027ac <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 8002c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c82:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8002c86:	f107 0310 	add.w	r3, r7, #16
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe ff9d 	bl	8001bcc <ark>
	sbox(state); 						// 4th round
 8002c92:	f107 0310 	add.w	r3, r7, #16
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe ffbd 	bl	8001c16 <sbox>
	mixcolumns_3(state); 				// 4th round
 8002c9c:	f107 0310 	add.w	r3, r7, #16
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fed6 	bl	8002a52 <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca8:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8002cac:	f107 0310 	add.w	r3, r7, #16
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe ff8a 	bl	8001bcc <ark>
	sbox(state); 						// 5th round
 8002cb8:	f107 0310 	add.w	r3, r7, #16
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe ffaa 	bl	8001c16 <sbox>
	mixcolumns_0(state); 				// 5th round
 8002cc2:	f107 0310 	add.w	r3, r7, #16
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fac0 	bl	800224c <mixcolumns_0>
	ark(state, rkeys_ffs + 40); 		// 5th round
 8002ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cce:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8002cd2:	f107 0310 	add.w	r3, r7, #16
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe ff77 	bl	8001bcc <ark>
	sbox(state);						// 6th round
 8002cde:	f107 0310 	add.w	r3, r7, #16
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe ff97 	bl	8001c16 <sbox>
	mixcolumns_1(state); 				// 6th round
 8002ce8:	f107 0310 	add.w	r3, r7, #16
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fc00 	bl	80024f2 <mixcolumns_1>
	ark(state, rkeys_ffs + 48); 		// 6th round
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf4:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8002cf8:	f107 0310 	add.w	r3, r7, #16
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe ff64 	bl	8001bcc <ark>
	sbox(state); 						// 7th round
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe ff84 	bl	8001c16 <sbox>
	mixcolumns_2(state); 				// 7th round
 8002d0e:	f107 0310 	add.w	r3, r7, #16
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fd4a 	bl	80027ac <mixcolumns_2>
	ark(state, rkeys_ffs + 56); 		// 7th round
 8002d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1a:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 8002d1e:	f107 0310 	add.w	r3, r7, #16
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe ff51 	bl	8001bcc <ark>
	sbox(state); 						// 8th round
 8002d2a:	f107 0310 	add.w	r3, r7, #16
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe ff71 	bl	8001c16 <sbox>
	mixcolumns_3(state); 				// 8th round
 8002d34:	f107 0310 	add.w	r3, r7, #16
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fe8a 	bl	8002a52 <mixcolumns_3>
	ark(state, rkeys_ffs + 64); 		// 8th round
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d40:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 8002d44:	f107 0310 	add.w	r3, r7, #16
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe ff3e 	bl	8001bcc <ark>
	sbox(state); 						// 9th round
 8002d50:	f107 0310 	add.w	r3, r7, #16
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe ff5e 	bl	8001c16 <sbox>
	mixcolumns_0(state); 				// 9th round
 8002d5a:	f107 0310 	add.w	r3, r7, #16
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fa74 	bl	800224c <mixcolumns_0>
	ark(state, rkeys_ffs + 72); 		// 9th round
 8002d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d66:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8002d6a:	f107 0310 	add.w	r3, r7, #16
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe ff2b 	bl	8001bcc <ark>
	sbox(state); 						// 10th round
 8002d76:	f107 0310 	add.w	r3, r7, #16
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe ff4b 	bl	8001c16 <sbox>
	double_shiftrows(state); 			// 10th round (resynchronization)
 8002d80:	f107 0310 	add.w	r3, r7, #16
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fa25 	bl	80021d4 <double_shiftrows>
	ark(state, rkeys_ffs + 80); 		// 10th round
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d8c:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 8002d90:	f107 0310 	add.w	r3, r7, #16
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe ff18 	bl	8001bcc <ark>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 8002d9c:	f107 0310 	add.w	r3, r7, #16
 8002da0:	461a      	mov	r2, r3
 8002da2:	68b9      	ldr	r1, [r7, #8]
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7fe fccc 	bl	8001742 <unpacking>
}
 8002daa:	bf00      	nop
 8002dac:	3730      	adds	r7, #48	@ 0x30
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <inv_shiftrows_1>:


/******************************************************************************
* Applies ShiftRows^(-1) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_1(uint32_t* rkey) {
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++) {
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	e052      	b.n	8002e68 <inv_shiftrows_1+0xb4>
		SWAPMOVE(rkey[i], rkey[i], 0x0c0f0300, 4);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	440b      	add	r3, r1
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	405a      	eors	r2, r3
 8002dda:	4b28      	ldr	r3, [pc, #160]	@ (8002e7c <inv_shiftrows_1+0xc8>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	4413      	add	r3, r2
 8002de8:	6819      	ldr	r1, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	404a      	eors	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	4413      	add	r3, r2
 8002e00:	6819      	ldr	r1, [r3, #0]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	011a      	lsls	r2, r3, #4
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4403      	add	r3, r0
 8002e0e:	404a      	eors	r2, r1
 8002e10:	601a      	str	r2, [r3, #0]
		SWAPMOVE(rkey[i], rkey[i], 0x33003300, 2);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	440b      	add	r3, r1
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	4053      	eors	r3, r2
 8002e2a:	f003 2333 	and.w	r3, r3, #855651072	@ 0x33003300
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	4413      	add	r3, r2
 8002e38:	6819      	ldr	r1, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	404a      	eors	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	6819      	ldr	r1, [r3, #0]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	009a      	lsls	r2, r3, #2
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	4403      	add	r3, r0
 8002e5e:	404a      	eors	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3301      	adds	r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b07      	cmp	r3, #7
 8002e6c:	dda9      	ble.n	8002dc2 <inv_shiftrows_1+0xe>
	}
}
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	0c0f0300 	.word	0x0c0f0300

08002e80 <inv_shiftrows_2>:
/******************************************************************************
* Applies ShiftRows^(-2) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_2(uint32_t* rkey) {
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++)
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e02a      	b.n	8002ee4 <inv_shiftrows_2+0x64>
		SWAPMOVE(rkey[i], rkey[i], 0x0f000f00, 4);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	440b      	add	r3, r1
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	4053      	eors	r3, r2
 8002ea6:	f003 230f 	and.w	r3, r3, #251662080	@ 0xf000f00
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	6819      	ldr	r1, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	404a      	eors	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4413      	add	r3, r2
 8002ecc:	6819      	ldr	r1, [r3, #0]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	011a      	lsls	r2, r3, #4
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	4403      	add	r3, r0
 8002eda:	404a      	eors	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b07      	cmp	r3, #7
 8002ee8:	ddd1      	ble.n	8002e8e <inv_shiftrows_2+0xe>
}
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <inv_shiftrows_3>:

/******************************************************************************
* Applies ShiftRows^(-3) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_3(uint32_t* rkey) {
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++) {
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	e052      	b.n	8002fac <inv_shiftrows_3+0xb4>
		SWAPMOVE(rkey[i], rkey[i], 0x030f0c00, 4);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	440b      	add	r3, r1
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	405a      	eors	r2, r3
 8002f1e:	4b28      	ldr	r3, [pc, #160]	@ (8002fc0 <inv_shiftrows_3+0xc8>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	6819      	ldr	r1, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	404a      	eors	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	6819      	ldr	r1, [r3, #0]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	011a      	lsls	r2, r3, #4
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	4403      	add	r3, r0
 8002f52:	404a      	eors	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
		SWAPMOVE(rkey[i], rkey[i], 0x33003300, 2);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	440b      	add	r3, r1
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	4053      	eors	r3, r2
 8002f6e:	f003 2333 	and.w	r3, r3, #855651072	@ 0x33003300
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	6819      	ldr	r1, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	404a      	eors	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	4413      	add	r3, r2
 8002f94:	6819      	ldr	r1, [r3, #0]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	009a      	lsls	r2, r3, #2
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	4403      	add	r3, r0
 8002fa2:	404a      	eors	r2, r1
 8002fa4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b07      	cmp	r3, #7
 8002fb0:	dda9      	ble.n	8002f06 <inv_shiftrows_3+0xe>
	}
}
 8002fb2:	bf00      	nop
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	030f0c00 	.word	0x030f0c00

08002fc4 <xor_columns>:
* involved in the XOR computation (should be 8 and 16 for AES-128 and AES-256,
* respectively).
* The idx_ror parameter refers to the rotation value. When a Rotword is applied
* the value should be 2, 26 otherwise.
******************************************************************************/
static void xor_columns(uint32_t* rkeys, int idx_xor, int idx_ror) {
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
	rkeys[1] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	43d2      	mvns	r2, r2
 8002fdc:	601a      	str	r2, [r3, #0]
	rkeys[2] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3308      	adds	r3, #8
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	43d2      	mvns	r2, r2
 8002fea:	601a      	str	r2, [r3, #0]
	rkeys[6] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3318      	adds	r3, #24
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3318      	adds	r3, #24
 8002ff6:	43d2      	mvns	r2, r2
 8002ff8:	601a      	str	r2, [r3, #0]
	rkeys[7] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	331c      	adds	r3, #28
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	331c      	adds	r3, #28
 8003004:	43d2      	mvns	r2, r2
 8003006:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	e06a      	b.n	80030e4 <xor_columns+0x120>
		rkeys[i] = (rkeys[i-idx_xor] ^ ROR(rkeys[i], idx_ror))  & 0xc0c0c0c0;
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4413      	add	r3, r2
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	68f9      	ldr	r1, [r7, #12]
 8003022:	440b      	add	r3, r1
 8003024:	6819      	ldr	r1, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	fa61 f303 	ror.w	r3, r1, r3
 800302c:	405a      	eors	r2, r3
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	68f9      	ldr	r1, [r7, #12]
 8003034:	440b      	add	r3, r1
 8003036:	f002 32c0 	and.w	r2, r2, #3233857728	@ 0xc0c0c0c0
 800303a:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x30303030);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	4403      	add	r3, r0
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	089b      	lsrs	r3, r3, #2
 8003060:	4053      	eors	r3, r2
 8003062:	f003 3230 	and.w	r2, r3, #808464432	@ 0x30303030
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	4403      	add	r3, r0
 800306e:	430a      	orrs	r2, r1
 8003070:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x0c0c0c0c);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4413      	add	r3, r2
 800307a:	6819      	ldr	r1, [r3, #0]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	4403      	add	r3, r0
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	4053      	eors	r3, r2
 8003098:	f003 320c 	and.w	r2, r3, #202116108	@ 0xc0c0c0c
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	4403      	add	r3, r0
 80030a4:	430a      	orrs	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x03030303);
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	6819      	ldr	r1, [r3, #0]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4413      	add	r3, r2
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	4403      	add	r3, r0
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	4053      	eors	r3, r2
 80030ce:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	4403      	add	r3, r0
 80030da:	430a      	orrs	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	3301      	adds	r3, #1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2b07      	cmp	r3, #7
 80030e8:	dd91      	ble.n	800300e <xor_columns+0x4a>
	}
}
 80030ea:	bf00      	nop
 80030ec:	bf00      	nop
 80030ee:	371c      	adds	r7, #28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <aes128_keyschedule_ffs>:
* Fully bitsliced AES-128 key schedule to match the fully-fixsliced (ffs)
* representation. Note that it is possible to pass two different keys as input
* parameters if one wants to encrypt 2 blocks with two different keys.
******************************************************************************/
void aes128_keyschedule_ffs(uint32_t* rkeys, const unsigned char* key0,
						const unsigned char* key1) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
	packing(rkeys, key0, key1); 	// packs the keys into the bitsliced state
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7fe f91b 	bl	8001344 <packing>
	memcpy(rkeys+8, rkeys, 32);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3320      	adds	r3, #32
 8003112:	2220      	movs	r2, #32
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	4618      	mov	r0, r3
 8003118:	f004 f8a6 	bl	8007268 <memcpy>
	sbox(rkeys+8);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3320      	adds	r3, #32
 8003120:	4618      	mov	r0, r3
 8003122:	f7fe fd78 	bl	8001c16 <sbox>
	rkeys[15] ^= 0x00000300; 		// 1st rconst
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	333c      	adds	r3, #60	@ 0x3c
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	333c      	adds	r3, #60	@ 0x3c
 8003130:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003134:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+8, 8, 2); 	// Rotword and XOR between the columns
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3320      	adds	r3, #32
 800313a:	2202      	movs	r2, #2
 800313c:	2108      	movs	r1, #8
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff ff40 	bl	8002fc4 <xor_columns>
	memcpy(rkeys+16, rkeys+8, 32);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3320      	adds	r3, #32
 800314e:	2220      	movs	r2, #32
 8003150:	4619      	mov	r1, r3
 8003152:	f004 f889 	bl	8007268 <memcpy>
	sbox(rkeys+16);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3340      	adds	r3, #64	@ 0x40
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe fd5b 	bl	8001c16 <sbox>
	rkeys[22] ^= 0x00000300;		// 2nd rconst
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3358      	adds	r3, #88	@ 0x58
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3358      	adds	r3, #88	@ 0x58
 800316a:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 800316e:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+16, 8, 2); 	// Rotword and XOR between the columns
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3340      	adds	r3, #64	@ 0x40
 8003174:	2202      	movs	r2, #2
 8003176:	2108      	movs	r1, #8
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff23 	bl	8002fc4 <xor_columns>
	inv_shiftrows_1(rkeys+8); 		// to match fixslicing
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3320      	adds	r3, #32
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fe16 	bl	8002db4 <inv_shiftrows_1>
	memcpy(rkeys+24, rkeys+16, 32);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3340      	adds	r3, #64	@ 0x40
 8003192:	2220      	movs	r2, #32
 8003194:	4619      	mov	r1, r3
 8003196:	f004 f867 	bl	8007268 <memcpy>
	sbox(rkeys+24);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3360      	adds	r3, #96	@ 0x60
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe fd39 	bl	8001c16 <sbox>
	rkeys[29] ^= 0x00000300;		// 3rd rconst
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3374      	adds	r3, #116	@ 0x74
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3374      	adds	r3, #116	@ 0x74
 80031ae:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80031b2:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+24, 8, 2); 	// Rotword and XOR between the columns
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3360      	adds	r3, #96	@ 0x60
 80031b8:	2202      	movs	r2, #2
 80031ba:	2108      	movs	r1, #8
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff01 	bl	8002fc4 <xor_columns>
	inv_shiftrows_2(rkeys+16); 		// to match fixslicing
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3340      	adds	r3, #64	@ 0x40
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fe5a 	bl	8002e80 <inv_shiftrows_2>
	memcpy(rkeys+32, rkeys+24, 32);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3360      	adds	r3, #96	@ 0x60
 80031d6:	2220      	movs	r2, #32
 80031d8:	4619      	mov	r1, r3
 80031da:	f004 f845 	bl	8007268 <memcpy>
	sbox(rkeys+32);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3380      	adds	r3, #128	@ 0x80
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fd17 	bl	8001c16 <sbox>
	rkeys[36] ^= 0x00000300; 		// 4th rconst
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3390      	adds	r3, #144	@ 0x90
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3390      	adds	r3, #144	@ 0x90
 80031f2:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80031f6:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+32, 8, 2); 	// Rotword and XOR between the columns
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3380      	adds	r3, #128	@ 0x80
 80031fc:	2202      	movs	r2, #2
 80031fe:	2108      	movs	r1, #8
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fedf 	bl	8002fc4 <xor_columns>
	inv_shiftrows_3(rkeys+24); 		// to match fixslicing
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3360      	adds	r3, #96	@ 0x60
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff fe74 	bl	8002ef8 <inv_shiftrows_3>
	memcpy(rkeys+40, rkeys+32, 32);	
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f103 00a0 	add.w	r0, r3, #160	@ 0xa0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3380      	adds	r3, #128	@ 0x80
 800321a:	2220      	movs	r2, #32
 800321c:	4619      	mov	r1, r3
 800321e:	f004 f823 	bl	8007268 <memcpy>
	sbox(rkeys+40);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	33a0      	adds	r3, #160	@ 0xa0
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fcf5 	bl	8001c16 <sbox>
	rkeys[43] ^= 0x00000300; 		// 5th rconst
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	33ac      	adds	r3, #172	@ 0xac
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	33ac      	adds	r3, #172	@ 0xac
 8003236:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 800323a:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+40, 8, 2); 	// Rotword and XOR between the columns
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	33a0      	adds	r3, #160	@ 0xa0
 8003240:	2202      	movs	r2, #2
 8003242:	2108      	movs	r1, #8
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff febd 	bl	8002fc4 <xor_columns>
	memcpy(rkeys+48, rkeys+40, 32);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	33a0      	adds	r3, #160	@ 0xa0
 8003254:	2220      	movs	r2, #32
 8003256:	4619      	mov	r1, r3
 8003258:	f004 f806 	bl	8007268 <memcpy>
	sbox(rkeys+48);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	33c0      	adds	r3, #192	@ 0xc0
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fcd8 	bl	8001c16 <sbox>
	rkeys[50] ^= 0x00000300;		// 6th rconst
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	33c8      	adds	r3, #200	@ 0xc8
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	33c8      	adds	r3, #200	@ 0xc8
 8003270:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003274:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+48, 8, 2); 	// Rotword and XOR between the columns
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	33c0      	adds	r3, #192	@ 0xc0
 800327a:	2202      	movs	r2, #2
 800327c:	2108      	movs	r1, #8
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fea0 	bl	8002fc4 <xor_columns>
	inv_shiftrows_1(rkeys+40); 		// to match fixslicing
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	33a0      	adds	r3, #160	@ 0xa0
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fd93 	bl	8002db4 <inv_shiftrows_1>
	memcpy(rkeys+56, rkeys+48, 32);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f103 00e0 	add.w	r0, r3, #224	@ 0xe0
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	33c0      	adds	r3, #192	@ 0xc0
 8003298:	2220      	movs	r2, #32
 800329a:	4619      	mov	r1, r3
 800329c:	f003 ffe4 	bl	8007268 <memcpy>
	sbox(rkeys+56);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	33e0      	adds	r3, #224	@ 0xe0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe fcb6 	bl	8001c16 <sbox>
	rkeys[57] ^= 0x00000300;		// 7th rconst
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	33e4      	adds	r3, #228	@ 0xe4
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	33e4      	adds	r3, #228	@ 0xe4
 80032b4:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80032b8:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+56, 8, 2); 	// Rotword and XOR between the columns
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	33e0      	adds	r3, #224	@ 0xe0
 80032be:	2202      	movs	r2, #2
 80032c0:	2108      	movs	r1, #8
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fe7e 	bl	8002fc4 <xor_columns>
	inv_shiftrows_2(rkeys+48); 		// to match fixslicing
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	33c0      	adds	r3, #192	@ 0xc0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fdd7 	bl	8002e80 <inv_shiftrows_2>
	memcpy(rkeys+64, rkeys+56, 32);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	33e0      	adds	r3, #224	@ 0xe0
 80032dc:	2220      	movs	r2, #32
 80032de:	4619      	mov	r1, r3
 80032e0:	f003 ffc2 	bl	8007268 <memcpy>
	sbox(rkeys+64);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fe fc93 	bl	8001c16 <sbox>
	rkeys[64] ^= 0x00000300;		// 8th rconst
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80032fe:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003302:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+64, 8, 2); 	// Rotword and XOR between the columns
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800330a:	2202      	movs	r2, #2
 800330c:	2108      	movs	r1, #8
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff fe58 	bl	8002fc4 <xor_columns>
	inv_shiftrows_3(rkeys+56); 		// to match fixslicing
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	33e0      	adds	r3, #224	@ 0xe0
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fded 	bl	8002ef8 <inv_shiftrows_3>
	memcpy(rkeys+72, rkeys+64, 32);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800332a:	2220      	movs	r2, #32
 800332c:	4619      	mov	r1, r3
 800332e:	f003 ff9b 	bl	8007268 <memcpy>
	sbox(rkeys+72);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8003338:	4618      	mov	r0, r3
 800333a:	f7fe fc6c 	bl	8001c16 <sbox>
	rkeys[79] ^= 0x00000300; 		// 9th rconst
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800334c:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003350:	601a      	str	r2, [r3, #0]
	rkeys[78] ^= 0x00000300; 		// 9th rconst
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003360:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003364:	601a      	str	r2, [r3, #0]
	rkeys[76] ^= 0x00000300; 		// 9th rconst
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003374:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8003378:	601a      	str	r2, [r3, #0]
	rkeys[75] ^= 0x00000300; 		// 9th rconst
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8003388:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 800338c:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys + 72, 8, 2); 	// Rotword and XOR between the columns
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8003394:	2202      	movs	r2, #2
 8003396:	2108      	movs	r1, #8
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fe13 	bl	8002fc4 <xor_columns>
	memcpy(rkeys+80, rkeys+72, 32);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f503 70a0 	add.w	r0, r3, #320	@ 0x140
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80033aa:	2220      	movs	r2, #32
 80033ac:	4619      	mov	r1, r3
 80033ae:	f003 ff5b 	bl	8007268 <memcpy>
	sbox(rkeys+80);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe fc2c 	bl	8001c16 <sbox>
	rkeys[86] ^= 0x00000300; 		// 10th rconst
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80033cc:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80033d0:	601a      	str	r2, [r3, #0]
	rkeys[85] ^= 0x00000300; 		// 10th rconst
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80033e0:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80033e4:	601a      	str	r2, [r3, #0]
	rkeys[83] ^= 0x00000300;		// 10th rconst
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80033f4:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80033f8:	601a      	str	r2, [r3, #0]
	rkeys[82] ^= 0x00000300; 		// 10th rconst
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003408:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 800340c:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+80, 8, 2); 	// Rotword and XOR between the columns
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003414:	2202      	movs	r2, #2
 8003416:	2108      	movs	r1, #8
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fdd3 	bl	8002fc4 <xor_columns>
	inv_shiftrows_1(rkeys+72);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fcc5 	bl	8002db4 <inv_shiftrows_1>
	for(int i = 1; i < 11; i++) {
 800342a:	2301      	movs	r3, #1
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	e036      	b.n	800349e <aes128_keyschedule_ffs+0x3a6>
		rkeys[i*8 + 1] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	015b      	lsls	r3, r3, #5
 8003434:	3304      	adds	r3, #4
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4413      	add	r3, r2
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	015b      	lsls	r3, r3, #5
 8003440:	3304      	adds	r3, #4
 8003442:	68f9      	ldr	r1, [r7, #12]
 8003444:	440b      	add	r3, r1
 8003446:	43d2      	mvns	r2, r2
 8003448:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 2] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	015b      	lsls	r3, r3, #5
 800344e:	3308      	adds	r3, #8
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4413      	add	r3, r2
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	015b      	lsls	r3, r3, #5
 800345a:	3308      	adds	r3, #8
 800345c:	68f9      	ldr	r1, [r7, #12]
 800345e:	440b      	add	r3, r1
 8003460:	43d2      	mvns	r2, r2
 8003462:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 6] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	015b      	lsls	r3, r3, #5
 8003468:	3318      	adds	r3, #24
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4413      	add	r3, r2
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	015b      	lsls	r3, r3, #5
 8003474:	3318      	adds	r3, #24
 8003476:	68f9      	ldr	r1, [r7, #12]
 8003478:	440b      	add	r3, r1
 800347a:	43d2      	mvns	r2, r2
 800347c:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 7] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	015b      	lsls	r3, r3, #5
 8003482:	331c      	adds	r3, #28
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	015b      	lsls	r3, r3, #5
 800348e:	331c      	adds	r3, #28
 8003490:	68f9      	ldr	r1, [r7, #12]
 8003492:	440b      	add	r3, r1
 8003494:	43d2      	mvns	r2, r2
 8003496:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 11; i++) {
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3301      	adds	r3, #1
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b0a      	cmp	r3, #10
 80034a2:	ddc5      	ble.n	8003430 <aes128_keyschedule_ffs+0x338>
	// 	printf("%x \n", rkeys[i]);
	// }
	


}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <serial_printf>:
 *      Author: cuauhtemoc
 */

#include "Serial.h"

void serial_printf(UART_HandleTypeDef *huart, uint8_t *pData, uint32_t Timeout){
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b086      	sub	sp, #24
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
	uint16_t Size = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	82fb      	strh	r3, [r7, #22]
	do{
		Size++;
 80034be:	8afb      	ldrh	r3, [r7, #22]
 80034c0:	3301      	adds	r3, #1
 80034c2:	82fb      	strh	r3, [r7, #22]
	}while(pData[Size]!='\0');
 80034c4:	8afb      	ldrh	r3, [r7, #22]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	4413      	add	r3, r2
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f6      	bne.n	80034be <serial_printf+0x10>
	HAL_UART_Transmit(huart, pData,Size, HAL_MAX_DELAY);
 80034d0:	8afa      	ldrh	r2, [r7, #22]
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f002 fef5 	bl	80062c8 <HAL_UART_Transmit>
}
 80034de:	bf00      	nop
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <DWT_Init>:
static unsigned char asociated_data[plaintext_size];
static unsigned int bytes[7] = {32, 64, 128, 192, 256, 320, 512};

char buffer [1024];
unsigned int performance[REP];
void DWT_Init(void) {
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0

    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80034ec:	4b0b      	ldr	r3, [pc, #44]	@ (800351c <DWT_Init+0x34>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4a0a      	ldr	r2, [pc, #40]	@ (800351c <DWT_Init+0x34>)
 80034f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034f6:	60d3      	str	r3, [r2, #12]
    DWT->LAR = 0xC5ACCE55;
 80034f8:	4b09      	ldr	r3, [pc, #36]	@ (8003520 <DWT_Init+0x38>)
 80034fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003524 <DWT_Init+0x3c>)
 80034fc:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
    DWT->CYCCNT = 0;
 8003500:	4b07      	ldr	r3, [pc, #28]	@ (8003520 <DWT_Init+0x38>)
 8003502:	2200      	movs	r2, #0
 8003504:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003506:	4b06      	ldr	r3, [pc, #24]	@ (8003520 <DWT_Init+0x38>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a05      	ldr	r2, [pc, #20]	@ (8003520 <DWT_Init+0x38>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	6013      	str	r3, [r2, #0]
}
 8003512:	bf00      	nop
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000edf0 	.word	0xe000edf0
 8003520:	e0001000 	.word	0xe0001000
 8003524:	c5acce55 	.word	0xc5acce55

08003528 <start_timer>:

void start_timer(void) {
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0;
 800352c:	4b03      	ldr	r3, [pc, #12]	@ (800353c <start_timer+0x14>)
 800352e:	2200      	movs	r2, #0
 8003530:	605a      	str	r2, [r3, #4]
}
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e0001000 	.word	0xe0001000

08003540 <stop_timer>:

uint32_t stop_timer(void) {
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 8003544:	4b03      	ldr	r3, [pc, #12]	@ (8003554 <stop_timer+0x14>)
 8003546:	685b      	ldr	r3, [r3, #4]
}
 8003548:	4618      	mov	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e0001000 	.word	0xe0001000

08003558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b090      	sub	sp, #64	@ 0x40
 800355c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800355e:	f000 fe00 	bl	8004162 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003562:	f000 f9eb 	bl	800393c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003566:	f000 fafd 	bl	8003b64 <MX_GPIO_Init>
  MX_ETH_Init();
 800356a:	f000 fa4f 	bl	8003a0c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800356e:	f000 fa9b 	bl	8003aa8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003572:	f000 fac9 	bl	8003b08 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */


  for (size_t i = 0; i < plaintext_size; i++)
 8003576:	2300      	movs	r3, #0
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
 800357a:	e010      	b.n	800359e <main+0x46>
  {
	  plaintext[i] =i;
 800357c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357e:	b2d9      	uxtb	r1, r3
 8003580:	4aa1      	ldr	r2, [pc, #644]	@ (8003808 <main+0x2b0>)
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	4413      	add	r3, r2
 8003586:	460a      	mov	r2, r1
 8003588:	701a      	strb	r2, [r3, #0]
	  asociated_data[i]=i;
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	b2d9      	uxtb	r1, r3
 800358e:	4a9f      	ldr	r2, [pc, #636]	@ (800380c <main+0x2b4>)
 8003590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003592:	4413      	add	r3, r2
 8003594:	460a      	mov	r2, r1
 8003596:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < plaintext_size; i++)
 8003598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359a:	3301      	adds	r3, #1
 800359c:	627b      	str	r3, [r7, #36]	@ 0x24
 800359e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a4:	d3ea      	bcc.n	800357c <main+0x24>
  }

  DWT_Init(); // Inicializar el contador de ciclos
 80035a6:	f7ff ff9f 	bl	80034e8 <DWT_Init>
  uint32_t cycles=0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	607b      	str	r3, [r7, #4]
  uint32_t total_cycles=0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	623b      	str	r3, [r7, #32]

  int i=0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]



	  	  	i=0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
	  	  	cycles=0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	607b      	str	r3, [r7, #4]
	  	  	total_cycles=0;
 80035be:	2300      	movs	r3, #0
 80035c0:	623b      	str	r3, [r7, #32]
	  	  	sprintf(buffer,"\n PMAC-OCB3");
 80035c2:	4993      	ldr	r1, [pc, #588]	@ (8003810 <main+0x2b8>)
 80035c4:	4893      	ldr	r0, [pc, #588]	@ (8003814 <main+0x2bc>)
 80035c6:	f003 fdfb 	bl	80071c0 <siprintf>
	  	  		serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 80035ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035ce:	4991      	ldr	r1, [pc, #580]	@ (8003814 <main+0x2bc>)
 80035d0:	4891      	ldr	r0, [pc, #580]	@ (8003818 <main+0x2c0>)
 80035d2:	f7ff ff6c 	bl	80034ae <serial_printf>
	  	  		for (int j = 0; j < Number_test; j++) {
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	e032      	b.n	8003642 <main+0xea>
	  	  			for (i = 0; i < REP; i++) {
 80035dc:	2300      	movs	r3, #0
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	e01e      	b.n	8003620 <main+0xc8>
	  	  				start_timer(); // Iniciar el contador de ciclos
 80035e2:	f7ff ffa1 	bl	8003528 <start_timer>
	  	  				OCB3(plaintext, ciphertext, nonce, asociated_data, 0, 12, bytes[j], key1, tag);
 80035e6:	4a8d      	ldr	r2, [pc, #564]	@ (800381c <main+0x2c4>)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ee:	4a8c      	ldr	r2, [pc, #560]	@ (8003820 <main+0x2c8>)
 80035f0:	9204      	str	r2, [sp, #16]
 80035f2:	4a8c      	ldr	r2, [pc, #560]	@ (8003824 <main+0x2cc>)
 80035f4:	9203      	str	r2, [sp, #12]
 80035f6:	9302      	str	r3, [sp, #8]
 80035f8:	230c      	movs	r3, #12
 80035fa:	9301      	str	r3, [sp, #4]
 80035fc:	2300      	movs	r3, #0
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	4b82      	ldr	r3, [pc, #520]	@ (800380c <main+0x2b4>)
 8003602:	4a89      	ldr	r2, [pc, #548]	@ (8003828 <main+0x2d0>)
 8003604:	4989      	ldr	r1, [pc, #548]	@ (800382c <main+0x2d4>)
 8003606:	4880      	ldr	r0, [pc, #512]	@ (8003808 <main+0x2b0>)
 8003608:	f7fd f8f4 	bl	80007f4 <OCB3>

	  	  				cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 800360c:	f7ff ff98 	bl	8003540 <stop_timer>
 8003610:	6078      	str	r0, [r7, #4]
	  	  				total_cycles=cycles+total_cycles;
 8003612:	6a3a      	ldr	r2, [r7, #32]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	623b      	str	r3, [r7, #32]
	  	  			for (i = 0; i < REP; i++) {
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3301      	adds	r3, #1
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	2b63      	cmp	r3, #99	@ 0x63
 8003624:	dddd      	ble.n	80035e2 <main+0x8a>
	  	  			}
	  	  			performance[j] = total_cycles/REP;
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	4a81      	ldr	r2, [pc, #516]	@ (8003830 <main+0x2d8>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	095a      	lsrs	r2, r3, #5
 8003630:	4980      	ldr	r1, [pc, #512]	@ (8003834 <main+0x2dc>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  	  			total_cycles=0;
 8003638:	2300      	movs	r3, #0
 800363a:	623b      	str	r3, [r7, #32]
	  	  		for (int j = 0; j < Number_test; j++) {
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	3301      	adds	r3, #1
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	2b06      	cmp	r3, #6
 8003646:	ddc9      	ble.n	80035dc <main+0x84>
	  	  		}
	  	  	  for (i = 0; i < Number_test; i++) {
 8003648:	2300      	movs	r3, #0
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	e020      	b.n	8003690 <main+0x138>
	  	  			sprintf(buffer,"\n bytes %u ", bytes[i]);
 800364e:	4a73      	ldr	r2, [pc, #460]	@ (800381c <main+0x2c4>)
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003656:	461a      	mov	r2, r3
 8003658:	4977      	ldr	r1, [pc, #476]	@ (8003838 <main+0x2e0>)
 800365a:	486e      	ldr	r0, [pc, #440]	@ (8003814 <main+0x2bc>)
 800365c:	f003 fdb0 	bl	80071c0 <siprintf>
	  	  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003660:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003664:	496b      	ldr	r1, [pc, #428]	@ (8003814 <main+0x2bc>)
 8003666:	486c      	ldr	r0, [pc, #432]	@ (8003818 <main+0x2c0>)
 8003668:	f7ff ff21 	bl	80034ae <serial_printf>
	  	  			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 800366c:	4a71      	ldr	r2, [pc, #452]	@ (8003834 <main+0x2dc>)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	4971      	ldr	r1, [pc, #452]	@ (800383c <main+0x2e4>)
 8003678:	4866      	ldr	r0, [pc, #408]	@ (8003814 <main+0x2bc>)
 800367a:	f003 fda1 	bl	80071c0 <siprintf>
	  	  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 800367e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003682:	4964      	ldr	r1, [pc, #400]	@ (8003814 <main+0x2bc>)
 8003684:	4864      	ldr	r0, [pc, #400]	@ (8003818 <main+0x2c0>)
 8003686:	f7ff ff12 	bl	80034ae <serial_printf>
	  	  	  for (i = 0; i < Number_test; i++) {
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3301      	adds	r3, #1
 800368e:	61fb      	str	r3, [r7, #28]
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	2b06      	cmp	r3, #6
 8003694:	dddb      	ble.n	800364e <main+0xf6>
	  	  	   }
		for (size_t i = 0; i < plaintext_size; i++)
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	e010      	b.n	80036be <main+0x166>
		{
		  plaintext[i] =i;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	b2d9      	uxtb	r1, r3
 80036a0:	4a59      	ldr	r2, [pc, #356]	@ (8003808 <main+0x2b0>)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	4413      	add	r3, r2
 80036a6:	460a      	mov	r2, r1
 80036a8:	701a      	strb	r2, [r3, #0]
		  asociated_data[i]=i;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	b2d9      	uxtb	r1, r3
 80036ae:	4a57      	ldr	r2, [pc, #348]	@ (800380c <main+0x2b4>)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	4413      	add	r3, r2
 80036b4:	460a      	mov	r2, r1
 80036b6:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < plaintext_size; i++)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	3301      	adds	r3, #1
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036c4:	d3ea      	bcc.n	800369c <main+0x144>
		}
		i=0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
	  	cycles=0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	607b      	str	r3, [r7, #4]
	  	total_cycles=0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	623b      	str	r3, [r7, #32]
	  	sprintf(buffer,"\n OCB3+PMAC ENC");
 80036d2:	495b      	ldr	r1, [pc, #364]	@ (8003840 <main+0x2e8>)
 80036d4:	484f      	ldr	r0, [pc, #316]	@ (8003814 <main+0x2bc>)
 80036d6:	f003 fd73 	bl	80071c0 <siprintf>
	  		serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 80036da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036de:	494d      	ldr	r1, [pc, #308]	@ (8003814 <main+0x2bc>)
 80036e0:	484d      	ldr	r0, [pc, #308]	@ (8003818 <main+0x2c0>)
 80036e2:	f7ff fee4 	bl	80034ae <serial_printf>
	  		for (int j = 0; j < Number_test; j++) {
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	e035      	b.n	8003758 <main+0x200>
	  			for (i = 0; i < REP; i++) {
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	e021      	b.n	8003736 <main+0x1de>
	  				start_timer(); // Iniciar el contador de ciclos
 80036f2:	f7ff ff19 	bl	8003528 <start_timer>
	  				OCB3(plaintext, ciphertext, nonce, asociated_data, bytes[j], 12, bytes[j], key1, tag);
 80036f6:	4a49      	ldr	r2, [pc, #292]	@ (800381c <main+0x2c4>)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fe:	4947      	ldr	r1, [pc, #284]	@ (800381c <main+0x2c4>)
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003706:	4946      	ldr	r1, [pc, #280]	@ (8003820 <main+0x2c8>)
 8003708:	9104      	str	r1, [sp, #16]
 800370a:	4946      	ldr	r1, [pc, #280]	@ (8003824 <main+0x2cc>)
 800370c:	9103      	str	r1, [sp, #12]
 800370e:	9202      	str	r2, [sp, #8]
 8003710:	220c      	movs	r2, #12
 8003712:	9201      	str	r2, [sp, #4]
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	4b3d      	ldr	r3, [pc, #244]	@ (800380c <main+0x2b4>)
 8003718:	4a43      	ldr	r2, [pc, #268]	@ (8003828 <main+0x2d0>)
 800371a:	4944      	ldr	r1, [pc, #272]	@ (800382c <main+0x2d4>)
 800371c:	483a      	ldr	r0, [pc, #232]	@ (8003808 <main+0x2b0>)
 800371e:	f7fd f869 	bl	80007f4 <OCB3>
	  				cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 8003722:	f7ff ff0d 	bl	8003540 <stop_timer>
 8003726:	6078      	str	r0, [r7, #4]
	  				total_cycles=cycles+total_cycles;
 8003728:	6a3a      	ldr	r2, [r7, #32]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	623b      	str	r3, [r7, #32]
	  			for (i = 0; i < REP; i++) {
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	3301      	adds	r3, #1
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	2b63      	cmp	r3, #99	@ 0x63
 800373a:	ddda      	ble.n	80036f2 <main+0x19a>
	  			}
	  			performance[j] = total_cycles/REP;
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	4a3c      	ldr	r2, [pc, #240]	@ (8003830 <main+0x2d8>)
 8003740:	fba2 2303 	umull	r2, r3, r2, r3
 8003744:	095a      	lsrs	r2, r3, #5
 8003746:	493b      	ldr	r1, [pc, #236]	@ (8003834 <main+0x2dc>)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  			total_cycles=0;
 800374e:	2300      	movs	r3, #0
 8003750:	623b      	str	r3, [r7, #32]
	  		for (int j = 0; j < Number_test; j++) {
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	3301      	adds	r3, #1
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	2b06      	cmp	r3, #6
 800375c:	ddc6      	ble.n	80036ec <main+0x194>
	  		}
	  	  for (i = 0; i < Number_test; i++) {
 800375e:	2300      	movs	r3, #0
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	e020      	b.n	80037a6 <main+0x24e>
	  			sprintf(buffer,"\n bytes %u ", bytes[i]);
 8003764:	4a2d      	ldr	r2, [pc, #180]	@ (800381c <main+0x2c4>)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376c:	461a      	mov	r2, r3
 800376e:	4932      	ldr	r1, [pc, #200]	@ (8003838 <main+0x2e0>)
 8003770:	4828      	ldr	r0, [pc, #160]	@ (8003814 <main+0x2bc>)
 8003772:	f003 fd25 	bl	80071c0 <siprintf>
	  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003776:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800377a:	4926      	ldr	r1, [pc, #152]	@ (8003814 <main+0x2bc>)
 800377c:	4826      	ldr	r0, [pc, #152]	@ (8003818 <main+0x2c0>)
 800377e:	f7ff fe96 	bl	80034ae <serial_printf>
	  			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 8003782:	4a2c      	ldr	r2, [pc, #176]	@ (8003834 <main+0x2dc>)
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378a:	69fa      	ldr	r2, [r7, #28]
 800378c:	492b      	ldr	r1, [pc, #172]	@ (800383c <main+0x2e4>)
 800378e:	4821      	ldr	r0, [pc, #132]	@ (8003814 <main+0x2bc>)
 8003790:	f003 fd16 	bl	80071c0 <siprintf>
	  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003794:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003798:	491e      	ldr	r1, [pc, #120]	@ (8003814 <main+0x2bc>)
 800379a:	481f      	ldr	r0, [pc, #124]	@ (8003818 <main+0x2c0>)
 800379c:	f7ff fe87 	bl	80034ae <serial_printf>
	  	  for (i = 0; i < Number_test; i++) {
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	3301      	adds	r3, #1
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	2b06      	cmp	r3, #6
 80037aa:	dddb      	ble.n	8003764 <main+0x20c>
	  	   }

	  	for (size_t i = 0; i < plaintext_size; i++)
 80037ac:	2300      	movs	r3, #0
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	e010      	b.n	80037d4 <main+0x27c>
	  			{
	  			  plaintext[i] =i;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	b2d9      	uxtb	r1, r3
 80037b6:	4a14      	ldr	r2, [pc, #80]	@ (8003808 <main+0x2b0>)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	460a      	mov	r2, r1
 80037be:	701a      	strb	r2, [r3, #0]
	  			  asociated_data[i]=i;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	b2d9      	uxtb	r1, r3
 80037c4:	4a11      	ldr	r2, [pc, #68]	@ (800380c <main+0x2b4>)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	460a      	mov	r2, r1
 80037cc:	701a      	strb	r2, [r3, #0]
	  	for (size_t i = 0; i < plaintext_size; i++)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	3301      	adds	r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037da:	d3ea      	bcc.n	80037b2 <main+0x25a>
	  			}
	  			i=0;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
	  		  	cycles=0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	607b      	str	r3, [r7, #4]
	  		  	total_cycles=0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	623b      	str	r3, [r7, #32]
	  		  	sprintf(buffer,"\n OCB3 ENC");
 80037e8:	4916      	ldr	r1, [pc, #88]	@ (8003844 <main+0x2ec>)
 80037ea:	480a      	ldr	r0, [pc, #40]	@ (8003814 <main+0x2bc>)
 80037ec:	f003 fce8 	bl	80071c0 <siprintf>
	  		  		serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 80037f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037f4:	4907      	ldr	r1, [pc, #28]	@ (8003814 <main+0x2bc>)
 80037f6:	4808      	ldr	r0, [pc, #32]	@ (8003818 <main+0x2c0>)
 80037f8:	f7ff fe59 	bl	80034ae <serial_printf>
	  		  		for (int j = 0; j < Number_test; j++) {
 80037fc:	2300      	movs	r3, #0
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	e052      	b.n	80038a8 <main+0x350>
	  		  			for (i = 0; i < REP; i++) {
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	e03e      	b.n	8003886 <main+0x32e>
 8003808:	2000097c 	.word	0x2000097c
 800380c:	2000297c 	.word	0x2000297c
 8003810:	08007b44 	.word	0x08007b44
 8003814:	2000397c 	.word	0x2000397c
 8003818:	200003dc 	.word	0x200003dc
 800381c:	20000020 	.word	0x20000020
 8003820:	2000096c 	.word	0x2000096c
 8003824:	20000000 	.word	0x20000000
 8003828:	20000010 	.word	0x20000010
 800382c:	2000197c 	.word	0x2000197c
 8003830:	51eb851f 	.word	0x51eb851f
 8003834:	20003d7c 	.word	0x20003d7c
 8003838:	08007b50 	.word	0x08007b50
 800383c:	08007b5c 	.word	0x08007b5c
 8003840:	08007b74 	.word	0x08007b74
 8003844:	08007b84 	.word	0x08007b84
	  		  				start_timer(); // Iniciar el contador de ciclos
 8003848:	f7ff fe6e 	bl	8003528 <start_timer>
	  		  				OCB3(plaintext, ciphertext, nonce, asociated_data, bytes[j], 12, 0, key1, tag);
 800384c:	4a2e      	ldr	r2, [pc, #184]	@ (8003908 <main+0x3b0>)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003854:	4a2d      	ldr	r2, [pc, #180]	@ (800390c <main+0x3b4>)
 8003856:	9204      	str	r2, [sp, #16]
 8003858:	4a2d      	ldr	r2, [pc, #180]	@ (8003910 <main+0x3b8>)
 800385a:	9203      	str	r2, [sp, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	9202      	str	r2, [sp, #8]
 8003860:	220c      	movs	r2, #12
 8003862:	9201      	str	r2, [sp, #4]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	4b2b      	ldr	r3, [pc, #172]	@ (8003914 <main+0x3bc>)
 8003868:	4a2b      	ldr	r2, [pc, #172]	@ (8003918 <main+0x3c0>)
 800386a:	492c      	ldr	r1, [pc, #176]	@ (800391c <main+0x3c4>)
 800386c:	482c      	ldr	r0, [pc, #176]	@ (8003920 <main+0x3c8>)
 800386e:	f7fc ffc1 	bl	80007f4 <OCB3>
	  		  				cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 8003872:	f7ff fe65 	bl	8003540 <stop_timer>
 8003876:	6078      	str	r0, [r7, #4]
	  		  				total_cycles=cycles+total_cycles;
 8003878:	6a3a      	ldr	r2, [r7, #32]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	623b      	str	r3, [r7, #32]
	  		  			for (i = 0; i < REP; i++) {
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	3301      	adds	r3, #1
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	2b63      	cmp	r3, #99	@ 0x63
 800388a:	dddd      	ble.n	8003848 <main+0x2f0>
	  		  			}
	  		  			performance[j] = total_cycles/REP;
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	4a25      	ldr	r2, [pc, #148]	@ (8003924 <main+0x3cc>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	095a      	lsrs	r2, r3, #5
 8003896:	4924      	ldr	r1, [pc, #144]	@ (8003928 <main+0x3d0>)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  		  			total_cycles=0;
 800389e:	2300      	movs	r3, #0
 80038a0:	623b      	str	r3, [r7, #32]
	  		  		for (int j = 0; j < Number_test; j++) {
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	3301      	adds	r3, #1
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b06      	cmp	r3, #6
 80038ac:	dda9      	ble.n	8003802 <main+0x2aa>
	  		  		}
	  		  	  for (i = 0; i < Number_test; i++) {
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	e020      	b.n	80038f6 <main+0x39e>
	  		  			sprintf(buffer,"\n bytes %u ", bytes[i]);
 80038b4:	4a14      	ldr	r2, [pc, #80]	@ (8003908 <main+0x3b0>)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038bc:	461a      	mov	r2, r3
 80038be:	491b      	ldr	r1, [pc, #108]	@ (800392c <main+0x3d4>)
 80038c0:	481b      	ldr	r0, [pc, #108]	@ (8003930 <main+0x3d8>)
 80038c2:	f003 fc7d 	bl	80071c0 <siprintf>
	  		  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 80038c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038ca:	4919      	ldr	r1, [pc, #100]	@ (8003930 <main+0x3d8>)
 80038cc:	4819      	ldr	r0, [pc, #100]	@ (8003934 <main+0x3dc>)
 80038ce:	f7ff fdee 	bl	80034ae <serial_printf>
	  		  			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 80038d2:	4a15      	ldr	r2, [pc, #84]	@ (8003928 <main+0x3d0>)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038da:	69fa      	ldr	r2, [r7, #28]
 80038dc:	4916      	ldr	r1, [pc, #88]	@ (8003938 <main+0x3e0>)
 80038de:	4814      	ldr	r0, [pc, #80]	@ (8003930 <main+0x3d8>)
 80038e0:	f003 fc6e 	bl	80071c0 <siprintf>
	  		  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 80038e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038e8:	4911      	ldr	r1, [pc, #68]	@ (8003930 <main+0x3d8>)
 80038ea:	4812      	ldr	r0, [pc, #72]	@ (8003934 <main+0x3dc>)
 80038ec:	f7ff fddf 	bl	80034ae <serial_printf>
	  		  	  for (i = 0; i < Number_test; i++) {
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	3301      	adds	r3, #1
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	2b06      	cmp	r3, #6
 80038fa:	dddb      	ble.n	80038b4 <main+0x35c>
 80038fc:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3728      	adds	r7, #40	@ 0x28
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000020 	.word	0x20000020
 800390c:	2000096c 	.word	0x2000096c
 8003910:	20000000 	.word	0x20000000
 8003914:	2000297c 	.word	0x2000297c
 8003918:	20000010 	.word	0x20000010
 800391c:	2000197c 	.word	0x2000197c
 8003920:	2000097c 	.word	0x2000097c
 8003924:	51eb851f 	.word	0x51eb851f
 8003928:	20003d7c 	.word	0x20003d7c
 800392c:	08007b50 	.word	0x08007b50
 8003930:	2000397c 	.word	0x2000397c
 8003934:	200003dc 	.word	0x200003dc
 8003938:	08007b5c 	.word	0x08007b5c

0800393c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b094      	sub	sp, #80	@ 0x50
 8003940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003942:	f107 0320 	add.w	r3, r7, #32
 8003946:	2230      	movs	r2, #48	@ 0x30
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f003 fc58 	bl	8007200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003950:	f107 030c 	add.w	r3, r7, #12
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003960:	f001 fb9a 	bl	8005098 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003964:	4b27      	ldr	r3, [pc, #156]	@ (8003a04 <SystemClock_Config+0xc8>)
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	4a26      	ldr	r2, [pc, #152]	@ (8003a04 <SystemClock_Config+0xc8>)
 800396a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800396e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003970:	4b24      	ldr	r3, [pc, #144]	@ (8003a04 <SystemClock_Config+0xc8>)
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800397c:	4b22      	ldr	r3, [pc, #136]	@ (8003a08 <SystemClock_Config+0xcc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003984:	4a20      	ldr	r2, [pc, #128]	@ (8003a08 <SystemClock_Config+0xcc>)
 8003986:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	4b1e      	ldr	r3, [pc, #120]	@ (8003a08 <SystemClock_Config+0xcc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003998:	2301      	movs	r3, #1
 800399a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800399c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80039a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039a2:	2302      	movs	r3, #2
 80039a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80039aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80039ac:	2304      	movs	r3, #4
 80039ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80039b0:	2348      	movs	r3, #72	@ 0x48
 80039b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039b4:	2302      	movs	r3, #2
 80039b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80039b8:	2303      	movs	r3, #3
 80039ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039bc:	f107 0320 	add.w	r3, r7, #32
 80039c0:	4618      	mov	r0, r3
 80039c2:	f001 fb79 	bl	80050b8 <HAL_RCC_OscConfig>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80039cc:	f000 f96c 	bl	8003ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039d0:	230f      	movs	r3, #15
 80039d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039d4:	2302      	movs	r3, #2
 80039d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80039e6:	f107 030c 	add.w	r3, r7, #12
 80039ea:	2102      	movs	r1, #2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f001 fe07 	bl	8005600 <HAL_RCC_ClockConfig>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80039f8:	f000 f956 	bl	8003ca8 <Error_Handler>
  }
}
 80039fc:	bf00      	nop
 80039fe:	3750      	adds	r7, #80	@ 0x50
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40007000 	.word	0x40007000

08003a0c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8003a10:	4b1f      	ldr	r3, [pc, #124]	@ (8003a90 <MX_ETH_Init+0x84>)
 8003a12:	4a20      	ldr	r2, [pc, #128]	@ (8003a94 <MX_ETH_Init+0x88>)
 8003a14:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003a16:	4b20      	ldr	r3, [pc, #128]	@ (8003a98 <MX_ETH_Init+0x8c>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8003a98 <MX_ETH_Init+0x8c>)
 8003a1e:	2280      	movs	r2, #128	@ 0x80
 8003a20:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8003a22:	4b1d      	ldr	r3, [pc, #116]	@ (8003a98 <MX_ETH_Init+0x8c>)
 8003a24:	22e1      	movs	r2, #225	@ 0xe1
 8003a26:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8003a28:	4b1b      	ldr	r3, [pc, #108]	@ (8003a98 <MX_ETH_Init+0x8c>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8003a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003a98 <MX_ETH_Init+0x8c>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8003a34:	4b18      	ldr	r3, [pc, #96]	@ (8003a98 <MX_ETH_Init+0x8c>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003a3a:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <MX_ETH_Init+0x84>)
 8003a3c:	4a16      	ldr	r2, [pc, #88]	@ (8003a98 <MX_ETH_Init+0x8c>)
 8003a3e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003a40:	4b13      	ldr	r3, [pc, #76]	@ (8003a90 <MX_ETH_Init+0x84>)
 8003a42:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a46:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003a48:	4b11      	ldr	r3, [pc, #68]	@ (8003a90 <MX_ETH_Init+0x84>)
 8003a4a:	4a14      	ldr	r2, [pc, #80]	@ (8003a9c <MX_ETH_Init+0x90>)
 8003a4c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003a4e:	4b10      	ldr	r3, [pc, #64]	@ (8003a90 <MX_ETH_Init+0x84>)
 8003a50:	4a13      	ldr	r2, [pc, #76]	@ (8003aa0 <MX_ETH_Init+0x94>)
 8003a52:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8003a54:	4b0e      	ldr	r3, [pc, #56]	@ (8003a90 <MX_ETH_Init+0x84>)
 8003a56:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8003a5a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8003a5c:	480c      	ldr	r0, [pc, #48]	@ (8003a90 <MX_ETH_Init+0x84>)
 8003a5e:	f000 fce7 	bl	8004430 <HAL_ETH_Init>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8003a68:	f000 f91e 	bl	8003ca8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003a6c:	2238      	movs	r2, #56	@ 0x38
 8003a6e:	2100      	movs	r1, #0
 8003a70:	480c      	ldr	r0, [pc, #48]	@ (8003aa4 <MX_ETH_Init+0x98>)
 8003a72:	f003 fbc5 	bl	8007200 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003a76:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa4 <MX_ETH_Init+0x98>)
 8003a78:	2221      	movs	r2, #33	@ 0x21
 8003a7a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003a7c:	4b09      	ldr	r3, [pc, #36]	@ (8003aa4 <MX_ETH_Init+0x98>)
 8003a7e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003a82:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003a84:	4b07      	ldr	r3, [pc, #28]	@ (8003aa4 <MX_ETH_Init+0x98>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	2000032c 	.word	0x2000032c
 8003a94:	40028000 	.word	0x40028000
 8003a98:	20003f0c 	.word	0x20003f0c
 8003a9c:	20000138 	.word	0x20000138
 8003aa0:	20000098 	.word	0x20000098
 8003aa4:	200002f4 	.word	0x200002f4

08003aa8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003aac:	4b14      	ldr	r3, [pc, #80]	@ (8003b00 <MX_USART3_UART_Init+0x58>)
 8003aae:	4a15      	ldr	r2, [pc, #84]	@ (8003b04 <MX_USART3_UART_Init+0x5c>)
 8003ab0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003ab2:	4b13      	ldr	r3, [pc, #76]	@ (8003b00 <MX_USART3_UART_Init+0x58>)
 8003ab4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ab8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003aba:	4b11      	ldr	r3, [pc, #68]	@ (8003b00 <MX_USART3_UART_Init+0x58>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b00 <MX_USART3_UART_Init+0x58>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b00 <MX_USART3_UART_Init+0x58>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003acc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b00 <MX_USART3_UART_Init+0x58>)
 8003ace:	220c      	movs	r2, #12
 8003ad0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b00 <MX_USART3_UART_Init+0x58>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ad8:	4b09      	ldr	r3, [pc, #36]	@ (8003b00 <MX_USART3_UART_Init+0x58>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ade:	4b08      	ldr	r3, [pc, #32]	@ (8003b00 <MX_USART3_UART_Init+0x58>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ae4:	4b06      	ldr	r3, [pc, #24]	@ (8003b00 <MX_USART3_UART_Init+0x58>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003aea:	4805      	ldr	r0, [pc, #20]	@ (8003b00 <MX_USART3_UART_Init+0x58>)
 8003aec:	f002 fb9e 	bl	800622c <HAL_UART_Init>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003af6:	f000 f8d7 	bl	8003ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	200003dc 	.word	0x200003dc
 8003b04:	40004800 	.word	0x40004800

08003b08 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003b0c:	4b14      	ldr	r3, [pc, #80]	@ (8003b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b0e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003b12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003b14:	4b12      	ldr	r3, [pc, #72]	@ (8003b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b16:	2206      	movs	r2, #6
 8003b18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003b1a:	4b11      	ldr	r3, [pc, #68]	@ (8003b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003b20:	4b0f      	ldr	r3, [pc, #60]	@ (8003b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003b26:	4b0e      	ldr	r3, [pc, #56]	@ (8003b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b28:	2202      	movs	r2, #2
 8003b2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003b32:	4b0b      	ldr	r3, [pc, #44]	@ (8003b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003b38:	4b09      	ldr	r3, [pc, #36]	@ (8003b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003b3e:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003b44:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003b4a:	4805      	ldr	r0, [pc, #20]	@ (8003b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b4c:	f001 f95b 	bl	8004e06 <HAL_PCD_Init>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003b56:	f000 f8a7 	bl	8003ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000464 	.word	0x20000464

08003b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08c      	sub	sp, #48	@ 0x30
 8003b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b6a:	f107 031c 	add.w	r3, r7, #28
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	605a      	str	r2, [r3, #4]
 8003b74:	609a      	str	r2, [r3, #8]
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b7a:	4b47      	ldr	r3, [pc, #284]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	4a46      	ldr	r2, [pc, #280]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003b80:	f043 0304 	orr.w	r3, r3, #4
 8003b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b86:	4b44      	ldr	r3, [pc, #272]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b92:	4b41      	ldr	r3, [pc, #260]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b96:	4a40      	ldr	r2, [pc, #256]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003baa:	4b3b      	ldr	r3, [pc, #236]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bae:	4a3a      	ldr	r2, [pc, #232]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bb6:	4b38      	ldr	r3, [pc, #224]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc2:	4b35      	ldr	r3, [pc, #212]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	4a34      	ldr	r2, [pc, #208]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003bc8:	f043 0302 	orr.w	r3, r3, #2
 8003bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bce:	4b32      	ldr	r3, [pc, #200]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bda:	4b2f      	ldr	r3, [pc, #188]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bde:	4a2e      	ldr	r2, [pc, #184]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003be0:	f043 0308 	orr.w	r3, r3, #8
 8003be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003be6:	4b2c      	ldr	r3, [pc, #176]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bf2:	4b29      	ldr	r3, [pc, #164]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf6:	4a28      	ldr	r2, [pc, #160]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bfe:	4b26      	ldr	r3, [pc, #152]	@ (8003c98 <MX_GPIO_Init+0x134>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c06:	607b      	str	r3, [r7, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8003c10:	4822      	ldr	r0, [pc, #136]	@ (8003c9c <MX_GPIO_Init+0x138>)
 8003c12:	f001 f8df 	bl	8004dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003c16:	2200      	movs	r2, #0
 8003c18:	2140      	movs	r1, #64	@ 0x40
 8003c1a:	4821      	ldr	r0, [pc, #132]	@ (8003ca0 <MX_GPIO_Init+0x13c>)
 8003c1c:	f001 f8da 	bl	8004dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003c20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c26:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003c30:	f107 031c 	add.w	r3, r7, #28
 8003c34:	4619      	mov	r1, r3
 8003c36:	481b      	ldr	r0, [pc, #108]	@ (8003ca4 <MX_GPIO_Init+0x140>)
 8003c38:	f000 ff20 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003c3c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8003c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c42:	2301      	movs	r3, #1
 8003c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c4e:	f107 031c 	add.w	r3, r7, #28
 8003c52:	4619      	mov	r1, r3
 8003c54:	4811      	ldr	r0, [pc, #68]	@ (8003c9c <MX_GPIO_Init+0x138>)
 8003c56:	f000 ff11 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003c5a:	2340      	movs	r3, #64	@ 0x40
 8003c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c66:	2300      	movs	r3, #0
 8003c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003c6a:	f107 031c 	add.w	r3, r7, #28
 8003c6e:	4619      	mov	r1, r3
 8003c70:	480b      	ldr	r0, [pc, #44]	@ (8003ca0 <MX_GPIO_Init+0x13c>)
 8003c72:	f000 ff03 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003c76:	2380      	movs	r3, #128	@ 0x80
 8003c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003c82:	f107 031c 	add.w	r3, r7, #28
 8003c86:	4619      	mov	r1, r3
 8003c88:	4805      	ldr	r0, [pc, #20]	@ (8003ca0 <MX_GPIO_Init+0x13c>)
 8003c8a:	f000 fef7 	bl	8004a7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003c8e:	bf00      	nop
 8003c90:	3730      	adds	r7, #48	@ 0x30
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40020400 	.word	0x40020400
 8003ca0:	40021800 	.word	0x40021800
 8003ca4:	40020800 	.word	0x40020800

08003ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cac:	b672      	cpsid	i
}
 8003cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cb0:	bf00      	nop
 8003cb2:	e7fd      	b.n	8003cb0 <Error_Handler+0x8>

08003cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cba:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf8 <HAL_MspInit+0x44>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8003cf8 <HAL_MspInit+0x44>)
 8003cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf8 <HAL_MspInit+0x44>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cce:	607b      	str	r3, [r7, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd2:	4b09      	ldr	r3, [pc, #36]	@ (8003cf8 <HAL_MspInit+0x44>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd6:	4a08      	ldr	r2, [pc, #32]	@ (8003cf8 <HAL_MspInit+0x44>)
 8003cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cde:	4b06      	ldr	r3, [pc, #24]	@ (8003cf8 <HAL_MspInit+0x44>)
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800

08003cfc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08e      	sub	sp, #56	@ 0x38
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a4e      	ldr	r2, [pc, #312]	@ (8003e54 <HAL_ETH_MspInit+0x158>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	f040 8096 	bne.w	8003e4c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003d20:	4b4d      	ldr	r3, [pc, #308]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d24:	4a4c      	ldr	r2, [pc, #304]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d2c:	4b4a      	ldr	r3, [pc, #296]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d34:	623b      	str	r3, [r7, #32]
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	4b47      	ldr	r3, [pc, #284]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	4a46      	ldr	r2, [pc, #280]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d42:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d44:	4b44      	ldr	r3, [pc, #272]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4b41      	ldr	r3, [pc, #260]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d54:	4a40      	ldr	r2, [pc, #256]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d5c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d68:	4b3b      	ldr	r3, [pc, #236]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6c:	4a3a      	ldr	r2, [pc, #232]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d6e:	f043 0304 	orr.w	r3, r3, #4
 8003d72:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d74:	4b38      	ldr	r3, [pc, #224]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d80:	4b35      	ldr	r3, [pc, #212]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d84:	4a34      	ldr	r2, [pc, #208]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d8c:	4b32      	ldr	r3, [pc, #200]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d98:	4b2f      	ldr	r3, [pc, #188]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003d9e:	f043 0302 	orr.w	r3, r3, #2
 8003da2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003da4:	4b2c      	ldr	r3, [pc, #176]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003db0:	4b29      	ldr	r3, [pc, #164]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db4:	4a28      	ldr	r2, [pc, #160]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dbc:	4b26      	ldr	r3, [pc, #152]	@ (8003e58 <HAL_ETH_MspInit+0x15c>)
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003dc8:	2332      	movs	r3, #50	@ 0x32
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003dd8:	230b      	movs	r3, #11
 8003dda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003de0:	4619      	mov	r1, r3
 8003de2:	481e      	ldr	r0, [pc, #120]	@ (8003e5c <HAL_ETH_MspInit+0x160>)
 8003de4:	f000 fe4a 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003de8:	2386      	movs	r3, #134	@ 0x86
 8003dea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dec:	2302      	movs	r3, #2
 8003dee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df4:	2303      	movs	r3, #3
 8003df6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003df8:	230b      	movs	r3, #11
 8003dfa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e00:	4619      	mov	r1, r3
 8003e02:	4817      	ldr	r0, [pc, #92]	@ (8003e60 <HAL_ETH_MspInit+0x164>)
 8003e04:	f000 fe3a 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003e08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e16:	2303      	movs	r3, #3
 8003e18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e1a:	230b      	movs	r3, #11
 8003e1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e22:	4619      	mov	r1, r3
 8003e24:	480f      	ldr	r0, [pc, #60]	@ (8003e64 <HAL_ETH_MspInit+0x168>)
 8003e26:	f000 fe29 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003e2a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e30:	2302      	movs	r3, #2
 8003e32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e3c:	230b      	movs	r3, #11
 8003e3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e44:	4619      	mov	r1, r3
 8003e46:	4808      	ldr	r0, [pc, #32]	@ (8003e68 <HAL_ETH_MspInit+0x16c>)
 8003e48:	f000 fe18 	bl	8004a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003e4c:	bf00      	nop
 8003e4e:	3738      	adds	r7, #56	@ 0x38
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40028000 	.word	0x40028000
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40020800 	.word	0x40020800
 8003e60:	40020000 	.word	0x40020000
 8003e64:	40020400 	.word	0x40020400
 8003e68:	40021800 	.word	0x40021800

08003e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b0aa      	sub	sp, #168	@ 0xa8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e74:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e84:	f107 0310 	add.w	r3, r7, #16
 8003e88:	2284      	movs	r2, #132	@ 0x84
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f003 f9b7 	bl	8007200 <memset>
  if(huart->Instance==USART3)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a22      	ldr	r2, [pc, #136]	@ (8003f20 <HAL_UART_MspInit+0xb4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d13c      	bne.n	8003f16 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003e9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ea0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ea6:	f107 0310 	add.w	r3, r7, #16
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 fdce 	bl	8005a4c <HAL_RCCEx_PeriphCLKConfig>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003eb6:	f7ff fef7 	bl	8003ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003eba:	4b1a      	ldr	r3, [pc, #104]	@ (8003f24 <HAL_UART_MspInit+0xb8>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	4a19      	ldr	r2, [pc, #100]	@ (8003f24 <HAL_UART_MspInit+0xb8>)
 8003ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ec6:	4b17      	ldr	r3, [pc, #92]	@ (8003f24 <HAL_UART_MspInit+0xb8>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ed2:	4b14      	ldr	r3, [pc, #80]	@ (8003f24 <HAL_UART_MspInit+0xb8>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed6:	4a13      	ldr	r2, [pc, #76]	@ (8003f24 <HAL_UART_MspInit+0xb8>)
 8003ed8:	f043 0308 	orr.w	r3, r3, #8
 8003edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ede:	4b11      	ldr	r3, [pc, #68]	@ (8003f24 <HAL_UART_MspInit+0xb8>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003eea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003eee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efe:	2303      	movs	r3, #3
 8003f00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f04:	2307      	movs	r3, #7
 8003f06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f0a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4805      	ldr	r0, [pc, #20]	@ (8003f28 <HAL_UART_MspInit+0xbc>)
 8003f12:	f000 fdb3 	bl	8004a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f16:	bf00      	nop
 8003f18:	37a8      	adds	r7, #168	@ 0xa8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40004800 	.word	0x40004800
 8003f24:	40023800 	.word	0x40023800
 8003f28:	40020c00 	.word	0x40020c00

08003f2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b0ac      	sub	sp, #176	@ 0xb0
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f34:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	60da      	str	r2, [r3, #12]
 8003f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f44:	f107 0318 	add.w	r3, r7, #24
 8003f48:	2284      	movs	r2, #132	@ 0x84
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f003 f957 	bl	8007200 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f5a:	d159      	bne.n	8004010 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003f5c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f60:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f68:	f107 0318 	add.w	r3, r7, #24
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f001 fd6d 	bl	8005a4c <HAL_RCCEx_PeriphCLKConfig>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003f78:	f7ff fe96 	bl	8003ca8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7c:	4b26      	ldr	r3, [pc, #152]	@ (8004018 <HAL_PCD_MspInit+0xec>)
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f80:	4a25      	ldr	r2, [pc, #148]	@ (8004018 <HAL_PCD_MspInit+0xec>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f88:	4b23      	ldr	r3, [pc, #140]	@ (8004018 <HAL_PCD_MspInit+0xec>)
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003f94:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003f98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003fae:	230a      	movs	r3, #10
 8003fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4818      	ldr	r0, [pc, #96]	@ (800401c <HAL_PCD_MspInit+0xf0>)
 8003fbc:	f000 fd5e 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003fc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003fd4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4810      	ldr	r0, [pc, #64]	@ (800401c <HAL_PCD_MspInit+0xf0>)
 8003fdc:	f000 fd4e 	bl	8004a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <HAL_PCD_MspInit+0xec>)
 8003fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8004018 <HAL_PCD_MspInit+0xec>)
 8003fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fea:	6353      	str	r3, [r2, #52]	@ 0x34
 8003fec:	4b0a      	ldr	r3, [pc, #40]	@ (8004018 <HAL_PCD_MspInit+0xec>)
 8003fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4b07      	ldr	r3, [pc, #28]	@ (8004018 <HAL_PCD_MspInit+0xec>)
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffc:	4a06      	ldr	r2, [pc, #24]	@ (8004018 <HAL_PCD_MspInit+0xec>)
 8003ffe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004002:	6453      	str	r3, [r2, #68]	@ 0x44
 8004004:	4b04      	ldr	r3, [pc, #16]	@ (8004018 <HAL_PCD_MspInit+0xec>)
 8004006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004010:	bf00      	nop
 8004012:	37b0      	adds	r7, #176	@ 0xb0
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40023800 	.word	0x40023800
 800401c:	40020000 	.word	0x40020000

08004020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004024:	bf00      	nop
 8004026:	e7fd      	b.n	8004024 <NMI_Handler+0x4>

08004028 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800402c:	bf00      	nop
 800402e:	e7fd      	b.n	800402c <HardFault_Handler+0x4>

08004030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004034:	bf00      	nop
 8004036:	e7fd      	b.n	8004034 <MemManage_Handler+0x4>

08004038 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800403c:	bf00      	nop
 800403e:	e7fd      	b.n	800403c <BusFault_Handler+0x4>

08004040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004044:	bf00      	nop
 8004046:	e7fd      	b.n	8004044 <UsageFault_Handler+0x4>

08004048 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800404c:	bf00      	nop
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004056:	b480      	push	{r7}
 8004058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004068:	bf00      	nop
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004076:	f000 f8b1 	bl	80041dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004088:	4a14      	ldr	r2, [pc, #80]	@ (80040dc <_sbrk+0x5c>)
 800408a:	4b15      	ldr	r3, [pc, #84]	@ (80040e0 <_sbrk+0x60>)
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004094:	4b13      	ldr	r3, [pc, #76]	@ (80040e4 <_sbrk+0x64>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800409c:	4b11      	ldr	r3, [pc, #68]	@ (80040e4 <_sbrk+0x64>)
 800409e:	4a12      	ldr	r2, [pc, #72]	@ (80040e8 <_sbrk+0x68>)
 80040a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040a2:	4b10      	ldr	r3, [pc, #64]	@ (80040e4 <_sbrk+0x64>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4413      	add	r3, r2
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d207      	bcs.n	80040c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040b0:	f003 f8ae 	bl	8007210 <__errno>
 80040b4:	4603      	mov	r3, r0
 80040b6:	220c      	movs	r2, #12
 80040b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040be:	e009      	b.n	80040d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040c0:	4b08      	ldr	r3, [pc, #32]	@ (80040e4 <_sbrk+0x64>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040c6:	4b07      	ldr	r3, [pc, #28]	@ (80040e4 <_sbrk+0x64>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	4a05      	ldr	r2, [pc, #20]	@ (80040e4 <_sbrk+0x64>)
 80040d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040d2:	68fb      	ldr	r3, [r7, #12]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20050000 	.word	0x20050000
 80040e0:	00000400 	.word	0x00000400
 80040e4:	20003f14 	.word	0x20003f14
 80040e8:	20004068 	.word	0x20004068

080040ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040f0:	4b06      	ldr	r3, [pc, #24]	@ (800410c <SystemInit+0x20>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f6:	4a05      	ldr	r2, [pc, #20]	@ (800410c <SystemInit+0x20>)
 80040f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004110:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004148 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004114:	480d      	ldr	r0, [pc, #52]	@ (800414c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004116:	490e      	ldr	r1, [pc, #56]	@ (8004150 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004118:	4a0e      	ldr	r2, [pc, #56]	@ (8004154 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800411a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800411c:	e002      	b.n	8004124 <LoopCopyDataInit>

0800411e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800411e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004122:	3304      	adds	r3, #4

08004124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004128:	d3f9      	bcc.n	800411e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800412a:	4a0b      	ldr	r2, [pc, #44]	@ (8004158 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800412c:	4c0b      	ldr	r4, [pc, #44]	@ (800415c <LoopFillZerobss+0x26>)
  movs r3, #0
 800412e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004130:	e001      	b.n	8004136 <LoopFillZerobss>

08004132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004134:	3204      	adds	r2, #4

08004136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004138:	d3fb      	bcc.n	8004132 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800413a:	f7ff ffd7 	bl	80040ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800413e:	f003 f86d 	bl	800721c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004142:	f7ff fa09 	bl	8003558 <main>
  bx  lr    
 8004146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004148:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800414c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004150:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8004154:	08007c0c 	.word	0x08007c0c
  ldr r2, =_sbss
 8004158:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800415c:	20004064 	.word	0x20004064

08004160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004160:	e7fe      	b.n	8004160 <ADC_IRQHandler>

08004162 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004166:	2003      	movs	r0, #3
 8004168:	f000 f92e 	bl	80043c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800416c:	2000      	movs	r0, #0
 800416e:	f000 f805 	bl	800417c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004172:	f7ff fd9f 	bl	8003cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004184:	4b12      	ldr	r3, [pc, #72]	@ (80041d0 <HAL_InitTick+0x54>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	4b12      	ldr	r3, [pc, #72]	@ (80041d4 <HAL_InitTick+0x58>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	4619      	mov	r1, r3
 800418e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004192:	fbb3 f3f1 	udiv	r3, r3, r1
 8004196:	fbb2 f3f3 	udiv	r3, r2, r3
 800419a:	4618      	mov	r0, r3
 800419c:	f000 f93b 	bl	8004416 <HAL_SYSTICK_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e00e      	b.n	80041c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b0f      	cmp	r3, #15
 80041ae:	d80a      	bhi.n	80041c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041b0:	2200      	movs	r2, #0
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041b8:	f000 f911 	bl	80043de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041bc:	4a06      	ldr	r2, [pc, #24]	@ (80041d8 <HAL_InitTick+0x5c>)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e000      	b.n	80041c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	2000003c 	.word	0x2000003c
 80041d4:	20000044 	.word	0x20000044
 80041d8:	20000040 	.word	0x20000040

080041dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041e0:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <HAL_IncTick+0x20>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	4b06      	ldr	r3, [pc, #24]	@ (8004200 <HAL_IncTick+0x24>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4413      	add	r3, r2
 80041ec:	4a04      	ldr	r2, [pc, #16]	@ (8004200 <HAL_IncTick+0x24>)
 80041ee:	6013      	str	r3, [r2, #0]
}
 80041f0:	bf00      	nop
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000044 	.word	0x20000044
 8004200:	20003f18 	.word	0x20003f18

08004204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  return uwTick;
 8004208:	4b03      	ldr	r3, [pc, #12]	@ (8004218 <HAL_GetTick+0x14>)
 800420a:	681b      	ldr	r3, [r3, #0]
}
 800420c:	4618      	mov	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20003f18 	.word	0x20003f18

0800421c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004224:	f7ff ffee 	bl	8004204 <HAL_GetTick>
 8004228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004234:	d005      	beq.n	8004242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004236:	4b0a      	ldr	r3, [pc, #40]	@ (8004260 <HAL_Delay+0x44>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004242:	bf00      	nop
 8004244:	f7ff ffde 	bl	8004204 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	429a      	cmp	r2, r3
 8004252:	d8f7      	bhi.n	8004244 <HAL_Delay+0x28>
  {
  }
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000044 	.word	0x20000044

08004264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004274:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004280:	4013      	ands	r3, r2
 8004282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800428c:	4b06      	ldr	r3, [pc, #24]	@ (80042a8 <__NVIC_SetPriorityGrouping+0x44>)
 800428e:	4313      	orrs	r3, r2
 8004290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004292:	4a04      	ldr	r2, [pc, #16]	@ (80042a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	60d3      	str	r3, [r2, #12]
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	e000ed00 	.word	0xe000ed00
 80042a8:	05fa0000 	.word	0x05fa0000

080042ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042b0:	4b04      	ldr	r3, [pc, #16]	@ (80042c4 <__NVIC_GetPriorityGrouping+0x18>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	0a1b      	lsrs	r3, r3, #8
 80042b6:	f003 0307 	and.w	r3, r3, #7
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	6039      	str	r1, [r7, #0]
 80042d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	db0a      	blt.n	80042f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	490c      	ldr	r1, [pc, #48]	@ (8004314 <__NVIC_SetPriority+0x4c>)
 80042e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e6:	0112      	lsls	r2, r2, #4
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	440b      	add	r3, r1
 80042ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042f0:	e00a      	b.n	8004308 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4908      	ldr	r1, [pc, #32]	@ (8004318 <__NVIC_SetPriority+0x50>)
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	3b04      	subs	r3, #4
 8004300:	0112      	lsls	r2, r2, #4
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	440b      	add	r3, r1
 8004306:	761a      	strb	r2, [r3, #24]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	e000e100 	.word	0xe000e100
 8004318:	e000ed00 	.word	0xe000ed00

0800431c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800431c:	b480      	push	{r7}
 800431e:	b089      	sub	sp, #36	@ 0x24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f1c3 0307 	rsb	r3, r3, #7
 8004336:	2b04      	cmp	r3, #4
 8004338:	bf28      	it	cs
 800433a:	2304      	movcs	r3, #4
 800433c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3304      	adds	r3, #4
 8004342:	2b06      	cmp	r3, #6
 8004344:	d902      	bls.n	800434c <NVIC_EncodePriority+0x30>
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3b03      	subs	r3, #3
 800434a:	e000      	b.n	800434e <NVIC_EncodePriority+0x32>
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004350:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43da      	mvns	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	401a      	ands	r2, r3
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004364:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	fa01 f303 	lsl.w	r3, r1, r3
 800436e:	43d9      	mvns	r1, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004374:	4313      	orrs	r3, r2
         );
}
 8004376:	4618      	mov	r0, r3
 8004378:	3724      	adds	r7, #36	@ 0x24
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3b01      	subs	r3, #1
 8004390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004394:	d301      	bcc.n	800439a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004396:	2301      	movs	r3, #1
 8004398:	e00f      	b.n	80043ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800439a:	4a0a      	ldr	r2, [pc, #40]	@ (80043c4 <SysTick_Config+0x40>)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3b01      	subs	r3, #1
 80043a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043a2:	210f      	movs	r1, #15
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043a8:	f7ff ff8e 	bl	80042c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043ac:	4b05      	ldr	r3, [pc, #20]	@ (80043c4 <SysTick_Config+0x40>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043b2:	4b04      	ldr	r3, [pc, #16]	@ (80043c4 <SysTick_Config+0x40>)
 80043b4:	2207      	movs	r2, #7
 80043b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	e000e010 	.word	0xe000e010

080043c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff ff47 	bl	8004264 <__NVIC_SetPriorityGrouping>
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043de:	b580      	push	{r7, lr}
 80043e0:	b086      	sub	sp, #24
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	4603      	mov	r3, r0
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
 80043ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043f0:	f7ff ff5c 	bl	80042ac <__NVIC_GetPriorityGrouping>
 80043f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	6978      	ldr	r0, [r7, #20]
 80043fc:	f7ff ff8e 	bl	800431c <NVIC_EncodePriority>
 8004400:	4602      	mov	r2, r0
 8004402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ff5d 	bl	80042c8 <__NVIC_SetPriority>
}
 800440e:	bf00      	nop
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff ffb0 	bl	8004384 <SysTick_Config>
 8004424:	4603      	mov	r3, r0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e06a      	b.n	8004518 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2223      	movs	r2, #35	@ 0x23
 8004450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff fc51 	bl	8003cfc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445a:	4b31      	ldr	r3, [pc, #196]	@ (8004520 <HAL_ETH_Init+0xf0>)
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	4a30      	ldr	r2, [pc, #192]	@ (8004520 <HAL_ETH_Init+0xf0>)
 8004460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004464:	6453      	str	r3, [r2, #68]	@ 0x44
 8004466:	4b2e      	ldr	r3, [pc, #184]	@ (8004520 <HAL_ETH_Init+0xf0>)
 8004468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004472:	4b2c      	ldr	r3, [pc, #176]	@ (8004524 <HAL_ETH_Init+0xf4>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4a2b      	ldr	r2, [pc, #172]	@ (8004524 <HAL_ETH_Init+0xf4>)
 8004478:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800447c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800447e:	4b29      	ldr	r3, [pc, #164]	@ (8004524 <HAL_ETH_Init+0xf4>)
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	4927      	ldr	r1, [pc, #156]	@ (8004524 <HAL_ETH_Init+0xf4>)
 8004488:	4313      	orrs	r3, r2
 800448a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800448c:	4b25      	ldr	r3, [pc, #148]	@ (8004524 <HAL_ETH_Init+0xf4>)
 800448e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044a8:	f7ff feac 	bl	8004204 <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80044ae:	e011      	b.n	80044d4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80044b0:	f7ff fea8 	bl	8004204 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80044be:	d909      	bls.n	80044d4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2204      	movs	r2, #4
 80044c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	22e0      	movs	r2, #224	@ 0xe0
 80044cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e021      	b.n	8004518 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e4      	bne.n	80044b0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f958 	bl	800479c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f9ff 	bl	80048f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fa55 	bl	80049a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	461a      	mov	r2, r3
 80044fe:	2100      	movs	r1, #0
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f9bd 	bl	8004880 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2210      	movs	r2, #16
 8004512:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40023800 	.word	0x40023800
 8004524:	40013800 	.word	0x40013800

08004528 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4b51      	ldr	r3, [pc, #324]	@ (8004684 <ETH_SetMACConfig+0x15c>)
 800453e:	4013      	ands	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	7c1b      	ldrb	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d102      	bne.n	8004550 <ETH_SetMACConfig+0x28>
 800454a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800454e:	e000      	b.n	8004552 <ETH_SetMACConfig+0x2a>
 8004550:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	7c5b      	ldrb	r3, [r3, #17]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <ETH_SetMACConfig+0x38>
 800455a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800455e:	e000      	b.n	8004562 <ETH_SetMACConfig+0x3a>
 8004560:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004562:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004568:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	7fdb      	ldrb	r3, [r3, #31]
 800456e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004570:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004576:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	7f92      	ldrb	r2, [r2, #30]
 800457c:	2a00      	cmp	r2, #0
 800457e:	d102      	bne.n	8004586 <ETH_SetMACConfig+0x5e>
 8004580:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004584:	e000      	b.n	8004588 <ETH_SetMACConfig+0x60>
 8004586:	2200      	movs	r2, #0
                        macconf->Speed |
 8004588:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	7f1b      	ldrb	r3, [r3, #28]
 800458e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004590:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004596:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	791b      	ldrb	r3, [r3, #4]
 800459c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800459e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80045a6:	2a00      	cmp	r2, #0
 80045a8:	d102      	bne.n	80045b0 <ETH_SetMACConfig+0x88>
 80045aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045ae:	e000      	b.n	80045b2 <ETH_SetMACConfig+0x8a>
 80045b0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80045b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	7bdb      	ldrb	r3, [r3, #15]
 80045b8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80045ba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80045c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045c8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80045ca:	4313      	orrs	r3, r2
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80045e2:	2001      	movs	r0, #1
 80045e4:	f7ff fe1a 	bl	800421c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80045fe:	4013      	ands	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004606:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800460e:	2a00      	cmp	r2, #0
 8004610:	d101      	bne.n	8004616 <ETH_SetMACConfig+0xee>
 8004612:	2280      	movs	r2, #128	@ 0x80
 8004614:	e000      	b.n	8004618 <ETH_SetMACConfig+0xf0>
 8004616:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004618:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800461e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004626:	2a01      	cmp	r2, #1
 8004628:	d101      	bne.n	800462e <ETH_SetMACConfig+0x106>
 800462a:	2208      	movs	r2, #8
 800462c:	e000      	b.n	8004630 <ETH_SetMACConfig+0x108>
 800462e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004630:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004638:	2a01      	cmp	r2, #1
 800463a:	d101      	bne.n	8004640 <ETH_SetMACConfig+0x118>
 800463c:	2204      	movs	r2, #4
 800463e:	e000      	b.n	8004642 <ETH_SetMACConfig+0x11a>
 8004640:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004642:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800464a:	2a01      	cmp	r2, #1
 800464c:	d101      	bne.n	8004652 <ETH_SetMACConfig+0x12a>
 800464e:	2202      	movs	r2, #2
 8004650:	e000      	b.n	8004654 <ETH_SetMACConfig+0x12c>
 8004652:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004654:	4313      	orrs	r3, r2
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800466c:	2001      	movs	r0, #1
 800466e:	f7ff fdd5 	bl	800421c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	619a      	str	r2, [r3, #24]
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	ff20810f 	.word	0xff20810f

08004688 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4b3d      	ldr	r3, [pc, #244]	@ (8004798 <ETH_SetDMAConfig+0x110>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	7b1b      	ldrb	r3, [r3, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <ETH_SetDMAConfig+0x2c>
 80046ae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80046b2:	e000      	b.n	80046b6 <ETH_SetDMAConfig+0x2e>
 80046b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	7b5b      	ldrb	r3, [r3, #13]
 80046ba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80046bc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	7f52      	ldrb	r2, [r2, #29]
 80046c2:	2a00      	cmp	r2, #0
 80046c4:	d102      	bne.n	80046cc <ETH_SetDMAConfig+0x44>
 80046c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80046ca:	e000      	b.n	80046ce <ETH_SetDMAConfig+0x46>
 80046cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80046ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	7b9b      	ldrb	r3, [r3, #14]
 80046d4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80046d6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80046dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	7f1b      	ldrb	r3, [r3, #28]
 80046e2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80046e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	7f9b      	ldrb	r3, [r3, #30]
 80046ea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80046ec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80046f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046fa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80046fc:	4313      	orrs	r3, r2
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800470c:	461a      	mov	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800471e:	2001      	movs	r0, #1
 8004720:	f7ff fd7c 	bl	800421c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800472c:	461a      	mov	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	791b      	ldrb	r3, [r3, #4]
 8004736:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800473c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004742:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004748:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004750:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004752:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800475a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004760:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800476a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800476e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800477c:	2001      	movs	r0, #1
 800477e:	f7ff fd4d 	bl	800421c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800478a:	461a      	mov	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6013      	str	r3, [r2, #0]
}
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	f8de3f23 	.word	0xf8de3f23

0800479c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b0a6      	sub	sp, #152	@ 0x98
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80047b0:	2300      	movs	r3, #0
 80047b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80047b4:	2300      	movs	r3, #0
 80047b6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80047c0:	2300      	movs	r3, #0
 80047c2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80047c6:	2301      	movs	r3, #1
 80047c8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80047cc:	2300      	movs	r3, #0
 80047ce:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80047d8:	2300      	movs	r3, #0
 80047da:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80047dc:	2300      	movs	r3, #0
 80047de:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80047ec:	2300      	movs	r3, #0
 80047ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80047f2:	2300      	movs	r3, #0
 80047f4:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80047f8:	2300      	movs	r3, #0
 80047fa:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80047fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004802:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004804:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004808:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800480a:	2300      	movs	r3, #0
 800480c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004810:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff fe86 	bl	8004528 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800481c:	2301      	movs	r3, #1
 800481e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004820:	2301      	movs	r3, #1
 8004822:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004824:	2301      	movs	r3, #1
 8004826:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800482a:	2301      	movs	r3, #1
 800482c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800482e:	2300      	movs	r3, #0
 8004830:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004832:	2300      	movs	r3, #0
 8004834:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004838:	2300      	movs	r3, #0
 800483a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800483e:	2300      	movs	r3, #0
 8004840:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004842:	2301      	movs	r3, #1
 8004844:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004848:	2301      	movs	r3, #1
 800484a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800484c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004850:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004852:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004856:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004858:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800485c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800485e:	2301      	movs	r3, #1
 8004860:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004864:	2300      	movs	r3, #0
 8004866:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004868:	2300      	movs	r3, #0
 800486a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800486c:	f107 0308 	add.w	r3, r7, #8
 8004870:	4619      	mov	r1, r3
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ff08 	bl	8004688 <ETH_SetDMAConfig>
}
 8004878:	bf00      	nop
 800487a:	3798      	adds	r7, #152	@ 0x98
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3305      	adds	r3, #5
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	3204      	adds	r2, #4
 8004898:	7812      	ldrb	r2, [r2, #0]
 800489a:	4313      	orrs	r3, r2
 800489c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	4b11      	ldr	r3, [pc, #68]	@ (80048e8 <ETH_MACAddressConfig+0x68>)
 80048a2:	4413      	add	r3, r2
 80048a4:	461a      	mov	r2, r3
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3303      	adds	r3, #3
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	061a      	lsls	r2, r3, #24
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3302      	adds	r3, #2
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3301      	adds	r3, #1
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	4313      	orrs	r3, r2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	7812      	ldrb	r2, [r2, #0]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	4b06      	ldr	r3, [pc, #24]	@ (80048ec <ETH_MACAddressConfig+0x6c>)
 80048d2:	4413      	add	r3, r2
 80048d4:	461a      	mov	r2, r3
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	6013      	str	r3, [r2, #0]
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40028040 	.word	0x40028040
 80048ec:	40028044 	.word	0x40028044

080048f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	e03e      	b.n	800497c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68d9      	ldr	r1, [r3, #12]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	440b      	add	r3, r1
 800490e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2200      	movs	r2, #0
 800491a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2200      	movs	r2, #0
 8004920:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2200      	movs	r2, #0
 8004926:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	3206      	adds	r2, #6
 8004930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d80c      	bhi.n	8004960 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68d9      	ldr	r1, [r3, #12]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	440b      	add	r3, r1
 8004958:	461a      	mov	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	60da      	str	r2, [r3, #12]
 800495e:	e004      	b.n	800496a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	461a      	mov	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3301      	adds	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b03      	cmp	r3, #3
 8004980:	d9bd      	bls.n	80048fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004994:	611a      	str	r2, [r3, #16]
}
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	e046      	b.n	8004a3e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6919      	ldr	r1, [r3, #16]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	440b      	add	r3, r1
 80049c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2200      	movs	r2, #0
 80049cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2200      	movs	r2, #0
 80049d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2200      	movs	r2, #0
 80049d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2200      	movs	r2, #0
 80049de:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2200      	movs	r2, #0
 80049e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80049ec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80049f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004a02:	68b9      	ldr	r1, [r7, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	3212      	adds	r2, #18
 8004a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d80c      	bhi.n	8004a2e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6919      	ldr	r1, [r3, #16]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	440b      	add	r3, r1
 8004a26:	461a      	mov	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	60da      	str	r2, [r3, #12]
 8004a2c:	e004      	b.n	8004a38 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	461a      	mov	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d9b5      	bls.n	80049b0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a6e:	60da      	str	r2, [r3, #12]
}
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b089      	sub	sp, #36	@ 0x24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	e175      	b.n	8004d88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4013      	ands	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	f040 8164 	bne.w	8004d82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d005      	beq.n	8004ad2 <HAL_GPIO_Init+0x56>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d130      	bne.n	8004b34 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	2203      	movs	r2, #3
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b08:	2201      	movs	r2, #1
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4013      	ands	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	091b      	lsrs	r3, r3, #4
 8004b1e:	f003 0201 	and.w	r2, r3, #1
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d017      	beq.n	8004b70 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d123      	bne.n	8004bc4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	08da      	lsrs	r2, r3, #3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3208      	adds	r2, #8
 8004b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	220f      	movs	r2, #15
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	08da      	lsrs	r2, r3, #3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3208      	adds	r2, #8
 8004bbe:	69b9      	ldr	r1, [r7, #24]
 8004bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	2203      	movs	r2, #3
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f003 0203 	and.w	r2, r3, #3
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 80be 	beq.w	8004d82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c06:	4b66      	ldr	r3, [pc, #408]	@ (8004da0 <HAL_GPIO_Init+0x324>)
 8004c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0a:	4a65      	ldr	r2, [pc, #404]	@ (8004da0 <HAL_GPIO_Init+0x324>)
 8004c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c12:	4b63      	ldr	r3, [pc, #396]	@ (8004da0 <HAL_GPIO_Init+0x324>)
 8004c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004c1e:	4a61      	ldr	r2, [pc, #388]	@ (8004da4 <HAL_GPIO_Init+0x328>)
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	089b      	lsrs	r3, r3, #2
 8004c24:	3302      	adds	r3, #2
 8004c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	220f      	movs	r2, #15
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a58      	ldr	r2, [pc, #352]	@ (8004da8 <HAL_GPIO_Init+0x32c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d037      	beq.n	8004cba <HAL_GPIO_Init+0x23e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a57      	ldr	r2, [pc, #348]	@ (8004dac <HAL_GPIO_Init+0x330>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d031      	beq.n	8004cb6 <HAL_GPIO_Init+0x23a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a56      	ldr	r2, [pc, #344]	@ (8004db0 <HAL_GPIO_Init+0x334>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d02b      	beq.n	8004cb2 <HAL_GPIO_Init+0x236>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a55      	ldr	r2, [pc, #340]	@ (8004db4 <HAL_GPIO_Init+0x338>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d025      	beq.n	8004cae <HAL_GPIO_Init+0x232>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a54      	ldr	r2, [pc, #336]	@ (8004db8 <HAL_GPIO_Init+0x33c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d01f      	beq.n	8004caa <HAL_GPIO_Init+0x22e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a53      	ldr	r2, [pc, #332]	@ (8004dbc <HAL_GPIO_Init+0x340>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d019      	beq.n	8004ca6 <HAL_GPIO_Init+0x22a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a52      	ldr	r2, [pc, #328]	@ (8004dc0 <HAL_GPIO_Init+0x344>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <HAL_GPIO_Init+0x226>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a51      	ldr	r2, [pc, #324]	@ (8004dc4 <HAL_GPIO_Init+0x348>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00d      	beq.n	8004c9e <HAL_GPIO_Init+0x222>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a50      	ldr	r2, [pc, #320]	@ (8004dc8 <HAL_GPIO_Init+0x34c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <HAL_GPIO_Init+0x21e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8004dcc <HAL_GPIO_Init+0x350>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d101      	bne.n	8004c96 <HAL_GPIO_Init+0x21a>
 8004c92:	2309      	movs	r3, #9
 8004c94:	e012      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004c96:	230a      	movs	r3, #10
 8004c98:	e010      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	e00e      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004c9e:	2307      	movs	r3, #7
 8004ca0:	e00c      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004ca2:	2306      	movs	r3, #6
 8004ca4:	e00a      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004ca6:	2305      	movs	r3, #5
 8004ca8:	e008      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004caa:	2304      	movs	r3, #4
 8004cac:	e006      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e004      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e002      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_GPIO_Init+0x240>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	f002 0203 	and.w	r2, r2, #3
 8004cc2:	0092      	lsls	r2, r2, #2
 8004cc4:	4093      	lsls	r3, r2
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ccc:	4935      	ldr	r1, [pc, #212]	@ (8004da4 <HAL_GPIO_Init+0x328>)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	089b      	lsrs	r3, r3, #2
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cda:	4b3d      	ldr	r3, [pc, #244]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cfe:	4a34      	ldr	r2, [pc, #208]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d04:	4b32      	ldr	r3, [pc, #200]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d28:	4a29      	ldr	r2, [pc, #164]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d2e:	4b28      	ldr	r3, [pc, #160]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d52:	4a1f      	ldr	r2, [pc, #124]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d58:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d7c:	4a14      	ldr	r2, [pc, #80]	@ (8004dd0 <HAL_GPIO_Init+0x354>)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	2b0f      	cmp	r3, #15
 8004d8c:	f67f ae86 	bls.w	8004a9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	3724      	adds	r7, #36	@ 0x24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40013800 	.word	0x40013800
 8004da8:	40020000 	.word	0x40020000
 8004dac:	40020400 	.word	0x40020400
 8004db0:	40020800 	.word	0x40020800
 8004db4:	40020c00 	.word	0x40020c00
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40021400 	.word	0x40021400
 8004dc0:	40021800 	.word	0x40021800
 8004dc4:	40021c00 	.word	0x40021c00
 8004dc8:	40022000 	.word	0x40022000
 8004dcc:	40022400 	.word	0x40022400
 8004dd0:	40013c00 	.word	0x40013c00

08004dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	807b      	strh	r3, [r7, #2]
 8004de0:	4613      	mov	r3, r2
 8004de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004de4:	787b      	ldrb	r3, [r7, #1]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dea:	887a      	ldrh	r2, [r7, #2]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004df0:	e003      	b.n	8004dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004df2:	887b      	ldrh	r3, [r7, #2]
 8004df4:	041a      	lsls	r2, r3, #16
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	619a      	str	r2, [r3, #24]
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e08:	b08f      	sub	sp, #60	@ 0x3c
 8004e0a:	af0a      	add	r7, sp, #40	@ 0x28
 8004e0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e116      	b.n	8005046 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff f87a 	bl	8003f2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 ff16 	bl	8006c88 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	603b      	str	r3, [r7, #0]
 8004e62:	687e      	ldr	r6, [r7, #4]
 8004e64:	466d      	mov	r5, sp
 8004e66:	f106 0410 	add.w	r4, r6, #16
 8004e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e76:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e7a:	1d33      	adds	r3, r6, #4
 8004e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e7e:	6838      	ldr	r0, [r7, #0]
 8004e80:	f001 feaa 	bl	8006bd8 <USB_CoreInit>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e0d7      	b.n	8005046 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 ff04 	bl	8006caa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	73fb      	strb	r3, [r7, #15]
 8004ea6:	e04a      	b.n	8004f3e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ea8:	7bfa      	ldrb	r2, [r7, #15]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	333d      	adds	r3, #61	@ 0x3d
 8004eb8:	2201      	movs	r2, #1
 8004eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ebc:	7bfa      	ldrb	r2, [r7, #15]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	333c      	adds	r3, #60	@ 0x3c
 8004ecc:	7bfa      	ldrb	r2, [r7, #15]
 8004ece:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ed0:	7bfa      	ldrb	r2, [r7, #15]
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	b298      	uxth	r0, r3
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	3344      	adds	r3, #68	@ 0x44
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ee8:	7bfa      	ldrb	r2, [r7, #15]
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	3340      	adds	r3, #64	@ 0x40
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004efc:	7bfa      	ldrb	r2, [r7, #15]
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	3348      	adds	r3, #72	@ 0x48
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f10:	7bfa      	ldrb	r2, [r7, #15]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	334c      	adds	r3, #76	@ 0x4c
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f24:	7bfa      	ldrb	r2, [r7, #15]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	3354      	adds	r3, #84	@ 0x54
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
 8004f3e:	7bfa      	ldrb	r2, [r7, #15]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d3af      	bcc.n	8004ea8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f48:	2300      	movs	r3, #0
 8004f4a:	73fb      	strb	r3, [r7, #15]
 8004f4c:	e044      	b.n	8004fd8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f4e:	7bfa      	ldrb	r2, [r7, #15]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8004f60:	2200      	movs	r2, #0
 8004f62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f64:	7bfa      	ldrb	r2, [r7, #15]
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004f76:	7bfa      	ldrb	r2, [r7, #15]
 8004f78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f7a:	7bfa      	ldrb	r2, [r7, #15]
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f90:	7bfa      	ldrb	r2, [r7, #15]
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	4613      	mov	r3, r2
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	4413      	add	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fa6:	7bfa      	ldrb	r2, [r7, #15]
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	4613      	mov	r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fbc:	7bfa      	ldrb	r2, [r7, #15]
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
 8004fd8:	7bfa      	ldrb	r2, [r7, #15]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d3b5      	bcc.n	8004f4e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	687e      	ldr	r6, [r7, #4]
 8004fea:	466d      	mov	r5, sp
 8004fec:	f106 0410 	add.w	r4, r6, #16
 8004ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ff8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ffc:	e885 0003 	stmia.w	r5, {r0, r1}
 8005000:	1d33      	adds	r3, r6, #4
 8005002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005004:	6838      	ldr	r0, [r7, #0]
 8005006:	f001 fe9d 	bl	8006d44 <USB_DevInit>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e014      	b.n	8005046 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	2b01      	cmp	r3, #1
 8005032:	d102      	bne.n	800503a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f80b 	bl	8005050 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f002 f85b 	bl	80070fa <USB_DevDisconnect>

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005050 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800507e:	4b05      	ldr	r3, [pc, #20]	@ (8005094 <HAL_PCDEx_ActivateLPM+0x44>)
 8005080:	4313      	orrs	r3, r2
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	10000003 	.word	0x10000003

08005098 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800509c:	4b05      	ldr	r3, [pc, #20]	@ (80050b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a04      	ldr	r2, [pc, #16]	@ (80050b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050a6:	6013      	str	r3, [r2, #0]
}
 80050a8:	bf00      	nop
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40007000 	.word	0x40007000

080050b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80050c0:	2300      	movs	r3, #0
 80050c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e291      	b.n	80055f2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 8087 	beq.w	80051ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050dc:	4b96      	ldr	r3, [pc, #600]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 030c 	and.w	r3, r3, #12
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d00c      	beq.n	8005102 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050e8:	4b93      	ldr	r3, [pc, #588]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 030c 	and.w	r3, r3, #12
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d112      	bne.n	800511a <HAL_RCC_OscConfig+0x62>
 80050f4:	4b90      	ldr	r3, [pc, #576]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005100:	d10b      	bne.n	800511a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005102:	4b8d      	ldr	r3, [pc, #564]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d06c      	beq.n	80051e8 <HAL_RCC_OscConfig+0x130>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d168      	bne.n	80051e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e26b      	b.n	80055f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005122:	d106      	bne.n	8005132 <HAL_RCC_OscConfig+0x7a>
 8005124:	4b84      	ldr	r3, [pc, #528]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a83      	ldr	r2, [pc, #524]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 800512a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	e02e      	b.n	8005190 <HAL_RCC_OscConfig+0xd8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10c      	bne.n	8005154 <HAL_RCC_OscConfig+0x9c>
 800513a:	4b7f      	ldr	r3, [pc, #508]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a7e      	ldr	r2, [pc, #504]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005140:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	4b7c      	ldr	r3, [pc, #496]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a7b      	ldr	r2, [pc, #492]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 800514c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	e01d      	b.n	8005190 <HAL_RCC_OscConfig+0xd8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800515c:	d10c      	bne.n	8005178 <HAL_RCC_OscConfig+0xc0>
 800515e:	4b76      	ldr	r3, [pc, #472]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a75      	ldr	r2, [pc, #468]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	4b73      	ldr	r3, [pc, #460]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a72      	ldr	r2, [pc, #456]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	e00b      	b.n	8005190 <HAL_RCC_OscConfig+0xd8>
 8005178:	4b6f      	ldr	r3, [pc, #444]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a6e      	ldr	r2, [pc, #440]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 800517e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	4b6c      	ldr	r3, [pc, #432]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a6b      	ldr	r2, [pc, #428]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 800518a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800518e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d013      	beq.n	80051c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7ff f834 	bl	8004204 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a0:	f7ff f830 	bl	8004204 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b64      	cmp	r3, #100	@ 0x64
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e21f      	b.n	80055f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b2:	4b61      	ldr	r3, [pc, #388]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0xe8>
 80051be:	e014      	b.n	80051ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7ff f820 	bl	8004204 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c8:	f7ff f81c 	bl	8004204 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b64      	cmp	r3, #100	@ 0x64
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e20b      	b.n	80055f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051da:	4b57      	ldr	r3, [pc, #348]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x110>
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d069      	beq.n	80052ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051f6:	4b50      	ldr	r3, [pc, #320]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005202:	4b4d      	ldr	r3, [pc, #308]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
 800520a:	2b08      	cmp	r3, #8
 800520c:	d11c      	bne.n	8005248 <HAL_RCC_OscConfig+0x190>
 800520e:	4b4a      	ldr	r3, [pc, #296]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d116      	bne.n	8005248 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800521a:	4b47      	ldr	r3, [pc, #284]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d005      	beq.n	8005232 <HAL_RCC_OscConfig+0x17a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d001      	beq.n	8005232 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e1df      	b.n	80055f2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005232:	4b41      	ldr	r3, [pc, #260]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	493d      	ldr	r1, [pc, #244]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005242:	4313      	orrs	r3, r2
 8005244:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005246:	e040      	b.n	80052ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d023      	beq.n	8005298 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005250:	4b39      	ldr	r3, [pc, #228]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a38      	ldr	r2, [pc, #224]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525c:	f7fe ffd2 	bl	8004204 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005264:	f7fe ffce 	bl	8004204 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e1bd      	b.n	80055f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005276:	4b30      	ldr	r3, [pc, #192]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0f0      	beq.n	8005264 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005282:	4b2d      	ldr	r3, [pc, #180]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	4929      	ldr	r1, [pc, #164]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005292:	4313      	orrs	r3, r2
 8005294:	600b      	str	r3, [r1, #0]
 8005296:	e018      	b.n	80052ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005298:	4b27      	ldr	r3, [pc, #156]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a26      	ldr	r2, [pc, #152]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a4:	f7fe ffae 	bl	8004204 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052ac:	f7fe ffaa 	bl	8004204 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e199      	b.n	80055f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052be:	4b1e      	ldr	r3, [pc, #120]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f0      	bne.n	80052ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d038      	beq.n	8005348 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d019      	beq.n	8005312 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052de:	4b16      	ldr	r3, [pc, #88]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 80052e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e2:	4a15      	ldr	r2, [pc, #84]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ea:	f7fe ff8b 	bl	8004204 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052f2:	f7fe ff87 	bl	8004204 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e176      	b.n	80055f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005304:	4b0c      	ldr	r3, [pc, #48]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005306:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCC_OscConfig+0x23a>
 8005310:	e01a      	b.n	8005348 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005312:	4b09      	ldr	r3, [pc, #36]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005316:	4a08      	ldr	r2, [pc, #32]	@ (8005338 <HAL_RCC_OscConfig+0x280>)
 8005318:	f023 0301 	bic.w	r3, r3, #1
 800531c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531e:	f7fe ff71 	bl	8004204 <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005324:	e00a      	b.n	800533c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005326:	f7fe ff6d 	bl	8004204 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d903      	bls.n	800533c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e15c      	b.n	80055f2 <HAL_RCC_OscConfig+0x53a>
 8005338:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800533c:	4b91      	ldr	r3, [pc, #580]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 800533e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1ee      	bne.n	8005326 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 80a4 	beq.w	800549e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005356:	4b8b      	ldr	r3, [pc, #556]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10d      	bne.n	800537e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005362:	4b88      	ldr	r3, [pc, #544]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005366:	4a87      	ldr	r2, [pc, #540]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800536c:	6413      	str	r3, [r2, #64]	@ 0x40
 800536e:	4b85      	ldr	r3, [pc, #532]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005376:	60bb      	str	r3, [r7, #8]
 8005378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800537a:	2301      	movs	r3, #1
 800537c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800537e:	4b82      	ldr	r3, [pc, #520]	@ (8005588 <HAL_RCC_OscConfig+0x4d0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005386:	2b00      	cmp	r3, #0
 8005388:	d118      	bne.n	80053bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800538a:	4b7f      	ldr	r3, [pc, #508]	@ (8005588 <HAL_RCC_OscConfig+0x4d0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a7e      	ldr	r2, [pc, #504]	@ (8005588 <HAL_RCC_OscConfig+0x4d0>)
 8005390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005396:	f7fe ff35 	bl	8004204 <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800539e:	f7fe ff31 	bl	8004204 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b64      	cmp	r3, #100	@ 0x64
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e120      	b.n	80055f2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053b0:	4b75      	ldr	r3, [pc, #468]	@ (8005588 <HAL_RCC_OscConfig+0x4d0>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0f0      	beq.n	800539e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d106      	bne.n	80053d2 <HAL_RCC_OscConfig+0x31a>
 80053c4:	4b6f      	ldr	r3, [pc, #444]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c8:	4a6e      	ldr	r2, [pc, #440]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 80053ca:	f043 0301 	orr.w	r3, r3, #1
 80053ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80053d0:	e02d      	b.n	800542e <HAL_RCC_OscConfig+0x376>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10c      	bne.n	80053f4 <HAL_RCC_OscConfig+0x33c>
 80053da:	4b6a      	ldr	r3, [pc, #424]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053de:	4a69      	ldr	r2, [pc, #420]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 80053e0:	f023 0301 	bic.w	r3, r3, #1
 80053e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e6:	4b67      	ldr	r3, [pc, #412]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 80053e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ea:	4a66      	ldr	r2, [pc, #408]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 80053ec:	f023 0304 	bic.w	r3, r3, #4
 80053f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f2:	e01c      	b.n	800542e <HAL_RCC_OscConfig+0x376>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	2b05      	cmp	r3, #5
 80053fa:	d10c      	bne.n	8005416 <HAL_RCC_OscConfig+0x35e>
 80053fc:	4b61      	ldr	r3, [pc, #388]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 80053fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005400:	4a60      	ldr	r2, [pc, #384]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005402:	f043 0304 	orr.w	r3, r3, #4
 8005406:	6713      	str	r3, [r2, #112]	@ 0x70
 8005408:	4b5e      	ldr	r3, [pc, #376]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 800540a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540c:	4a5d      	ldr	r2, [pc, #372]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	6713      	str	r3, [r2, #112]	@ 0x70
 8005414:	e00b      	b.n	800542e <HAL_RCC_OscConfig+0x376>
 8005416:	4b5b      	ldr	r3, [pc, #364]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800541a:	4a5a      	ldr	r2, [pc, #360]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 800541c:	f023 0301 	bic.w	r3, r3, #1
 8005420:	6713      	str	r3, [r2, #112]	@ 0x70
 8005422:	4b58      	ldr	r3, [pc, #352]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005426:	4a57      	ldr	r2, [pc, #348]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005428:	f023 0304 	bic.w	r3, r3, #4
 800542c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d015      	beq.n	8005462 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005436:	f7fe fee5 	bl	8004204 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800543c:	e00a      	b.n	8005454 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543e:	f7fe fee1 	bl	8004204 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544c:	4293      	cmp	r3, r2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e0ce      	b.n	80055f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005454:	4b4b      	ldr	r3, [pc, #300]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0ee      	beq.n	800543e <HAL_RCC_OscConfig+0x386>
 8005460:	e014      	b.n	800548c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005462:	f7fe fecf 	bl	8004204 <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005468:	e00a      	b.n	8005480 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800546a:	f7fe fecb 	bl	8004204 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005478:	4293      	cmp	r3, r2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e0b8      	b.n	80055f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005480:	4b40      	ldr	r3, [pc, #256]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1ee      	bne.n	800546a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800548c:	7dfb      	ldrb	r3, [r7, #23]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d105      	bne.n	800549e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005492:	4b3c      	ldr	r3, [pc, #240]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	4a3b      	ldr	r2, [pc, #236]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800549c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 80a4 	beq.w	80055f0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054a8:	4b36      	ldr	r3, [pc, #216]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 030c 	and.w	r3, r3, #12
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d06b      	beq.n	800558c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d149      	bne.n	8005550 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054bc:	4b31      	ldr	r3, [pc, #196]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a30      	ldr	r2, [pc, #192]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 80054c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c8:	f7fe fe9c 	bl	8004204 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fe fe98 	bl	8004204 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e087      	b.n	80055f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e2:	4b28      	ldr	r3, [pc, #160]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fc:	019b      	lsls	r3, r3, #6
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005504:	085b      	lsrs	r3, r3, #1
 8005506:	3b01      	subs	r3, #1
 8005508:	041b      	lsls	r3, r3, #16
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005510:	061b      	lsls	r3, r3, #24
 8005512:	4313      	orrs	r3, r2
 8005514:	4a1b      	ldr	r2, [pc, #108]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005516:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800551a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800551c:	4b19      	ldr	r3, [pc, #100]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a18      	ldr	r2, [pc, #96]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005522:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005528:	f7fe fe6c 	bl	8004204 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005530:	f7fe fe68 	bl	8004204 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e057      	b.n	80055f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005542:	4b10      	ldr	r3, [pc, #64]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0f0      	beq.n	8005530 <HAL_RCC_OscConfig+0x478>
 800554e:	e04f      	b.n	80055f0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005550:	4b0c      	ldr	r3, [pc, #48]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a0b      	ldr	r2, [pc, #44]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005556:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800555a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555c:	f7fe fe52 	bl	8004204 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005564:	f7fe fe4e 	bl	8004204 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e03d      	b.n	80055f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005576:	4b03      	ldr	r3, [pc, #12]	@ (8005584 <HAL_RCC_OscConfig+0x4cc>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f0      	bne.n	8005564 <HAL_RCC_OscConfig+0x4ac>
 8005582:	e035      	b.n	80055f0 <HAL_RCC_OscConfig+0x538>
 8005584:	40023800 	.word	0x40023800
 8005588:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800558c:	4b1b      	ldr	r3, [pc, #108]	@ (80055fc <HAL_RCC_OscConfig+0x544>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d028      	beq.n	80055ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d121      	bne.n	80055ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d11a      	bne.n	80055ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80055bc:	4013      	ands	r3, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80055c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d111      	bne.n	80055ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	3b01      	subs	r3, #1
 80055d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055d8:	429a      	cmp	r2, r3
 80055da:	d107      	bne.n	80055ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d001      	beq.n	80055f0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800

08005600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0d0      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005618:	4b6a      	ldr	r3, [pc, #424]	@ (80057c4 <HAL_RCC_ClockConfig+0x1c4>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d910      	bls.n	8005648 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005626:	4b67      	ldr	r3, [pc, #412]	@ (80057c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f023 020f 	bic.w	r2, r3, #15
 800562e:	4965      	ldr	r1, [pc, #404]	@ (80057c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	4313      	orrs	r3, r2
 8005634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005636:	4b63      	ldr	r3, [pc, #396]	@ (80057c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d001      	beq.n	8005648 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e0b8      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d020      	beq.n	8005696 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d005      	beq.n	800566c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005660:	4b59      	ldr	r3, [pc, #356]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	4a58      	ldr	r2, [pc, #352]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005666:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800566a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005678:	4b53      	ldr	r3, [pc, #332]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	4a52      	ldr	r2, [pc, #328]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 800567e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005682:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005684:	4b50      	ldr	r3, [pc, #320]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	494d      	ldr	r1, [pc, #308]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005692:	4313      	orrs	r3, r2
 8005694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d040      	beq.n	8005724 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d107      	bne.n	80056ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056aa:	4b47      	ldr	r3, [pc, #284]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d115      	bne.n	80056e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e07f      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d107      	bne.n	80056d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056c2:	4b41      	ldr	r3, [pc, #260]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e073      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d2:	4b3d      	ldr	r3, [pc, #244]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e06b      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056e2:	4b39      	ldr	r3, [pc, #228]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f023 0203 	bic.w	r2, r3, #3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	4936      	ldr	r1, [pc, #216]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f4:	f7fe fd86 	bl	8004204 <HAL_GetTick>
 80056f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056fa:	e00a      	b.n	8005712 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056fc:	f7fe fd82 	bl	8004204 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800570a:	4293      	cmp	r3, r2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e053      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005712:	4b2d      	ldr	r3, [pc, #180]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 020c 	and.w	r2, r3, #12
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	429a      	cmp	r2, r3
 8005722:	d1eb      	bne.n	80056fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005724:	4b27      	ldr	r3, [pc, #156]	@ (80057c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d210      	bcs.n	8005754 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005732:	4b24      	ldr	r3, [pc, #144]	@ (80057c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f023 020f 	bic.w	r2, r3, #15
 800573a:	4922      	ldr	r1, [pc, #136]	@ (80057c4 <HAL_RCC_ClockConfig+0x1c4>)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	4313      	orrs	r3, r2
 8005740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005742:	4b20      	ldr	r3, [pc, #128]	@ (80057c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d001      	beq.n	8005754 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e032      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005760:	4b19      	ldr	r3, [pc, #100]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4916      	ldr	r1, [pc, #88]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 800576e:	4313      	orrs	r3, r2
 8005770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800577e:	4b12      	ldr	r3, [pc, #72]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	490e      	ldr	r1, [pc, #56]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 800578e:	4313      	orrs	r3, r2
 8005790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005792:	f000 f821 	bl	80057d8 <HAL_RCC_GetSysClockFreq>
 8005796:	4602      	mov	r2, r0
 8005798:	4b0b      	ldr	r3, [pc, #44]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	490a      	ldr	r1, [pc, #40]	@ (80057cc <HAL_RCC_ClockConfig+0x1cc>)
 80057a4:	5ccb      	ldrb	r3, [r1, r3]
 80057a6:	fa22 f303 	lsr.w	r3, r2, r3
 80057aa:	4a09      	ldr	r2, [pc, #36]	@ (80057d0 <HAL_RCC_ClockConfig+0x1d0>)
 80057ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057ae:	4b09      	ldr	r3, [pc, #36]	@ (80057d4 <HAL_RCC_ClockConfig+0x1d4>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe fce2 	bl	800417c <HAL_InitTick>

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40023c00 	.word	0x40023c00
 80057c8:	40023800 	.word	0x40023800
 80057cc:	08007bb0 	.word	0x08007bb0
 80057d0:	2000003c 	.word	0x2000003c
 80057d4:	20000040 	.word	0x20000040

080057d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057dc:	b094      	sub	sp, #80	@ 0x50
 80057de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80057e4:	2300      	movs	r3, #0
 80057e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057e8:	2300      	movs	r3, #0
 80057ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80057ec:	2300      	movs	r3, #0
 80057ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057f0:	4b79      	ldr	r3, [pc, #484]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 030c 	and.w	r3, r3, #12
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d00d      	beq.n	8005818 <HAL_RCC_GetSysClockFreq+0x40>
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	f200 80e1 	bhi.w	80059c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <HAL_RCC_GetSysClockFreq+0x34>
 8005806:	2b04      	cmp	r3, #4
 8005808:	d003      	beq.n	8005812 <HAL_RCC_GetSysClockFreq+0x3a>
 800580a:	e0db      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800580c:	4b73      	ldr	r3, [pc, #460]	@ (80059dc <HAL_RCC_GetSysClockFreq+0x204>)
 800580e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005810:	e0db      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005812:	4b73      	ldr	r3, [pc, #460]	@ (80059e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005814:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005816:	e0d8      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005818:	4b6f      	ldr	r3, [pc, #444]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005820:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005822:	4b6d      	ldr	r3, [pc, #436]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d063      	beq.n	80058f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800582e:	4b6a      	ldr	r3, [pc, #424]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	099b      	lsrs	r3, r3, #6
 8005834:	2200      	movs	r2, #0
 8005836:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005838:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800583a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005840:	633b      	str	r3, [r7, #48]	@ 0x30
 8005842:	2300      	movs	r3, #0
 8005844:	637b      	str	r3, [r7, #52]	@ 0x34
 8005846:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800584a:	4622      	mov	r2, r4
 800584c:	462b      	mov	r3, r5
 800584e:	f04f 0000 	mov.w	r0, #0
 8005852:	f04f 0100 	mov.w	r1, #0
 8005856:	0159      	lsls	r1, r3, #5
 8005858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800585c:	0150      	lsls	r0, r2, #5
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4621      	mov	r1, r4
 8005864:	1a51      	subs	r1, r2, r1
 8005866:	6139      	str	r1, [r7, #16]
 8005868:	4629      	mov	r1, r5
 800586a:	eb63 0301 	sbc.w	r3, r3, r1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800587c:	4659      	mov	r1, fp
 800587e:	018b      	lsls	r3, r1, #6
 8005880:	4651      	mov	r1, sl
 8005882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005886:	4651      	mov	r1, sl
 8005888:	018a      	lsls	r2, r1, #6
 800588a:	4651      	mov	r1, sl
 800588c:	ebb2 0801 	subs.w	r8, r2, r1
 8005890:	4659      	mov	r1, fp
 8005892:	eb63 0901 	sbc.w	r9, r3, r1
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058aa:	4690      	mov	r8, r2
 80058ac:	4699      	mov	r9, r3
 80058ae:	4623      	mov	r3, r4
 80058b0:	eb18 0303 	adds.w	r3, r8, r3
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	462b      	mov	r3, r5
 80058b8:	eb49 0303 	adc.w	r3, r9, r3
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	f04f 0200 	mov.w	r2, #0
 80058c2:	f04f 0300 	mov.w	r3, #0
 80058c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058ca:	4629      	mov	r1, r5
 80058cc:	024b      	lsls	r3, r1, #9
 80058ce:	4621      	mov	r1, r4
 80058d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058d4:	4621      	mov	r1, r4
 80058d6:	024a      	lsls	r2, r1, #9
 80058d8:	4610      	mov	r0, r2
 80058da:	4619      	mov	r1, r3
 80058dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058de:	2200      	movs	r2, #0
 80058e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058e8:	f7fa fce2 	bl	80002b0 <__aeabi_uldivmod>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4613      	mov	r3, r2
 80058f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058f4:	e058      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058f6:	4b38      	ldr	r3, [pc, #224]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	099b      	lsrs	r3, r3, #6
 80058fc:	2200      	movs	r2, #0
 80058fe:	4618      	mov	r0, r3
 8005900:	4611      	mov	r1, r2
 8005902:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005906:	623b      	str	r3, [r7, #32]
 8005908:	2300      	movs	r3, #0
 800590a:	627b      	str	r3, [r7, #36]	@ 0x24
 800590c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005910:	4642      	mov	r2, r8
 8005912:	464b      	mov	r3, r9
 8005914:	f04f 0000 	mov.w	r0, #0
 8005918:	f04f 0100 	mov.w	r1, #0
 800591c:	0159      	lsls	r1, r3, #5
 800591e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005922:	0150      	lsls	r0, r2, #5
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4641      	mov	r1, r8
 800592a:	ebb2 0a01 	subs.w	sl, r2, r1
 800592e:	4649      	mov	r1, r9
 8005930:	eb63 0b01 	sbc.w	fp, r3, r1
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005940:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005944:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005948:	ebb2 040a 	subs.w	r4, r2, sl
 800594c:	eb63 050b 	sbc.w	r5, r3, fp
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	00eb      	lsls	r3, r5, #3
 800595a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800595e:	00e2      	lsls	r2, r4, #3
 8005960:	4614      	mov	r4, r2
 8005962:	461d      	mov	r5, r3
 8005964:	4643      	mov	r3, r8
 8005966:	18e3      	adds	r3, r4, r3
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	464b      	mov	r3, r9
 800596c:	eb45 0303 	adc.w	r3, r5, r3
 8005970:	607b      	str	r3, [r7, #4]
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800597e:	4629      	mov	r1, r5
 8005980:	028b      	lsls	r3, r1, #10
 8005982:	4621      	mov	r1, r4
 8005984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005988:	4621      	mov	r1, r4
 800598a:	028a      	lsls	r2, r1, #10
 800598c:	4610      	mov	r0, r2
 800598e:	4619      	mov	r1, r3
 8005990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005992:	2200      	movs	r2, #0
 8005994:	61bb      	str	r3, [r7, #24]
 8005996:	61fa      	str	r2, [r7, #28]
 8005998:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800599c:	f7fa fc88 	bl	80002b0 <__aeabi_uldivmod>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4613      	mov	r3, r2
 80059a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80059a8:	4b0b      	ldr	r3, [pc, #44]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	0c1b      	lsrs	r3, r3, #16
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	3301      	adds	r3, #1
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80059b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059c2:	e002      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059c4:	4b05      	ldr	r3, [pc, #20]	@ (80059dc <HAL_RCC_GetSysClockFreq+0x204>)
 80059c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3750      	adds	r7, #80	@ 0x50
 80059d0:	46bd      	mov	sp, r7
 80059d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059d6:	bf00      	nop
 80059d8:	40023800 	.word	0x40023800
 80059dc:	00f42400 	.word	0x00f42400
 80059e0:	007a1200 	.word	0x007a1200

080059e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059e8:	4b03      	ldr	r3, [pc, #12]	@ (80059f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80059ea:	681b      	ldr	r3, [r3, #0]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	2000003c 	.word	0x2000003c

080059fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a00:	f7ff fff0 	bl	80059e4 <HAL_RCC_GetHCLKFreq>
 8005a04:	4602      	mov	r2, r0
 8005a06:	4b05      	ldr	r3, [pc, #20]	@ (8005a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	0a9b      	lsrs	r3, r3, #10
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	4903      	ldr	r1, [pc, #12]	@ (8005a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a12:	5ccb      	ldrb	r3, [r1, r3]
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	08007bc0 	.word	0x08007bc0

08005a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a28:	f7ff ffdc 	bl	80059e4 <HAL_RCC_GetHCLKFreq>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	4b05      	ldr	r3, [pc, #20]	@ (8005a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	0b5b      	lsrs	r3, r3, #13
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	4903      	ldr	r1, [pc, #12]	@ (8005a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a3a:	5ccb      	ldrb	r3, [r1, r3]
 8005a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40023800 	.word	0x40023800
 8005a48:	08007bc0 	.word	0x08007bc0

08005a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005a64:	2300      	movs	r3, #0
 8005a66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d012      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a74:	4b69      	ldr	r3, [pc, #420]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	4a68      	ldr	r2, [pc, #416]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a7a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005a7e:	6093      	str	r3, [r2, #8]
 8005a80:	4b66      	ldr	r3, [pc, #408]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a88:	4964      	ldr	r1, [pc, #400]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005a96:	2301      	movs	r3, #1
 8005a98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d017      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005aa6:	4b5d      	ldr	r3, [pc, #372]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005aac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab4:	4959      	ldr	r1, [pc, #356]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ac4:	d101      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d017      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ae8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af0:	494a      	ldr	r1, [pc, #296]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b00:	d101      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005b02:	2301      	movs	r3, #1
 8005b04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0320 	and.w	r3, r3, #32
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 808b 	beq.w	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b30:	4b3a      	ldr	r3, [pc, #232]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b34:	4a39      	ldr	r2, [pc, #228]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b3c:	4b37      	ldr	r3, [pc, #220]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b44:	60bb      	str	r3, [r7, #8]
 8005b46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b48:	4b35      	ldr	r3, [pc, #212]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a34      	ldr	r2, [pc, #208]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b54:	f7fe fb56 	bl	8004204 <HAL_GetTick>
 8005b58:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b5c:	f7fe fb52 	bl	8004204 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b64      	cmp	r3, #100	@ 0x64
 8005b68:	d901      	bls.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e357      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f0      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b7a:	4b28      	ldr	r3, [pc, #160]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b82:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d035      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d02e      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b98:	4b20      	ldr	r3, [pc, #128]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ba0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba6:	4a1d      	ldr	r2, [pc, #116]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bac:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bae:	4b1b      	ldr	r3, [pc, #108]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bb8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005bba:	4a18      	ldr	r2, [pc, #96]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005bc0:	4b16      	ldr	r3, [pc, #88]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d114      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bcc:	f7fe fb1a 	bl	8004204 <HAL_GetTick>
 8005bd0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd2:	e00a      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bd4:	f7fe fb16 	bl	8004204 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d901      	bls.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e319      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bea:	4b0c      	ldr	r3, [pc, #48]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0ee      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c02:	d111      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005c04:	4b05      	ldr	r3, [pc, #20]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005c10:	4b04      	ldr	r3, [pc, #16]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c12:	400b      	ands	r3, r1
 8005c14:	4901      	ldr	r1, [pc, #4]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	608b      	str	r3, [r1, #8]
 8005c1a:	e00b      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	40007000 	.word	0x40007000
 8005c24:	0ffffcff 	.word	0x0ffffcff
 8005c28:	4baa      	ldr	r3, [pc, #680]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	4aa9      	ldr	r2, [pc, #676]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c2e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005c32:	6093      	str	r3, [r2, #8]
 8005c34:	4ba7      	ldr	r3, [pc, #668]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c40:	49a4      	ldr	r1, [pc, #656]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0310 	and.w	r3, r3, #16
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d010      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c52:	4ba0      	ldr	r3, [pc, #640]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c58:	4a9e      	ldr	r2, [pc, #632]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005c62:	4b9c      	ldr	r3, [pc, #624]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c64:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6c:	4999      	ldr	r1, [pc, #612]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00a      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c80:	4b94      	ldr	r3, [pc, #592]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c86:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c8e:	4991      	ldr	r1, [pc, #580]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ca2:	4b8c      	ldr	r3, [pc, #560]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cb0:	4988      	ldr	r1, [pc, #544]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cc4:	4b83      	ldr	r3, [pc, #524]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cd2:	4980      	ldr	r1, [pc, #512]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ce6:	4b7b      	ldr	r3, [pc, #492]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf4:	4977      	ldr	r1, [pc, #476]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d08:	4b72      	ldr	r3, [pc, #456]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d0e:	f023 0203 	bic.w	r2, r3, #3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d16:	496f      	ldr	r1, [pc, #444]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d2a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d30:	f023 020c 	bic.w	r2, r3, #12
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d38:	4966      	ldr	r1, [pc, #408]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d4c:	4b61      	ldr	r3, [pc, #388]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d52:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d5a:	495e      	ldr	r1, [pc, #376]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d6e:	4b59      	ldr	r3, [pc, #356]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d74:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d7c:	4955      	ldr	r1, [pc, #340]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d90:	4b50      	ldr	r3, [pc, #320]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9e:	494d      	ldr	r1, [pc, #308]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005db2:	4b48      	ldr	r3, [pc, #288]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005db8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc0:	4944      	ldr	r1, [pc, #272]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dda:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de2:	493c      	ldr	r1, [pc, #240]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005df6:	4b37      	ldr	r3, [pc, #220]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dfc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e04:	4933      	ldr	r1, [pc, #204]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00a      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e18:	4b2e      	ldr	r3, [pc, #184]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e1e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e26:	492b      	ldr	r1, [pc, #172]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d011      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005e3a:	4b26      	ldr	r3, [pc, #152]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e40:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e48:	4922      	ldr	r1, [pc, #136]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e58:	d101      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e7a:	4b16      	ldr	r3, [pc, #88]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e80:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e88:	4912      	ldr	r1, [pc, #72]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00b      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ea2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eac:	4909      	ldr	r1, [pc, #36]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d006      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 80d9 	beq.w	800607a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ec8:	4b02      	ldr	r3, [pc, #8]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a01      	ldr	r2, [pc, #4]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ece:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ed2:	e001      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005ed4:	40023800 	.word	0x40023800
 8005ed8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eda:	f7fe f993 	bl	8004204 <HAL_GetTick>
 8005ede:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ee2:	f7fe f98f 	bl	8004204 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b64      	cmp	r3, #100	@ 0x64
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e194      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ef4:	4b6c      	ldr	r3, [pc, #432]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1f0      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d021      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d11d      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f14:	4b64      	ldr	r3, [pc, #400]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f1a:	0c1b      	lsrs	r3, r3, #16
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f22:	4b61      	ldr	r3, [pc, #388]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f28:	0e1b      	lsrs	r3, r3, #24
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	019a      	lsls	r2, r3, #6
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	041b      	lsls	r3, r3, #16
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	061b      	lsls	r3, r3, #24
 8005f40:	431a      	orrs	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	071b      	lsls	r3, r3, #28
 8005f48:	4957      	ldr	r1, [pc, #348]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d004      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f64:	d00a      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d02e      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f7a:	d129      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f82:	0c1b      	lsrs	r3, r3, #16
 8005f84:	f003 0303 	and.w	r3, r3, #3
 8005f88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f8a:	4b47      	ldr	r3, [pc, #284]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f90:	0f1b      	lsrs	r3, r3, #28
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	019a      	lsls	r2, r3, #6
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	041b      	lsls	r3, r3, #16
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	061b      	lsls	r3, r3, #24
 8005faa:	431a      	orrs	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	071b      	lsls	r3, r3, #28
 8005fb0:	493d      	ldr	r1, [pc, #244]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fbe:	f023 021f 	bic.w	r2, r3, #31
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	4937      	ldr	r1, [pc, #220]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d01d      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005fdc:	4b32      	ldr	r3, [pc, #200]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fe2:	0e1b      	lsrs	r3, r3, #24
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fea:	4b2f      	ldr	r3, [pc, #188]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ff0:	0f1b      	lsrs	r3, r3, #28
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	019a      	lsls	r2, r3, #6
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	041b      	lsls	r3, r3, #16
 8006004:	431a      	orrs	r2, r3
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	061b      	lsls	r3, r3, #24
 800600a:	431a      	orrs	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	071b      	lsls	r3, r3, #28
 8006010:	4925      	ldr	r1, [pc, #148]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d011      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	019a      	lsls	r2, r3, #6
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	061b      	lsls	r3, r3, #24
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	071b      	lsls	r3, r3, #28
 8006040:	4919      	ldr	r1, [pc, #100]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006048:	4b17      	ldr	r3, [pc, #92]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a16      	ldr	r2, [pc, #88]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800604e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006054:	f7fe f8d6 	bl	8004204 <HAL_GetTick>
 8006058:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800605a:	e008      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800605c:	f7fe f8d2 	bl	8004204 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b64      	cmp	r3, #100	@ 0x64
 8006068:	d901      	bls.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e0d7      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800606e:	4b0e      	ldr	r3, [pc, #56]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b01      	cmp	r3, #1
 800607e:	f040 80cd 	bne.w	800621c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006082:	4b09      	ldr	r3, [pc, #36]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a08      	ldr	r2, [pc, #32]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800608c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800608e:	f7fe f8b9 	bl	8004204 <HAL_GetTick>
 8006092:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006094:	e00a      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006096:	f7fe f8b5 	bl	8004204 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b64      	cmp	r3, #100	@ 0x64
 80060a2:	d903      	bls.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e0ba      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80060a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060ac:	4b5e      	ldr	r3, [pc, #376]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060b8:	d0ed      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x682>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d009      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d02e      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d12a      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80060e2:	4b51      	ldr	r3, [pc, #324]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e8:	0c1b      	lsrs	r3, r3, #16
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80060f0:	4b4d      	ldr	r3, [pc, #308]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f6:	0f1b      	lsrs	r3, r3, #28
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	019a      	lsls	r2, r3, #6
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	041b      	lsls	r3, r3, #16
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	061b      	lsls	r3, r3, #24
 8006110:	431a      	orrs	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	071b      	lsls	r3, r3, #28
 8006116:	4944      	ldr	r1, [pc, #272]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800611e:	4b42      	ldr	r3, [pc, #264]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006124:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612c:	3b01      	subs	r3, #1
 800612e:	021b      	lsls	r3, r3, #8
 8006130:	493d      	ldr	r1, [pc, #244]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006132:	4313      	orrs	r3, r2
 8006134:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d022      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006148:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800614c:	d11d      	bne.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800614e:	4b36      	ldr	r3, [pc, #216]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006154:	0e1b      	lsrs	r3, r3, #24
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800615c:	4b32      	ldr	r3, [pc, #200]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800615e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006162:	0f1b      	lsrs	r3, r3, #28
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	019a      	lsls	r2, r3, #6
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	041b      	lsls	r3, r3, #16
 8006176:	431a      	orrs	r2, r3
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	061b      	lsls	r3, r3, #24
 800617c:	431a      	orrs	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	071b      	lsls	r3, r3, #28
 8006182:	4929      	ldr	r1, [pc, #164]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006184:	4313      	orrs	r3, r2
 8006186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0308 	and.w	r3, r3, #8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d028      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006196:	4b24      	ldr	r3, [pc, #144]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800619c:	0e1b      	lsrs	r3, r3, #24
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80061a4:	4b20      	ldr	r3, [pc, #128]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061aa:	0c1b      	lsrs	r3, r3, #16
 80061ac:	f003 0303 	and.w	r3, r3, #3
 80061b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	019a      	lsls	r2, r3, #6
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	041b      	lsls	r3, r3, #16
 80061bc:	431a      	orrs	r2, r3
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	061b      	lsls	r3, r3, #24
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	071b      	lsls	r3, r3, #28
 80061ca:	4917      	ldr	r1, [pc, #92]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80061d2:	4b15      	ldr	r3, [pc, #84]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e0:	4911      	ldr	r1, [pc, #68]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80061e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a0e      	ldr	r2, [pc, #56]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061f4:	f7fe f806 	bl	8004204 <HAL_GetTick>
 80061f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061fa:	e008      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80061fc:	f7fe f802 	bl	8004204 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b64      	cmp	r3, #100	@ 0x64
 8006208:	d901      	bls.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e007      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800620e:	4b06      	ldr	r3, [pc, #24]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006216:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800621a:	d1ef      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	40023800 	.word	0x40023800

0800622c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e040      	b.n	80062c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fd fe0c 	bl	8003e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2224      	movs	r2, #36	@ 0x24
 8006258:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0201 	bic.w	r2, r2, #1
 8006268:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f8b0 	bl	80063d0 <UART_SetConfig>
 8006270:	4603      	mov	r3, r0
 8006272:	2b01      	cmp	r3, #1
 8006274:	d101      	bne.n	800627a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e022      	b.n	80062c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fb08 	bl	8006898 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0201 	orr.w	r2, r2, #1
 80062b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fb8f 	bl	80069dc <UART_CheckIdleState>
 80062be:	4603      	mov	r3, r0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	@ 0x28
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062dc:	2b20      	cmp	r3, #32
 80062de:	d171      	bne.n	80063c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <HAL_UART_Transmit+0x24>
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e06a      	b.n	80063c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2221      	movs	r2, #33	@ 0x21
 80062fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062fe:	f7fd ff81 	bl	8004204 <HAL_GetTick>
 8006302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	88fa      	ldrh	r2, [r7, #6]
 8006308:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	88fa      	ldrh	r2, [r7, #6]
 8006310:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800631c:	d108      	bne.n	8006330 <HAL_UART_Transmit+0x68>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	e003      	b.n	8006338 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006334:	2300      	movs	r3, #0
 8006336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006338:	e02c      	b.n	8006394 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2200      	movs	r2, #0
 8006342:	2180      	movs	r1, #128	@ 0x80
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 fb80 	bl	8006a4a <UART_WaitOnFlagUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e038      	b.n	80063c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10b      	bne.n	8006372 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006368:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	3302      	adds	r3, #2
 800636e:	61bb      	str	r3, [r7, #24]
 8006370:	e007      	b.n	8006382 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	781a      	ldrb	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	3301      	adds	r3, #1
 8006380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800639a:	b29b      	uxth	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1cc      	bne.n	800633a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2200      	movs	r2, #0
 80063a8:	2140      	movs	r1, #64	@ 0x40
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 fb4d 	bl	8006a4a <UART_WaitOnFlagUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e005      	b.n	80063c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2220      	movs	r2, #32
 80063be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	e000      	b.n	80063c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80063c4:	2302      	movs	r3, #2
  }
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3720      	adds	r7, #32
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	431a      	orrs	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	4ba6      	ldr	r3, [pc, #664]	@ (8006694 <UART_SetConfig+0x2c4>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6812      	ldr	r2, [r2, #0]
 8006402:	6979      	ldr	r1, [r7, #20]
 8006404:	430b      	orrs	r3, r1
 8006406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	430a      	orrs	r2, r1
 8006440:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a94      	ldr	r2, [pc, #592]	@ (8006698 <UART_SetConfig+0x2c8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d120      	bne.n	800648e <UART_SetConfig+0xbe>
 800644c:	4b93      	ldr	r3, [pc, #588]	@ (800669c <UART_SetConfig+0x2cc>)
 800644e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	2b03      	cmp	r3, #3
 8006458:	d816      	bhi.n	8006488 <UART_SetConfig+0xb8>
 800645a:	a201      	add	r2, pc, #4	@ (adr r2, 8006460 <UART_SetConfig+0x90>)
 800645c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006460:	08006471 	.word	0x08006471
 8006464:	0800647d 	.word	0x0800647d
 8006468:	08006477 	.word	0x08006477
 800646c:	08006483 	.word	0x08006483
 8006470:	2301      	movs	r3, #1
 8006472:	77fb      	strb	r3, [r7, #31]
 8006474:	e150      	b.n	8006718 <UART_SetConfig+0x348>
 8006476:	2302      	movs	r3, #2
 8006478:	77fb      	strb	r3, [r7, #31]
 800647a:	e14d      	b.n	8006718 <UART_SetConfig+0x348>
 800647c:	2304      	movs	r3, #4
 800647e:	77fb      	strb	r3, [r7, #31]
 8006480:	e14a      	b.n	8006718 <UART_SetConfig+0x348>
 8006482:	2308      	movs	r3, #8
 8006484:	77fb      	strb	r3, [r7, #31]
 8006486:	e147      	b.n	8006718 <UART_SetConfig+0x348>
 8006488:	2310      	movs	r3, #16
 800648a:	77fb      	strb	r3, [r7, #31]
 800648c:	e144      	b.n	8006718 <UART_SetConfig+0x348>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a83      	ldr	r2, [pc, #524]	@ (80066a0 <UART_SetConfig+0x2d0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d132      	bne.n	80064fe <UART_SetConfig+0x12e>
 8006498:	4b80      	ldr	r3, [pc, #512]	@ (800669c <UART_SetConfig+0x2cc>)
 800649a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800649e:	f003 030c 	and.w	r3, r3, #12
 80064a2:	2b0c      	cmp	r3, #12
 80064a4:	d828      	bhi.n	80064f8 <UART_SetConfig+0x128>
 80064a6:	a201      	add	r2, pc, #4	@ (adr r2, 80064ac <UART_SetConfig+0xdc>)
 80064a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ac:	080064e1 	.word	0x080064e1
 80064b0:	080064f9 	.word	0x080064f9
 80064b4:	080064f9 	.word	0x080064f9
 80064b8:	080064f9 	.word	0x080064f9
 80064bc:	080064ed 	.word	0x080064ed
 80064c0:	080064f9 	.word	0x080064f9
 80064c4:	080064f9 	.word	0x080064f9
 80064c8:	080064f9 	.word	0x080064f9
 80064cc:	080064e7 	.word	0x080064e7
 80064d0:	080064f9 	.word	0x080064f9
 80064d4:	080064f9 	.word	0x080064f9
 80064d8:	080064f9 	.word	0x080064f9
 80064dc:	080064f3 	.word	0x080064f3
 80064e0:	2300      	movs	r3, #0
 80064e2:	77fb      	strb	r3, [r7, #31]
 80064e4:	e118      	b.n	8006718 <UART_SetConfig+0x348>
 80064e6:	2302      	movs	r3, #2
 80064e8:	77fb      	strb	r3, [r7, #31]
 80064ea:	e115      	b.n	8006718 <UART_SetConfig+0x348>
 80064ec:	2304      	movs	r3, #4
 80064ee:	77fb      	strb	r3, [r7, #31]
 80064f0:	e112      	b.n	8006718 <UART_SetConfig+0x348>
 80064f2:	2308      	movs	r3, #8
 80064f4:	77fb      	strb	r3, [r7, #31]
 80064f6:	e10f      	b.n	8006718 <UART_SetConfig+0x348>
 80064f8:	2310      	movs	r3, #16
 80064fa:	77fb      	strb	r3, [r7, #31]
 80064fc:	e10c      	b.n	8006718 <UART_SetConfig+0x348>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a68      	ldr	r2, [pc, #416]	@ (80066a4 <UART_SetConfig+0x2d4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d120      	bne.n	800654a <UART_SetConfig+0x17a>
 8006508:	4b64      	ldr	r3, [pc, #400]	@ (800669c <UART_SetConfig+0x2cc>)
 800650a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800650e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006512:	2b30      	cmp	r3, #48	@ 0x30
 8006514:	d013      	beq.n	800653e <UART_SetConfig+0x16e>
 8006516:	2b30      	cmp	r3, #48	@ 0x30
 8006518:	d814      	bhi.n	8006544 <UART_SetConfig+0x174>
 800651a:	2b20      	cmp	r3, #32
 800651c:	d009      	beq.n	8006532 <UART_SetConfig+0x162>
 800651e:	2b20      	cmp	r3, #32
 8006520:	d810      	bhi.n	8006544 <UART_SetConfig+0x174>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <UART_SetConfig+0x15c>
 8006526:	2b10      	cmp	r3, #16
 8006528:	d006      	beq.n	8006538 <UART_SetConfig+0x168>
 800652a:	e00b      	b.n	8006544 <UART_SetConfig+0x174>
 800652c:	2300      	movs	r3, #0
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e0f2      	b.n	8006718 <UART_SetConfig+0x348>
 8006532:	2302      	movs	r3, #2
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e0ef      	b.n	8006718 <UART_SetConfig+0x348>
 8006538:	2304      	movs	r3, #4
 800653a:	77fb      	strb	r3, [r7, #31]
 800653c:	e0ec      	b.n	8006718 <UART_SetConfig+0x348>
 800653e:	2308      	movs	r3, #8
 8006540:	77fb      	strb	r3, [r7, #31]
 8006542:	e0e9      	b.n	8006718 <UART_SetConfig+0x348>
 8006544:	2310      	movs	r3, #16
 8006546:	77fb      	strb	r3, [r7, #31]
 8006548:	e0e6      	b.n	8006718 <UART_SetConfig+0x348>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a56      	ldr	r2, [pc, #344]	@ (80066a8 <UART_SetConfig+0x2d8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d120      	bne.n	8006596 <UART_SetConfig+0x1c6>
 8006554:	4b51      	ldr	r3, [pc, #324]	@ (800669c <UART_SetConfig+0x2cc>)
 8006556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800655a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800655e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006560:	d013      	beq.n	800658a <UART_SetConfig+0x1ba>
 8006562:	2bc0      	cmp	r3, #192	@ 0xc0
 8006564:	d814      	bhi.n	8006590 <UART_SetConfig+0x1c0>
 8006566:	2b80      	cmp	r3, #128	@ 0x80
 8006568:	d009      	beq.n	800657e <UART_SetConfig+0x1ae>
 800656a:	2b80      	cmp	r3, #128	@ 0x80
 800656c:	d810      	bhi.n	8006590 <UART_SetConfig+0x1c0>
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <UART_SetConfig+0x1a8>
 8006572:	2b40      	cmp	r3, #64	@ 0x40
 8006574:	d006      	beq.n	8006584 <UART_SetConfig+0x1b4>
 8006576:	e00b      	b.n	8006590 <UART_SetConfig+0x1c0>
 8006578:	2300      	movs	r3, #0
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e0cc      	b.n	8006718 <UART_SetConfig+0x348>
 800657e:	2302      	movs	r3, #2
 8006580:	77fb      	strb	r3, [r7, #31]
 8006582:	e0c9      	b.n	8006718 <UART_SetConfig+0x348>
 8006584:	2304      	movs	r3, #4
 8006586:	77fb      	strb	r3, [r7, #31]
 8006588:	e0c6      	b.n	8006718 <UART_SetConfig+0x348>
 800658a:	2308      	movs	r3, #8
 800658c:	77fb      	strb	r3, [r7, #31]
 800658e:	e0c3      	b.n	8006718 <UART_SetConfig+0x348>
 8006590:	2310      	movs	r3, #16
 8006592:	77fb      	strb	r3, [r7, #31]
 8006594:	e0c0      	b.n	8006718 <UART_SetConfig+0x348>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a44      	ldr	r2, [pc, #272]	@ (80066ac <UART_SetConfig+0x2dc>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d125      	bne.n	80065ec <UART_SetConfig+0x21c>
 80065a0:	4b3e      	ldr	r3, [pc, #248]	@ (800669c <UART_SetConfig+0x2cc>)
 80065a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065ae:	d017      	beq.n	80065e0 <UART_SetConfig+0x210>
 80065b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065b4:	d817      	bhi.n	80065e6 <UART_SetConfig+0x216>
 80065b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ba:	d00b      	beq.n	80065d4 <UART_SetConfig+0x204>
 80065bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065c0:	d811      	bhi.n	80065e6 <UART_SetConfig+0x216>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <UART_SetConfig+0x1fe>
 80065c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065ca:	d006      	beq.n	80065da <UART_SetConfig+0x20a>
 80065cc:	e00b      	b.n	80065e6 <UART_SetConfig+0x216>
 80065ce:	2300      	movs	r3, #0
 80065d0:	77fb      	strb	r3, [r7, #31]
 80065d2:	e0a1      	b.n	8006718 <UART_SetConfig+0x348>
 80065d4:	2302      	movs	r3, #2
 80065d6:	77fb      	strb	r3, [r7, #31]
 80065d8:	e09e      	b.n	8006718 <UART_SetConfig+0x348>
 80065da:	2304      	movs	r3, #4
 80065dc:	77fb      	strb	r3, [r7, #31]
 80065de:	e09b      	b.n	8006718 <UART_SetConfig+0x348>
 80065e0:	2308      	movs	r3, #8
 80065e2:	77fb      	strb	r3, [r7, #31]
 80065e4:	e098      	b.n	8006718 <UART_SetConfig+0x348>
 80065e6:	2310      	movs	r3, #16
 80065e8:	77fb      	strb	r3, [r7, #31]
 80065ea:	e095      	b.n	8006718 <UART_SetConfig+0x348>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a2f      	ldr	r2, [pc, #188]	@ (80066b0 <UART_SetConfig+0x2e0>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d125      	bne.n	8006642 <UART_SetConfig+0x272>
 80065f6:	4b29      	ldr	r3, [pc, #164]	@ (800669c <UART_SetConfig+0x2cc>)
 80065f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006600:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006604:	d017      	beq.n	8006636 <UART_SetConfig+0x266>
 8006606:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800660a:	d817      	bhi.n	800663c <UART_SetConfig+0x26c>
 800660c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006610:	d00b      	beq.n	800662a <UART_SetConfig+0x25a>
 8006612:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006616:	d811      	bhi.n	800663c <UART_SetConfig+0x26c>
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <UART_SetConfig+0x254>
 800661c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006620:	d006      	beq.n	8006630 <UART_SetConfig+0x260>
 8006622:	e00b      	b.n	800663c <UART_SetConfig+0x26c>
 8006624:	2301      	movs	r3, #1
 8006626:	77fb      	strb	r3, [r7, #31]
 8006628:	e076      	b.n	8006718 <UART_SetConfig+0x348>
 800662a:	2302      	movs	r3, #2
 800662c:	77fb      	strb	r3, [r7, #31]
 800662e:	e073      	b.n	8006718 <UART_SetConfig+0x348>
 8006630:	2304      	movs	r3, #4
 8006632:	77fb      	strb	r3, [r7, #31]
 8006634:	e070      	b.n	8006718 <UART_SetConfig+0x348>
 8006636:	2308      	movs	r3, #8
 8006638:	77fb      	strb	r3, [r7, #31]
 800663a:	e06d      	b.n	8006718 <UART_SetConfig+0x348>
 800663c:	2310      	movs	r3, #16
 800663e:	77fb      	strb	r3, [r7, #31]
 8006640:	e06a      	b.n	8006718 <UART_SetConfig+0x348>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1b      	ldr	r2, [pc, #108]	@ (80066b4 <UART_SetConfig+0x2e4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d138      	bne.n	80066be <UART_SetConfig+0x2ee>
 800664c:	4b13      	ldr	r3, [pc, #76]	@ (800669c <UART_SetConfig+0x2cc>)
 800664e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006652:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006656:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800665a:	d017      	beq.n	800668c <UART_SetConfig+0x2bc>
 800665c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006660:	d82a      	bhi.n	80066b8 <UART_SetConfig+0x2e8>
 8006662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006666:	d00b      	beq.n	8006680 <UART_SetConfig+0x2b0>
 8006668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800666c:	d824      	bhi.n	80066b8 <UART_SetConfig+0x2e8>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <UART_SetConfig+0x2aa>
 8006672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006676:	d006      	beq.n	8006686 <UART_SetConfig+0x2b6>
 8006678:	e01e      	b.n	80066b8 <UART_SetConfig+0x2e8>
 800667a:	2300      	movs	r3, #0
 800667c:	77fb      	strb	r3, [r7, #31]
 800667e:	e04b      	b.n	8006718 <UART_SetConfig+0x348>
 8006680:	2302      	movs	r3, #2
 8006682:	77fb      	strb	r3, [r7, #31]
 8006684:	e048      	b.n	8006718 <UART_SetConfig+0x348>
 8006686:	2304      	movs	r3, #4
 8006688:	77fb      	strb	r3, [r7, #31]
 800668a:	e045      	b.n	8006718 <UART_SetConfig+0x348>
 800668c:	2308      	movs	r3, #8
 800668e:	77fb      	strb	r3, [r7, #31]
 8006690:	e042      	b.n	8006718 <UART_SetConfig+0x348>
 8006692:	bf00      	nop
 8006694:	efff69f3 	.word	0xefff69f3
 8006698:	40011000 	.word	0x40011000
 800669c:	40023800 	.word	0x40023800
 80066a0:	40004400 	.word	0x40004400
 80066a4:	40004800 	.word	0x40004800
 80066a8:	40004c00 	.word	0x40004c00
 80066ac:	40005000 	.word	0x40005000
 80066b0:	40011400 	.word	0x40011400
 80066b4:	40007800 	.word	0x40007800
 80066b8:	2310      	movs	r3, #16
 80066ba:	77fb      	strb	r3, [r7, #31]
 80066bc:	e02c      	b.n	8006718 <UART_SetConfig+0x348>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a72      	ldr	r2, [pc, #456]	@ (800688c <UART_SetConfig+0x4bc>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d125      	bne.n	8006714 <UART_SetConfig+0x344>
 80066c8:	4b71      	ldr	r3, [pc, #452]	@ (8006890 <UART_SetConfig+0x4c0>)
 80066ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80066d2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80066d6:	d017      	beq.n	8006708 <UART_SetConfig+0x338>
 80066d8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80066dc:	d817      	bhi.n	800670e <UART_SetConfig+0x33e>
 80066de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066e2:	d00b      	beq.n	80066fc <UART_SetConfig+0x32c>
 80066e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066e8:	d811      	bhi.n	800670e <UART_SetConfig+0x33e>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <UART_SetConfig+0x326>
 80066ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066f2:	d006      	beq.n	8006702 <UART_SetConfig+0x332>
 80066f4:	e00b      	b.n	800670e <UART_SetConfig+0x33e>
 80066f6:	2300      	movs	r3, #0
 80066f8:	77fb      	strb	r3, [r7, #31]
 80066fa:	e00d      	b.n	8006718 <UART_SetConfig+0x348>
 80066fc:	2302      	movs	r3, #2
 80066fe:	77fb      	strb	r3, [r7, #31]
 8006700:	e00a      	b.n	8006718 <UART_SetConfig+0x348>
 8006702:	2304      	movs	r3, #4
 8006704:	77fb      	strb	r3, [r7, #31]
 8006706:	e007      	b.n	8006718 <UART_SetConfig+0x348>
 8006708:	2308      	movs	r3, #8
 800670a:	77fb      	strb	r3, [r7, #31]
 800670c:	e004      	b.n	8006718 <UART_SetConfig+0x348>
 800670e:	2310      	movs	r3, #16
 8006710:	77fb      	strb	r3, [r7, #31]
 8006712:	e001      	b.n	8006718 <UART_SetConfig+0x348>
 8006714:	2310      	movs	r3, #16
 8006716:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006720:	d15b      	bne.n	80067da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006722:	7ffb      	ldrb	r3, [r7, #31]
 8006724:	2b08      	cmp	r3, #8
 8006726:	d828      	bhi.n	800677a <UART_SetConfig+0x3aa>
 8006728:	a201      	add	r2, pc, #4	@ (adr r2, 8006730 <UART_SetConfig+0x360>)
 800672a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672e:	bf00      	nop
 8006730:	08006755 	.word	0x08006755
 8006734:	0800675d 	.word	0x0800675d
 8006738:	08006765 	.word	0x08006765
 800673c:	0800677b 	.word	0x0800677b
 8006740:	0800676b 	.word	0x0800676b
 8006744:	0800677b 	.word	0x0800677b
 8006748:	0800677b 	.word	0x0800677b
 800674c:	0800677b 	.word	0x0800677b
 8006750:	08006773 	.word	0x08006773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006754:	f7ff f952 	bl	80059fc <HAL_RCC_GetPCLK1Freq>
 8006758:	61b8      	str	r0, [r7, #24]
        break;
 800675a:	e013      	b.n	8006784 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800675c:	f7ff f962 	bl	8005a24 <HAL_RCC_GetPCLK2Freq>
 8006760:	61b8      	str	r0, [r7, #24]
        break;
 8006762:	e00f      	b.n	8006784 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006764:	4b4b      	ldr	r3, [pc, #300]	@ (8006894 <UART_SetConfig+0x4c4>)
 8006766:	61bb      	str	r3, [r7, #24]
        break;
 8006768:	e00c      	b.n	8006784 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800676a:	f7ff f835 	bl	80057d8 <HAL_RCC_GetSysClockFreq>
 800676e:	61b8      	str	r0, [r7, #24]
        break;
 8006770:	e008      	b.n	8006784 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006776:	61bb      	str	r3, [r7, #24]
        break;
 8006778:	e004      	b.n	8006784 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	77bb      	strb	r3, [r7, #30]
        break;
 8006782:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d074      	beq.n	8006874 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	005a      	lsls	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	085b      	lsrs	r3, r3, #1
 8006794:	441a      	add	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	fbb2 f3f3 	udiv	r3, r2, r3
 800679e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	2b0f      	cmp	r3, #15
 80067a4:	d916      	bls.n	80067d4 <UART_SetConfig+0x404>
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067ac:	d212      	bcs.n	80067d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f023 030f 	bic.w	r3, r3, #15
 80067b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f003 0307 	and.w	r3, r3, #7
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	89fb      	ldrh	r3, [r7, #14]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	89fa      	ldrh	r2, [r7, #14]
 80067d0:	60da      	str	r2, [r3, #12]
 80067d2:	e04f      	b.n	8006874 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	77bb      	strb	r3, [r7, #30]
 80067d8:	e04c      	b.n	8006874 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067da:	7ffb      	ldrb	r3, [r7, #31]
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d828      	bhi.n	8006832 <UART_SetConfig+0x462>
 80067e0:	a201      	add	r2, pc, #4	@ (adr r2, 80067e8 <UART_SetConfig+0x418>)
 80067e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e6:	bf00      	nop
 80067e8:	0800680d 	.word	0x0800680d
 80067ec:	08006815 	.word	0x08006815
 80067f0:	0800681d 	.word	0x0800681d
 80067f4:	08006833 	.word	0x08006833
 80067f8:	08006823 	.word	0x08006823
 80067fc:	08006833 	.word	0x08006833
 8006800:	08006833 	.word	0x08006833
 8006804:	08006833 	.word	0x08006833
 8006808:	0800682b 	.word	0x0800682b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800680c:	f7ff f8f6 	bl	80059fc <HAL_RCC_GetPCLK1Freq>
 8006810:	61b8      	str	r0, [r7, #24]
        break;
 8006812:	e013      	b.n	800683c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006814:	f7ff f906 	bl	8005a24 <HAL_RCC_GetPCLK2Freq>
 8006818:	61b8      	str	r0, [r7, #24]
        break;
 800681a:	e00f      	b.n	800683c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800681c:	4b1d      	ldr	r3, [pc, #116]	@ (8006894 <UART_SetConfig+0x4c4>)
 800681e:	61bb      	str	r3, [r7, #24]
        break;
 8006820:	e00c      	b.n	800683c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006822:	f7fe ffd9 	bl	80057d8 <HAL_RCC_GetSysClockFreq>
 8006826:	61b8      	str	r0, [r7, #24]
        break;
 8006828:	e008      	b.n	800683c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800682a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800682e:	61bb      	str	r3, [r7, #24]
        break;
 8006830:	e004      	b.n	800683c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	77bb      	strb	r3, [r7, #30]
        break;
 800683a:	bf00      	nop
    }

    if (pclk != 0U)
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d018      	beq.n	8006874 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	085a      	lsrs	r2, r3, #1
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	441a      	add	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	fbb2 f3f3 	udiv	r3, r2, r3
 8006854:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	2b0f      	cmp	r3, #15
 800685a:	d909      	bls.n	8006870 <UART_SetConfig+0x4a0>
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006862:	d205      	bcs.n	8006870 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	b29a      	uxth	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	60da      	str	r2, [r3, #12]
 800686e:	e001      	b.n	8006874 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006880:	7fbb      	ldrb	r3, [r7, #30]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3720      	adds	r7, #32
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40007c00 	.word	0x40007c00
 8006890:	40023800 	.word	0x40023800
 8006894:	00f42400 	.word	0x00f42400

08006898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00a      	beq.n	80068c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00a      	beq.n	80068e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00a      	beq.n	8006906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690a:	f003 0308 	and.w	r3, r3, #8
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00a      	beq.n	8006928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692c:	f003 0310 	and.w	r3, r3, #16
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00a      	beq.n	800694a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	f003 0320 	and.w	r3, r3, #32
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00a      	beq.n	800696c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01a      	beq.n	80069ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006992:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006996:	d10a      	bne.n	80069ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	605a      	str	r2, [r3, #4]
  }
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af02      	add	r7, sp, #8
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069ec:	f7fd fc0a 	bl	8004204 <HAL_GetTick>
 80069f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d10e      	bne.n	8006a1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f81b 	bl	8006a4a <UART_WaitOnFlagUntilTimeout>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e011      	b.n	8006a42 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b09c      	sub	sp, #112	@ 0x70
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	603b      	str	r3, [r7, #0]
 8006a56:	4613      	mov	r3, r2
 8006a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a5a:	e0a7      	b.n	8006bac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a62:	f000 80a3 	beq.w	8006bac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a66:	f7fd fbcd 	bl	8004204 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d302      	bcc.n	8006a7c <UART_WaitOnFlagUntilTimeout+0x32>
 8006a76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d13f      	bne.n	8006afc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a8c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006a90:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006aa0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e6      	bne.n	8006a7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac0:	f023 0301 	bic.w	r3, r3, #1
 8006ac4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3308      	adds	r3, #8
 8006acc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006ace:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006ad0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ad4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e5      	bne.n	8006aae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e068      	b.n	8006bce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d050      	beq.n	8006bac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b18:	d148      	bne.n	8006bac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b34:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006b38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b44:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e6      	bne.n	8006b24 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	613b      	str	r3, [r7, #16]
   return(result);
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f023 0301 	bic.w	r3, r3, #1
 8006b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3308      	adds	r3, #8
 8006b74:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006b76:	623a      	str	r2, [r7, #32]
 8006b78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	69f9      	ldr	r1, [r7, #28]
 8006b7c:	6a3a      	ldr	r2, [r7, #32]
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e5      	bne.n	8006b56 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2220      	movs	r2, #32
 8006b94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e010      	b.n	8006bce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69da      	ldr	r2, [r3, #28]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	bf0c      	ite	eq
 8006bbc:	2301      	moveq	r3, #1
 8006bbe:	2300      	movne	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	79fb      	ldrb	r3, [r7, #7]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	f43f af48 	beq.w	8006a5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3770      	adds	r7, #112	@ 0x70
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bd8:	b084      	sub	sp, #16
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	f107 001c 	add.w	r0, r7, #28
 8006be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d120      	bne.n	8006c32 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68da      	ldr	r2, [r3, #12]
 8006c00:	4b20      	ldr	r3, [pc, #128]	@ (8006c84 <USB_CoreInit+0xac>)
 8006c02:	4013      	ands	r3, r2
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d105      	bne.n	8006c26 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fa96 	bl	8007158 <USB_CoreReset>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
 8006c30:	e010      	b.n	8006c54 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fa8a 	bl	8007158 <USB_CoreReset>
 8006c44:	4603      	mov	r3, r0
 8006c46:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d10b      	bne.n	8006c72 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f043 0206 	orr.w	r2, r3, #6
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f043 0220 	orr.w	r2, r3, #32
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c7e:	b004      	add	sp, #16
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	ffbdffbf 	.word	0xffbdffbf

08006c88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f023 0201 	bic.w	r2, r3, #1
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d115      	bne.n	8006cf8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cd8:	2001      	movs	r0, #1
 8006cda:	f7fd fa9f 	bl	800421c <HAL_Delay>
      ms++;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fa29 	bl	800713c <USB_GetMode>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d01e      	beq.n	8006d2e <USB_SetCurrentMode+0x84>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b31      	cmp	r3, #49	@ 0x31
 8006cf4:	d9f0      	bls.n	8006cd8 <USB_SetCurrentMode+0x2e>
 8006cf6:	e01a      	b.n	8006d2e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d115      	bne.n	8006d2a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d0a:	2001      	movs	r0, #1
 8006d0c:	f7fd fa86 	bl	800421c <HAL_Delay>
      ms++;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	3301      	adds	r3, #1
 8006d14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fa10 	bl	800713c <USB_GetMode>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d005      	beq.n	8006d2e <USB_SetCurrentMode+0x84>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b31      	cmp	r3, #49	@ 0x31
 8006d26:	d9f0      	bls.n	8006d0a <USB_SetCurrentMode+0x60>
 8006d28:	e001      	b.n	8006d2e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e005      	b.n	8006d3a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b32      	cmp	r3, #50	@ 0x32
 8006d32:	d101      	bne.n	8006d38 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e000      	b.n	8006d3a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d44:	b084      	sub	sp, #16
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b086      	sub	sp, #24
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d5e:	2300      	movs	r3, #0
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	e009      	b.n	8006d78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	3340      	adds	r3, #64	@ 0x40
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	2200      	movs	r2, #0
 8006d70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	3301      	adds	r3, #1
 8006d76:	613b      	str	r3, [r7, #16]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	2b0e      	cmp	r3, #14
 8006d7c:	d9f2      	bls.n	8006d64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d11c      	bne.n	8006dbe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d92:	f043 0302 	orr.w	r3, r3, #2
 8006d96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	e005      	b.n	8006dca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ddc:	4619      	mov	r1, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de4:	461a      	mov	r2, r3
 8006de6:	680b      	ldr	r3, [r1, #0]
 8006de8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d10c      	bne.n	8006e0a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d104      	bne.n	8006e00 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006df6:	2100      	movs	r1, #0
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f965 	bl	80070c8 <USB_SetDevSpeed>
 8006dfe:	e008      	b.n	8006e12 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e00:	2101      	movs	r1, #1
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f960 	bl	80070c8 <USB_SetDevSpeed>
 8006e08:	e003      	b.n	8006e12 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e0a:	2103      	movs	r1, #3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f95b 	bl	80070c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e12:	2110      	movs	r1, #16
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f8f3 	bl	8007000 <USB_FlushTxFifo>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f91f 	bl	8007068 <USB_FlushRxFifo>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e46:	461a      	mov	r2, r3
 8006e48:	2300      	movs	r3, #0
 8006e4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e52:	461a      	mov	r2, r3
 8006e54:	2300      	movs	r3, #0
 8006e56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	e043      	b.n	8006ee6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e74:	d118      	bne.n	8006ea8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e88:	461a      	mov	r2, r3
 8006e8a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	e013      	b.n	8006eba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	e008      	b.n	8006eba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	2300      	movs	r3, #0
 8006eca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ede:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	613b      	str	r3, [r7, #16]
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d3b7      	bcc.n	8006e5e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eee:	2300      	movs	r3, #0
 8006ef0:	613b      	str	r3, [r7, #16]
 8006ef2:	e043      	b.n	8006f7c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f0a:	d118      	bne.n	8006f3e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	e013      	b.n	8006f50 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f34:	461a      	mov	r2, r3
 8006f36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	e008      	b.n	8006f50 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	2300      	movs	r3, #0
 8006f60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d3b7      	bcc.n	8006ef4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006fa4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d105      	bne.n	8006fb8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	f043 0210 	orr.w	r2, r3, #16
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	699a      	ldr	r2, [r3, #24]
 8006fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8006ff8 <USB_DevInit+0x2b4>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	f043 0208 	orr.w	r2, r3, #8
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d105      	bne.n	8006fe8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	699a      	ldr	r2, [r3, #24]
 8006fe0:	4b06      	ldr	r3, [pc, #24]	@ (8006ffc <USB_DevInit+0x2b8>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ff4:	b004      	add	sp, #16
 8006ff6:	4770      	bx	lr
 8006ff8:	803c3800 	.word	0x803c3800
 8006ffc:	40000004 	.word	0x40000004

08007000 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3301      	adds	r3, #1
 8007012:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4a13      	ldr	r2, [pc, #76]	@ (8007064 <USB_FlushTxFifo+0x64>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d901      	bls.n	8007020 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e01b      	b.n	8007058 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	daf2      	bge.n	800700e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	019b      	lsls	r3, r3, #6
 8007030:	f043 0220 	orr.w	r2, r3, #32
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3301      	adds	r3, #1
 800703c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4a08      	ldr	r2, [pc, #32]	@ (8007064 <USB_FlushTxFifo+0x64>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d901      	bls.n	800704a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e006      	b.n	8007058 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	f003 0320 	and.w	r3, r3, #32
 8007052:	2b20      	cmp	r3, #32
 8007054:	d0f0      	beq.n	8007038 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	00030d40 	.word	0x00030d40

08007068 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3301      	adds	r3, #1
 8007078:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	4a11      	ldr	r2, [pc, #68]	@ (80070c4 <USB_FlushRxFifo+0x5c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d901      	bls.n	8007086 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e018      	b.n	80070b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	2b00      	cmp	r3, #0
 800708c:	daf2      	bge.n	8007074 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2210      	movs	r2, #16
 8007096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3301      	adds	r3, #1
 800709c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4a08      	ldr	r2, [pc, #32]	@ (80070c4 <USB_FlushRxFifo+0x5c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d901      	bls.n	80070aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e006      	b.n	80070b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f003 0310 	and.w	r3, r3, #16
 80070b2:	2b10      	cmp	r3, #16
 80070b4:	d0f0      	beq.n	8007098 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	00030d40 	.word	0x00030d40

080070c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	78fb      	ldrb	r3, [r7, #3]
 80070e2:	68f9      	ldr	r1, [r7, #12]
 80070e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070e8:	4313      	orrs	r3, r2
 80070ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b085      	sub	sp, #20
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007114:	f023 0303 	bic.w	r3, r3, #3
 8007118:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007128:	f043 0302 	orr.w	r3, r3, #2
 800712c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	f003 0301 	and.w	r3, r3, #1
}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	3301      	adds	r3, #1
 8007168:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	4a13      	ldr	r2, [pc, #76]	@ (80071bc <USB_CoreReset+0x64>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d901      	bls.n	8007176 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e01b      	b.n	80071ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	daf2      	bge.n	8007164 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f043 0201 	orr.w	r2, r3, #1
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3301      	adds	r3, #1
 8007192:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4a09      	ldr	r2, [pc, #36]	@ (80071bc <USB_CoreReset+0x64>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d901      	bls.n	80071a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e006      	b.n	80071ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d0f0      	beq.n	800718e <USB_CoreReset+0x36>

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	00030d40 	.word	0x00030d40

080071c0 <siprintf>:
 80071c0:	b40e      	push	{r1, r2, r3}
 80071c2:	b500      	push	{lr}
 80071c4:	b09c      	sub	sp, #112	@ 0x70
 80071c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80071c8:	9002      	str	r0, [sp, #8]
 80071ca:	9006      	str	r0, [sp, #24]
 80071cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80071d0:	4809      	ldr	r0, [pc, #36]	@ (80071f8 <siprintf+0x38>)
 80071d2:	9107      	str	r1, [sp, #28]
 80071d4:	9104      	str	r1, [sp, #16]
 80071d6:	4909      	ldr	r1, [pc, #36]	@ (80071fc <siprintf+0x3c>)
 80071d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071dc:	9105      	str	r1, [sp, #20]
 80071de:	6800      	ldr	r0, [r0, #0]
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	a902      	add	r1, sp, #8
 80071e4:	f000 f9a2 	bl	800752c <_svfiprintf_r>
 80071e8:	9b02      	ldr	r3, [sp, #8]
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]
 80071ee:	b01c      	add	sp, #112	@ 0x70
 80071f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f4:	b003      	add	sp, #12
 80071f6:	4770      	bx	lr
 80071f8:	20000048 	.word	0x20000048
 80071fc:	ffff0208 	.word	0xffff0208

08007200 <memset>:
 8007200:	4402      	add	r2, r0
 8007202:	4603      	mov	r3, r0
 8007204:	4293      	cmp	r3, r2
 8007206:	d100      	bne.n	800720a <memset+0xa>
 8007208:	4770      	bx	lr
 800720a:	f803 1b01 	strb.w	r1, [r3], #1
 800720e:	e7f9      	b.n	8007204 <memset+0x4>

08007210 <__errno>:
 8007210:	4b01      	ldr	r3, [pc, #4]	@ (8007218 <__errno+0x8>)
 8007212:	6818      	ldr	r0, [r3, #0]
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	20000048 	.word	0x20000048

0800721c <__libc_init_array>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	4d0d      	ldr	r5, [pc, #52]	@ (8007254 <__libc_init_array+0x38>)
 8007220:	4c0d      	ldr	r4, [pc, #52]	@ (8007258 <__libc_init_array+0x3c>)
 8007222:	1b64      	subs	r4, r4, r5
 8007224:	10a4      	asrs	r4, r4, #2
 8007226:	2600      	movs	r6, #0
 8007228:	42a6      	cmp	r6, r4
 800722a:	d109      	bne.n	8007240 <__libc_init_array+0x24>
 800722c:	4d0b      	ldr	r5, [pc, #44]	@ (800725c <__libc_init_array+0x40>)
 800722e:	4c0c      	ldr	r4, [pc, #48]	@ (8007260 <__libc_init_array+0x44>)
 8007230:	f000 fc66 	bl	8007b00 <_init>
 8007234:	1b64      	subs	r4, r4, r5
 8007236:	10a4      	asrs	r4, r4, #2
 8007238:	2600      	movs	r6, #0
 800723a:	42a6      	cmp	r6, r4
 800723c:	d105      	bne.n	800724a <__libc_init_array+0x2e>
 800723e:	bd70      	pop	{r4, r5, r6, pc}
 8007240:	f855 3b04 	ldr.w	r3, [r5], #4
 8007244:	4798      	blx	r3
 8007246:	3601      	adds	r6, #1
 8007248:	e7ee      	b.n	8007228 <__libc_init_array+0xc>
 800724a:	f855 3b04 	ldr.w	r3, [r5], #4
 800724e:	4798      	blx	r3
 8007250:	3601      	adds	r6, #1
 8007252:	e7f2      	b.n	800723a <__libc_init_array+0x1e>
 8007254:	08007c04 	.word	0x08007c04
 8007258:	08007c04 	.word	0x08007c04
 800725c:	08007c04 	.word	0x08007c04
 8007260:	08007c08 	.word	0x08007c08

08007264 <__retarget_lock_acquire_recursive>:
 8007264:	4770      	bx	lr

08007266 <__retarget_lock_release_recursive>:
 8007266:	4770      	bx	lr

08007268 <memcpy>:
 8007268:	440a      	add	r2, r1
 800726a:	4291      	cmp	r1, r2
 800726c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007270:	d100      	bne.n	8007274 <memcpy+0xc>
 8007272:	4770      	bx	lr
 8007274:	b510      	push	{r4, lr}
 8007276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800727a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800727e:	4291      	cmp	r1, r2
 8007280:	d1f9      	bne.n	8007276 <memcpy+0xe>
 8007282:	bd10      	pop	{r4, pc}

08007284 <_free_r>:
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	4605      	mov	r5, r0
 8007288:	2900      	cmp	r1, #0
 800728a:	d041      	beq.n	8007310 <_free_r+0x8c>
 800728c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007290:	1f0c      	subs	r4, r1, #4
 8007292:	2b00      	cmp	r3, #0
 8007294:	bfb8      	it	lt
 8007296:	18e4      	addlt	r4, r4, r3
 8007298:	f000 f8e0 	bl	800745c <__malloc_lock>
 800729c:	4a1d      	ldr	r2, [pc, #116]	@ (8007314 <_free_r+0x90>)
 800729e:	6813      	ldr	r3, [r2, #0]
 80072a0:	b933      	cbnz	r3, 80072b0 <_free_r+0x2c>
 80072a2:	6063      	str	r3, [r4, #4]
 80072a4:	6014      	str	r4, [r2, #0]
 80072a6:	4628      	mov	r0, r5
 80072a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072ac:	f000 b8dc 	b.w	8007468 <__malloc_unlock>
 80072b0:	42a3      	cmp	r3, r4
 80072b2:	d908      	bls.n	80072c6 <_free_r+0x42>
 80072b4:	6820      	ldr	r0, [r4, #0]
 80072b6:	1821      	adds	r1, r4, r0
 80072b8:	428b      	cmp	r3, r1
 80072ba:	bf01      	itttt	eq
 80072bc:	6819      	ldreq	r1, [r3, #0]
 80072be:	685b      	ldreq	r3, [r3, #4]
 80072c0:	1809      	addeq	r1, r1, r0
 80072c2:	6021      	streq	r1, [r4, #0]
 80072c4:	e7ed      	b.n	80072a2 <_free_r+0x1e>
 80072c6:	461a      	mov	r2, r3
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	b10b      	cbz	r3, 80072d0 <_free_r+0x4c>
 80072cc:	42a3      	cmp	r3, r4
 80072ce:	d9fa      	bls.n	80072c6 <_free_r+0x42>
 80072d0:	6811      	ldr	r1, [r2, #0]
 80072d2:	1850      	adds	r0, r2, r1
 80072d4:	42a0      	cmp	r0, r4
 80072d6:	d10b      	bne.n	80072f0 <_free_r+0x6c>
 80072d8:	6820      	ldr	r0, [r4, #0]
 80072da:	4401      	add	r1, r0
 80072dc:	1850      	adds	r0, r2, r1
 80072de:	4283      	cmp	r3, r0
 80072e0:	6011      	str	r1, [r2, #0]
 80072e2:	d1e0      	bne.n	80072a6 <_free_r+0x22>
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	6053      	str	r3, [r2, #4]
 80072ea:	4408      	add	r0, r1
 80072ec:	6010      	str	r0, [r2, #0]
 80072ee:	e7da      	b.n	80072a6 <_free_r+0x22>
 80072f0:	d902      	bls.n	80072f8 <_free_r+0x74>
 80072f2:	230c      	movs	r3, #12
 80072f4:	602b      	str	r3, [r5, #0]
 80072f6:	e7d6      	b.n	80072a6 <_free_r+0x22>
 80072f8:	6820      	ldr	r0, [r4, #0]
 80072fa:	1821      	adds	r1, r4, r0
 80072fc:	428b      	cmp	r3, r1
 80072fe:	bf04      	itt	eq
 8007300:	6819      	ldreq	r1, [r3, #0]
 8007302:	685b      	ldreq	r3, [r3, #4]
 8007304:	6063      	str	r3, [r4, #4]
 8007306:	bf04      	itt	eq
 8007308:	1809      	addeq	r1, r1, r0
 800730a:	6021      	streq	r1, [r4, #0]
 800730c:	6054      	str	r4, [r2, #4]
 800730e:	e7ca      	b.n	80072a6 <_free_r+0x22>
 8007310:	bd38      	pop	{r3, r4, r5, pc}
 8007312:	bf00      	nop
 8007314:	20004060 	.word	0x20004060

08007318 <sbrk_aligned>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	4e0f      	ldr	r6, [pc, #60]	@ (8007358 <sbrk_aligned+0x40>)
 800731c:	460c      	mov	r4, r1
 800731e:	6831      	ldr	r1, [r6, #0]
 8007320:	4605      	mov	r5, r0
 8007322:	b911      	cbnz	r1, 800732a <sbrk_aligned+0x12>
 8007324:	f000 fba6 	bl	8007a74 <_sbrk_r>
 8007328:	6030      	str	r0, [r6, #0]
 800732a:	4621      	mov	r1, r4
 800732c:	4628      	mov	r0, r5
 800732e:	f000 fba1 	bl	8007a74 <_sbrk_r>
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	d103      	bne.n	800733e <sbrk_aligned+0x26>
 8007336:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800733a:	4620      	mov	r0, r4
 800733c:	bd70      	pop	{r4, r5, r6, pc}
 800733e:	1cc4      	adds	r4, r0, #3
 8007340:	f024 0403 	bic.w	r4, r4, #3
 8007344:	42a0      	cmp	r0, r4
 8007346:	d0f8      	beq.n	800733a <sbrk_aligned+0x22>
 8007348:	1a21      	subs	r1, r4, r0
 800734a:	4628      	mov	r0, r5
 800734c:	f000 fb92 	bl	8007a74 <_sbrk_r>
 8007350:	3001      	adds	r0, #1
 8007352:	d1f2      	bne.n	800733a <sbrk_aligned+0x22>
 8007354:	e7ef      	b.n	8007336 <sbrk_aligned+0x1e>
 8007356:	bf00      	nop
 8007358:	2000405c 	.word	0x2000405c

0800735c <_malloc_r>:
 800735c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007360:	1ccd      	adds	r5, r1, #3
 8007362:	f025 0503 	bic.w	r5, r5, #3
 8007366:	3508      	adds	r5, #8
 8007368:	2d0c      	cmp	r5, #12
 800736a:	bf38      	it	cc
 800736c:	250c      	movcc	r5, #12
 800736e:	2d00      	cmp	r5, #0
 8007370:	4606      	mov	r6, r0
 8007372:	db01      	blt.n	8007378 <_malloc_r+0x1c>
 8007374:	42a9      	cmp	r1, r5
 8007376:	d904      	bls.n	8007382 <_malloc_r+0x26>
 8007378:	230c      	movs	r3, #12
 800737a:	6033      	str	r3, [r6, #0]
 800737c:	2000      	movs	r0, #0
 800737e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007382:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007458 <_malloc_r+0xfc>
 8007386:	f000 f869 	bl	800745c <__malloc_lock>
 800738a:	f8d8 3000 	ldr.w	r3, [r8]
 800738e:	461c      	mov	r4, r3
 8007390:	bb44      	cbnz	r4, 80073e4 <_malloc_r+0x88>
 8007392:	4629      	mov	r1, r5
 8007394:	4630      	mov	r0, r6
 8007396:	f7ff ffbf 	bl	8007318 <sbrk_aligned>
 800739a:	1c43      	adds	r3, r0, #1
 800739c:	4604      	mov	r4, r0
 800739e:	d158      	bne.n	8007452 <_malloc_r+0xf6>
 80073a0:	f8d8 4000 	ldr.w	r4, [r8]
 80073a4:	4627      	mov	r7, r4
 80073a6:	2f00      	cmp	r7, #0
 80073a8:	d143      	bne.n	8007432 <_malloc_r+0xd6>
 80073aa:	2c00      	cmp	r4, #0
 80073ac:	d04b      	beq.n	8007446 <_malloc_r+0xea>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	4639      	mov	r1, r7
 80073b2:	4630      	mov	r0, r6
 80073b4:	eb04 0903 	add.w	r9, r4, r3
 80073b8:	f000 fb5c 	bl	8007a74 <_sbrk_r>
 80073bc:	4581      	cmp	r9, r0
 80073be:	d142      	bne.n	8007446 <_malloc_r+0xea>
 80073c0:	6821      	ldr	r1, [r4, #0]
 80073c2:	1a6d      	subs	r5, r5, r1
 80073c4:	4629      	mov	r1, r5
 80073c6:	4630      	mov	r0, r6
 80073c8:	f7ff ffa6 	bl	8007318 <sbrk_aligned>
 80073cc:	3001      	adds	r0, #1
 80073ce:	d03a      	beq.n	8007446 <_malloc_r+0xea>
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	442b      	add	r3, r5
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	f8d8 3000 	ldr.w	r3, [r8]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	bb62      	cbnz	r2, 8007438 <_malloc_r+0xdc>
 80073de:	f8c8 7000 	str.w	r7, [r8]
 80073e2:	e00f      	b.n	8007404 <_malloc_r+0xa8>
 80073e4:	6822      	ldr	r2, [r4, #0]
 80073e6:	1b52      	subs	r2, r2, r5
 80073e8:	d420      	bmi.n	800742c <_malloc_r+0xd0>
 80073ea:	2a0b      	cmp	r2, #11
 80073ec:	d917      	bls.n	800741e <_malloc_r+0xc2>
 80073ee:	1961      	adds	r1, r4, r5
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	6025      	str	r5, [r4, #0]
 80073f4:	bf18      	it	ne
 80073f6:	6059      	strne	r1, [r3, #4]
 80073f8:	6863      	ldr	r3, [r4, #4]
 80073fa:	bf08      	it	eq
 80073fc:	f8c8 1000 	streq.w	r1, [r8]
 8007400:	5162      	str	r2, [r4, r5]
 8007402:	604b      	str	r3, [r1, #4]
 8007404:	4630      	mov	r0, r6
 8007406:	f000 f82f 	bl	8007468 <__malloc_unlock>
 800740a:	f104 000b 	add.w	r0, r4, #11
 800740e:	1d23      	adds	r3, r4, #4
 8007410:	f020 0007 	bic.w	r0, r0, #7
 8007414:	1ac2      	subs	r2, r0, r3
 8007416:	bf1c      	itt	ne
 8007418:	1a1b      	subne	r3, r3, r0
 800741a:	50a3      	strne	r3, [r4, r2]
 800741c:	e7af      	b.n	800737e <_malloc_r+0x22>
 800741e:	6862      	ldr	r2, [r4, #4]
 8007420:	42a3      	cmp	r3, r4
 8007422:	bf0c      	ite	eq
 8007424:	f8c8 2000 	streq.w	r2, [r8]
 8007428:	605a      	strne	r2, [r3, #4]
 800742a:	e7eb      	b.n	8007404 <_malloc_r+0xa8>
 800742c:	4623      	mov	r3, r4
 800742e:	6864      	ldr	r4, [r4, #4]
 8007430:	e7ae      	b.n	8007390 <_malloc_r+0x34>
 8007432:	463c      	mov	r4, r7
 8007434:	687f      	ldr	r7, [r7, #4]
 8007436:	e7b6      	b.n	80073a6 <_malloc_r+0x4a>
 8007438:	461a      	mov	r2, r3
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	42a3      	cmp	r3, r4
 800743e:	d1fb      	bne.n	8007438 <_malloc_r+0xdc>
 8007440:	2300      	movs	r3, #0
 8007442:	6053      	str	r3, [r2, #4]
 8007444:	e7de      	b.n	8007404 <_malloc_r+0xa8>
 8007446:	230c      	movs	r3, #12
 8007448:	6033      	str	r3, [r6, #0]
 800744a:	4630      	mov	r0, r6
 800744c:	f000 f80c 	bl	8007468 <__malloc_unlock>
 8007450:	e794      	b.n	800737c <_malloc_r+0x20>
 8007452:	6005      	str	r5, [r0, #0]
 8007454:	e7d6      	b.n	8007404 <_malloc_r+0xa8>
 8007456:	bf00      	nop
 8007458:	20004060 	.word	0x20004060

0800745c <__malloc_lock>:
 800745c:	4801      	ldr	r0, [pc, #4]	@ (8007464 <__malloc_lock+0x8>)
 800745e:	f7ff bf01 	b.w	8007264 <__retarget_lock_acquire_recursive>
 8007462:	bf00      	nop
 8007464:	20004058 	.word	0x20004058

08007468 <__malloc_unlock>:
 8007468:	4801      	ldr	r0, [pc, #4]	@ (8007470 <__malloc_unlock+0x8>)
 800746a:	f7ff befc 	b.w	8007266 <__retarget_lock_release_recursive>
 800746e:	bf00      	nop
 8007470:	20004058 	.word	0x20004058

08007474 <__ssputs_r>:
 8007474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007478:	688e      	ldr	r6, [r1, #8]
 800747a:	461f      	mov	r7, r3
 800747c:	42be      	cmp	r6, r7
 800747e:	680b      	ldr	r3, [r1, #0]
 8007480:	4682      	mov	sl, r0
 8007482:	460c      	mov	r4, r1
 8007484:	4690      	mov	r8, r2
 8007486:	d82d      	bhi.n	80074e4 <__ssputs_r+0x70>
 8007488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800748c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007490:	d026      	beq.n	80074e0 <__ssputs_r+0x6c>
 8007492:	6965      	ldr	r5, [r4, #20]
 8007494:	6909      	ldr	r1, [r1, #16]
 8007496:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800749a:	eba3 0901 	sub.w	r9, r3, r1
 800749e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074a2:	1c7b      	adds	r3, r7, #1
 80074a4:	444b      	add	r3, r9
 80074a6:	106d      	asrs	r5, r5, #1
 80074a8:	429d      	cmp	r5, r3
 80074aa:	bf38      	it	cc
 80074ac:	461d      	movcc	r5, r3
 80074ae:	0553      	lsls	r3, r2, #21
 80074b0:	d527      	bpl.n	8007502 <__ssputs_r+0x8e>
 80074b2:	4629      	mov	r1, r5
 80074b4:	f7ff ff52 	bl	800735c <_malloc_r>
 80074b8:	4606      	mov	r6, r0
 80074ba:	b360      	cbz	r0, 8007516 <__ssputs_r+0xa2>
 80074bc:	6921      	ldr	r1, [r4, #16]
 80074be:	464a      	mov	r2, r9
 80074c0:	f7ff fed2 	bl	8007268 <memcpy>
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80074ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074ce:	81a3      	strh	r3, [r4, #12]
 80074d0:	6126      	str	r6, [r4, #16]
 80074d2:	6165      	str	r5, [r4, #20]
 80074d4:	444e      	add	r6, r9
 80074d6:	eba5 0509 	sub.w	r5, r5, r9
 80074da:	6026      	str	r6, [r4, #0]
 80074dc:	60a5      	str	r5, [r4, #8]
 80074de:	463e      	mov	r6, r7
 80074e0:	42be      	cmp	r6, r7
 80074e2:	d900      	bls.n	80074e6 <__ssputs_r+0x72>
 80074e4:	463e      	mov	r6, r7
 80074e6:	6820      	ldr	r0, [r4, #0]
 80074e8:	4632      	mov	r2, r6
 80074ea:	4641      	mov	r1, r8
 80074ec:	f000 faa8 	bl	8007a40 <memmove>
 80074f0:	68a3      	ldr	r3, [r4, #8]
 80074f2:	1b9b      	subs	r3, r3, r6
 80074f4:	60a3      	str	r3, [r4, #8]
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	4433      	add	r3, r6
 80074fa:	6023      	str	r3, [r4, #0]
 80074fc:	2000      	movs	r0, #0
 80074fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007502:	462a      	mov	r2, r5
 8007504:	f000 fac6 	bl	8007a94 <_realloc_r>
 8007508:	4606      	mov	r6, r0
 800750a:	2800      	cmp	r0, #0
 800750c:	d1e0      	bne.n	80074d0 <__ssputs_r+0x5c>
 800750e:	6921      	ldr	r1, [r4, #16]
 8007510:	4650      	mov	r0, sl
 8007512:	f7ff feb7 	bl	8007284 <_free_r>
 8007516:	230c      	movs	r3, #12
 8007518:	f8ca 3000 	str.w	r3, [sl]
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007522:	81a3      	strh	r3, [r4, #12]
 8007524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007528:	e7e9      	b.n	80074fe <__ssputs_r+0x8a>
	...

0800752c <_svfiprintf_r>:
 800752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007530:	4698      	mov	r8, r3
 8007532:	898b      	ldrh	r3, [r1, #12]
 8007534:	061b      	lsls	r3, r3, #24
 8007536:	b09d      	sub	sp, #116	@ 0x74
 8007538:	4607      	mov	r7, r0
 800753a:	460d      	mov	r5, r1
 800753c:	4614      	mov	r4, r2
 800753e:	d510      	bpl.n	8007562 <_svfiprintf_r+0x36>
 8007540:	690b      	ldr	r3, [r1, #16]
 8007542:	b973      	cbnz	r3, 8007562 <_svfiprintf_r+0x36>
 8007544:	2140      	movs	r1, #64	@ 0x40
 8007546:	f7ff ff09 	bl	800735c <_malloc_r>
 800754a:	6028      	str	r0, [r5, #0]
 800754c:	6128      	str	r0, [r5, #16]
 800754e:	b930      	cbnz	r0, 800755e <_svfiprintf_r+0x32>
 8007550:	230c      	movs	r3, #12
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007558:	b01d      	add	sp, #116	@ 0x74
 800755a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755e:	2340      	movs	r3, #64	@ 0x40
 8007560:	616b      	str	r3, [r5, #20]
 8007562:	2300      	movs	r3, #0
 8007564:	9309      	str	r3, [sp, #36]	@ 0x24
 8007566:	2320      	movs	r3, #32
 8007568:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800756c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007570:	2330      	movs	r3, #48	@ 0x30
 8007572:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007710 <_svfiprintf_r+0x1e4>
 8007576:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800757a:	f04f 0901 	mov.w	r9, #1
 800757e:	4623      	mov	r3, r4
 8007580:	469a      	mov	sl, r3
 8007582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007586:	b10a      	cbz	r2, 800758c <_svfiprintf_r+0x60>
 8007588:	2a25      	cmp	r2, #37	@ 0x25
 800758a:	d1f9      	bne.n	8007580 <_svfiprintf_r+0x54>
 800758c:	ebba 0b04 	subs.w	fp, sl, r4
 8007590:	d00b      	beq.n	80075aa <_svfiprintf_r+0x7e>
 8007592:	465b      	mov	r3, fp
 8007594:	4622      	mov	r2, r4
 8007596:	4629      	mov	r1, r5
 8007598:	4638      	mov	r0, r7
 800759a:	f7ff ff6b 	bl	8007474 <__ssputs_r>
 800759e:	3001      	adds	r0, #1
 80075a0:	f000 80a7 	beq.w	80076f2 <_svfiprintf_r+0x1c6>
 80075a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075a6:	445a      	add	r2, fp
 80075a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80075aa:	f89a 3000 	ldrb.w	r3, [sl]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 809f 	beq.w	80076f2 <_svfiprintf_r+0x1c6>
 80075b4:	2300      	movs	r3, #0
 80075b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075be:	f10a 0a01 	add.w	sl, sl, #1
 80075c2:	9304      	str	r3, [sp, #16]
 80075c4:	9307      	str	r3, [sp, #28]
 80075c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80075cc:	4654      	mov	r4, sl
 80075ce:	2205      	movs	r2, #5
 80075d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d4:	484e      	ldr	r0, [pc, #312]	@ (8007710 <_svfiprintf_r+0x1e4>)
 80075d6:	f7f8 fe1b 	bl	8000210 <memchr>
 80075da:	9a04      	ldr	r2, [sp, #16]
 80075dc:	b9d8      	cbnz	r0, 8007616 <_svfiprintf_r+0xea>
 80075de:	06d0      	lsls	r0, r2, #27
 80075e0:	bf44      	itt	mi
 80075e2:	2320      	movmi	r3, #32
 80075e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075e8:	0711      	lsls	r1, r2, #28
 80075ea:	bf44      	itt	mi
 80075ec:	232b      	movmi	r3, #43	@ 0x2b
 80075ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075f2:	f89a 3000 	ldrb.w	r3, [sl]
 80075f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80075f8:	d015      	beq.n	8007626 <_svfiprintf_r+0xfa>
 80075fa:	9a07      	ldr	r2, [sp, #28]
 80075fc:	4654      	mov	r4, sl
 80075fe:	2000      	movs	r0, #0
 8007600:	f04f 0c0a 	mov.w	ip, #10
 8007604:	4621      	mov	r1, r4
 8007606:	f811 3b01 	ldrb.w	r3, [r1], #1
 800760a:	3b30      	subs	r3, #48	@ 0x30
 800760c:	2b09      	cmp	r3, #9
 800760e:	d94b      	bls.n	80076a8 <_svfiprintf_r+0x17c>
 8007610:	b1b0      	cbz	r0, 8007640 <_svfiprintf_r+0x114>
 8007612:	9207      	str	r2, [sp, #28]
 8007614:	e014      	b.n	8007640 <_svfiprintf_r+0x114>
 8007616:	eba0 0308 	sub.w	r3, r0, r8
 800761a:	fa09 f303 	lsl.w	r3, r9, r3
 800761e:	4313      	orrs	r3, r2
 8007620:	9304      	str	r3, [sp, #16]
 8007622:	46a2      	mov	sl, r4
 8007624:	e7d2      	b.n	80075cc <_svfiprintf_r+0xa0>
 8007626:	9b03      	ldr	r3, [sp, #12]
 8007628:	1d19      	adds	r1, r3, #4
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	9103      	str	r1, [sp, #12]
 800762e:	2b00      	cmp	r3, #0
 8007630:	bfbb      	ittet	lt
 8007632:	425b      	neglt	r3, r3
 8007634:	f042 0202 	orrlt.w	r2, r2, #2
 8007638:	9307      	strge	r3, [sp, #28]
 800763a:	9307      	strlt	r3, [sp, #28]
 800763c:	bfb8      	it	lt
 800763e:	9204      	strlt	r2, [sp, #16]
 8007640:	7823      	ldrb	r3, [r4, #0]
 8007642:	2b2e      	cmp	r3, #46	@ 0x2e
 8007644:	d10a      	bne.n	800765c <_svfiprintf_r+0x130>
 8007646:	7863      	ldrb	r3, [r4, #1]
 8007648:	2b2a      	cmp	r3, #42	@ 0x2a
 800764a:	d132      	bne.n	80076b2 <_svfiprintf_r+0x186>
 800764c:	9b03      	ldr	r3, [sp, #12]
 800764e:	1d1a      	adds	r2, r3, #4
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	9203      	str	r2, [sp, #12]
 8007654:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007658:	3402      	adds	r4, #2
 800765a:	9305      	str	r3, [sp, #20]
 800765c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007720 <_svfiprintf_r+0x1f4>
 8007660:	7821      	ldrb	r1, [r4, #0]
 8007662:	2203      	movs	r2, #3
 8007664:	4650      	mov	r0, sl
 8007666:	f7f8 fdd3 	bl	8000210 <memchr>
 800766a:	b138      	cbz	r0, 800767c <_svfiprintf_r+0x150>
 800766c:	9b04      	ldr	r3, [sp, #16]
 800766e:	eba0 000a 	sub.w	r0, r0, sl
 8007672:	2240      	movs	r2, #64	@ 0x40
 8007674:	4082      	lsls	r2, r0
 8007676:	4313      	orrs	r3, r2
 8007678:	3401      	adds	r4, #1
 800767a:	9304      	str	r3, [sp, #16]
 800767c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007680:	4824      	ldr	r0, [pc, #144]	@ (8007714 <_svfiprintf_r+0x1e8>)
 8007682:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007686:	2206      	movs	r2, #6
 8007688:	f7f8 fdc2 	bl	8000210 <memchr>
 800768c:	2800      	cmp	r0, #0
 800768e:	d036      	beq.n	80076fe <_svfiprintf_r+0x1d2>
 8007690:	4b21      	ldr	r3, [pc, #132]	@ (8007718 <_svfiprintf_r+0x1ec>)
 8007692:	bb1b      	cbnz	r3, 80076dc <_svfiprintf_r+0x1b0>
 8007694:	9b03      	ldr	r3, [sp, #12]
 8007696:	3307      	adds	r3, #7
 8007698:	f023 0307 	bic.w	r3, r3, #7
 800769c:	3308      	adds	r3, #8
 800769e:	9303      	str	r3, [sp, #12]
 80076a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a2:	4433      	add	r3, r6
 80076a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80076a6:	e76a      	b.n	800757e <_svfiprintf_r+0x52>
 80076a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ac:	460c      	mov	r4, r1
 80076ae:	2001      	movs	r0, #1
 80076b0:	e7a8      	b.n	8007604 <_svfiprintf_r+0xd8>
 80076b2:	2300      	movs	r3, #0
 80076b4:	3401      	adds	r4, #1
 80076b6:	9305      	str	r3, [sp, #20]
 80076b8:	4619      	mov	r1, r3
 80076ba:	f04f 0c0a 	mov.w	ip, #10
 80076be:	4620      	mov	r0, r4
 80076c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076c4:	3a30      	subs	r2, #48	@ 0x30
 80076c6:	2a09      	cmp	r2, #9
 80076c8:	d903      	bls.n	80076d2 <_svfiprintf_r+0x1a6>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d0c6      	beq.n	800765c <_svfiprintf_r+0x130>
 80076ce:	9105      	str	r1, [sp, #20]
 80076d0:	e7c4      	b.n	800765c <_svfiprintf_r+0x130>
 80076d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80076d6:	4604      	mov	r4, r0
 80076d8:	2301      	movs	r3, #1
 80076da:	e7f0      	b.n	80076be <_svfiprintf_r+0x192>
 80076dc:	ab03      	add	r3, sp, #12
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	462a      	mov	r2, r5
 80076e2:	4b0e      	ldr	r3, [pc, #56]	@ (800771c <_svfiprintf_r+0x1f0>)
 80076e4:	a904      	add	r1, sp, #16
 80076e6:	4638      	mov	r0, r7
 80076e8:	f3af 8000 	nop.w
 80076ec:	1c42      	adds	r2, r0, #1
 80076ee:	4606      	mov	r6, r0
 80076f0:	d1d6      	bne.n	80076a0 <_svfiprintf_r+0x174>
 80076f2:	89ab      	ldrh	r3, [r5, #12]
 80076f4:	065b      	lsls	r3, r3, #25
 80076f6:	f53f af2d 	bmi.w	8007554 <_svfiprintf_r+0x28>
 80076fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076fc:	e72c      	b.n	8007558 <_svfiprintf_r+0x2c>
 80076fe:	ab03      	add	r3, sp, #12
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	462a      	mov	r2, r5
 8007704:	4b05      	ldr	r3, [pc, #20]	@ (800771c <_svfiprintf_r+0x1f0>)
 8007706:	a904      	add	r1, sp, #16
 8007708:	4638      	mov	r0, r7
 800770a:	f000 f879 	bl	8007800 <_printf_i>
 800770e:	e7ed      	b.n	80076ec <_svfiprintf_r+0x1c0>
 8007710:	08007bc8 	.word	0x08007bc8
 8007714:	08007bd2 	.word	0x08007bd2
 8007718:	00000000 	.word	0x00000000
 800771c:	08007475 	.word	0x08007475
 8007720:	08007bce 	.word	0x08007bce

08007724 <_printf_common>:
 8007724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007728:	4616      	mov	r6, r2
 800772a:	4698      	mov	r8, r3
 800772c:	688a      	ldr	r2, [r1, #8]
 800772e:	690b      	ldr	r3, [r1, #16]
 8007730:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007734:	4293      	cmp	r3, r2
 8007736:	bfb8      	it	lt
 8007738:	4613      	movlt	r3, r2
 800773a:	6033      	str	r3, [r6, #0]
 800773c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007740:	4607      	mov	r7, r0
 8007742:	460c      	mov	r4, r1
 8007744:	b10a      	cbz	r2, 800774a <_printf_common+0x26>
 8007746:	3301      	adds	r3, #1
 8007748:	6033      	str	r3, [r6, #0]
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	0699      	lsls	r1, r3, #26
 800774e:	bf42      	ittt	mi
 8007750:	6833      	ldrmi	r3, [r6, #0]
 8007752:	3302      	addmi	r3, #2
 8007754:	6033      	strmi	r3, [r6, #0]
 8007756:	6825      	ldr	r5, [r4, #0]
 8007758:	f015 0506 	ands.w	r5, r5, #6
 800775c:	d106      	bne.n	800776c <_printf_common+0x48>
 800775e:	f104 0a19 	add.w	sl, r4, #25
 8007762:	68e3      	ldr	r3, [r4, #12]
 8007764:	6832      	ldr	r2, [r6, #0]
 8007766:	1a9b      	subs	r3, r3, r2
 8007768:	42ab      	cmp	r3, r5
 800776a:	dc26      	bgt.n	80077ba <_printf_common+0x96>
 800776c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007770:	6822      	ldr	r2, [r4, #0]
 8007772:	3b00      	subs	r3, #0
 8007774:	bf18      	it	ne
 8007776:	2301      	movne	r3, #1
 8007778:	0692      	lsls	r2, r2, #26
 800777a:	d42b      	bmi.n	80077d4 <_printf_common+0xb0>
 800777c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007780:	4641      	mov	r1, r8
 8007782:	4638      	mov	r0, r7
 8007784:	47c8      	blx	r9
 8007786:	3001      	adds	r0, #1
 8007788:	d01e      	beq.n	80077c8 <_printf_common+0xa4>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	6922      	ldr	r2, [r4, #16]
 800778e:	f003 0306 	and.w	r3, r3, #6
 8007792:	2b04      	cmp	r3, #4
 8007794:	bf02      	ittt	eq
 8007796:	68e5      	ldreq	r5, [r4, #12]
 8007798:	6833      	ldreq	r3, [r6, #0]
 800779a:	1aed      	subeq	r5, r5, r3
 800779c:	68a3      	ldr	r3, [r4, #8]
 800779e:	bf0c      	ite	eq
 80077a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077a4:	2500      	movne	r5, #0
 80077a6:	4293      	cmp	r3, r2
 80077a8:	bfc4      	itt	gt
 80077aa:	1a9b      	subgt	r3, r3, r2
 80077ac:	18ed      	addgt	r5, r5, r3
 80077ae:	2600      	movs	r6, #0
 80077b0:	341a      	adds	r4, #26
 80077b2:	42b5      	cmp	r5, r6
 80077b4:	d11a      	bne.n	80077ec <_printf_common+0xc8>
 80077b6:	2000      	movs	r0, #0
 80077b8:	e008      	b.n	80077cc <_printf_common+0xa8>
 80077ba:	2301      	movs	r3, #1
 80077bc:	4652      	mov	r2, sl
 80077be:	4641      	mov	r1, r8
 80077c0:	4638      	mov	r0, r7
 80077c2:	47c8      	blx	r9
 80077c4:	3001      	adds	r0, #1
 80077c6:	d103      	bne.n	80077d0 <_printf_common+0xac>
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d0:	3501      	adds	r5, #1
 80077d2:	e7c6      	b.n	8007762 <_printf_common+0x3e>
 80077d4:	18e1      	adds	r1, r4, r3
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	2030      	movs	r0, #48	@ 0x30
 80077da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077de:	4422      	add	r2, r4
 80077e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077e8:	3302      	adds	r3, #2
 80077ea:	e7c7      	b.n	800777c <_printf_common+0x58>
 80077ec:	2301      	movs	r3, #1
 80077ee:	4622      	mov	r2, r4
 80077f0:	4641      	mov	r1, r8
 80077f2:	4638      	mov	r0, r7
 80077f4:	47c8      	blx	r9
 80077f6:	3001      	adds	r0, #1
 80077f8:	d0e6      	beq.n	80077c8 <_printf_common+0xa4>
 80077fa:	3601      	adds	r6, #1
 80077fc:	e7d9      	b.n	80077b2 <_printf_common+0x8e>
	...

08007800 <_printf_i>:
 8007800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007804:	7e0f      	ldrb	r7, [r1, #24]
 8007806:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007808:	2f78      	cmp	r7, #120	@ 0x78
 800780a:	4691      	mov	r9, r2
 800780c:	4680      	mov	r8, r0
 800780e:	460c      	mov	r4, r1
 8007810:	469a      	mov	sl, r3
 8007812:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007816:	d807      	bhi.n	8007828 <_printf_i+0x28>
 8007818:	2f62      	cmp	r7, #98	@ 0x62
 800781a:	d80a      	bhi.n	8007832 <_printf_i+0x32>
 800781c:	2f00      	cmp	r7, #0
 800781e:	f000 80d2 	beq.w	80079c6 <_printf_i+0x1c6>
 8007822:	2f58      	cmp	r7, #88	@ 0x58
 8007824:	f000 80b9 	beq.w	800799a <_printf_i+0x19a>
 8007828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800782c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007830:	e03a      	b.n	80078a8 <_printf_i+0xa8>
 8007832:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007836:	2b15      	cmp	r3, #21
 8007838:	d8f6      	bhi.n	8007828 <_printf_i+0x28>
 800783a:	a101      	add	r1, pc, #4	@ (adr r1, 8007840 <_printf_i+0x40>)
 800783c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007840:	08007899 	.word	0x08007899
 8007844:	080078ad 	.word	0x080078ad
 8007848:	08007829 	.word	0x08007829
 800784c:	08007829 	.word	0x08007829
 8007850:	08007829 	.word	0x08007829
 8007854:	08007829 	.word	0x08007829
 8007858:	080078ad 	.word	0x080078ad
 800785c:	08007829 	.word	0x08007829
 8007860:	08007829 	.word	0x08007829
 8007864:	08007829 	.word	0x08007829
 8007868:	08007829 	.word	0x08007829
 800786c:	080079ad 	.word	0x080079ad
 8007870:	080078d7 	.word	0x080078d7
 8007874:	08007967 	.word	0x08007967
 8007878:	08007829 	.word	0x08007829
 800787c:	08007829 	.word	0x08007829
 8007880:	080079cf 	.word	0x080079cf
 8007884:	08007829 	.word	0x08007829
 8007888:	080078d7 	.word	0x080078d7
 800788c:	08007829 	.word	0x08007829
 8007890:	08007829 	.word	0x08007829
 8007894:	0800796f 	.word	0x0800796f
 8007898:	6833      	ldr	r3, [r6, #0]
 800789a:	1d1a      	adds	r2, r3, #4
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6032      	str	r2, [r6, #0]
 80078a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078a8:	2301      	movs	r3, #1
 80078aa:	e09d      	b.n	80079e8 <_printf_i+0x1e8>
 80078ac:	6833      	ldr	r3, [r6, #0]
 80078ae:	6820      	ldr	r0, [r4, #0]
 80078b0:	1d19      	adds	r1, r3, #4
 80078b2:	6031      	str	r1, [r6, #0]
 80078b4:	0606      	lsls	r6, r0, #24
 80078b6:	d501      	bpl.n	80078bc <_printf_i+0xbc>
 80078b8:	681d      	ldr	r5, [r3, #0]
 80078ba:	e003      	b.n	80078c4 <_printf_i+0xc4>
 80078bc:	0645      	lsls	r5, r0, #25
 80078be:	d5fb      	bpl.n	80078b8 <_printf_i+0xb8>
 80078c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078c4:	2d00      	cmp	r5, #0
 80078c6:	da03      	bge.n	80078d0 <_printf_i+0xd0>
 80078c8:	232d      	movs	r3, #45	@ 0x2d
 80078ca:	426d      	negs	r5, r5
 80078cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078d0:	4859      	ldr	r0, [pc, #356]	@ (8007a38 <_printf_i+0x238>)
 80078d2:	230a      	movs	r3, #10
 80078d4:	e011      	b.n	80078fa <_printf_i+0xfa>
 80078d6:	6821      	ldr	r1, [r4, #0]
 80078d8:	6833      	ldr	r3, [r6, #0]
 80078da:	0608      	lsls	r0, r1, #24
 80078dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80078e0:	d402      	bmi.n	80078e8 <_printf_i+0xe8>
 80078e2:	0649      	lsls	r1, r1, #25
 80078e4:	bf48      	it	mi
 80078e6:	b2ad      	uxthmi	r5, r5
 80078e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80078ea:	4853      	ldr	r0, [pc, #332]	@ (8007a38 <_printf_i+0x238>)
 80078ec:	6033      	str	r3, [r6, #0]
 80078ee:	bf14      	ite	ne
 80078f0:	230a      	movne	r3, #10
 80078f2:	2308      	moveq	r3, #8
 80078f4:	2100      	movs	r1, #0
 80078f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078fa:	6866      	ldr	r6, [r4, #4]
 80078fc:	60a6      	str	r6, [r4, #8]
 80078fe:	2e00      	cmp	r6, #0
 8007900:	bfa2      	ittt	ge
 8007902:	6821      	ldrge	r1, [r4, #0]
 8007904:	f021 0104 	bicge.w	r1, r1, #4
 8007908:	6021      	strge	r1, [r4, #0]
 800790a:	b90d      	cbnz	r5, 8007910 <_printf_i+0x110>
 800790c:	2e00      	cmp	r6, #0
 800790e:	d04b      	beq.n	80079a8 <_printf_i+0x1a8>
 8007910:	4616      	mov	r6, r2
 8007912:	fbb5 f1f3 	udiv	r1, r5, r3
 8007916:	fb03 5711 	mls	r7, r3, r1, r5
 800791a:	5dc7      	ldrb	r7, [r0, r7]
 800791c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007920:	462f      	mov	r7, r5
 8007922:	42bb      	cmp	r3, r7
 8007924:	460d      	mov	r5, r1
 8007926:	d9f4      	bls.n	8007912 <_printf_i+0x112>
 8007928:	2b08      	cmp	r3, #8
 800792a:	d10b      	bne.n	8007944 <_printf_i+0x144>
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	07df      	lsls	r7, r3, #31
 8007930:	d508      	bpl.n	8007944 <_printf_i+0x144>
 8007932:	6923      	ldr	r3, [r4, #16]
 8007934:	6861      	ldr	r1, [r4, #4]
 8007936:	4299      	cmp	r1, r3
 8007938:	bfde      	ittt	le
 800793a:	2330      	movle	r3, #48	@ 0x30
 800793c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007940:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007944:	1b92      	subs	r2, r2, r6
 8007946:	6122      	str	r2, [r4, #16]
 8007948:	f8cd a000 	str.w	sl, [sp]
 800794c:	464b      	mov	r3, r9
 800794e:	aa03      	add	r2, sp, #12
 8007950:	4621      	mov	r1, r4
 8007952:	4640      	mov	r0, r8
 8007954:	f7ff fee6 	bl	8007724 <_printf_common>
 8007958:	3001      	adds	r0, #1
 800795a:	d14a      	bne.n	80079f2 <_printf_i+0x1f2>
 800795c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007960:	b004      	add	sp, #16
 8007962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	f043 0320 	orr.w	r3, r3, #32
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	4833      	ldr	r0, [pc, #204]	@ (8007a3c <_printf_i+0x23c>)
 8007970:	2778      	movs	r7, #120	@ 0x78
 8007972:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	6831      	ldr	r1, [r6, #0]
 800797a:	061f      	lsls	r7, r3, #24
 800797c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007980:	d402      	bmi.n	8007988 <_printf_i+0x188>
 8007982:	065f      	lsls	r7, r3, #25
 8007984:	bf48      	it	mi
 8007986:	b2ad      	uxthmi	r5, r5
 8007988:	6031      	str	r1, [r6, #0]
 800798a:	07d9      	lsls	r1, r3, #31
 800798c:	bf44      	itt	mi
 800798e:	f043 0320 	orrmi.w	r3, r3, #32
 8007992:	6023      	strmi	r3, [r4, #0]
 8007994:	b11d      	cbz	r5, 800799e <_printf_i+0x19e>
 8007996:	2310      	movs	r3, #16
 8007998:	e7ac      	b.n	80078f4 <_printf_i+0xf4>
 800799a:	4827      	ldr	r0, [pc, #156]	@ (8007a38 <_printf_i+0x238>)
 800799c:	e7e9      	b.n	8007972 <_printf_i+0x172>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	f023 0320 	bic.w	r3, r3, #32
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	e7f6      	b.n	8007996 <_printf_i+0x196>
 80079a8:	4616      	mov	r6, r2
 80079aa:	e7bd      	b.n	8007928 <_printf_i+0x128>
 80079ac:	6833      	ldr	r3, [r6, #0]
 80079ae:	6825      	ldr	r5, [r4, #0]
 80079b0:	6961      	ldr	r1, [r4, #20]
 80079b2:	1d18      	adds	r0, r3, #4
 80079b4:	6030      	str	r0, [r6, #0]
 80079b6:	062e      	lsls	r6, r5, #24
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	d501      	bpl.n	80079c0 <_printf_i+0x1c0>
 80079bc:	6019      	str	r1, [r3, #0]
 80079be:	e002      	b.n	80079c6 <_printf_i+0x1c6>
 80079c0:	0668      	lsls	r0, r5, #25
 80079c2:	d5fb      	bpl.n	80079bc <_printf_i+0x1bc>
 80079c4:	8019      	strh	r1, [r3, #0]
 80079c6:	2300      	movs	r3, #0
 80079c8:	6123      	str	r3, [r4, #16]
 80079ca:	4616      	mov	r6, r2
 80079cc:	e7bc      	b.n	8007948 <_printf_i+0x148>
 80079ce:	6833      	ldr	r3, [r6, #0]
 80079d0:	1d1a      	adds	r2, r3, #4
 80079d2:	6032      	str	r2, [r6, #0]
 80079d4:	681e      	ldr	r6, [r3, #0]
 80079d6:	6862      	ldr	r2, [r4, #4]
 80079d8:	2100      	movs	r1, #0
 80079da:	4630      	mov	r0, r6
 80079dc:	f7f8 fc18 	bl	8000210 <memchr>
 80079e0:	b108      	cbz	r0, 80079e6 <_printf_i+0x1e6>
 80079e2:	1b80      	subs	r0, r0, r6
 80079e4:	6060      	str	r0, [r4, #4]
 80079e6:	6863      	ldr	r3, [r4, #4]
 80079e8:	6123      	str	r3, [r4, #16]
 80079ea:	2300      	movs	r3, #0
 80079ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079f0:	e7aa      	b.n	8007948 <_printf_i+0x148>
 80079f2:	6923      	ldr	r3, [r4, #16]
 80079f4:	4632      	mov	r2, r6
 80079f6:	4649      	mov	r1, r9
 80079f8:	4640      	mov	r0, r8
 80079fa:	47d0      	blx	sl
 80079fc:	3001      	adds	r0, #1
 80079fe:	d0ad      	beq.n	800795c <_printf_i+0x15c>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	079b      	lsls	r3, r3, #30
 8007a04:	d413      	bmi.n	8007a2e <_printf_i+0x22e>
 8007a06:	68e0      	ldr	r0, [r4, #12]
 8007a08:	9b03      	ldr	r3, [sp, #12]
 8007a0a:	4298      	cmp	r0, r3
 8007a0c:	bfb8      	it	lt
 8007a0e:	4618      	movlt	r0, r3
 8007a10:	e7a6      	b.n	8007960 <_printf_i+0x160>
 8007a12:	2301      	movs	r3, #1
 8007a14:	4632      	mov	r2, r6
 8007a16:	4649      	mov	r1, r9
 8007a18:	4640      	mov	r0, r8
 8007a1a:	47d0      	blx	sl
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	d09d      	beq.n	800795c <_printf_i+0x15c>
 8007a20:	3501      	adds	r5, #1
 8007a22:	68e3      	ldr	r3, [r4, #12]
 8007a24:	9903      	ldr	r1, [sp, #12]
 8007a26:	1a5b      	subs	r3, r3, r1
 8007a28:	42ab      	cmp	r3, r5
 8007a2a:	dcf2      	bgt.n	8007a12 <_printf_i+0x212>
 8007a2c:	e7eb      	b.n	8007a06 <_printf_i+0x206>
 8007a2e:	2500      	movs	r5, #0
 8007a30:	f104 0619 	add.w	r6, r4, #25
 8007a34:	e7f5      	b.n	8007a22 <_printf_i+0x222>
 8007a36:	bf00      	nop
 8007a38:	08007bd9 	.word	0x08007bd9
 8007a3c:	08007bea 	.word	0x08007bea

08007a40 <memmove>:
 8007a40:	4288      	cmp	r0, r1
 8007a42:	b510      	push	{r4, lr}
 8007a44:	eb01 0402 	add.w	r4, r1, r2
 8007a48:	d902      	bls.n	8007a50 <memmove+0x10>
 8007a4a:	4284      	cmp	r4, r0
 8007a4c:	4623      	mov	r3, r4
 8007a4e:	d807      	bhi.n	8007a60 <memmove+0x20>
 8007a50:	1e43      	subs	r3, r0, #1
 8007a52:	42a1      	cmp	r1, r4
 8007a54:	d008      	beq.n	8007a68 <memmove+0x28>
 8007a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a5e:	e7f8      	b.n	8007a52 <memmove+0x12>
 8007a60:	4402      	add	r2, r0
 8007a62:	4601      	mov	r1, r0
 8007a64:	428a      	cmp	r2, r1
 8007a66:	d100      	bne.n	8007a6a <memmove+0x2a>
 8007a68:	bd10      	pop	{r4, pc}
 8007a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a72:	e7f7      	b.n	8007a64 <memmove+0x24>

08007a74 <_sbrk_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	4d06      	ldr	r5, [pc, #24]	@ (8007a90 <_sbrk_r+0x1c>)
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	602b      	str	r3, [r5, #0]
 8007a80:	f7fc fafe 	bl	8004080 <_sbrk>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	d102      	bne.n	8007a8e <_sbrk_r+0x1a>
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	b103      	cbz	r3, 8007a8e <_sbrk_r+0x1a>
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
 8007a90:	20004054 	.word	0x20004054

08007a94 <_realloc_r>:
 8007a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a98:	4680      	mov	r8, r0
 8007a9a:	4615      	mov	r5, r2
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	b921      	cbnz	r1, 8007aaa <_realloc_r+0x16>
 8007aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	f7ff bc59 	b.w	800735c <_malloc_r>
 8007aaa:	b92a      	cbnz	r2, 8007ab8 <_realloc_r+0x24>
 8007aac:	f7ff fbea 	bl	8007284 <_free_r>
 8007ab0:	2400      	movs	r4, #0
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab8:	f000 f81a 	bl	8007af0 <_malloc_usable_size_r>
 8007abc:	4285      	cmp	r5, r0
 8007abe:	4606      	mov	r6, r0
 8007ac0:	d802      	bhi.n	8007ac8 <_realloc_r+0x34>
 8007ac2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007ac6:	d8f4      	bhi.n	8007ab2 <_realloc_r+0x1e>
 8007ac8:	4629      	mov	r1, r5
 8007aca:	4640      	mov	r0, r8
 8007acc:	f7ff fc46 	bl	800735c <_malloc_r>
 8007ad0:	4607      	mov	r7, r0
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	d0ec      	beq.n	8007ab0 <_realloc_r+0x1c>
 8007ad6:	42b5      	cmp	r5, r6
 8007ad8:	462a      	mov	r2, r5
 8007ada:	4621      	mov	r1, r4
 8007adc:	bf28      	it	cs
 8007ade:	4632      	movcs	r2, r6
 8007ae0:	f7ff fbc2 	bl	8007268 <memcpy>
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	f7ff fbcc 	bl	8007284 <_free_r>
 8007aec:	463c      	mov	r4, r7
 8007aee:	e7e0      	b.n	8007ab2 <_realloc_r+0x1e>

08007af0 <_malloc_usable_size_r>:
 8007af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007af4:	1f18      	subs	r0, r3, #4
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	bfbc      	itt	lt
 8007afa:	580b      	ldrlt	r3, [r1, r0]
 8007afc:	18c0      	addlt	r0, r0, r3
 8007afe:	4770      	bx	lr

08007b00 <_init>:
 8007b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b02:	bf00      	nop
 8007b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b06:	bc08      	pop	{r3}
 8007b08:	469e      	mov	lr, r3
 8007b0a:	4770      	bx	lr

08007b0c <_fini>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	bf00      	nop
 8007b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b12:	bc08      	pop	{r3}
 8007b14:	469e      	mov	lr, r3
 8007b16:	4770      	bx	lr
