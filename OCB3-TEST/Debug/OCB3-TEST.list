
OCB3-TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000789c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08007a6c  08007a6c  00017a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b40  08007b40  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007b40  08007b40  00017b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b48  08007b48  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b4c  08007b4c  00017b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08007b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  08007be8  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  08007c88  00020138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00003d84  200001d8  08007d28  000201d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20003f5c  08007d28  00023f5c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 15 .debug_info   00012db0  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000292a  00000000  00000000  00032ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000e68  00000000  00000000  00035928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000b16  00000000  00000000  00036790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00027cc6  00000000  00000000  000372a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000122f7  00000000  00000000  0005ef6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f1b83  00000000  00000000  00071263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000040dc  00000000  00000000  00162de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005d  00000000  00000000  00166ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007a54 	.word	0x08007a54

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08007a54 	.word	0x08007a54

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <OCB3_INIT>:
void divide_plaintext(unsigned char* plaintext, unsigned char* ptext0,  unsigned char* ptext1,unsigned int plaintext_size);
void union_ciphertext(unsigned char* ciphertext, unsigned char* ctext0,  unsigned char* ctext1,unsigned int plaintext_size);



void OCB3_INIT(unsigned char* key){
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b0e7      	sub	sp, #412	; 0x19c
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80005b6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80005ba:	6018      	str	r0, [r3, #0]

	uint8_t L_asterisk[16]={0,0,0,0 ,0,0,0,0, 0,0,0,0, 0,0,0,0};
 80005bc:	4b30      	ldr	r3, [pc, #192]	; (8000680 <OCB3_INIT+0xd4>)
 80005be:	f507 74be 	add.w	r4, r7, #380	; 0x17c
 80005c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t L_0[16]={0,0,0,0 ,0,0,0,0, 0,0,0,0, 0,0,0,0};
 80005c8:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <OCB3_INIT+0xd4>)
 80005ca:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 80005ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t rkeys_ffs[88];
	aes128_keyschedule_ffs(rkeys_ffs, key, key);
 80005d4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80005d8:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 80005dc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80005e0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80005e4:	f107 000c 	add.w	r0, r7, #12
 80005e8:	6812      	ldr	r2, [r2, #0]
 80005ea:	6819      	ldr	r1, [r3, #0]
 80005ec:	f002 fd30 	bl	8003050 <aes128_keyschedule_ffs>


	aes128_encrypt_ffs(L_0, L_asterisk, L_0, L_0, rkeys_ffs);
 80005f0:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 80005f4:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 80005f8:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80005fc:	f507 70b6 	add.w	r0, r7, #364	; 0x16c
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	4623      	mov	r3, r4
 8000608:	f002 faa2 	bl	8002b50 <aes128_encrypt_ffs>


	// array_copy(L_asterisk, L_dollar, 16);
    // pbuf(L_asterisk, 16, "L_asterisk: ");
	double_block(L_dollar,L_asterisk);
 800060c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000610:	4619      	mov	r1, r3
 8000612:	481c      	ldr	r0, [pc, #112]	; (8000684 <OCB3_INIT+0xd8>)
 8000614:	f000 f859 	bl	80006ca <double_block>
    // pbuf(L_dollar, 16, "L_dollar: ");
    // pbuf(L[0], 16, "L[0]: ");
	double_block(L[0],L_dollar);
 8000618:	491a      	ldr	r1, [pc, #104]	; (8000684 <OCB3_INIT+0xd8>)
 800061a:	481b      	ldr	r0, [pc, #108]	; (8000688 <OCB3_INIT+0xdc>)
 800061c:	f000 f855 	bl	80006ca <double_block>
    // pbuf(L[0], 16, "L: ");

	for (int i = 1; i < L_size; i++) {
 8000620:	2301      	movs	r3, #1
 8000622:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8000626:	e021      	b.n	800066c <OCB3_INIT+0xc0>
		array_copy(L[i-1], L[i], 16);
 8000628:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800062c:	3b01      	subs	r3, #1
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	4a15      	ldr	r2, [pc, #84]	; (8000688 <OCB3_INIT+0xdc>)
 8000632:	1898      	adds	r0, r3, r2
 8000634:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000638:	011b      	lsls	r3, r3, #4
 800063a:	4a13      	ldr	r2, [pc, #76]	; (8000688 <OCB3_INIT+0xdc>)
 800063c:	4413      	add	r3, r2
 800063e:	2210      	movs	r2, #16
 8000640:	4619      	mov	r1, r3
 8000642:	f000 f823 	bl	800068c <array_copy>
		double_block(L[i],L[i]);
 8000646:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <OCB3_INIT+0xdc>)
 800064e:	441a      	add	r2, r3
 8000650:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000654:	011b      	lsls	r3, r3, #4
 8000656:	490c      	ldr	r1, [pc, #48]	; (8000688 <OCB3_INIT+0xdc>)
 8000658:	440b      	add	r3, r1
 800065a:	4619      	mov	r1, r3
 800065c:	4610      	mov	r0, r2
 800065e:	f000 f834 	bl	80006ca <double_block>
	for (int i = 1; i < L_size; i++) {
 8000662:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000666:	3301      	adds	r3, #1
 8000668:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800066c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000670:	2b0f      	cmp	r3, #15
 8000672:	ddd9      	ble.n	8000628 <OCB3_INIT+0x7c>
        // pbuf(L[i], 16, "L: ");
	}
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}
 8000680:	08007a6c 	.word	0x08007a6c
 8000684:	200002f4 	.word	0x200002f4
 8000688:	200001f4 	.word	0x200001f4

0800068c <array_copy>:

void array_copy(uint8_t *A, uint8_t *B, uint32_t size){
 800068c:	b480      	push	{r7}
 800068e:	b087      	sub	sp, #28
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < size; ++i) {
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	e00a      	b.n	80006b4 <array_copy+0x28>
		B[i]=A[i];
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	441a      	add	r2, r3
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	68b9      	ldr	r1, [r7, #8]
 80006a8:	440b      	add	r3, r1
 80006aa:	7812      	ldrb	r2, [r2, #0]
 80006ac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; ++i) {
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	3301      	adds	r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d8f0      	bhi.n	800069e <array_copy+0x12>
	}
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	371c      	adds	r7, #28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <double_block>:
	block[3] <<=1;
	block[3] ^= msb & 0x00000087;

}

static void double_block(uint8_t * d, uint8_t *s) {
 80006ca:	b480      	push	{r7}
 80006cc:	b085      	sub	sp, #20
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	6039      	str	r1, [r7, #0]
    unsigned i;
    unsigned char tmp = s[0];
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	72fb      	strb	r3, [r7, #11]
    for (i=0; i<15; i++)
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	e017      	b.n	8000710 <double_block+0x46>
        d[i] = (s[i] << 1) | (s[i+1] >> 7);
 80006e0:	683a      	ldr	r2, [r7, #0]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	b25a      	sxtb	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3301      	adds	r3, #1
 80006f0:	6839      	ldr	r1, [r7, #0]
 80006f2:	440b      	add	r3, r1
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	09db      	lsrs	r3, r3, #7
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b259      	sxtb	r1, r3
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	4413      	add	r3, r2
 8000706:	b2ca      	uxtb	r2, r1
 8000708:	701a      	strb	r2, [r3, #0]
    for (i=0; i<15; i++)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	3301      	adds	r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2b0e      	cmp	r3, #14
 8000714:	d9e4      	bls.n	80006e0 <double_block+0x16>
    d[15] = (s[15] << 1) ^ ((tmp >> 7) * 135);
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	330f      	adds	r3, #15
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	b25a      	sxtb	r2, r3
 8000720:	7afb      	ldrb	r3, [r7, #11]
 8000722:	09db      	lsrs	r3, r3, #7
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4619      	mov	r1, r3
 8000728:	00c9      	lsls	r1, r1, #3
 800072a:	440b      	add	r3, r1
 800072c:	4619      	mov	r1, r3
 800072e:	0109      	lsls	r1, r1, #4
 8000730:	1acb      	subs	r3, r1, r3
 8000732:	b2db      	uxtb	r3, r3
 8000734:	b25b      	sxtb	r3, r3
 8000736:	4053      	eors	r3, r2
 8000738:	b25a      	sxtb	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	330f      	adds	r3, #15
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	701a      	strb	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <xor_block_u8>:

void xor_block_u8 (uint8_t * a, uint8_t *b){
 800074e:	b480      	push	{r7}
 8000750:	b085      	sub	sp, #20
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	6039      	str	r1, [r7, #0]
	int i;
	for( i = 0; i < 16; i++){
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	e010      	b.n	8000780 <xor_block_u8+0x32>
		a[i] ^= b[i];
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	4413      	add	r3, r2
 8000764:	7819      	ldrb	r1, [r3, #0]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	4413      	add	r3, r2
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	4403      	add	r3, r0
 8000774:	404a      	eors	r2, r1
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++){
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3301      	adds	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2b0f      	cmp	r3, #15
 8000784:	ddeb      	ble.n	800075e <xor_block_u8+0x10>
	}
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <xor_block_u8_2>:

void xor_block_u8_2 (uint8_t * a, uint8_t *b,uint8_t * c){
 8000794:	b480      	push	{r7}
 8000796:	b087      	sub	sp, #28
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
	int i;
	for( i = 0; i < 16; i++){
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e010      	b.n	80007c8 <xor_block_u8_2+0x34>
		c[i] = a[i] ^ b[i];
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	68fa      	ldr	r2, [r7, #12]
 80007aa:	4413      	add	r3, r2
 80007ac:	7819      	ldrb	r1, [r3, #0]
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	4413      	add	r3, r2
 80007b4:	781a      	ldrb	r2, [r3, #0]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	4403      	add	r3, r0
 80007bc:	404a      	eors	r2, r1
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++){
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	3301      	adds	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	2b0f      	cmp	r3, #15
 80007cc:	ddeb      	ble.n	80007a6 <xor_block_u8_2+0x12>
	}
}
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	371c      	adds	r7, #28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <ntz>:
			a[i] |= b[i*4 + j]<<(3-j)*8;
		}
	}
}

static inline uint32_t ntz(uint32_t x) {
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
		static const unsigned char tz_table[32] =
		{ 0,  1, 28,  2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17,  4, 8,
		 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18,  6, 11,  5, 10, 9};
		return (uint32_t)tz_table[((uint32_t)((x & -x) * 0x077CB531u)) >> 27];
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	425a      	negs	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4013      	ands	r3, r2
 80007ec:	4a05      	ldr	r2, [pc, #20]	; (8000804 <ntz+0x28>)
 80007ee:	fb02 f303 	mul.w	r3, r2, r3
 80007f2:	0edb      	lsrs	r3, r3, #27
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <ntz+0x2c>)
 80007f6:	5cd3      	ldrb	r3, [r2, r3]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	077cb531 	.word	0x077cb531
 8000808:	08007ad4 	.word	0x08007ad4

0800080c <OCB3>:

void OCB3(unsigned char* plaintext, unsigned char* ciphertext, unsigned char* nonce,
        unsigned char* asociated_data, const unsigned int plaintext_size,unsigned int nonce_size, unsigned int asociated_data_size,
        unsigned char* key, unsigned char* tag){
 800080c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000810:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8000814:	af02      	add	r7, sp, #8
 8000816:	f507 741a 	add.w	r4, r7, #616	; 0x268
 800081a:	f5a4 740b 	sub.w	r4, r4, #556	; 0x22c
 800081e:	6020      	str	r0, [r4, #0]
 8000820:	f507 701a 	add.w	r0, r7, #616	; 0x268
 8000824:	f5a0 700c 	sub.w	r0, r0, #560	; 0x230
 8000828:	6001      	str	r1, [r0, #0]
 800082a:	f507 711a 	add.w	r1, r7, #616	; 0x268
 800082e:	f5a1 710d 	sub.w	r1, r1, #564	; 0x234
 8000832:	600a      	str	r2, [r1, #0]
 8000834:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8000838:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	466b      	mov	r3, sp
 8000840:	607b      	str	r3, [r7, #4]
	unsigned char ad_checksum[16]={0,0,0,0 ,0,0,0,0, 0,0,0,0, 0,0,0,0};
 8000842:	4bd1      	ldr	r3, [pc, #836]	; (8000b88 <OCB3+0x37c>)
 8000844:	f507 7406 	add.w	r4, r7, #536	; 0x218
 8000848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800084a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	OCB3_INIT(key);
 800084e:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 8000852:	f7ff feab 	bl	80005ac <OCB3_INIT>
	PMAC_OCB3(asociated_data,asociated_data_size,key,ad_checksum);
 8000856:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800085a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800085e:	f5a3 700e 	sub.w	r0, r3, #568	; 0x238
 8000862:	4613      	mov	r3, r2
 8000864:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8000868:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 800086c:	6800      	ldr	r0, [r0, #0]
 800086e:	f000 fb0b 	bl	8000e88 <PMAC_OCB3>
	int size_ptext = plaintext_size/32;
 8000872:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8000876:	095b      	lsrs	r3, r3, #5
 8000878:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

	unsigned char ptext0[plaintext_size];
 800087c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8000880:	3b01      	subs	r3, #1
 8000882:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8000886:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800088a:	2200      	movs	r2, #0
 800088c:	4698      	mov	r8, r3
 800088e:	4691      	mov	r9, r2
 8000890:	f04f 0200 	mov.w	r2, #0
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800089c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008a4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80008a8:	2200      	movs	r2, #0
 80008aa:	469a      	mov	sl, r3
 80008ac:	4693      	mov	fp, r2
 80008ae:	f04f 0200 	mov.w	r2, #0
 80008b2:	f04f 0300 	mov.w	r3, #0
 80008b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80008ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80008be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80008c2:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80008c6:	3307      	adds	r3, #7
 80008c8:	08db      	lsrs	r3, r3, #3
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	ebad 0d03 	sub.w	sp, sp, r3
 80008d0:	ab02      	add	r3, sp, #8
 80008d2:	3300      	adds	r3, #0
 80008d4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	unsigned char ptext1[plaintext_size];
 80008d8:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80008dc:	3b01      	subs	r3, #1
 80008de:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80008e2:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80008e6:	2200      	movs	r2, #0
 80008e8:	461d      	mov	r5, r3
 80008ea:	4616      	mov	r6, r2
 80008ec:	f04f 0200 	mov.w	r2, #0
 80008f0:	f04f 0300 	mov.w	r3, #0
 80008f4:	00f3      	lsls	r3, r6, #3
 80008f6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80008fa:	00ea      	lsls	r2, r5, #3
 80008fc:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8000900:	2200      	movs	r2, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
 8000904:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000906:	f04f 0200 	mov.w	r2, #0
 800090a:	f04f 0300 	mov.w	r3, #0
 800090e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8000912:	4629      	mov	r1, r5
 8000914:	00cb      	lsls	r3, r1, #3
 8000916:	4621      	mov	r1, r4
 8000918:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800091c:	4621      	mov	r1, r4
 800091e:	00ca      	lsls	r2, r1, #3
 8000920:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8000924:	3307      	adds	r3, #7
 8000926:	08db      	lsrs	r3, r3, #3
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	ebad 0d03 	sub.w	sp, sp, r3
 800092e:	ab02      	add	r3, sp, #8
 8000930:	3300      	adds	r3, #0
 8000932:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

	unsigned char ctext0[plaintext_size];
 8000936:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800093a:	3b01      	subs	r3, #1
 800093c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8000940:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8000944:	2200      	movs	r2, #0
 8000946:	623b      	str	r3, [r7, #32]
 8000948:	627a      	str	r2, [r7, #36]	; 0x24
 800094a:	f04f 0200 	mov.w	r2, #0
 800094e:	f04f 0300 	mov.w	r3, #0
 8000952:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000956:	4629      	mov	r1, r5
 8000958:	00cb      	lsls	r3, r1, #3
 800095a:	4621      	mov	r1, r4
 800095c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000960:	4621      	mov	r1, r4
 8000962:	00ca      	lsls	r2, r1, #3
 8000964:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8000968:	2200      	movs	r2, #0
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	61fa      	str	r2, [r7, #28]
 800096e:	f04f 0200 	mov.w	r2, #0
 8000972:	f04f 0300 	mov.w	r3, #0
 8000976:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800097a:	4629      	mov	r1, r5
 800097c:	00cb      	lsls	r3, r1, #3
 800097e:	4621      	mov	r1, r4
 8000980:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000984:	4621      	mov	r1, r4
 8000986:	00ca      	lsls	r2, r1, #3
 8000988:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800098c:	3307      	adds	r3, #7
 800098e:	08db      	lsrs	r3, r3, #3
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	ebad 0d03 	sub.w	sp, sp, r3
 8000996:	ab02      	add	r3, sp, #8
 8000998:	3300      	adds	r3, #0
 800099a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	unsigned char ctext1[plaintext_size];
 800099e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80009a2:	3b01      	subs	r3, #1
 80009a4:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 80009a8:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80009ac:	2200      	movs	r2, #0
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	617a      	str	r2, [r7, #20]
 80009b2:	f04f 0200 	mov.w	r2, #0
 80009b6:	f04f 0300 	mov.w	r3, #0
 80009ba:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80009be:	4629      	mov	r1, r5
 80009c0:	00cb      	lsls	r3, r1, #3
 80009c2:	4621      	mov	r1, r4
 80009c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80009c8:	4621      	mov	r1, r4
 80009ca:	00ca      	lsls	r2, r1, #3
 80009cc:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80009d0:	2200      	movs	r2, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	60fa      	str	r2, [r7, #12]
 80009d6:	f04f 0200 	mov.w	r2, #0
 80009da:	f04f 0300 	mov.w	r3, #0
 80009de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80009e2:	4629      	mov	r1, r5
 80009e4:	00cb      	lsls	r3, r1, #3
 80009e6:	4621      	mov	r1, r4
 80009e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80009ec:	4621      	mov	r1, r4
 80009ee:	00ca      	lsls	r2, r1, #3
 80009f0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80009f4:	3307      	adds	r3, #7
 80009f6:	08db      	lsrs	r3, r3, #3
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	ebad 0d03 	sub.w	sp, sp, r3
 80009fe:	ab02      	add	r3, sp, #8
 8000a00:	3300      	adds	r3, #0
 8000a02:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

	for (size_t i = 0; i < plaintext_size; i++){
 8000a06:	2300      	movs	r3, #0
 8000a08:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8000a0c:	e020      	b.n	8000a50 <OCB3+0x244>
		ptext0[i]=0;
 8000a0e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8000a12:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8000a16:	4413      	add	r3, r2
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
		ptext1[i]=0;
 8000a1c:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8000a20:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8000a24:	4413      	add	r3, r2
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
		ctext0[i]=0;
 8000a2a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8000a2e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8000a32:	4413      	add	r3, r2
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
		ctext1[i]=0;
 8000a38:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8000a3c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8000a40:	4413      	add	r3, r2
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < plaintext_size; i++){
 8000a46:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8000a50:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8000a54:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d3d8      	bcc.n	8000a0e <OCB3+0x202>
	}
	divide_plaintext(plaintext, ptext0,  ptext1, plaintext_size);
 8000a5c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000a60:	f5a3 700b 	sub.w	r0, r3, #556	; 0x22c
 8000a64:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8000a68:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8000a6c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8000a70:	6800      	ldr	r0, [r0, #0]
 8000a72:	f000 fb83 	bl	800117c <divide_plaintext>


	// // 128 + 64 bits
	uint8_t Stretch[24] = {0};
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8000a7c:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
	uint8_t KTop [16];
	uint8_t KTop_encrypt [16];

	uint32_t rkeys_ffs[88];
	aes128_keyschedule_ffs(rkeys_ffs, key, key);
 8000a8c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000a90:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8000a94:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f002 fad9 	bl	8003050 <aes128_keyschedule_ffs>

	block_multiview tmp;
    // tmp.u32[0] = (little.endian?0x01000000:0x00000001);
    // Nonce & 0^{122} 1^{6}
	// solo se extraen los últimos 6 bits;
    tmp.u32[0] = (0x01000000);
 8000a9e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000aa2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000aa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000aaa:	601a      	str	r2, [r3, #0]
	tmp.u32[1] = ((uint32_t *)nonce)[0];
 8000aac:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000ab0:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000abc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000ac0:	605a      	str	r2, [r3, #4]
	tmp.u32[2] = ((uint32_t *)nonce)[1];
 8000ac2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000ac6:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000ad2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000ad6:	609a      	str	r2, [r3, #8]
	tmp.u32[3] = ((uint32_t *)nonce)[2];
 8000ad8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000adc:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	689a      	ldr	r2, [r3, #8]
 8000ae4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000ae8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000aec:	60da      	str	r2, [r3, #12]
    unsigned idx = (unsigned)(tmp.u8[15] & 0x3f);   /* Get low 6 bits of nonce  */
 8000aee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000af2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000af6:	7bdb      	ldrb	r3, [r3, #15]
 8000af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000afc:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp.u8[15] = tmp.u8[15] & 0xc0;        /* Zero low 6 bits of nonce */
 8000b00:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000b04:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000b08:	7bdb      	ldrb	r3, [r3, #15]
 8000b0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000b14:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000b18:	73da      	strb	r2, [r3, #15]

    aes128_encrypt_ffs(KTop, KTop_encrypt, tmp.u8, tmp.u8, rkeys_ffs);
 8000b1a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000b1e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000b22:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 8000b26:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 8000b2a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	4623      	mov	r3, r4
 8000b32:	f002 f80d 	bl	8002b50 <aes128_encrypt_ffs>
	array_copy(KTop_encrypt, Stretch, 16);
 8000b36:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8000b3a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8000b3e:	2210      	movs	r2, #16
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fda3 	bl	800068c <array_copy>

	// KTop || KTOP
	for (int i = 0; i < 8; i++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8000b4c:	e014      	b.n	8000b78 <OCB3+0x36c>
	  Stretch[16 + i] = Stretch[i];
 8000b4e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8000b52:	3310      	adds	r3, #16
 8000b54:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8000b58:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8000b5c:	440a      	add	r2, r1
 8000b5e:	7812      	ldrb	r2, [r2, #0]
 8000b60:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000b64:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000b68:	440b      	add	r3, r1
 8000b6a:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (int i = 0; i < 8; i++)
 8000b6e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8000b72:	3301      	adds	r3, #1
 8000b74:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8000b78:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8000b7c:	2b07      	cmp	r3, #7
 8000b7e:	dde6      	ble.n	8000b4e <OCB3+0x342>
	// KTop || (KTOP ^ (KTop << 8)
	for (int i = 0; i < 8; i++)
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8000b86:	e026      	b.n	8000bd6 <OCB3+0x3ca>
 8000b88:	08007a6c 	.word	0x08007a6c
	  Stretch[16 + i] ^= Stretch[i + 1];
 8000b8c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8000b90:	3310      	adds	r3, #16
 8000b92:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000b96:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000b9a:	4413      	add	r3, r2
 8000b9c:	f813 1c68 	ldrb.w	r1, [r3, #-104]
 8000ba0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000baa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000bae:	4413      	add	r3, r2
 8000bb0:	f813 2c68 	ldrb.w	r2, [r3, #-104]
 8000bb4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8000bb8:	3310      	adds	r3, #16
 8000bba:	404a      	eors	r2, r1
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000bc2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (int i = 0; i < 8; i++)
 8000bcc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8000bd6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8000bda:	2b07      	cmp	r3, #7
 8000bdc:	ddd6      	ble.n	8000b8c <OCB3+0x380>

	uint8_t bot_shift = idx / 8;
 8000bde:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000be2:	08db      	lsrs	r3, r3, #3
 8000be4:	f887 322b 	strb.w	r3, [r7, #555]	; 0x22b
	uint8_t bot_bit_shift = idx % 8;
 8000be8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	f887 322a 	strb.w	r3, [r7, #554]	; 0x22a

	// Stretch << Bottom
	for (int i = 0; i < 16; i++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8000bfc:	e035      	b.n	8000c6a <OCB3+0x45e>
	Stretch[i] = ((Stretch[i + bot_shift] << bot_bit_shift) | (Stretch[i + bot_shift + 1] >> (8 - bot_bit_shift)));
 8000bfe:	f897 222b 	ldrb.w	r2, [r7, #555]	; 0x22b
 8000c02:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8000c06:	4413      	add	r3, r2
 8000c08:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000c0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000c10:	4413      	add	r3, r2
 8000c12:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c16:	461a      	mov	r2, r3
 8000c18:	f897 322a 	ldrb.w	r3, [r7, #554]	; 0x22a
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	b25a      	sxtb	r2, r3
 8000c22:	f897 122b 	ldrb.w	r1, [r7, #555]	; 0x22b
 8000c26:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8000c2a:	440b      	add	r3, r1
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000c32:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000c36:	440b      	add	r3, r1
 8000c38:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f897 322a 	ldrb.w	r3, [r7, #554]	; 0x22a
 8000c42:	f1c3 0308 	rsb	r3, r3, #8
 8000c46:	fa41 f303 	asr.w	r3, r1, r3
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	b25b      	sxtb	r3, r3
 8000c50:	b2d9      	uxtb	r1, r3
 8000c52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8000c56:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8000c5a:	4413      	add	r3, r2
 8000c5c:	460a      	mov	r2, r1
 8000c5e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8000c60:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8000c64:	3301      	adds	r3, #1
 8000c66:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8000c6a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8000c6e:	2b0f      	cmp	r3, #15
 8000c70:	ddc5      	ble.n	8000bfe <OCB3+0x3f2>

    // Delta = (Stretch << Bottom) [1... 128]
	uint8_t Delta [16];
	array_copy(Stretch, Delta, 16);
 8000c72:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c7a:	2210      	movs	r2, #16
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fd05 	bl	800068c <array_copy>
	uint8_t Delta_aux[16] = {0};
 8000c82:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000c86:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	3304      	adds	r3, #4
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
	uint8_t Checksum[16] = {0};
 8000c98:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000c9c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]

	int i =0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
	for(i = 0; i < size_ptext; i++){
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8000cba:	e0a0      	b.n	8000dfe <OCB3+0x5f2>

		xor_block_u8(Checksum, ptext0+(i*16));
 8000cbc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000cc0:	011b      	lsls	r3, r3, #4
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8000cc8:	441a      	add	r2, r3
 8000cca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fd3c 	bl	800074e <xor_block_u8>
		xor_block_u8(Checksum, ptext1+(i*16));
 8000cd6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	461a      	mov	r2, r3
 8000cde:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000ce2:	441a      	add	r2, r3
 8000ce4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fd2f 	bl	800074e <xor_block_u8>

		xor_block_u8(Delta, L[0]);
 8000cf0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000cf4:	4961      	ldr	r1, [pc, #388]	; (8000e7c <OCB3+0x670>)
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fd29 	bl	800074e <xor_block_u8>
		array_copy(Delta,Delta_aux, 16);
 8000cfc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000d00:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d04:	2210      	movs	r2, #16
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fcc0 	bl	800068c <array_copy>
		xor_block_u8(ptext0+(i*16), Delta);
 8000d0c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	461a      	mov	r2, r3
 8000d14:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8000d18:	4413      	add	r3, r2
 8000d1a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fd14 	bl	800074e <xor_block_u8>
		if (i%2==0)
 8000d26:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d106      	bne.n	8000d40 <OCB3+0x534>
			xor_block_u8(Delta, L[1]);
 8000d32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d36:	4952      	ldr	r1, [pc, #328]	; (8000e80 <OCB3+0x674>)
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fd08 	bl	800074e <xor_block_u8>
 8000d3e:	e010      	b.n	8000d62 <OCB3+0x556>
		else
			xor_block_u8(Delta, L[ntz((i+1)*2 )]);
 8000d40:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000d44:	3301      	adds	r3, #1
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fd47 	bl	80007dc <ntz>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	011b      	lsls	r3, r3, #4
 8000d52:	4a4a      	ldr	r2, [pc, #296]	; (8000e7c <OCB3+0x670>)
 8000d54:	441a      	add	r2, r3
 8000d56:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fcf6 	bl	800074e <xor_block_u8>

		xor_block_u8(ptext1+(i*16), Delta);
 8000d62:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000d66:	011b      	lsls	r3, r3, #4
 8000d68:	461a      	mov	r2, r3
 8000d6a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000d6e:	4413      	add	r3, r2
 8000d70:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fce9 	bl	800074e <xor_block_u8>
		aes128_encrypt_ffs(ctext0+ (i*16), ctext1+ (i*16), ptext0+ ((i)*16), ptext1 + (i*16), rkeys_ffs);
 8000d7c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000d80:	011b      	lsls	r3, r3, #4
 8000d82:	461a      	mov	r2, r3
 8000d84:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000d88:	1898      	adds	r0, r3, r2
 8000d8a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000d8e:	011b      	lsls	r3, r3, #4
 8000d90:	461a      	mov	r2, r3
 8000d92:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8000d96:	1899      	adds	r1, r3, r2
 8000d98:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000d9c:	011b      	lsls	r3, r3, #4
 8000d9e:	461a      	mov	r2, r3
 8000da0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8000da4:	441a      	add	r2, r3
 8000da6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	461c      	mov	r4, r3
 8000dae:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000db2:	441c      	add	r4, r3
 8000db4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	4623      	mov	r3, r4
 8000dbc:	f001 fec8 	bl	8002b50 <aes128_encrypt_ffs>

		xor_block_u8(ctext0+(i*16), Delta_aux);
 8000dc0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000dc4:	011b      	lsls	r3, r3, #4
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000dcc:	4413      	add	r3, r2
 8000dce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fcba 	bl	800074e <xor_block_u8>
		xor_block_u8(ctext1+(i*16), Delta);
 8000dda:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	461a      	mov	r2, r3
 8000de2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8000de6:	4413      	add	r3, r2
 8000de8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fcad 	bl	800074e <xor_block_u8>
	for(i = 0; i < size_ptext; i++){
 8000df4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8000df8:	3301      	adds	r3, #1
 8000dfa:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8000dfe:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8000e02:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8000e06:	429a      	cmp	r2, r3
 8000e08:	f6ff af58 	blt.w	8000cbc <OCB3+0x4b0>
	}

	xor_block_u8(Delta, L_dollar);
 8000e0c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e10:	491c      	ldr	r1, [pc, #112]	; (8000e84 <OCB3+0x678>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fc9b 	bl	800074e <xor_block_u8>
    xor_block_u8(Checksum, Delta);
 8000e18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000e1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e20:	4611      	mov	r1, r2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fc93 	bl	800074e <xor_block_u8>
	aes128_encrypt_ffs(tag, KTop, Checksum, KTop_encrypt, rkeys_ffs);
 8000e28:	f507 70f0 	add.w	r0, r7, #480	; 0x1e0
 8000e2c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e30:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8000e34:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f8d7 02a0 	ldr.w	r0, [r7, #672]	; 0x2a0
 8000e40:	f001 fe86 	bl	8002b50 <aes128_encrypt_ffs>
    xor_block_u8(tag, ad_checksum);
 8000e44:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f8d7 02a0 	ldr.w	r0, [r7, #672]	; 0x2a0
 8000e4e:	f7ff fc7e 	bl	800074e <xor_block_u8>

    union_ciphertext(ciphertext,ctext0,ctext1,plaintext_size);
 8000e52:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000e56:	f5a3 700c 	sub.w	r0, r3, #560	; 0x230
 8000e5a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8000e5e:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8000e62:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8000e66:	6800      	ldr	r0, [r0, #0]
 8000e68:	f000 f9d0 	bl	800120c <union_ciphertext>
 8000e6c:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8000e70:	bf00      	nop
 8000e72:	f507 771b 	add.w	r7, r7, #620	; 0x26c
 8000e76:	46bd      	mov	sp, r7
 8000e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e7c:	200001f4 	.word	0x200001f4
 8000e80:	20000204 	.word	0x20000204
 8000e84:	200002f4 	.word	0x200002f4

08000e88 <PMAC_OCB3>:

void PMAC_OCB3( unsigned char* asociated_data, unsigned int asociated_data_size,unsigned char* key, unsigned char* ad_checksum){
 8000e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e8c:	b0f5      	sub	sp, #468	; 0x1d4
 8000e8e:	af02      	add	r7, sp, #8
 8000e90:	f507 76e4 	add.w	r6, r7, #456	; 0x1c8
 8000e94:	f5a6 76da 	sub.w	r6, r6, #436	; 0x1b4
 8000e98:	6030      	str	r0, [r6, #0]
 8000e9a:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
 8000e9e:	f5a0 70dc 	sub.w	r0, r0, #440	; 0x1b8
 8000ea2:	6001      	str	r1, [r0, #0]
 8000ea4:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8000ea8:	f5a1 71de 	sub.w	r1, r1, #444	; 0x1bc
 8000eac:	600a      	str	r2, [r1, #0]
 8000eae:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8000eb2:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	466b      	mov	r3, sp
 8000eba:	461e      	mov	r6, r3
	int size_ptext = asociated_data_size/32;
 8000ebc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000ec0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

	unsigned char ptext0[asociated_data_size];
 8000ecc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000ed0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8000ed4:	6819      	ldr	r1, [r3, #0]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8000ede:	2300      	movs	r3, #0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	00c3      	lsls	r3, r0, #3
 8000ef0:	6838      	ldr	r0, [r7, #0]
 8000ef2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ef6:	6838      	ldr	r0, [r7, #0]
 8000ef8:	00c2      	lsls	r2, r0, #3
 8000efa:	2300      	movs	r3, #0
 8000efc:	468a      	mov	sl, r1
 8000efe:	469b      	mov	fp, r3
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000f0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000f14:	1dcb      	adds	r3, r1, #7
 8000f16:	08db      	lsrs	r3, r3, #3
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	ebad 0d03 	sub.w	sp, sp, r3
 8000f1e:	ab02      	add	r3, sp, #8
 8000f20:	3300      	adds	r3, #0
 8000f22:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	unsigned char ptext1[asociated_data_size];
 8000f26:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000f2a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8000f2e:	6819      	ldr	r1, [r3, #0]
 8000f30:	460b      	mov	r3, r1
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8000f38:	2300      	movs	r3, #0
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	4699      	mov	r9, r3
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	f04f 0300 	mov.w	r3, #0
 8000f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f52:	2300      	movs	r3, #0
 8000f54:	460c      	mov	r4, r1
 8000f56:	461d      	mov	r5, r3
 8000f58:	f04f 0200 	mov.w	r2, #0
 8000f5c:	f04f 0300 	mov.w	r3, #0
 8000f60:	00eb      	lsls	r3, r5, #3
 8000f62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f66:	00e2      	lsls	r2, r4, #3
 8000f68:	1dcb      	adds	r3, r1, #7
 8000f6a:	08db      	lsrs	r3, r3, #3
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	ebad 0d03 	sub.w	sp, sp, r3
 8000f72:	ab02      	add	r3, sp, #8
 8000f74:	3300      	adds	r3, #0
 8000f76:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	for (size_t i = 0; i < asociated_data_size; i++){
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f80:	e012      	b.n	8000fa8 <PMAC_OCB3+0x120>
		ptext0[i]=0;
 8000f82:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f86:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f8a:	4413      	add	r3, r2
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
		ptext1[i]=0;
 8000f90:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8000f94:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f98:	4413      	add	r3, r2
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < asociated_data_size; i++){
 8000f9e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fa8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000fac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8000fb0:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d3e3      	bcc.n	8000f82 <PMAC_OCB3+0xfa>
	}
	divide_plaintext(asociated_data, ptext0,  ptext1, asociated_data_size);
 8000fba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000fbe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8000fc2:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8000fc6:	f5a2 70da 	sub.w	r0, r2, #436	; 0x1b4
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8000fd0:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8000fd4:	6800      	ldr	r0, [r0, #0]
 8000fd6:	f000 f8d1 	bl	800117c <divide_plaintext>
	uint8_t Delta [16]={0,0,0,0 ,0,0,0,0, 0,0,0,0, 0,0,0,0};
 8000fda:	4b65      	ldr	r3, [pc, #404]	; (8001170 <PMAC_OCB3+0x2e8>)
 8000fdc:	f507 74ce 	add.w	r4, r7, #412	; 0x19c
 8000fe0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ad_offset [16]={0,0,0,0 ,0,0,0,0, 0,0,0,0, 0,0,0,0};
 8000fe6:	4b62      	ldr	r3, [pc, #392]	; (8001170 <PMAC_OCB3+0x2e8>)
 8000fe8:	f507 74c6 	add.w	r4, r7, #396	; 0x18c
 8000fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t Delta_AUX [16]={0,0,0,0 ,0,0,0,0, 0,0,0,0, 0,0,0,0};
 8000ff2:	4b5f      	ldr	r3, [pc, #380]	; (8001170 <PMAC_OCB3+0x2e8>)
 8000ff4:	f507 74be 	add.w	r4, r7, #380	; 0x17c
 8000ff8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ffa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t rkeys_ffs[88];
	aes128_keyschedule_ffs(rkeys_ffs, key, key);
 8000ffe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001002:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8001006:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800100a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800100e:	f107 001c 	add.w	r0, r7, #28
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	6819      	ldr	r1, [r3, #0]
 8001016:	f002 f81b 	bl	8003050 <aes128_keyschedule_ffs>
	int i =0;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

	for(i = 0; i < size_ptext; i++){
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001026:	e094      	b.n	8001152 <PMAC_OCB3+0x2ca>
		xor_block_u8_2(ad_offset, L[0],Delta);
 8001028:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 800102c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001030:	4950      	ldr	r1, [pc, #320]	; (8001174 <PMAC_OCB3+0x2ec>)
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fbae 	bl	8000794 <xor_block_u8_2>
		xor_block_u8(ptext0+(i*16), Delta);
 8001038:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	461a      	mov	r2, r3
 8001040:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001044:	4413      	add	r3, r2
 8001046:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fb7e 	bl	800074e <xor_block_u8>

		if (i%2==0){
 8001052:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b00      	cmp	r3, #0
 800105c:	d115      	bne.n	800108a <PMAC_OCB3+0x202>
			xor_block_u8_2(Delta, L[1],Delta_AUX);
 800105e:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8001062:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001066:	4944      	ldr	r1, [pc, #272]	; (8001178 <PMAC_OCB3+0x2f0>)
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fb93 	bl	8000794 <xor_block_u8_2>
			xor_block_u8(ptext1+(i*16), Delta_AUX);
 800106e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	461a      	mov	r2, r3
 8001076:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800107a:	4413      	add	r3, r2
 800107c:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fb63 	bl	800074e <xor_block_u8>
 8001088:	e01e      	b.n	80010c8 <PMAC_OCB3+0x240>
		}
		else{
			xor_block_u8_2(Delta, L[ntz((i+1)*2 )],ad_offset);
 800108a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800108e:	3301      	adds	r3, #1
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fba2 	bl	80007dc <ntz>
 8001098:	4603      	mov	r3, r0
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	4a35      	ldr	r2, [pc, #212]	; (8001174 <PMAC_OCB3+0x2ec>)
 800109e:	1899      	adds	r1, r3, r2
 80010a0:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 80010a4:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fb73 	bl	8000794 <xor_block_u8_2>
			xor_block_u8(ptext1+(i*16), ad_offset);
 80010ae:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	461a      	mov	r2, r3
 80010b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80010ba:	4413      	add	r3, r2
 80010bc:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 80010c0:	4611      	mov	r1, r2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fb43 	bl	800074e <xor_block_u8>
		}
		aes128_encrypt_ffs(ptext0+ ((i)*16), ptext1 + (i*16), ptext0+ ((i)*16), ptext1 + (i*16), rkeys_ffs);
 80010c8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	461a      	mov	r2, r3
 80010d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80010d4:	1898      	adds	r0, r3, r2
 80010d6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	461a      	mov	r2, r3
 80010de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80010e2:	1899      	adds	r1, r3, r2
 80010e4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	461a      	mov	r2, r3
 80010ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80010f0:	441a      	add	r2, r3
 80010f2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	461c      	mov	r4, r3
 80010fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80010fe:	441c      	add	r4, r3
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	4623      	mov	r3, r4
 8001108:	f001 fd22 	bl	8002b50 <aes128_encrypt_ffs>
		xor_block_u8(ad_checksum, ptext0+(i*16));
 800110c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	461a      	mov	r2, r3
 8001114:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001118:	441a      	add	r2, r3
 800111a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800111e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001122:	4611      	mov	r1, r2
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	f7ff fb12 	bl	800074e <xor_block_u8>
		xor_block_u8(ad_checksum, ptext1+(i*16));
 800112a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	461a      	mov	r2, r3
 8001132:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001136:	441a      	add	r2, r3
 8001138:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800113c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001140:	4611      	mov	r1, r2
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f7ff fb03 	bl	800074e <xor_block_u8>
	for(i = 0; i < size_ptext; i++){
 8001148:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800114c:	3301      	adds	r3, #1
 800114e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001152:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8001156:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800115a:	429a      	cmp	r2, r3
 800115c:	f6ff af64 	blt.w	8001028 <PMAC_OCB3+0x1a0>
 8001160:	46b5      	mov	sp, r6
	}

}
 8001162:	bf00      	nop
 8001164:	f507 77e6 	add.w	r7, r7, #460	; 0x1cc
 8001168:	46bd      	mov	sp, r7
 800116a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800116e:	bf00      	nop
 8001170:	08007a6c 	.word	0x08007a6c
 8001174:	200001f4 	.word	0x200001f4
 8001178:	20000204 	.word	0x20000204

0800117c <divide_plaintext>:


void divide_plaintext(unsigned char* plaintext, unsigned char* ptext0,  unsigned char* ptext1,unsigned int plaintext_size){
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	603b      	str	r3, [r7, #0]
    int condicion = 1;
 800118a:	2301      	movs	r3, #1
 800118c:	61fb      	str	r3, [r7, #28]
    size_t j=0;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
    size_t k=0;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	e02c      	b.n	80011f6 <divide_plaintext+0x7a>

        if (i%16==0 && i!=0)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d106      	bne.n	80011b4 <divide_plaintext+0x38>
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <divide_plaintext+0x38>
            condicion=condicion^1;
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f083 0301 	eor.w	r3, r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]

        if (condicion)
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d008      	beq.n	80011cc <divide_plaintext+0x50>
            ptext0[j] = plaintext[i];
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	441a      	add	r2, r3
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	440b      	add	r3, r1
 80011c6:	7812      	ldrb	r2, [r2, #0]
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	e007      	b.n	80011dc <divide_plaintext+0x60>
        else
            ptext1[k] = plaintext[i];
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	441a      	add	r2, r3
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	440b      	add	r3, r1
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	701a      	strb	r2, [r3, #0]

        if (condicion)
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <divide_plaintext+0x6e>
            j++;
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	e002      	b.n	80011f0 <divide_plaintext+0x74>
        else
            k++;
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	3301      	adds	r3, #1
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d3ce      	bcc.n	800119c <divide_plaintext+0x20>
    }
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	3724      	adds	r7, #36	; 0x24
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <union_ciphertext>:


void union_ciphertext(unsigned char* ciphertext, unsigned char* ctext0,  unsigned char* ctext1,unsigned int plaintext_size){
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]

    // bool condicion = 1;
    int condicion = 1;
 800121a:	2301      	movs	r3, #1
 800121c:	61fb      	str	r3, [r7, #28]
    size_t j=0;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
    size_t k=0;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	e02c      	b.n	8001286 <union_ciphertext+0x7a>
        if (i%16==0 && i!=0)
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	2b00      	cmp	r3, #0
 8001234:	d106      	bne.n	8001244 <union_ciphertext+0x38>
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <union_ciphertext+0x38>
            condicion=condicion^1;
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f083 0301 	eor.w	r3, r3, #1
 8001242:	61fb      	str	r3, [r7, #28]

        if (condicion)
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d008      	beq.n	800125c <union_ciphertext+0x50>
            ciphertext[i] = ctext0[j];
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	441a      	add	r2, r3
 8001250:	68f9      	ldr	r1, [r7, #12]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	440b      	add	r3, r1
 8001256:	7812      	ldrb	r2, [r2, #0]
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	e007      	b.n	800126c <union_ciphertext+0x60>
        else
            ciphertext[i] = ctext1[k];
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	441a      	add	r2, r3
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	440b      	add	r3, r1
 8001268:	7812      	ldrb	r2, [r2, #0]
 800126a:	701a      	strb	r2, [r3, #0]

        if (condicion)
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <union_ciphertext+0x6e>
            j++;
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	3301      	adds	r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	e002      	b.n	8001280 <union_ciphertext+0x74>
        else
            k++;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	3301      	adds	r3, #1
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d3ce      	bcc.n	800122c <union_ciphertext+0x20>




    }
}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	3724      	adds	r7, #36	; 0x24
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <packing>:

}


void packing(uint32_t* out, const unsigned char* in0,
		const unsigned char* in1) {
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	out[0] = LE_LOAD_32(in0);
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	3303      	adds	r3, #3
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	061a      	lsls	r2, r3, #24
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	3302      	adds	r3, #2
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	041b      	lsls	r3, r3, #16
 80012b8:	431a      	orrs	r2, r3
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	3301      	adds	r3, #1
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	4313      	orrs	r3, r2
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	7812      	ldrb	r2, [r2, #0]
 80012c8:	431a      	orrs	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	601a      	str	r2, [r3, #0]
	out[1] = LE_LOAD_32(in1);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3303      	adds	r3, #3
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	061a      	lsls	r2, r3, #24
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3302      	adds	r3, #2
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	041b      	lsls	r3, r3, #16
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3301      	adds	r3, #1
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	431a      	orrs	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	4619      	mov	r1, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3304      	adds	r3, #4
 80012f4:	430a      	orrs	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]
	out[2] = LE_LOAD_32(in0 + 4);
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	3307      	adds	r3, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	061a      	lsls	r2, r3, #24
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3306      	adds	r3, #6
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	041b      	lsls	r3, r3, #16
 8001308:	431a      	orrs	r2, r3
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	3305      	adds	r3, #5
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	431a      	orrs	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	3304      	adds	r3, #4
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	4619      	mov	r1, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	3308      	adds	r3, #8
 8001320:	430a      	orrs	r2, r1
 8001322:	601a      	str	r2, [r3, #0]
	out[3] = LE_LOAD_32(in1 + 4);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3307      	adds	r3, #7
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	061a      	lsls	r2, r3, #24
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3306      	adds	r3, #6
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	041b      	lsls	r3, r3, #16
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3305      	adds	r3, #5
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3304      	adds	r3, #4
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	330c      	adds	r3, #12
 800134c:	430a      	orrs	r2, r1
 800134e:	601a      	str	r2, [r3, #0]
	out[4] = LE_LOAD_32(in0 + 8);
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	330b      	adds	r3, #11
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	061a      	lsls	r2, r3, #24
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	330a      	adds	r3, #10
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	041b      	lsls	r3, r3, #16
 8001360:	431a      	orrs	r2, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	3309      	adds	r3, #9
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	431a      	orrs	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	3308      	adds	r3, #8
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4619      	mov	r1, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3310      	adds	r3, #16
 8001378:	430a      	orrs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]
	out[5] = LE_LOAD_32(in1 + 8);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	330b      	adds	r3, #11
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	061a      	lsls	r2, r3, #24
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	330a      	adds	r3, #10
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	041b      	lsls	r3, r3, #16
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3309      	adds	r3, #9
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3308      	adds	r3, #8
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4619      	mov	r1, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3314      	adds	r3, #20
 80013a4:	430a      	orrs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]
	out[6] = LE_LOAD_32(in0 + 12);
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	330f      	adds	r3, #15
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	061a      	lsls	r2, r3, #24
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	330e      	adds	r3, #14
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	041b      	lsls	r3, r3, #16
 80013b8:	431a      	orrs	r2, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	330d      	adds	r3, #13
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	431a      	orrs	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	330c      	adds	r3, #12
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	4619      	mov	r1, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3318      	adds	r3, #24
 80013d0:	430a      	orrs	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]
	out[7] = LE_LOAD_32(in1 + 12);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	330f      	adds	r3, #15
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	061a      	lsls	r2, r3, #24
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	330e      	adds	r3, #14
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	041b      	lsls	r3, r3, #16
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	330d      	adds	r3, #13
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	330c      	adds	r3, #12
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	4619      	mov	r1, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	331c      	adds	r3, #28
 80013fc:	430a      	orrs	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[1], out[0], 0x55555555, 1);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3304      	adds	r3, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	085b      	lsrs	r3, r3, #1
 800140c:	4053      	eors	r3, r2
 800140e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	405a      	eors	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3304      	adds	r3, #4
 8001424:	6819      	ldr	r1, [r3, #0]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005a      	lsls	r2, r3, #1
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3304      	adds	r3, #4
 800142e:	404a      	eors	r2, r1
 8001430:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[3], out[2], 0x55555555, 1);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3308      	adds	r3, #8
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	330c      	adds	r3, #12
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	085b      	lsrs	r3, r3, #1
 8001440:	4053      	eors	r3, r2
 8001442:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3308      	adds	r3, #8
 800144c:	6819      	ldr	r1, [r3, #0]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3308      	adds	r3, #8
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	404a      	eors	r2, r1
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	330c      	adds	r3, #12
 800145c:	6819      	ldr	r1, [r3, #0]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005a      	lsls	r2, r3, #1
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	330c      	adds	r3, #12
 8001466:	404a      	eors	r2, r1
 8001468:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[5], out[4], 0x55555555, 1);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3310      	adds	r3, #16
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3314      	adds	r3, #20
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	085b      	lsrs	r3, r3, #1
 8001478:	4053      	eors	r3, r2
 800147a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3310      	adds	r3, #16
 8001484:	6819      	ldr	r1, [r3, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	3310      	adds	r3, #16
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	404a      	eors	r2, r1
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3314      	adds	r3, #20
 8001494:	6819      	ldr	r1, [r3, #0]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005a      	lsls	r2, r3, #1
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3314      	adds	r3, #20
 800149e:	404a      	eors	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[6], 0x55555555, 1);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3318      	adds	r3, #24
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	331c      	adds	r3, #28
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	085b      	lsrs	r3, r3, #1
 80014b0:	4053      	eors	r3, r2
 80014b2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3318      	adds	r3, #24
 80014bc:	6819      	ldr	r1, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3318      	adds	r3, #24
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	404a      	eors	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	331c      	adds	r3, #28
 80014cc:	6819      	ldr	r1, [r3, #0]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005a      	lsls	r2, r3, #1
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	331c      	adds	r3, #28
 80014d6:	404a      	eors	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[2], out[0], 0x33333333, 2);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3308      	adds	r3, #8
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	4053      	eors	r3, r2
 80014e8:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	405a      	eors	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3308      	adds	r3, #8
 80014fe:	6819      	ldr	r1, [r3, #0]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	009a      	lsls	r2, r3, #2
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3308      	adds	r3, #8
 8001508:	404a      	eors	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[3], out[1], 0x33333333, 2);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3304      	adds	r3, #4
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	330c      	adds	r3, #12
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	4053      	eors	r3, r2
 800151c:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3304      	adds	r3, #4
 8001526:	6819      	ldr	r1, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3304      	adds	r3, #4
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	404a      	eors	r2, r1
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	330c      	adds	r3, #12
 8001536:	6819      	ldr	r1, [r3, #0]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	009a      	lsls	r2, r3, #2
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	330c      	adds	r3, #12
 8001540:	404a      	eors	r2, r1
 8001542:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[6], out[4], 0x33333333, 2);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	3310      	adds	r3, #16
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3318      	adds	r3, #24
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	4053      	eors	r3, r2
 8001554:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3310      	adds	r3, #16
 800155e:	6819      	ldr	r1, [r3, #0]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3310      	adds	r3, #16
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	404a      	eors	r2, r1
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3318      	adds	r3, #24
 800156e:	6819      	ldr	r1, [r3, #0]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	009a      	lsls	r2, r3, #2
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3318      	adds	r3, #24
 8001578:	404a      	eors	r2, r1
 800157a:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[5], 0x33333333, 2);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3314      	adds	r3, #20
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	331c      	adds	r3, #28
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	4053      	eors	r3, r2
 800158c:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3314      	adds	r3, #20
 8001596:	6819      	ldr	r1, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3314      	adds	r3, #20
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	404a      	eors	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	331c      	adds	r3, #28
 80015a6:	6819      	ldr	r1, [r3, #0]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	009a      	lsls	r2, r3, #2
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	331c      	adds	r3, #28
 80015b0:	404a      	eors	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[4], out[0], 0x0f0f0f0f, 4);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3310      	adds	r3, #16
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	4053      	eors	r3, r2
 80015c2:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	405a      	eors	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3310      	adds	r3, #16
 80015d8:	6819      	ldr	r1, [r3, #0]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	011a      	lsls	r2, r3, #4
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3310      	adds	r3, #16
 80015e2:	404a      	eors	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[5], out[1], 0x0f0f0f0f, 4);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3304      	adds	r3, #4
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3314      	adds	r3, #20
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	4053      	eors	r3, r2
 80015f6:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	3304      	adds	r3, #4
 8001600:	6819      	ldr	r1, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3304      	adds	r3, #4
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	404a      	eors	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3314      	adds	r3, #20
 8001610:	6819      	ldr	r1, [r3, #0]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	011a      	lsls	r2, r3, #4
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3314      	adds	r3, #20
 800161a:	404a      	eors	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[6], out[2], 0x0f0f0f0f, 4);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3308      	adds	r3, #8
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3318      	adds	r3, #24
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	4053      	eors	r3, r2
 800162e:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3308      	adds	r3, #8
 8001638:	6819      	ldr	r1, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3308      	adds	r3, #8
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	404a      	eors	r2, r1
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3318      	adds	r3, #24
 8001648:	6819      	ldr	r1, [r3, #0]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	011a      	lsls	r2, r3, #4
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3318      	adds	r3, #24
 8001652:	404a      	eors	r2, r1
 8001654:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[3], 0x0f0f0f0f, 4);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	330c      	adds	r3, #12
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	331c      	adds	r3, #28
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	4053      	eors	r3, r2
 8001666:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	330c      	adds	r3, #12
 8001670:	6819      	ldr	r1, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	330c      	adds	r3, #12
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	404a      	eors	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	331c      	adds	r3, #28
 8001680:	6819      	ldr	r1, [r3, #0]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	011a      	lsls	r2, r3, #4
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	331c      	adds	r3, #28
 800168a:	404a      	eors	r2, r1
 800168c:	601a      	str	r2, [r3, #0]
}
 800168e:	bf00      	nop
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <unpacking>:

/******************************************************************************
* Unpacks the 256-bit internal state in two 128-bit blocs out0, out1.
******************************************************************************/
static void unpacking(unsigned char* out0, unsigned char* out1, uint32_t* in) {
 800169a:	b480      	push	{r7}
 800169c:	b087      	sub	sp, #28
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	SWAPMOVE(in[4], in[0], 0x0f0f0f0f, 4);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3310      	adds	r3, #16
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	4053      	eors	r3, r2
 80016b4:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	405a      	eors	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3310      	adds	r3, #16
 80016ca:	6819      	ldr	r1, [r3, #0]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	011a      	lsls	r2, r3, #4
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3310      	adds	r3, #16
 80016d4:	404a      	eors	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[5], in[1], 0x0f0f0f0f, 4);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3304      	adds	r3, #4
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3314      	adds	r3, #20
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	4053      	eors	r3, r2
 80016e8:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3304      	adds	r3, #4
 80016f2:	6819      	ldr	r1, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3304      	adds	r3, #4
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	404a      	eors	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3314      	adds	r3, #20
 8001702:	6819      	ldr	r1, [r3, #0]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	011a      	lsls	r2, r3, #4
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3314      	adds	r3, #20
 800170c:	404a      	eors	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[6], in[2], 0x0f0f0f0f, 4);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3308      	adds	r3, #8
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3318      	adds	r3, #24
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	4053      	eors	r3, r2
 8001720:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3308      	adds	r3, #8
 800172a:	6819      	ldr	r1, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3308      	adds	r3, #8
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	404a      	eors	r2, r1
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3318      	adds	r3, #24
 800173a:	6819      	ldr	r1, [r3, #0]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	011a      	lsls	r2, r3, #4
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3318      	adds	r3, #24
 8001744:	404a      	eors	r2, r1
 8001746:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[3], 0x0f0f0f0f, 4);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	330c      	adds	r3, #12
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	331c      	adds	r3, #28
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	4053      	eors	r3, r2
 8001758:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	330c      	adds	r3, #12
 8001762:	6819      	ldr	r1, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	330c      	adds	r3, #12
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	404a      	eors	r2, r1
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	331c      	adds	r3, #28
 8001772:	6819      	ldr	r1, [r3, #0]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	011a      	lsls	r2, r3, #4
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	331c      	adds	r3, #28
 800177c:	404a      	eors	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[2], in[0], 0x33333333, 2);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3308      	adds	r3, #8
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	4053      	eors	r3, r2
 800178e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	405a      	eors	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3308      	adds	r3, #8
 80017a4:	6819      	ldr	r1, [r3, #0]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	009a      	lsls	r2, r3, #2
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3308      	adds	r3, #8
 80017ae:	404a      	eors	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[3], in[1], 0x33333333, 2);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3304      	adds	r3, #4
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	330c      	adds	r3, #12
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	4053      	eors	r3, r2
 80017c2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3304      	adds	r3, #4
 80017cc:	6819      	ldr	r1, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3304      	adds	r3, #4
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	404a      	eors	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	330c      	adds	r3, #12
 80017dc:	6819      	ldr	r1, [r3, #0]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	009a      	lsls	r2, r3, #2
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	330c      	adds	r3, #12
 80017e6:	404a      	eors	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[6], in[4], 0x33333333, 2);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3310      	adds	r3, #16
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3318      	adds	r3, #24
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	4053      	eors	r3, r2
 80017fa:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3310      	adds	r3, #16
 8001804:	6819      	ldr	r1, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3310      	adds	r3, #16
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	404a      	eors	r2, r1
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3318      	adds	r3, #24
 8001814:	6819      	ldr	r1, [r3, #0]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	009a      	lsls	r2, r3, #2
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3318      	adds	r3, #24
 800181e:	404a      	eors	r2, r1
 8001820:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[5], 0x33333333, 2);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3314      	adds	r3, #20
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	331c      	adds	r3, #28
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	4053      	eors	r3, r2
 8001832:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3314      	adds	r3, #20
 800183c:	6819      	ldr	r1, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3314      	adds	r3, #20
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	404a      	eors	r2, r1
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	331c      	adds	r3, #28
 800184c:	6819      	ldr	r1, [r3, #0]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	009a      	lsls	r2, r3, #2
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	331c      	adds	r3, #28
 8001856:	404a      	eors	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[1], in[0], 0x55555555, 1);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3304      	adds	r3, #4
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	085b      	lsrs	r3, r3, #1
 8001866:	4053      	eors	r3, r2
 8001868:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	405a      	eors	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	6819      	ldr	r1, [r3, #0]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	005a      	lsls	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3304      	adds	r3, #4
 8001888:	404a      	eors	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[3], in[2], 0x55555555, 1);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3308      	adds	r3, #8
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	330c      	adds	r3, #12
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	085b      	lsrs	r3, r3, #1
 800189a:	4053      	eors	r3, r2
 800189c:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3308      	adds	r3, #8
 80018a6:	6819      	ldr	r1, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3308      	adds	r3, #8
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	404a      	eors	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	330c      	adds	r3, #12
 80018b6:	6819      	ldr	r1, [r3, #0]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	005a      	lsls	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	330c      	adds	r3, #12
 80018c0:	404a      	eors	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[5], in[4], 0x55555555, 1);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3310      	adds	r3, #16
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3314      	adds	r3, #20
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	085b      	lsrs	r3, r3, #1
 80018d2:	4053      	eors	r3, r2
 80018d4:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3310      	adds	r3, #16
 80018de:	6819      	ldr	r1, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3310      	adds	r3, #16
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	404a      	eors	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3314      	adds	r3, #20
 80018ee:	6819      	ldr	r1, [r3, #0]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005a      	lsls	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3314      	adds	r3, #20
 80018f8:	404a      	eors	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[6], 0x55555555, 1);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3318      	adds	r3, #24
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	331c      	adds	r3, #28
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	085b      	lsrs	r3, r3, #1
 800190a:	4053      	eors	r3, r2
 800190c:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3318      	adds	r3, #24
 8001916:	6819      	ldr	r1, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3318      	adds	r3, #24
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	404a      	eors	r2, r1
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	331c      	adds	r3, #28
 8001926:	6819      	ldr	r1, [r3, #0]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005a      	lsls	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	331c      	adds	r3, #28
 8001930:	404a      	eors	r2, r1
 8001932:	601a      	str	r2, [r3, #0]
	LE_STORE_32(out0, in[0]);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	701a      	strb	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	0a1a      	lsrs	r2, r3, #8
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3301      	adds	r3, #1
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	701a      	strb	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0c1a      	lsrs	r2, r3, #16
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3302      	adds	r3, #2
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	0e1a      	lsrs	r2, r3, #24
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3303      	adds	r3, #3
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 4, in[2]);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3308      	adds	r3, #8
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3304      	adds	r3, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3308      	adds	r3, #8
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	0a1a      	lsrs	r2, r3, #8
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3305      	adds	r3, #5
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	701a      	strb	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3308      	adds	r3, #8
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0c1a      	lsrs	r2, r3, #16
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3306      	adds	r3, #6
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3308      	adds	r3, #8
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0e1a      	lsrs	r2, r3, #24
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3307      	adds	r3, #7
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 8, in[4]);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3310      	adds	r3, #16
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3308      	adds	r3, #8
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	701a      	strb	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3310      	adds	r3, #16
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	0a1a      	lsrs	r2, r3, #8
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3309      	adds	r3, #9
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	701a      	strb	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3310      	adds	r3, #16
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	0c1a      	lsrs	r2, r3, #16
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	330a      	adds	r3, #10
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	701a      	strb	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3310      	adds	r3, #16
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	0e1a      	lsrs	r2, r3, #24
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	330b      	adds	r3, #11
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 12, in[6]);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3318      	adds	r3, #24
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	330c      	adds	r3, #12
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	701a      	strb	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3318      	adds	r3, #24
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0a1a      	lsrs	r2, r3, #8
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	330d      	adds	r3, #13
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3318      	adds	r3, #24
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0c1a      	lsrs	r2, r3, #16
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	330e      	adds	r3, #14
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3318      	adds	r3, #24
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	0e1a      	lsrs	r2, r3, #24
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	330f      	adds	r3, #15
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1, in[1]);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3304      	adds	r3, #4
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3304      	adds	r3, #4
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0a1a      	lsrs	r2, r3, #8
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3304      	adds	r3, #4
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0c1a      	lsrs	r2, r3, #16
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	3302      	adds	r3, #2
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3304      	adds	r3, #4
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0e1a      	lsrs	r2, r3, #24
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	3303      	adds	r3, #3
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 4, in[3]);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	330c      	adds	r3, #12
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	3304      	adds	r3, #4
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	701a      	strb	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	330c      	adds	r3, #12
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	0a1a      	lsrs	r2, r3, #8
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	3305      	adds	r3, #5
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	330c      	adds	r3, #12
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	0c1a      	lsrs	r2, r3, #16
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	3306      	adds	r3, #6
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	330c      	adds	r3, #12
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	0e1a      	lsrs	r2, r3, #24
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	3307      	adds	r3, #7
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 8, in[5]);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3314      	adds	r3, #20
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	3308      	adds	r3, #8
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3314      	adds	r3, #20
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0a1a      	lsrs	r2, r3, #8
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	3309      	adds	r3, #9
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3314      	adds	r3, #20
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	0c1a      	lsrs	r2, r3, #16
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	330a      	adds	r3, #10
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3314      	adds	r3, #20
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0e1a      	lsrs	r2, r3, #24
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	330b      	adds	r3, #11
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 12, in[7]);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	331c      	adds	r3, #28
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	330c      	adds	r3, #12
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	331c      	adds	r3, #28
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	0a1a      	lsrs	r2, r3, #8
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	330d      	adds	r3, #13
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	331c      	adds	r3, #28
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	0c1a      	lsrs	r2, r3, #16
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	330e      	adds	r3, #14
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	701a      	strb	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	331c      	adds	r3, #28
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	0e1a      	lsrs	r2, r3, #24
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	330f      	adds	r3, #15
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <ark>:

/******************************************************************************
* XOR the round key to the internal state. The round keys are expected to be 
* pre-computed and to be packed in the fixsliced representation.
******************************************************************************/
static void ark(uint32_t* state, const uint32_t* rkey) {
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 8; i++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	e012      	b.n	8001b5a <ark+0x36>
		state[i] ^= rkey[i];
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	6819      	ldr	r1, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	4413      	add	r3, r2
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4403      	add	r3, r0
 8001b50:	404a      	eors	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	3301      	adds	r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b07      	cmp	r3, #7
 8001b5e:	dde9      	ble.n	8001b34 <ark+0x10>
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <sbox>:
/******************************************************************************
* Bitsliced implementation of the AES Sbox based on Boyar, Peralta and Calik.
* See http://www.cs.yale.edu/homes/peralta/CircuitStuff/SLP_AES_113.txt
* Note that the 4 NOT (^= 0xffffffff) are moved to the key schedule.
******************************************************************************/
void sbox(uint32_t* state) {
 8001b6e:	b480      	push	{r7}
 8001b70:	b095      	sub	sp, #84	; 0x54
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4, t5,
		t6, t7, t8, t9, t10, t11, t12,
		t13, t14, t15, t16, t17;
	t0			= state[3] ^ state[5];
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	330c      	adds	r3, #12
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3314      	adds	r3, #20
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4053      	eors	r3, r2
 8001b84:	64fb      	str	r3, [r7, #76]	; 0x4c
	t1			= state[0] ^ state[6];
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3318      	adds	r3, #24
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4053      	eors	r3, r2
 8001b92:	64bb      	str	r3, [r7, #72]	; 0x48
	t2			= t1 ^ t0;
 8001b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b98:	4053      	eors	r3, r2
 8001b9a:	647b      	str	r3, [r7, #68]	; 0x44
	t3			= state[4] ^ t2;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3310      	adds	r3, #16
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ba4:	4053      	eors	r3, r2
 8001ba6:	643b      	str	r3, [r7, #64]	; 0x40
	t4			= t3 ^ state[5];
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3314      	adds	r3, #20
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bb0:	4053      	eors	r3, r2
 8001bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
	t5			= t2 & t4;
 8001bb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bb8:	4013      	ands	r3, r2
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
	t6			= t4 ^ state[7];
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	331c      	adds	r3, #28
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bc4:	4053      	eors	r3, r2
 8001bc6:	637b      	str	r3, [r7, #52]	; 0x34
	t7			= t3 ^ state[1];
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bd0:	4053      	eors	r3, r2
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
	t8			= state[0] ^ state[3]; 
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	330c      	adds	r3, #12
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4053      	eors	r3, r2
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
	t9			= t7 ^ t8;
 8001be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be6:	4053      	eors	r3, r2
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
	t10			= t8 & t9;
 8001bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bee:	4013      	ands	r3, r2
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
	t11			= state[7] ^ t9; 
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	331c      	adds	r3, #28
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bfa:	4053      	eors	r3, r2
 8001bfc:	623b      	str	r3, [r7, #32]
	t12			= state[0] ^ state[5];
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3314      	adds	r3, #20
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4053      	eors	r3, r2
 8001c0a:	61fb      	str	r3, [r7, #28]
	t13			= state[1] ^ state[2];
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3304      	adds	r3, #4
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3308      	adds	r3, #8
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4053      	eors	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
	t14			= t4 ^ t13;
 8001c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	4053      	eors	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
	t15			= t14 ^ t9;
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c28:	4053      	eors	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
	t16			= t0 & t15;
 8001c2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
	t17			= t16 ^ t10;
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	4053      	eors	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
	state[1]	= t14 ^ t12; 
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	6979      	ldr	r1, [r7, #20]
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	404a      	eors	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]
	state[2]	= t12 & t14;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3308      	adds	r3, #8
 8001c4c:	69f9      	ldr	r1, [r7, #28]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	400a      	ands	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3308      	adds	r3, #8
 8001c58:	6819      	ldr	r1, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3308      	adds	r3, #8
 8001c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c60:	404a      	eors	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]
	state[4]	= t13 ^ t9;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3310      	adds	r3, #16
 8001c68:	69b9      	ldr	r1, [r7, #24]
 8001c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c6c:	404a      	eors	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]
	state[5]	= t1 ^ state[4];
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3310      	adds	r3, #16
 8001c74:	6819      	ldr	r1, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3314      	adds	r3, #20
 8001c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c7c:	404a      	eors	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]
	t3			= t1 & state[4];
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3310      	adds	r3, #16
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c88:	4013      	ands	r3, r2
 8001c8a:	643b      	str	r3, [r7, #64]	; 0x40
	t10			= state[0] ^ state[4];
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3310      	adds	r3, #16
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4053      	eors	r3, r2
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
	t13 		^= state[7];
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	331c      	adds	r3, #28
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4053      	eors	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
	state[3] 	^= t13; 
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	330c      	adds	r3, #12
 8001caa:	6819      	ldr	r1, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	330c      	adds	r3, #12
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	404a      	eors	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
	t16			= state[3] & state[7];
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	330c      	adds	r3, #12
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	331c      	adds	r3, #28
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
	t16 		^= t5;
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cca:	4053      	eors	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
	t16 		^= state[2];
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3308      	adds	r3, #8
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4053      	eors	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
	state[1] 	^= t16;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	6819      	ldr	r1, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	404a      	eors	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]
	state[0] 	^= t13;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	405a      	eors	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	601a      	str	r2, [r3, #0]
	t16			= state[0] & t11;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6a3a      	ldr	r2, [r7, #32]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
	t16 		^= t3;
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d04:	4053      	eors	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
	state[2] 	^= t16;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3308      	adds	r3, #8
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3308      	adds	r3, #8
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	404a      	eors	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3308      	adds	r3, #8
 8001d1c:	6819      	ldr	r1, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3308      	adds	r3, #8
 8001d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d24:	404a      	eors	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]
	state[6] 	^= t13;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3318      	adds	r3, #24
 8001d2c:	6819      	ldr	r1, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3318      	adds	r3, #24
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	404a      	eors	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]
	t10			= state[6] & t13;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3318      	adds	r3, #24
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
	t3 			^= t10;
 8001d44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	4053      	eors	r3, r2
 8001d4a:	643b      	str	r3, [r7, #64]	; 0x40
	t3 			^= t17;
 8001d4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	4053      	eors	r3, r2
 8001d52:	643b      	str	r3, [r7, #64]	; 0x40
	state[5] 	^= t3;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3314      	adds	r3, #20
 8001d58:	6819      	ldr	r1, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3314      	adds	r3, #20
 8001d5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d60:	404a      	eors	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]
	t3			= state[6] ^ t12;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3318      	adds	r3, #24
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	4053      	eors	r3, r2
 8001d6e:	643b      	str	r3, [r7, #64]	; 0x40
	t10			= t3 & t6;
 8001d70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d74:	4013      	ands	r3, r2
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
	t5 			^= t10;
 8001d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	4053      	eors	r3, r2
 8001d7e:	63bb      	str	r3, [r7, #56]	; 0x38
	t5 			^= t7;
 8001d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d84:	4053      	eors	r3, r2
 8001d86:	63bb      	str	r3, [r7, #56]	; 0x38
	t5 			^= t17;
 8001d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	4053      	eors	r3, r2
 8001d8e:	63bb      	str	r3, [r7, #56]	; 0x38
	t7			= t5 & state[5];
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3314      	adds	r3, #20
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d98:	4013      	ands	r3, r2
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30
	t10			= state[2] ^ t7;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3308      	adds	r3, #8
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001da4:	4053      	eors	r3, r2
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
	t7 			^= state[1];
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3304      	adds	r3, #4
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001db0:	4053      	eors	r3, r2
 8001db2:	633b      	str	r3, [r7, #48]	; 0x30
	t5 			^= state[1];
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3304      	adds	r3, #4
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dbc:	4053      	eors	r3, r2
 8001dbe:	63bb      	str	r3, [r7, #56]	; 0x38
	t16			= t5 & t10;
 8001dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
	state[1] 	^= t16;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3304      	adds	r3, #4
 8001dcc:	6819      	ldr	r1, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	404a      	eors	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]
	t17			= state[1] & state[0];
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4013      	ands	r3, r2
 8001de4:	60bb      	str	r3, [r7, #8]
	t11			= state[1] & t11;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3304      	adds	r3, #4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6a3a      	ldr	r2, [r7, #32]
 8001dee:	4013      	ands	r3, r2
 8001df0:	623b      	str	r3, [r7, #32]
	t16			= state[5] ^ state[2];
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3314      	adds	r3, #20
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3308      	adds	r3, #8
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4053      	eors	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
	t7 			&= t16;
 8001e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4013      	ands	r3, r2
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
	t7 			^= state[2];
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3308      	adds	r3, #8
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e12:	4053      	eors	r3, r2
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
	t16			= t10 ^ t7;
 8001e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1a:	4053      	eors	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
	state[2] 	&= t16;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3308      	adds	r3, #8
 8001e22:	6819      	ldr	r1, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3308      	adds	r3, #8
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]
	t10 		^= state[2];
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3308      	adds	r3, #8
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e36:	4053      	eors	r3, r2
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
	t10 		&= state[1];
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e42:	4013      	ands	r3, r2
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
	t5 			^= t10;
 8001e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	4053      	eors	r3, r2
 8001e4c:	63bb      	str	r3, [r7, #56]	; 0x38
	t10			= state[1] ^ t5;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3304      	adds	r3, #4
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e56:	4053      	eors	r3, r2
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
	state[4] 	&= t10; 
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3310      	adds	r3, #16
 8001e5e:	6819      	ldr	r1, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3310      	adds	r3, #16
 8001e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e66:	400a      	ands	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]
	t11 		^= state[4];
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3310      	adds	r3, #16
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6a3a      	ldr	r2, [r7, #32]
 8001e72:	4053      	eors	r3, r2
 8001e74:	623b      	str	r3, [r7, #32]
	t1 			&= t10;
 8001e76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	64bb      	str	r3, [r7, #72]	; 0x48
	state[6] 	&= t5; 
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3318      	adds	r3, #24
 8001e82:	6819      	ldr	r1, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3318      	adds	r3, #24
 8001e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
	t10			= t5 & t13;
 8001e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
	state[4] 	^= t10;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3310      	adds	r3, #16
 8001e9a:	6819      	ldr	r1, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3310      	adds	r3, #16
 8001ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea2:	404a      	eors	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
	state[5] 	^= t7;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3314      	adds	r3, #20
 8001eaa:	6819      	ldr	r1, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3314      	adds	r3, #20
 8001eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eb2:	404a      	eors	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]
	state[2] 	^= state[5];
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3308      	adds	r3, #8
 8001eba:	6819      	ldr	r1, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3314      	adds	r3, #20
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3308      	adds	r3, #8
 8001ec6:	404a      	eors	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]
	state[5]	= t5 ^ state[2];
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3308      	adds	r3, #8
 8001ece:	6819      	ldr	r1, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3314      	adds	r3, #20
 8001ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ed6:	404a      	eors	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
	t5			= state[5] & t14;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3314      	adds	r3, #20
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	63bb      	str	r3, [r7, #56]	; 0x38
	t10			= state[5] & t12;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3314      	adds	r3, #20
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
	t12			= t7 ^ state[2];
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3308      	adds	r3, #8
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001efa:	4053      	eors	r3, r2
 8001efc:	61fb      	str	r3, [r7, #28]
	t4 			&= t12;
 8001efe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	4013      	ands	r3, r2
 8001f04:	63fb      	str	r3, [r7, #60]	; 0x3c
	t2 			&= t12;
 8001f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	647b      	str	r3, [r7, #68]	; 0x44
	t3 			&= state[2]; 
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3308      	adds	r3, #8
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f16:	4013      	ands	r3, r2
 8001f18:	643b      	str	r3, [r7, #64]	; 0x40
	state[2] 	&= t6;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3308      	adds	r3, #8
 8001f1e:	6819      	ldr	r1, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3308      	adds	r3, #8
 8001f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f26:	400a      	ands	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]
	state[2] 	^= t4;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3308      	adds	r3, #8
 8001f2e:	6819      	ldr	r1, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3308      	adds	r3, #8
 8001f34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f36:	404a      	eors	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]
	t13			= state[4] ^ state[2];
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3310      	adds	r3, #16
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3308      	adds	r3, #8
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4053      	eors	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
	state[3] 	&= t7;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	330c      	adds	r3, #12
 8001f4e:	6819      	ldr	r1, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	330c      	adds	r3, #12
 8001f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f56:	400a      	ands	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]
	state[1] 	^= t7;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	6819      	ldr	r1, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3304      	adds	r3, #4
 8001f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f66:	404a      	eors	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]
	state[5] 	^= state[1];
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3314      	adds	r3, #20
 8001f6e:	6819      	ldr	r1, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3304      	adds	r3, #4
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3314      	adds	r3, #20
 8001f7a:	404a      	eors	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]
	t6			= state[5] & t15;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3314      	adds	r3, #20
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
	state[4] 	^= t6; 
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3310      	adds	r3, #16
 8001f8e:	6819      	ldr	r1, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3310      	adds	r3, #16
 8001f94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f96:	404a      	eors	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]
	t0 			&= state[5];
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3314      	adds	r3, #20
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
	state[5]	= state[1] & t9; 
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	6819      	ldr	r1, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3314      	adds	r3, #20
 8001fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]
	state[5] 	^= state[4];
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3314      	adds	r3, #20
 8001fba:	6819      	ldr	r1, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3310      	adds	r3, #16
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3314      	adds	r3, #20
 8001fc6:	404a      	eors	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]
	state[1] 	&= t8;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]
	t6			= state[1] ^ state[5];
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3314      	adds	r3, #20
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4053      	eors	r3, r2
 8001fe8:	637b      	str	r3, [r7, #52]	; 0x34
	t0 			^= state[1];
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3304      	adds	r3, #4
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ff2:	4053      	eors	r3, r2
 8001ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
	state[1]	= t3 ^ t0;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ffc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ffe:	404a      	eors	r2, r1
 8002000:	601a      	str	r2, [r3, #0]
	t15			= state[1] ^ state[3];
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3304      	adds	r3, #4
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	330c      	adds	r3, #12
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4053      	eors	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
	t2 			^= state[1];
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3304      	adds	r3, #4
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800201a:	4053      	eors	r3, r2
 800201c:	647b      	str	r3, [r7, #68]	; 0x44
	state[0]	= t2 ^ state[5];
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3314      	adds	r3, #20
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002026:	405a      	eors	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	601a      	str	r2, [r3, #0]
	state[3]	= t2 ^ t13;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	330c      	adds	r3, #12
 8002030:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	404a      	eors	r2, r1
 8002036:	601a      	str	r2, [r3, #0]
	state[1]	= state[3] ^ state[5];
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	330c      	adds	r3, #12
 800203c:	6819      	ldr	r1, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3314      	adds	r3, #20
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3304      	adds	r3, #4
 8002048:	404a      	eors	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
	//state[1] 	^= 0xffffffff;
	t0 			^= state[6];
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3318      	adds	r3, #24
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002054:	4053      	eors	r3, r2
 8002056:	64fb      	str	r3, [r7, #76]	; 0x4c
	state[5]	= t7 & state[7];
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	331c      	adds	r3, #28
 800205c:	6819      	ldr	r1, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3314      	adds	r3, #20
 8002062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002064:	400a      	ands	r2, r1
 8002066:	601a      	str	r2, [r3, #0]
	t14			= t4 ^ state[5];
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3314      	adds	r3, #20
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002070:	4053      	eors	r3, r2
 8002072:	617b      	str	r3, [r7, #20]
	state[6]	= t1 ^ t14;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3318      	adds	r3, #24
 8002078:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	404a      	eors	r2, r1
 800207e:	601a      	str	r2, [r3, #0]
	state[6] 	^= t5; 
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3318      	adds	r3, #24
 8002084:	6819      	ldr	r1, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3318      	adds	r3, #24
 800208a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800208c:	404a      	eors	r2, r1
 800208e:	601a      	str	r2, [r3, #0]
	state[6] 	^= state[4];
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3318      	adds	r3, #24
 8002094:	6819      	ldr	r1, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3310      	adds	r3, #16
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3318      	adds	r3, #24
 80020a0:	404a      	eors	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
	state[2]	= t17 ^ state[6];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3318      	adds	r3, #24
 80020a8:	6819      	ldr	r1, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3308      	adds	r3, #8
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	404a      	eors	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]
	state[5]	= t15 ^ state[2];
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3308      	adds	r3, #8
 80020b8:	6819      	ldr	r1, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3314      	adds	r3, #20
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	404a      	eors	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]
	state[2] 	^= t6;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3308      	adds	r3, #8
 80020c8:	6819      	ldr	r1, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3308      	adds	r3, #8
 80020ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020d0:	404a      	eors	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3308      	adds	r3, #8
 80020d8:	6819      	ldr	r1, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3308      	adds	r3, #8
 80020de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e0:	404a      	eors	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]
	//state[2] 	^= 0xffffffff;
	t14 		^= t11;
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	4053      	eors	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
	t0 			^= t14;
 80020ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	4053      	eors	r3, r2
 80020f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	state[6] 	^= t0;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3318      	adds	r3, #24
 80020f8:	6819      	ldr	r1, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3318      	adds	r3, #24
 80020fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002100:	404a      	eors	r2, r1
 8002102:	601a      	str	r2, [r3, #0]
	//state[6] 	^= 0xffffffff;
	state[7]	= t1 ^ t0;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	331c      	adds	r3, #28
 8002108:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800210a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800210c:	404a      	eors	r2, r1
 800210e:	601a      	str	r2, [r3, #0]
	//state[7] 	^= 0xffffffff;
	state[4]	= t14 ^ state[3]; 
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	330c      	adds	r3, #12
 8002114:	6819      	ldr	r1, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3310      	adds	r3, #16
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	404a      	eors	r2, r1
 800211e:	601a      	str	r2, [r3, #0]
}
 8002120:	bf00      	nop
 8002122:	3754      	adds	r7, #84	; 0x54
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <double_shiftrows>:

/******************************************************************************
* Applies the ShiftRows transformation twice (i.e. SR^2) on the internal state.
******************************************************************************/
static void double_shiftrows(uint32_t* state) {
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
    uint32_t tmp;
	for(int i = 0; i < 8; i++)
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	e02a      	b.n	8002190 <double_shiftrows+0x64>
        SWAPMOVE(state[i], state[i], 0x0f000f00, 4);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	440b      	add	r3, r1
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	4053      	eors	r3, r2
 8002152:	f003 230f 	and.w	r3, r3, #251662080	; 0xf000f00
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	6819      	ldr	r1, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	404a      	eors	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	4413      	add	r3, r2
 8002178:	6819      	ldr	r1, [r3, #0]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	011a      	lsls	r2, r3, #4
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4403      	add	r3, r0
 8002186:	404a      	eors	r2, r1
 8002188:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3301      	adds	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b07      	cmp	r3, #7
 8002194:	ddd1      	ble.n	800213a <double_shiftrows+0xe>
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <mixcolumns_0>:
/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 0.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 0.
******************************************************************************/
static void mixcolumns_0(uint32_t* state) {
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4;
	t3 = ROR(BYTE_ROR_6(state[0]),8);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	099b      	lsrs	r3, r3, #6
 80021b2:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 80021c0:	4313      	orrs	r3, r2
 80021c2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80021c6:	61fb      	str	r3, [r7, #28]
	t0 = state[0] ^ t3;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	4053      	eors	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
	t1 = ROR(BYTE_ROR_6(state[7]),8);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	331c      	adds	r3, #28
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	099b      	lsrs	r3, r3, #6
 80021da:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	331c      	adds	r3, #28
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 80021ea:	4313      	orrs	r3, r2
 80021ec:	ea4f 2333 	mov.w	r3, r3, ror #8
 80021f0:	617b      	str	r3, [r7, #20]
	t2 = state[7] ^ t1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	331c      	adds	r3, #28
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	4053      	eors	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
	state[7] = ROR(BYTE_ROR_4(t2),16) ^ t1 ^ t0;
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800220e:	4313      	orrs	r3, r2
 8002210:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	ea82 0103 	eor.w	r1, r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	331c      	adds	r3, #28
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	404a      	eors	r2, r1
 8002222:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[6]),8);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3318      	adds	r3, #24
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	099b      	lsrs	r3, r3, #6
 800222c:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3318      	adds	r3, #24
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 800223c:	4313      	orrs	r3, r2
 800223e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002242:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[6];
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3318      	adds	r3, #24
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4053      	eors	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
	state[6] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	405a      	eors	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	ea82 0103 	eor.w	r1, r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800226c:	4313      	orrs	r3, r2
 800226e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3318      	adds	r3, #24
 8002276:	404a      	eors	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[5]),8);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3314      	adds	r3, #20
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	099b      	lsrs	r3, r3, #6
 8002282:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3314      	adds	r3, #20
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8002292:	4313      	orrs	r3, r2
 8002294:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002298:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[5];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3314      	adds	r3, #20
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	4053      	eors	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
	state[5] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	ea82 0103 	eor.w	r1, r2, r3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80022be:	4313      	orrs	r3, r2
 80022c0:	ea4f 4233 	mov.w	r2, r3, ror #16
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3314      	adds	r3, #20
 80022c8:	404a      	eors	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[4]),8);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3310      	adds	r3, #16
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	099b      	lsrs	r3, r3, #6
 80022d4:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3310      	adds	r3, #16
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 80022e4:	4313      	orrs	r3, r2
 80022e6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80022ea:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[4];
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3310      	adds	r3, #16
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4053      	eors	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
	state[4] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	405a      	eors	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	ea82 0103 	eor.w	r1, r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002314:	4313      	orrs	r3, r2
 8002316:	ea4f 4233 	mov.w	r2, r3, ror #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3310      	adds	r3, #16
 800231e:	404a      	eors	r2, r1
 8002320:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[3]),8);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	330c      	adds	r3, #12
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	330c      	adds	r3, #12
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 800233a:	4313      	orrs	r3, r2
 800233c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002340:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[3];
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	330c      	adds	r3, #12
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	4053      	eors	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
	state[3] = t4 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	405a      	eors	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	ea82 0103 	eor.w	r1, r2, r3
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800236a:	4313      	orrs	r3, r2
 800236c:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	330c      	adds	r3, #12
 8002374:	404a      	eors	r2, r1
 8002376:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[2]),8);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3308      	adds	r3, #8
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	099b      	lsrs	r3, r3, #6
 8002380:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3308      	adds	r3, #8
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 8002390:	4313      	orrs	r3, r2
 8002392:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002396:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[2];
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3308      	adds	r3, #8
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4053      	eors	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
	state[2] = t2 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	ea82 0103 	eor.w	r1, r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80023bc:	4313      	orrs	r3, r2
 80023be:	ea4f 4233 	mov.w	r2, r3, ror #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3308      	adds	r3, #8
 80023c6:	404a      	eors	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[1]),8);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3304      	adds	r3, #4
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	099b      	lsrs	r3, r3, #6
 80023d2:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	f003 33fc 	and.w	r3, r3, #4244438268	; 0xfcfcfcfc
 80023e2:	4313      	orrs	r3, r2
 80023e4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80023e8:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[1];
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3304      	adds	r3, #4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	4053      	eors	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
	state[1] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	ea82 0103 	eor.w	r1, r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800240e:	4313      	orrs	r3, r2
 8002410:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3304      	adds	r3, #4
 8002418:	404a      	eors	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
	state[0] = t2 ^ t3 ^ ROR(BYTE_ROR_4(t0),16);
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	405a      	eors	r2, r3
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 310f 	and.w	r1, r3, #252645135	; 0xf0f0f0f
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002432:	430b      	orrs	r3, r1
 8002434:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002438:	405a      	eors	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	601a      	str	r2, [r3, #0]
}
 800243e:	bf00      	nop
 8002440:	3724      	adds	r7, #36	; 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <mixcolumns_1>:

/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for round i s.t. (i%4) == 1.
******************************************************************************/
static void mixcolumns_1(uint32_t* state) {
 800244a:	b480      	push	{r7}
 800244c:	b087      	sub	sp, #28
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2;
	t0 = state[0] ^ ROR(BYTE_ROR_4(state[0]),8);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	f003 310f 	and.w	r1, r3, #252645135	; 0xf0f0f0f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800246a:	430b      	orrs	r3, r1
 800246c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002470:	4053      	eors	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
	t1 = state[7] ^ ROR(BYTE_ROR_4(state[7]),8);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	331c      	adds	r3, #28
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	331c      	adds	r3, #28
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 310f 	and.w	r1, r3, #252645135	; 0xf0f0f0f
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	331c      	adds	r3, #28
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002492:	430b      	orrs	r3, r1
 8002494:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002498:	4053      	eors	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
	t2 = state[6];
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	60fb      	str	r3, [r7, #12]
	state[6] = t1 ^ t0;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3318      	adds	r3, #24
 80024a6:	6939      	ldr	r1, [r7, #16]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	404a      	eors	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]
	state[7] ^= state[6] ^ ROR(t1,16);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	331c      	adds	r3, #28
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3318      	adds	r3, #24
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	ea4f 4333 	mov.w	r3, r3, ror #16
 80024c0:	405a      	eors	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	331c      	adds	r3, #28
 80024c6:	404a      	eors	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80024da:	4313      	orrs	r3, r2
 80024dc:	ea4f 2333 	mov.w	r3, r3, ror #8
 80024e0:	613b      	str	r3, [r7, #16]
	state[6] ^= t1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3318      	adds	r3, #24
 80024e6:	6819      	ldr	r1, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3318      	adds	r3, #24
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	404a      	eors	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4053      	eors	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
	state[6] ^= ROR(t1,16);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3318      	adds	r3, #24
 80024fe:	6819      	ldr	r1, [r3, #0]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3318      	adds	r3, #24
 800250a:	404a      	eors	r2, r1
 800250c:	601a      	str	r2, [r3, #0]
	t2 = state[5];
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	60fb      	str	r3, [r7, #12]
	state[5] = t1;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3314      	adds	r3, #20
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800252c:	4313      	orrs	r3, r2
 800252e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002532:	613b      	str	r3, [r7, #16]
	state[5] ^= t1;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3314      	adds	r3, #20
 8002538:	6819      	ldr	r1, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3314      	adds	r3, #20
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	404a      	eors	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4053      	eors	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
	state[5] ^= ROR(t1,16);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3314      	adds	r3, #20
 8002550:	6819      	ldr	r1, [r3, #0]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3314      	adds	r3, #20
 800255c:	404a      	eors	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
	t2 = state[4];
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	60fb      	str	r3, [r7, #12]
	state[4] = t1 ^ t0;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3310      	adds	r3, #16
 800256a:	6939      	ldr	r1, [r7, #16]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	404a      	eors	r2, r1
 8002570:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002582:	4313      	orrs	r3, r2
 8002584:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002588:	613b      	str	r3, [r7, #16]
	state[4] ^= t1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3310      	adds	r3, #16
 800258e:	6819      	ldr	r1, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3310      	adds	r3, #16
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	404a      	eors	r2, r1
 8002598:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4053      	eors	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
	state[4] ^= ROR(t1,16);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3310      	adds	r3, #16
 80025a6:	6819      	ldr	r1, [r3, #0]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	ea4f 4233 	mov.w	r2, r3, ror #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3310      	adds	r3, #16
 80025b2:	404a      	eors	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]
	t2 = state[3];
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	60fb      	str	r3, [r7, #12]
	state[3] = t1 ^ t0;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	330c      	adds	r3, #12
 80025c0:	6939      	ldr	r1, [r7, #16]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	404a      	eors	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80025d8:	4313      	orrs	r3, r2
 80025da:	ea4f 2333 	mov.w	r3, r3, ror #8
 80025de:	613b      	str	r3, [r7, #16]
	state[3] ^= t1;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	330c      	adds	r3, #12
 80025e4:	6819      	ldr	r1, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	330c      	adds	r3, #12
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	404a      	eors	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4053      	eors	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
	state[3] ^= ROR(t1,16);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	330c      	adds	r3, #12
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	330c      	adds	r3, #12
 8002608:	404a      	eors	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
	t2 = state[2];
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	60fb      	str	r3, [r7, #12]
	state[2] = t1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3308      	adds	r3, #8
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800262a:	4313      	orrs	r3, r2
 800262c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002630:	613b      	str	r3, [r7, #16]
	state[2] ^= t1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3308      	adds	r3, #8
 8002636:	6819      	ldr	r1, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3308      	adds	r3, #8
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	404a      	eors	r2, r1
 8002640:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4053      	eors	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
	state[2] ^= ROR(t1,16);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3308      	adds	r3, #8
 800264e:	6819      	ldr	r1, [r3, #0]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3308      	adds	r3, #8
 800265a:	404a      	eors	r2, r1
 800265c:	601a      	str	r2, [r3, #0]
	t2 = state[1];
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	60fb      	str	r3, [r7, #12]
	state[1] = t1;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3304      	adds	r3, #4
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800267c:	4313      	orrs	r3, r2
 800267e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002682:	613b      	str	r3, [r7, #16]
	state[1] ^= t1;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3304      	adds	r3, #4
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3304      	adds	r3, #4
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	404a      	eors	r2, r1
 8002692:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4053      	eors	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
	state[1] ^= ROR(t1,16);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3304      	adds	r3, #4
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	ea4f 4233 	mov.w	r2, r3, ror #16
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3304      	adds	r3, #4
 80026ac:	404a      	eors	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]
	t2 = state[0];
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
	state[0] = t1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80026cc:	4313      	orrs	r3, r2
 80026ce:	ea4f 2333 	mov.w	r3, r3, ror #8
 80026d2:	613b      	str	r3, [r7, #16]
	state[0] ^= t1;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	405a      	eors	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4053      	eors	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
	state[0] ^= ROR(t1,16);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	ea4f 4333 	mov.w	r3, r3, ror #16
 80026f2:	405a      	eors	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	601a      	str	r2, [r3, #0]
}
 80026f8:	bf00      	nop
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <mixcolumns_2>:

/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for rounds i s.t. (i%4) == 2.
******************************************************************************/
static void mixcolumns_2(uint32_t* state) {
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4;
	t3 = ROR(BYTE_ROR_2(state[0]),8);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	089b      	lsrs	r3, r3, #2
 8002712:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	019b      	lsls	r3, r3, #6
 800271c:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8002720:	4313      	orrs	r3, r2
 8002722:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002726:	61fb      	str	r3, [r7, #28]
	t0 = state[0] ^ t3;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	4053      	eors	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
	t1 = ROR(BYTE_ROR_2(state[7]),8);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	331c      	adds	r3, #28
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	331c      	adds	r3, #28
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	019b      	lsls	r3, r3, #6
 8002746:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 800274a:	4313      	orrs	r3, r2
 800274c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002750:	617b      	str	r3, [r7, #20]
	t2 = state[7] ^ t1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	331c      	adds	r3, #28
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4053      	eors	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
	state[7] = ROR(BYTE_ROR_4(t2),16) ^ t1 ^ t0;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800276e:	4313      	orrs	r3, r2
 8002770:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	ea82 0103 	eor.w	r1, r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	331c      	adds	r3, #28
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	404a      	eors	r2, r1
 8002782:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[6]),8);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3318      	adds	r3, #24
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3318      	adds	r3, #24
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	019b      	lsls	r3, r3, #6
 8002798:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 800279c:	4313      	orrs	r3, r2
 800279e:	ea4f 2333 	mov.w	r3, r3, ror #8
 80027a2:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[6];
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3318      	adds	r3, #24
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4053      	eors	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
	state[6] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	405a      	eors	r2, r3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	ea82 0103 	eor.w	r1, r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80027cc:	4313      	orrs	r3, r2
 80027ce:	ea4f 4233 	mov.w	r2, r3, ror #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3318      	adds	r3, #24
 80027d6:	404a      	eors	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[5]),8);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3314      	adds	r3, #20
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3314      	adds	r3, #20
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	019b      	lsls	r3, r3, #6
 80027ee:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 80027f2:	4313      	orrs	r3, r2
 80027f4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80027f8:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[5];
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3314      	adds	r3, #20
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4053      	eors	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
	state[5] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	ea82 0103 	eor.w	r1, r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800281e:	4313      	orrs	r3, r2
 8002820:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3314      	adds	r3, #20
 8002828:	404a      	eors	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[4]),8);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3310      	adds	r3, #16
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3310      	adds	r3, #16
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	019b      	lsls	r3, r3, #6
 8002840:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8002844:	4313      	orrs	r3, r2
 8002846:	ea4f 2333 	mov.w	r3, r3, ror #8
 800284a:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[4];
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3310      	adds	r3, #16
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4053      	eors	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
	state[4] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	405a      	eors	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	ea82 0103 	eor.w	r1, r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002874:	4313      	orrs	r3, r2
 8002876:	ea4f 4233 	mov.w	r2, r3, ror #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3310      	adds	r3, #16
 800287e:	404a      	eors	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[3]),8);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	330c      	adds	r3, #12
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	330c      	adds	r3, #12
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	019b      	lsls	r3, r3, #6
 8002896:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 800289a:	4313      	orrs	r3, r2
 800289c:	ea4f 2333 	mov.w	r3, r3, ror #8
 80028a0:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[3];
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	330c      	adds	r3, #12
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	4053      	eors	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
	state[3] = t4 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	405a      	eors	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	ea82 0103 	eor.w	r1, r2, r3
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 80028ca:	4313      	orrs	r3, r2
 80028cc:	ea4f 4233 	mov.w	r2, r3, ror #16
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	330c      	adds	r3, #12
 80028d4:	404a      	eors	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[2]),8);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3308      	adds	r3, #8
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3308      	adds	r3, #8
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	019b      	lsls	r3, r3, #6
 80028ec:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 80028f0:	4313      	orrs	r3, r2
 80028f2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80028f6:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[2];
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3308      	adds	r3, #8
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4053      	eors	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]
	state[2] = t2 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	ea82 0103 	eor.w	r1, r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800291c:	4313      	orrs	r3, r2
 800291e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3308      	adds	r3, #8
 8002926:	404a      	eors	r2, r1
 8002928:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[1]),8);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3304      	adds	r3, #4
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	f003 323f 	and.w	r2, r3, #1061109567	; 0x3f3f3f3f
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3304      	adds	r3, #4
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	019b      	lsls	r3, r3, #6
 800293e:	f003 33c0 	and.w	r3, r3, #3233857728	; 0xc0c0c0c0
 8002942:	4313      	orrs	r3, r2
 8002944:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002948:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[1];
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3304      	adds	r3, #4
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4053      	eors	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
	state[1] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	ea82 0103 	eor.w	r1, r2, r3
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800296e:	4313      	orrs	r3, r2
 8002970:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3304      	adds	r3, #4
 8002978:	404a      	eors	r2, r1
 800297a:	601a      	str	r2, [r3, #0]
	state[0] = t2 ^ t3 ^ ROR(BYTE_ROR_4(t0),16);
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	405a      	eors	r2, r3
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 310f 	and.w	r1, r3, #252645135	; 0xf0f0f0f
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8002992:	430b      	orrs	r3, r1
 8002994:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002998:	405a      	eors	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	601a      	str	r2, [r3, #0]
}
 800299e:	bf00      	nop
 80029a0:	3724      	adds	r7, #36	; 0x24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <mixcolumns_3>:
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 3.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 1.
* Based on Käsper-Schwabe, similar to https://github.com/Ko-/aes-armcortexm.
******************************************************************************/
static void mixcolumns_3(uint32_t* state) {
 80029aa:	b480      	push	{r7}
 80029ac:	b087      	sub	sp, #28
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2;
	t0 = state[7] ^ ROR(state[7],8);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	331c      	adds	r3, #28
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	331c      	adds	r3, #28
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	ea4f 2333 	mov.w	r3, r3, ror #8
 80029c2:	4053      	eors	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
	t2 = state[0] ^ ROR(state[0],8);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	ea4f 2333 	mov.w	r3, r3, ror #8
 80029d2:	4053      	eors	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
	state[7] = t2 ^ ROR(state[7], 8) ^ ROR(t0, 16);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	331c      	adds	r3, #28
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	ea4f 2233 	mov.w	r2, r3, ror #8
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	ea82 0103 	eor.w	r1, r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	ea4f 4233 	mov.w	r2, r3, ror #16
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	331c      	adds	r3, #28
 80029f0:	404a      	eors	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]
	t1 = state[6] ^ ROR(state[6],8);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3318      	adds	r3, #24
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3318      	adds	r3, #24
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002a04:	4053      	eors	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
	state[6] = t0 ^ t2 ^ ROR(state[6], 8) ^ ROR(t1,16);
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	405a      	eors	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3318      	adds	r3, #24
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002a18:	ea82 0103 	eor.w	r1, r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3318      	adds	r3, #24
 8002a26:	404a      	eors	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]
	t0 = state[5] ^ ROR(state[5],8);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3314      	adds	r3, #20
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3314      	adds	r3, #20
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002a3a:	4053      	eors	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
	state[5] = t1 ^ ROR(state[5],8) ^ ROR(t0,16);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3314      	adds	r3, #20
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	ea82 0103 	eor.w	r1, r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3314      	adds	r3, #20
 8002a58:	404a      	eors	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
	t1 = state[4] ^ ROR(state[4],8);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3310      	adds	r3, #16
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3310      	adds	r3, #16
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002a6c:	4053      	eors	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
	state[4] = t0 ^ t2 ^ ROR(state[4],8) ^ ROR(t1,16);
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	405a      	eors	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3310      	adds	r3, #16
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002a80:	ea82 0103 	eor.w	r1, r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3310      	adds	r3, #16
 8002a8e:	404a      	eors	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]
	t0 = state[3] ^ ROR(state[3],8);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	330c      	adds	r3, #12
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	330c      	adds	r3, #12
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002aa2:	4053      	eors	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]
	state[3] = t1 ^ t2 ^ ROR(state[3],8) ^ ROR(t0,16);
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	405a      	eors	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	330c      	adds	r3, #12
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002ab6:	ea82 0103 	eor.w	r1, r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	330c      	adds	r3, #12
 8002ac4:	404a      	eors	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]
	t1 = state[2] ^ ROR(state[2],8);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3308      	adds	r3, #8
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3308      	adds	r3, #8
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002ad8:	4053      	eors	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
	state[2] = t0 ^ ROR(state[2],8) ^ ROR(t1,16);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3308      	adds	r3, #8
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	ea82 0103 	eor.w	r1, r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3308      	adds	r3, #8
 8002af6:	404a      	eors	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]
	t0 = state[1] ^ ROR(state[1],8);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002b0a:	4053      	eors	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
	state[1] = t1 ^ ROR(state[1],8) ^ ROR(t0,16);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3304      	adds	r3, #4
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	ea82 0103 	eor.w	r1, r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3304      	adds	r3, #4
 8002b28:	404a      	eors	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]
	state[0] = t0 ^ ROR(state[0],8) ^ ROR(t2,16);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	405a      	eors	r2, r3
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002b3e:	405a      	eors	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	601a      	str	r2, [r3, #0]
}
 8002b44:	bf00      	nop
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08c      	sub	sp, #48	; 0x30
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 8002b5e:	f107 0310 	add.w	r3, r7, #16
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fb98 	bl	800129c <packing>
	ark(state, rkeys_ffs); 				// key whitening
 8002b6c:	f107 0310 	add.w	r3, r7, #16
 8002b70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe ffd6 	bl	8001b24 <ark>
	sbox(state); 						// 1st round
 8002b78:	f107 0310 	add.w	r3, r7, #16
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe fff6 	bl	8001b6e <sbox>
	mixcolumns_0(state); 				// 1st round
 8002b82:	f107 0310 	add.w	r3, r7, #16
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fb0c 	bl	80021a4 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 8002b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8e:	f103 0220 	add.w	r2, r3, #32
 8002b92:	f107 0310 	add.w	r3, r7, #16
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe ffc3 	bl	8001b24 <ark>
	sbox(state); 						// 2nd round
 8002b9e:	f107 0310 	add.w	r3, r7, #16
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe ffe3 	bl	8001b6e <sbox>
	mixcolumns_1(state); 				// 2nd round
 8002ba8:	f107 0310 	add.w	r3, r7, #16
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fc4c 	bl	800244a <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002bb8:	f107 0310 	add.w	r3, r7, #16
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe ffb0 	bl	8001b24 <ark>
	sbox(state); 						// 3rd round
 8002bc4:	f107 0310 	add.w	r3, r7, #16
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe ffd0 	bl	8001b6e <sbox>
	mixcolumns_2(state); 				// 3rd round
 8002bce:	f107 0310 	add.w	r3, r7, #16
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fd96 	bl	8002704 <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bda:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002bde:	f107 0310 	add.w	r3, r7, #16
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe ff9d 	bl	8001b24 <ark>
	sbox(state); 						// 4th round
 8002bea:	f107 0310 	add.w	r3, r7, #16
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe ffbd 	bl	8001b6e <sbox>
	mixcolumns_3(state); 				// 4th round
 8002bf4:	f107 0310 	add.w	r3, r7, #16
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fed6 	bl	80029aa <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c00:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002c04:	f107 0310 	add.w	r3, r7, #16
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe ff8a 	bl	8001b24 <ark>
	sbox(state); 						// 5th round
 8002c10:	f107 0310 	add.w	r3, r7, #16
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fe ffaa 	bl	8001b6e <sbox>
	mixcolumns_0(state); 				// 5th round
 8002c1a:	f107 0310 	add.w	r3, r7, #16
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fac0 	bl	80021a4 <mixcolumns_0>
	ark(state, rkeys_ffs + 40); 		// 5th round
 8002c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c26:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8002c2a:	f107 0310 	add.w	r3, r7, #16
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe ff77 	bl	8001b24 <ark>
	sbox(state);						// 6th round
 8002c36:	f107 0310 	add.w	r3, r7, #16
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe ff97 	bl	8001b6e <sbox>
	mixcolumns_1(state); 				// 6th round
 8002c40:	f107 0310 	add.w	r3, r7, #16
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fc00 	bl	800244a <mixcolumns_1>
	ark(state, rkeys_ffs + 48); 		// 6th round
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4c:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 8002c50:	f107 0310 	add.w	r3, r7, #16
 8002c54:	4611      	mov	r1, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe ff64 	bl	8001b24 <ark>
	sbox(state); 						// 7th round
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe ff84 	bl	8001b6e <sbox>
	mixcolumns_2(state); 				// 7th round
 8002c66:	f107 0310 	add.w	r3, r7, #16
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fd4a 	bl	8002704 <mixcolumns_2>
	ark(state, rkeys_ffs + 56); 		// 7th round
 8002c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c72:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8002c76:	f107 0310 	add.w	r3, r7, #16
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe ff51 	bl	8001b24 <ark>
	sbox(state); 						// 8th round
 8002c82:	f107 0310 	add.w	r3, r7, #16
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe ff71 	bl	8001b6e <sbox>
	mixcolumns_3(state); 				// 8th round
 8002c8c:	f107 0310 	add.w	r3, r7, #16
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fe8a 	bl	80029aa <mixcolumns_3>
	ark(state, rkeys_ffs + 64); 		// 8th round
 8002c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c98:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8002c9c:	f107 0310 	add.w	r3, r7, #16
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe ff3e 	bl	8001b24 <ark>
	sbox(state); 						// 9th round
 8002ca8:	f107 0310 	add.w	r3, r7, #16
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe ff5e 	bl	8001b6e <sbox>
	mixcolumns_0(state); 				// 9th round
 8002cb2:	f107 0310 	add.w	r3, r7, #16
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fa74 	bl	80021a4 <mixcolumns_0>
	ark(state, rkeys_ffs + 72); 		// 9th round
 8002cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbe:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8002cc2:	f107 0310 	add.w	r3, r7, #16
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe ff2b 	bl	8001b24 <ark>
	sbox(state); 						// 10th round
 8002cce:	f107 0310 	add.w	r3, r7, #16
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe ff4b 	bl	8001b6e <sbox>
	double_shiftrows(state); 			// 10th round (resynchronization)
 8002cd8:	f107 0310 	add.w	r3, r7, #16
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fa25 	bl	800212c <double_shiftrows>
	ark(state, rkeys_ffs + 80); 		// 10th round
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce4:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8002ce8:	f107 0310 	add.w	r3, r7, #16
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe ff18 	bl	8001b24 <ark>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 8002cf4:	f107 0310 	add.w	r3, r7, #16
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7fe fccc 	bl	800169a <unpacking>
}
 8002d02:	bf00      	nop
 8002d04:	3730      	adds	r7, #48	; 0x30
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <inv_shiftrows_1>:


/******************************************************************************
* Applies ShiftRows^(-1) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_1(uint32_t* rkey) {
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++) {
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e052      	b.n	8002dc0 <inv_shiftrows_1+0xb4>
		SWAPMOVE(rkey[i], rkey[i], 0x0c0f0300, 4);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	440b      	add	r3, r1
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	405a      	eors	r2, r3
 8002d32:	4b28      	ldr	r3, [pc, #160]	; (8002dd4 <inv_shiftrows_1+0xc8>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	6819      	ldr	r1, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	404a      	eors	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	4413      	add	r3, r2
 8002d58:	6819      	ldr	r1, [r3, #0]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	011a      	lsls	r2, r3, #4
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	4403      	add	r3, r0
 8002d66:	404a      	eors	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]
		SWAPMOVE(rkey[i], rkey[i], 0x33003300, 2);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	440b      	add	r3, r1
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	4053      	eors	r3, r2
 8002d82:	f003 2333 	and.w	r3, r3, #855651072	; 0x33003300
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4413      	add	r3, r2
 8002d90:	6819      	ldr	r1, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	404a      	eors	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	6819      	ldr	r1, [r3, #0]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	009a      	lsls	r2, r3, #2
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4403      	add	r3, r0
 8002db6:	404a      	eors	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b07      	cmp	r3, #7
 8002dc4:	dda9      	ble.n	8002d1a <inv_shiftrows_1+0xe>
	}
}
 8002dc6:	bf00      	nop
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	0c0f0300 	.word	0x0c0f0300

08002dd8 <inv_shiftrows_2>:
/******************************************************************************
* Applies ShiftRows^(-2) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_2(uint32_t* rkey) {
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++)
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	e02a      	b.n	8002e3c <inv_shiftrows_2+0x64>
		SWAPMOVE(rkey[i], rkey[i], 0x0f000f00, 4);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	440b      	add	r3, r1
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	4053      	eors	r3, r2
 8002dfe:	f003 230f 	and.w	r3, r3, #251662080	; 0xf000f00
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	6819      	ldr	r1, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	404a      	eors	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	4413      	add	r3, r2
 8002e24:	6819      	ldr	r1, [r3, #0]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	011a      	lsls	r2, r3, #4
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	4403      	add	r3, r0
 8002e32:	404a      	eors	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b07      	cmp	r3, #7
 8002e40:	ddd1      	ble.n	8002de6 <inv_shiftrows_2+0xe>
}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <inv_shiftrows_3>:

/******************************************************************************
* Applies ShiftRows^(-3) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_3(uint32_t* rkey) {
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++) {
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	e052      	b.n	8002f04 <inv_shiftrows_3+0xb4>
		SWAPMOVE(rkey[i], rkey[i], 0x030f0c00, 4);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	440b      	add	r3, r1
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	405a      	eors	r2, r3
 8002e76:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <inv_shiftrows_3+0xc8>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4413      	add	r3, r2
 8002e84:	6819      	ldr	r1, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	404a      	eors	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	6819      	ldr	r1, [r3, #0]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	011a      	lsls	r2, r3, #4
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4403      	add	r3, r0
 8002eaa:	404a      	eors	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]
		SWAPMOVE(rkey[i], rkey[i], 0x33003300, 2);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	440b      	add	r3, r1
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	4053      	eors	r3, r2
 8002ec6:	f003 2333 	and.w	r3, r3, #855651072	; 0x33003300
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	6819      	ldr	r1, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	404a      	eors	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	6819      	ldr	r1, [r3, #0]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	009a      	lsls	r2, r3, #2
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4403      	add	r3, r0
 8002efa:	404a      	eors	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	3301      	adds	r3, #1
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b07      	cmp	r3, #7
 8002f08:	dda9      	ble.n	8002e5e <inv_shiftrows_3+0xe>
	}
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	030f0c00 	.word	0x030f0c00

08002f1c <xor_columns>:
* involved in the XOR computation (should be 8 and 16 for AES-128 and AES-256,
* respectively).
* The idx_ror parameter refers to the rotation value. When a Rotword is applied
* the value should be 2, 26 otherwise.
******************************************************************************/
static void xor_columns(uint32_t* rkeys, int idx_xor, int idx_ror) {
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
	rkeys[1] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	3304      	adds	r3, #4
 8002f32:	43d2      	mvns	r2, r2
 8002f34:	601a      	str	r2, [r3, #0]
	rkeys[2] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3308      	adds	r3, #8
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3308      	adds	r3, #8
 8002f40:	43d2      	mvns	r2, r2
 8002f42:	601a      	str	r2, [r3, #0]
	rkeys[6] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3318      	adds	r3, #24
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3318      	adds	r3, #24
 8002f4e:	43d2      	mvns	r2, r2
 8002f50:	601a      	str	r2, [r3, #0]
	rkeys[7] ^= 0xffffffff; 			// NOT that are omitted in S-box
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	331c      	adds	r3, #28
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	331c      	adds	r3, #28
 8002f5c:	43d2      	mvns	r2, r2
 8002f5e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	e06a      	b.n	800303c <xor_columns+0x120>
		rkeys[i] = (rkeys[i-idx_xor] ^ ROR(rkeys[i], idx_ror))  & 0xc0c0c0c0;
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4413      	add	r3, r2
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	68f9      	ldr	r1, [r7, #12]
 8002f7a:	440b      	add	r3, r1
 8002f7c:	6819      	ldr	r1, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	fa61 f303 	ror.w	r3, r1, r3
 8002f84:	405a      	eors	r2, r3
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	68f9      	ldr	r1, [r7, #12]
 8002f8c:	440b      	add	r3, r1
 8002f8e:	f002 32c0 	and.w	r2, r2, #3233857728	; 0xc0c0c0c0
 8002f92:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x30303030);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	6819      	ldr	r1, [r3, #0]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4413      	add	r3, r2
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	4403      	add	r3, r0
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	4053      	eors	r3, r2
 8002fba:	f003 3230 	and.w	r2, r3, #808464432	; 0x30303030
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	4403      	add	r3, r0
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x0c0c0c0c);
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	6819      	ldr	r1, [r3, #0]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	4403      	add	r3, r0
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	089b      	lsrs	r3, r3, #2
 8002fee:	4053      	eors	r3, r2
 8002ff0:	f003 320c 	and.w	r2, r3, #202116108	; 0xc0c0c0c
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	4403      	add	r3, r0
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x03030303);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	6819      	ldr	r1, [r3, #0]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4413      	add	r3, r2
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	4403      	add	r3, r0
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	089b      	lsrs	r3, r3, #2
 8003024:	4053      	eors	r3, r2
 8003026:	f003 3203 	and.w	r2, r3, #50529027	; 0x3030303
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	4403      	add	r3, r0
 8003032:	430a      	orrs	r2, r1
 8003034:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	3301      	adds	r3, #1
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b07      	cmp	r3, #7
 8003040:	dd91      	ble.n	8002f66 <xor_columns+0x4a>
	}
}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <aes128_keyschedule_ffs>:
* Fully bitsliced AES-128 key schedule to match the fully-fixsliced (ffs)
* representation. Note that it is possible to pass two different keys as input
* parameters if one wants to encrypt 2 blocks with two different keys.
******************************************************************************/
void aes128_keyschedule_ffs(uint32_t* rkeys, const unsigned char* key0,
						const unsigned char* key1) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
	packing(rkeys, key0, key1); 	// packs the keys into the bitsliced state
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f7fe f91b 	bl	800129c <packing>
	memcpy(rkeys+8, rkeys, 32);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3320      	adds	r3, #32
 800306a:	2220      	movs	r2, #32
 800306c:	68f9      	ldr	r1, [r7, #12]
 800306e:	4618      	mov	r0, r3
 8003070:	f004 f8a0 	bl	80071b4 <memcpy>
	sbox(rkeys+8);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3320      	adds	r3, #32
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe fd78 	bl	8001b6e <sbox>
	rkeys[15] ^= 0x00000300; 		// 1st rconst
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	333c      	adds	r3, #60	; 0x3c
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	333c      	adds	r3, #60	; 0x3c
 8003088:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 800308c:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+8, 8, 2); 	// Rotword and XOR between the columns
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3320      	adds	r3, #32
 8003092:	2202      	movs	r2, #2
 8003094:	2108      	movs	r1, #8
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ff40 	bl	8002f1c <xor_columns>
	memcpy(rkeys+16, rkeys+8, 32);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3320      	adds	r3, #32
 80030a6:	2220      	movs	r2, #32
 80030a8:	4619      	mov	r1, r3
 80030aa:	f004 f883 	bl	80071b4 <memcpy>
	sbox(rkeys+16);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3340      	adds	r3, #64	; 0x40
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe fd5b 	bl	8001b6e <sbox>
	rkeys[22] ^= 0x00000300;		// 2nd rconst
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3358      	adds	r3, #88	; 0x58
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	3358      	adds	r3, #88	; 0x58
 80030c2:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 80030c6:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+16, 8, 2); 	// Rotword and XOR between the columns
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3340      	adds	r3, #64	; 0x40
 80030cc:	2202      	movs	r2, #2
 80030ce:	2108      	movs	r1, #8
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ff23 	bl	8002f1c <xor_columns>
	inv_shiftrows_1(rkeys+8); 		// to match fixslicing
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3320      	adds	r3, #32
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fe16 	bl	8002d0c <inv_shiftrows_1>
	memcpy(rkeys+24, rkeys+16, 32);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f103 0060 	add.w	r0, r3, #96	; 0x60
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	3340      	adds	r3, #64	; 0x40
 80030ea:	2220      	movs	r2, #32
 80030ec:	4619      	mov	r1, r3
 80030ee:	f004 f861 	bl	80071b4 <memcpy>
	sbox(rkeys+24);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	3360      	adds	r3, #96	; 0x60
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe fd39 	bl	8001b6e <sbox>
	rkeys[29] ^= 0x00000300;		// 3rd rconst
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	3374      	adds	r3, #116	; 0x74
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3374      	adds	r3, #116	; 0x74
 8003106:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 800310a:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+24, 8, 2); 	// Rotword and XOR between the columns
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3360      	adds	r3, #96	; 0x60
 8003110:	2202      	movs	r2, #2
 8003112:	2108      	movs	r1, #8
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff ff01 	bl	8002f1c <xor_columns>
	inv_shiftrows_2(rkeys+16); 		// to match fixslicing
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	3340      	adds	r3, #64	; 0x40
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fe5a 	bl	8002dd8 <inv_shiftrows_2>
	memcpy(rkeys+32, rkeys+24, 32);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3360      	adds	r3, #96	; 0x60
 800312e:	2220      	movs	r2, #32
 8003130:	4619      	mov	r1, r3
 8003132:	f004 f83f 	bl	80071b4 <memcpy>
	sbox(rkeys+32);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3380      	adds	r3, #128	; 0x80
 800313a:	4618      	mov	r0, r3
 800313c:	f7fe fd17 	bl	8001b6e <sbox>
	rkeys[36] ^= 0x00000300; 		// 4th rconst
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3390      	adds	r3, #144	; 0x90
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	3390      	adds	r3, #144	; 0x90
 800314a:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 800314e:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+32, 8, 2); 	// Rotword and XOR between the columns
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3380      	adds	r3, #128	; 0x80
 8003154:	2202      	movs	r2, #2
 8003156:	2108      	movs	r1, #8
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fedf 	bl	8002f1c <xor_columns>
	inv_shiftrows_3(rkeys+24); 		// to match fixslicing
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	3360      	adds	r3, #96	; 0x60
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fe74 	bl	8002e50 <inv_shiftrows_3>
	memcpy(rkeys+40, rkeys+32, 32);	
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	3380      	adds	r3, #128	; 0x80
 8003172:	2220      	movs	r2, #32
 8003174:	4619      	mov	r1, r3
 8003176:	f004 f81d 	bl	80071b4 <memcpy>
	sbox(rkeys+40);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	33a0      	adds	r3, #160	; 0xa0
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fcf5 	bl	8001b6e <sbox>
	rkeys[43] ^= 0x00000300; 		// 5th rconst
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	33ac      	adds	r3, #172	; 0xac
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	33ac      	adds	r3, #172	; 0xac
 800318e:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8003192:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+40, 8, 2); 	// Rotword and XOR between the columns
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	33a0      	adds	r3, #160	; 0xa0
 8003198:	2202      	movs	r2, #2
 800319a:	2108      	movs	r1, #8
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff febd 	bl	8002f1c <xor_columns>
	memcpy(rkeys+48, rkeys+40, 32);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	33a0      	adds	r3, #160	; 0xa0
 80031ac:	2220      	movs	r2, #32
 80031ae:	4619      	mov	r1, r3
 80031b0:	f004 f800 	bl	80071b4 <memcpy>
	sbox(rkeys+48);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	33c0      	adds	r3, #192	; 0xc0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fe fcd8 	bl	8001b6e <sbox>
	rkeys[50] ^= 0x00000300;		// 6th rconst
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	33c8      	adds	r3, #200	; 0xc8
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	33c8      	adds	r3, #200	; 0xc8
 80031c8:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 80031cc:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+48, 8, 2); 	// Rotword and XOR between the columns
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	33c0      	adds	r3, #192	; 0xc0
 80031d2:	2202      	movs	r2, #2
 80031d4:	2108      	movs	r1, #8
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fea0 	bl	8002f1c <xor_columns>
	inv_shiftrows_1(rkeys+40); 		// to match fixslicing
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	33a0      	adds	r3, #160	; 0xa0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fd93 	bl	8002d0c <inv_shiftrows_1>
	memcpy(rkeys+56, rkeys+48, 32);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	33c0      	adds	r3, #192	; 0xc0
 80031f0:	2220      	movs	r2, #32
 80031f2:	4619      	mov	r1, r3
 80031f4:	f003 ffde 	bl	80071b4 <memcpy>
	sbox(rkeys+56);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	33e0      	adds	r3, #224	; 0xe0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fe fcb6 	bl	8001b6e <sbox>
	rkeys[57] ^= 0x00000300;		// 7th rconst
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	33e4      	adds	r3, #228	; 0xe4
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	33e4      	adds	r3, #228	; 0xe4
 800320c:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8003210:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+56, 8, 2); 	// Rotword and XOR between the columns
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	33e0      	adds	r3, #224	; 0xe0
 8003216:	2202      	movs	r2, #2
 8003218:	2108      	movs	r1, #8
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fe7e 	bl	8002f1c <xor_columns>
	inv_shiftrows_2(rkeys+48); 		// to match fixslicing
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	33c0      	adds	r3, #192	; 0xc0
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fdd7 	bl	8002dd8 <inv_shiftrows_2>
	memcpy(rkeys+64, rkeys+56, 32);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	33e0      	adds	r3, #224	; 0xe0
 8003234:	2220      	movs	r2, #32
 8003236:	4619      	mov	r1, r3
 8003238:	f003 ffbc 	bl	80071b4 <memcpy>
	sbox(rkeys+64);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe fc93 	bl	8001b6e <sbox>
	rkeys[64] ^= 0x00000300;		// 8th rconst
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003256:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 800325a:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+64, 8, 2); 	// Rotword and XOR between the columns
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003262:	2202      	movs	r2, #2
 8003264:	2108      	movs	r1, #8
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fe58 	bl	8002f1c <xor_columns>
	inv_shiftrows_3(rkeys+56); 		// to match fixslicing
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	33e0      	adds	r3, #224	; 0xe0
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fded 	bl	8002e50 <inv_shiftrows_3>
	memcpy(rkeys+72, rkeys+64, 32);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f503 7090 	add.w	r0, r3, #288	; 0x120
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003282:	2220      	movs	r2, #32
 8003284:	4619      	mov	r1, r3
 8003286:	f003 ff95 	bl	80071b4 <memcpy>
	sbox(rkeys+72);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe fc6c 	bl	8001b6e <sbox>
	rkeys[79] ^= 0x00000300; 		// 9th rconst
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80032a4:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 80032a8:	601a      	str	r2, [r3, #0]
	rkeys[78] ^= 0x00000300; 		// 9th rconst
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80032b8:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 80032bc:	601a      	str	r2, [r3, #0]
	rkeys[76] ^= 0x00000300; 		// 9th rconst
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80032cc:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 80032d0:	601a      	str	r2, [r3, #0]
	rkeys[75] ^= 0x00000300; 		// 9th rconst
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80032e0:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 80032e4:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys + 72, 8, 2); 	// Rotword and XOR between the columns
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80032ec:	2202      	movs	r2, #2
 80032ee:	2108      	movs	r1, #8
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fe13 	bl	8002f1c <xor_columns>
	memcpy(rkeys+80, rkeys+72, 32);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003302:	2220      	movs	r2, #32
 8003304:	4619      	mov	r1, r3
 8003306:	f003 ff55 	bl	80071b4 <memcpy>
	sbox(rkeys+80);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003310:	4618      	mov	r0, r3
 8003312:	f7fe fc2c 	bl	8001b6e <sbox>
	rkeys[86] ^= 0x00000300; 		// 10th rconst
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8003324:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8003328:	601a      	str	r2, [r3, #0]
	rkeys[85] ^= 0x00000300; 		// 10th rconst
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003338:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 800333c:	601a      	str	r2, [r3, #0]
	rkeys[83] ^= 0x00000300;		// 10th rconst
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800334c:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8003350:	601a      	str	r2, [r3, #0]
	rkeys[82] ^= 0x00000300; 		// 10th rconst
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003360:	f482 7240 	eor.w	r2, r2, #768	; 0x300
 8003364:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+80, 8, 2); 	// Rotword and XOR between the columns
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800336c:	2202      	movs	r2, #2
 800336e:	2108      	movs	r1, #8
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fdd3 	bl	8002f1c <xor_columns>
	inv_shiftrows_1(rkeys+72);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fcc5 	bl	8002d0c <inv_shiftrows_1>
	for(int i = 1; i < 11; i++) {
 8003382:	2301      	movs	r3, #1
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	e036      	b.n	80033f6 <aes128_keyschedule_ffs+0x3a6>
		rkeys[i*8 + 1] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	015b      	lsls	r3, r3, #5
 800338c:	3304      	adds	r3, #4
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4413      	add	r3, r2
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	015b      	lsls	r3, r3, #5
 8003398:	3304      	adds	r3, #4
 800339a:	68f9      	ldr	r1, [r7, #12]
 800339c:	440b      	add	r3, r1
 800339e:	43d2      	mvns	r2, r2
 80033a0:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 2] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	015b      	lsls	r3, r3, #5
 80033a6:	3308      	adds	r3, #8
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	015b      	lsls	r3, r3, #5
 80033b2:	3308      	adds	r3, #8
 80033b4:	68f9      	ldr	r1, [r7, #12]
 80033b6:	440b      	add	r3, r1
 80033b8:	43d2      	mvns	r2, r2
 80033ba:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 6] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	015b      	lsls	r3, r3, #5
 80033c0:	3318      	adds	r3, #24
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4413      	add	r3, r2
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	015b      	lsls	r3, r3, #5
 80033cc:	3318      	adds	r3, #24
 80033ce:	68f9      	ldr	r1, [r7, #12]
 80033d0:	440b      	add	r3, r1
 80033d2:	43d2      	mvns	r2, r2
 80033d4:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 7] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	015b      	lsls	r3, r3, #5
 80033da:	331c      	adds	r3, #28
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4413      	add	r3, r2
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	015b      	lsls	r3, r3, #5
 80033e6:	331c      	adds	r3, #28
 80033e8:	68f9      	ldr	r1, [r7, #12]
 80033ea:	440b      	add	r3, r1
 80033ec:	43d2      	mvns	r2, r2
 80033ee:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 11; i++) {
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	3301      	adds	r3, #1
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b0a      	cmp	r3, #10
 80033fa:	ddc5      	ble.n	8003388 <aes128_keyschedule_ffs+0x338>
	// 	printf("%x \n", rkeys[i]);
	// }
	


}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <serial_printf>:
 *      Author: cuauhtemoc
 */

#include "Serial.h"

void serial_printf(UART_HandleTypeDef *huart, uint8_t *pData, uint32_t Timeout){
 8003406:	b580      	push	{r7, lr}
 8003408:	b086      	sub	sp, #24
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
	uint16_t Size = 0;
 8003412:	2300      	movs	r3, #0
 8003414:	82fb      	strh	r3, [r7, #22]
	do{
		Size++;
 8003416:	8afb      	ldrh	r3, [r7, #22]
 8003418:	3301      	adds	r3, #1
 800341a:	82fb      	strh	r3, [r7, #22]
	}while(pData[Size]!='\0');
 800341c:	8afb      	ldrh	r3, [r7, #22]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	4413      	add	r3, r2
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f6      	bne.n	8003416 <serial_printf+0x10>
	HAL_UART_Transmit(huart, pData,Size, HAL_MAX_DELAY);
 8003428:	8afa      	ldrh	r2, [r7, #22]
 800342a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f002 feef 	bl	8006214 <HAL_UART_Transmit>
}
 8003436:	bf00      	nop
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <DWT_Init>:
static unsigned char asociated_data[plaintext_size];
static unsigned int bytes[7] = {32, 64, 128, 192, 256, 320, 512};

char buffer [1024];
unsigned int performance[REP];
void DWT_Init(void) {
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0

    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <DWT_Init+0x34>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <DWT_Init+0x34>)
 800344a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800344e:	60d3      	str	r3, [r2, #12]
    DWT->LAR = 0xC5ACCE55;
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <DWT_Init+0x38>)
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <DWT_Init+0x3c>)
 8003454:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    DWT->CYCCNT = 0;
 8003458:	4b07      	ldr	r3, [pc, #28]	; (8003478 <DWT_Init+0x38>)
 800345a:	2200      	movs	r2, #0
 800345c:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <DWT_Init+0x38>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a05      	ldr	r2, [pc, #20]	; (8003478 <DWT_Init+0x38>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6013      	str	r3, [r2, #0]
}
 800346a:	bf00      	nop
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	e000edf0 	.word	0xe000edf0
 8003478:	e0001000 	.word	0xe0001000
 800347c:	c5acce55 	.word	0xc5acce55

08003480 <start_timer>:

void start_timer(void) {
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0;
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <start_timer+0x14>)
 8003486:	2200      	movs	r2, #0
 8003488:	605a      	str	r2, [r3, #4]
}
 800348a:	bf00      	nop
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e0001000 	.word	0xe0001000

08003498 <stop_timer>:

uint32_t stop_timer(void) {
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 800349c:	4b03      	ldr	r3, [pc, #12]	; (80034ac <stop_timer+0x14>)
 800349e:	685b      	ldr	r3, [r3, #4]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	e0001000 	.word	0xe0001000

080034b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b090      	sub	sp, #64	; 0x40
 80034b4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034b6:	f000 fdfa 	bl	80040ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034ba:	f000 f9eb 	bl	8003894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034be:	f000 fafd 	bl	8003abc <MX_GPIO_Init>
  MX_ETH_Init();
 80034c2:	f000 fa4f 	bl	8003964 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80034c6:	f000 fa9b 	bl	8003a00 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80034ca:	f000 fac9 	bl	8003a60 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */


  for (size_t i = 0; i < plaintext_size; i++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
 80034d2:	e010      	b.n	80034f6 <main+0x46>
  {
	  plaintext[i] =i;
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	b2d9      	uxtb	r1, r3
 80034d8:	4aa1      	ldr	r2, [pc, #644]	; (8003760 <main+0x2b0>)
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	4413      	add	r3, r2
 80034de:	460a      	mov	r2, r1
 80034e0:	701a      	strb	r2, [r3, #0]
	  asociated_data[i]=i;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	b2d9      	uxtb	r1, r3
 80034e6:	4a9f      	ldr	r2, [pc, #636]	; (8003764 <main+0x2b4>)
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	4413      	add	r3, r2
 80034ec:	460a      	mov	r2, r1
 80034ee:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < plaintext_size; i++)
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	3301      	adds	r3, #1
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fc:	d3ea      	bcc.n	80034d4 <main+0x24>
  }

  DWT_Init(); // Inicializar el contador de ciclos
 80034fe:	f7ff ff9f 	bl	8003440 <DWT_Init>
  uint32_t cycles=0;
 8003502:	2300      	movs	r3, #0
 8003504:	607b      	str	r3, [r7, #4]
  uint32_t total_cycles=0;
 8003506:	2300      	movs	r3, #0
 8003508:	623b      	str	r3, [r7, #32]

  int i=0;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]



	  	  	i=0;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
	  	  	cycles=0;
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
	  	  	total_cycles=0;
 8003516:	2300      	movs	r3, #0
 8003518:	623b      	str	r3, [r7, #32]
	  	  	sprintf(buffer,"\n PMAC-OCB3");
 800351a:	4993      	ldr	r1, [pc, #588]	; (8003768 <main+0x2b8>)
 800351c:	4893      	ldr	r0, [pc, #588]	; (800376c <main+0x2bc>)
 800351e:	f003 fdf5 	bl	800710c <siprintf>
	  	  		serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003526:	4991      	ldr	r1, [pc, #580]	; (800376c <main+0x2bc>)
 8003528:	4891      	ldr	r0, [pc, #580]	; (8003770 <main+0x2c0>)
 800352a:	f7ff ff6c 	bl	8003406 <serial_printf>
	  	  		for (int j = 0; j < Number_test; j++) {
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	e032      	b.n	800359a <main+0xea>
	  	  			for (i = 0; i < REP; i++) {
 8003534:	2300      	movs	r3, #0
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	e01e      	b.n	8003578 <main+0xc8>
	  	  				start_timer(); // Iniciar el contador de ciclos
 800353a:	f7ff ffa1 	bl	8003480 <start_timer>
	  	  				OCB3(plaintext, ciphertext, nonce, asociated_data, 0, 12, bytes[j], key1, tag);
 800353e:	4a8d      	ldr	r2, [pc, #564]	; (8003774 <main+0x2c4>)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003546:	4a8c      	ldr	r2, [pc, #560]	; (8003778 <main+0x2c8>)
 8003548:	9204      	str	r2, [sp, #16]
 800354a:	4a8c      	ldr	r2, [pc, #560]	; (800377c <main+0x2cc>)
 800354c:	9203      	str	r2, [sp, #12]
 800354e:	9302      	str	r3, [sp, #8]
 8003550:	230c      	movs	r3, #12
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	2300      	movs	r3, #0
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	4b82      	ldr	r3, [pc, #520]	; (8003764 <main+0x2b4>)
 800355a:	4a89      	ldr	r2, [pc, #548]	; (8003780 <main+0x2d0>)
 800355c:	4989      	ldr	r1, [pc, #548]	; (8003784 <main+0x2d4>)
 800355e:	4880      	ldr	r0, [pc, #512]	; (8003760 <main+0x2b0>)
 8003560:	f7fd f954 	bl	800080c <OCB3>
	  	  				cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 8003564:	f7ff ff98 	bl	8003498 <stop_timer>
 8003568:	6078      	str	r0, [r7, #4]
	  	  				total_cycles=cycles+total_cycles;
 800356a:	6a3a      	ldr	r2, [r7, #32]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4413      	add	r3, r2
 8003570:	623b      	str	r3, [r7, #32]
	  	  			for (i = 0; i < REP; i++) {
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3301      	adds	r3, #1
 8003576:	61fb      	str	r3, [r7, #28]
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b1d      	cmp	r3, #29
 800357c:	dddd      	ble.n	800353a <main+0x8a>
	  	  			}
	  	  			performance[j] = total_cycles/REP;
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	4a81      	ldr	r2, [pc, #516]	; (8003788 <main+0x2d8>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	091a      	lsrs	r2, r3, #4
 8003588:	4980      	ldr	r1, [pc, #512]	; (800378c <main+0x2dc>)
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  	  			total_cycles=0;
 8003590:	2300      	movs	r3, #0
 8003592:	623b      	str	r3, [r7, #32]
	  	  		for (int j = 0; j < Number_test; j++) {
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	3301      	adds	r3, #1
 8003598:	61bb      	str	r3, [r7, #24]
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b06      	cmp	r3, #6
 800359e:	ddc9      	ble.n	8003534 <main+0x84>
	  	  		}
	  	  	  for (i = 0; i < Number_test; i++) {
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
 80035a4:	e020      	b.n	80035e8 <main+0x138>
	  	  			sprintf(buffer,"\n bytes %u ", bytes[i]);
 80035a6:	4a73      	ldr	r2, [pc, #460]	; (8003774 <main+0x2c4>)
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ae:	461a      	mov	r2, r3
 80035b0:	4977      	ldr	r1, [pc, #476]	; (8003790 <main+0x2e0>)
 80035b2:	486e      	ldr	r0, [pc, #440]	; (800376c <main+0x2bc>)
 80035b4:	f003 fdaa 	bl	800710c <siprintf>
	  	  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 80035b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035bc:	496b      	ldr	r1, [pc, #428]	; (800376c <main+0x2bc>)
 80035be:	486c      	ldr	r0, [pc, #432]	; (8003770 <main+0x2c0>)
 80035c0:	f7ff ff21 	bl	8003406 <serial_printf>
	  	  			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 80035c4:	4a71      	ldr	r2, [pc, #452]	; (800378c <main+0x2dc>)
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	4971      	ldr	r1, [pc, #452]	; (8003794 <main+0x2e4>)
 80035d0:	4866      	ldr	r0, [pc, #408]	; (800376c <main+0x2bc>)
 80035d2:	f003 fd9b 	bl	800710c <siprintf>
	  	  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 80035d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035da:	4964      	ldr	r1, [pc, #400]	; (800376c <main+0x2bc>)
 80035dc:	4864      	ldr	r0, [pc, #400]	; (8003770 <main+0x2c0>)
 80035de:	f7ff ff12 	bl	8003406 <serial_printf>
	  	  	  for (i = 0; i < Number_test; i++) {
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	3301      	adds	r3, #1
 80035e6:	61fb      	str	r3, [r7, #28]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	dddb      	ble.n	80035a6 <main+0xf6>
	  	  	   }
		for (size_t i = 0; i < plaintext_size; i++)
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	e010      	b.n	8003616 <main+0x166>
		{
		  plaintext[i] =i;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	b2d9      	uxtb	r1, r3
 80035f8:	4a59      	ldr	r2, [pc, #356]	; (8003760 <main+0x2b0>)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	4413      	add	r3, r2
 80035fe:	460a      	mov	r2, r1
 8003600:	701a      	strb	r2, [r3, #0]
		  asociated_data[i]=i;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	b2d9      	uxtb	r1, r3
 8003606:	4a57      	ldr	r2, [pc, #348]	; (8003764 <main+0x2b4>)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	4413      	add	r3, r2
 800360c:	460a      	mov	r2, r1
 800360e:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < plaintext_size; i++)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3301      	adds	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361c:	d3ea      	bcc.n	80035f4 <main+0x144>
		}
		i=0;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
	  	cycles=0;
 8003622:	2300      	movs	r3, #0
 8003624:	607b      	str	r3, [r7, #4]
	  	total_cycles=0;
 8003626:	2300      	movs	r3, #0
 8003628:	623b      	str	r3, [r7, #32]
	  	sprintf(buffer,"\n OCB3+PMAC ENC");
 800362a:	495b      	ldr	r1, [pc, #364]	; (8003798 <main+0x2e8>)
 800362c:	484f      	ldr	r0, [pc, #316]	; (800376c <main+0x2bc>)
 800362e:	f003 fd6d 	bl	800710c <siprintf>
	  		serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003636:	494d      	ldr	r1, [pc, #308]	; (800376c <main+0x2bc>)
 8003638:	484d      	ldr	r0, [pc, #308]	; (8003770 <main+0x2c0>)
 800363a:	f7ff fee4 	bl	8003406 <serial_printf>
	  		for (int j = 0; j < Number_test; j++) {
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	e035      	b.n	80036b0 <main+0x200>
	  			for (i = 0; i < REP; i++) {
 8003644:	2300      	movs	r3, #0
 8003646:	61fb      	str	r3, [r7, #28]
 8003648:	e021      	b.n	800368e <main+0x1de>
	  				start_timer(); // Iniciar el contador de ciclos
 800364a:	f7ff ff19 	bl	8003480 <start_timer>
	  				OCB3(plaintext, ciphertext, nonce, asociated_data, bytes[j], 12, bytes[j], key1, tag);
 800364e:	4a49      	ldr	r2, [pc, #292]	; (8003774 <main+0x2c4>)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003656:	4947      	ldr	r1, [pc, #284]	; (8003774 <main+0x2c4>)
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800365e:	4946      	ldr	r1, [pc, #280]	; (8003778 <main+0x2c8>)
 8003660:	9104      	str	r1, [sp, #16]
 8003662:	4946      	ldr	r1, [pc, #280]	; (800377c <main+0x2cc>)
 8003664:	9103      	str	r1, [sp, #12]
 8003666:	9202      	str	r2, [sp, #8]
 8003668:	220c      	movs	r2, #12
 800366a:	9201      	str	r2, [sp, #4]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	4b3d      	ldr	r3, [pc, #244]	; (8003764 <main+0x2b4>)
 8003670:	4a43      	ldr	r2, [pc, #268]	; (8003780 <main+0x2d0>)
 8003672:	4944      	ldr	r1, [pc, #272]	; (8003784 <main+0x2d4>)
 8003674:	483a      	ldr	r0, [pc, #232]	; (8003760 <main+0x2b0>)
 8003676:	f7fd f8c9 	bl	800080c <OCB3>
	  				cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 800367a:	f7ff ff0d 	bl	8003498 <stop_timer>
 800367e:	6078      	str	r0, [r7, #4]
	  				total_cycles=cycles+total_cycles;
 8003680:	6a3a      	ldr	r2, [r7, #32]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	623b      	str	r3, [r7, #32]
	  			for (i = 0; i < REP; i++) {
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	3301      	adds	r3, #1
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	2b1d      	cmp	r3, #29
 8003692:	ddda      	ble.n	800364a <main+0x19a>
	  			}
	  			performance[j] = total_cycles/REP;
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	4a3c      	ldr	r2, [pc, #240]	; (8003788 <main+0x2d8>)
 8003698:	fba2 2303 	umull	r2, r3, r2, r3
 800369c:	091a      	lsrs	r2, r3, #4
 800369e:	493b      	ldr	r1, [pc, #236]	; (800378c <main+0x2dc>)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  			total_cycles=0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	623b      	str	r3, [r7, #32]
	  		for (int j = 0; j < Number_test; j++) {
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	3301      	adds	r3, #1
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	ddc6      	ble.n	8003644 <main+0x194>
	  		}
	  	  for (i = 0; i < Number_test; i++) {
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	e020      	b.n	80036fe <main+0x24e>
	  			sprintf(buffer,"\n bytes %u ", bytes[i]);
 80036bc:	4a2d      	ldr	r2, [pc, #180]	; (8003774 <main+0x2c4>)
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c4:	461a      	mov	r2, r3
 80036c6:	4932      	ldr	r1, [pc, #200]	; (8003790 <main+0x2e0>)
 80036c8:	4828      	ldr	r0, [pc, #160]	; (800376c <main+0x2bc>)
 80036ca:	f003 fd1f 	bl	800710c <siprintf>
	  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 80036ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036d2:	4926      	ldr	r1, [pc, #152]	; (800376c <main+0x2bc>)
 80036d4:	4826      	ldr	r0, [pc, #152]	; (8003770 <main+0x2c0>)
 80036d6:	f7ff fe96 	bl	8003406 <serial_printf>
	  			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 80036da:	4a2c      	ldr	r2, [pc, #176]	; (800378c <main+0x2dc>)
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	492b      	ldr	r1, [pc, #172]	; (8003794 <main+0x2e4>)
 80036e6:	4821      	ldr	r0, [pc, #132]	; (800376c <main+0x2bc>)
 80036e8:	f003 fd10 	bl	800710c <siprintf>
	  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036f0:	491e      	ldr	r1, [pc, #120]	; (800376c <main+0x2bc>)
 80036f2:	481f      	ldr	r0, [pc, #124]	; (8003770 <main+0x2c0>)
 80036f4:	f7ff fe87 	bl	8003406 <serial_printf>
	  	  for (i = 0; i < Number_test; i++) {
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	3301      	adds	r3, #1
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	2b06      	cmp	r3, #6
 8003702:	dddb      	ble.n	80036bc <main+0x20c>
	  	   }


	  	for (size_t i = 0; i < plaintext_size; i++)
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e010      	b.n	800372c <main+0x27c>
	  			{
	  			  plaintext[i] =i;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	b2d9      	uxtb	r1, r3
 800370e:	4a14      	ldr	r2, [pc, #80]	; (8003760 <main+0x2b0>)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	460a      	mov	r2, r1
 8003716:	701a      	strb	r2, [r3, #0]
	  			  asociated_data[i]=i;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	b2d9      	uxtb	r1, r3
 800371c:	4a11      	ldr	r2, [pc, #68]	; (8003764 <main+0x2b4>)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	460a      	mov	r2, r1
 8003724:	701a      	strb	r2, [r3, #0]
	  	for (size_t i = 0; i < plaintext_size; i++)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	3301      	adds	r3, #1
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003732:	d3ea      	bcc.n	800370a <main+0x25a>
	  			}
	  			i=0;
 8003734:	2300      	movs	r3, #0
 8003736:	61fb      	str	r3, [r7, #28]
	  		  	cycles=0;
 8003738:	2300      	movs	r3, #0
 800373a:	607b      	str	r3, [r7, #4]
	  		  	total_cycles=0;
 800373c:	2300      	movs	r3, #0
 800373e:	623b      	str	r3, [r7, #32]
	  		  	sprintf(buffer,"\n OCB3 ENC");
 8003740:	4916      	ldr	r1, [pc, #88]	; (800379c <main+0x2ec>)
 8003742:	480a      	ldr	r0, [pc, #40]	; (800376c <main+0x2bc>)
 8003744:	f003 fce2 	bl	800710c <siprintf>
	  		  		serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8003748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800374c:	4907      	ldr	r1, [pc, #28]	; (800376c <main+0x2bc>)
 800374e:	4808      	ldr	r0, [pc, #32]	; (8003770 <main+0x2c0>)
 8003750:	f7ff fe59 	bl	8003406 <serial_printf>
	  		  		for (int j = 0; j < Number_test; j++) {
 8003754:	2300      	movs	r3, #0
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	e052      	b.n	8003800 <main+0x350>
	  		  			for (i = 0; i < REP; i++) {
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	e03e      	b.n	80037de <main+0x32e>
 8003760:	2000098c 	.word	0x2000098c
 8003764:	2000298c 	.word	0x2000298c
 8003768:	08007a88 	.word	0x08007a88
 800376c:	2000398c 	.word	0x2000398c
 8003770:	200003ec 	.word	0x200003ec
 8003774:	20000020 	.word	0x20000020
 8003778:	2000097c 	.word	0x2000097c
 800377c:	20000000 	.word	0x20000000
 8003780:	20000010 	.word	0x20000010
 8003784:	2000198c 	.word	0x2000198c
 8003788:	88888889 	.word	0x88888889
 800378c:	20003d8c 	.word	0x20003d8c
 8003790:	08007a94 	.word	0x08007a94
 8003794:	08007aa0 	.word	0x08007aa0
 8003798:	08007ab8 	.word	0x08007ab8
 800379c:	08007ac8 	.word	0x08007ac8
	  		  				start_timer(); // Iniciar el contador de ciclos
 80037a0:	f7ff fe6e 	bl	8003480 <start_timer>
	  		  				OCB3(plaintext, ciphertext, nonce, asociated_data, bytes[j], 12, 0, key1, tag);
 80037a4:	4a2e      	ldr	r2, [pc, #184]	; (8003860 <main+0x3b0>)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ac:	4a2d      	ldr	r2, [pc, #180]	; (8003864 <main+0x3b4>)
 80037ae:	9204      	str	r2, [sp, #16]
 80037b0:	4a2d      	ldr	r2, [pc, #180]	; (8003868 <main+0x3b8>)
 80037b2:	9203      	str	r2, [sp, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	9202      	str	r2, [sp, #8]
 80037b8:	220c      	movs	r2, #12
 80037ba:	9201      	str	r2, [sp, #4]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	4b2b      	ldr	r3, [pc, #172]	; (800386c <main+0x3bc>)
 80037c0:	4a2b      	ldr	r2, [pc, #172]	; (8003870 <main+0x3c0>)
 80037c2:	492c      	ldr	r1, [pc, #176]	; (8003874 <main+0x3c4>)
 80037c4:	482c      	ldr	r0, [pc, #176]	; (8003878 <main+0x3c8>)
 80037c6:	f7fd f821 	bl	800080c <OCB3>
	  		  				cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 80037ca:	f7ff fe65 	bl	8003498 <stop_timer>
 80037ce:	6078      	str	r0, [r7, #4]
	  		  				total_cycles=cycles+total_cycles;
 80037d0:	6a3a      	ldr	r2, [r7, #32]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4413      	add	r3, r2
 80037d6:	623b      	str	r3, [r7, #32]
	  		  			for (i = 0; i < REP; i++) {
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	3301      	adds	r3, #1
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	2b1d      	cmp	r3, #29
 80037e2:	dddd      	ble.n	80037a0 <main+0x2f0>
	  		  			}
	  		  			performance[j] = total_cycles/REP;
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	4a25      	ldr	r2, [pc, #148]	; (800387c <main+0x3cc>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	091a      	lsrs	r2, r3, #4
 80037ee:	4924      	ldr	r1, [pc, #144]	; (8003880 <main+0x3d0>)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  		  			total_cycles=0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	623b      	str	r3, [r7, #32]
	  		  		for (int j = 0; j < Number_test; j++) {
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	3301      	adds	r3, #1
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b06      	cmp	r3, #6
 8003804:	dda9      	ble.n	800375a <main+0x2aa>
	  		  		}
	  		  	  for (i = 0; i < Number_test; i++) {
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e020      	b.n	800384e <main+0x39e>
	  		  			sprintf(buffer,"\n bytes %u ", bytes[i]);
 800380c:	4a14      	ldr	r2, [pc, #80]	; (8003860 <main+0x3b0>)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003814:	461a      	mov	r2, r3
 8003816:	491b      	ldr	r1, [pc, #108]	; (8003884 <main+0x3d4>)
 8003818:	481b      	ldr	r0, [pc, #108]	; (8003888 <main+0x3d8>)
 800381a:	f003 fc77 	bl	800710c <siprintf>
	  		  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 800381e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003822:	4919      	ldr	r1, [pc, #100]	; (8003888 <main+0x3d8>)
 8003824:	4819      	ldr	r0, [pc, #100]	; (800388c <main+0x3dc>)
 8003826:	f7ff fdee 	bl	8003406 <serial_printf>
	  		  			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 800382a:	4a15      	ldr	r2, [pc, #84]	; (8003880 <main+0x3d0>)
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	4916      	ldr	r1, [pc, #88]	; (8003890 <main+0x3e0>)
 8003836:	4814      	ldr	r0, [pc, #80]	; (8003888 <main+0x3d8>)
 8003838:	f003 fc68 	bl	800710c <siprintf>
	  		  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 800383c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003840:	4911      	ldr	r1, [pc, #68]	; (8003888 <main+0x3d8>)
 8003842:	4812      	ldr	r0, [pc, #72]	; (800388c <main+0x3dc>)
 8003844:	f7ff fddf 	bl	8003406 <serial_printf>
	  		  	  for (i = 0; i < Number_test; i++) {
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	3301      	adds	r3, #1
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	2b06      	cmp	r3, #6
 8003852:	dddb      	ble.n	800380c <main+0x35c>
 8003854:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8003856:	4618      	mov	r0, r3
 8003858:	3728      	adds	r7, #40	; 0x28
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000020 	.word	0x20000020
 8003864:	2000097c 	.word	0x2000097c
 8003868:	20000000 	.word	0x20000000
 800386c:	2000298c 	.word	0x2000298c
 8003870:	20000010 	.word	0x20000010
 8003874:	2000198c 	.word	0x2000198c
 8003878:	2000098c 	.word	0x2000098c
 800387c:	88888889 	.word	0x88888889
 8003880:	20003d8c 	.word	0x20003d8c
 8003884:	08007a94 	.word	0x08007a94
 8003888:	2000398c 	.word	0x2000398c
 800388c:	200003ec 	.word	0x200003ec
 8003890:	08007aa0 	.word	0x08007aa0

08003894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b094      	sub	sp, #80	; 0x50
 8003898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800389a:	f107 0320 	add.w	r3, r7, #32
 800389e:	2230      	movs	r2, #48	; 0x30
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f003 fc52 	bl	800714c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038a8:	f107 030c 	add.w	r3, r7, #12
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80038b8:	f001 fb94 	bl	8004fe4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038bc:	4b27      	ldr	r3, [pc, #156]	; (800395c <SystemClock_Config+0xc8>)
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	4a26      	ldr	r2, [pc, #152]	; (800395c <SystemClock_Config+0xc8>)
 80038c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c6:	6413      	str	r3, [r2, #64]	; 0x40
 80038c8:	4b24      	ldr	r3, [pc, #144]	; (800395c <SystemClock_Config+0xc8>)
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80038d4:	4b22      	ldr	r3, [pc, #136]	; (8003960 <SystemClock_Config+0xcc>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80038dc:	4a20      	ldr	r2, [pc, #128]	; (8003960 <SystemClock_Config+0xcc>)
 80038de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <SystemClock_Config+0xcc>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038ec:	607b      	str	r3, [r7, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038f0:	2301      	movs	r3, #1
 80038f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80038f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038fa:	2302      	movs	r3, #2
 80038fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003904:	2304      	movs	r3, #4
 8003906:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003908:	2348      	movs	r3, #72	; 0x48
 800390a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800390c:	2302      	movs	r3, #2
 800390e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003910:	2303      	movs	r3, #3
 8003912:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003914:	f107 0320 	add.w	r3, r7, #32
 8003918:	4618      	mov	r0, r3
 800391a:	f001 fb73 	bl	8005004 <HAL_RCC_OscConfig>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003924:	f000 f96c 	bl	8003c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003928:	230f      	movs	r3, #15
 800392a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800392c:	2302      	movs	r3, #2
 800392e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003938:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800393e:	f107 030c 	add.w	r3, r7, #12
 8003942:	2102      	movs	r1, #2
 8003944:	4618      	mov	r0, r3
 8003946:	f001 fe01 	bl	800554c <HAL_RCC_ClockConfig>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003950:	f000 f956 	bl	8003c00 <Error_Handler>
  }
}
 8003954:	bf00      	nop
 8003956:	3750      	adds	r7, #80	; 0x50
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40023800 	.word	0x40023800
 8003960:	40007000 	.word	0x40007000

08003964 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8003968:	4b1f      	ldr	r3, [pc, #124]	; (80039e8 <MX_ETH_Init+0x84>)
 800396a:	4a20      	ldr	r2, [pc, #128]	; (80039ec <MX_ETH_Init+0x88>)
 800396c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800396e:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <MX_ETH_Init+0x8c>)
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003974:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <MX_ETH_Init+0x8c>)
 8003976:	2280      	movs	r2, #128	; 0x80
 8003978:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800397a:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <MX_ETH_Init+0x8c>)
 800397c:	22e1      	movs	r2, #225	; 0xe1
 800397e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8003980:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <MX_ETH_Init+0x8c>)
 8003982:	2200      	movs	r2, #0
 8003984:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8003986:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <MX_ETH_Init+0x8c>)
 8003988:	2200      	movs	r2, #0
 800398a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800398c:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <MX_ETH_Init+0x8c>)
 800398e:	2200      	movs	r2, #0
 8003990:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <MX_ETH_Init+0x84>)
 8003994:	4a16      	ldr	r2, [pc, #88]	; (80039f0 <MX_ETH_Init+0x8c>)
 8003996:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003998:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <MX_ETH_Init+0x84>)
 800399a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800399e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80039a0:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <MX_ETH_Init+0x84>)
 80039a2:	4a14      	ldr	r2, [pc, #80]	; (80039f4 <MX_ETH_Init+0x90>)
 80039a4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80039a6:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <MX_ETH_Init+0x84>)
 80039a8:	4a13      	ldr	r2, [pc, #76]	; (80039f8 <MX_ETH_Init+0x94>)
 80039aa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80039ac:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <MX_ETH_Init+0x84>)
 80039ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80039b2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80039b4:	480c      	ldr	r0, [pc, #48]	; (80039e8 <MX_ETH_Init+0x84>)
 80039b6:	f000 fce1 	bl	800437c <HAL_ETH_Init>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80039c0:	f000 f91e 	bl	8003c00 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80039c4:	2238      	movs	r2, #56	; 0x38
 80039c6:	2100      	movs	r1, #0
 80039c8:	480c      	ldr	r0, [pc, #48]	; (80039fc <MX_ETH_Init+0x98>)
 80039ca:	f003 fbbf 	bl	800714c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <MX_ETH_Init+0x98>)
 80039d0:	2221      	movs	r2, #33	; 0x21
 80039d2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80039d4:	4b09      	ldr	r3, [pc, #36]	; (80039fc <MX_ETH_Init+0x98>)
 80039d6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80039da:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80039dc:	4b07      	ldr	r3, [pc, #28]	; (80039fc <MX_ETH_Init+0x98>)
 80039de:	2200      	movs	r2, #0
 80039e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	2000033c 	.word	0x2000033c
 80039ec:	40028000 	.word	0x40028000
 80039f0:	20003e04 	.word	0x20003e04
 80039f4:	20000138 	.word	0x20000138
 80039f8:	20000098 	.word	0x20000098
 80039fc:	20000304 	.word	0x20000304

08003a00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003a04:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a06:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <MX_USART3_UART_Init+0x5c>)
 8003a08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003a0a:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003a12:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a18:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a26:	220c      	movs	r2, #12
 8003a28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a3c:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a42:	4805      	ldr	r0, [pc, #20]	; (8003a58 <MX_USART3_UART_Init+0x58>)
 8003a44:	f002 fb98 	bl	8006178 <HAL_UART_Init>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003a4e:	f000 f8d7 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	200003ec 	.word	0x200003ec
 8003a5c:	40004800 	.word	0x40004800

08003a60 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003a64:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003a6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003a6c:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a6e:	2206      	movs	r2, #6
 8003a70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003a72:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a74:	2202      	movs	r2, #2
 8003a76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003a7e:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a80:	2202      	movs	r2, #2
 8003a82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003aa2:	4805      	ldr	r0, [pc, #20]	; (8003ab8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003aa4:	f001 f955 	bl	8004d52 <HAL_PCD_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003aae:	f000 f8a7 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000474 	.word	0x20000474

08003abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08c      	sub	sp, #48	; 0x30
 8003ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac2:	f107 031c 	add.w	r3, r7, #28
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	609a      	str	r2, [r3, #8]
 8003ace:	60da      	str	r2, [r3, #12]
 8003ad0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ad2:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	4a46      	ldr	r2, [pc, #280]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003ad8:	f043 0304 	orr.w	r3, r3, #4
 8003adc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ade:	4b44      	ldr	r3, [pc, #272]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003aea:	4b41      	ldr	r3, [pc, #260]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	4a40      	ldr	r2, [pc, #256]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af4:	6313      	str	r3, [r2, #48]	; 0x30
 8003af6:	4b3e      	ldr	r3, [pc, #248]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b02:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	4a3a      	ldr	r2, [pc, #232]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0e:	4b38      	ldr	r3, [pc, #224]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b1a:	4b35      	ldr	r3, [pc, #212]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	4a34      	ldr	r2, [pc, #208]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003b20:	f043 0302 	orr.w	r3, r3, #2
 8003b24:	6313      	str	r3, [r2, #48]	; 0x30
 8003b26:	4b32      	ldr	r3, [pc, #200]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b32:	4b2f      	ldr	r3, [pc, #188]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	4a2e      	ldr	r2, [pc, #184]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003b38:	f043 0308 	orr.w	r3, r3, #8
 8003b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3e:	4b2c      	ldr	r3, [pc, #176]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b4a:	4b29      	ldr	r3, [pc, #164]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a28      	ldr	r2, [pc, #160]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b26      	ldr	r3, [pc, #152]	; (8003bf0 <MX_GPIO_Init+0x134>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	607b      	str	r3, [r7, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003b62:	2200      	movs	r2, #0
 8003b64:	f244 0181 	movw	r1, #16513	; 0x4081
 8003b68:	4822      	ldr	r0, [pc, #136]	; (8003bf4 <MX_GPIO_Init+0x138>)
 8003b6a:	f001 f8d9 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2140      	movs	r1, #64	; 0x40
 8003b72:	4821      	ldr	r0, [pc, #132]	; (8003bf8 <MX_GPIO_Init+0x13c>)
 8003b74:	f001 f8d4 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003b88:	f107 031c 	add.w	r3, r7, #28
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	481b      	ldr	r0, [pc, #108]	; (8003bfc <MX_GPIO_Init+0x140>)
 8003b90:	f000 ff1a 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003b94:	f244 0381 	movw	r3, #16513	; 0x4081
 8003b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ba6:	f107 031c 	add.w	r3, r7, #28
 8003baa:	4619      	mov	r1, r3
 8003bac:	4811      	ldr	r0, [pc, #68]	; (8003bf4 <MX_GPIO_Init+0x138>)
 8003bae:	f000 ff0b 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003bb2:	2340      	movs	r3, #64	; 0x40
 8003bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003bc2:	f107 031c 	add.w	r3, r7, #28
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	480b      	ldr	r0, [pc, #44]	; (8003bf8 <MX_GPIO_Init+0x13c>)
 8003bca:	f000 fefd 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003bda:	f107 031c 	add.w	r3, r7, #28
 8003bde:	4619      	mov	r1, r3
 8003be0:	4805      	ldr	r0, [pc, #20]	; (8003bf8 <MX_GPIO_Init+0x13c>)
 8003be2:	f000 fef1 	bl	80049c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003be6:	bf00      	nop
 8003be8:	3730      	adds	r7, #48	; 0x30
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40020400 	.word	0x40020400
 8003bf8:	40021800 	.word	0x40021800
 8003bfc:	40020800 	.word	0x40020800

08003c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c04:	b672      	cpsid	i
}
 8003c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c08:	e7fe      	b.n	8003c08 <Error_Handler+0x8>
	...

08003c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c12:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <HAL_MspInit+0x44>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	4a0e      	ldr	r2, [pc, #56]	; (8003c50 <HAL_MspInit+0x44>)
 8003c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <HAL_MspInit+0x44>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c26:	607b      	str	r3, [r7, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_MspInit+0x44>)
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <HAL_MspInit+0x44>)
 8003c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c34:	6453      	str	r3, [r2, #68]	; 0x44
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_MspInit+0x44>)
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800

08003c54 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08e      	sub	sp, #56	; 0x38
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	605a      	str	r2, [r3, #4]
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a4e      	ldr	r2, [pc, #312]	; (8003dac <HAL_ETH_MspInit+0x158>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	f040 8096 	bne.w	8003da4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003c78:	4b4d      	ldr	r3, [pc, #308]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	4a4c      	ldr	r2, [pc, #304]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003c7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c82:	6313      	str	r3, [r2, #48]	; 0x30
 8003c84:	4b4a      	ldr	r3, [pc, #296]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8c:	623b      	str	r3, [r7, #32]
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	4a46      	ldr	r2, [pc, #280]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003c96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9c:	4b44      	ldr	r3, [pc, #272]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	4a40      	ldr	r2, [pc, #256]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003cae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb4:	4b3e      	ldr	r3, [pc, #248]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cc0:	4b3b      	ldr	r3, [pc, #236]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	4a3a      	ldr	r2, [pc, #232]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003cc6:	f043 0304 	orr.w	r3, r3, #4
 8003cca:	6313      	str	r3, [r2, #48]	; 0x30
 8003ccc:	4b38      	ldr	r3, [pc, #224]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd8:	4b35      	ldr	r3, [pc, #212]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	4a34      	ldr	r2, [pc, #208]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce4:	4b32      	ldr	r3, [pc, #200]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf0:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	4a2e      	ldr	r2, [pc, #184]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003cf6:	f043 0302 	orr.w	r3, r3, #2
 8003cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfc:	4b2c      	ldr	r3, [pc, #176]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d08:	4b29      	ldr	r3, [pc, #164]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0c:	4a28      	ldr	r2, [pc, #160]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d12:	6313      	str	r3, [r2, #48]	; 0x30
 8003d14:	4b26      	ldr	r3, [pc, #152]	; (8003db0 <HAL_ETH_MspInit+0x15c>)
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003d20:	2332      	movs	r3, #50	; 0x32
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d24:	2302      	movs	r3, #2
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d30:	230b      	movs	r3, #11
 8003d32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d38:	4619      	mov	r1, r3
 8003d3a:	481e      	ldr	r0, [pc, #120]	; (8003db4 <HAL_ETH_MspInit+0x160>)
 8003d3c:	f000 fe44 	bl	80049c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003d40:	2386      	movs	r3, #134	; 0x86
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d44:	2302      	movs	r3, #2
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d50:	230b      	movs	r3, #11
 8003d52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4817      	ldr	r0, [pc, #92]	; (8003db8 <HAL_ETH_MspInit+0x164>)
 8003d5c:	f000 fe34 	bl	80049c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d66:	2302      	movs	r3, #2
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d72:	230b      	movs	r3, #11
 8003d74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	480f      	ldr	r0, [pc, #60]	; (8003dbc <HAL_ETH_MspInit+0x168>)
 8003d7e:	f000 fe23 	bl	80049c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003d82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d90:	2303      	movs	r3, #3
 8003d92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d94:	230b      	movs	r3, #11
 8003d96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4808      	ldr	r0, [pc, #32]	; (8003dc0 <HAL_ETH_MspInit+0x16c>)
 8003da0:	f000 fe12 	bl	80049c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003da4:	bf00      	nop
 8003da6:	3738      	adds	r7, #56	; 0x38
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40028000 	.word	0x40028000
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40020800 	.word	0x40020800
 8003db8:	40020000 	.word	0x40020000
 8003dbc:	40020400 	.word	0x40020400
 8003dc0:	40021800 	.word	0x40021800

08003dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b0aa      	sub	sp, #168	; 0xa8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dcc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ddc:	f107 0310 	add.w	r3, r7, #16
 8003de0:	2284      	movs	r2, #132	; 0x84
 8003de2:	2100      	movs	r1, #0
 8003de4:	4618      	mov	r0, r3
 8003de6:	f003 f9b1 	bl	800714c <memset>
  if(huart->Instance==USART3)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a22      	ldr	r2, [pc, #136]	; (8003e78 <HAL_UART_MspInit+0xb4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d13c      	bne.n	8003e6e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003df8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003dfe:	f107 0310 	add.w	r3, r7, #16
 8003e02:	4618      	mov	r0, r3
 8003e04:	f001 fdc8 	bl	8005998 <HAL_RCCEx_PeriphCLKConfig>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003e0e:	f7ff fef7 	bl	8003c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e12:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <HAL_UART_MspInit+0xb8>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <HAL_UART_MspInit+0xb8>)
 8003e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1e:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <HAL_UART_MspInit+0xb8>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e2a:	4b14      	ldr	r3, [pc, #80]	; (8003e7c <HAL_UART_MspInit+0xb8>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <HAL_UART_MspInit+0xb8>)
 8003e30:	f043 0308 	orr.w	r3, r3, #8
 8003e34:	6313      	str	r3, [r2, #48]	; 0x30
 8003e36:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <HAL_UART_MspInit+0xb8>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003e42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e56:	2303      	movs	r3, #3
 8003e58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e5c:	2307      	movs	r3, #7
 8003e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e62:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e66:	4619      	mov	r1, r3
 8003e68:	4805      	ldr	r0, [pc, #20]	; (8003e80 <HAL_UART_MspInit+0xbc>)
 8003e6a:	f000 fdad 	bl	80049c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003e6e:	bf00      	nop
 8003e70:	37a8      	adds	r7, #168	; 0xa8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40004800 	.word	0x40004800
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40020c00 	.word	0x40020c00

08003e84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b0ac      	sub	sp, #176	; 0xb0
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	605a      	str	r2, [r3, #4]
 8003e96:	609a      	str	r2, [r3, #8]
 8003e98:	60da      	str	r2, [r3, #12]
 8003e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e9c:	f107 0318 	add.w	r3, r7, #24
 8003ea0:	2284      	movs	r2, #132	; 0x84
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f003 f951 	bl	800714c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eb2:	d159      	bne.n	8003f68 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003eb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003eb8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ec0:	f107 0318 	add.w	r3, r7, #24
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f001 fd67 	bl	8005998 <HAL_RCCEx_PeriphCLKConfig>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003ed0:	f7ff fe96 	bl	8003c00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ed4:	4b26      	ldr	r3, [pc, #152]	; (8003f70 <HAL_PCD_MspInit+0xec>)
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed8:	4a25      	ldr	r2, [pc, #148]	; (8003f70 <HAL_PCD_MspInit+0xec>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee0:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <HAL_PCD_MspInit+0xec>)
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003eec:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f00:	2303      	movs	r3, #3
 8003f02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003f06:	230a      	movs	r3, #10
 8003f08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f10:	4619      	mov	r1, r3
 8003f12:	4818      	ldr	r0, [pc, #96]	; (8003f74 <HAL_PCD_MspInit+0xf0>)
 8003f14:	f000 fd58 	bl	80049c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f20:	2300      	movs	r3, #0
 8003f22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003f2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f30:	4619      	mov	r1, r3
 8003f32:	4810      	ldr	r0, [pc, #64]	; (8003f74 <HAL_PCD_MspInit+0xf0>)
 8003f34:	f000 fd48 	bl	80049c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003f38:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <HAL_PCD_MspInit+0xec>)
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3c:	4a0c      	ldr	r2, [pc, #48]	; (8003f70 <HAL_PCD_MspInit+0xec>)
 8003f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f42:	6353      	str	r3, [r2, #52]	; 0x34
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <HAL_PCD_MspInit+0xec>)
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <HAL_PCD_MspInit+0xec>)
 8003f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f54:	4a06      	ldr	r2, [pc, #24]	; (8003f70 <HAL_PCD_MspInit+0xec>)
 8003f56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f5a:	6453      	str	r3, [r2, #68]	; 0x44
 8003f5c:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <HAL_PCD_MspInit+0xec>)
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003f68:	bf00      	nop
 8003f6a:	37b0      	adds	r7, #176	; 0xb0
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40020000 	.word	0x40020000

08003f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f7c:	e7fe      	b.n	8003f7c <NMI_Handler+0x4>

08003f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f82:	e7fe      	b.n	8003f82 <HardFault_Handler+0x4>

08003f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f88:	e7fe      	b.n	8003f88 <MemManage_Handler+0x4>

08003f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f8e:	e7fe      	b.n	8003f8e <BusFault_Handler+0x4>

08003f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f94:	e7fe      	b.n	8003f94 <UsageFault_Handler+0x4>

08003f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f96:	b480      	push	{r7}
 8003f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f9a:	bf00      	nop
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fa8:	bf00      	nop
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fb6:	bf00      	nop
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fc4:	f000 f8b0 	bl	8004128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fc8:	bf00      	nop
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fd4:	4a14      	ldr	r2, [pc, #80]	; (8004028 <_sbrk+0x5c>)
 8003fd6:	4b15      	ldr	r3, [pc, #84]	; (800402c <_sbrk+0x60>)
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fe0:	4b13      	ldr	r3, [pc, #76]	; (8004030 <_sbrk+0x64>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <_sbrk+0x64>)
 8003fea:	4a12      	ldr	r2, [pc, #72]	; (8004034 <_sbrk+0x68>)
 8003fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <_sbrk+0x64>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d207      	bcs.n	800400c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ffc:	f003 f8ae 	bl	800715c <__errno>
 8004000:	4603      	mov	r3, r0
 8004002:	220c      	movs	r2, #12
 8004004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800400a:	e009      	b.n	8004020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800400c:	4b08      	ldr	r3, [pc, #32]	; (8004030 <_sbrk+0x64>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <_sbrk+0x64>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4413      	add	r3, r2
 800401a:	4a05      	ldr	r2, [pc, #20]	; (8004030 <_sbrk+0x64>)
 800401c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800401e:	68fb      	ldr	r3, [r7, #12]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20050000 	.word	0x20050000
 800402c:	00000400 	.word	0x00000400
 8004030:	20003e0c 	.word	0x20003e0c
 8004034:	20003f60 	.word	0x20003f60

08004038 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <SystemInit+0x20>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004042:	4a05      	ldr	r2, [pc, #20]	; (8004058 <SystemInit+0x20>)
 8004044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800404c:	bf00      	nop
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800405c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004094 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004060:	480d      	ldr	r0, [pc, #52]	; (8004098 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004062:	490e      	ldr	r1, [pc, #56]	; (800409c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004064:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004068:	e002      	b.n	8004070 <LoopCopyDataInit>

0800406a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800406a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800406c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800406e:	3304      	adds	r3, #4

08004070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004074:	d3f9      	bcc.n	800406a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004076:	4a0b      	ldr	r2, [pc, #44]	; (80040a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004078:	4c0b      	ldr	r4, [pc, #44]	; (80040a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800407a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800407c:	e001      	b.n	8004082 <LoopFillZerobss>

0800407e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800407e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004080:	3204      	adds	r2, #4

08004082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004084:	d3fb      	bcc.n	800407e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004086:	f7ff ffd7 	bl	8004038 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800408a:	f003 f86d 	bl	8007168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800408e:	f7ff fa0f 	bl	80034b0 <main>
  bx  lr    
 8004092:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004094:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800409c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80040a0:	08007b50 	.word	0x08007b50
  ldr r2, =_sbss
 80040a4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80040a8:	20003f5c 	.word	0x20003f5c

080040ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040ac:	e7fe      	b.n	80040ac <ADC_IRQHandler>

080040ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040b2:	2003      	movs	r0, #3
 80040b4:	f000 f92e 	bl	8004314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040b8:	2000      	movs	r0, #0
 80040ba:	f000 f805 	bl	80040c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040be:	f7ff fda5 	bl	8003c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040d0:	4b12      	ldr	r3, [pc, #72]	; (800411c <HAL_InitTick+0x54>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4b12      	ldr	r3, [pc, #72]	; (8004120 <HAL_InitTick+0x58>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	4619      	mov	r1, r3
 80040da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040de:	fbb3 f3f1 	udiv	r3, r3, r1
 80040e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f93b 	bl	8004362 <HAL_SYSTICK_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e00e      	b.n	8004114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b0f      	cmp	r3, #15
 80040fa:	d80a      	bhi.n	8004112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040fc:	2200      	movs	r2, #0
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004104:	f000 f911 	bl	800432a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004108:	4a06      	ldr	r2, [pc, #24]	; (8004124 <HAL_InitTick+0x5c>)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	e000      	b.n	8004114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	2000003c 	.word	0x2000003c
 8004120:	20000044 	.word	0x20000044
 8004124:	20000040 	.word	0x20000040

08004128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <HAL_IncTick+0x20>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_IncTick+0x24>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4413      	add	r3, r2
 8004138:	4a04      	ldr	r2, [pc, #16]	; (800414c <HAL_IncTick+0x24>)
 800413a:	6013      	str	r3, [r2, #0]
}
 800413c:	bf00      	nop
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000044 	.word	0x20000044
 800414c:	20003e10 	.word	0x20003e10

08004150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return uwTick;
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <HAL_GetTick+0x14>)
 8004156:	681b      	ldr	r3, [r3, #0]
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20003e10 	.word	0x20003e10

08004168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004170:	f7ff ffee 	bl	8004150 <HAL_GetTick>
 8004174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004180:	d005      	beq.n	800418e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004182:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <HAL_Delay+0x44>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800418e:	bf00      	nop
 8004190:	f7ff ffde 	bl	8004150 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	429a      	cmp	r2, r3
 800419e:	d8f7      	bhi.n	8004190 <HAL_Delay+0x28>
  {
  }
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000044 	.word	0x20000044

080041b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <__NVIC_SetPriorityGrouping+0x40>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041cc:	4013      	ands	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <__NVIC_SetPriorityGrouping+0x44>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041de:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <__NVIC_SetPriorityGrouping+0x40>)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	60d3      	str	r3, [r2, #12]
}
 80041e4:	bf00      	nop
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	e000ed00 	.word	0xe000ed00
 80041f4:	05fa0000 	.word	0x05fa0000

080041f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041fc:	4b04      	ldr	r3, [pc, #16]	; (8004210 <__NVIC_GetPriorityGrouping+0x18>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	0a1b      	lsrs	r3, r3, #8
 8004202:	f003 0307 	and.w	r3, r3, #7
}
 8004206:	4618      	mov	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	6039      	str	r1, [r7, #0]
 800421e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004224:	2b00      	cmp	r3, #0
 8004226:	db0a      	blt.n	800423e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	490c      	ldr	r1, [pc, #48]	; (8004260 <__NVIC_SetPriority+0x4c>)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	0112      	lsls	r2, r2, #4
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	440b      	add	r3, r1
 8004238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800423c:	e00a      	b.n	8004254 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	4908      	ldr	r1, [pc, #32]	; (8004264 <__NVIC_SetPriority+0x50>)
 8004244:	79fb      	ldrb	r3, [r7, #7]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	3b04      	subs	r3, #4
 800424c:	0112      	lsls	r2, r2, #4
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	440b      	add	r3, r1
 8004252:	761a      	strb	r2, [r3, #24]
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000e100 	.word	0xe000e100
 8004264:	e000ed00 	.word	0xe000ed00

08004268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004268:	b480      	push	{r7}
 800426a:	b089      	sub	sp, #36	; 0x24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f1c3 0307 	rsb	r3, r3, #7
 8004282:	2b04      	cmp	r3, #4
 8004284:	bf28      	it	cs
 8004286:	2304      	movcs	r3, #4
 8004288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	3304      	adds	r3, #4
 800428e:	2b06      	cmp	r3, #6
 8004290:	d902      	bls.n	8004298 <NVIC_EncodePriority+0x30>
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3b03      	subs	r3, #3
 8004296:	e000      	b.n	800429a <NVIC_EncodePriority+0x32>
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800429c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43da      	mvns	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	401a      	ands	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ba:	43d9      	mvns	r1, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c0:	4313      	orrs	r3, r2
         );
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3724      	adds	r7, #36	; 0x24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3b01      	subs	r3, #1
 80042dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042e0:	d301      	bcc.n	80042e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042e2:	2301      	movs	r3, #1
 80042e4:	e00f      	b.n	8004306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042e6:	4a0a      	ldr	r2, [pc, #40]	; (8004310 <SysTick_Config+0x40>)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042ee:	210f      	movs	r1, #15
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042f4:	f7ff ff8e 	bl	8004214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <SysTick_Config+0x40>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042fe:	4b04      	ldr	r3, [pc, #16]	; (8004310 <SysTick_Config+0x40>)
 8004300:	2207      	movs	r2, #7
 8004302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	e000e010 	.word	0xe000e010

08004314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff ff47 	bl	80041b0 <__NVIC_SetPriorityGrouping>
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800432a:	b580      	push	{r7, lr}
 800432c:	b086      	sub	sp, #24
 800432e:	af00      	add	r7, sp, #0
 8004330:	4603      	mov	r3, r0
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	607a      	str	r2, [r7, #4]
 8004336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800433c:	f7ff ff5c 	bl	80041f8 <__NVIC_GetPriorityGrouping>
 8004340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	68b9      	ldr	r1, [r7, #8]
 8004346:	6978      	ldr	r0, [r7, #20]
 8004348:	f7ff ff8e 	bl	8004268 <NVIC_EncodePriority>
 800434c:	4602      	mov	r2, r0
 800434e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004352:	4611      	mov	r1, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff ff5d 	bl	8004214 <__NVIC_SetPriority>
}
 800435a:	bf00      	nop
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff ffb0 	bl	80042d0 <SysTick_Config>
 8004370:	4603      	mov	r3, r0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e06a      	b.n	8004464 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2223      	movs	r2, #35	; 0x23
 800439c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff fc57 	bl	8003c54 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043a6:	4b31      	ldr	r3, [pc, #196]	; (800446c <HAL_ETH_Init+0xf0>)
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	4a30      	ldr	r2, [pc, #192]	; (800446c <HAL_ETH_Init+0xf0>)
 80043ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043b0:	6453      	str	r3, [r2, #68]	; 0x44
 80043b2:	4b2e      	ldr	r3, [pc, #184]	; (800446c <HAL_ETH_Init+0xf0>)
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80043be:	4b2c      	ldr	r3, [pc, #176]	; (8004470 <HAL_ETH_Init+0xf4>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	4a2b      	ldr	r2, [pc, #172]	; (8004470 <HAL_ETH_Init+0xf4>)
 80043c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043c8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80043ca:	4b29      	ldr	r3, [pc, #164]	; (8004470 <HAL_ETH_Init+0xf4>)
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	4927      	ldr	r1, [pc, #156]	; (8004470 <HAL_ETH_Init+0xf4>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80043d8:	4b25      	ldr	r3, [pc, #148]	; (8004470 <HAL_ETH_Init+0xf4>)
 80043da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6812      	ldr	r2, [r2, #0]
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043f4:	f7ff feac 	bl	8004150 <HAL_GetTick>
 80043f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80043fa:	e011      	b.n	8004420 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80043fc:	f7ff fea8 	bl	8004150 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800440a:	d909      	bls.n	8004420 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2204      	movs	r2, #4
 8004410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	22e0      	movs	r2, #224	; 0xe0
 8004418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e021      	b.n	8004464 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e4      	bne.n	80043fc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f958 	bl	80046e8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f9ff 	bl	800483c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fa55 	bl	80048ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	461a      	mov	r2, r3
 800444a:	2100      	movs	r1, #0
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f9bd 	bl	80047cc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2210      	movs	r2, #16
 800445e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40023800 	.word	0x40023800
 8004470:	40013800 	.word	0x40013800

08004474 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4b51      	ldr	r3, [pc, #324]	; (80045d0 <ETH_SetMACConfig+0x15c>)
 800448a:	4013      	ands	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	7c1b      	ldrb	r3, [r3, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d102      	bne.n	800449c <ETH_SetMACConfig+0x28>
 8004496:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800449a:	e000      	b.n	800449e <ETH_SetMACConfig+0x2a>
 800449c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	7c5b      	ldrb	r3, [r3, #17]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <ETH_SetMACConfig+0x38>
 80044a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044aa:	e000      	b.n	80044ae <ETH_SetMACConfig+0x3a>
 80044ac:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80044ae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80044b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	7fdb      	ldrb	r3, [r3, #31]
 80044ba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80044bc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80044c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	7f92      	ldrb	r2, [r2, #30]
 80044c8:	2a00      	cmp	r2, #0
 80044ca:	d102      	bne.n	80044d2 <ETH_SetMACConfig+0x5e>
 80044cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044d0:	e000      	b.n	80044d4 <ETH_SetMACConfig+0x60>
 80044d2:	2200      	movs	r2, #0
                        macconf->Speed |
 80044d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	7f1b      	ldrb	r3, [r3, #28]
 80044da:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80044dc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80044e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	791b      	ldrb	r3, [r3, #4]
 80044e8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80044ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	f892 2020 	ldrb.w	r2, [r2, #32]
 80044f2:	2a00      	cmp	r2, #0
 80044f4:	d102      	bne.n	80044fc <ETH_SetMACConfig+0x88>
 80044f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044fa:	e000      	b.n	80044fe <ETH_SetMACConfig+0x8a>
 80044fc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80044fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	7bdb      	ldrb	r3, [r3, #15]
 8004504:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004506:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800450c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004514:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004516:	4313      	orrs	r3, r2
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800452e:	2001      	movs	r0, #1
 8004530:	f7ff fe1a 	bl	8004168 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	f64f 7341 	movw	r3, #65345	; 0xff41
 800454a:	4013      	ands	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004552:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800455a:	2a00      	cmp	r2, #0
 800455c:	d101      	bne.n	8004562 <ETH_SetMACConfig+0xee>
 800455e:	2280      	movs	r2, #128	; 0x80
 8004560:	e000      	b.n	8004564 <ETH_SetMACConfig+0xf0>
 8004562:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004564:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800456a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004572:	2a01      	cmp	r2, #1
 8004574:	d101      	bne.n	800457a <ETH_SetMACConfig+0x106>
 8004576:	2208      	movs	r2, #8
 8004578:	e000      	b.n	800457c <ETH_SetMACConfig+0x108>
 800457a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800457c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004584:	2a01      	cmp	r2, #1
 8004586:	d101      	bne.n	800458c <ETH_SetMACConfig+0x118>
 8004588:	2204      	movs	r2, #4
 800458a:	e000      	b.n	800458e <ETH_SetMACConfig+0x11a>
 800458c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800458e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004596:	2a01      	cmp	r2, #1
 8004598:	d101      	bne.n	800459e <ETH_SetMACConfig+0x12a>
 800459a:	2202      	movs	r2, #2
 800459c:	e000      	b.n	80045a0 <ETH_SetMACConfig+0x12c>
 800459e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80045a0:	4313      	orrs	r3, r2
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80045b8:	2001      	movs	r0, #1
 80045ba:	f7ff fdd5 	bl	8004168 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	619a      	str	r2, [r3, #24]
}
 80045c6:	bf00      	nop
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	ff20810f 	.word	0xff20810f

080045d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4b3d      	ldr	r3, [pc, #244]	; (80046e4 <ETH_SetDMAConfig+0x110>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	7b1b      	ldrb	r3, [r3, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d102      	bne.n	8004600 <ETH_SetDMAConfig+0x2c>
 80045fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80045fe:	e000      	b.n	8004602 <ETH_SetDMAConfig+0x2e>
 8004600:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	7b5b      	ldrb	r3, [r3, #13]
 8004606:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004608:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	7f52      	ldrb	r2, [r2, #29]
 800460e:	2a00      	cmp	r2, #0
 8004610:	d102      	bne.n	8004618 <ETH_SetDMAConfig+0x44>
 8004612:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004616:	e000      	b.n	800461a <ETH_SetDMAConfig+0x46>
 8004618:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800461a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	7b9b      	ldrb	r3, [r3, #14]
 8004620:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004622:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004628:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	7f1b      	ldrb	r3, [r3, #28]
 800462e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004630:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	7f9b      	ldrb	r3, [r3, #30]
 8004636:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004638:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800463e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004646:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004648:	4313      	orrs	r3, r2
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004658:	461a      	mov	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800466a:	2001      	movs	r0, #1
 800466c:	f7ff fd7c 	bl	8004168 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004678:	461a      	mov	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	791b      	ldrb	r3, [r3, #4]
 8004682:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004688:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800468e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004694:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800469c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800469e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80046a6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80046ac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046ba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80046c8:	2001      	movs	r0, #1
 80046ca:	f7ff fd4d 	bl	8004168 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d6:	461a      	mov	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6013      	str	r3, [r2, #0]
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	f8de3f23 	.word	0xf8de3f23

080046e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b0a6      	sub	sp, #152	; 0x98
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80046fc:	2300      	movs	r3, #0
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004700:	2300      	movs	r3, #0
 8004702:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004706:	2301      	movs	r3, #1
 8004708:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800470c:	2300      	movs	r3, #0
 800470e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004718:	2300      	movs	r3, #0
 800471a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800471e:	2300      	movs	r3, #0
 8004720:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004724:	2300      	movs	r3, #0
 8004726:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004728:	2300      	movs	r3, #0
 800472a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800472e:	2300      	movs	r3, #0
 8004730:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004732:	2300      	movs	r3, #0
 8004734:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004738:	2300      	movs	r3, #0
 800473a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800473e:	2300      	movs	r3, #0
 8004740:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004744:	2300      	movs	r3, #0
 8004746:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800474a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800474e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004750:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004754:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004756:	2300      	movs	r3, #0
 8004758:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800475c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004760:	4619      	mov	r1, r3
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff fe86 	bl	8004474 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004768:	2301      	movs	r3, #1
 800476a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800476c:	2301      	movs	r3, #1
 800476e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004770:	2301      	movs	r3, #1
 8004772:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004776:	2301      	movs	r3, #1
 8004778:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800477e:	2300      	movs	r3, #0
 8004780:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004784:	2300      	movs	r3, #0
 8004786:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800478a:	2300      	movs	r3, #0
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800478e:	2301      	movs	r3, #1
 8004790:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004794:	2301      	movs	r3, #1
 8004796:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800479c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800479e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80047a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80047b8:	f107 0308 	add.w	r3, r7, #8
 80047bc:	4619      	mov	r1, r3
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff ff08 	bl	80045d4 <ETH_SetDMAConfig>
}
 80047c4:	bf00      	nop
 80047c6:	3798      	adds	r7, #152	; 0x98
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3305      	adds	r3, #5
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	021b      	lsls	r3, r3, #8
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	3204      	adds	r2, #4
 80047e4:	7812      	ldrb	r2, [r2, #0]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	4b11      	ldr	r3, [pc, #68]	; (8004834 <ETH_MACAddressConfig+0x68>)
 80047ee:	4413      	add	r3, r2
 80047f0:	461a      	mov	r2, r3
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3303      	adds	r3, #3
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	061a      	lsls	r2, r3, #24
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3302      	adds	r3, #2
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	041b      	lsls	r3, r3, #16
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3301      	adds	r3, #1
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	4313      	orrs	r3, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	7812      	ldrb	r2, [r2, #0]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <ETH_MACAddressConfig+0x6c>)
 800481e:	4413      	add	r3, r2
 8004820:	461a      	mov	r2, r3
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	6013      	str	r3, [r2, #0]
}
 8004826:	bf00      	nop
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	40028040 	.word	0x40028040
 8004838:	40028044 	.word	0x40028044

0800483c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	e03e      	b.n	80048c8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68d9      	ldr	r1, [r3, #12]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	440b      	add	r3, r1
 800485a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2200      	movs	r2, #0
 8004866:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2200      	movs	r2, #0
 800486c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2200      	movs	r2, #0
 8004872:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	3206      	adds	r2, #6
 800487c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d80c      	bhi.n	80048ac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68d9      	ldr	r1, [r3, #12]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	4613      	mov	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	440b      	add	r3, r1
 80048a4:	461a      	mov	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	60da      	str	r2, [r3, #12]
 80048aa:	e004      	b.n	80048b6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	461a      	mov	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3301      	adds	r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d9bd      	bls.n	800484a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e0:	611a      	str	r2, [r3, #16]
}
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b085      	sub	sp, #20
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	e046      	b.n	800498a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6919      	ldr	r1, [r3, #16]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	440b      	add	r3, r1
 800490c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2200      	movs	r2, #0
 8004918:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2200      	movs	r2, #0
 800491e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2200      	movs	r2, #0
 8004924:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2200      	movs	r2, #0
 800492a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2200      	movs	r2, #0
 8004930:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004938:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004940:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	3212      	adds	r2, #18
 8004956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d80c      	bhi.n	800497a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6919      	ldr	r1, [r3, #16]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	440b      	add	r3, r1
 8004972:	461a      	mov	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	60da      	str	r2, [r3, #12]
 8004978:	e004      	b.n	8004984 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	461a      	mov	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3301      	adds	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b03      	cmp	r3, #3
 800498e:	d9b5      	bls.n	80048fc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ba:	60da      	str	r2, [r3, #12]
}
 80049bc:	bf00      	nop
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b089      	sub	sp, #36	; 0x24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80049d2:	2300      	movs	r3, #0
 80049d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80049da:	2300      	movs	r3, #0
 80049dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80049de:	2300      	movs	r3, #0
 80049e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	e175      	b.n	8004cd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80049e8:	2201      	movs	r2, #1
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4013      	ands	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	f040 8164 	bne.w	8004cce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d005      	beq.n	8004a1e <HAL_GPIO_Init+0x56>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d130      	bne.n	8004a80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	2203      	movs	r2, #3
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4013      	ands	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a54:	2201      	movs	r2, #1
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	4013      	ands	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f003 0201 	and.w	r2, r3, #1
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d017      	beq.n	8004abc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	2203      	movs	r2, #3
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d123      	bne.n	8004b10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	08da      	lsrs	r2, r3, #3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3208      	adds	r2, #8
 8004ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	220f      	movs	r2, #15
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	08da      	lsrs	r2, r3, #3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3208      	adds	r2, #8
 8004b0a:	69b9      	ldr	r1, [r7, #24]
 8004b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	4013      	ands	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 0203 	and.w	r2, r3, #3
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80be 	beq.w	8004cce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b52:	4b66      	ldr	r3, [pc, #408]	; (8004cec <HAL_GPIO_Init+0x324>)
 8004b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b56:	4a65      	ldr	r2, [pc, #404]	; (8004cec <HAL_GPIO_Init+0x324>)
 8004b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b5e:	4b63      	ldr	r3, [pc, #396]	; (8004cec <HAL_GPIO_Init+0x324>)
 8004b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b6a:	4a61      	ldr	r2, [pc, #388]	; (8004cf0 <HAL_GPIO_Init+0x328>)
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	089b      	lsrs	r3, r3, #2
 8004b70:	3302      	adds	r3, #2
 8004b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	220f      	movs	r2, #15
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43db      	mvns	r3, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a58      	ldr	r2, [pc, #352]	; (8004cf4 <HAL_GPIO_Init+0x32c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d037      	beq.n	8004c06 <HAL_GPIO_Init+0x23e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a57      	ldr	r2, [pc, #348]	; (8004cf8 <HAL_GPIO_Init+0x330>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d031      	beq.n	8004c02 <HAL_GPIO_Init+0x23a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a56      	ldr	r2, [pc, #344]	; (8004cfc <HAL_GPIO_Init+0x334>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d02b      	beq.n	8004bfe <HAL_GPIO_Init+0x236>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a55      	ldr	r2, [pc, #340]	; (8004d00 <HAL_GPIO_Init+0x338>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d025      	beq.n	8004bfa <HAL_GPIO_Init+0x232>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a54      	ldr	r2, [pc, #336]	; (8004d04 <HAL_GPIO_Init+0x33c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d01f      	beq.n	8004bf6 <HAL_GPIO_Init+0x22e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a53      	ldr	r2, [pc, #332]	; (8004d08 <HAL_GPIO_Init+0x340>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d019      	beq.n	8004bf2 <HAL_GPIO_Init+0x22a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a52      	ldr	r2, [pc, #328]	; (8004d0c <HAL_GPIO_Init+0x344>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d013      	beq.n	8004bee <HAL_GPIO_Init+0x226>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a51      	ldr	r2, [pc, #324]	; (8004d10 <HAL_GPIO_Init+0x348>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00d      	beq.n	8004bea <HAL_GPIO_Init+0x222>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a50      	ldr	r2, [pc, #320]	; (8004d14 <HAL_GPIO_Init+0x34c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d007      	beq.n	8004be6 <HAL_GPIO_Init+0x21e>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a4f      	ldr	r2, [pc, #316]	; (8004d18 <HAL_GPIO_Init+0x350>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d101      	bne.n	8004be2 <HAL_GPIO_Init+0x21a>
 8004bde:	2309      	movs	r3, #9
 8004be0:	e012      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004be2:	230a      	movs	r3, #10
 8004be4:	e010      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004be6:	2308      	movs	r3, #8
 8004be8:	e00e      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004bea:	2307      	movs	r3, #7
 8004bec:	e00c      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004bee:	2306      	movs	r3, #6
 8004bf0:	e00a      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004bf2:	2305      	movs	r3, #5
 8004bf4:	e008      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004bf6:	2304      	movs	r3, #4
 8004bf8:	e006      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e004      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e002      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <HAL_GPIO_Init+0x240>
 8004c06:	2300      	movs	r3, #0
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	f002 0203 	and.w	r2, r2, #3
 8004c0e:	0092      	lsls	r2, r2, #2
 8004c10:	4093      	lsls	r3, r2
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c18:	4935      	ldr	r1, [pc, #212]	; (8004cf0 <HAL_GPIO_Init+0x328>)
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	089b      	lsrs	r3, r3, #2
 8004c1e:	3302      	adds	r3, #2
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c26:	4b3d      	ldr	r3, [pc, #244]	; (8004d1c <HAL_GPIO_Init+0x354>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4013      	ands	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c4a:	4a34      	ldr	r2, [pc, #208]	; (8004d1c <HAL_GPIO_Init+0x354>)
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c50:	4b32      	ldr	r3, [pc, #200]	; (8004d1c <HAL_GPIO_Init+0x354>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c74:	4a29      	ldr	r2, [pc, #164]	; (8004d1c <HAL_GPIO_Init+0x354>)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c7a:	4b28      	ldr	r3, [pc, #160]	; (8004d1c <HAL_GPIO_Init+0x354>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	43db      	mvns	r3, r3
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4013      	ands	r3, r2
 8004c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c9e:	4a1f      	ldr	r2, [pc, #124]	; (8004d1c <HAL_GPIO_Init+0x354>)
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ca4:	4b1d      	ldr	r3, [pc, #116]	; (8004d1c <HAL_GPIO_Init+0x354>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	43db      	mvns	r3, r3
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cc8:	4a14      	ldr	r2, [pc, #80]	; (8004d1c <HAL_GPIO_Init+0x354>)
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	2b0f      	cmp	r3, #15
 8004cd8:	f67f ae86 	bls.w	80049e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004cdc:	bf00      	nop
 8004cde:	bf00      	nop
 8004ce0:	3724      	adds	r7, #36	; 0x24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40013800 	.word	0x40013800
 8004cf4:	40020000 	.word	0x40020000
 8004cf8:	40020400 	.word	0x40020400
 8004cfc:	40020800 	.word	0x40020800
 8004d00:	40020c00 	.word	0x40020c00
 8004d04:	40021000 	.word	0x40021000
 8004d08:	40021400 	.word	0x40021400
 8004d0c:	40021800 	.word	0x40021800
 8004d10:	40021c00 	.word	0x40021c00
 8004d14:	40022000 	.word	0x40022000
 8004d18:	40022400 	.word	0x40022400
 8004d1c:	40013c00 	.word	0x40013c00

08004d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	807b      	strh	r3, [r7, #2]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d30:	787b      	ldrb	r3, [r7, #1]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004d3c:	e003      	b.n	8004d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004d3e:	887b      	ldrh	r3, [r7, #2]
 8004d40:	041a      	lsls	r2, r3, #16
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	619a      	str	r2, [r3, #24]
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d54:	b08f      	sub	sp, #60	; 0x3c
 8004d56:	af0a      	add	r7, sp, #40	; 0x28
 8004d58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e116      	b.n	8004f92 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff f880 	bl	8003e84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2203      	movs	r2, #3
 8004d88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f001 ff16 	bl	8006bd4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	603b      	str	r3, [r7, #0]
 8004dae:	687e      	ldr	r6, [r7, #4]
 8004db0:	466d      	mov	r5, sp
 8004db2:	f106 0410 	add.w	r4, r6, #16
 8004db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004db8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004dc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004dc6:	1d33      	adds	r3, r6, #4
 8004dc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dca:	6838      	ldr	r0, [r7, #0]
 8004dcc:	f001 feaa 	bl	8006b24 <USB_CoreInit>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e0d7      	b.n	8004f92 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2100      	movs	r1, #0
 8004de8:	4618      	mov	r0, r3
 8004dea:	f001 ff04 	bl	8006bf6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dee:	2300      	movs	r3, #0
 8004df0:	73fb      	strb	r3, [r7, #15]
 8004df2:	e04a      	b.n	8004e8a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004df4:	7bfa      	ldrb	r2, [r7, #15]
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	333d      	adds	r3, #61	; 0x3d
 8004e04:	2201      	movs	r2, #1
 8004e06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e08:	7bfa      	ldrb	r2, [r7, #15]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	333c      	adds	r3, #60	; 0x3c
 8004e18:	7bfa      	ldrb	r2, [r7, #15]
 8004e1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e1c:	7bfa      	ldrb	r2, [r7, #15]
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	b298      	uxth	r0, r3
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4613      	mov	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	3344      	adds	r3, #68	; 0x44
 8004e30:	4602      	mov	r2, r0
 8004e32:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e34:	7bfa      	ldrb	r2, [r7, #15]
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	3340      	adds	r3, #64	; 0x40
 8004e44:	2200      	movs	r2, #0
 8004e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e48:	7bfa      	ldrb	r2, [r7, #15]
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	3348      	adds	r3, #72	; 0x48
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e5c:	7bfa      	ldrb	r2, [r7, #15]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	334c      	adds	r3, #76	; 0x4c
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e70:	7bfa      	ldrb	r2, [r7, #15]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	4413      	add	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	3354      	adds	r3, #84	; 0x54
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	3301      	adds	r3, #1
 8004e88:	73fb      	strb	r3, [r7, #15]
 8004e8a:	7bfa      	ldrb	r2, [r7, #15]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d3af      	bcc.n	8004df4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e94:	2300      	movs	r3, #0
 8004e96:	73fb      	strb	r3, [r7, #15]
 8004e98:	e044      	b.n	8004f24 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e9a:	7bfa      	ldrb	r2, [r7, #15]
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004eac:	2200      	movs	r2, #0
 8004eae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004eb0:	7bfa      	ldrb	r2, [r7, #15]
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004ec2:	7bfa      	ldrb	r2, [r7, #15]
 8004ec4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ec6:	7bfa      	ldrb	r2, [r7, #15]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ed8:	2200      	movs	r2, #0
 8004eda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004edc:	7bfa      	ldrb	r2, [r7, #15]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ef2:	7bfa      	ldrb	r2, [r7, #15]
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f08:	7bfa      	ldrb	r2, [r7, #15]
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	3301      	adds	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
 8004f24:	7bfa      	ldrb	r2, [r7, #15]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d3b5      	bcc.n	8004e9a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	687e      	ldr	r6, [r7, #4]
 8004f36:	466d      	mov	r5, sp
 8004f38:	f106 0410 	add.w	r4, r6, #16
 8004f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f48:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f4c:	1d33      	adds	r3, r6, #4
 8004f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f50:	6838      	ldr	r0, [r7, #0]
 8004f52:	f001 fe9d 	bl	8006c90 <USB_DevInit>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e014      	b.n	8004f92 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d102      	bne.n	8004f86 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f80b 	bl	8004f9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f002 f85b 	bl	8007046 <USB_DevDisconnect>

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004f9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fca:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <HAL_PCDEx_ActivateLPM+0x44>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	10000003 	.word	0x10000003

08004fe4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fe8:	4b05      	ldr	r3, [pc, #20]	; (8005000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a04      	ldr	r2, [pc, #16]	; (8005000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff2:	6013      	str	r3, [r2, #0]
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40007000 	.word	0x40007000

08005004 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800500c:	2300      	movs	r3, #0
 800500e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e291      	b.n	800553e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 8087 	beq.w	8005136 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005028:	4b96      	ldr	r3, [pc, #600]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 030c 	and.w	r3, r3, #12
 8005030:	2b04      	cmp	r3, #4
 8005032:	d00c      	beq.n	800504e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005034:	4b93      	ldr	r3, [pc, #588]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 030c 	and.w	r3, r3, #12
 800503c:	2b08      	cmp	r3, #8
 800503e:	d112      	bne.n	8005066 <HAL_RCC_OscConfig+0x62>
 8005040:	4b90      	ldr	r3, [pc, #576]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800504c:	d10b      	bne.n	8005066 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800504e:	4b8d      	ldr	r3, [pc, #564]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d06c      	beq.n	8005134 <HAL_RCC_OscConfig+0x130>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d168      	bne.n	8005134 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e26b      	b.n	800553e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800506e:	d106      	bne.n	800507e <HAL_RCC_OscConfig+0x7a>
 8005070:	4b84      	ldr	r3, [pc, #528]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a83      	ldr	r2, [pc, #524]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	e02e      	b.n	80050dc <HAL_RCC_OscConfig+0xd8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10c      	bne.n	80050a0 <HAL_RCC_OscConfig+0x9c>
 8005086:	4b7f      	ldr	r3, [pc, #508]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a7e      	ldr	r2, [pc, #504]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 800508c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	4b7c      	ldr	r3, [pc, #496]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a7b      	ldr	r2, [pc, #492]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	e01d      	b.n	80050dc <HAL_RCC_OscConfig+0xd8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050a8:	d10c      	bne.n	80050c4 <HAL_RCC_OscConfig+0xc0>
 80050aa:	4b76      	ldr	r3, [pc, #472]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a75      	ldr	r2, [pc, #468]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 80050b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	4b73      	ldr	r3, [pc, #460]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a72      	ldr	r2, [pc, #456]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 80050bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	e00b      	b.n	80050dc <HAL_RCC_OscConfig+0xd8>
 80050c4:	4b6f      	ldr	r3, [pc, #444]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a6e      	ldr	r2, [pc, #440]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 80050ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	4b6c      	ldr	r3, [pc, #432]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a6b      	ldr	r2, [pc, #428]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 80050d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d013      	beq.n	800510c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7ff f834 	bl	8004150 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050ec:	f7ff f830 	bl	8004150 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b64      	cmp	r3, #100	; 0x64
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e21f      	b.n	800553e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fe:	4b61      	ldr	r3, [pc, #388]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0xe8>
 800510a:	e014      	b.n	8005136 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7ff f820 	bl	8004150 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005114:	f7ff f81c 	bl	8004150 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	; 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e20b      	b.n	800553e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005126:	4b57      	ldr	r3, [pc, #348]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f0      	bne.n	8005114 <HAL_RCC_OscConfig+0x110>
 8005132:	e000      	b.n	8005136 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d069      	beq.n	8005216 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005142:	4b50      	ldr	r3, [pc, #320]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 030c 	and.w	r3, r3, #12
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00b      	beq.n	8005166 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800514e:	4b4d      	ldr	r3, [pc, #308]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	2b08      	cmp	r3, #8
 8005158:	d11c      	bne.n	8005194 <HAL_RCC_OscConfig+0x190>
 800515a:	4b4a      	ldr	r3, [pc, #296]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d116      	bne.n	8005194 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005166:	4b47      	ldr	r3, [pc, #284]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <HAL_RCC_OscConfig+0x17a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d001      	beq.n	800517e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e1df      	b.n	800553e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800517e:	4b41      	ldr	r3, [pc, #260]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	493d      	ldr	r1, [pc, #244]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 800518e:	4313      	orrs	r3, r2
 8005190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005192:	e040      	b.n	8005216 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d023      	beq.n	80051e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800519c:	4b39      	ldr	r3, [pc, #228]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a38      	ldr	r2, [pc, #224]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7fe ffd2 	bl	8004150 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b0:	f7fe ffce 	bl	8004150 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e1bd      	b.n	800553e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c2:	4b30      	ldr	r3, [pc, #192]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0f0      	beq.n	80051b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ce:	4b2d      	ldr	r3, [pc, #180]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	4929      	ldr	r1, [pc, #164]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	600b      	str	r3, [r1, #0]
 80051e2:	e018      	b.n	8005216 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051e4:	4b27      	ldr	r3, [pc, #156]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a26      	ldr	r2, [pc, #152]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 80051ea:	f023 0301 	bic.w	r3, r3, #1
 80051ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fe ffae 	bl	8004150 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f8:	f7fe ffaa 	bl	8004150 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e199      	b.n	800553e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800520a:	4b1e      	ldr	r3, [pc, #120]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d038      	beq.n	8005294 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d019      	beq.n	800525e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800522a:	4b16      	ldr	r3, [pc, #88]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 800522c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800522e:	4a15      	ldr	r2, [pc, #84]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005230:	f043 0301 	orr.w	r3, r3, #1
 8005234:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005236:	f7fe ff8b 	bl	8004150 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800523e:	f7fe ff87 	bl	8004150 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e176      	b.n	800553e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005250:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0f0      	beq.n	800523e <HAL_RCC_OscConfig+0x23a>
 800525c:	e01a      	b.n	8005294 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800525e:	4b09      	ldr	r3, [pc, #36]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005262:	4a08      	ldr	r2, [pc, #32]	; (8005284 <HAL_RCC_OscConfig+0x280>)
 8005264:	f023 0301 	bic.w	r3, r3, #1
 8005268:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526a:	f7fe ff71 	bl	8004150 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005270:	e00a      	b.n	8005288 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005272:	f7fe ff6d 	bl	8004150 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d903      	bls.n	8005288 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e15c      	b.n	800553e <HAL_RCC_OscConfig+0x53a>
 8005284:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005288:	4b91      	ldr	r3, [pc, #580]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 800528a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1ee      	bne.n	8005272 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 80a4 	beq.w	80053ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a2:	4b8b      	ldr	r3, [pc, #556]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10d      	bne.n	80052ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ae:	4b88      	ldr	r3, [pc, #544]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	4a87      	ldr	r2, [pc, #540]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 80052b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b8:	6413      	str	r3, [r2, #64]	; 0x40
 80052ba:	4b85      	ldr	r3, [pc, #532]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c2:	60bb      	str	r3, [r7, #8]
 80052c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052c6:	2301      	movs	r3, #1
 80052c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ca:	4b82      	ldr	r3, [pc, #520]	; (80054d4 <HAL_RCC_OscConfig+0x4d0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d118      	bne.n	8005308 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80052d6:	4b7f      	ldr	r3, [pc, #508]	; (80054d4 <HAL_RCC_OscConfig+0x4d0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a7e      	ldr	r2, [pc, #504]	; (80054d4 <HAL_RCC_OscConfig+0x4d0>)
 80052dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052e2:	f7fe ff35 	bl	8004150 <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ea:	f7fe ff31 	bl	8004150 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b64      	cmp	r3, #100	; 0x64
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e120      	b.n	800553e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052fc:	4b75      	ldr	r3, [pc, #468]	; (80054d4 <HAL_RCC_OscConfig+0x4d0>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0f0      	beq.n	80052ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d106      	bne.n	800531e <HAL_RCC_OscConfig+0x31a>
 8005310:	4b6f      	ldr	r3, [pc, #444]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 8005312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005314:	4a6e      	ldr	r2, [pc, #440]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 8005316:	f043 0301 	orr.w	r3, r3, #1
 800531a:	6713      	str	r3, [r2, #112]	; 0x70
 800531c:	e02d      	b.n	800537a <HAL_RCC_OscConfig+0x376>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10c      	bne.n	8005340 <HAL_RCC_OscConfig+0x33c>
 8005326:	4b6a      	ldr	r3, [pc, #424]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 8005328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532a:	4a69      	ldr	r2, [pc, #420]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 800532c:	f023 0301 	bic.w	r3, r3, #1
 8005330:	6713      	str	r3, [r2, #112]	; 0x70
 8005332:	4b67      	ldr	r3, [pc, #412]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 8005334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005336:	4a66      	ldr	r2, [pc, #408]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 8005338:	f023 0304 	bic.w	r3, r3, #4
 800533c:	6713      	str	r3, [r2, #112]	; 0x70
 800533e:	e01c      	b.n	800537a <HAL_RCC_OscConfig+0x376>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b05      	cmp	r3, #5
 8005346:	d10c      	bne.n	8005362 <HAL_RCC_OscConfig+0x35e>
 8005348:	4b61      	ldr	r3, [pc, #388]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534c:	4a60      	ldr	r2, [pc, #384]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 800534e:	f043 0304 	orr.w	r3, r3, #4
 8005352:	6713      	str	r3, [r2, #112]	; 0x70
 8005354:	4b5e      	ldr	r3, [pc, #376]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 8005356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005358:	4a5d      	ldr	r2, [pc, #372]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	6713      	str	r3, [r2, #112]	; 0x70
 8005360:	e00b      	b.n	800537a <HAL_RCC_OscConfig+0x376>
 8005362:	4b5b      	ldr	r3, [pc, #364]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005366:	4a5a      	ldr	r2, [pc, #360]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 8005368:	f023 0301 	bic.w	r3, r3, #1
 800536c:	6713      	str	r3, [r2, #112]	; 0x70
 800536e:	4b58      	ldr	r3, [pc, #352]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 8005370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005372:	4a57      	ldr	r2, [pc, #348]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 8005374:	f023 0304 	bic.w	r3, r3, #4
 8005378:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d015      	beq.n	80053ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005382:	f7fe fee5 	bl	8004150 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005388:	e00a      	b.n	80053a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800538a:	f7fe fee1 	bl	8004150 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	f241 3288 	movw	r2, #5000	; 0x1388
 8005398:	4293      	cmp	r3, r2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e0ce      	b.n	800553e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a0:	4b4b      	ldr	r3, [pc, #300]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 80053a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0ee      	beq.n	800538a <HAL_RCC_OscConfig+0x386>
 80053ac:	e014      	b.n	80053d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ae:	f7fe fecf 	bl	8004150 <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b4:	e00a      	b.n	80053cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b6:	f7fe fecb 	bl	8004150 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e0b8      	b.n	800553e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053cc:	4b40      	ldr	r3, [pc, #256]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 80053ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1ee      	bne.n	80053b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d105      	bne.n	80053ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053de:	4b3c      	ldr	r3, [pc, #240]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	4a3b      	ldr	r2, [pc, #236]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 80053e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 80a4 	beq.w	800553c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053f4:	4b36      	ldr	r3, [pc, #216]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 030c 	and.w	r3, r3, #12
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d06b      	beq.n	80054d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d149      	bne.n	800549c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005408:	4b31      	ldr	r3, [pc, #196]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a30      	ldr	r2, [pc, #192]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 800540e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005414:	f7fe fe9c 	bl	8004150 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800541c:	f7fe fe98 	bl	8004150 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e087      	b.n	800553e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800542e:	4b28      	ldr	r3, [pc, #160]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f0      	bne.n	800541c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69da      	ldr	r2, [r3, #28]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	019b      	lsls	r3, r3, #6
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	085b      	lsrs	r3, r3, #1
 8005452:	3b01      	subs	r3, #1
 8005454:	041b      	lsls	r3, r3, #16
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	061b      	lsls	r3, r3, #24
 800545e:	4313      	orrs	r3, r2
 8005460:	4a1b      	ldr	r2, [pc, #108]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 8005462:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005466:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005468:	4b19      	ldr	r3, [pc, #100]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a18      	ldr	r2, [pc, #96]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 800546e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005474:	f7fe fe6c 	bl	8004150 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800547c:	f7fe fe68 	bl	8004150 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e057      	b.n	800553e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800548e:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCC_OscConfig+0x478>
 800549a:	e04f      	b.n	800553c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549c:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a0b      	ldr	r2, [pc, #44]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 80054a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fe fe52 	bl	8004150 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b0:	f7fe fe4e 	bl	8004150 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e03d      	b.n	800553e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c2:	4b03      	ldr	r3, [pc, #12]	; (80054d0 <HAL_RCC_OscConfig+0x4cc>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x4ac>
 80054ce:	e035      	b.n	800553c <HAL_RCC_OscConfig+0x538>
 80054d0:	40023800 	.word	0x40023800
 80054d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80054d8:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <HAL_RCC_OscConfig+0x544>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d028      	beq.n	8005538 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d121      	bne.n	8005538 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054fe:	429a      	cmp	r2, r3
 8005500:	d11a      	bne.n	8005538 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005508:	4013      	ands	r3, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800550e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005510:	4293      	cmp	r3, r2
 8005512:	d111      	bne.n	8005538 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	085b      	lsrs	r3, r3, #1
 8005520:	3b01      	subs	r3, #1
 8005522:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005524:	429a      	cmp	r2, r3
 8005526:	d107      	bne.n	8005538 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005534:	429a      	cmp	r2, r3
 8005536:	d001      	beq.n	800553c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e000      	b.n	800553e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40023800 	.word	0x40023800

0800554c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0d0      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005564:	4b6a      	ldr	r3, [pc, #424]	; (8005710 <HAL_RCC_ClockConfig+0x1c4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d910      	bls.n	8005594 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005572:	4b67      	ldr	r3, [pc, #412]	; (8005710 <HAL_RCC_ClockConfig+0x1c4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f023 020f 	bic.w	r2, r3, #15
 800557a:	4965      	ldr	r1, [pc, #404]	; (8005710 <HAL_RCC_ClockConfig+0x1c4>)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	4313      	orrs	r3, r2
 8005580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005582:	4b63      	ldr	r3, [pc, #396]	; (8005710 <HAL_RCC_ClockConfig+0x1c4>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d001      	beq.n	8005594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0b8      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d020      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055ac:	4b59      	ldr	r3, [pc, #356]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	4a58      	ldr	r2, [pc, #352]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 80055b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055c4:	4b53      	ldr	r3, [pc, #332]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	4a52      	ldr	r2, [pc, #328]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 80055ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d0:	4b50      	ldr	r3, [pc, #320]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	494d      	ldr	r1, [pc, #308]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d040      	beq.n	8005670 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d107      	bne.n	8005606 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f6:	4b47      	ldr	r3, [pc, #284]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d115      	bne.n	800562e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e07f      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d107      	bne.n	800561e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800560e:	4b41      	ldr	r3, [pc, #260]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e073      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800561e:	4b3d      	ldr	r3, [pc, #244]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e06b      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800562e:	4b39      	ldr	r3, [pc, #228]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f023 0203 	bic.w	r2, r3, #3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4936      	ldr	r1, [pc, #216]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 800563c:	4313      	orrs	r3, r2
 800563e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005640:	f7fe fd86 	bl	8004150 <HAL_GetTick>
 8005644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005646:	e00a      	b.n	800565e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005648:	f7fe fd82 	bl	8004150 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	f241 3288 	movw	r2, #5000	; 0x1388
 8005656:	4293      	cmp	r3, r2
 8005658:	d901      	bls.n	800565e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e053      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565e:	4b2d      	ldr	r3, [pc, #180]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 020c 	and.w	r2, r3, #12
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	429a      	cmp	r2, r3
 800566e:	d1eb      	bne.n	8005648 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005670:	4b27      	ldr	r3, [pc, #156]	; (8005710 <HAL_RCC_ClockConfig+0x1c4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 030f 	and.w	r3, r3, #15
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d210      	bcs.n	80056a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567e:	4b24      	ldr	r3, [pc, #144]	; (8005710 <HAL_RCC_ClockConfig+0x1c4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f023 020f 	bic.w	r2, r3, #15
 8005686:	4922      	ldr	r1, [pc, #136]	; (8005710 <HAL_RCC_ClockConfig+0x1c4>)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	4313      	orrs	r3, r2
 800568c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800568e:	4b20      	ldr	r3, [pc, #128]	; (8005710 <HAL_RCC_ClockConfig+0x1c4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d001      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e032      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056ac:	4b19      	ldr	r3, [pc, #100]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	4916      	ldr	r1, [pc, #88]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056ca:	4b12      	ldr	r3, [pc, #72]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	490e      	ldr	r1, [pc, #56]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056de:	f000 f821 	bl	8005724 <HAL_RCC_GetSysClockFreq>
 80056e2:	4602      	mov	r2, r0
 80056e4:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <HAL_RCC_ClockConfig+0x1c8>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	091b      	lsrs	r3, r3, #4
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	490a      	ldr	r1, [pc, #40]	; (8005718 <HAL_RCC_ClockConfig+0x1cc>)
 80056f0:	5ccb      	ldrb	r3, [r1, r3]
 80056f2:	fa22 f303 	lsr.w	r3, r2, r3
 80056f6:	4a09      	ldr	r2, [pc, #36]	; (800571c <HAL_RCC_ClockConfig+0x1d0>)
 80056f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80056fa:	4b09      	ldr	r3, [pc, #36]	; (8005720 <HAL_RCC_ClockConfig+0x1d4>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fe fce2 	bl	80040c8 <HAL_InitTick>

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40023c00 	.word	0x40023c00
 8005714:	40023800 	.word	0x40023800
 8005718:	08007af4 	.word	0x08007af4
 800571c:	2000003c 	.word	0x2000003c
 8005720:	20000040 	.word	0x20000040

08005724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005728:	b094      	sub	sp, #80	; 0x50
 800572a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800572c:	2300      	movs	r3, #0
 800572e:	647b      	str	r3, [r7, #68]	; 0x44
 8005730:	2300      	movs	r3, #0
 8005732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005734:	2300      	movs	r3, #0
 8005736:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800573c:	4b79      	ldr	r3, [pc, #484]	; (8005924 <HAL_RCC_GetSysClockFreq+0x200>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 030c 	and.w	r3, r3, #12
 8005744:	2b08      	cmp	r3, #8
 8005746:	d00d      	beq.n	8005764 <HAL_RCC_GetSysClockFreq+0x40>
 8005748:	2b08      	cmp	r3, #8
 800574a:	f200 80e1 	bhi.w	8005910 <HAL_RCC_GetSysClockFreq+0x1ec>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <HAL_RCC_GetSysClockFreq+0x34>
 8005752:	2b04      	cmp	r3, #4
 8005754:	d003      	beq.n	800575e <HAL_RCC_GetSysClockFreq+0x3a>
 8005756:	e0db      	b.n	8005910 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005758:	4b73      	ldr	r3, [pc, #460]	; (8005928 <HAL_RCC_GetSysClockFreq+0x204>)
 800575a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800575c:	e0db      	b.n	8005916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800575e:	4b73      	ldr	r3, [pc, #460]	; (800592c <HAL_RCC_GetSysClockFreq+0x208>)
 8005760:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005762:	e0d8      	b.n	8005916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005764:	4b6f      	ldr	r3, [pc, #444]	; (8005924 <HAL_RCC_GetSysClockFreq+0x200>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800576c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800576e:	4b6d      	ldr	r3, [pc, #436]	; (8005924 <HAL_RCC_GetSysClockFreq+0x200>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d063      	beq.n	8005842 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800577a:	4b6a      	ldr	r3, [pc, #424]	; (8005924 <HAL_RCC_GetSysClockFreq+0x200>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	099b      	lsrs	r3, r3, #6
 8005780:	2200      	movs	r2, #0
 8005782:	63bb      	str	r3, [r7, #56]	; 0x38
 8005784:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578c:	633b      	str	r3, [r7, #48]	; 0x30
 800578e:	2300      	movs	r3, #0
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
 8005792:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005796:	4622      	mov	r2, r4
 8005798:	462b      	mov	r3, r5
 800579a:	f04f 0000 	mov.w	r0, #0
 800579e:	f04f 0100 	mov.w	r1, #0
 80057a2:	0159      	lsls	r1, r3, #5
 80057a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057a8:	0150      	lsls	r0, r2, #5
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4621      	mov	r1, r4
 80057b0:	1a51      	subs	r1, r2, r1
 80057b2:	6139      	str	r1, [r7, #16]
 80057b4:	4629      	mov	r1, r5
 80057b6:	eb63 0301 	sbc.w	r3, r3, r1
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057c8:	4659      	mov	r1, fp
 80057ca:	018b      	lsls	r3, r1, #6
 80057cc:	4651      	mov	r1, sl
 80057ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057d2:	4651      	mov	r1, sl
 80057d4:	018a      	lsls	r2, r1, #6
 80057d6:	4651      	mov	r1, sl
 80057d8:	ebb2 0801 	subs.w	r8, r2, r1
 80057dc:	4659      	mov	r1, fp
 80057de:	eb63 0901 	sbc.w	r9, r3, r1
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057f6:	4690      	mov	r8, r2
 80057f8:	4699      	mov	r9, r3
 80057fa:	4623      	mov	r3, r4
 80057fc:	eb18 0303 	adds.w	r3, r8, r3
 8005800:	60bb      	str	r3, [r7, #8]
 8005802:	462b      	mov	r3, r5
 8005804:	eb49 0303 	adc.w	r3, r9, r3
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005816:	4629      	mov	r1, r5
 8005818:	024b      	lsls	r3, r1, #9
 800581a:	4621      	mov	r1, r4
 800581c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005820:	4621      	mov	r1, r4
 8005822:	024a      	lsls	r2, r1, #9
 8005824:	4610      	mov	r0, r2
 8005826:	4619      	mov	r1, r3
 8005828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800582a:	2200      	movs	r2, #0
 800582c:	62bb      	str	r3, [r7, #40]	; 0x28
 800582e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005830:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005834:	f7fa fd3c 	bl	80002b0 <__aeabi_uldivmod>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4613      	mov	r3, r2
 800583e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005840:	e058      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005842:	4b38      	ldr	r3, [pc, #224]	; (8005924 <HAL_RCC_GetSysClockFreq+0x200>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	099b      	lsrs	r3, r3, #6
 8005848:	2200      	movs	r2, #0
 800584a:	4618      	mov	r0, r3
 800584c:	4611      	mov	r1, r2
 800584e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005852:	623b      	str	r3, [r7, #32]
 8005854:	2300      	movs	r3, #0
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
 8005858:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800585c:	4642      	mov	r2, r8
 800585e:	464b      	mov	r3, r9
 8005860:	f04f 0000 	mov.w	r0, #0
 8005864:	f04f 0100 	mov.w	r1, #0
 8005868:	0159      	lsls	r1, r3, #5
 800586a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800586e:	0150      	lsls	r0, r2, #5
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4641      	mov	r1, r8
 8005876:	ebb2 0a01 	subs.w	sl, r2, r1
 800587a:	4649      	mov	r1, r9
 800587c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005880:	f04f 0200 	mov.w	r2, #0
 8005884:	f04f 0300 	mov.w	r3, #0
 8005888:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800588c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005890:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005894:	ebb2 040a 	subs.w	r4, r2, sl
 8005898:	eb63 050b 	sbc.w	r5, r3, fp
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	00eb      	lsls	r3, r5, #3
 80058a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058aa:	00e2      	lsls	r2, r4, #3
 80058ac:	4614      	mov	r4, r2
 80058ae:	461d      	mov	r5, r3
 80058b0:	4643      	mov	r3, r8
 80058b2:	18e3      	adds	r3, r4, r3
 80058b4:	603b      	str	r3, [r7, #0]
 80058b6:	464b      	mov	r3, r9
 80058b8:	eb45 0303 	adc.w	r3, r5, r3
 80058bc:	607b      	str	r3, [r7, #4]
 80058be:	f04f 0200 	mov.w	r2, #0
 80058c2:	f04f 0300 	mov.w	r3, #0
 80058c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058ca:	4629      	mov	r1, r5
 80058cc:	028b      	lsls	r3, r1, #10
 80058ce:	4621      	mov	r1, r4
 80058d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058d4:	4621      	mov	r1, r4
 80058d6:	028a      	lsls	r2, r1, #10
 80058d8:	4610      	mov	r0, r2
 80058da:	4619      	mov	r1, r3
 80058dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058de:	2200      	movs	r2, #0
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	61fa      	str	r2, [r7, #28]
 80058e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058e8:	f7fa fce2 	bl	80002b0 <__aeabi_uldivmod>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4613      	mov	r3, r2
 80058f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80058f4:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <HAL_RCC_GetSysClockFreq+0x200>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	0c1b      	lsrs	r3, r3, #16
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	3301      	adds	r3, #1
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005908:	fbb2 f3f3 	udiv	r3, r2, r3
 800590c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800590e:	e002      	b.n	8005916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <HAL_RCC_GetSysClockFreq+0x204>)
 8005912:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005918:	4618      	mov	r0, r3
 800591a:	3750      	adds	r7, #80	; 0x50
 800591c:	46bd      	mov	sp, r7
 800591e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005922:	bf00      	nop
 8005924:	40023800 	.word	0x40023800
 8005928:	00f42400 	.word	0x00f42400
 800592c:	007a1200 	.word	0x007a1200

08005930 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005934:	4b03      	ldr	r3, [pc, #12]	; (8005944 <HAL_RCC_GetHCLKFreq+0x14>)
 8005936:	681b      	ldr	r3, [r3, #0]
}
 8005938:	4618      	mov	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	2000003c 	.word	0x2000003c

08005948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800594c:	f7ff fff0 	bl	8005930 <HAL_RCC_GetHCLKFreq>
 8005950:	4602      	mov	r2, r0
 8005952:	4b05      	ldr	r3, [pc, #20]	; (8005968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	0a9b      	lsrs	r3, r3, #10
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	4903      	ldr	r1, [pc, #12]	; (800596c <HAL_RCC_GetPCLK1Freq+0x24>)
 800595e:	5ccb      	ldrb	r3, [r1, r3]
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005964:	4618      	mov	r0, r3
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40023800 	.word	0x40023800
 800596c:	08007b04 	.word	0x08007b04

08005970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005974:	f7ff ffdc 	bl	8005930 <HAL_RCC_GetHCLKFreq>
 8005978:	4602      	mov	r2, r0
 800597a:	4b05      	ldr	r3, [pc, #20]	; (8005990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	0b5b      	lsrs	r3, r3, #13
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	4903      	ldr	r1, [pc, #12]	; (8005994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005986:	5ccb      	ldrb	r3, [r1, r3]
 8005988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800598c:	4618      	mov	r0, r3
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40023800 	.word	0x40023800
 8005994:	08007b04 	.word	0x08007b04

08005998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80059a0:	2300      	movs	r3, #0
 80059a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80059a4:	2300      	movs	r3, #0
 80059a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80059a8:	2300      	movs	r3, #0
 80059aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d012      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059c0:	4b69      	ldr	r3, [pc, #420]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	4a68      	ldr	r2, [pc, #416]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80059ca:	6093      	str	r3, [r2, #8]
 80059cc:	4b66      	ldr	r3, [pc, #408]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d4:	4964      	ldr	r1, [pc, #400]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80059e2:	2301      	movs	r3, #1
 80059e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d017      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059f2:	4b5d      	ldr	r3, [pc, #372]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a00:	4959      	ldr	r1, [pc, #356]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a10:	d101      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005a12:	2301      	movs	r3, #1
 8005a14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d017      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a2e:	4b4e      	ldr	r3, [pc, #312]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	494a      	ldr	r1, [pc, #296]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a4c:	d101      	bne.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 808b 	beq.w	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a7c:	4b3a      	ldr	r3, [pc, #232]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	4a39      	ldr	r2, [pc, #228]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a86:	6413      	str	r3, [r2, #64]	; 0x40
 8005a88:	4b37      	ldr	r3, [pc, #220]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a90:	60bb      	str	r3, [r7, #8]
 8005a92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a94:	4b35      	ldr	r3, [pc, #212]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a34      	ldr	r2, [pc, #208]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa0:	f7fe fb56 	bl	8004150 <HAL_GetTick>
 8005aa4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005aa6:	e008      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa8:	f7fe fb52 	bl	8004150 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b64      	cmp	r3, #100	; 0x64
 8005ab4:	d901      	bls.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e357      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005aba:	4b2c      	ldr	r3, [pc, #176]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0f0      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ac6:	4b28      	ldr	r3, [pc, #160]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ace:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d035      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d02e      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ae4:	4b20      	ldr	r3, [pc, #128]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005aee:	4b1e      	ldr	r3, [pc, #120]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af2:	4a1d      	ldr	r2, [pc, #116]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005afa:	4b1b      	ldr	r3, [pc, #108]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	4a1a      	ldr	r2, [pc, #104]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005b06:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b0c:	4b16      	ldr	r3, [pc, #88]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d114      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b18:	f7fe fb1a 	bl	8004150 <HAL_GetTick>
 8005b1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b1e:	e00a      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b20:	f7fe fb16 	bl	8004150 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e319      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b36:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0ee      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b4e:	d111      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005b50:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b5c:	4b04      	ldr	r3, [pc, #16]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b5e:	400b      	ands	r3, r1
 8005b60:	4901      	ldr	r1, [pc, #4]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	608b      	str	r3, [r1, #8]
 8005b66:	e00b      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005b68:	40023800 	.word	0x40023800
 8005b6c:	40007000 	.word	0x40007000
 8005b70:	0ffffcff 	.word	0x0ffffcff
 8005b74:	4baa      	ldr	r3, [pc, #680]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	4aa9      	ldr	r2, [pc, #676]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b7e:	6093      	str	r3, [r2, #8]
 8005b80:	4ba7      	ldr	r3, [pc, #668]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b8c:	49a4      	ldr	r1, [pc, #656]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0310 	and.w	r3, r3, #16
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d010      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b9e:	4ba0      	ldr	r3, [pc, #640]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba4:	4a9e      	ldr	r2, [pc, #632]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005baa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bae:	4b9c      	ldr	r3, [pc, #624]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	4999      	ldr	r1, [pc, #612]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bcc:	4b94      	ldr	r3, [pc, #592]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bda:	4991      	ldr	r1, [pc, #580]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bee:	4b8c      	ldr	r3, [pc, #560]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bfc:	4988      	ldr	r1, [pc, #544]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c10:	4b83      	ldr	r3, [pc, #524]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c1e:	4980      	ldr	r1, [pc, #512]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c32:	4b7b      	ldr	r3, [pc, #492]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c40:	4977      	ldr	r1, [pc, #476]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c54:	4b72      	ldr	r3, [pc, #456]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5a:	f023 0203 	bic.w	r2, r3, #3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c62:	496f      	ldr	r1, [pc, #444]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c76:	4b6a      	ldr	r3, [pc, #424]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7c:	f023 020c 	bic.w	r2, r3, #12
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c84:	4966      	ldr	r1, [pc, #408]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c98:	4b61      	ldr	r3, [pc, #388]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca6:	495e      	ldr	r1, [pc, #376]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cba:	4b59      	ldr	r3, [pc, #356]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc8:	4955      	ldr	r1, [pc, #340]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005cdc:	4b50      	ldr	r3, [pc, #320]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cea:	494d      	ldr	r1, [pc, #308]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005cfe:	4b48      	ldr	r3, [pc, #288]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0c:	4944      	ldr	r1, [pc, #272]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00a      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005d20:	4b3f      	ldr	r3, [pc, #252]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d2e:	493c      	ldr	r1, [pc, #240]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005d42:	4b37      	ldr	r3, [pc, #220]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d50:	4933      	ldr	r1, [pc, #204]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d64:	4b2e      	ldr	r3, [pc, #184]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d72:	492b      	ldr	r1, [pc, #172]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d011      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005d86:	4b26      	ldr	r3, [pc, #152]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d94:	4922      	ldr	r1, [pc, #136]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005da4:	d101      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005da6:	2301      	movs	r3, #1
 8005da8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005db6:	2301      	movs	r3, #1
 8005db8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dc6:	4b16      	ldr	r3, [pc, #88]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dcc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd4:	4912      	ldr	r1, [pc, #72]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00b      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005de8:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005df8:	4909      	ldr	r1, [pc, #36]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d006      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 80d9 	beq.w	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e14:	4b02      	ldr	r3, [pc, #8]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a01      	ldr	r2, [pc, #4]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e1e:	e001      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005e20:	40023800 	.word	0x40023800
 8005e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e26:	f7fe f993 	bl	8004150 <HAL_GetTick>
 8005e2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e2c:	e008      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e2e:	f7fe f98f 	bl	8004150 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b64      	cmp	r3, #100	; 0x64
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e194      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e40:	4b6c      	ldr	r3, [pc, #432]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f0      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d021      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d11d      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005e60:	4b64      	ldr	r3, [pc, #400]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e66:	0c1b      	lsrs	r3, r3, #16
 8005e68:	f003 0303 	and.w	r3, r3, #3
 8005e6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e6e:	4b61      	ldr	r3, [pc, #388]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e74:	0e1b      	lsrs	r3, r3, #24
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	019a      	lsls	r2, r3, #6
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	041b      	lsls	r3, r3, #16
 8005e86:	431a      	orrs	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	061b      	lsls	r3, r3, #24
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	071b      	lsls	r3, r3, #28
 8005e94:	4957      	ldr	r1, [pc, #348]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eb0:	d00a      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d02e      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ec6:	d129      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ec8:	4b4a      	ldr	r3, [pc, #296]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ece:	0c1b      	lsrs	r3, r3, #16
 8005ed0:	f003 0303 	and.w	r3, r3, #3
 8005ed4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ed6:	4b47      	ldr	r3, [pc, #284]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005edc:	0f1b      	lsrs	r3, r3, #28
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	019a      	lsls	r2, r3, #6
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	041b      	lsls	r3, r3, #16
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	061b      	lsls	r3, r3, #24
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	071b      	lsls	r3, r3, #28
 8005efc:	493d      	ldr	r1, [pc, #244]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f04:	4b3b      	ldr	r3, [pc, #236]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f0a:	f023 021f 	bic.w	r2, r3, #31
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	3b01      	subs	r3, #1
 8005f14:	4937      	ldr	r1, [pc, #220]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01d      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f28:	4b32      	ldr	r3, [pc, #200]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f2e:	0e1b      	lsrs	r3, r3, #24
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f36:	4b2f      	ldr	r3, [pc, #188]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f3c:	0f1b      	lsrs	r3, r3, #28
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	019a      	lsls	r2, r3, #6
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	041b      	lsls	r3, r3, #16
 8005f50:	431a      	orrs	r2, r3
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	061b      	lsls	r3, r3, #24
 8005f56:	431a      	orrs	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	071b      	lsls	r3, r3, #28
 8005f5c:	4925      	ldr	r1, [pc, #148]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d011      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	019a      	lsls	r2, r3, #6
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	041b      	lsls	r3, r3, #16
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	061b      	lsls	r3, r3, #24
 8005f84:	431a      	orrs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	071b      	lsls	r3, r3, #28
 8005f8c:	4919      	ldr	r1, [pc, #100]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f94:	4b17      	ldr	r3, [pc, #92]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a16      	ldr	r2, [pc, #88]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fa0:	f7fe f8d6 	bl	8004150 <HAL_GetTick>
 8005fa4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fa6:	e008      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005fa8:	f7fe f8d2 	bl	8004150 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b64      	cmp	r3, #100	; 0x64
 8005fb4:	d901      	bls.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e0d7      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fba:	4b0e      	ldr	r3, [pc, #56]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0f0      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	f040 80cd 	bne.w	8006168 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a08      	ldr	r2, [pc, #32]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fda:	f7fe f8b9 	bl	8004150 <HAL_GetTick>
 8005fde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fe0:	e00a      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005fe2:	f7fe f8b5 	bl	8004150 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b64      	cmp	r3, #100	; 0x64
 8005fee:	d903      	bls.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e0ba      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005ff4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ff8:	4b5e      	ldr	r3, [pc, #376]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006004:	d0ed      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d009      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006022:	2b00      	cmp	r3, #0
 8006024:	d02e      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d12a      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800602e:	4b51      	ldr	r3, [pc, #324]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006034:	0c1b      	lsrs	r3, r3, #16
 8006036:	f003 0303 	and.w	r3, r3, #3
 800603a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800603c:	4b4d      	ldr	r3, [pc, #308]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800603e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006042:	0f1b      	lsrs	r3, r3, #28
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	019a      	lsls	r2, r3, #6
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	041b      	lsls	r3, r3, #16
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	061b      	lsls	r3, r3, #24
 800605c:	431a      	orrs	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	071b      	lsls	r3, r3, #28
 8006062:	4944      	ldr	r1, [pc, #272]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800606a:	4b42      	ldr	r3, [pc, #264]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800606c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006070:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006078:	3b01      	subs	r3, #1
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	493d      	ldr	r1, [pc, #244]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800607e:	4313      	orrs	r3, r2
 8006080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d022      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006098:	d11d      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800609a:	4b36      	ldr	r3, [pc, #216]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800609c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a0:	0e1b      	lsrs	r3, r3, #24
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80060a8:	4b32      	ldr	r3, [pc, #200]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80060aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ae:	0f1b      	lsrs	r3, r3, #28
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	019a      	lsls	r2, r3, #6
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	041b      	lsls	r3, r3, #16
 80060c2:	431a      	orrs	r2, r3
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	061b      	lsls	r3, r3, #24
 80060c8:	431a      	orrs	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	071b      	lsls	r3, r3, #28
 80060ce:	4929      	ldr	r1, [pc, #164]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d028      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060e2:	4b24      	ldr	r3, [pc, #144]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	0e1b      	lsrs	r3, r3, #24
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80060f0:	4b20      	ldr	r3, [pc, #128]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f6:	0c1b      	lsrs	r3, r3, #16
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	019a      	lsls	r2, r3, #6
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	041b      	lsls	r3, r3, #16
 8006108:	431a      	orrs	r2, r3
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	061b      	lsls	r3, r3, #24
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	071b      	lsls	r3, r3, #28
 8006116:	4917      	ldr	r1, [pc, #92]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800611e:	4b15      	ldr	r3, [pc, #84]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006124:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612c:	4911      	ldr	r1, [pc, #68]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800612e:	4313      	orrs	r3, r2
 8006130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006134:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a0e      	ldr	r2, [pc, #56]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800613a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800613e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006140:	f7fe f806 	bl	8004150 <HAL_GetTick>
 8006144:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006146:	e008      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006148:	f7fe f802 	bl	8004150 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b64      	cmp	r3, #100	; 0x64
 8006154:	d901      	bls.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e007      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800615a:	4b06      	ldr	r3, [pc, #24]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006166:	d1ef      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3720      	adds	r7, #32
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40023800 	.word	0x40023800

08006178 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e040      	b.n	800620c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fd fe12 	bl	8003dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2224      	movs	r2, #36	; 0x24
 80061a4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0201 	bic.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f8b0 	bl	800631c <UART_SetConfig>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e022      	b.n	800620c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fb08 	bl	80067e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fb8f 	bl	8006928 <UART_CheckIdleState>
 800620a:	4603      	mov	r3, r0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08a      	sub	sp, #40	; 0x28
 8006218:	af02      	add	r7, sp, #8
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	603b      	str	r3, [r7, #0]
 8006220:	4613      	mov	r3, r2
 8006222:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006228:	2b20      	cmp	r3, #32
 800622a:	d171      	bne.n	8006310 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_UART_Transmit+0x24>
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e06a      	b.n	8006312 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2221      	movs	r2, #33	; 0x21
 8006248:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800624a:	f7fd ff81 	bl	8004150 <HAL_GetTick>
 800624e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	88fa      	ldrh	r2, [r7, #6]
 8006254:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	88fa      	ldrh	r2, [r7, #6]
 800625c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006268:	d108      	bne.n	800627c <HAL_UART_Transmit+0x68>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d104      	bne.n	800627c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006272:	2300      	movs	r3, #0
 8006274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	61bb      	str	r3, [r7, #24]
 800627a:	e003      	b.n	8006284 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006280:	2300      	movs	r3, #0
 8006282:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006284:	e02c      	b.n	80062e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2200      	movs	r2, #0
 800628e:	2180      	movs	r1, #128	; 0x80
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 fb80 	bl	8006996 <UART_WaitOnFlagUntilTimeout>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e038      	b.n	8006312 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10b      	bne.n	80062be <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	3302      	adds	r3, #2
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	e007      	b.n	80062ce <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	781a      	ldrb	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	3301      	adds	r3, #1
 80062cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1cc      	bne.n	8006286 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2200      	movs	r2, #0
 80062f4:	2140      	movs	r1, #64	; 0x40
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 fb4d 	bl	8006996 <UART_WaitOnFlagUntilTimeout>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e005      	b.n	8006312 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2220      	movs	r2, #32
 800630a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	e000      	b.n	8006312 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006310:	2302      	movs	r3, #2
  }
}
 8006312:	4618      	mov	r0, r3
 8006314:	3720      	adds	r7, #32
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4ba6      	ldr	r3, [pc, #664]	; (80065e0 <UART_SetConfig+0x2c4>)
 8006348:	4013      	ands	r3, r2
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6812      	ldr	r2, [r2, #0]
 800634e:	6979      	ldr	r1, [r7, #20]
 8006350:	430b      	orrs	r3, r1
 8006352:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68da      	ldr	r2, [r3, #12]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	430a      	orrs	r2, r1
 800638c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a94      	ldr	r2, [pc, #592]	; (80065e4 <UART_SetConfig+0x2c8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d120      	bne.n	80063da <UART_SetConfig+0xbe>
 8006398:	4b93      	ldr	r3, [pc, #588]	; (80065e8 <UART_SetConfig+0x2cc>)
 800639a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d816      	bhi.n	80063d4 <UART_SetConfig+0xb8>
 80063a6:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <UART_SetConfig+0x90>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063bd 	.word	0x080063bd
 80063b0:	080063c9 	.word	0x080063c9
 80063b4:	080063c3 	.word	0x080063c3
 80063b8:	080063cf 	.word	0x080063cf
 80063bc:	2301      	movs	r3, #1
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e150      	b.n	8006664 <UART_SetConfig+0x348>
 80063c2:	2302      	movs	r3, #2
 80063c4:	77fb      	strb	r3, [r7, #31]
 80063c6:	e14d      	b.n	8006664 <UART_SetConfig+0x348>
 80063c8:	2304      	movs	r3, #4
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e14a      	b.n	8006664 <UART_SetConfig+0x348>
 80063ce:	2308      	movs	r3, #8
 80063d0:	77fb      	strb	r3, [r7, #31]
 80063d2:	e147      	b.n	8006664 <UART_SetConfig+0x348>
 80063d4:	2310      	movs	r3, #16
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e144      	b.n	8006664 <UART_SetConfig+0x348>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a83      	ldr	r2, [pc, #524]	; (80065ec <UART_SetConfig+0x2d0>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d132      	bne.n	800644a <UART_SetConfig+0x12e>
 80063e4:	4b80      	ldr	r3, [pc, #512]	; (80065e8 <UART_SetConfig+0x2cc>)
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ea:	f003 030c 	and.w	r3, r3, #12
 80063ee:	2b0c      	cmp	r3, #12
 80063f0:	d828      	bhi.n	8006444 <UART_SetConfig+0x128>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <UART_SetConfig+0xdc>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	0800642d 	.word	0x0800642d
 80063fc:	08006445 	.word	0x08006445
 8006400:	08006445 	.word	0x08006445
 8006404:	08006445 	.word	0x08006445
 8006408:	08006439 	.word	0x08006439
 800640c:	08006445 	.word	0x08006445
 8006410:	08006445 	.word	0x08006445
 8006414:	08006445 	.word	0x08006445
 8006418:	08006433 	.word	0x08006433
 800641c:	08006445 	.word	0x08006445
 8006420:	08006445 	.word	0x08006445
 8006424:	08006445 	.word	0x08006445
 8006428:	0800643f 	.word	0x0800643f
 800642c:	2300      	movs	r3, #0
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	e118      	b.n	8006664 <UART_SetConfig+0x348>
 8006432:	2302      	movs	r3, #2
 8006434:	77fb      	strb	r3, [r7, #31]
 8006436:	e115      	b.n	8006664 <UART_SetConfig+0x348>
 8006438:	2304      	movs	r3, #4
 800643a:	77fb      	strb	r3, [r7, #31]
 800643c:	e112      	b.n	8006664 <UART_SetConfig+0x348>
 800643e:	2308      	movs	r3, #8
 8006440:	77fb      	strb	r3, [r7, #31]
 8006442:	e10f      	b.n	8006664 <UART_SetConfig+0x348>
 8006444:	2310      	movs	r3, #16
 8006446:	77fb      	strb	r3, [r7, #31]
 8006448:	e10c      	b.n	8006664 <UART_SetConfig+0x348>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a68      	ldr	r2, [pc, #416]	; (80065f0 <UART_SetConfig+0x2d4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d120      	bne.n	8006496 <UART_SetConfig+0x17a>
 8006454:	4b64      	ldr	r3, [pc, #400]	; (80065e8 <UART_SetConfig+0x2cc>)
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800645e:	2b30      	cmp	r3, #48	; 0x30
 8006460:	d013      	beq.n	800648a <UART_SetConfig+0x16e>
 8006462:	2b30      	cmp	r3, #48	; 0x30
 8006464:	d814      	bhi.n	8006490 <UART_SetConfig+0x174>
 8006466:	2b20      	cmp	r3, #32
 8006468:	d009      	beq.n	800647e <UART_SetConfig+0x162>
 800646a:	2b20      	cmp	r3, #32
 800646c:	d810      	bhi.n	8006490 <UART_SetConfig+0x174>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <UART_SetConfig+0x15c>
 8006472:	2b10      	cmp	r3, #16
 8006474:	d006      	beq.n	8006484 <UART_SetConfig+0x168>
 8006476:	e00b      	b.n	8006490 <UART_SetConfig+0x174>
 8006478:	2300      	movs	r3, #0
 800647a:	77fb      	strb	r3, [r7, #31]
 800647c:	e0f2      	b.n	8006664 <UART_SetConfig+0x348>
 800647e:	2302      	movs	r3, #2
 8006480:	77fb      	strb	r3, [r7, #31]
 8006482:	e0ef      	b.n	8006664 <UART_SetConfig+0x348>
 8006484:	2304      	movs	r3, #4
 8006486:	77fb      	strb	r3, [r7, #31]
 8006488:	e0ec      	b.n	8006664 <UART_SetConfig+0x348>
 800648a:	2308      	movs	r3, #8
 800648c:	77fb      	strb	r3, [r7, #31]
 800648e:	e0e9      	b.n	8006664 <UART_SetConfig+0x348>
 8006490:	2310      	movs	r3, #16
 8006492:	77fb      	strb	r3, [r7, #31]
 8006494:	e0e6      	b.n	8006664 <UART_SetConfig+0x348>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a56      	ldr	r2, [pc, #344]	; (80065f4 <UART_SetConfig+0x2d8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d120      	bne.n	80064e2 <UART_SetConfig+0x1c6>
 80064a0:	4b51      	ldr	r3, [pc, #324]	; (80065e8 <UART_SetConfig+0x2cc>)
 80064a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064aa:	2bc0      	cmp	r3, #192	; 0xc0
 80064ac:	d013      	beq.n	80064d6 <UART_SetConfig+0x1ba>
 80064ae:	2bc0      	cmp	r3, #192	; 0xc0
 80064b0:	d814      	bhi.n	80064dc <UART_SetConfig+0x1c0>
 80064b2:	2b80      	cmp	r3, #128	; 0x80
 80064b4:	d009      	beq.n	80064ca <UART_SetConfig+0x1ae>
 80064b6:	2b80      	cmp	r3, #128	; 0x80
 80064b8:	d810      	bhi.n	80064dc <UART_SetConfig+0x1c0>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <UART_SetConfig+0x1a8>
 80064be:	2b40      	cmp	r3, #64	; 0x40
 80064c0:	d006      	beq.n	80064d0 <UART_SetConfig+0x1b4>
 80064c2:	e00b      	b.n	80064dc <UART_SetConfig+0x1c0>
 80064c4:	2300      	movs	r3, #0
 80064c6:	77fb      	strb	r3, [r7, #31]
 80064c8:	e0cc      	b.n	8006664 <UART_SetConfig+0x348>
 80064ca:	2302      	movs	r3, #2
 80064cc:	77fb      	strb	r3, [r7, #31]
 80064ce:	e0c9      	b.n	8006664 <UART_SetConfig+0x348>
 80064d0:	2304      	movs	r3, #4
 80064d2:	77fb      	strb	r3, [r7, #31]
 80064d4:	e0c6      	b.n	8006664 <UART_SetConfig+0x348>
 80064d6:	2308      	movs	r3, #8
 80064d8:	77fb      	strb	r3, [r7, #31]
 80064da:	e0c3      	b.n	8006664 <UART_SetConfig+0x348>
 80064dc:	2310      	movs	r3, #16
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e0c0      	b.n	8006664 <UART_SetConfig+0x348>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a44      	ldr	r2, [pc, #272]	; (80065f8 <UART_SetConfig+0x2dc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d125      	bne.n	8006538 <UART_SetConfig+0x21c>
 80064ec:	4b3e      	ldr	r3, [pc, #248]	; (80065e8 <UART_SetConfig+0x2cc>)
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064fa:	d017      	beq.n	800652c <UART_SetConfig+0x210>
 80064fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006500:	d817      	bhi.n	8006532 <UART_SetConfig+0x216>
 8006502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006506:	d00b      	beq.n	8006520 <UART_SetConfig+0x204>
 8006508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800650c:	d811      	bhi.n	8006532 <UART_SetConfig+0x216>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <UART_SetConfig+0x1fe>
 8006512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006516:	d006      	beq.n	8006526 <UART_SetConfig+0x20a>
 8006518:	e00b      	b.n	8006532 <UART_SetConfig+0x216>
 800651a:	2300      	movs	r3, #0
 800651c:	77fb      	strb	r3, [r7, #31]
 800651e:	e0a1      	b.n	8006664 <UART_SetConfig+0x348>
 8006520:	2302      	movs	r3, #2
 8006522:	77fb      	strb	r3, [r7, #31]
 8006524:	e09e      	b.n	8006664 <UART_SetConfig+0x348>
 8006526:	2304      	movs	r3, #4
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	e09b      	b.n	8006664 <UART_SetConfig+0x348>
 800652c:	2308      	movs	r3, #8
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e098      	b.n	8006664 <UART_SetConfig+0x348>
 8006532:	2310      	movs	r3, #16
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e095      	b.n	8006664 <UART_SetConfig+0x348>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a2f      	ldr	r2, [pc, #188]	; (80065fc <UART_SetConfig+0x2e0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d125      	bne.n	800658e <UART_SetConfig+0x272>
 8006542:	4b29      	ldr	r3, [pc, #164]	; (80065e8 <UART_SetConfig+0x2cc>)
 8006544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006548:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800654c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006550:	d017      	beq.n	8006582 <UART_SetConfig+0x266>
 8006552:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006556:	d817      	bhi.n	8006588 <UART_SetConfig+0x26c>
 8006558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800655c:	d00b      	beq.n	8006576 <UART_SetConfig+0x25a>
 800655e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006562:	d811      	bhi.n	8006588 <UART_SetConfig+0x26c>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <UART_SetConfig+0x254>
 8006568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800656c:	d006      	beq.n	800657c <UART_SetConfig+0x260>
 800656e:	e00b      	b.n	8006588 <UART_SetConfig+0x26c>
 8006570:	2301      	movs	r3, #1
 8006572:	77fb      	strb	r3, [r7, #31]
 8006574:	e076      	b.n	8006664 <UART_SetConfig+0x348>
 8006576:	2302      	movs	r3, #2
 8006578:	77fb      	strb	r3, [r7, #31]
 800657a:	e073      	b.n	8006664 <UART_SetConfig+0x348>
 800657c:	2304      	movs	r3, #4
 800657e:	77fb      	strb	r3, [r7, #31]
 8006580:	e070      	b.n	8006664 <UART_SetConfig+0x348>
 8006582:	2308      	movs	r3, #8
 8006584:	77fb      	strb	r3, [r7, #31]
 8006586:	e06d      	b.n	8006664 <UART_SetConfig+0x348>
 8006588:	2310      	movs	r3, #16
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e06a      	b.n	8006664 <UART_SetConfig+0x348>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1b      	ldr	r2, [pc, #108]	; (8006600 <UART_SetConfig+0x2e4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d138      	bne.n	800660a <UART_SetConfig+0x2ee>
 8006598:	4b13      	ldr	r3, [pc, #76]	; (80065e8 <UART_SetConfig+0x2cc>)
 800659a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80065a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065a6:	d017      	beq.n	80065d8 <UART_SetConfig+0x2bc>
 80065a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065ac:	d82a      	bhi.n	8006604 <UART_SetConfig+0x2e8>
 80065ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b2:	d00b      	beq.n	80065cc <UART_SetConfig+0x2b0>
 80065b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b8:	d824      	bhi.n	8006604 <UART_SetConfig+0x2e8>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <UART_SetConfig+0x2aa>
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c2:	d006      	beq.n	80065d2 <UART_SetConfig+0x2b6>
 80065c4:	e01e      	b.n	8006604 <UART_SetConfig+0x2e8>
 80065c6:	2300      	movs	r3, #0
 80065c8:	77fb      	strb	r3, [r7, #31]
 80065ca:	e04b      	b.n	8006664 <UART_SetConfig+0x348>
 80065cc:	2302      	movs	r3, #2
 80065ce:	77fb      	strb	r3, [r7, #31]
 80065d0:	e048      	b.n	8006664 <UART_SetConfig+0x348>
 80065d2:	2304      	movs	r3, #4
 80065d4:	77fb      	strb	r3, [r7, #31]
 80065d6:	e045      	b.n	8006664 <UART_SetConfig+0x348>
 80065d8:	2308      	movs	r3, #8
 80065da:	77fb      	strb	r3, [r7, #31]
 80065dc:	e042      	b.n	8006664 <UART_SetConfig+0x348>
 80065de:	bf00      	nop
 80065e0:	efff69f3 	.word	0xefff69f3
 80065e4:	40011000 	.word	0x40011000
 80065e8:	40023800 	.word	0x40023800
 80065ec:	40004400 	.word	0x40004400
 80065f0:	40004800 	.word	0x40004800
 80065f4:	40004c00 	.word	0x40004c00
 80065f8:	40005000 	.word	0x40005000
 80065fc:	40011400 	.word	0x40011400
 8006600:	40007800 	.word	0x40007800
 8006604:	2310      	movs	r3, #16
 8006606:	77fb      	strb	r3, [r7, #31]
 8006608:	e02c      	b.n	8006664 <UART_SetConfig+0x348>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a72      	ldr	r2, [pc, #456]	; (80067d8 <UART_SetConfig+0x4bc>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d125      	bne.n	8006660 <UART_SetConfig+0x344>
 8006614:	4b71      	ldr	r3, [pc, #452]	; (80067dc <UART_SetConfig+0x4c0>)
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800661e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006622:	d017      	beq.n	8006654 <UART_SetConfig+0x338>
 8006624:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006628:	d817      	bhi.n	800665a <UART_SetConfig+0x33e>
 800662a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662e:	d00b      	beq.n	8006648 <UART_SetConfig+0x32c>
 8006630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006634:	d811      	bhi.n	800665a <UART_SetConfig+0x33e>
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <UART_SetConfig+0x326>
 800663a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800663e:	d006      	beq.n	800664e <UART_SetConfig+0x332>
 8006640:	e00b      	b.n	800665a <UART_SetConfig+0x33e>
 8006642:	2300      	movs	r3, #0
 8006644:	77fb      	strb	r3, [r7, #31]
 8006646:	e00d      	b.n	8006664 <UART_SetConfig+0x348>
 8006648:	2302      	movs	r3, #2
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	e00a      	b.n	8006664 <UART_SetConfig+0x348>
 800664e:	2304      	movs	r3, #4
 8006650:	77fb      	strb	r3, [r7, #31]
 8006652:	e007      	b.n	8006664 <UART_SetConfig+0x348>
 8006654:	2308      	movs	r3, #8
 8006656:	77fb      	strb	r3, [r7, #31]
 8006658:	e004      	b.n	8006664 <UART_SetConfig+0x348>
 800665a:	2310      	movs	r3, #16
 800665c:	77fb      	strb	r3, [r7, #31]
 800665e:	e001      	b.n	8006664 <UART_SetConfig+0x348>
 8006660:	2310      	movs	r3, #16
 8006662:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800666c:	d15b      	bne.n	8006726 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800666e:	7ffb      	ldrb	r3, [r7, #31]
 8006670:	2b08      	cmp	r3, #8
 8006672:	d828      	bhi.n	80066c6 <UART_SetConfig+0x3aa>
 8006674:	a201      	add	r2, pc, #4	; (adr r2, 800667c <UART_SetConfig+0x360>)
 8006676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667a:	bf00      	nop
 800667c:	080066a1 	.word	0x080066a1
 8006680:	080066a9 	.word	0x080066a9
 8006684:	080066b1 	.word	0x080066b1
 8006688:	080066c7 	.word	0x080066c7
 800668c:	080066b7 	.word	0x080066b7
 8006690:	080066c7 	.word	0x080066c7
 8006694:	080066c7 	.word	0x080066c7
 8006698:	080066c7 	.word	0x080066c7
 800669c:	080066bf 	.word	0x080066bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066a0:	f7ff f952 	bl	8005948 <HAL_RCC_GetPCLK1Freq>
 80066a4:	61b8      	str	r0, [r7, #24]
        break;
 80066a6:	e013      	b.n	80066d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066a8:	f7ff f962 	bl	8005970 <HAL_RCC_GetPCLK2Freq>
 80066ac:	61b8      	str	r0, [r7, #24]
        break;
 80066ae:	e00f      	b.n	80066d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066b0:	4b4b      	ldr	r3, [pc, #300]	; (80067e0 <UART_SetConfig+0x4c4>)
 80066b2:	61bb      	str	r3, [r7, #24]
        break;
 80066b4:	e00c      	b.n	80066d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066b6:	f7ff f835 	bl	8005724 <HAL_RCC_GetSysClockFreq>
 80066ba:	61b8      	str	r0, [r7, #24]
        break;
 80066bc:	e008      	b.n	80066d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066c2:	61bb      	str	r3, [r7, #24]
        break;
 80066c4:	e004      	b.n	80066d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	77bb      	strb	r3, [r7, #30]
        break;
 80066ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d074      	beq.n	80067c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	005a      	lsls	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	085b      	lsrs	r3, r3, #1
 80066e0:	441a      	add	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	2b0f      	cmp	r3, #15
 80066f0:	d916      	bls.n	8006720 <UART_SetConfig+0x404>
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f8:	d212      	bcs.n	8006720 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f023 030f 	bic.w	r3, r3, #15
 8006702:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	085b      	lsrs	r3, r3, #1
 8006708:	b29b      	uxth	r3, r3
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	b29a      	uxth	r2, r3
 8006710:	89fb      	ldrh	r3, [r7, #14]
 8006712:	4313      	orrs	r3, r2
 8006714:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	89fa      	ldrh	r2, [r7, #14]
 800671c:	60da      	str	r2, [r3, #12]
 800671e:	e04f      	b.n	80067c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	77bb      	strb	r3, [r7, #30]
 8006724:	e04c      	b.n	80067c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006726:	7ffb      	ldrb	r3, [r7, #31]
 8006728:	2b08      	cmp	r3, #8
 800672a:	d828      	bhi.n	800677e <UART_SetConfig+0x462>
 800672c:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <UART_SetConfig+0x418>)
 800672e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006732:	bf00      	nop
 8006734:	08006759 	.word	0x08006759
 8006738:	08006761 	.word	0x08006761
 800673c:	08006769 	.word	0x08006769
 8006740:	0800677f 	.word	0x0800677f
 8006744:	0800676f 	.word	0x0800676f
 8006748:	0800677f 	.word	0x0800677f
 800674c:	0800677f 	.word	0x0800677f
 8006750:	0800677f 	.word	0x0800677f
 8006754:	08006777 	.word	0x08006777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006758:	f7ff f8f6 	bl	8005948 <HAL_RCC_GetPCLK1Freq>
 800675c:	61b8      	str	r0, [r7, #24]
        break;
 800675e:	e013      	b.n	8006788 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006760:	f7ff f906 	bl	8005970 <HAL_RCC_GetPCLK2Freq>
 8006764:	61b8      	str	r0, [r7, #24]
        break;
 8006766:	e00f      	b.n	8006788 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006768:	4b1d      	ldr	r3, [pc, #116]	; (80067e0 <UART_SetConfig+0x4c4>)
 800676a:	61bb      	str	r3, [r7, #24]
        break;
 800676c:	e00c      	b.n	8006788 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800676e:	f7fe ffd9 	bl	8005724 <HAL_RCC_GetSysClockFreq>
 8006772:	61b8      	str	r0, [r7, #24]
        break;
 8006774:	e008      	b.n	8006788 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800677a:	61bb      	str	r3, [r7, #24]
        break;
 800677c:	e004      	b.n	8006788 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	77bb      	strb	r3, [r7, #30]
        break;
 8006786:	bf00      	nop
    }

    if (pclk != 0U)
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d018      	beq.n	80067c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	085a      	lsrs	r2, r3, #1
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	441a      	add	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b0f      	cmp	r3, #15
 80067a6:	d909      	bls.n	80067bc <UART_SetConfig+0x4a0>
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ae:	d205      	bcs.n	80067bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60da      	str	r2, [r3, #12]
 80067ba:	e001      	b.n	80067c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80067cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3720      	adds	r7, #32
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	40007c00 	.word	0x40007c00
 80067dc:	40023800 	.word	0x40023800
 80067e0:	00f42400 	.word	0x00f42400

080067e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00a      	beq.n	8006852 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	f003 0310 	and.w	r3, r3, #16
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00a      	beq.n	8006896 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d01a      	beq.n	80068fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068e2:	d10a      	bne.n	80068fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	605a      	str	r2, [r3, #4]
  }
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af02      	add	r7, sp, #8
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006938:	f7fd fc0a 	bl	8004150 <HAL_GetTick>
 800693c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b08      	cmp	r3, #8
 800694a:	d10e      	bne.n	800696a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800694c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f81b 	bl	8006996 <UART_WaitOnFlagUntilTimeout>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e011      	b.n	800698e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2220      	movs	r2, #32
 800696e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2220      	movs	r2, #32
 8006974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b09c      	sub	sp, #112	; 0x70
 800699a:	af00      	add	r7, sp, #0
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	603b      	str	r3, [r7, #0]
 80069a2:	4613      	mov	r3, r2
 80069a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069a6:	e0a7      	b.n	8006af8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ae:	f000 80a3 	beq.w	8006af8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069b2:	f7fd fbcd 	bl	8004150 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80069be:	429a      	cmp	r2, r3
 80069c0:	d302      	bcc.n	80069c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80069c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d13f      	bne.n	8006a48 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80069d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069dc:	667b      	str	r3, [r7, #100]	; 0x64
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80069f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e6      	bne.n	80069c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3308      	adds	r3, #8
 8006a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0c:	f023 0301 	bic.w	r3, r3, #1
 8006a10:	663b      	str	r3, [r7, #96]	; 0x60
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3308      	adds	r3, #8
 8006a18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e5      	bne.n	80069fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2220      	movs	r2, #32
 8006a32:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e068      	b.n	8006b1a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0304 	and.w	r3, r3, #4
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d050      	beq.n	8006af8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a64:	d148      	bne.n	8006af8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a6e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a90:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e6      	bne.n	8006a70 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ac2:	623a      	str	r2, [r7, #32]
 8006ac4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	69f9      	ldr	r1, [r7, #28]
 8006ac8:	6a3a      	ldr	r2, [r7, #32]
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e5      	bne.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e010      	b.n	8006b1a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	69da      	ldr	r2, [r3, #28]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	4013      	ands	r3, r2
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	bf0c      	ite	eq
 8006b08:	2301      	moveq	r3, #1
 8006b0a:	2300      	movne	r3, #0
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	79fb      	ldrb	r3, [r7, #7]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	f43f af48 	beq.w	80069a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3770      	adds	r7, #112	; 0x70
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b24:	b084      	sub	sp, #16
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	f107 001c 	add.w	r0, r7, #28
 8006b32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d120      	bne.n	8006b7e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	4b20      	ldr	r3, [pc, #128]	; (8006bd0 <USB_CoreInit+0xac>)
 8006b4e:	4013      	ands	r3, r2
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d105      	bne.n	8006b72 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fa96 	bl	80070a4 <USB_CoreReset>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	73fb      	strb	r3, [r7, #15]
 8006b7c:	e010      	b.n	8006ba0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa8a 	bl	80070a4 <USB_CoreReset>
 8006b90:	4603      	mov	r3, r0
 8006b92:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d10b      	bne.n	8006bbe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f043 0206 	orr.w	r2, r3, #6
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f043 0220 	orr.w	r2, r3, #32
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bca:	b004      	add	sp, #16
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	ffbdffbf 	.word	0xffbdffbf

08006bd4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f023 0201 	bic.w	r2, r3, #1
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c12:	78fb      	ldrb	r3, [r7, #3]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d115      	bne.n	8006c44 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c24:	2001      	movs	r0, #1
 8006c26:	f7fd fa9f 	bl	8004168 <HAL_Delay>
      ms++;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fa29 	bl	8007088 <USB_GetMode>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d01e      	beq.n	8006c7a <USB_SetCurrentMode+0x84>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b31      	cmp	r3, #49	; 0x31
 8006c40:	d9f0      	bls.n	8006c24 <USB_SetCurrentMode+0x2e>
 8006c42:	e01a      	b.n	8006c7a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d115      	bne.n	8006c76 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c56:	2001      	movs	r0, #1
 8006c58:	f7fd fa86 	bl	8004168 <HAL_Delay>
      ms++;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fa10 	bl	8007088 <USB_GetMode>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <USB_SetCurrentMode+0x84>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b31      	cmp	r3, #49	; 0x31
 8006c72:	d9f0      	bls.n	8006c56 <USB_SetCurrentMode+0x60>
 8006c74:	e001      	b.n	8006c7a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e005      	b.n	8006c86 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b32      	cmp	r3, #50	; 0x32
 8006c7e:	d101      	bne.n	8006c84 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e000      	b.n	8006c86 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c90:	b084      	sub	sp, #16
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b086      	sub	sp, #24
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006caa:	2300      	movs	r3, #0
 8006cac:	613b      	str	r3, [r7, #16]
 8006cae:	e009      	b.n	8006cc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	3340      	adds	r3, #64	; 0x40
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	2200      	movs	r2, #0
 8006cbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	613b      	str	r3, [r7, #16]
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	2b0e      	cmp	r3, #14
 8006cc8:	d9f2      	bls.n	8006cb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d11c      	bne.n	8006d0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cde:	f043 0302 	orr.w	r3, r3, #2
 8006ce2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	e005      	b.n	8006d16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	2300      	movs	r3, #0
 8006d20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d28:	4619      	mov	r1, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d30:	461a      	mov	r2, r3
 8006d32:	680b      	ldr	r3, [r1, #0]
 8006d34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d10c      	bne.n	8006d56 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d104      	bne.n	8006d4c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d42:	2100      	movs	r1, #0
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f965 	bl	8007014 <USB_SetDevSpeed>
 8006d4a:	e008      	b.n	8006d5e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f960 	bl	8007014 <USB_SetDevSpeed>
 8006d54:	e003      	b.n	8006d5e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d56:	2103      	movs	r1, #3
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f95b 	bl	8007014 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d5e:	2110      	movs	r1, #16
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f8f3 	bl	8006f4c <USB_FlushTxFifo>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f91f 	bl	8006fb4 <USB_FlushRxFifo>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d86:	461a      	mov	r2, r3
 8006d88:	2300      	movs	r3, #0
 8006d8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d92:	461a      	mov	r2, r3
 8006d94:	2300      	movs	r3, #0
 8006d96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d9e:	461a      	mov	r2, r3
 8006da0:	2300      	movs	r3, #0
 8006da2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006da4:	2300      	movs	r3, #0
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	e043      	b.n	8006e32 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dc0:	d118      	bne.n	8006df4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dda:	6013      	str	r3, [r2, #0]
 8006ddc:	e013      	b.n	8006e06 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dea:	461a      	mov	r2, r3
 8006dec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	e008      	b.n	8006e06 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e00:	461a      	mov	r2, r3
 8006e02:	2300      	movs	r3, #0
 8006e04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e12:	461a      	mov	r2, r3
 8006e14:	2300      	movs	r3, #0
 8006e16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e24:	461a      	mov	r2, r3
 8006e26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	613b      	str	r3, [r7, #16]
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d3b7      	bcc.n	8006daa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	613b      	str	r3, [r7, #16]
 8006e3e:	e043      	b.n	8006ec8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e56:	d118      	bne.n	8006e8a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	e013      	b.n	8006e9c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e80:	461a      	mov	r2, r3
 8006e82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	e008      	b.n	8006e9c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e96:	461a      	mov	r2, r3
 8006e98:	2300      	movs	r3, #0
 8006e9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	2300      	movs	r3, #0
 8006eac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ec0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d3b7      	bcc.n	8006e40 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ee2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ef0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d105      	bne.n	8006f04 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	f043 0210 	orr.w	r2, r3, #16
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699a      	ldr	r2, [r3, #24]
 8006f08:	4b0e      	ldr	r3, [pc, #56]	; (8006f44 <USB_DevInit+0x2b4>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	f043 0208 	orr.w	r2, r3, #8
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d105      	bne.n	8006f34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699a      	ldr	r2, [r3, #24]
 8006f2c:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <USB_DevInit+0x2b8>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f40:	b004      	add	sp, #16
 8006f42:	4770      	bx	lr
 8006f44:	803c3800 	.word	0x803c3800
 8006f48:	40000004 	.word	0x40000004

08006f4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4a13      	ldr	r2, [pc, #76]	; (8006fb0 <USB_FlushTxFifo+0x64>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d901      	bls.n	8006f6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e01b      	b.n	8006fa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	daf2      	bge.n	8006f5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	019b      	lsls	r3, r3, #6
 8006f7c:	f043 0220 	orr.w	r2, r3, #32
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3301      	adds	r3, #1
 8006f88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4a08      	ldr	r2, [pc, #32]	; (8006fb0 <USB_FlushTxFifo+0x64>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d901      	bls.n	8006f96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e006      	b.n	8006fa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	d0f0      	beq.n	8006f84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	00030d40 	.word	0x00030d40

08006fb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4a11      	ldr	r2, [pc, #68]	; (8007010 <USB_FlushRxFifo+0x5c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d901      	bls.n	8006fd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e018      	b.n	8007004 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	daf2      	bge.n	8006fc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2210      	movs	r2, #16
 8006fe2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4a08      	ldr	r2, [pc, #32]	; (8007010 <USB_FlushRxFifo+0x5c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d901      	bls.n	8006ff6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e006      	b.n	8007004 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f003 0310 	and.w	r3, r3, #16
 8006ffe:	2b10      	cmp	r3, #16
 8007000:	d0f0      	beq.n	8006fe4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	00030d40 	.word	0x00030d40

08007014 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	68f9      	ldr	r1, [r7, #12]
 8007030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007034:	4313      	orrs	r3, r2
 8007036:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007046:	b480      	push	{r7}
 8007048:	b085      	sub	sp, #20
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007060:	f023 0303 	bic.w	r3, r3, #3
 8007064:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007074:	f043 0302 	orr.w	r3, r3, #2
 8007078:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	f003 0301 	and.w	r3, r3, #1
}
 8007098:	4618      	mov	r0, r3
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3301      	adds	r3, #1
 80070b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	4a13      	ldr	r2, [pc, #76]	; (8007108 <USB_CoreReset+0x64>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d901      	bls.n	80070c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e01b      	b.n	80070fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	daf2      	bge.n	80070b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	f043 0201 	orr.w	r2, r3, #1
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3301      	adds	r3, #1
 80070de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4a09      	ldr	r2, [pc, #36]	; (8007108 <USB_CoreReset+0x64>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d901      	bls.n	80070ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e006      	b.n	80070fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d0f0      	beq.n	80070da <USB_CoreReset+0x36>

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	00030d40 	.word	0x00030d40

0800710c <siprintf>:
 800710c:	b40e      	push	{r1, r2, r3}
 800710e:	b500      	push	{lr}
 8007110:	b09c      	sub	sp, #112	; 0x70
 8007112:	ab1d      	add	r3, sp, #116	; 0x74
 8007114:	9002      	str	r0, [sp, #8]
 8007116:	9006      	str	r0, [sp, #24]
 8007118:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800711c:	4809      	ldr	r0, [pc, #36]	; (8007144 <siprintf+0x38>)
 800711e:	9107      	str	r1, [sp, #28]
 8007120:	9104      	str	r1, [sp, #16]
 8007122:	4909      	ldr	r1, [pc, #36]	; (8007148 <siprintf+0x3c>)
 8007124:	f853 2b04 	ldr.w	r2, [r3], #4
 8007128:	9105      	str	r1, [sp, #20]
 800712a:	6800      	ldr	r0, [r0, #0]
 800712c:	9301      	str	r3, [sp, #4]
 800712e:	a902      	add	r1, sp, #8
 8007130:	f000 f9a0 	bl	8007474 <_svfiprintf_r>
 8007134:	9b02      	ldr	r3, [sp, #8]
 8007136:	2200      	movs	r2, #0
 8007138:	701a      	strb	r2, [r3, #0]
 800713a:	b01c      	add	sp, #112	; 0x70
 800713c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007140:	b003      	add	sp, #12
 8007142:	4770      	bx	lr
 8007144:	20000094 	.word	0x20000094
 8007148:	ffff0208 	.word	0xffff0208

0800714c <memset>:
 800714c:	4402      	add	r2, r0
 800714e:	4603      	mov	r3, r0
 8007150:	4293      	cmp	r3, r2
 8007152:	d100      	bne.n	8007156 <memset+0xa>
 8007154:	4770      	bx	lr
 8007156:	f803 1b01 	strb.w	r1, [r3], #1
 800715a:	e7f9      	b.n	8007150 <memset+0x4>

0800715c <__errno>:
 800715c:	4b01      	ldr	r3, [pc, #4]	; (8007164 <__errno+0x8>)
 800715e:	6818      	ldr	r0, [r3, #0]
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20000094 	.word	0x20000094

08007168 <__libc_init_array>:
 8007168:	b570      	push	{r4, r5, r6, lr}
 800716a:	4d0d      	ldr	r5, [pc, #52]	; (80071a0 <__libc_init_array+0x38>)
 800716c:	4c0d      	ldr	r4, [pc, #52]	; (80071a4 <__libc_init_array+0x3c>)
 800716e:	1b64      	subs	r4, r4, r5
 8007170:	10a4      	asrs	r4, r4, #2
 8007172:	2600      	movs	r6, #0
 8007174:	42a6      	cmp	r6, r4
 8007176:	d109      	bne.n	800718c <__libc_init_array+0x24>
 8007178:	4d0b      	ldr	r5, [pc, #44]	; (80071a8 <__libc_init_array+0x40>)
 800717a:	4c0c      	ldr	r4, [pc, #48]	; (80071ac <__libc_init_array+0x44>)
 800717c:	f000 fc6a 	bl	8007a54 <_init>
 8007180:	1b64      	subs	r4, r4, r5
 8007182:	10a4      	asrs	r4, r4, #2
 8007184:	2600      	movs	r6, #0
 8007186:	42a6      	cmp	r6, r4
 8007188:	d105      	bne.n	8007196 <__libc_init_array+0x2e>
 800718a:	bd70      	pop	{r4, r5, r6, pc}
 800718c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007190:	4798      	blx	r3
 8007192:	3601      	adds	r6, #1
 8007194:	e7ee      	b.n	8007174 <__libc_init_array+0xc>
 8007196:	f855 3b04 	ldr.w	r3, [r5], #4
 800719a:	4798      	blx	r3
 800719c:	3601      	adds	r6, #1
 800719e:	e7f2      	b.n	8007186 <__libc_init_array+0x1e>
 80071a0:	08007b48 	.word	0x08007b48
 80071a4:	08007b48 	.word	0x08007b48
 80071a8:	08007b48 	.word	0x08007b48
 80071ac:	08007b4c 	.word	0x08007b4c

080071b0 <__retarget_lock_acquire_recursive>:
 80071b0:	4770      	bx	lr

080071b2 <__retarget_lock_release_recursive>:
 80071b2:	4770      	bx	lr

080071b4 <memcpy>:
 80071b4:	440a      	add	r2, r1
 80071b6:	4291      	cmp	r1, r2
 80071b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80071bc:	d100      	bne.n	80071c0 <memcpy+0xc>
 80071be:	4770      	bx	lr
 80071c0:	b510      	push	{r4, lr}
 80071c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071ca:	4291      	cmp	r1, r2
 80071cc:	d1f9      	bne.n	80071c2 <memcpy+0xe>
 80071ce:	bd10      	pop	{r4, pc}

080071d0 <_free_r>:
 80071d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071d2:	2900      	cmp	r1, #0
 80071d4:	d044      	beq.n	8007260 <_free_r+0x90>
 80071d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071da:	9001      	str	r0, [sp, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f1a1 0404 	sub.w	r4, r1, #4
 80071e2:	bfb8      	it	lt
 80071e4:	18e4      	addlt	r4, r4, r3
 80071e6:	f000 f8df 	bl	80073a8 <__malloc_lock>
 80071ea:	4a1e      	ldr	r2, [pc, #120]	; (8007264 <_free_r+0x94>)
 80071ec:	9801      	ldr	r0, [sp, #4]
 80071ee:	6813      	ldr	r3, [r2, #0]
 80071f0:	b933      	cbnz	r3, 8007200 <_free_r+0x30>
 80071f2:	6063      	str	r3, [r4, #4]
 80071f4:	6014      	str	r4, [r2, #0]
 80071f6:	b003      	add	sp, #12
 80071f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071fc:	f000 b8da 	b.w	80073b4 <__malloc_unlock>
 8007200:	42a3      	cmp	r3, r4
 8007202:	d908      	bls.n	8007216 <_free_r+0x46>
 8007204:	6825      	ldr	r5, [r4, #0]
 8007206:	1961      	adds	r1, r4, r5
 8007208:	428b      	cmp	r3, r1
 800720a:	bf01      	itttt	eq
 800720c:	6819      	ldreq	r1, [r3, #0]
 800720e:	685b      	ldreq	r3, [r3, #4]
 8007210:	1949      	addeq	r1, r1, r5
 8007212:	6021      	streq	r1, [r4, #0]
 8007214:	e7ed      	b.n	80071f2 <_free_r+0x22>
 8007216:	461a      	mov	r2, r3
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	b10b      	cbz	r3, 8007220 <_free_r+0x50>
 800721c:	42a3      	cmp	r3, r4
 800721e:	d9fa      	bls.n	8007216 <_free_r+0x46>
 8007220:	6811      	ldr	r1, [r2, #0]
 8007222:	1855      	adds	r5, r2, r1
 8007224:	42a5      	cmp	r5, r4
 8007226:	d10b      	bne.n	8007240 <_free_r+0x70>
 8007228:	6824      	ldr	r4, [r4, #0]
 800722a:	4421      	add	r1, r4
 800722c:	1854      	adds	r4, r2, r1
 800722e:	42a3      	cmp	r3, r4
 8007230:	6011      	str	r1, [r2, #0]
 8007232:	d1e0      	bne.n	80071f6 <_free_r+0x26>
 8007234:	681c      	ldr	r4, [r3, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	6053      	str	r3, [r2, #4]
 800723a:	440c      	add	r4, r1
 800723c:	6014      	str	r4, [r2, #0]
 800723e:	e7da      	b.n	80071f6 <_free_r+0x26>
 8007240:	d902      	bls.n	8007248 <_free_r+0x78>
 8007242:	230c      	movs	r3, #12
 8007244:	6003      	str	r3, [r0, #0]
 8007246:	e7d6      	b.n	80071f6 <_free_r+0x26>
 8007248:	6825      	ldr	r5, [r4, #0]
 800724a:	1961      	adds	r1, r4, r5
 800724c:	428b      	cmp	r3, r1
 800724e:	bf04      	itt	eq
 8007250:	6819      	ldreq	r1, [r3, #0]
 8007252:	685b      	ldreq	r3, [r3, #4]
 8007254:	6063      	str	r3, [r4, #4]
 8007256:	bf04      	itt	eq
 8007258:	1949      	addeq	r1, r1, r5
 800725a:	6021      	streq	r1, [r4, #0]
 800725c:	6054      	str	r4, [r2, #4]
 800725e:	e7ca      	b.n	80071f6 <_free_r+0x26>
 8007260:	b003      	add	sp, #12
 8007262:	bd30      	pop	{r4, r5, pc}
 8007264:	20003f54 	.word	0x20003f54

08007268 <sbrk_aligned>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	4e0e      	ldr	r6, [pc, #56]	; (80072a4 <sbrk_aligned+0x3c>)
 800726c:	460c      	mov	r4, r1
 800726e:	6831      	ldr	r1, [r6, #0]
 8007270:	4605      	mov	r5, r0
 8007272:	b911      	cbnz	r1, 800727a <sbrk_aligned+0x12>
 8007274:	f000 fba6 	bl	80079c4 <_sbrk_r>
 8007278:	6030      	str	r0, [r6, #0]
 800727a:	4621      	mov	r1, r4
 800727c:	4628      	mov	r0, r5
 800727e:	f000 fba1 	bl	80079c4 <_sbrk_r>
 8007282:	1c43      	adds	r3, r0, #1
 8007284:	d00a      	beq.n	800729c <sbrk_aligned+0x34>
 8007286:	1cc4      	adds	r4, r0, #3
 8007288:	f024 0403 	bic.w	r4, r4, #3
 800728c:	42a0      	cmp	r0, r4
 800728e:	d007      	beq.n	80072a0 <sbrk_aligned+0x38>
 8007290:	1a21      	subs	r1, r4, r0
 8007292:	4628      	mov	r0, r5
 8007294:	f000 fb96 	bl	80079c4 <_sbrk_r>
 8007298:	3001      	adds	r0, #1
 800729a:	d101      	bne.n	80072a0 <sbrk_aligned+0x38>
 800729c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80072a0:	4620      	mov	r0, r4
 80072a2:	bd70      	pop	{r4, r5, r6, pc}
 80072a4:	20003f58 	.word	0x20003f58

080072a8 <_malloc_r>:
 80072a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ac:	1ccd      	adds	r5, r1, #3
 80072ae:	f025 0503 	bic.w	r5, r5, #3
 80072b2:	3508      	adds	r5, #8
 80072b4:	2d0c      	cmp	r5, #12
 80072b6:	bf38      	it	cc
 80072b8:	250c      	movcc	r5, #12
 80072ba:	2d00      	cmp	r5, #0
 80072bc:	4607      	mov	r7, r0
 80072be:	db01      	blt.n	80072c4 <_malloc_r+0x1c>
 80072c0:	42a9      	cmp	r1, r5
 80072c2:	d905      	bls.n	80072d0 <_malloc_r+0x28>
 80072c4:	230c      	movs	r3, #12
 80072c6:	603b      	str	r3, [r7, #0]
 80072c8:	2600      	movs	r6, #0
 80072ca:	4630      	mov	r0, r6
 80072cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073a4 <_malloc_r+0xfc>
 80072d4:	f000 f868 	bl	80073a8 <__malloc_lock>
 80072d8:	f8d8 3000 	ldr.w	r3, [r8]
 80072dc:	461c      	mov	r4, r3
 80072de:	bb5c      	cbnz	r4, 8007338 <_malloc_r+0x90>
 80072e0:	4629      	mov	r1, r5
 80072e2:	4638      	mov	r0, r7
 80072e4:	f7ff ffc0 	bl	8007268 <sbrk_aligned>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	4604      	mov	r4, r0
 80072ec:	d155      	bne.n	800739a <_malloc_r+0xf2>
 80072ee:	f8d8 4000 	ldr.w	r4, [r8]
 80072f2:	4626      	mov	r6, r4
 80072f4:	2e00      	cmp	r6, #0
 80072f6:	d145      	bne.n	8007384 <_malloc_r+0xdc>
 80072f8:	2c00      	cmp	r4, #0
 80072fa:	d048      	beq.n	800738e <_malloc_r+0xe6>
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	4631      	mov	r1, r6
 8007300:	4638      	mov	r0, r7
 8007302:	eb04 0903 	add.w	r9, r4, r3
 8007306:	f000 fb5d 	bl	80079c4 <_sbrk_r>
 800730a:	4581      	cmp	r9, r0
 800730c:	d13f      	bne.n	800738e <_malloc_r+0xe6>
 800730e:	6821      	ldr	r1, [r4, #0]
 8007310:	1a6d      	subs	r5, r5, r1
 8007312:	4629      	mov	r1, r5
 8007314:	4638      	mov	r0, r7
 8007316:	f7ff ffa7 	bl	8007268 <sbrk_aligned>
 800731a:	3001      	adds	r0, #1
 800731c:	d037      	beq.n	800738e <_malloc_r+0xe6>
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	442b      	add	r3, r5
 8007322:	6023      	str	r3, [r4, #0]
 8007324:	f8d8 3000 	ldr.w	r3, [r8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d038      	beq.n	800739e <_malloc_r+0xf6>
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	42a2      	cmp	r2, r4
 8007330:	d12b      	bne.n	800738a <_malloc_r+0xe2>
 8007332:	2200      	movs	r2, #0
 8007334:	605a      	str	r2, [r3, #4]
 8007336:	e00f      	b.n	8007358 <_malloc_r+0xb0>
 8007338:	6822      	ldr	r2, [r4, #0]
 800733a:	1b52      	subs	r2, r2, r5
 800733c:	d41f      	bmi.n	800737e <_malloc_r+0xd6>
 800733e:	2a0b      	cmp	r2, #11
 8007340:	d917      	bls.n	8007372 <_malloc_r+0xca>
 8007342:	1961      	adds	r1, r4, r5
 8007344:	42a3      	cmp	r3, r4
 8007346:	6025      	str	r5, [r4, #0]
 8007348:	bf18      	it	ne
 800734a:	6059      	strne	r1, [r3, #4]
 800734c:	6863      	ldr	r3, [r4, #4]
 800734e:	bf08      	it	eq
 8007350:	f8c8 1000 	streq.w	r1, [r8]
 8007354:	5162      	str	r2, [r4, r5]
 8007356:	604b      	str	r3, [r1, #4]
 8007358:	4638      	mov	r0, r7
 800735a:	f104 060b 	add.w	r6, r4, #11
 800735e:	f000 f829 	bl	80073b4 <__malloc_unlock>
 8007362:	f026 0607 	bic.w	r6, r6, #7
 8007366:	1d23      	adds	r3, r4, #4
 8007368:	1af2      	subs	r2, r6, r3
 800736a:	d0ae      	beq.n	80072ca <_malloc_r+0x22>
 800736c:	1b9b      	subs	r3, r3, r6
 800736e:	50a3      	str	r3, [r4, r2]
 8007370:	e7ab      	b.n	80072ca <_malloc_r+0x22>
 8007372:	42a3      	cmp	r3, r4
 8007374:	6862      	ldr	r2, [r4, #4]
 8007376:	d1dd      	bne.n	8007334 <_malloc_r+0x8c>
 8007378:	f8c8 2000 	str.w	r2, [r8]
 800737c:	e7ec      	b.n	8007358 <_malloc_r+0xb0>
 800737e:	4623      	mov	r3, r4
 8007380:	6864      	ldr	r4, [r4, #4]
 8007382:	e7ac      	b.n	80072de <_malloc_r+0x36>
 8007384:	4634      	mov	r4, r6
 8007386:	6876      	ldr	r6, [r6, #4]
 8007388:	e7b4      	b.n	80072f4 <_malloc_r+0x4c>
 800738a:	4613      	mov	r3, r2
 800738c:	e7cc      	b.n	8007328 <_malloc_r+0x80>
 800738e:	230c      	movs	r3, #12
 8007390:	603b      	str	r3, [r7, #0]
 8007392:	4638      	mov	r0, r7
 8007394:	f000 f80e 	bl	80073b4 <__malloc_unlock>
 8007398:	e797      	b.n	80072ca <_malloc_r+0x22>
 800739a:	6025      	str	r5, [r4, #0]
 800739c:	e7dc      	b.n	8007358 <_malloc_r+0xb0>
 800739e:	605b      	str	r3, [r3, #4]
 80073a0:	deff      	udf	#255	; 0xff
 80073a2:	bf00      	nop
 80073a4:	20003f54 	.word	0x20003f54

080073a8 <__malloc_lock>:
 80073a8:	4801      	ldr	r0, [pc, #4]	; (80073b0 <__malloc_lock+0x8>)
 80073aa:	f7ff bf01 	b.w	80071b0 <__retarget_lock_acquire_recursive>
 80073ae:	bf00      	nop
 80073b0:	20003f50 	.word	0x20003f50

080073b4 <__malloc_unlock>:
 80073b4:	4801      	ldr	r0, [pc, #4]	; (80073bc <__malloc_unlock+0x8>)
 80073b6:	f7ff befc 	b.w	80071b2 <__retarget_lock_release_recursive>
 80073ba:	bf00      	nop
 80073bc:	20003f50 	.word	0x20003f50

080073c0 <__ssputs_r>:
 80073c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c4:	688e      	ldr	r6, [r1, #8]
 80073c6:	461f      	mov	r7, r3
 80073c8:	42be      	cmp	r6, r7
 80073ca:	680b      	ldr	r3, [r1, #0]
 80073cc:	4682      	mov	sl, r0
 80073ce:	460c      	mov	r4, r1
 80073d0:	4690      	mov	r8, r2
 80073d2:	d82c      	bhi.n	800742e <__ssputs_r+0x6e>
 80073d4:	898a      	ldrh	r2, [r1, #12]
 80073d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073da:	d026      	beq.n	800742a <__ssputs_r+0x6a>
 80073dc:	6965      	ldr	r5, [r4, #20]
 80073de:	6909      	ldr	r1, [r1, #16]
 80073e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073e4:	eba3 0901 	sub.w	r9, r3, r1
 80073e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073ec:	1c7b      	adds	r3, r7, #1
 80073ee:	444b      	add	r3, r9
 80073f0:	106d      	asrs	r5, r5, #1
 80073f2:	429d      	cmp	r5, r3
 80073f4:	bf38      	it	cc
 80073f6:	461d      	movcc	r5, r3
 80073f8:	0553      	lsls	r3, r2, #21
 80073fa:	d527      	bpl.n	800744c <__ssputs_r+0x8c>
 80073fc:	4629      	mov	r1, r5
 80073fe:	f7ff ff53 	bl	80072a8 <_malloc_r>
 8007402:	4606      	mov	r6, r0
 8007404:	b360      	cbz	r0, 8007460 <__ssputs_r+0xa0>
 8007406:	6921      	ldr	r1, [r4, #16]
 8007408:	464a      	mov	r2, r9
 800740a:	f7ff fed3 	bl	80071b4 <memcpy>
 800740e:	89a3      	ldrh	r3, [r4, #12]
 8007410:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007418:	81a3      	strh	r3, [r4, #12]
 800741a:	6126      	str	r6, [r4, #16]
 800741c:	6165      	str	r5, [r4, #20]
 800741e:	444e      	add	r6, r9
 8007420:	eba5 0509 	sub.w	r5, r5, r9
 8007424:	6026      	str	r6, [r4, #0]
 8007426:	60a5      	str	r5, [r4, #8]
 8007428:	463e      	mov	r6, r7
 800742a:	42be      	cmp	r6, r7
 800742c:	d900      	bls.n	8007430 <__ssputs_r+0x70>
 800742e:	463e      	mov	r6, r7
 8007430:	6820      	ldr	r0, [r4, #0]
 8007432:	4632      	mov	r2, r6
 8007434:	4641      	mov	r1, r8
 8007436:	f000 faab 	bl	8007990 <memmove>
 800743a:	68a3      	ldr	r3, [r4, #8]
 800743c:	1b9b      	subs	r3, r3, r6
 800743e:	60a3      	str	r3, [r4, #8]
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	4433      	add	r3, r6
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	2000      	movs	r0, #0
 8007448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744c:	462a      	mov	r2, r5
 800744e:	f000 fac9 	bl	80079e4 <_realloc_r>
 8007452:	4606      	mov	r6, r0
 8007454:	2800      	cmp	r0, #0
 8007456:	d1e0      	bne.n	800741a <__ssputs_r+0x5a>
 8007458:	6921      	ldr	r1, [r4, #16]
 800745a:	4650      	mov	r0, sl
 800745c:	f7ff feb8 	bl	80071d0 <_free_r>
 8007460:	230c      	movs	r3, #12
 8007462:	f8ca 3000 	str.w	r3, [sl]
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800746c:	81a3      	strh	r3, [r4, #12]
 800746e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007472:	e7e9      	b.n	8007448 <__ssputs_r+0x88>

08007474 <_svfiprintf_r>:
 8007474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007478:	4698      	mov	r8, r3
 800747a:	898b      	ldrh	r3, [r1, #12]
 800747c:	061b      	lsls	r3, r3, #24
 800747e:	b09d      	sub	sp, #116	; 0x74
 8007480:	4607      	mov	r7, r0
 8007482:	460d      	mov	r5, r1
 8007484:	4614      	mov	r4, r2
 8007486:	d50e      	bpl.n	80074a6 <_svfiprintf_r+0x32>
 8007488:	690b      	ldr	r3, [r1, #16]
 800748a:	b963      	cbnz	r3, 80074a6 <_svfiprintf_r+0x32>
 800748c:	2140      	movs	r1, #64	; 0x40
 800748e:	f7ff ff0b 	bl	80072a8 <_malloc_r>
 8007492:	6028      	str	r0, [r5, #0]
 8007494:	6128      	str	r0, [r5, #16]
 8007496:	b920      	cbnz	r0, 80074a2 <_svfiprintf_r+0x2e>
 8007498:	230c      	movs	r3, #12
 800749a:	603b      	str	r3, [r7, #0]
 800749c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074a0:	e0d0      	b.n	8007644 <_svfiprintf_r+0x1d0>
 80074a2:	2340      	movs	r3, #64	; 0x40
 80074a4:	616b      	str	r3, [r5, #20]
 80074a6:	2300      	movs	r3, #0
 80074a8:	9309      	str	r3, [sp, #36]	; 0x24
 80074aa:	2320      	movs	r3, #32
 80074ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80074b4:	2330      	movs	r3, #48	; 0x30
 80074b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800765c <_svfiprintf_r+0x1e8>
 80074ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074be:	f04f 0901 	mov.w	r9, #1
 80074c2:	4623      	mov	r3, r4
 80074c4:	469a      	mov	sl, r3
 80074c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074ca:	b10a      	cbz	r2, 80074d0 <_svfiprintf_r+0x5c>
 80074cc:	2a25      	cmp	r2, #37	; 0x25
 80074ce:	d1f9      	bne.n	80074c4 <_svfiprintf_r+0x50>
 80074d0:	ebba 0b04 	subs.w	fp, sl, r4
 80074d4:	d00b      	beq.n	80074ee <_svfiprintf_r+0x7a>
 80074d6:	465b      	mov	r3, fp
 80074d8:	4622      	mov	r2, r4
 80074da:	4629      	mov	r1, r5
 80074dc:	4638      	mov	r0, r7
 80074de:	f7ff ff6f 	bl	80073c0 <__ssputs_r>
 80074e2:	3001      	adds	r0, #1
 80074e4:	f000 80a9 	beq.w	800763a <_svfiprintf_r+0x1c6>
 80074e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074ea:	445a      	add	r2, fp
 80074ec:	9209      	str	r2, [sp, #36]	; 0x24
 80074ee:	f89a 3000 	ldrb.w	r3, [sl]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 80a1 	beq.w	800763a <_svfiprintf_r+0x1c6>
 80074f8:	2300      	movs	r3, #0
 80074fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007502:	f10a 0a01 	add.w	sl, sl, #1
 8007506:	9304      	str	r3, [sp, #16]
 8007508:	9307      	str	r3, [sp, #28]
 800750a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800750e:	931a      	str	r3, [sp, #104]	; 0x68
 8007510:	4654      	mov	r4, sl
 8007512:	2205      	movs	r2, #5
 8007514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007518:	4850      	ldr	r0, [pc, #320]	; (800765c <_svfiprintf_r+0x1e8>)
 800751a:	f7f8 fe79 	bl	8000210 <memchr>
 800751e:	9a04      	ldr	r2, [sp, #16]
 8007520:	b9d8      	cbnz	r0, 800755a <_svfiprintf_r+0xe6>
 8007522:	06d0      	lsls	r0, r2, #27
 8007524:	bf44      	itt	mi
 8007526:	2320      	movmi	r3, #32
 8007528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800752c:	0711      	lsls	r1, r2, #28
 800752e:	bf44      	itt	mi
 8007530:	232b      	movmi	r3, #43	; 0x2b
 8007532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007536:	f89a 3000 	ldrb.w	r3, [sl]
 800753a:	2b2a      	cmp	r3, #42	; 0x2a
 800753c:	d015      	beq.n	800756a <_svfiprintf_r+0xf6>
 800753e:	9a07      	ldr	r2, [sp, #28]
 8007540:	4654      	mov	r4, sl
 8007542:	2000      	movs	r0, #0
 8007544:	f04f 0c0a 	mov.w	ip, #10
 8007548:	4621      	mov	r1, r4
 800754a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800754e:	3b30      	subs	r3, #48	; 0x30
 8007550:	2b09      	cmp	r3, #9
 8007552:	d94d      	bls.n	80075f0 <_svfiprintf_r+0x17c>
 8007554:	b1b0      	cbz	r0, 8007584 <_svfiprintf_r+0x110>
 8007556:	9207      	str	r2, [sp, #28]
 8007558:	e014      	b.n	8007584 <_svfiprintf_r+0x110>
 800755a:	eba0 0308 	sub.w	r3, r0, r8
 800755e:	fa09 f303 	lsl.w	r3, r9, r3
 8007562:	4313      	orrs	r3, r2
 8007564:	9304      	str	r3, [sp, #16]
 8007566:	46a2      	mov	sl, r4
 8007568:	e7d2      	b.n	8007510 <_svfiprintf_r+0x9c>
 800756a:	9b03      	ldr	r3, [sp, #12]
 800756c:	1d19      	adds	r1, r3, #4
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	9103      	str	r1, [sp, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	bfbb      	ittet	lt
 8007576:	425b      	neglt	r3, r3
 8007578:	f042 0202 	orrlt.w	r2, r2, #2
 800757c:	9307      	strge	r3, [sp, #28]
 800757e:	9307      	strlt	r3, [sp, #28]
 8007580:	bfb8      	it	lt
 8007582:	9204      	strlt	r2, [sp, #16]
 8007584:	7823      	ldrb	r3, [r4, #0]
 8007586:	2b2e      	cmp	r3, #46	; 0x2e
 8007588:	d10c      	bne.n	80075a4 <_svfiprintf_r+0x130>
 800758a:	7863      	ldrb	r3, [r4, #1]
 800758c:	2b2a      	cmp	r3, #42	; 0x2a
 800758e:	d134      	bne.n	80075fa <_svfiprintf_r+0x186>
 8007590:	9b03      	ldr	r3, [sp, #12]
 8007592:	1d1a      	adds	r2, r3, #4
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	9203      	str	r2, [sp, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	bfb8      	it	lt
 800759c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80075a0:	3402      	adds	r4, #2
 80075a2:	9305      	str	r3, [sp, #20]
 80075a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800766c <_svfiprintf_r+0x1f8>
 80075a8:	7821      	ldrb	r1, [r4, #0]
 80075aa:	2203      	movs	r2, #3
 80075ac:	4650      	mov	r0, sl
 80075ae:	f7f8 fe2f 	bl	8000210 <memchr>
 80075b2:	b138      	cbz	r0, 80075c4 <_svfiprintf_r+0x150>
 80075b4:	9b04      	ldr	r3, [sp, #16]
 80075b6:	eba0 000a 	sub.w	r0, r0, sl
 80075ba:	2240      	movs	r2, #64	; 0x40
 80075bc:	4082      	lsls	r2, r0
 80075be:	4313      	orrs	r3, r2
 80075c0:	3401      	adds	r4, #1
 80075c2:	9304      	str	r3, [sp, #16]
 80075c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c8:	4825      	ldr	r0, [pc, #148]	; (8007660 <_svfiprintf_r+0x1ec>)
 80075ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075ce:	2206      	movs	r2, #6
 80075d0:	f7f8 fe1e 	bl	8000210 <memchr>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d038      	beq.n	800764a <_svfiprintf_r+0x1d6>
 80075d8:	4b22      	ldr	r3, [pc, #136]	; (8007664 <_svfiprintf_r+0x1f0>)
 80075da:	bb1b      	cbnz	r3, 8007624 <_svfiprintf_r+0x1b0>
 80075dc:	9b03      	ldr	r3, [sp, #12]
 80075de:	3307      	adds	r3, #7
 80075e0:	f023 0307 	bic.w	r3, r3, #7
 80075e4:	3308      	adds	r3, #8
 80075e6:	9303      	str	r3, [sp, #12]
 80075e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ea:	4433      	add	r3, r6
 80075ec:	9309      	str	r3, [sp, #36]	; 0x24
 80075ee:	e768      	b.n	80074c2 <_svfiprintf_r+0x4e>
 80075f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80075f4:	460c      	mov	r4, r1
 80075f6:	2001      	movs	r0, #1
 80075f8:	e7a6      	b.n	8007548 <_svfiprintf_r+0xd4>
 80075fa:	2300      	movs	r3, #0
 80075fc:	3401      	adds	r4, #1
 80075fe:	9305      	str	r3, [sp, #20]
 8007600:	4619      	mov	r1, r3
 8007602:	f04f 0c0a 	mov.w	ip, #10
 8007606:	4620      	mov	r0, r4
 8007608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800760c:	3a30      	subs	r2, #48	; 0x30
 800760e:	2a09      	cmp	r2, #9
 8007610:	d903      	bls.n	800761a <_svfiprintf_r+0x1a6>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0c6      	beq.n	80075a4 <_svfiprintf_r+0x130>
 8007616:	9105      	str	r1, [sp, #20]
 8007618:	e7c4      	b.n	80075a4 <_svfiprintf_r+0x130>
 800761a:	fb0c 2101 	mla	r1, ip, r1, r2
 800761e:	4604      	mov	r4, r0
 8007620:	2301      	movs	r3, #1
 8007622:	e7f0      	b.n	8007606 <_svfiprintf_r+0x192>
 8007624:	ab03      	add	r3, sp, #12
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	462a      	mov	r2, r5
 800762a:	4b0f      	ldr	r3, [pc, #60]	; (8007668 <_svfiprintf_r+0x1f4>)
 800762c:	a904      	add	r1, sp, #16
 800762e:	4638      	mov	r0, r7
 8007630:	f3af 8000 	nop.w
 8007634:	1c42      	adds	r2, r0, #1
 8007636:	4606      	mov	r6, r0
 8007638:	d1d6      	bne.n	80075e8 <_svfiprintf_r+0x174>
 800763a:	89ab      	ldrh	r3, [r5, #12]
 800763c:	065b      	lsls	r3, r3, #25
 800763e:	f53f af2d 	bmi.w	800749c <_svfiprintf_r+0x28>
 8007642:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007644:	b01d      	add	sp, #116	; 0x74
 8007646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764a:	ab03      	add	r3, sp, #12
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	462a      	mov	r2, r5
 8007650:	4b05      	ldr	r3, [pc, #20]	; (8007668 <_svfiprintf_r+0x1f4>)
 8007652:	a904      	add	r1, sp, #16
 8007654:	4638      	mov	r0, r7
 8007656:	f000 f879 	bl	800774c <_printf_i>
 800765a:	e7eb      	b.n	8007634 <_svfiprintf_r+0x1c0>
 800765c:	08007b0c 	.word	0x08007b0c
 8007660:	08007b16 	.word	0x08007b16
 8007664:	00000000 	.word	0x00000000
 8007668:	080073c1 	.word	0x080073c1
 800766c:	08007b12 	.word	0x08007b12

08007670 <_printf_common>:
 8007670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007674:	4616      	mov	r6, r2
 8007676:	4699      	mov	r9, r3
 8007678:	688a      	ldr	r2, [r1, #8]
 800767a:	690b      	ldr	r3, [r1, #16]
 800767c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007680:	4293      	cmp	r3, r2
 8007682:	bfb8      	it	lt
 8007684:	4613      	movlt	r3, r2
 8007686:	6033      	str	r3, [r6, #0]
 8007688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800768c:	4607      	mov	r7, r0
 800768e:	460c      	mov	r4, r1
 8007690:	b10a      	cbz	r2, 8007696 <_printf_common+0x26>
 8007692:	3301      	adds	r3, #1
 8007694:	6033      	str	r3, [r6, #0]
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	0699      	lsls	r1, r3, #26
 800769a:	bf42      	ittt	mi
 800769c:	6833      	ldrmi	r3, [r6, #0]
 800769e:	3302      	addmi	r3, #2
 80076a0:	6033      	strmi	r3, [r6, #0]
 80076a2:	6825      	ldr	r5, [r4, #0]
 80076a4:	f015 0506 	ands.w	r5, r5, #6
 80076a8:	d106      	bne.n	80076b8 <_printf_common+0x48>
 80076aa:	f104 0a19 	add.w	sl, r4, #25
 80076ae:	68e3      	ldr	r3, [r4, #12]
 80076b0:	6832      	ldr	r2, [r6, #0]
 80076b2:	1a9b      	subs	r3, r3, r2
 80076b4:	42ab      	cmp	r3, r5
 80076b6:	dc26      	bgt.n	8007706 <_printf_common+0x96>
 80076b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076bc:	1e13      	subs	r3, r2, #0
 80076be:	6822      	ldr	r2, [r4, #0]
 80076c0:	bf18      	it	ne
 80076c2:	2301      	movne	r3, #1
 80076c4:	0692      	lsls	r2, r2, #26
 80076c6:	d42b      	bmi.n	8007720 <_printf_common+0xb0>
 80076c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076cc:	4649      	mov	r1, r9
 80076ce:	4638      	mov	r0, r7
 80076d0:	47c0      	blx	r8
 80076d2:	3001      	adds	r0, #1
 80076d4:	d01e      	beq.n	8007714 <_printf_common+0xa4>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	6922      	ldr	r2, [r4, #16]
 80076da:	f003 0306 	and.w	r3, r3, #6
 80076de:	2b04      	cmp	r3, #4
 80076e0:	bf02      	ittt	eq
 80076e2:	68e5      	ldreq	r5, [r4, #12]
 80076e4:	6833      	ldreq	r3, [r6, #0]
 80076e6:	1aed      	subeq	r5, r5, r3
 80076e8:	68a3      	ldr	r3, [r4, #8]
 80076ea:	bf0c      	ite	eq
 80076ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076f0:	2500      	movne	r5, #0
 80076f2:	4293      	cmp	r3, r2
 80076f4:	bfc4      	itt	gt
 80076f6:	1a9b      	subgt	r3, r3, r2
 80076f8:	18ed      	addgt	r5, r5, r3
 80076fa:	2600      	movs	r6, #0
 80076fc:	341a      	adds	r4, #26
 80076fe:	42b5      	cmp	r5, r6
 8007700:	d11a      	bne.n	8007738 <_printf_common+0xc8>
 8007702:	2000      	movs	r0, #0
 8007704:	e008      	b.n	8007718 <_printf_common+0xa8>
 8007706:	2301      	movs	r3, #1
 8007708:	4652      	mov	r2, sl
 800770a:	4649      	mov	r1, r9
 800770c:	4638      	mov	r0, r7
 800770e:	47c0      	blx	r8
 8007710:	3001      	adds	r0, #1
 8007712:	d103      	bne.n	800771c <_printf_common+0xac>
 8007714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800771c:	3501      	adds	r5, #1
 800771e:	e7c6      	b.n	80076ae <_printf_common+0x3e>
 8007720:	18e1      	adds	r1, r4, r3
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	2030      	movs	r0, #48	; 0x30
 8007726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800772a:	4422      	add	r2, r4
 800772c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007734:	3302      	adds	r3, #2
 8007736:	e7c7      	b.n	80076c8 <_printf_common+0x58>
 8007738:	2301      	movs	r3, #1
 800773a:	4622      	mov	r2, r4
 800773c:	4649      	mov	r1, r9
 800773e:	4638      	mov	r0, r7
 8007740:	47c0      	blx	r8
 8007742:	3001      	adds	r0, #1
 8007744:	d0e6      	beq.n	8007714 <_printf_common+0xa4>
 8007746:	3601      	adds	r6, #1
 8007748:	e7d9      	b.n	80076fe <_printf_common+0x8e>
	...

0800774c <_printf_i>:
 800774c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007750:	7e0f      	ldrb	r7, [r1, #24]
 8007752:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007754:	2f78      	cmp	r7, #120	; 0x78
 8007756:	4691      	mov	r9, r2
 8007758:	4680      	mov	r8, r0
 800775a:	460c      	mov	r4, r1
 800775c:	469a      	mov	sl, r3
 800775e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007762:	d807      	bhi.n	8007774 <_printf_i+0x28>
 8007764:	2f62      	cmp	r7, #98	; 0x62
 8007766:	d80a      	bhi.n	800777e <_printf_i+0x32>
 8007768:	2f00      	cmp	r7, #0
 800776a:	f000 80d4 	beq.w	8007916 <_printf_i+0x1ca>
 800776e:	2f58      	cmp	r7, #88	; 0x58
 8007770:	f000 80c0 	beq.w	80078f4 <_printf_i+0x1a8>
 8007774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800777c:	e03a      	b.n	80077f4 <_printf_i+0xa8>
 800777e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007782:	2b15      	cmp	r3, #21
 8007784:	d8f6      	bhi.n	8007774 <_printf_i+0x28>
 8007786:	a101      	add	r1, pc, #4	; (adr r1, 800778c <_printf_i+0x40>)
 8007788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800778c:	080077e5 	.word	0x080077e5
 8007790:	080077f9 	.word	0x080077f9
 8007794:	08007775 	.word	0x08007775
 8007798:	08007775 	.word	0x08007775
 800779c:	08007775 	.word	0x08007775
 80077a0:	08007775 	.word	0x08007775
 80077a4:	080077f9 	.word	0x080077f9
 80077a8:	08007775 	.word	0x08007775
 80077ac:	08007775 	.word	0x08007775
 80077b0:	08007775 	.word	0x08007775
 80077b4:	08007775 	.word	0x08007775
 80077b8:	080078fd 	.word	0x080078fd
 80077bc:	08007825 	.word	0x08007825
 80077c0:	080078b7 	.word	0x080078b7
 80077c4:	08007775 	.word	0x08007775
 80077c8:	08007775 	.word	0x08007775
 80077cc:	0800791f 	.word	0x0800791f
 80077d0:	08007775 	.word	0x08007775
 80077d4:	08007825 	.word	0x08007825
 80077d8:	08007775 	.word	0x08007775
 80077dc:	08007775 	.word	0x08007775
 80077e0:	080078bf 	.word	0x080078bf
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	1d1a      	adds	r2, r3, #4
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	602a      	str	r2, [r5, #0]
 80077ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077f4:	2301      	movs	r3, #1
 80077f6:	e09f      	b.n	8007938 <_printf_i+0x1ec>
 80077f8:	6820      	ldr	r0, [r4, #0]
 80077fa:	682b      	ldr	r3, [r5, #0]
 80077fc:	0607      	lsls	r7, r0, #24
 80077fe:	f103 0104 	add.w	r1, r3, #4
 8007802:	6029      	str	r1, [r5, #0]
 8007804:	d501      	bpl.n	800780a <_printf_i+0xbe>
 8007806:	681e      	ldr	r6, [r3, #0]
 8007808:	e003      	b.n	8007812 <_printf_i+0xc6>
 800780a:	0646      	lsls	r6, r0, #25
 800780c:	d5fb      	bpl.n	8007806 <_printf_i+0xba>
 800780e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007812:	2e00      	cmp	r6, #0
 8007814:	da03      	bge.n	800781e <_printf_i+0xd2>
 8007816:	232d      	movs	r3, #45	; 0x2d
 8007818:	4276      	negs	r6, r6
 800781a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800781e:	485a      	ldr	r0, [pc, #360]	; (8007988 <_printf_i+0x23c>)
 8007820:	230a      	movs	r3, #10
 8007822:	e012      	b.n	800784a <_printf_i+0xfe>
 8007824:	682b      	ldr	r3, [r5, #0]
 8007826:	6820      	ldr	r0, [r4, #0]
 8007828:	1d19      	adds	r1, r3, #4
 800782a:	6029      	str	r1, [r5, #0]
 800782c:	0605      	lsls	r5, r0, #24
 800782e:	d501      	bpl.n	8007834 <_printf_i+0xe8>
 8007830:	681e      	ldr	r6, [r3, #0]
 8007832:	e002      	b.n	800783a <_printf_i+0xee>
 8007834:	0641      	lsls	r1, r0, #25
 8007836:	d5fb      	bpl.n	8007830 <_printf_i+0xe4>
 8007838:	881e      	ldrh	r6, [r3, #0]
 800783a:	4853      	ldr	r0, [pc, #332]	; (8007988 <_printf_i+0x23c>)
 800783c:	2f6f      	cmp	r7, #111	; 0x6f
 800783e:	bf0c      	ite	eq
 8007840:	2308      	moveq	r3, #8
 8007842:	230a      	movne	r3, #10
 8007844:	2100      	movs	r1, #0
 8007846:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800784a:	6865      	ldr	r5, [r4, #4]
 800784c:	60a5      	str	r5, [r4, #8]
 800784e:	2d00      	cmp	r5, #0
 8007850:	bfa2      	ittt	ge
 8007852:	6821      	ldrge	r1, [r4, #0]
 8007854:	f021 0104 	bicge.w	r1, r1, #4
 8007858:	6021      	strge	r1, [r4, #0]
 800785a:	b90e      	cbnz	r6, 8007860 <_printf_i+0x114>
 800785c:	2d00      	cmp	r5, #0
 800785e:	d04b      	beq.n	80078f8 <_printf_i+0x1ac>
 8007860:	4615      	mov	r5, r2
 8007862:	fbb6 f1f3 	udiv	r1, r6, r3
 8007866:	fb03 6711 	mls	r7, r3, r1, r6
 800786a:	5dc7      	ldrb	r7, [r0, r7]
 800786c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007870:	4637      	mov	r7, r6
 8007872:	42bb      	cmp	r3, r7
 8007874:	460e      	mov	r6, r1
 8007876:	d9f4      	bls.n	8007862 <_printf_i+0x116>
 8007878:	2b08      	cmp	r3, #8
 800787a:	d10b      	bne.n	8007894 <_printf_i+0x148>
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	07de      	lsls	r6, r3, #31
 8007880:	d508      	bpl.n	8007894 <_printf_i+0x148>
 8007882:	6923      	ldr	r3, [r4, #16]
 8007884:	6861      	ldr	r1, [r4, #4]
 8007886:	4299      	cmp	r1, r3
 8007888:	bfde      	ittt	le
 800788a:	2330      	movle	r3, #48	; 0x30
 800788c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007890:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007894:	1b52      	subs	r2, r2, r5
 8007896:	6122      	str	r2, [r4, #16]
 8007898:	f8cd a000 	str.w	sl, [sp]
 800789c:	464b      	mov	r3, r9
 800789e:	aa03      	add	r2, sp, #12
 80078a0:	4621      	mov	r1, r4
 80078a2:	4640      	mov	r0, r8
 80078a4:	f7ff fee4 	bl	8007670 <_printf_common>
 80078a8:	3001      	adds	r0, #1
 80078aa:	d14a      	bne.n	8007942 <_printf_i+0x1f6>
 80078ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078b0:	b004      	add	sp, #16
 80078b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	f043 0320 	orr.w	r3, r3, #32
 80078bc:	6023      	str	r3, [r4, #0]
 80078be:	4833      	ldr	r0, [pc, #204]	; (800798c <_printf_i+0x240>)
 80078c0:	2778      	movs	r7, #120	; 0x78
 80078c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	6829      	ldr	r1, [r5, #0]
 80078ca:	061f      	lsls	r7, r3, #24
 80078cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80078d0:	d402      	bmi.n	80078d8 <_printf_i+0x18c>
 80078d2:	065f      	lsls	r7, r3, #25
 80078d4:	bf48      	it	mi
 80078d6:	b2b6      	uxthmi	r6, r6
 80078d8:	07df      	lsls	r7, r3, #31
 80078da:	bf48      	it	mi
 80078dc:	f043 0320 	orrmi.w	r3, r3, #32
 80078e0:	6029      	str	r1, [r5, #0]
 80078e2:	bf48      	it	mi
 80078e4:	6023      	strmi	r3, [r4, #0]
 80078e6:	b91e      	cbnz	r6, 80078f0 <_printf_i+0x1a4>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	f023 0320 	bic.w	r3, r3, #32
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	2310      	movs	r3, #16
 80078f2:	e7a7      	b.n	8007844 <_printf_i+0xf8>
 80078f4:	4824      	ldr	r0, [pc, #144]	; (8007988 <_printf_i+0x23c>)
 80078f6:	e7e4      	b.n	80078c2 <_printf_i+0x176>
 80078f8:	4615      	mov	r5, r2
 80078fa:	e7bd      	b.n	8007878 <_printf_i+0x12c>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	6826      	ldr	r6, [r4, #0]
 8007900:	6961      	ldr	r1, [r4, #20]
 8007902:	1d18      	adds	r0, r3, #4
 8007904:	6028      	str	r0, [r5, #0]
 8007906:	0635      	lsls	r5, r6, #24
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	d501      	bpl.n	8007910 <_printf_i+0x1c4>
 800790c:	6019      	str	r1, [r3, #0]
 800790e:	e002      	b.n	8007916 <_printf_i+0x1ca>
 8007910:	0670      	lsls	r0, r6, #25
 8007912:	d5fb      	bpl.n	800790c <_printf_i+0x1c0>
 8007914:	8019      	strh	r1, [r3, #0]
 8007916:	2300      	movs	r3, #0
 8007918:	6123      	str	r3, [r4, #16]
 800791a:	4615      	mov	r5, r2
 800791c:	e7bc      	b.n	8007898 <_printf_i+0x14c>
 800791e:	682b      	ldr	r3, [r5, #0]
 8007920:	1d1a      	adds	r2, r3, #4
 8007922:	602a      	str	r2, [r5, #0]
 8007924:	681d      	ldr	r5, [r3, #0]
 8007926:	6862      	ldr	r2, [r4, #4]
 8007928:	2100      	movs	r1, #0
 800792a:	4628      	mov	r0, r5
 800792c:	f7f8 fc70 	bl	8000210 <memchr>
 8007930:	b108      	cbz	r0, 8007936 <_printf_i+0x1ea>
 8007932:	1b40      	subs	r0, r0, r5
 8007934:	6060      	str	r0, [r4, #4]
 8007936:	6863      	ldr	r3, [r4, #4]
 8007938:	6123      	str	r3, [r4, #16]
 800793a:	2300      	movs	r3, #0
 800793c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007940:	e7aa      	b.n	8007898 <_printf_i+0x14c>
 8007942:	6923      	ldr	r3, [r4, #16]
 8007944:	462a      	mov	r2, r5
 8007946:	4649      	mov	r1, r9
 8007948:	4640      	mov	r0, r8
 800794a:	47d0      	blx	sl
 800794c:	3001      	adds	r0, #1
 800794e:	d0ad      	beq.n	80078ac <_printf_i+0x160>
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	079b      	lsls	r3, r3, #30
 8007954:	d413      	bmi.n	800797e <_printf_i+0x232>
 8007956:	68e0      	ldr	r0, [r4, #12]
 8007958:	9b03      	ldr	r3, [sp, #12]
 800795a:	4298      	cmp	r0, r3
 800795c:	bfb8      	it	lt
 800795e:	4618      	movlt	r0, r3
 8007960:	e7a6      	b.n	80078b0 <_printf_i+0x164>
 8007962:	2301      	movs	r3, #1
 8007964:	4632      	mov	r2, r6
 8007966:	4649      	mov	r1, r9
 8007968:	4640      	mov	r0, r8
 800796a:	47d0      	blx	sl
 800796c:	3001      	adds	r0, #1
 800796e:	d09d      	beq.n	80078ac <_printf_i+0x160>
 8007970:	3501      	adds	r5, #1
 8007972:	68e3      	ldr	r3, [r4, #12]
 8007974:	9903      	ldr	r1, [sp, #12]
 8007976:	1a5b      	subs	r3, r3, r1
 8007978:	42ab      	cmp	r3, r5
 800797a:	dcf2      	bgt.n	8007962 <_printf_i+0x216>
 800797c:	e7eb      	b.n	8007956 <_printf_i+0x20a>
 800797e:	2500      	movs	r5, #0
 8007980:	f104 0619 	add.w	r6, r4, #25
 8007984:	e7f5      	b.n	8007972 <_printf_i+0x226>
 8007986:	bf00      	nop
 8007988:	08007b1d 	.word	0x08007b1d
 800798c:	08007b2e 	.word	0x08007b2e

08007990 <memmove>:
 8007990:	4288      	cmp	r0, r1
 8007992:	b510      	push	{r4, lr}
 8007994:	eb01 0402 	add.w	r4, r1, r2
 8007998:	d902      	bls.n	80079a0 <memmove+0x10>
 800799a:	4284      	cmp	r4, r0
 800799c:	4623      	mov	r3, r4
 800799e:	d807      	bhi.n	80079b0 <memmove+0x20>
 80079a0:	1e43      	subs	r3, r0, #1
 80079a2:	42a1      	cmp	r1, r4
 80079a4:	d008      	beq.n	80079b8 <memmove+0x28>
 80079a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079ae:	e7f8      	b.n	80079a2 <memmove+0x12>
 80079b0:	4402      	add	r2, r0
 80079b2:	4601      	mov	r1, r0
 80079b4:	428a      	cmp	r2, r1
 80079b6:	d100      	bne.n	80079ba <memmove+0x2a>
 80079b8:	bd10      	pop	{r4, pc}
 80079ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079c2:	e7f7      	b.n	80079b4 <memmove+0x24>

080079c4 <_sbrk_r>:
 80079c4:	b538      	push	{r3, r4, r5, lr}
 80079c6:	4d06      	ldr	r5, [pc, #24]	; (80079e0 <_sbrk_r+0x1c>)
 80079c8:	2300      	movs	r3, #0
 80079ca:	4604      	mov	r4, r0
 80079cc:	4608      	mov	r0, r1
 80079ce:	602b      	str	r3, [r5, #0]
 80079d0:	f7fc fafc 	bl	8003fcc <_sbrk>
 80079d4:	1c43      	adds	r3, r0, #1
 80079d6:	d102      	bne.n	80079de <_sbrk_r+0x1a>
 80079d8:	682b      	ldr	r3, [r5, #0]
 80079da:	b103      	cbz	r3, 80079de <_sbrk_r+0x1a>
 80079dc:	6023      	str	r3, [r4, #0]
 80079de:	bd38      	pop	{r3, r4, r5, pc}
 80079e0:	20003f4c 	.word	0x20003f4c

080079e4 <_realloc_r>:
 80079e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e8:	4680      	mov	r8, r0
 80079ea:	4614      	mov	r4, r2
 80079ec:	460e      	mov	r6, r1
 80079ee:	b921      	cbnz	r1, 80079fa <_realloc_r+0x16>
 80079f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079f4:	4611      	mov	r1, r2
 80079f6:	f7ff bc57 	b.w	80072a8 <_malloc_r>
 80079fa:	b92a      	cbnz	r2, 8007a08 <_realloc_r+0x24>
 80079fc:	f7ff fbe8 	bl	80071d0 <_free_r>
 8007a00:	4625      	mov	r5, r4
 8007a02:	4628      	mov	r0, r5
 8007a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a08:	f000 f81b 	bl	8007a42 <_malloc_usable_size_r>
 8007a0c:	4284      	cmp	r4, r0
 8007a0e:	4607      	mov	r7, r0
 8007a10:	d802      	bhi.n	8007a18 <_realloc_r+0x34>
 8007a12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a16:	d812      	bhi.n	8007a3e <_realloc_r+0x5a>
 8007a18:	4621      	mov	r1, r4
 8007a1a:	4640      	mov	r0, r8
 8007a1c:	f7ff fc44 	bl	80072a8 <_malloc_r>
 8007a20:	4605      	mov	r5, r0
 8007a22:	2800      	cmp	r0, #0
 8007a24:	d0ed      	beq.n	8007a02 <_realloc_r+0x1e>
 8007a26:	42bc      	cmp	r4, r7
 8007a28:	4622      	mov	r2, r4
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	bf28      	it	cs
 8007a2e:	463a      	movcs	r2, r7
 8007a30:	f7ff fbc0 	bl	80071b4 <memcpy>
 8007a34:	4631      	mov	r1, r6
 8007a36:	4640      	mov	r0, r8
 8007a38:	f7ff fbca 	bl	80071d0 <_free_r>
 8007a3c:	e7e1      	b.n	8007a02 <_realloc_r+0x1e>
 8007a3e:	4635      	mov	r5, r6
 8007a40:	e7df      	b.n	8007a02 <_realloc_r+0x1e>

08007a42 <_malloc_usable_size_r>:
 8007a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a46:	1f18      	subs	r0, r3, #4
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	bfbc      	itt	lt
 8007a4c:	580b      	ldrlt	r3, [r1, r0]
 8007a4e:	18c0      	addlt	r0, r0, r3
 8007a50:	4770      	bx	lr
	...

08007a54 <_init>:
 8007a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a56:	bf00      	nop
 8007a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5a:	bc08      	pop	{r3}
 8007a5c:	469e      	mov	lr, r3
 8007a5e:	4770      	bx	lr

08007a60 <_fini>:
 8007a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a62:	bf00      	nop
 8007a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a66:	bc08      	pop	{r3}
 8007a68:	469e      	mov	lr, r3
 8007a6a:	4770      	bx	lr
