
OCB3-TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f3c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800710c  0800710c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071c0  080071c0  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  080071c0  080071c0  000081c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071c8  080071c8  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071c8  080071c8  000081c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071cc  080071cc  000081cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080071d0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  08007268  00009098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  08007308  00009138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00003d74  200001d8  080073a8  000091d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20003f4c  080073a8  00009f4c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012a20  00000000  00000000  00009208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002893  00000000  00000000  0001bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e48  00000000  00000000  0001e4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000afc  00000000  00000000  0001f308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027cf5  00000000  00000000  0001fe04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012176  00000000  00000000  00047af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f1b29  00000000  00000000  00059c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014b798  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004028  00000000  00000000  0014b7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000089  00000000  00000000  0014f804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080070f4 	.word	0x080070f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	080070f4 	.word	0x080070f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <OCB3_INIT>:
void mult_by_2(uint32_t *block);
void array_copy(uint8_t *A, uint8_t *B, uint32_t size);
void divide_plaintext(unsigned char* plaintext, unsigned char* ptext0,  unsigned char* ptext1,unsigned int plaintext_size);
void union_ciphertext(unsigned char* ciphertext, unsigned char* ctext0,  unsigned char* ctext1,unsigned int plaintext_size);
void PMAC_OCB3( unsigned char* nonce, unsigned char* asociated_data, unsigned int asociated_data_size,unsigned int nonce_size,unsigned char* key, unsigned char* tag);
void OCB3_INIT(unsigned char* key){
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b0eb      	sub	sp, #428	@ 0x1ac
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80005aa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80005ae:	6018      	str	r0, [r3, #0]

	uint8_t L_asterisk[16]={0,0,0,0 ,0,0,0,0, 0,0,0,0, 0,0,0,0};
 80005b0:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <OCB3_INIT+0xe8>)
 80005b2:	f507 74c6 	add.w	r4, r7, #396	@ 0x18c
 80005b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t L_0[16]={0,0,0,0 ,0,0,0,0, 0,0,0,0, 0,0,0,0};
 80005bc:	4b32      	ldr	r3, [pc, #200]	@ (8000688 <OCB3_INIT+0xe8>)
 80005be:	f507 74be 	add.w	r4, r7, #380	@ 0x17c
 80005c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t L_dollar[16]={0,0,0,0 ,0,0,0,0, 0,0,0,0, 0,0,0,0};
 80005c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000688 <OCB3_INIT+0xe8>)
 80005ca:	f507 74b6 	add.w	r4, r7, #364	@ 0x16c
 80005ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t rkeys_ffs[88];

	aes128_keyschedule_ffs(rkeys_ffs, key, key);
 80005d4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80005d8:	f5a3 72ce 	sub.w	r2, r3, #412	@ 0x19c
 80005dc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80005e0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80005e4:	f107 000c 	add.w	r0, r7, #12
 80005e8:	6812      	ldr	r2, [r2, #0]
 80005ea:	6819      	ldr	r1, [r3, #0]
 80005ec:	f002 f87e 	bl	80026ec <aes128_keyschedule_ffs>

	aes128_encrypt_ffs(L_0, L_asterisk, L_0, L_0, rkeys_ffs);
 80005f0:	f507 74be 	add.w	r4, r7, #380	@ 0x17c
 80005f4:	f507 72be 	add.w	r2, r7, #380	@ 0x17c
 80005f8:	f507 71c6 	add.w	r1, r7, #396	@ 0x18c
 80005fc:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	4623      	mov	r3, r4
 8000608:	f001 fdf1 	bl	80021ee <aes128_encrypt_ffs>

	array_copy(L_asterisk, L[0], 16);
 800060c:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8000610:	2210      	movs	r2, #16
 8000612:	491e      	ldr	r1, [pc, #120]	@ (800068c <OCB3_INIT+0xec>)
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f83b 	bl	8000690 <array_copy>

	mult_by_2((uint32_t *)L[0]);
 800061a:	481c      	ldr	r0, [pc, #112]	@ (800068c <OCB3_INIT+0xec>)
 800061c:	f000 f857 	bl	80006ce <mult_by_2>

	array_copy(L[0], L_dollar, 16);
 8000620:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8000624:	2210      	movs	r2, #16
 8000626:	4619      	mov	r1, r3
 8000628:	4818      	ldr	r0, [pc, #96]	@ (800068c <OCB3_INIT+0xec>)
 800062a:	f000 f831 	bl	8000690 <array_copy>

	mult_by_2((uint32_t *)L[0]);
 800062e:	4817      	ldr	r0, [pc, #92]	@ (800068c <OCB3_INIT+0xec>)
 8000630:	f000 f84d 	bl	80006ce <mult_by_2>
	for (int i = 1; i < L_size; i=i+1) {
 8000634:	2301      	movs	r3, #1
 8000636:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800063a:	e01b      	b.n	8000674 <OCB3_INIT+0xd4>
		array_copy(L[i-1], L[i], 16);
 800063c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8000640:	3b01      	subs	r3, #1
 8000642:	011b      	lsls	r3, r3, #4
 8000644:	4a11      	ldr	r2, [pc, #68]	@ (800068c <OCB3_INIT+0xec>)
 8000646:	1898      	adds	r0, r3, r2
 8000648:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800064c:	011b      	lsls	r3, r3, #4
 800064e:	4a0f      	ldr	r2, [pc, #60]	@ (800068c <OCB3_INIT+0xec>)
 8000650:	4413      	add	r3, r2
 8000652:	2210      	movs	r2, #16
 8000654:	4619      	mov	r1, r3
 8000656:	f000 f81b 	bl	8000690 <array_copy>
		mult_by_2((uint32_t *)L[i]);
 800065a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800065e:	011b      	lsls	r3, r3, #4
 8000660:	4a0a      	ldr	r2, [pc, #40]	@ (800068c <OCB3_INIT+0xec>)
 8000662:	4413      	add	r3, r2
 8000664:	4618      	mov	r0, r3
 8000666:	f000 f832 	bl	80006ce <mult_by_2>
	for (int i = 1; i < L_size; i=i+1) {
 800066a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800066e:	3301      	adds	r3, #1
 8000670:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000674:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8000678:	2b0f      	cmp	r3, #15
 800067a:	dddf      	ble.n	800063c <OCB3_INIT+0x9c>
	}
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8000684:	46bd      	mov	sp, r7
 8000686:	bd90      	pop	{r4, r7, pc}
 8000688:	0800710c 	.word	0x0800710c
 800068c:	200001f4 	.word	0x200001f4

08000690 <array_copy>:

void array_copy(uint8_t *A, uint8_t *B, uint32_t size){
 8000690:	b480      	push	{r7}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < size; ++i) {
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	e00a      	b.n	80006b8 <array_copy+0x28>
		B[i]=A[i];
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	441a      	add	r2, r3
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	68b9      	ldr	r1, [r7, #8]
 80006ac:	440b      	add	r3, r1
 80006ae:	7812      	ldrb	r2, [r2, #0]
 80006b0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; ++i) {
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3301      	adds	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d8f0      	bhi.n	80006a2 <array_copy+0x12>
	}
}
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	371c      	adds	r7, #28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <mult_by_2>:

void mult_by_2(uint32_t *block){
 80006ce:	b480      	push	{r7}
 80006d0:	b085      	sub	sp, #20
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]

	unsigned int msb = -(block[0]>>31);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	17db      	asrs	r3, r3, #31
 80006dc:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 3; ++i) {
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	e02a      	b.n	800073a <mult_by_2+0x6c>
		block[i] &= 0x7FFFFFFF;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	4413      	add	r3, r2
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	440b      	add	r3, r1
 80006f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80006fa:	601a      	str	r2, [r3, #0]
		block[i] <<=1;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	440b      	add	r3, r1
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	601a      	str	r2, [r3, #0]
		block[i] |= block[i]>>31;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	6819      	ldr	r1, [r3, #0]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	4413      	add	r3, r2
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	0fda      	lsrs	r2, r3, #31
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	4403      	add	r3, r0
 8000730:	430a      	orrs	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; ++i) {
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3301      	adds	r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b02      	cmp	r3, #2
 800073e:	ddd1      	ble.n	80006e4 <mult_by_2+0x16>
	}
	block[3] &= 0x7FFFFFFF;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	330c      	adds	r3, #12
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	330c      	adds	r3, #12
 800074a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800074e:	601a      	str	r2, [r3, #0]
	block[3] <<=1;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	330c      	adds	r3, #12
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	330c      	adds	r3, #12
 800075a:	0052      	lsls	r2, r2, #1
 800075c:	601a      	str	r2, [r3, #0]
	block[3] ^= msb & 0x00000087;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	330c      	adds	r3, #12
 8000762:	6819      	ldr	r1, [r3, #0]
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	f003 0287 	and.w	r2, r3, #135	@ 0x87
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	330c      	adds	r3, #12
 800076e:	404a      	eors	r2, r1
 8000770:	601a      	str	r2, [r3, #0]

}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <OCB3>:
		return (uint32_t)tz_table[((uint32_t)((x & -x) * 0x077CB531u)) >> 27];
}

void OCB3(unsigned char* plaintext, unsigned char* ciphertext, unsigned char* nonce,
        unsigned char* asociated_data, unsigned int plaintext_size,unsigned int nonce_size, unsigned int asociated_data_size,
        unsigned char* key, unsigned char* tag){
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af02      	add	r7, sp, #8
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	603b      	str	r3, [r7, #0]

	OCB3_INIT(key);
 800078c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800078e:	f7ff ff07 	bl	80005a0 <OCB3_INIT>

	 if (asociated_data_size!=0)
 8000792:	6a3b      	ldr	r3, [r7, #32]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d009      	beq.n	80007ac <OCB3+0x2e>
	    {
		 	 PMAC_OCB3(nonce,asociated_data,asociated_data_size,nonce_size,key,tag);
 8000798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	6a3a      	ldr	r2, [r7, #32]
 80007a4:	6839      	ldr	r1, [r7, #0]
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f000 f804 	bl	80007b4 <PMAC_OCB3>
	  xor_block_u8(Checksum, ctext1+(i*16));

	}*/


}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <PMAC_OCB3>:

void PMAC_OCB3( unsigned char* nonce, unsigned char* asociated_data, unsigned int asociated_data_size,unsigned int nonce_size,unsigned char* key, unsigned char* tag){
 80007b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007b8:	b095      	sub	sp, #84	@ 0x54
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6178      	str	r0, [r7, #20]
 80007be:	6139      	str	r1, [r7, #16]
 80007c0:	60fa      	str	r2, [r7, #12]
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	466b      	mov	r3, sp
 80007c6:	461e      	mov	r6, r3

	int size_ptext = asociated_data_size;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	64bb      	str	r3, [r7, #72]	@ 0x48

	unsigned char ptext0[size_ptext];
 80007cc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80007ce:	1e4b      	subs	r3, r1, #1
 80007d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80007d2:	460a      	mov	r2, r1
 80007d4:	2300      	movs	r3, #0
 80007d6:	603a      	str	r2, [r7, #0]
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	f04f 0200 	mov.w	r2, #0
 80007de:	f04f 0300 	mov.w	r3, #0
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	00c3      	lsls	r3, r0, #3
 80007e6:	6838      	ldr	r0, [r7, #0]
 80007e8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80007ec:	6838      	ldr	r0, [r7, #0]
 80007ee:	00c2      	lsls	r2, r0, #3
 80007f0:	460a      	mov	r2, r1
 80007f2:	2300      	movs	r3, #0
 80007f4:	4692      	mov	sl, r2
 80007f6:	469b      	mov	fp, r3
 80007f8:	f04f 0200 	mov.w	r2, #0
 80007fc:	f04f 0300 	mov.w	r3, #0
 8000800:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000804:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000808:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800080c:	460b      	mov	r3, r1
 800080e:	3307      	adds	r3, #7
 8000810:	08db      	lsrs	r3, r3, #3
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	ebad 0d03 	sub.w	sp, sp, r3
 8000818:	466b      	mov	r3, sp
 800081a:	3300      	adds	r3, #0
 800081c:	643b      	str	r3, [r7, #64]	@ 0x40
	unsigned char ptext1[size_ptext];
 800081e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000820:	1e4b      	subs	r3, r1, #1
 8000822:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000824:	460a      	mov	r2, r1
 8000826:	2300      	movs	r3, #0
 8000828:	4690      	mov	r8, r2
 800082a:	4699      	mov	r9, r3
 800082c:	f04f 0200 	mov.w	r2, #0
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000838:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800083c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000840:	460a      	mov	r2, r1
 8000842:	2300      	movs	r3, #0
 8000844:	4614      	mov	r4, r2
 8000846:	461d      	mov	r5, r3
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	00eb      	lsls	r3, r5, #3
 8000852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000856:	00e2      	lsls	r2, r4, #3
 8000858:	460b      	mov	r3, r1
 800085a:	3307      	adds	r3, #7
 800085c:	08db      	lsrs	r3, r3, #3
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	ebad 0d03 	sub.w	sp, sp, r3
 8000864:	466b      	mov	r3, sp
 8000866:	3300      	adds	r3, #0
 8000868:	63bb      	str	r3, [r7, #56]	@ 0x38
	unsigned char ctext0[16];
	unsigned char ctext1[16];
	for (size_t i = 0; i < size_ptext; i++){
 800086a:	2300      	movs	r3, #0
 800086c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800086e:	e00c      	b.n	800088a <PMAC_OCB3+0xd6>
		ptext0[i]=0;
 8000870:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000874:	4413      	add	r3, r2
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
		ptext1[i]=0;
 800087a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800087c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800087e:	4413      	add	r3, r2
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < size_ptext; i++){
 8000884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000886:	3301      	adds	r3, #1
 8000888:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800088a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800088c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800088e:	429a      	cmp	r2, r3
 8000890:	d3ee      	bcc.n	8000870 <PMAC_OCB3+0xbc>
	}

	divide_plaintext(asociated_data, ptext0,  ptext1, asociated_data_size);
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000896:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000898:	6938      	ldr	r0, [r7, #16]
 800089a:	f000 f806 	bl	80008aa <divide_plaintext>
 800089e:	46b5      	mov	sp, r6

	  xor_block_u8(tag, ctext1+(i*16));

	}*/

}
 80008a0:	bf00      	nop
 80008a2:	3754      	adds	r7, #84	@ 0x54
 80008a4:	46bd      	mov	sp, r7
 80008a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080008aa <divide_plaintext>:


void divide_plaintext(unsigned char* plaintext, unsigned char* ptext0,  unsigned char* ptext1,unsigned int plaintext_size){
 80008aa:	b480      	push	{r7}
 80008ac:	b089      	sub	sp, #36	@ 0x24
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	603b      	str	r3, [r7, #0]
    int condicion = 1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61fb      	str	r3, [r7, #28]
    size_t j=0;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
    size_t k=0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	e02c      	b.n	8000924 <divide_plaintext+0x7a>

        if (i%16==0 && i!=0)
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	f003 030f 	and.w	r3, r3, #15
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d106      	bne.n	80008e2 <divide_plaintext+0x38>
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d003      	beq.n	80008e2 <divide_plaintext+0x38>
            condicion=condicion^1;
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	f083 0301 	eor.w	r3, r3, #1
 80008e0:	61fb      	str	r3, [r7, #28]

        if (condicion)
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d008      	beq.n	80008fa <divide_plaintext+0x50>
            ptext0[j] = plaintext[i];
 80008e8:	68fa      	ldr	r2, [r7, #12]
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	441a      	add	r2, r3
 80008ee:	68b9      	ldr	r1, [r7, #8]
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	440b      	add	r3, r1
 80008f4:	7812      	ldrb	r2, [r2, #0]
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	e007      	b.n	800090a <divide_plaintext+0x60>
        else
            ptext1[k] = plaintext[i];
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	441a      	add	r2, r3
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	440b      	add	r3, r1
 8000906:	7812      	ldrb	r2, [r2, #0]
 8000908:	701a      	strb	r2, [r3, #0]

        if (condicion)
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d003      	beq.n	8000918 <divide_plaintext+0x6e>
            j++;
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	3301      	adds	r3, #1
 8000914:	61bb      	str	r3, [r7, #24]
 8000916:	e002      	b.n	800091e <divide_plaintext+0x74>
        else
            k++;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	3301      	adds	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	3301      	adds	r3, #1
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	429a      	cmp	r2, r3
 800092a:	d3ce      	bcc.n	80008ca <divide_plaintext+0x20>
    }
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3724      	adds	r7, #36	@ 0x24
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <packing>:
******************************************************************************/



void packing(uint32_t* out, const unsigned char* in0,
		const unsigned char* in1) {
 800093a:	b480      	push	{r7}
 800093c:	b087      	sub	sp, #28
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	out[0] = LE_LOAD_32(in0);
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	3303      	adds	r3, #3
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	061a      	lsls	r2, r3, #24
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	3302      	adds	r3, #2
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	041b      	lsls	r3, r3, #16
 8000956:	431a      	orrs	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	3301      	adds	r3, #1
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	4313      	orrs	r3, r2
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	7812      	ldrb	r2, [r2, #0]
 8000966:	431a      	orrs	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	601a      	str	r2, [r3, #0]
	out[1] = LE_LOAD_32(in1);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3303      	adds	r3, #3
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	061a      	lsls	r2, r3, #24
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3302      	adds	r3, #2
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	041b      	lsls	r3, r3, #16
 800097c:	431a      	orrs	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3301      	adds	r3, #1
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	021b      	lsls	r3, r3, #8
 8000986:	431a      	orrs	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3304      	adds	r3, #4
 8000992:	430a      	orrs	r2, r1
 8000994:	601a      	str	r2, [r3, #0]
	out[2] = LE_LOAD_32(in0 + 4);
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	3307      	adds	r3, #7
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	061a      	lsls	r2, r3, #24
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	3306      	adds	r3, #6
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	041b      	lsls	r3, r3, #16
 80009a6:	431a      	orrs	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	3305      	adds	r3, #5
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	431a      	orrs	r2, r3
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	3304      	adds	r3, #4
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	3308      	adds	r3, #8
 80009be:	430a      	orrs	r2, r1
 80009c0:	601a      	str	r2, [r3, #0]
	out[3] = LE_LOAD_32(in1 + 4);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3307      	adds	r3, #7
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	061a      	lsls	r2, r3, #24
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3306      	adds	r3, #6
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	041b      	lsls	r3, r3, #16
 80009d2:	431a      	orrs	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3305      	adds	r3, #5
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	021b      	lsls	r3, r3, #8
 80009dc:	431a      	orrs	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3304      	adds	r3, #4
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	330c      	adds	r3, #12
 80009ea:	430a      	orrs	r2, r1
 80009ec:	601a      	str	r2, [r3, #0]
	out[4] = LE_LOAD_32(in0 + 8);
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	330b      	adds	r3, #11
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	061a      	lsls	r2, r3, #24
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	330a      	adds	r3, #10
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	041b      	lsls	r3, r3, #16
 80009fe:	431a      	orrs	r2, r3
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	3309      	adds	r3, #9
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	021b      	lsls	r3, r3, #8
 8000a08:	431a      	orrs	r2, r3
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	3308      	adds	r3, #8
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	3310      	adds	r3, #16
 8000a16:	430a      	orrs	r2, r1
 8000a18:	601a      	str	r2, [r3, #0]
	out[5] = LE_LOAD_32(in1 + 8);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	330b      	adds	r3, #11
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	061a      	lsls	r2, r3, #24
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	330a      	adds	r3, #10
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	041b      	lsls	r3, r3, #16
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3309      	adds	r3, #9
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	431a      	orrs	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3308      	adds	r3, #8
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3314      	adds	r3, #20
 8000a42:	430a      	orrs	r2, r1
 8000a44:	601a      	str	r2, [r3, #0]
	out[6] = LE_LOAD_32(in0 + 12);
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	330f      	adds	r3, #15
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	061a      	lsls	r2, r3, #24
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	330e      	adds	r3, #14
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	041b      	lsls	r3, r3, #16
 8000a56:	431a      	orrs	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	330d      	adds	r3, #13
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	021b      	lsls	r3, r3, #8
 8000a60:	431a      	orrs	r2, r3
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	330c      	adds	r3, #12
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	3318      	adds	r3, #24
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]
	out[7] = LE_LOAD_32(in1 + 12);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	330f      	adds	r3, #15
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	061a      	lsls	r2, r3, #24
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	330e      	adds	r3, #14
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	041b      	lsls	r3, r3, #16
 8000a82:	431a      	orrs	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	330d      	adds	r3, #13
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	021b      	lsls	r3, r3, #8
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	330c      	adds	r3, #12
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	331c      	adds	r3, #28
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[1], out[0], 0x55555555, 1);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	085b      	lsrs	r3, r3, #1
 8000aaa:	4053      	eors	r3, r2
 8000aac:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	405a      	eors	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	6819      	ldr	r1, [r3, #0]
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	005a      	lsls	r2, r3, #1
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3304      	adds	r3, #4
 8000acc:	404a      	eors	r2, r1
 8000ace:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[3], out[2], 0x55555555, 1);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	3308      	adds	r3, #8
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	330c      	adds	r3, #12
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	085b      	lsrs	r3, r3, #1
 8000ade:	4053      	eors	r3, r2
 8000ae0:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	3308      	adds	r3, #8
 8000aea:	6819      	ldr	r1, [r3, #0]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3308      	adds	r3, #8
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	404a      	eors	r2, r1
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	330c      	adds	r3, #12
 8000afa:	6819      	ldr	r1, [r3, #0]
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	005a      	lsls	r2, r3, #1
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	330c      	adds	r3, #12
 8000b04:	404a      	eors	r2, r1
 8000b06:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[5], out[4], 0x55555555, 1);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3310      	adds	r3, #16
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	3314      	adds	r3, #20
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	085b      	lsrs	r3, r3, #1
 8000b16:	4053      	eors	r3, r2
 8000b18:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3310      	adds	r3, #16
 8000b22:	6819      	ldr	r1, [r3, #0]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3310      	adds	r3, #16
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	404a      	eors	r2, r1
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3314      	adds	r3, #20
 8000b32:	6819      	ldr	r1, [r3, #0]
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	005a      	lsls	r2, r3, #1
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3314      	adds	r3, #20
 8000b3c:	404a      	eors	r2, r1
 8000b3e:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[6], 0x55555555, 1);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3318      	adds	r3, #24
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	331c      	adds	r3, #28
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	085b      	lsrs	r3, r3, #1
 8000b4e:	4053      	eors	r3, r2
 8000b50:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	3318      	adds	r3, #24
 8000b5a:	6819      	ldr	r1, [r3, #0]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	3318      	adds	r3, #24
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	404a      	eors	r2, r1
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	331c      	adds	r3, #28
 8000b6a:	6819      	ldr	r1, [r3, #0]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	005a      	lsls	r2, r3, #1
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	331c      	adds	r3, #28
 8000b74:	404a      	eors	r2, r1
 8000b76:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[2], out[0], 0x33333333, 2);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3308      	adds	r3, #8
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	089b      	lsrs	r3, r3, #2
 8000b84:	4053      	eors	r3, r2
 8000b86:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	405a      	eors	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	3308      	adds	r3, #8
 8000b9c:	6819      	ldr	r1, [r3, #0]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	009a      	lsls	r2, r3, #2
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	3308      	adds	r3, #8
 8000ba6:	404a      	eors	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[3], out[1], 0x33333333, 2);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	3304      	adds	r3, #4
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	330c      	adds	r3, #12
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	4053      	eors	r3, r2
 8000bba:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	6819      	ldr	r1, [r3, #0]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	404a      	eors	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	330c      	adds	r3, #12
 8000bd4:	6819      	ldr	r1, [r3, #0]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	009a      	lsls	r2, r3, #2
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	330c      	adds	r3, #12
 8000bde:	404a      	eors	r2, r1
 8000be0:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[6], out[4], 0x33333333, 2);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3310      	adds	r3, #16
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	3318      	adds	r3, #24
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	4053      	eors	r3, r2
 8000bf2:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3310      	adds	r3, #16
 8000bfc:	6819      	ldr	r1, [r3, #0]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3310      	adds	r3, #16
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	404a      	eors	r2, r1
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3318      	adds	r3, #24
 8000c0c:	6819      	ldr	r1, [r3, #0]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	009a      	lsls	r2, r3, #2
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	3318      	adds	r3, #24
 8000c16:	404a      	eors	r2, r1
 8000c18:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[5], 0x33333333, 2);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3314      	adds	r3, #20
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	331c      	adds	r3, #28
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	4053      	eors	r3, r2
 8000c2a:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3314      	adds	r3, #20
 8000c34:	6819      	ldr	r1, [r3, #0]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3314      	adds	r3, #20
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	404a      	eors	r2, r1
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	331c      	adds	r3, #28
 8000c44:	6819      	ldr	r1, [r3, #0]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	009a      	lsls	r2, r3, #2
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	331c      	adds	r3, #28
 8000c4e:	404a      	eors	r2, r1
 8000c50:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[4], out[0], 0x0f0f0f0f, 4);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3310      	adds	r3, #16
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	091b      	lsrs	r3, r3, #4
 8000c5e:	4053      	eors	r3, r2
 8000c60:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	405a      	eors	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3310      	adds	r3, #16
 8000c76:	6819      	ldr	r1, [r3, #0]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	011a      	lsls	r2, r3, #4
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	3310      	adds	r3, #16
 8000c80:	404a      	eors	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[5], out[1], 0x0f0f0f0f, 4);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	3304      	adds	r3, #4
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3314      	adds	r3, #20
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	091b      	lsrs	r3, r3, #4
 8000c92:	4053      	eors	r3, r2
 8000c94:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	6819      	ldr	r1, [r3, #0]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	404a      	eors	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3314      	adds	r3, #20
 8000cae:	6819      	ldr	r1, [r3, #0]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	011a      	lsls	r2, r3, #4
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3314      	adds	r3, #20
 8000cb8:	404a      	eors	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[6], out[2], 0x0f0f0f0f, 4);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3308      	adds	r3, #8
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3318      	adds	r3, #24
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	091b      	lsrs	r3, r3, #4
 8000cca:	4053      	eors	r3, r2
 8000ccc:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3308      	adds	r3, #8
 8000cd6:	6819      	ldr	r1, [r3, #0]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3308      	adds	r3, #8
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	404a      	eors	r2, r1
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3318      	adds	r3, #24
 8000ce6:	6819      	ldr	r1, [r3, #0]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	011a      	lsls	r2, r3, #4
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3318      	adds	r3, #24
 8000cf0:	404a      	eors	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]
	SWAPMOVE(out[7], out[3], 0x0f0f0f0f, 4);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	330c      	adds	r3, #12
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	331c      	adds	r3, #28
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	4053      	eors	r3, r2
 8000d04:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	330c      	adds	r3, #12
 8000d0e:	6819      	ldr	r1, [r3, #0]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	330c      	adds	r3, #12
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	404a      	eors	r2, r1
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	331c      	adds	r3, #28
 8000d1e:	6819      	ldr	r1, [r3, #0]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	011a      	lsls	r2, r3, #4
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	331c      	adds	r3, #28
 8000d28:	404a      	eors	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	371c      	adds	r7, #28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <unpacking>:

/******************************************************************************
* Unpacks the 256-bit internal state in two 128-bit blocs out0, out1.
******************************************************************************/
static void unpacking(unsigned char* out0, unsigned char* out1, uint32_t* in) {
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	SWAPMOVE(in[4], in[0], 0x0f0f0f0f, 4);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3310      	adds	r3, #16
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	091b      	lsrs	r3, r3, #4
 8000d50:	4053      	eors	r3, r2
 8000d52:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	405a      	eors	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3310      	adds	r3, #16
 8000d68:	6819      	ldr	r1, [r3, #0]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	011a      	lsls	r2, r3, #4
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3310      	adds	r3, #16
 8000d72:	404a      	eors	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[5], in[1], 0x0f0f0f0f, 4);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3314      	adds	r3, #20
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	091b      	lsrs	r3, r3, #4
 8000d84:	4053      	eors	r3, r2
 8000d86:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3304      	adds	r3, #4
 8000d90:	6819      	ldr	r1, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3304      	adds	r3, #4
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	404a      	eors	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3314      	adds	r3, #20
 8000da0:	6819      	ldr	r1, [r3, #0]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	011a      	lsls	r2, r3, #4
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3314      	adds	r3, #20
 8000daa:	404a      	eors	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[6], in[2], 0x0f0f0f0f, 4);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3308      	adds	r3, #8
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3318      	adds	r3, #24
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	4053      	eors	r3, r2
 8000dbe:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3308      	adds	r3, #8
 8000dc8:	6819      	ldr	r1, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3308      	adds	r3, #8
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	404a      	eors	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3318      	adds	r3, #24
 8000dd8:	6819      	ldr	r1, [r3, #0]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	011a      	lsls	r2, r3, #4
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3318      	adds	r3, #24
 8000de2:	404a      	eors	r2, r1
 8000de4:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[3], 0x0f0f0f0f, 4);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	330c      	adds	r3, #12
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	331c      	adds	r3, #28
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	091b      	lsrs	r3, r3, #4
 8000df4:	4053      	eors	r3, r2
 8000df6:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	330c      	adds	r3, #12
 8000e00:	6819      	ldr	r1, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	330c      	adds	r3, #12
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	404a      	eors	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	331c      	adds	r3, #28
 8000e10:	6819      	ldr	r1, [r3, #0]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	011a      	lsls	r2, r3, #4
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	331c      	adds	r3, #28
 8000e1a:	404a      	eors	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[2], in[0], 0x33333333, 2);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3308      	adds	r3, #8
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	089b      	lsrs	r3, r3, #2
 8000e2a:	4053      	eors	r3, r2
 8000e2c:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	405a      	eors	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3308      	adds	r3, #8
 8000e42:	6819      	ldr	r1, [r3, #0]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	009a      	lsls	r2, r3, #2
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3308      	adds	r3, #8
 8000e4c:	404a      	eors	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[3], in[1], 0x33333333, 2);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3304      	adds	r3, #4
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	330c      	adds	r3, #12
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	4053      	eors	r3, r2
 8000e60:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	6819      	ldr	r1, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3304      	adds	r3, #4
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	404a      	eors	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	330c      	adds	r3, #12
 8000e7a:	6819      	ldr	r1, [r3, #0]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	009a      	lsls	r2, r3, #2
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	330c      	adds	r3, #12
 8000e84:	404a      	eors	r2, r1
 8000e86:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[6], in[4], 0x33333333, 2);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3310      	adds	r3, #16
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3318      	adds	r3, #24
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	4053      	eors	r3, r2
 8000e98:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3310      	adds	r3, #16
 8000ea2:	6819      	ldr	r1, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3310      	adds	r3, #16
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	404a      	eors	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3318      	adds	r3, #24
 8000eb2:	6819      	ldr	r1, [r3, #0]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	009a      	lsls	r2, r3, #2
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3318      	adds	r3, #24
 8000ebc:	404a      	eors	r2, r1
 8000ebe:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[5], 0x33333333, 2);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3314      	adds	r3, #20
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	331c      	adds	r3, #28
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	4053      	eors	r3, r2
 8000ed0:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3314      	adds	r3, #20
 8000eda:	6819      	ldr	r1, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3314      	adds	r3, #20
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	404a      	eors	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	331c      	adds	r3, #28
 8000eea:	6819      	ldr	r1, [r3, #0]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	009a      	lsls	r2, r3, #2
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	331c      	adds	r3, #28
 8000ef4:	404a      	eors	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[1], in[0], 0x55555555, 1);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3304      	adds	r3, #4
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	4053      	eors	r3, r2
 8000f06:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	405a      	eors	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	6819      	ldr	r1, [r3, #0]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005a      	lsls	r2, r3, #1
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3304      	adds	r3, #4
 8000f26:	404a      	eors	r2, r1
 8000f28:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[3], in[2], 0x55555555, 1);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3308      	adds	r3, #8
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	330c      	adds	r3, #12
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	085b      	lsrs	r3, r3, #1
 8000f38:	4053      	eors	r3, r2
 8000f3a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3308      	adds	r3, #8
 8000f44:	6819      	ldr	r1, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3308      	adds	r3, #8
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	404a      	eors	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	330c      	adds	r3, #12
 8000f54:	6819      	ldr	r1, [r3, #0]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005a      	lsls	r2, r3, #1
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	330c      	adds	r3, #12
 8000f5e:	404a      	eors	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[5], in[4], 0x55555555, 1);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3310      	adds	r3, #16
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3314      	adds	r3, #20
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	085b      	lsrs	r3, r3, #1
 8000f70:	4053      	eors	r3, r2
 8000f72:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3310      	adds	r3, #16
 8000f7c:	6819      	ldr	r1, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3310      	adds	r3, #16
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	404a      	eors	r2, r1
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3314      	adds	r3, #20
 8000f8c:	6819      	ldr	r1, [r3, #0]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005a      	lsls	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3314      	adds	r3, #20
 8000f96:	404a      	eors	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]
	SWAPMOVE(in[7], in[6], 0x55555555, 1);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3318      	adds	r3, #24
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	331c      	adds	r3, #28
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	085b      	lsrs	r3, r3, #1
 8000fa8:	4053      	eors	r3, r2
 8000faa:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3318      	adds	r3, #24
 8000fb4:	6819      	ldr	r1, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3318      	adds	r3, #24
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	404a      	eors	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	331c      	adds	r3, #28
 8000fc4:	6819      	ldr	r1, [r3, #0]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005a      	lsls	r2, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	331c      	adds	r3, #28
 8000fce:	404a      	eors	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]
	LE_STORE_32(out0, in[0]);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	0a1a      	lsrs	r2, r3, #8
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	0c1a      	lsrs	r2, r3, #16
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	0e1a      	lsrs	r2, r3, #24
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3303      	adds	r3, #3
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 4, in[2]);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3308      	adds	r3, #8
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3304      	adds	r3, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3308      	adds	r3, #8
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	0a1a      	lsrs	r2, r3, #8
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3305      	adds	r3, #5
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3308      	adds	r3, #8
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	0c1a      	lsrs	r2, r3, #16
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3306      	adds	r3, #6
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	701a      	strb	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3308      	adds	r3, #8
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	0e1a      	lsrs	r2, r3, #24
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3307      	adds	r3, #7
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 8, in[4]);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3310      	adds	r3, #16
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3308      	adds	r3, #8
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3310      	adds	r3, #16
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	0a1a      	lsrs	r2, r3, #8
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3309      	adds	r3, #9
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3310      	adds	r3, #16
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	0c1a      	lsrs	r2, r3, #16
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	330a      	adds	r3, #10
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3310      	adds	r3, #16
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	0e1a      	lsrs	r2, r3, #24
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	330b      	adds	r3, #11
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out0 + 12, in[6]);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3318      	adds	r3, #24
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	330c      	adds	r3, #12
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3318      	adds	r3, #24
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	0a1a      	lsrs	r2, r3, #8
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	330d      	adds	r3, #13
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3318      	adds	r3, #24
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	0c1a      	lsrs	r2, r3, #16
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	330e      	adds	r3, #14
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3318      	adds	r3, #24
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	0e1a      	lsrs	r2, r3, #24
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	330f      	adds	r3, #15
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1, in[1]);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3304      	adds	r3, #4
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	701a      	strb	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3304      	adds	r3, #4
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	0a1a      	lsrs	r2, r3, #8
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	3301      	adds	r3, #1
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3304      	adds	r3, #4
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	0c1a      	lsrs	r2, r3, #16
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	3302      	adds	r3, #2
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3304      	adds	r3, #4
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	0e1a      	lsrs	r2, r3, #24
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	3303      	adds	r3, #3
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 4, in[3]);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	330c      	adds	r3, #12
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	3304      	adds	r3, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	330c      	adds	r3, #12
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0a1a      	lsrs	r2, r3, #8
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	3305      	adds	r3, #5
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	330c      	adds	r3, #12
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	0c1a      	lsrs	r2, r3, #16
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	3306      	adds	r3, #6
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	330c      	adds	r3, #12
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	0e1a      	lsrs	r2, r3, #24
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	3307      	adds	r3, #7
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 8, in[5]);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3314      	adds	r3, #20
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	3308      	adds	r3, #8
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3314      	adds	r3, #20
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	0a1a      	lsrs	r2, r3, #8
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	3309      	adds	r3, #9
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3314      	adds	r3, #20
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	0c1a      	lsrs	r2, r3, #16
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	330a      	adds	r3, #10
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3314      	adds	r3, #20
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	0e1a      	lsrs	r2, r3, #24
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	330b      	adds	r3, #11
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	701a      	strb	r2, [r3, #0]
	LE_STORE_32(out1 + 12, in[7]);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	331c      	adds	r3, #28
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	330c      	adds	r3, #12
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	331c      	adds	r3, #28
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	0a1a      	lsrs	r2, r3, #8
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	330d      	adds	r3, #13
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	331c      	adds	r3, #28
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	0c1a      	lsrs	r2, r3, #16
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	330e      	adds	r3, #14
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	331c      	adds	r3, #28
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0e1a      	lsrs	r2, r3, #24
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	330f      	adds	r3, #15
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	701a      	strb	r2, [r3, #0]
}
 80011b6:	bf00      	nop
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <ark>:

/******************************************************************************
* XOR the round key to the internal state. The round keys are expected to be 
* pre-computed and to be packed in the fixsliced representation.
******************************************************************************/
static void ark(uint32_t* state, const uint32_t* rkey) {
 80011c2:	b480      	push	{r7}
 80011c4:	b085      	sub	sp, #20
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 8; i++)
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	e012      	b.n	80011f8 <ark+0x36>
		state[i] ^= rkey[i];
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	6819      	ldr	r1, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	4403      	add	r3, r0
 80011ee:	404a      	eors	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3301      	adds	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b07      	cmp	r3, #7
 80011fc:	dde9      	ble.n	80011d2 <ark+0x10>
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <sbox>:
/******************************************************************************
* Bitsliced implementation of the AES Sbox based on Boyar, Peralta and Calik.
* See http://www.cs.yale.edu/homes/peralta/CircuitStuff/SLP_AES_113.txt
* Note that the 4 NOT (^= 0xffffffff) are moved to the key schedule.
******************************************************************************/
void sbox(uint32_t* state) {
 800120c:	b480      	push	{r7}
 800120e:	b095      	sub	sp, #84	@ 0x54
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4, t5,
		t6, t7, t8, t9, t10, t11, t12,
		t13, t14, t15, t16, t17;
	t0			= state[3] ^ state[5];
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	330c      	adds	r3, #12
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3314      	adds	r3, #20
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4053      	eors	r3, r2
 8001222:	64fb      	str	r3, [r7, #76]	@ 0x4c
	t1			= state[0] ^ state[6];
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3318      	adds	r3, #24
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4053      	eors	r3, r2
 8001230:	64bb      	str	r3, [r7, #72]	@ 0x48
	t2			= t1 ^ t0;
 8001232:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001236:	4053      	eors	r3, r2
 8001238:	647b      	str	r3, [r7, #68]	@ 0x44
	t3			= state[4] ^ t2;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3310      	adds	r3, #16
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001242:	4053      	eors	r3, r2
 8001244:	643b      	str	r3, [r7, #64]	@ 0x40
	t4			= t3 ^ state[5];
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3314      	adds	r3, #20
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800124e:	4053      	eors	r3, r2
 8001250:	63fb      	str	r3, [r7, #60]	@ 0x3c
	t5			= t2 & t4;
 8001252:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001256:	4013      	ands	r3, r2
 8001258:	63bb      	str	r3, [r7, #56]	@ 0x38
	t6			= t4 ^ state[7];
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	331c      	adds	r3, #28
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001262:	4053      	eors	r3, r2
 8001264:	637b      	str	r3, [r7, #52]	@ 0x34
	t7			= t3 ^ state[1];
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3304      	adds	r3, #4
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800126e:	4053      	eors	r3, r2
 8001270:	633b      	str	r3, [r7, #48]	@ 0x30
	t8			= state[0] ^ state[3]; 
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	330c      	adds	r3, #12
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4053      	eors	r3, r2
 800127e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	t9			= t7 ^ t8;
 8001280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001284:	4053      	eors	r3, r2
 8001286:	62bb      	str	r3, [r7, #40]	@ 0x28
	t10			= t8 & t9;
 8001288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800128a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800128c:	4013      	ands	r3, r2
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
	t11			= state[7] ^ t9; 
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	331c      	adds	r3, #28
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001298:	4053      	eors	r3, r2
 800129a:	623b      	str	r3, [r7, #32]
	t12			= state[0] ^ state[5];
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3314      	adds	r3, #20
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4053      	eors	r3, r2
 80012a8:	61fb      	str	r3, [r7, #28]
	t13			= state[1] ^ state[2];
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3304      	adds	r3, #4
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3308      	adds	r3, #8
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4053      	eors	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
	t14			= t4 ^ t13;
 80012ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	4053      	eors	r3, r2
 80012c0:	617b      	str	r3, [r7, #20]
	t15			= t14 ^ t9;
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c6:	4053      	eors	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
	t16			= t0 & t15;
 80012ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
	t17			= t16 ^ t10;
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d6:	4053      	eors	r3, r2
 80012d8:	60bb      	str	r3, [r7, #8]
	state[1]	= t14 ^ t12; 
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3304      	adds	r3, #4
 80012de:	6979      	ldr	r1, [r7, #20]
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	404a      	eors	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
	state[2]	= t12 & t14;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3308      	adds	r3, #8
 80012ea:	69f9      	ldr	r1, [r7, #28]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	400a      	ands	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3308      	adds	r3, #8
 80012f6:	6819      	ldr	r1, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3308      	adds	r3, #8
 80012fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012fe:	404a      	eors	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
	state[4]	= t13 ^ t9;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3310      	adds	r3, #16
 8001306:	69b9      	ldr	r1, [r7, #24]
 8001308:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800130a:	404a      	eors	r2, r1
 800130c:	601a      	str	r2, [r3, #0]
	state[5]	= t1 ^ state[4];
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3310      	adds	r3, #16
 8001312:	6819      	ldr	r1, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3314      	adds	r3, #20
 8001318:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800131a:	404a      	eors	r2, r1
 800131c:	601a      	str	r2, [r3, #0]
	t3			= t1 & state[4];
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3310      	adds	r3, #16
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001326:	4013      	ands	r3, r2
 8001328:	643b      	str	r3, [r7, #64]	@ 0x40
	t10			= state[0] ^ state[4];
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3310      	adds	r3, #16
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4053      	eors	r3, r2
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
	t13 		^= state[7];
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	331c      	adds	r3, #28
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4053      	eors	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
	state[3] 	^= t13; 
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	330c      	adds	r3, #12
 8001348:	6819      	ldr	r1, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	330c      	adds	r3, #12
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	404a      	eors	r2, r1
 8001352:	601a      	str	r2, [r3, #0]
	t16			= state[3] & state[7];
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	330c      	adds	r3, #12
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	331c      	adds	r3, #28
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
	t16 		^= t5;
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001368:	4053      	eors	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]
	t16 		^= state[2];
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3308      	adds	r3, #8
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	4053      	eors	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
	state[1] 	^= t16;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3304      	adds	r3, #4
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3304      	adds	r3, #4
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	404a      	eors	r2, r1
 8001386:	601a      	str	r2, [r3, #0]
	state[0] 	^= t13;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	405a      	eors	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	601a      	str	r2, [r3, #0]
	t16			= state[0] & t11;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6a3a      	ldr	r2, [r7, #32]
 800139a:	4013      	ands	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
	t16 		^= t3;
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013a2:	4053      	eors	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
	state[2] 	^= t16;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3308      	adds	r3, #8
 80013aa:	6819      	ldr	r1, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3308      	adds	r3, #8
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	404a      	eors	r2, r1
 80013b4:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3308      	adds	r3, #8
 80013ba:	6819      	ldr	r1, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3308      	adds	r3, #8
 80013c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013c2:	404a      	eors	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]
	state[6] 	^= t13;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3318      	adds	r3, #24
 80013ca:	6819      	ldr	r1, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3318      	adds	r3, #24
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	404a      	eors	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]
	t10			= state[6] & t13;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3318      	adds	r3, #24
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
	t3 			^= t10;
 80013e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e6:	4053      	eors	r3, r2
 80013e8:	643b      	str	r3, [r7, #64]	@ 0x40
	t3 			^= t17;
 80013ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4053      	eors	r3, r2
 80013f0:	643b      	str	r3, [r7, #64]	@ 0x40
	state[5] 	^= t3;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3314      	adds	r3, #20
 80013f6:	6819      	ldr	r1, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3314      	adds	r3, #20
 80013fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013fe:	404a      	eors	r2, r1
 8001400:	601a      	str	r2, [r3, #0]
	t3			= state[6] ^ t12;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3318      	adds	r3, #24
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	69fa      	ldr	r2, [r7, #28]
 800140a:	4053      	eors	r3, r2
 800140c:	643b      	str	r3, [r7, #64]	@ 0x40
	t10			= t3 & t6;
 800140e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001412:	4013      	ands	r3, r2
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
	t5 			^= t10;
 8001416:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	4053      	eors	r3, r2
 800141c:	63bb      	str	r3, [r7, #56]	@ 0x38
	t5 			^= t7;
 800141e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001422:	4053      	eors	r3, r2
 8001424:	63bb      	str	r3, [r7, #56]	@ 0x38
	t5 			^= t17;
 8001426:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4053      	eors	r3, r2
 800142c:	63bb      	str	r3, [r7, #56]	@ 0x38
	t7			= t5 & state[5];
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3314      	adds	r3, #20
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001436:	4013      	ands	r3, r2
 8001438:	633b      	str	r3, [r7, #48]	@ 0x30
	t10			= state[2] ^ t7;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3308      	adds	r3, #8
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001442:	4053      	eors	r3, r2
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
	t7 			^= state[1];
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3304      	adds	r3, #4
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800144e:	4053      	eors	r3, r2
 8001450:	633b      	str	r3, [r7, #48]	@ 0x30
	t5 			^= state[1];
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3304      	adds	r3, #4
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800145a:	4053      	eors	r3, r2
 800145c:	63bb      	str	r3, [r7, #56]	@ 0x38
	t16			= t5 & t10;
 800145e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001462:	4013      	ands	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
	state[1] 	^= t16;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3304      	adds	r3, #4
 800146a:	6819      	ldr	r1, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3304      	adds	r3, #4
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	404a      	eors	r2, r1
 8001474:	601a      	str	r2, [r3, #0]
	t17			= state[1] & state[0];
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3304      	adds	r3, #4
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
	t11			= state[1] & t11;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3304      	adds	r3, #4
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6a3a      	ldr	r2, [r7, #32]
 800148c:	4013      	ands	r3, r2
 800148e:	623b      	str	r3, [r7, #32]
	t16			= state[5] ^ state[2];
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3314      	adds	r3, #20
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3308      	adds	r3, #8
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4053      	eors	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
	t7 			&= t16;
 80014a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4013      	ands	r3, r2
 80014a6:	633b      	str	r3, [r7, #48]	@ 0x30
	t7 			^= state[2];
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3308      	adds	r3, #8
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014b0:	4053      	eors	r3, r2
 80014b2:	633b      	str	r3, [r7, #48]	@ 0x30
	t16			= t10 ^ t7;
 80014b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014b8:	4053      	eors	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
	state[2] 	&= t16;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3308      	adds	r3, #8
 80014c0:	6819      	ldr	r1, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3308      	adds	r3, #8
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	400a      	ands	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
	t10 		^= state[2];
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3308      	adds	r3, #8
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014d4:	4053      	eors	r3, r2
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
	t10 		&= state[1];
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3304      	adds	r3, #4
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014e0:	4013      	ands	r3, r2
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
	t5 			^= t10;
 80014e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	4053      	eors	r3, r2
 80014ea:	63bb      	str	r3, [r7, #56]	@ 0x38
	t10			= state[1] ^ t5;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3304      	adds	r3, #4
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80014f4:	4053      	eors	r3, r2
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
	state[4] 	&= t10; 
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3310      	adds	r3, #16
 80014fc:	6819      	ldr	r1, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3310      	adds	r3, #16
 8001502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001504:	400a      	ands	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
	t11 		^= state[4];
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3310      	adds	r3, #16
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6a3a      	ldr	r2, [r7, #32]
 8001510:	4053      	eors	r3, r2
 8001512:	623b      	str	r3, [r7, #32]
	t1 			&= t10;
 8001514:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	4013      	ands	r3, r2
 800151a:	64bb      	str	r3, [r7, #72]	@ 0x48
	state[6] 	&= t5; 
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3318      	adds	r3, #24
 8001520:	6819      	ldr	r1, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3318      	adds	r3, #24
 8001526:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001528:	400a      	ands	r2, r1
 800152a:	601a      	str	r2, [r3, #0]
	t10			= t5 & t13;
 800152c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
	state[4] 	^= t10;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3310      	adds	r3, #16
 8001538:	6819      	ldr	r1, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3310      	adds	r3, #16
 800153e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001540:	404a      	eors	r2, r1
 8001542:	601a      	str	r2, [r3, #0]
	state[5] 	^= t7;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3314      	adds	r3, #20
 8001548:	6819      	ldr	r1, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3314      	adds	r3, #20
 800154e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001550:	404a      	eors	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
	state[2] 	^= state[5];
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3308      	adds	r3, #8
 8001558:	6819      	ldr	r1, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3314      	adds	r3, #20
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3308      	adds	r3, #8
 8001564:	404a      	eors	r2, r1
 8001566:	601a      	str	r2, [r3, #0]
	state[5]	= t5 ^ state[2];
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3308      	adds	r3, #8
 800156c:	6819      	ldr	r1, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3314      	adds	r3, #20
 8001572:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001574:	404a      	eors	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
	t5			= state[5] & t14;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3314      	adds	r3, #20
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	4013      	ands	r3, r2
 8001582:	63bb      	str	r3, [r7, #56]	@ 0x38
	t10			= state[5] & t12;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3314      	adds	r3, #20
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	4013      	ands	r3, r2
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
	t12			= t7 ^ state[2];
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3308      	adds	r3, #8
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001598:	4053      	eors	r3, r2
 800159a:	61fb      	str	r3, [r7, #28]
	t4 			&= t12;
 800159c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	4013      	ands	r3, r2
 80015a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	t2 			&= t12;
 80015a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	4013      	ands	r3, r2
 80015aa:	647b      	str	r3, [r7, #68]	@ 0x44
	t3 			&= state[2]; 
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3308      	adds	r3, #8
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015b4:	4013      	ands	r3, r2
 80015b6:	643b      	str	r3, [r7, #64]	@ 0x40
	state[2] 	&= t6;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3308      	adds	r3, #8
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3308      	adds	r3, #8
 80015c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015c4:	400a      	ands	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]
	state[2] 	^= t4;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3308      	adds	r3, #8
 80015cc:	6819      	ldr	r1, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3308      	adds	r3, #8
 80015d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015d4:	404a      	eors	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]
	t13			= state[4] ^ state[2];
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3310      	adds	r3, #16
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3308      	adds	r3, #8
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4053      	eors	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
	state[3] 	&= t7;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	330c      	adds	r3, #12
 80015ec:	6819      	ldr	r1, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	330c      	adds	r3, #12
 80015f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015f4:	400a      	ands	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
	state[1] 	^= t7;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3304      	adds	r3, #4
 80015fc:	6819      	ldr	r1, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3304      	adds	r3, #4
 8001602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001604:	404a      	eors	r2, r1
 8001606:	601a      	str	r2, [r3, #0]
	state[5] 	^= state[1];
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3314      	adds	r3, #20
 800160c:	6819      	ldr	r1, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3304      	adds	r3, #4
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3314      	adds	r3, #20
 8001618:	404a      	eors	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
	t6			= state[5] & t15;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3314      	adds	r3, #20
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	637b      	str	r3, [r7, #52]	@ 0x34
	state[4] 	^= t6; 
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3310      	adds	r3, #16
 800162c:	6819      	ldr	r1, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3310      	adds	r3, #16
 8001632:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001634:	404a      	eors	r2, r1
 8001636:	601a      	str	r2, [r3, #0]
	t0 			&= state[5];
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3314      	adds	r3, #20
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001640:	4013      	ands	r3, r2
 8001642:	64fb      	str	r3, [r7, #76]	@ 0x4c
	state[5]	= state[1] & t9; 
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3304      	adds	r3, #4
 8001648:	6819      	ldr	r1, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3314      	adds	r3, #20
 800164e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001650:	400a      	ands	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
	state[5] 	^= state[4];
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3314      	adds	r3, #20
 8001658:	6819      	ldr	r1, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3310      	adds	r3, #16
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3314      	adds	r3, #20
 8001664:	404a      	eors	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
	state[1] 	&= t8;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3304      	adds	r3, #4
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3304      	adds	r3, #4
 8001672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001674:	400a      	ands	r2, r1
 8001676:	601a      	str	r2, [r3, #0]
	t6			= state[1] ^ state[5];
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3304      	adds	r3, #4
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3314      	adds	r3, #20
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4053      	eors	r3, r2
 8001686:	637b      	str	r3, [r7, #52]	@ 0x34
	t0 			^= state[1];
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3304      	adds	r3, #4
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001690:	4053      	eors	r3, r2
 8001692:	64fb      	str	r3, [r7, #76]	@ 0x4c
	state[1]	= t3 ^ t0;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3304      	adds	r3, #4
 8001698:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800169a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800169c:	404a      	eors	r2, r1
 800169e:	601a      	str	r2, [r3, #0]
	t15			= state[1] ^ state[3];
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3304      	adds	r3, #4
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	330c      	adds	r3, #12
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4053      	eors	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
	t2 			^= state[1];
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3304      	adds	r3, #4
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80016b8:	4053      	eors	r3, r2
 80016ba:	647b      	str	r3, [r7, #68]	@ 0x44
	state[0]	= t2 ^ state[5];
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3314      	adds	r3, #20
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016c4:	405a      	eors	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	601a      	str	r2, [r3, #0]
	state[3]	= t2 ^ t13;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	330c      	adds	r3, #12
 80016ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	404a      	eors	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]
	state[1]	= state[3] ^ state[5];
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	330c      	adds	r3, #12
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3314      	adds	r3, #20
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3304      	adds	r3, #4
 80016e6:	404a      	eors	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]
	//state[1] 	^= 0xffffffff;
	t0 			^= state[6];
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3318      	adds	r3, #24
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80016f2:	4053      	eors	r3, r2
 80016f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	state[5]	= t7 & state[7];
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	331c      	adds	r3, #28
 80016fa:	6819      	ldr	r1, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3314      	adds	r3, #20
 8001700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001702:	400a      	ands	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
	t14			= t4 ^ state[5];
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3314      	adds	r3, #20
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800170e:	4053      	eors	r3, r2
 8001710:	617b      	str	r3, [r7, #20]
	state[6]	= t1 ^ t14;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3318      	adds	r3, #24
 8001716:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	404a      	eors	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
	state[6] 	^= t5; 
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3318      	adds	r3, #24
 8001722:	6819      	ldr	r1, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3318      	adds	r3, #24
 8001728:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800172a:	404a      	eors	r2, r1
 800172c:	601a      	str	r2, [r3, #0]
	state[6] 	^= state[4];
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3318      	adds	r3, #24
 8001732:	6819      	ldr	r1, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3310      	adds	r3, #16
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3318      	adds	r3, #24
 800173e:	404a      	eors	r2, r1
 8001740:	601a      	str	r2, [r3, #0]
	state[2]	= t17 ^ state[6];
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3318      	adds	r3, #24
 8001746:	6819      	ldr	r1, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3308      	adds	r3, #8
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	404a      	eors	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
	state[5]	= t15 ^ state[2];
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3308      	adds	r3, #8
 8001756:	6819      	ldr	r1, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3314      	adds	r3, #20
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	404a      	eors	r2, r1
 8001760:	601a      	str	r2, [r3, #0]
	state[2] 	^= t6;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3308      	adds	r3, #8
 8001766:	6819      	ldr	r1, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3308      	adds	r3, #8
 800176c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800176e:	404a      	eors	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
	state[2] 	^= t10;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3308      	adds	r3, #8
 8001776:	6819      	ldr	r1, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3308      	adds	r3, #8
 800177c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800177e:	404a      	eors	r2, r1
 8001780:	601a      	str	r2, [r3, #0]
	//state[2] 	^= 0xffffffff;
	t14 		^= t11;
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	4053      	eors	r3, r2
 8001788:	617b      	str	r3, [r7, #20]
	t0 			^= t14;
 800178a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	4053      	eors	r3, r2
 8001790:	64fb      	str	r3, [r7, #76]	@ 0x4c
	state[6] 	^= t0;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3318      	adds	r3, #24
 8001796:	6819      	ldr	r1, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3318      	adds	r3, #24
 800179c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800179e:	404a      	eors	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]
	//state[6] 	^= 0xffffffff;
	state[7]	= t1 ^ t0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	331c      	adds	r3, #28
 80017a6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80017a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80017aa:	404a      	eors	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]
	//state[7] 	^= 0xffffffff;
	state[4]	= t14 ^ state[3]; 
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	330c      	adds	r3, #12
 80017b2:	6819      	ldr	r1, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3310      	adds	r3, #16
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	404a      	eors	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]
}
 80017be:	bf00      	nop
 80017c0:	3754      	adds	r7, #84	@ 0x54
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <double_shiftrows>:

/******************************************************************************
* Applies the ShiftRows transformation twice (i.e. SR^2) on the internal state.
******************************************************************************/
static void double_shiftrows(uint32_t* state) {
 80017ca:	b480      	push	{r7}
 80017cc:	b085      	sub	sp, #20
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
    uint32_t tmp;
	for(int i = 0; i < 8; i++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	e02a      	b.n	800182e <double_shiftrows+0x64>
        SWAPMOVE(state[i], state[i], 0x0f000f00, 4);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	440b      	add	r3, r1
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	4053      	eors	r3, r2
 80017f0:	f003 230f 	and.w	r3, r3, #251662080	@ 0xf000f00
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	6819      	ldr	r1, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	404a      	eors	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	6819      	ldr	r1, [r3, #0]
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	011a      	lsls	r2, r3, #4
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	4403      	add	r3, r0
 8001824:	404a      	eors	r2, r1
 8001826:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	3301      	adds	r3, #1
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b07      	cmp	r3, #7
 8001832:	ddd1      	ble.n	80017d8 <double_shiftrows+0xe>
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <mixcolumns_0>:
/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 0.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 0.
******************************************************************************/
static void mixcolumns_0(uint32_t* state) {
 8001842:	b480      	push	{r7}
 8001844:	b089      	sub	sp, #36	@ 0x24
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4;
	t3 = ROR(BYTE_ROR_6(state[0]),8);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	099b      	lsrs	r3, r3, #6
 8001850:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 800185e:	4313      	orrs	r3, r2
 8001860:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001864:	61fb      	str	r3, [r7, #28]
	t0 = state[0] ^ t3;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	4053      	eors	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
	t1 = ROR(BYTE_ROR_6(state[7]),8);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	331c      	adds	r3, #28
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	099b      	lsrs	r3, r3, #6
 8001878:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	331c      	adds	r3, #28
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8001888:	4313      	orrs	r3, r2
 800188a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800188e:	617b      	str	r3, [r7, #20]
	t2 = state[7] ^ t1;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	331c      	adds	r3, #28
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4053      	eors	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
	state[7] = ROR(BYTE_ROR_4(t2),16) ^ t1 ^ t0;
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80018ac:	4313      	orrs	r3, r2
 80018ae:	ea4f 4233 	mov.w	r2, r3, ror #16
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	ea82 0103 	eor.w	r1, r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	331c      	adds	r3, #28
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	404a      	eors	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[6]),8);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3318      	adds	r3, #24
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	099b      	lsrs	r3, r3, #6
 80018ca:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3318      	adds	r3, #24
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 80018da:	4313      	orrs	r3, r2
 80018dc:	ea4f 2333 	mov.w	r3, r3, ror #8
 80018e0:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[6];
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3318      	adds	r3, #24
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	4053      	eors	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
	state[6] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	405a      	eors	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	ea82 0103 	eor.w	r1, r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 800190a:	4313      	orrs	r3, r2
 800190c:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3318      	adds	r3, #24
 8001914:	404a      	eors	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[5]),8);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3314      	adds	r3, #20
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	099b      	lsrs	r3, r3, #6
 8001920:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3314      	adds	r3, #20
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8001930:	4313      	orrs	r3, r2
 8001932:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001936:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[5];
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3314      	adds	r3, #20
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4053      	eors	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
	state[5] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	ea82 0103 	eor.w	r1, r2, r3
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 800195c:	4313      	orrs	r3, r2
 800195e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3314      	adds	r3, #20
 8001966:	404a      	eors	r2, r1
 8001968:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[4]),8);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3310      	adds	r3, #16
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	099b      	lsrs	r3, r3, #6
 8001972:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3310      	adds	r3, #16
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8001982:	4313      	orrs	r3, r2
 8001984:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001988:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[4];
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3310      	adds	r3, #16
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	4053      	eors	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
	state[4] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	405a      	eors	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	ea82 0103 	eor.w	r1, r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 80019b2:	4313      	orrs	r3, r2
 80019b4:	ea4f 4233 	mov.w	r2, r3, ror #16
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3310      	adds	r3, #16
 80019bc:	404a      	eors	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[3]),8);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	330c      	adds	r3, #12
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	099b      	lsrs	r3, r3, #6
 80019c8:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	330c      	adds	r3, #12
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 80019d8:	4313      	orrs	r3, r2
 80019da:	ea4f 2333 	mov.w	r3, r3, ror #8
 80019de:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[3];
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	330c      	adds	r3, #12
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4053      	eors	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
	state[3] = t4 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	405a      	eors	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	ea82 0103 	eor.w	r1, r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	330c      	adds	r3, #12
 8001a12:	404a      	eors	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[2]),8);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3308      	adds	r3, #8
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	099b      	lsrs	r3, r3, #6
 8001a1e:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3308      	adds	r3, #8
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001a34:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[2];
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3308      	adds	r3, #8
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	4053      	eors	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
	state[2] = t2 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	ea82 0103 	eor.w	r1, r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3308      	adds	r3, #8
 8001a64:	404a      	eors	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_6(state[1]),8);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	099b      	lsrs	r3, r3, #6
 8001a70:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3304      	adds	r3, #4
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	f003 33fc 	and.w	r3, r3, #4244438268	@ 0xfcfcfcfc
 8001a80:	4313      	orrs	r3, r2
 8001a82:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001a86:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[1];
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4053      	eors	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
	state[1] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	ea82 0103 	eor.w	r1, r2, r3
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001aac:	4313      	orrs	r3, r2
 8001aae:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	404a      	eors	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]
	state[0] = t2 ^ t3 ^ ROR(BYTE_ROR_4(t0),16);
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	405a      	eors	r2, r3
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001ad0:	430b      	orrs	r3, r1
 8001ad2:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001ad6:	405a      	eors	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	601a      	str	r2, [r3, #0]
}
 8001adc:	bf00      	nop
 8001ade:	3724      	adds	r7, #36	@ 0x24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <mixcolumns_1>:

/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for round i s.t. (i%4) == 1.
******************************************************************************/
static void mixcolumns_1(uint32_t* state) {
 8001ae8:	b480      	push	{r7}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2;
	t0 = state[0] ^ ROR(BYTE_ROR_4(state[0]),8);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001b0e:	4053      	eors	r3, r2
 8001b10:	617b      	str	r3, [r7, #20]
	t1 = state[7] ^ ROR(BYTE_ROR_4(state[7]),8);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	331c      	adds	r3, #28
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	331c      	adds	r3, #28
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	331c      	adds	r3, #28
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001b30:	430b      	orrs	r3, r1
 8001b32:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001b36:	4053      	eors	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
	t2 = state[6];
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	60fb      	str	r3, [r7, #12]
	state[6] = t1 ^ t0;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3318      	adds	r3, #24
 8001b44:	6939      	ldr	r1, [r7, #16]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	404a      	eors	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]
	state[7] ^= state[6] ^ ROR(t1,16);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	331c      	adds	r3, #28
 8001b50:	6819      	ldr	r1, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3318      	adds	r3, #24
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001b5e:	405a      	eors	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	331c      	adds	r3, #28
 8001b64:	404a      	eors	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	091b      	lsrs	r3, r3, #4
 8001b6c:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001b7e:	613b      	str	r3, [r7, #16]
	state[6] ^= t1;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3318      	adds	r3, #24
 8001b84:	6819      	ldr	r1, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3318      	adds	r3, #24
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	404a      	eors	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4053      	eors	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
	state[6] ^= ROR(t1,16);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3318      	adds	r3, #24
 8001b9c:	6819      	ldr	r1, [r3, #0]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3318      	adds	r3, #24
 8001ba8:	404a      	eors	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]
	t2 = state[5];
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	60fb      	str	r3, [r7, #12]
	state[5] = t1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3314      	adds	r3, #20
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001bd0:	613b      	str	r3, [r7, #16]
	state[5] ^= t1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3314      	adds	r3, #20
 8001bd6:	6819      	ldr	r1, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3314      	adds	r3, #20
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	404a      	eors	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4053      	eors	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
	state[5] ^= ROR(t1,16);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3314      	adds	r3, #20
 8001bee:	6819      	ldr	r1, [r3, #0]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3314      	adds	r3, #20
 8001bfa:	404a      	eors	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]
	t2 = state[4];
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	60fb      	str	r3, [r7, #12]
	state[4] = t1 ^ t0;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3310      	adds	r3, #16
 8001c08:	6939      	ldr	r1, [r7, #16]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	404a      	eors	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001c20:	4313      	orrs	r3, r2
 8001c22:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001c26:	613b      	str	r3, [r7, #16]
	state[4] ^= t1;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3310      	adds	r3, #16
 8001c2c:	6819      	ldr	r1, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3310      	adds	r3, #16
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	404a      	eors	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4053      	eors	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
	state[4] ^= ROR(t1,16);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3310      	adds	r3, #16
 8001c44:	6819      	ldr	r1, [r3, #0]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3310      	adds	r3, #16
 8001c50:	404a      	eors	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]
	t2 = state[3];
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60fb      	str	r3, [r7, #12]
	state[3] = t1 ^ t0;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	6939      	ldr	r1, [r7, #16]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	404a      	eors	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]
	t1 =  ROR(BYTE_ROR_4(t2),8);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001c76:	4313      	orrs	r3, r2
 8001c78:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001c7c:	613b      	str	r3, [r7, #16]
	state[3] ^= t1;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	330c      	adds	r3, #12
 8001c82:	6819      	ldr	r1, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	330c      	adds	r3, #12
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	404a      	eors	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4053      	eors	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
	state[3] ^= ROR(t1,16);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	330c      	adds	r3, #12
 8001c9a:	6819      	ldr	r1, [r3, #0]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	330c      	adds	r3, #12
 8001ca6:	404a      	eors	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]
	t2 = state[2];
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	60fb      	str	r3, [r7, #12]
	state[2] = t1;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3308      	adds	r3, #8
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001cce:	613b      	str	r3, [r7, #16]
	state[2] ^= t1;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3308      	adds	r3, #8
 8001cd4:	6819      	ldr	r1, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3308      	adds	r3, #8
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	404a      	eors	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4053      	eors	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
	state[2] ^= ROR(t1,16);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3308      	adds	r3, #8
 8001cec:	6819      	ldr	r1, [r3, #0]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3308      	adds	r3, #8
 8001cf8:	404a      	eors	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
	t2 = state[1];
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	60fb      	str	r3, [r7, #12]
	state[1] = t1;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3304      	adds	r3, #4
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001d20:	613b      	str	r3, [r7, #16]
	state[1] ^= t1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3304      	adds	r3, #4
 8001d26:	6819      	ldr	r1, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	404a      	eors	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4053      	eors	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
	state[1] ^= ROR(t1,16);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	6819      	ldr	r1, [r3, #0]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	404a      	eors	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
	t2 = state[0];
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60fb      	str	r3, [r7, #12]
	state[0] = t1;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_4(t2),8);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001d70:	613b      	str	r3, [r7, #16]
	state[0] ^= t1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	405a      	eors	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	601a      	str	r2, [r3, #0]
	t1 ^= t2;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4053      	eors	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
	state[0] ^= ROR(t1,16);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001d90:	405a      	eors	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	601a      	str	r2, [r3, #0]
}
 8001d96:	bf00      	nop
 8001d98:	371c      	adds	r7, #28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <mixcolumns_2>:

/******************************************************************************
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for rounds i s.t. (i%4) == 2.
******************************************************************************/
static void mixcolumns_2(uint32_t* state) {
 8001da2:	b480      	push	{r7}
 8001da4:	b089      	sub	sp, #36	@ 0x24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2, t3, t4;
	t3 = ROR(BYTE_ROR_2(state[0]),8);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	019b      	lsls	r3, r3, #6
 8001dba:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001dc4:	61fb      	str	r3, [r7, #28]
	t0 = state[0] ^ t3;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	4053      	eors	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
	t1 = ROR(BYTE_ROR_2(state[7]),8);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	331c      	adds	r3, #28
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	331c      	adds	r3, #28
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	019b      	lsls	r3, r3, #6
 8001de4:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8001de8:	4313      	orrs	r3, r2
 8001dea:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001dee:	617b      	str	r3, [r7, #20]
	t2 = state[7] ^ t1;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	331c      	adds	r3, #28
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4053      	eors	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
	state[7] = ROR(BYTE_ROR_4(t2),16) ^ t1 ^ t0;
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	ea82 0103 	eor.w	r1, r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	331c      	adds	r3, #28
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	404a      	eors	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[6]),8);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3318      	adds	r3, #24
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3318      	adds	r3, #24
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	019b      	lsls	r3, r3, #6
 8001e36:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001e40:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[6];
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3318      	adds	r3, #24
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	4053      	eors	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
	state[6] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	405a      	eors	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	ea82 0103 	eor.w	r1, r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3318      	adds	r3, #24
 8001e74:	404a      	eors	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[5]),8);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3314      	adds	r3, #20
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3314      	adds	r3, #20
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	019b      	lsls	r3, r3, #6
 8001e8c:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8001e90:	4313      	orrs	r3, r2
 8001e92:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001e96:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[5];
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3314      	adds	r3, #20
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4053      	eors	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
	state[5] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	ea82 0103 	eor.w	r1, r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3314      	adds	r3, #20
 8001ec6:	404a      	eors	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[4]),8);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3310      	adds	r3, #16
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3310      	adds	r3, #16
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	019b      	lsls	r3, r3, #6
 8001ede:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001ee8:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[4];
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3310      	adds	r3, #16
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	4053      	eors	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
	state[4] = t2 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	405a      	eors	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	ea82 0103 	eor.w	r1, r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001f12:	4313      	orrs	r3, r2
 8001f14:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3310      	adds	r3, #16
 8001f1c:	404a      	eors	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[3]),8);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	330c      	adds	r3, #12
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	330c      	adds	r3, #12
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	019b      	lsls	r3, r3, #6
 8001f34:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001f3e:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[3];
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	330c      	adds	r3, #12
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4053      	eors	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
	state[3] = t4 ^ t0 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	405a      	eors	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	ea82 0103 	eor.w	r1, r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	330c      	adds	r3, #12
 8001f72:	404a      	eors	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[2]),8);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3308      	adds	r3, #8
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3308      	adds	r3, #8
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	019b      	lsls	r3, r3, #6
 8001f8a:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001f94:	617b      	str	r3, [r7, #20]
	t4 = t1 ^ state[2];
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3308      	adds	r3, #8
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	4053      	eors	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
	state[2] = t2 ^ t1 ^ ROR(BYTE_ROR_4(t4),16);
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	ea82 0103 	eor.w	r1, r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	ea4f 4233 	mov.w	r2, r3, ror #16
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3308      	adds	r3, #8
 8001fc4:	404a      	eors	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
	t1 = ROR(BYTE_ROR_2(state[1]),8);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3304      	adds	r3, #4
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	f003 323f 	and.w	r2, r3, #1061109567	@ 0x3f3f3f3f
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	019b      	lsls	r3, r3, #6
 8001fdc:	f003 33c0 	and.w	r3, r3, #3233857728	@ 0xc0c0c0c0
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001fe6:	617b      	str	r3, [r7, #20]
	t2 = t1 ^ state[1];
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3304      	adds	r3, #4
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4053      	eors	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
	state[1] = t4 ^ t1 ^ ROR(BYTE_ROR_4(t2),16);
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	ea82 0103 	eor.w	r1, r2, r3
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 800200c:	4313      	orrs	r3, r2
 800200e:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3304      	adds	r3, #4
 8002016:	404a      	eors	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
	state[0] = t2 ^ t3 ^ ROR(BYTE_ROR_4(t0),16);
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	405a      	eors	r2, r3
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	f003 310f 	and.w	r1, r3, #252645135	@ 0xf0f0f0f
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8002030:	430b      	orrs	r3, r1
 8002032:	ea4f 4333 	mov.w	r3, r3, ror #16
 8002036:	405a      	eors	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	601a      	str	r2, [r3, #0]
}
 800203c:	bf00      	nop
 800203e:	3724      	adds	r7, #36	@ 0x24
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <mixcolumns_3>:
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 3.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 1.
* Based on Käsper-Schwabe, similar to https://github.com/Ko-/aes-armcortexm.
******************************************************************************/
static void mixcolumns_3(uint32_t* state) {
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	uint32_t t0, t1, t2;
	t0 = state[7] ^ ROR(state[7],8);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	331c      	adds	r3, #28
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	331c      	adds	r3, #28
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002060:	4053      	eors	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
	t2 = state[0] ^ ROR(state[0],8);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002070:	4053      	eors	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
	state[7] = t2 ^ ROR(state[7], 8) ^ ROR(t0, 16);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	331c      	adds	r3, #28
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	ea4f 2233 	mov.w	r2, r3, ror #8
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	ea82 0103 	eor.w	r1, r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	ea4f 4233 	mov.w	r2, r3, ror #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	331c      	adds	r3, #28
 800208e:	404a      	eors	r2, r1
 8002090:	601a      	str	r2, [r3, #0]
	t1 = state[6] ^ ROR(state[6],8);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3318      	adds	r3, #24
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3318      	adds	r3, #24
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	ea4f 2333 	mov.w	r3, r3, ror #8
 80020a2:	4053      	eors	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
	state[6] = t0 ^ t2 ^ ROR(state[6], 8) ^ ROR(t1,16);
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	405a      	eors	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3318      	adds	r3, #24
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80020b6:	ea82 0103 	eor.w	r1, r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	ea4f 4233 	mov.w	r2, r3, ror #16
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3318      	adds	r3, #24
 80020c4:	404a      	eors	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
	t0 = state[5] ^ ROR(state[5],8);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3314      	adds	r3, #20
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3314      	adds	r3, #20
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80020d8:	4053      	eors	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
	state[5] = t1 ^ ROR(state[5],8) ^ ROR(t0,16);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3314      	adds	r3, #20
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	ea4f 2233 	mov.w	r2, r3, ror #8
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	ea82 0103 	eor.w	r1, r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	ea4f 4233 	mov.w	r2, r3, ror #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3314      	adds	r3, #20
 80020f6:	404a      	eors	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]
	t1 = state[4] ^ ROR(state[4],8);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3310      	adds	r3, #16
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3310      	adds	r3, #16
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	ea4f 2333 	mov.w	r3, r3, ror #8
 800210a:	4053      	eors	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
	state[4] = t0 ^ t2 ^ ROR(state[4],8) ^ ROR(t1,16);
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	405a      	eors	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3310      	adds	r3, #16
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800211e:	ea82 0103 	eor.w	r1, r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3310      	adds	r3, #16
 800212c:	404a      	eors	r2, r1
 800212e:	601a      	str	r2, [r3, #0]
	t0 = state[3] ^ ROR(state[3],8);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	330c      	adds	r3, #12
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	330c      	adds	r3, #12
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002140:	4053      	eors	r3, r2
 8002142:	617b      	str	r3, [r7, #20]
	state[3] = t1 ^ t2 ^ ROR(state[3],8) ^ ROR(t0,16);
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	405a      	eors	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	330c      	adds	r3, #12
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002154:	ea82 0103 	eor.w	r1, r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	ea4f 4233 	mov.w	r2, r3, ror #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	330c      	adds	r3, #12
 8002162:	404a      	eors	r2, r1
 8002164:	601a      	str	r2, [r3, #0]
	t1 = state[2] ^ ROR(state[2],8);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3308      	adds	r3, #8
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3308      	adds	r3, #8
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002176:	4053      	eors	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
	state[2] = t0 ^ ROR(state[2],8) ^ ROR(t1,16);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3308      	adds	r3, #8
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	ea4f 2233 	mov.w	r2, r3, ror #8
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	ea82 0103 	eor.w	r1, r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	ea4f 4233 	mov.w	r2, r3, ror #16
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3308      	adds	r3, #8
 8002194:	404a      	eors	r2, r1
 8002196:	601a      	str	r2, [r3, #0]
	t0 = state[1] ^ ROR(state[1],8);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3304      	adds	r3, #4
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3304      	adds	r3, #4
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80021a8:	4053      	eors	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
	state[1] = t1 ^ ROR(state[1],8) ^ ROR(t0,16);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3304      	adds	r3, #4
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	ea4f 2233 	mov.w	r2, r3, ror #8
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	ea82 0103 	eor.w	r1, r2, r3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	ea4f 4233 	mov.w	r2, r3, ror #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3304      	adds	r3, #4
 80021c6:	404a      	eors	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
	state[0] = t0 ^ ROR(state[0],8) ^ ROR(t2,16);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	ea4f 2233 	mov.w	r2, r3, ror #8
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	405a      	eors	r2, r3
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	ea4f 4333 	mov.w	r3, r3, ror #16
 80021dc:	405a      	eors	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	601a      	str	r2, [r3, #0]
}
 80021e2:	bf00      	nop
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <aes128_encrypt_ffs>:
* can refer to the same block. Moreover ctext parameters can be the same as
* ptext parameters.
******************************************************************************/
void aes128_encrypt_ffs(unsigned char* ctext0, unsigned char * ctext1,
					const unsigned char* ptext0, const unsigned char* ptext1,
					const uint32_t* rkeys_ffs) {
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b08c      	sub	sp, #48	@ 0x30
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	603b      	str	r3, [r7, #0]
	uint32_t state[8]; 					// 256-bit internal state
	packing(state, ptext0, ptext1);		// packs into bitsliced representation
 80021fc:	f107 0310 	add.w	r3, r7, #16
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fb98 	bl	800093a <packing>
	ark(state, rkeys_ffs); 				// key whitening
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe ffd6 	bl	80011c2 <ark>
	sbox(state); 						// 1st round
 8002216:	f107 0310 	add.w	r3, r7, #16
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fff6 	bl	800120c <sbox>
	mixcolumns_0(state); 				// 1st round
 8002220:	f107 0310 	add.w	r3, r7, #16
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fb0c 	bl	8001842 <mixcolumns_0>
	ark(state, rkeys_ffs + 8); 			// 1st round
 800222a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800222c:	f103 0220 	add.w	r2, r3, #32
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	4611      	mov	r1, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe ffc3 	bl	80011c2 <ark>
	sbox(state); 						// 2nd round
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe ffe3 	bl	800120c <sbox>
	mixcolumns_1(state); 				// 2nd round
 8002246:	f107 0310 	add.w	r3, r7, #16
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fc4c 	bl	8001ae8 <mixcolumns_1>
	ark(state, rkeys_ffs + 16); 		// 2nd round
 8002250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002252:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002256:	f107 0310 	add.w	r3, r7, #16
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe ffb0 	bl	80011c2 <ark>
	sbox(state); 						// 3rd round
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe ffd0 	bl	800120c <sbox>
	mixcolumns_2(state); 				// 3rd round
 800226c:	f107 0310 	add.w	r3, r7, #16
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fd96 	bl	8001da2 <mixcolumns_2>
	ark(state, rkeys_ffs + 24); 		// 3rd round
 8002276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002278:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe ff9d 	bl	80011c2 <ark>
	sbox(state); 						// 4th round
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe ffbd 	bl	800120c <sbox>
	mixcolumns_3(state); 				// 4th round
 8002292:	f107 0310 	add.w	r3, r7, #16
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fed6 	bl	8002048 <mixcolumns_3>
	ark(state, rkeys_ffs + 32); 		// 4th round
 800229c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800229e:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80022a2:	f107 0310 	add.w	r3, r7, #16
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe ff8a 	bl	80011c2 <ark>
	sbox(state); 						// 5th round
 80022ae:	f107 0310 	add.w	r3, r7, #16
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe ffaa 	bl	800120c <sbox>
	mixcolumns_0(state); 				// 5th round
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fac0 	bl	8001842 <mixcolumns_0>
	ark(state, rkeys_ffs + 40); 		// 5th round
 80022c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c4:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 80022c8:	f107 0310 	add.w	r3, r7, #16
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe ff77 	bl	80011c2 <ark>
	sbox(state);						// 6th round
 80022d4:	f107 0310 	add.w	r3, r7, #16
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe ff97 	bl	800120c <sbox>
	mixcolumns_1(state); 				// 6th round
 80022de:	f107 0310 	add.w	r3, r7, #16
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fc00 	bl	8001ae8 <mixcolumns_1>
	ark(state, rkeys_ffs + 48); 		// 6th round
 80022e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ea:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 80022ee:	f107 0310 	add.w	r3, r7, #16
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe ff64 	bl	80011c2 <ark>
	sbox(state); 						// 7th round
 80022fa:	f107 0310 	add.w	r3, r7, #16
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe ff84 	bl	800120c <sbox>
	mixcolumns_2(state); 				// 7th round
 8002304:	f107 0310 	add.w	r3, r7, #16
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fd4a 	bl	8001da2 <mixcolumns_2>
	ark(state, rkeys_ffs + 56); 		// 7th round
 800230e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002310:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 8002314:	f107 0310 	add.w	r3, r7, #16
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe ff51 	bl	80011c2 <ark>
	sbox(state); 						// 8th round
 8002320:	f107 0310 	add.w	r3, r7, #16
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe ff71 	bl	800120c <sbox>
	mixcolumns_3(state); 				// 8th round
 800232a:	f107 0310 	add.w	r3, r7, #16
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fe8a 	bl	8002048 <mixcolumns_3>
	ark(state, rkeys_ffs + 64); 		// 8th round
 8002334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002336:	f503 7280 	add.w	r2, r3, #256	@ 0x100
 800233a:	f107 0310 	add.w	r3, r7, #16
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe ff3e 	bl	80011c2 <ark>
	sbox(state); 						// 9th round
 8002346:	f107 0310 	add.w	r3, r7, #16
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe ff5e 	bl	800120c <sbox>
	mixcolumns_0(state); 				// 9th round
 8002350:	f107 0310 	add.w	r3, r7, #16
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fa74 	bl	8001842 <mixcolumns_0>
	ark(state, rkeys_ffs + 72); 		// 9th round
 800235a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800235c:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8002360:	f107 0310 	add.w	r3, r7, #16
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe ff2b 	bl	80011c2 <ark>
	sbox(state); 						// 10th round
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe ff4b 	bl	800120c <sbox>
	double_shiftrows(state); 			// 10th round (resynchronization)
 8002376:	f107 0310 	add.w	r3, r7, #16
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fa25 	bl	80017ca <double_shiftrows>
	ark(state, rkeys_ffs + 80); 		// 10th round
 8002380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002382:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 8002386:	f107 0310 	add.w	r3, r7, #16
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe ff18 	bl	80011c2 <ark>
	unpacking(ctext0, ctext1, state);	// unpacks the state to the output
 8002392:	f107 0310 	add.w	r3, r7, #16
 8002396:	461a      	mov	r2, r3
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7fe fccc 	bl	8000d38 <unpacking>
}
 80023a0:	bf00      	nop
 80023a2:	3730      	adds	r7, #48	@ 0x30
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <inv_shiftrows_1>:


/******************************************************************************
* Applies ShiftRows^(-1) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_1(uint32_t* rkey) {
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++) {
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e052      	b.n	800245c <inv_shiftrows_1+0xb4>
		SWAPMOVE(rkey[i], rkey[i], 0x0c0f0300, 4);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	440b      	add	r3, r1
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	405a      	eors	r2, r3
 80023ce:	4b28      	ldr	r3, [pc, #160]	@ (8002470 <inv_shiftrows_1+0xc8>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4413      	add	r3, r2
 80023dc:	6819      	ldr	r1, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	404a      	eors	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	6819      	ldr	r1, [r3, #0]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	011a      	lsls	r2, r3, #4
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	4403      	add	r3, r0
 8002402:	404a      	eors	r2, r1
 8002404:	601a      	str	r2, [r3, #0]
		SWAPMOVE(rkey[i], rkey[i], 0x33003300, 2);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	440b      	add	r3, r1
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	4053      	eors	r3, r2
 800241e:	f003 2333 	and.w	r3, r3, #855651072	@ 0x33003300
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	4413      	add	r3, r2
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	404a      	eors	r2, r1
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	4413      	add	r3, r2
 8002444:	6819      	ldr	r1, [r3, #0]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	009a      	lsls	r2, r3, #2
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	4403      	add	r3, r0
 8002452:	404a      	eors	r2, r1
 8002454:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3301      	adds	r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b07      	cmp	r3, #7
 8002460:	dda9      	ble.n	80023b6 <inv_shiftrows_1+0xe>
	}
}
 8002462:	bf00      	nop
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	0c0f0300 	.word	0x0c0f0300

08002474 <inv_shiftrows_2>:
/******************************************************************************
* Applies ShiftRows^(-2) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_2(uint32_t* rkey) {
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++)
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	e02a      	b.n	80024d8 <inv_shiftrows_2+0x64>
		SWAPMOVE(rkey[i], rkey[i], 0x0f000f00, 4);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	440b      	add	r3, r1
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	4053      	eors	r3, r2
 800249a:	f003 230f 	and.w	r3, r3, #251662080	@ 0xf000f00
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4413      	add	r3, r2
 80024a8:	6819      	ldr	r1, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	404a      	eors	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	4413      	add	r3, r2
 80024c0:	6819      	ldr	r1, [r3, #0]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	011a      	lsls	r2, r3, #4
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	4403      	add	r3, r0
 80024ce:	404a      	eors	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	3301      	adds	r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b07      	cmp	r3, #7
 80024dc:	ddd1      	ble.n	8002482 <inv_shiftrows_2+0xe>
}
 80024de:	bf00      	nop
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <inv_shiftrows_3>:

/******************************************************************************
* Applies ShiftRows^(-3) on a round key to match the fixsliced representation.
******************************************************************************/
static void inv_shiftrows_3(uint32_t* rkey) {
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	for(int i = 0; i < 8; i++) {
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	e052      	b.n	80025a0 <inv_shiftrows_3+0xb4>
		SWAPMOVE(rkey[i], rkey[i], 0x030f0c00, 4);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	440b      	add	r3, r1
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	091b      	lsrs	r3, r3, #4
 8002510:	405a      	eors	r2, r3
 8002512:	4b28      	ldr	r3, [pc, #160]	@ (80025b4 <inv_shiftrows_3+0xc8>)
 8002514:	4013      	ands	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	4413      	add	r3, r2
 8002520:	6819      	ldr	r1, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	404a      	eors	r2, r1
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	4413      	add	r3, r2
 8002538:	6819      	ldr	r1, [r3, #0]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	011a      	lsls	r2, r3, #4
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	4403      	add	r3, r0
 8002546:	404a      	eors	r2, r1
 8002548:	601a      	str	r2, [r3, #0]
		SWAPMOVE(rkey[i], rkey[i], 0x33003300, 2);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	440b      	add	r3, r1
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	4053      	eors	r3, r2
 8002562:	f003 2333 	and.w	r3, r3, #855651072	@ 0x33003300
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	4413      	add	r3, r2
 8002570:	6819      	ldr	r1, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	404a      	eors	r2, r1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	4413      	add	r3, r2
 8002588:	6819      	ldr	r1, [r3, #0]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	009a      	lsls	r2, r3, #2
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	4403      	add	r3, r0
 8002596:	404a      	eors	r2, r1
 8002598:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3301      	adds	r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b07      	cmp	r3, #7
 80025a4:	dda9      	ble.n	80024fa <inv_shiftrows_3+0xe>
	}
}
 80025a6:	bf00      	nop
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	030f0c00 	.word	0x030f0c00

080025b8 <xor_columns>:
* involved in the XOR computation (should be 8 and 16 for AES-128 and AES-256,
* respectively).
* The idx_ror parameter refers to the rotation value. When a Rotword is applied
* the value should be 2, 26 otherwise.
******************************************************************************/
static void xor_columns(uint32_t* rkeys, int idx_xor, int idx_ror) {
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
	rkeys[1] ^= 0xffffffff; 			// NOT that are omitted in S-box
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3304      	adds	r3, #4
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3304      	adds	r3, #4
 80025ce:	43d2      	mvns	r2, r2
 80025d0:	601a      	str	r2, [r3, #0]
	rkeys[2] ^= 0xffffffff; 			// NOT that are omitted in S-box
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3308      	adds	r3, #8
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3308      	adds	r3, #8
 80025dc:	43d2      	mvns	r2, r2
 80025de:	601a      	str	r2, [r3, #0]
	rkeys[6] ^= 0xffffffff; 			// NOT that are omitted in S-box
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3318      	adds	r3, #24
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	3318      	adds	r3, #24
 80025ea:	43d2      	mvns	r2, r2
 80025ec:	601a      	str	r2, [r3, #0]
	rkeys[7] ^= 0xffffffff; 			// NOT that are omitted in S-box
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	331c      	adds	r3, #28
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	331c      	adds	r3, #28
 80025f8:	43d2      	mvns	r2, r2
 80025fa:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e06a      	b.n	80026d8 <xor_columns+0x120>
		rkeys[i] = (rkeys[i-idx_xor] ^ ROR(rkeys[i], idx_ror))  & 0xc0c0c0c0;
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4413      	add	r3, r2
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	68f9      	ldr	r1, [r7, #12]
 8002616:	440b      	add	r3, r1
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	fa61 f303 	ror.w	r3, r1, r3
 8002620:	405a      	eors	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	68f9      	ldr	r1, [r7, #12]
 8002628:	440b      	add	r3, r1
 800262a:	f002 32c0 	and.w	r2, r2, #3233857728	@ 0xc0c0c0c0
 800262e:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x30303030);
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	6819      	ldr	r1, [r3, #0]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4413      	add	r3, r2
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	4403      	add	r3, r0
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	4053      	eors	r3, r2
 8002656:	f003 3230 	and.w	r2, r3, #808464432	@ 0x30303030
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	4403      	add	r3, r0
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x0c0c0c0c);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	4413      	add	r3, r2
 800266e:	6819      	ldr	r1, [r3, #0]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4413      	add	r3, r2
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	4403      	add	r3, r0
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	4053      	eors	r3, r2
 800268c:	f003 320c 	and.w	r2, r3, #202116108	@ 0xc0c0c0c
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	4403      	add	r3, r0
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]
		rkeys[i] |= ((rkeys[i-idx_xor] ^ rkeys[i] >> 2) & 0x03030303);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	6819      	ldr	r1, [r3, #0]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4413      	add	r3, r2
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	4403      	add	r3, r0
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	4053      	eors	r3, r2
 80026c2:	f003 3203 	and.w	r2, r3, #50529027	@ 0x3030303
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	4403      	add	r3, r0
 80026ce:	430a      	orrs	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; i++) {
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3301      	adds	r3, #1
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2b07      	cmp	r3, #7
 80026dc:	dd91      	ble.n	8002602 <xor_columns+0x4a>
	}
}
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	371c      	adds	r7, #28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <aes128_keyschedule_ffs>:
* Fully bitsliced AES-128 key schedule to match the fully-fixsliced (ffs)
* representation. Note that it is possible to pass two different keys as input
* parameters if one wants to encrypt 2 blocks with two different keys.
******************************************************************************/
void aes128_keyschedule_ffs(uint32_t* rkeys, const unsigned char* key0,
						const unsigned char* key1) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
	packing(rkeys, key0, key1); 	// packs the keys into the bitsliced state
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f7fe f91c 	bl	800093a <packing>
	memcpy(rkeys+8, rkeys, 32);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3320      	adds	r3, #32
 8002706:	2220      	movs	r2, #32
 8002708:	68f9      	ldr	r1, [r7, #12]
 800270a:	4618      	mov	r0, r3
 800270c:	f004 f8a6 	bl	800685c <memcpy>
	sbox(rkeys+8);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3320      	adds	r3, #32
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fd79 	bl	800120c <sbox>
	rkeys[15] ^= 0x00000300; 		// 1st rconst
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	333c      	adds	r3, #60	@ 0x3c
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	333c      	adds	r3, #60	@ 0x3c
 8002724:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002728:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+8, 8, 2); 	// Rotword and XOR between the columns
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3320      	adds	r3, #32
 800272e:	2202      	movs	r2, #2
 8002730:	2108      	movs	r1, #8
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ff40 	bl	80025b8 <xor_columns>
	memcpy(rkeys+16, rkeys+8, 32);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3320      	adds	r3, #32
 8002742:	2220      	movs	r2, #32
 8002744:	4619      	mov	r1, r3
 8002746:	f004 f889 	bl	800685c <memcpy>
	sbox(rkeys+16);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3340      	adds	r3, #64	@ 0x40
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fd5c 	bl	800120c <sbox>
	rkeys[22] ^= 0x00000300;		// 2nd rconst
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3358      	adds	r3, #88	@ 0x58
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3358      	adds	r3, #88	@ 0x58
 800275e:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002762:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+16, 8, 2); 	// Rotword and XOR between the columns
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3340      	adds	r3, #64	@ 0x40
 8002768:	2202      	movs	r2, #2
 800276a:	2108      	movs	r1, #8
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff23 	bl	80025b8 <xor_columns>
	inv_shiftrows_1(rkeys+8); 		// to match fixslicing
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3320      	adds	r3, #32
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fe16 	bl	80023a8 <inv_shiftrows_1>
	memcpy(rkeys+24, rkeys+16, 32);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3340      	adds	r3, #64	@ 0x40
 8002786:	2220      	movs	r2, #32
 8002788:	4619      	mov	r1, r3
 800278a:	f004 f867 	bl	800685c <memcpy>
	sbox(rkeys+24);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3360      	adds	r3, #96	@ 0x60
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fd3a 	bl	800120c <sbox>
	rkeys[29] ^= 0x00000300;		// 3rd rconst
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3374      	adds	r3, #116	@ 0x74
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3374      	adds	r3, #116	@ 0x74
 80027a2:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80027a6:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+24, 8, 2); 	// Rotword and XOR between the columns
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3360      	adds	r3, #96	@ 0x60
 80027ac:	2202      	movs	r2, #2
 80027ae:	2108      	movs	r1, #8
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff01 	bl	80025b8 <xor_columns>
	inv_shiftrows_2(rkeys+16); 		// to match fixslicing
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3340      	adds	r3, #64	@ 0x40
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fe5a 	bl	8002474 <inv_shiftrows_2>
	memcpy(rkeys+32, rkeys+24, 32);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	3360      	adds	r3, #96	@ 0x60
 80027ca:	2220      	movs	r2, #32
 80027cc:	4619      	mov	r1, r3
 80027ce:	f004 f845 	bl	800685c <memcpy>
	sbox(rkeys+32);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3380      	adds	r3, #128	@ 0x80
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fd18 	bl	800120c <sbox>
	rkeys[36] ^= 0x00000300; 		// 4th rconst
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3390      	adds	r3, #144	@ 0x90
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3390      	adds	r3, #144	@ 0x90
 80027e6:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80027ea:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+32, 8, 2); 	// Rotword and XOR between the columns
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3380      	adds	r3, #128	@ 0x80
 80027f0:	2202      	movs	r2, #2
 80027f2:	2108      	movs	r1, #8
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fedf 	bl	80025b8 <xor_columns>
	inv_shiftrows_3(rkeys+24); 		// to match fixslicing
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3360      	adds	r3, #96	@ 0x60
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff fe74 	bl	80024ec <inv_shiftrows_3>
	memcpy(rkeys+40, rkeys+32, 32);	
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f103 00a0 	add.w	r0, r3, #160	@ 0xa0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3380      	adds	r3, #128	@ 0x80
 800280e:	2220      	movs	r2, #32
 8002810:	4619      	mov	r1, r3
 8002812:	f004 f823 	bl	800685c <memcpy>
	sbox(rkeys+40);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	33a0      	adds	r3, #160	@ 0xa0
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fcf6 	bl	800120c <sbox>
	rkeys[43] ^= 0x00000300; 		// 5th rconst
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	33ac      	adds	r3, #172	@ 0xac
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	33ac      	adds	r3, #172	@ 0xac
 800282a:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 800282e:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+40, 8, 2); 	// Rotword and XOR between the columns
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	33a0      	adds	r3, #160	@ 0xa0
 8002834:	2202      	movs	r2, #2
 8002836:	2108      	movs	r1, #8
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff febd 	bl	80025b8 <xor_columns>
	memcpy(rkeys+48, rkeys+40, 32);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	33a0      	adds	r3, #160	@ 0xa0
 8002848:	2220      	movs	r2, #32
 800284a:	4619      	mov	r1, r3
 800284c:	f004 f806 	bl	800685c <memcpy>
	sbox(rkeys+48);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	33c0      	adds	r3, #192	@ 0xc0
 8002854:	4618      	mov	r0, r3
 8002856:	f7fe fcd9 	bl	800120c <sbox>
	rkeys[50] ^= 0x00000300;		// 6th rconst
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	33c8      	adds	r3, #200	@ 0xc8
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	33c8      	adds	r3, #200	@ 0xc8
 8002864:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002868:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+48, 8, 2); 	// Rotword and XOR between the columns
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	33c0      	adds	r3, #192	@ 0xc0
 800286e:	2202      	movs	r2, #2
 8002870:	2108      	movs	r1, #8
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fea0 	bl	80025b8 <xor_columns>
	inv_shiftrows_1(rkeys+40); 		// to match fixslicing
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	33a0      	adds	r3, #160	@ 0xa0
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fd93 	bl	80023a8 <inv_shiftrows_1>
	memcpy(rkeys+56, rkeys+48, 32);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f103 00e0 	add.w	r0, r3, #224	@ 0xe0
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	33c0      	adds	r3, #192	@ 0xc0
 800288c:	2220      	movs	r2, #32
 800288e:	4619      	mov	r1, r3
 8002890:	f003 ffe4 	bl	800685c <memcpy>
	sbox(rkeys+56);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	33e0      	adds	r3, #224	@ 0xe0
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fcb7 	bl	800120c <sbox>
	rkeys[57] ^= 0x00000300;		// 7th rconst
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	33e4      	adds	r3, #228	@ 0xe4
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	33e4      	adds	r3, #228	@ 0xe4
 80028a8:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80028ac:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+56, 8, 2); 	// Rotword and XOR between the columns
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	33e0      	adds	r3, #224	@ 0xe0
 80028b2:	2202      	movs	r2, #2
 80028b4:	2108      	movs	r1, #8
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fe7e 	bl	80025b8 <xor_columns>
	inv_shiftrows_2(rkeys+48); 		// to match fixslicing
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	33c0      	adds	r3, #192	@ 0xc0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fdd7 	bl	8002474 <inv_shiftrows_2>
	memcpy(rkeys+64, rkeys+56, 32);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	33e0      	adds	r3, #224	@ 0xe0
 80028d0:	2220      	movs	r2, #32
 80028d2:	4619      	mov	r1, r3
 80028d4:	f003 ffc2 	bl	800685c <memcpy>
	sbox(rkeys+64);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fc94 	bl	800120c <sbox>
	rkeys[64] ^= 0x00000300;		// 8th rconst
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80028f2:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80028f6:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+64, 8, 2); 	// Rotword and XOR between the columns
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80028fe:	2202      	movs	r2, #2
 8002900:	2108      	movs	r1, #8
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fe58 	bl	80025b8 <xor_columns>
	inv_shiftrows_3(rkeys+56); 		// to match fixslicing
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	33e0      	adds	r3, #224	@ 0xe0
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fded 	bl	80024ec <inv_shiftrows_3>
	memcpy(rkeys+72, rkeys+64, 32);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800291e:	2220      	movs	r2, #32
 8002920:	4619      	mov	r1, r3
 8002922:	f003 ff9b 	bl	800685c <memcpy>
	sbox(rkeys+72);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fc6d 	bl	800120c <sbox>
	rkeys[79] ^= 0x00000300; 		// 9th rconst
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8002940:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002944:	601a      	str	r2, [r3, #0]
	rkeys[78] ^= 0x00000300; 		// 9th rconst
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002954:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002958:	601a      	str	r2, [r3, #0]
	rkeys[76] ^= 0x00000300; 		// 9th rconst
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002968:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 800296c:	601a      	str	r2, [r3, #0]
	rkeys[75] ^= 0x00000300; 		// 9th rconst
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800297c:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002980:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys + 72, 8, 2); 	// Rotword and XOR between the columns
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002988:	2202      	movs	r2, #2
 800298a:	2108      	movs	r1, #8
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fe13 	bl	80025b8 <xor_columns>
	memcpy(rkeys+80, rkeys+72, 32);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f503 70a0 	add.w	r0, r3, #320	@ 0x140
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800299e:	2220      	movs	r2, #32
 80029a0:	4619      	mov	r1, r3
 80029a2:	f003 ff5b 	bl	800685c <memcpy>
	sbox(rkeys+80);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe fc2d 	bl	800120c <sbox>
	rkeys[86] ^= 0x00000300; 		// 10th rconst
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80029c0:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80029c4:	601a      	str	r2, [r3, #0]
	rkeys[85] ^= 0x00000300; 		// 10th rconst
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80029d4:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80029d8:	601a      	str	r2, [r3, #0]
	rkeys[83] ^= 0x00000300;		// 10th rconst
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80029e8:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 80029ec:	601a      	str	r2, [r3, #0]
	rkeys[82] ^= 0x00000300; 		// 10th rconst
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80029fc:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
 8002a00:	601a      	str	r2, [r3, #0]
	xor_columns(rkeys+80, 8, 2); 	// Rotword and XOR between the columns
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a08:	2202      	movs	r2, #2
 8002a0a:	2108      	movs	r1, #8
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fdd3 	bl	80025b8 <xor_columns>
	inv_shiftrows_1(rkeys+72);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fcc5 	bl	80023a8 <inv_shiftrows_1>
	for(int i = 1; i < 11; i++) {
 8002a1e:	2301      	movs	r3, #1
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	e036      	b.n	8002a92 <aes128_keyschedule_ffs+0x3a6>
		rkeys[i*8 + 1] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	015b      	lsls	r3, r3, #5
 8002a28:	3304      	adds	r3, #4
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	015b      	lsls	r3, r3, #5
 8002a34:	3304      	adds	r3, #4
 8002a36:	68f9      	ldr	r1, [r7, #12]
 8002a38:	440b      	add	r3, r1
 8002a3a:	43d2      	mvns	r2, r2
 8002a3c:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 2] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	015b      	lsls	r3, r3, #5
 8002a42:	3308      	adds	r3, #8
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4413      	add	r3, r2
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	015b      	lsls	r3, r3, #5
 8002a4e:	3308      	adds	r3, #8
 8002a50:	68f9      	ldr	r1, [r7, #12]
 8002a52:	440b      	add	r3, r1
 8002a54:	43d2      	mvns	r2, r2
 8002a56:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 6] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	015b      	lsls	r3, r3, #5
 8002a5c:	3318      	adds	r3, #24
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4413      	add	r3, r2
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	015b      	lsls	r3, r3, #5
 8002a68:	3318      	adds	r3, #24
 8002a6a:	68f9      	ldr	r1, [r7, #12]
 8002a6c:	440b      	add	r3, r1
 8002a6e:	43d2      	mvns	r2, r2
 8002a70:	601a      	str	r2, [r3, #0]
		rkeys[i*8 + 7] ^= 0xffffffff; 	// NOT to speed up SBox calculations
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	015b      	lsls	r3, r3, #5
 8002a76:	331c      	adds	r3, #28
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	015b      	lsls	r3, r3, #5
 8002a82:	331c      	adds	r3, #28
 8002a84:	68f9      	ldr	r1, [r7, #12]
 8002a86:	440b      	add	r3, r1
 8002a88:	43d2      	mvns	r2, r2
 8002a8a:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < 11; i++) {
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b0a      	cmp	r3, #10
 8002a96:	ddc5      	ble.n	8002a24 <aes128_keyschedule_ffs+0x338>
	// 	printf("%x \n", rkeys[i]);
	// }
	


}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <serial_printf>:
 *      Author: cuauhtemoc
 */

#include "Serial.h"

void serial_printf(UART_HandleTypeDef *huart, uint8_t *pData, uint32_t Timeout){
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b086      	sub	sp, #24
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
	uint16_t Size = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	82fb      	strh	r3, [r7, #22]
	do{
		Size++;
 8002ab2:	8afb      	ldrh	r3, [r7, #22]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	82fb      	strh	r3, [r7, #22]
	}while(pData[Size]!='\0');
 8002ab8:	8afb      	ldrh	r3, [r7, #22]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	4413      	add	r3, r2
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f6      	bne.n	8002ab2 <serial_printf+0x10>
	HAL_UART_Transmit(huart, pData,Size, HAL_MAX_DELAY);
 8002ac4:	8afa      	ldrh	r2, [r7, #22]
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f002 fef5 	bl	80058bc <HAL_UART_Transmit>
}
 8002ad2:	bf00      	nop
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <DWT_Init>:
static unsigned char asociated_data[plaintext_size];
static unsigned int bytes[7] = {32, 64, 128, 192, 256, 320, 512};

char buffer [1024];
unsigned int performance[REP];
void DWT_Init(void) {
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0

    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <DWT_Init+0x34>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8002b10 <DWT_Init+0x34>)
 8002ae6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aea:	60d3      	str	r3, [r2, #12]
    DWT->LAR = 0xC5ACCE55;
 8002aec:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <DWT_Init+0x38>)
 8002aee:	4a0a      	ldr	r2, [pc, #40]	@ (8002b18 <DWT_Init+0x3c>)
 8002af0:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
    DWT->CYCCNT = 0;
 8002af4:	4b07      	ldr	r3, [pc, #28]	@ (8002b14 <DWT_Init+0x38>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002afa:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <DWT_Init+0x38>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a05      	ldr	r2, [pc, #20]	@ (8002b14 <DWT_Init+0x38>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6013      	str	r3, [r2, #0]
}
 8002b06:	bf00      	nop
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000edf0 	.word	0xe000edf0
 8002b14:	e0001000 	.word	0xe0001000
 8002b18:	c5acce55 	.word	0xc5acce55

08002b1c <start_timer>:

void start_timer(void) {
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0;
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <start_timer+0x14>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	605a      	str	r2, [r3, #4]
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e0001000 	.word	0xe0001000

08002b34 <stop_timer>:

uint32_t stop_timer(void) {
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 8002b38:	4b03      	ldr	r3, [pc, #12]	@ (8002b48 <stop_timer+0x14>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e0001000 	.word	0xe0001000

08002b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b090      	sub	sp, #64	@ 0x40
 8002b50:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b52:	f000 fe00 	bl	8003756 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b56:	f000 f9eb 	bl	8002f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b5a:	f000 fafd 	bl	8003158 <MX_GPIO_Init>
  MX_ETH_Init();
 8002b5e:	f000 fa4f 	bl	8003000 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8002b62:	f000 fa9b 	bl	800309c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002b66:	f000 fac9 	bl	80030fc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */


  for (size_t i = 0; i < plaintext_size; i++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b6e:	e010      	b.n	8002b92 <main+0x46>
  {
	  plaintext[i] =i;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b72:	b2d9      	uxtb	r1, r3
 8002b74:	4aa1      	ldr	r2, [pc, #644]	@ (8002dfc <main+0x2b0>)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	4413      	add	r3, r2
 8002b7a:	460a      	mov	r2, r1
 8002b7c:	701a      	strb	r2, [r3, #0]
	  asociated_data[i]=i;
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	b2d9      	uxtb	r1, r3
 8002b82:	4a9f      	ldr	r2, [pc, #636]	@ (8002e00 <main+0x2b4>)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	4413      	add	r3, r2
 8002b88:	460a      	mov	r2, r1
 8002b8a:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < plaintext_size; i++)
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8e:	3301      	adds	r3, #1
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b98:	d3ea      	bcc.n	8002b70 <main+0x24>
  }

  DWT_Init(); // Inicializar el contador de ciclos
 8002b9a:	f7ff ff9f 	bl	8002adc <DWT_Init>
  uint32_t cycles=0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	607b      	str	r3, [r7, #4]
  uint32_t total_cycles=0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	623b      	str	r3, [r7, #32]

  int i=0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]



	  	  	i=0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
	  	  	cycles=0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	607b      	str	r3, [r7, #4]
	  	  	total_cycles=0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	623b      	str	r3, [r7, #32]
	  	  	sprintf(buffer,"\n PMAC-OCB3");
 8002bb6:	4993      	ldr	r1, [pc, #588]	@ (8002e04 <main+0x2b8>)
 8002bb8:	4893      	ldr	r0, [pc, #588]	@ (8002e08 <main+0x2bc>)
 8002bba:	f003 fdfb 	bl	80067b4 <siprintf>
	  	  		serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8002bbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bc2:	4991      	ldr	r1, [pc, #580]	@ (8002e08 <main+0x2bc>)
 8002bc4:	4891      	ldr	r0, [pc, #580]	@ (8002e0c <main+0x2c0>)
 8002bc6:	f7ff ff6c 	bl	8002aa2 <serial_printf>
	  	  		for (int j = 0; j < Number_test; j++) {
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	e032      	b.n	8002c36 <main+0xea>
	  	  			for (i = 0; i < REP; i++) {
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	e01e      	b.n	8002c14 <main+0xc8>
	  	  				start_timer(); // Iniciar el contador de ciclos
 8002bd6:	f7ff ffa1 	bl	8002b1c <start_timer>
	  	  				OCB3(plaintext, ciphertext, nonce, asociated_data, 0, 12, bytes[j], key1, tag);
 8002bda:	4a8d      	ldr	r2, [pc, #564]	@ (8002e10 <main+0x2c4>)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be2:	4a8c      	ldr	r2, [pc, #560]	@ (8002e14 <main+0x2c8>)
 8002be4:	9204      	str	r2, [sp, #16]
 8002be6:	4a8c      	ldr	r2, [pc, #560]	@ (8002e18 <main+0x2cc>)
 8002be8:	9203      	str	r2, [sp, #12]
 8002bea:	9302      	str	r3, [sp, #8]
 8002bec:	230c      	movs	r3, #12
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	4b82      	ldr	r3, [pc, #520]	@ (8002e00 <main+0x2b4>)
 8002bf6:	4a89      	ldr	r2, [pc, #548]	@ (8002e1c <main+0x2d0>)
 8002bf8:	4989      	ldr	r1, [pc, #548]	@ (8002e20 <main+0x2d4>)
 8002bfa:	4880      	ldr	r0, [pc, #512]	@ (8002dfc <main+0x2b0>)
 8002bfc:	f7fd fdbf 	bl	800077e <OCB3>

	  	  				cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 8002c00:	f7ff ff98 	bl	8002b34 <stop_timer>
 8002c04:	6078      	str	r0, [r7, #4]
	  	  				total_cycles=cycles+total_cycles;
 8002c06:	6a3a      	ldr	r2, [r7, #32]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	623b      	str	r3, [r7, #32]
	  	  			for (i = 0; i < REP; i++) {
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3301      	adds	r3, #1
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b1d      	cmp	r3, #29
 8002c18:	dddd      	ble.n	8002bd6 <main+0x8a>
	  	  			}
	  	  			performance[j] = total_cycles/REP;
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	4a81      	ldr	r2, [pc, #516]	@ (8002e24 <main+0x2d8>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	091a      	lsrs	r2, r3, #4
 8002c24:	4980      	ldr	r1, [pc, #512]	@ (8002e28 <main+0x2dc>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  	  			total_cycles=0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	623b      	str	r3, [r7, #32]
	  	  		for (int j = 0; j < Number_test; j++) {
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	3301      	adds	r3, #1
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	ddc9      	ble.n	8002bd0 <main+0x84>
	  	  		}
	  	  	  for (i = 0; i < Number_test; i++) {
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	e020      	b.n	8002c84 <main+0x138>
	  	  			sprintf(buffer,"\n bytes %u ", bytes[i]);
 8002c42:	4a73      	ldr	r2, [pc, #460]	@ (8002e10 <main+0x2c4>)
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4977      	ldr	r1, [pc, #476]	@ (8002e2c <main+0x2e0>)
 8002c4e:	486e      	ldr	r0, [pc, #440]	@ (8002e08 <main+0x2bc>)
 8002c50:	f003 fdb0 	bl	80067b4 <siprintf>
	  	  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8002c54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c58:	496b      	ldr	r1, [pc, #428]	@ (8002e08 <main+0x2bc>)
 8002c5a:	486c      	ldr	r0, [pc, #432]	@ (8002e0c <main+0x2c0>)
 8002c5c:	f7ff ff21 	bl	8002aa2 <serial_printf>
	  	  			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 8002c60:	4a71      	ldr	r2, [pc, #452]	@ (8002e28 <main+0x2dc>)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	4971      	ldr	r1, [pc, #452]	@ (8002e30 <main+0x2e4>)
 8002c6c:	4866      	ldr	r0, [pc, #408]	@ (8002e08 <main+0x2bc>)
 8002c6e:	f003 fda1 	bl	80067b4 <siprintf>
	  	  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8002c72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c76:	4964      	ldr	r1, [pc, #400]	@ (8002e08 <main+0x2bc>)
 8002c78:	4864      	ldr	r0, [pc, #400]	@ (8002e0c <main+0x2c0>)
 8002c7a:	f7ff ff12 	bl	8002aa2 <serial_printf>
	  	  	  for (i = 0; i < Number_test; i++) {
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	dddb      	ble.n	8002c42 <main+0xf6>
	  	  	   }
		for (size_t i = 0; i < plaintext_size; i++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e010      	b.n	8002cb2 <main+0x166>
		{
		  plaintext[i] =i;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	b2d9      	uxtb	r1, r3
 8002c94:	4a59      	ldr	r2, [pc, #356]	@ (8002dfc <main+0x2b0>)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	4413      	add	r3, r2
 8002c9a:	460a      	mov	r2, r1
 8002c9c:	701a      	strb	r2, [r3, #0]
		  asociated_data[i]=i;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	b2d9      	uxtb	r1, r3
 8002ca2:	4a57      	ldr	r2, [pc, #348]	@ (8002e00 <main+0x2b4>)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	460a      	mov	r2, r1
 8002caa:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < plaintext_size; i++)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cb8:	d3ea      	bcc.n	8002c90 <main+0x144>
		}
		i=0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
	  	cycles=0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
	  	total_cycles=0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	623b      	str	r3, [r7, #32]
	  	sprintf(buffer,"\n OCB3+PMAC ENC");
 8002cc6:	495b      	ldr	r1, [pc, #364]	@ (8002e34 <main+0x2e8>)
 8002cc8:	484f      	ldr	r0, [pc, #316]	@ (8002e08 <main+0x2bc>)
 8002cca:	f003 fd73 	bl	80067b4 <siprintf>
	  		serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8002cce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cd2:	494d      	ldr	r1, [pc, #308]	@ (8002e08 <main+0x2bc>)
 8002cd4:	484d      	ldr	r0, [pc, #308]	@ (8002e0c <main+0x2c0>)
 8002cd6:	f7ff fee4 	bl	8002aa2 <serial_printf>
	  		for (int j = 0; j < Number_test; j++) {
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	e035      	b.n	8002d4c <main+0x200>
	  			for (i = 0; i < REP; i++) {
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	e021      	b.n	8002d2a <main+0x1de>
	  				start_timer(); // Iniciar el contador de ciclos
 8002ce6:	f7ff ff19 	bl	8002b1c <start_timer>
	  				OCB3(plaintext, ciphertext, nonce, asociated_data, bytes[j], 12, bytes[j], key1, tag);
 8002cea:	4a49      	ldr	r2, [pc, #292]	@ (8002e10 <main+0x2c4>)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf2:	4947      	ldr	r1, [pc, #284]	@ (8002e10 <main+0x2c4>)
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002cfa:	4946      	ldr	r1, [pc, #280]	@ (8002e14 <main+0x2c8>)
 8002cfc:	9104      	str	r1, [sp, #16]
 8002cfe:	4946      	ldr	r1, [pc, #280]	@ (8002e18 <main+0x2cc>)
 8002d00:	9103      	str	r1, [sp, #12]
 8002d02:	9202      	str	r2, [sp, #8]
 8002d04:	220c      	movs	r2, #12
 8002d06:	9201      	str	r2, [sp, #4]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e00 <main+0x2b4>)
 8002d0c:	4a43      	ldr	r2, [pc, #268]	@ (8002e1c <main+0x2d0>)
 8002d0e:	4944      	ldr	r1, [pc, #272]	@ (8002e20 <main+0x2d4>)
 8002d10:	483a      	ldr	r0, [pc, #232]	@ (8002dfc <main+0x2b0>)
 8002d12:	f7fd fd34 	bl	800077e <OCB3>
	  				cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 8002d16:	f7ff ff0d 	bl	8002b34 <stop_timer>
 8002d1a:	6078      	str	r0, [r7, #4]
	  				total_cycles=cycles+total_cycles;
 8002d1c:	6a3a      	ldr	r2, [r7, #32]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	623b      	str	r3, [r7, #32]
	  			for (i = 0; i < REP; i++) {
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	3301      	adds	r3, #1
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	2b1d      	cmp	r3, #29
 8002d2e:	ddda      	ble.n	8002ce6 <main+0x19a>
	  			}
	  			performance[j] = total_cycles/REP;
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	4a3c      	ldr	r2, [pc, #240]	@ (8002e24 <main+0x2d8>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	091a      	lsrs	r2, r3, #4
 8002d3a:	493b      	ldr	r1, [pc, #236]	@ (8002e28 <main+0x2dc>)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  			total_cycles=0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	623b      	str	r3, [r7, #32]
	  		for (int j = 0; j < Number_test; j++) {
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	ddc6      	ble.n	8002ce0 <main+0x194>
	  		}
	  	  for (i = 0; i < Number_test; i++) {
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	e020      	b.n	8002d9a <main+0x24e>
	  			sprintf(buffer,"\n bytes %u ", bytes[i]);
 8002d58:	4a2d      	ldr	r2, [pc, #180]	@ (8002e10 <main+0x2c4>)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4932      	ldr	r1, [pc, #200]	@ (8002e2c <main+0x2e0>)
 8002d64:	4828      	ldr	r0, [pc, #160]	@ (8002e08 <main+0x2bc>)
 8002d66:	f003 fd25 	bl	80067b4 <siprintf>
	  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8002d6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d6e:	4926      	ldr	r1, [pc, #152]	@ (8002e08 <main+0x2bc>)
 8002d70:	4826      	ldr	r0, [pc, #152]	@ (8002e0c <main+0x2c0>)
 8002d72:	f7ff fe96 	bl	8002aa2 <serial_printf>
	  			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 8002d76:	4a2c      	ldr	r2, [pc, #176]	@ (8002e28 <main+0x2dc>)
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	492b      	ldr	r1, [pc, #172]	@ (8002e30 <main+0x2e4>)
 8002d82:	4821      	ldr	r0, [pc, #132]	@ (8002e08 <main+0x2bc>)
 8002d84:	f003 fd16 	bl	80067b4 <siprintf>
	  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8002d88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d8c:	491e      	ldr	r1, [pc, #120]	@ (8002e08 <main+0x2bc>)
 8002d8e:	481f      	ldr	r0, [pc, #124]	@ (8002e0c <main+0x2c0>)
 8002d90:	f7ff fe87 	bl	8002aa2 <serial_printf>
	  	  for (i = 0; i < Number_test; i++) {
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	3301      	adds	r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	dddb      	ble.n	8002d58 <main+0x20c>
	  	   }


	  	for (size_t i = 0; i < plaintext_size; i++)
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	e010      	b.n	8002dc8 <main+0x27c>
	  			{
	  			  plaintext[i] =i;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	b2d9      	uxtb	r1, r3
 8002daa:	4a14      	ldr	r2, [pc, #80]	@ (8002dfc <main+0x2b0>)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	460a      	mov	r2, r1
 8002db2:	701a      	strb	r2, [r3, #0]
	  			  asociated_data[i]=i;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	b2d9      	uxtb	r1, r3
 8002db8:	4a11      	ldr	r2, [pc, #68]	@ (8002e00 <main+0x2b4>)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	460a      	mov	r2, r1
 8002dc0:	701a      	strb	r2, [r3, #0]
	  	for (size_t i = 0; i < plaintext_size; i++)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dce:	d3ea      	bcc.n	8002da6 <main+0x25a>
	  			}
	  			i=0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
	  		  	cycles=0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	607b      	str	r3, [r7, #4]
	  		  	total_cycles=0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	623b      	str	r3, [r7, #32]
	  		  	sprintf(buffer,"\n OCB3 ENC");
 8002ddc:	4916      	ldr	r1, [pc, #88]	@ (8002e38 <main+0x2ec>)
 8002dde:	480a      	ldr	r0, [pc, #40]	@ (8002e08 <main+0x2bc>)
 8002de0:	f003 fce8 	bl	80067b4 <siprintf>
	  		  		serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002de8:	4907      	ldr	r1, [pc, #28]	@ (8002e08 <main+0x2bc>)
 8002dea:	4808      	ldr	r0, [pc, #32]	@ (8002e0c <main+0x2c0>)
 8002dec:	f7ff fe59 	bl	8002aa2 <serial_printf>
	  		  		for (int j = 0; j < Number_test; j++) {
 8002df0:	2300      	movs	r3, #0
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	e052      	b.n	8002e9c <main+0x350>
	  		  			for (i = 0; i < REP; i++) {
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	e03e      	b.n	8002e7a <main+0x32e>
 8002dfc:	2000097c 	.word	0x2000097c
 8002e00:	2000297c 	.word	0x2000297c
 8002e04:	08007128 	.word	0x08007128
 8002e08:	2000397c 	.word	0x2000397c
 8002e0c:	200003dc 	.word	0x200003dc
 8002e10:	20000020 	.word	0x20000020
 8002e14:	2000096c 	.word	0x2000096c
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	20000010 	.word	0x20000010
 8002e20:	2000197c 	.word	0x2000197c
 8002e24:	88888889 	.word	0x88888889
 8002e28:	20003d7c 	.word	0x20003d7c
 8002e2c:	08007134 	.word	0x08007134
 8002e30:	08007140 	.word	0x08007140
 8002e34:	08007158 	.word	0x08007158
 8002e38:	08007168 	.word	0x08007168
	  		  				start_timer(); // Iniciar el contador de ciclos
 8002e3c:	f7ff fe6e 	bl	8002b1c <start_timer>
	  		  				OCB3(plaintext, ciphertext, nonce, asociated_data, bytes[j], 12, 0, key1, tag);
 8002e40:	4a2e      	ldr	r2, [pc, #184]	@ (8002efc <main+0x3b0>)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e48:	4a2d      	ldr	r2, [pc, #180]	@ (8002f00 <main+0x3b4>)
 8002e4a:	9204      	str	r2, [sp, #16]
 8002e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8002f04 <main+0x3b8>)
 8002e4e:	9203      	str	r2, [sp, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	9202      	str	r2, [sp, #8]
 8002e54:	220c      	movs	r2, #12
 8002e56:	9201      	str	r2, [sp, #4]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f08 <main+0x3bc>)
 8002e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f0c <main+0x3c0>)
 8002e5e:	492c      	ldr	r1, [pc, #176]	@ (8002f10 <main+0x3c4>)
 8002e60:	482c      	ldr	r0, [pc, #176]	@ (8002f14 <main+0x3c8>)
 8002e62:	f7fd fc8c 	bl	800077e <OCB3>
	  		  				cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 8002e66:	f7ff fe65 	bl	8002b34 <stop_timer>
 8002e6a:	6078      	str	r0, [r7, #4]
	  		  				total_cycles=cycles+total_cycles;
 8002e6c:	6a3a      	ldr	r2, [r7, #32]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	623b      	str	r3, [r7, #32]
	  		  			for (i = 0; i < REP; i++) {
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	3301      	adds	r3, #1
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	2b1d      	cmp	r3, #29
 8002e7e:	dddd      	ble.n	8002e3c <main+0x2f0>
	  		  			}
	  		  			performance[j] = total_cycles/REP;
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	4a25      	ldr	r2, [pc, #148]	@ (8002f18 <main+0x3cc>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	091a      	lsrs	r2, r3, #4
 8002e8a:	4924      	ldr	r1, [pc, #144]	@ (8002f1c <main+0x3d0>)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  		  			total_cycles=0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	623b      	str	r3, [r7, #32]
	  		  		for (int j = 0; j < Number_test; j++) {
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	dda9      	ble.n	8002df6 <main+0x2aa>
	  		  		}
	  		  	  for (i = 0; i < Number_test; i++) {
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	e020      	b.n	8002eea <main+0x39e>
	  		  			sprintf(buffer,"\n bytes %u ", bytes[i]);
 8002ea8:	4a14      	ldr	r2, [pc, #80]	@ (8002efc <main+0x3b0>)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	491b      	ldr	r1, [pc, #108]	@ (8002f20 <main+0x3d4>)
 8002eb4:	481b      	ldr	r0, [pc, #108]	@ (8002f24 <main+0x3d8>)
 8002eb6:	f003 fc7d 	bl	80067b4 <siprintf>
	  		  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8002eba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ebe:	4919      	ldr	r1, [pc, #100]	@ (8002f24 <main+0x3d8>)
 8002ec0:	4819      	ldr	r0, [pc, #100]	@ (8002f28 <main+0x3dc>)
 8002ec2:	f7ff fdee 	bl	8002aa2 <serial_printf>
	  		  			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 8002ec6:	4a15      	ldr	r2, [pc, #84]	@ (8002f1c <main+0x3d0>)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	4916      	ldr	r1, [pc, #88]	@ (8002f2c <main+0x3e0>)
 8002ed2:	4814      	ldr	r0, [pc, #80]	@ (8002f24 <main+0x3d8>)
 8002ed4:	f003 fc6e 	bl	80067b4 <siprintf>
	  		  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8002ed8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002edc:	4911      	ldr	r1, [pc, #68]	@ (8002f24 <main+0x3d8>)
 8002ede:	4812      	ldr	r0, [pc, #72]	@ (8002f28 <main+0x3dc>)
 8002ee0:	f7ff fddf 	bl	8002aa2 <serial_printf>
	  		  	  for (i = 0; i < Number_test; i++) {
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	dddb      	ble.n	8002ea8 <main+0x35c>
 8002ef0:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3728      	adds	r7, #40	@ 0x28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000020 	.word	0x20000020
 8002f00:	2000096c 	.word	0x2000096c
 8002f04:	20000000 	.word	0x20000000
 8002f08:	2000297c 	.word	0x2000297c
 8002f0c:	20000010 	.word	0x20000010
 8002f10:	2000197c 	.word	0x2000197c
 8002f14:	2000097c 	.word	0x2000097c
 8002f18:	88888889 	.word	0x88888889
 8002f1c:	20003d7c 	.word	0x20003d7c
 8002f20:	08007134 	.word	0x08007134
 8002f24:	2000397c 	.word	0x2000397c
 8002f28:	200003dc 	.word	0x200003dc
 8002f2c:	08007140 	.word	0x08007140

08002f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b094      	sub	sp, #80	@ 0x50
 8002f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f36:	f107 0320 	add.w	r3, r7, #32
 8002f3a:	2230      	movs	r2, #48	@ 0x30
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f003 fc58 	bl	80067f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f44:	f107 030c 	add.w	r3, r7, #12
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002f54:	f001 fb9a 	bl	800468c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f58:	4b27      	ldr	r3, [pc, #156]	@ (8002ff8 <SystemClock_Config+0xc8>)
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	4a26      	ldr	r2, [pc, #152]	@ (8002ff8 <SystemClock_Config+0xc8>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f62:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f64:	4b24      	ldr	r3, [pc, #144]	@ (8002ff8 <SystemClock_Config+0xc8>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002f70:	4b22      	ldr	r3, [pc, #136]	@ (8002ffc <SystemClock_Config+0xcc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002f78:	4a20      	ldr	r2, [pc, #128]	@ (8002ffc <SystemClock_Config+0xcc>)
 8002f7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4b1e      	ldr	r3, [pc, #120]	@ (8002ffc <SystemClock_Config+0xcc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002f90:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f96:	2302      	movs	r3, #2
 8002f98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002fa4:	2348      	movs	r3, #72	@ 0x48
 8002fa6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002fac:	2303      	movs	r3, #3
 8002fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fb0:	f107 0320 	add.w	r3, r7, #32
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f001 fb79 	bl	80046ac <HAL_RCC_OscConfig>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002fc0:	f000 f96c 	bl	800329c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fc4:	230f      	movs	r3, #15
 8002fc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002fda:	f107 030c 	add.w	r3, r7, #12
 8002fde:	2102      	movs	r1, #2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f001 fe07 	bl	8004bf4 <HAL_RCC_ClockConfig>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002fec:	f000 f956 	bl	800329c <Error_Handler>
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	3750      	adds	r7, #80	@ 0x50
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40007000 	.word	0x40007000

08003000 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8003004:	4b1f      	ldr	r3, [pc, #124]	@ (8003084 <MX_ETH_Init+0x84>)
 8003006:	4a20      	ldr	r2, [pc, #128]	@ (8003088 <MX_ETH_Init+0x88>)
 8003008:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800300a:	4b20      	ldr	r3, [pc, #128]	@ (800308c <MX_ETH_Init+0x8c>)
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003010:	4b1e      	ldr	r3, [pc, #120]	@ (800308c <MX_ETH_Init+0x8c>)
 8003012:	2280      	movs	r2, #128	@ 0x80
 8003014:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8003016:	4b1d      	ldr	r3, [pc, #116]	@ (800308c <MX_ETH_Init+0x8c>)
 8003018:	22e1      	movs	r2, #225	@ 0xe1
 800301a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800301c:	4b1b      	ldr	r3, [pc, #108]	@ (800308c <MX_ETH_Init+0x8c>)
 800301e:	2200      	movs	r2, #0
 8003020:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8003022:	4b1a      	ldr	r3, [pc, #104]	@ (800308c <MX_ETH_Init+0x8c>)
 8003024:	2200      	movs	r2, #0
 8003026:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8003028:	4b18      	ldr	r3, [pc, #96]	@ (800308c <MX_ETH_Init+0x8c>)
 800302a:	2200      	movs	r2, #0
 800302c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800302e:	4b15      	ldr	r3, [pc, #84]	@ (8003084 <MX_ETH_Init+0x84>)
 8003030:	4a16      	ldr	r2, [pc, #88]	@ (800308c <MX_ETH_Init+0x8c>)
 8003032:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003034:	4b13      	ldr	r3, [pc, #76]	@ (8003084 <MX_ETH_Init+0x84>)
 8003036:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800303a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800303c:	4b11      	ldr	r3, [pc, #68]	@ (8003084 <MX_ETH_Init+0x84>)
 800303e:	4a14      	ldr	r2, [pc, #80]	@ (8003090 <MX_ETH_Init+0x90>)
 8003040:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003042:	4b10      	ldr	r3, [pc, #64]	@ (8003084 <MX_ETH_Init+0x84>)
 8003044:	4a13      	ldr	r2, [pc, #76]	@ (8003094 <MX_ETH_Init+0x94>)
 8003046:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8003048:	4b0e      	ldr	r3, [pc, #56]	@ (8003084 <MX_ETH_Init+0x84>)
 800304a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800304e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8003050:	480c      	ldr	r0, [pc, #48]	@ (8003084 <MX_ETH_Init+0x84>)
 8003052:	f000 fce7 	bl	8003a24 <HAL_ETH_Init>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800305c:	f000 f91e 	bl	800329c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003060:	2238      	movs	r2, #56	@ 0x38
 8003062:	2100      	movs	r1, #0
 8003064:	480c      	ldr	r0, [pc, #48]	@ (8003098 <MX_ETH_Init+0x98>)
 8003066:	f003 fbc5 	bl	80067f4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800306a:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <MX_ETH_Init+0x98>)
 800306c:	2221      	movs	r2, #33	@ 0x21
 800306e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003070:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <MX_ETH_Init+0x98>)
 8003072:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003076:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003078:	4b07      	ldr	r3, [pc, #28]	@ (8003098 <MX_ETH_Init+0x98>)
 800307a:	2200      	movs	r2, #0
 800307c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	2000032c 	.word	0x2000032c
 8003088:	40028000 	.word	0x40028000
 800308c:	20003df4 	.word	0x20003df4
 8003090:	20000138 	.word	0x20000138
 8003094:	20000098 	.word	0x20000098
 8003098:	200002f4 	.word	0x200002f4

0800309c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030a0:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <MX_USART3_UART_Init+0x58>)
 80030a2:	4a15      	ldr	r2, [pc, #84]	@ (80030f8 <MX_USART3_UART_Init+0x5c>)
 80030a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80030a6:	4b13      	ldr	r3, [pc, #76]	@ (80030f4 <MX_USART3_UART_Init+0x58>)
 80030a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030ae:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <MX_USART3_UART_Init+0x58>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030b4:	4b0f      	ldr	r3, [pc, #60]	@ (80030f4 <MX_USART3_UART_Init+0x58>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030ba:	4b0e      	ldr	r3, [pc, #56]	@ (80030f4 <MX_USART3_UART_Init+0x58>)
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030c0:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <MX_USART3_UART_Init+0x58>)
 80030c2:	220c      	movs	r2, #12
 80030c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030c6:	4b0b      	ldr	r3, [pc, #44]	@ (80030f4 <MX_USART3_UART_Init+0x58>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030cc:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <MX_USART3_UART_Init+0x58>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030d2:	4b08      	ldr	r3, [pc, #32]	@ (80030f4 <MX_USART3_UART_Init+0x58>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030d8:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <MX_USART3_UART_Init+0x58>)
 80030da:	2200      	movs	r2, #0
 80030dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030de:	4805      	ldr	r0, [pc, #20]	@ (80030f4 <MX_USART3_UART_Init+0x58>)
 80030e0:	f002 fb9e 	bl	8005820 <HAL_UART_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80030ea:	f000 f8d7 	bl	800329c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200003dc 	.word	0x200003dc
 80030f8:	40004800 	.word	0x40004800

080030fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003100:	4b14      	ldr	r3, [pc, #80]	@ (8003154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003102:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003106:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003108:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800310a:	2206      	movs	r2, #6
 800310c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800310e:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003110:	2202      	movs	r2, #2
 8003112:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003114:	4b0f      	ldr	r3, [pc, #60]	@ (8003154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003116:	2200      	movs	r2, #0
 8003118:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800311a:	4b0e      	ldr	r3, [pc, #56]	@ (8003154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800311c:	2202      	movs	r2, #2
 800311e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003120:	4b0c      	ldr	r3, [pc, #48]	@ (8003154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003122:	2201      	movs	r2, #1
 8003124:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003126:	4b0b      	ldr	r3, [pc, #44]	@ (8003154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003128:	2200      	movs	r2, #0
 800312a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800312c:	4b09      	ldr	r3, [pc, #36]	@ (8003154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800312e:	2200      	movs	r2, #0
 8003130:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003132:	4b08      	ldr	r3, [pc, #32]	@ (8003154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003134:	2201      	movs	r2, #1
 8003136:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003138:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800313e:	4805      	ldr	r0, [pc, #20]	@ (8003154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003140:	f001 f95b 	bl	80043fa <HAL_PCD_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800314a:	f000 f8a7 	bl	800329c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000464 	.word	0x20000464

08003158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08c      	sub	sp, #48	@ 0x30
 800315c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315e:	f107 031c 	add.w	r3, r7, #28
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	605a      	str	r2, [r3, #4]
 8003168:	609a      	str	r2, [r3, #8]
 800316a:	60da      	str	r2, [r3, #12]
 800316c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800316e:	4b47      	ldr	r3, [pc, #284]	@ (800328c <MX_GPIO_Init+0x134>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	4a46      	ldr	r2, [pc, #280]	@ (800328c <MX_GPIO_Init+0x134>)
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	6313      	str	r3, [r2, #48]	@ 0x30
 800317a:	4b44      	ldr	r3, [pc, #272]	@ (800328c <MX_GPIO_Init+0x134>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003186:	4b41      	ldr	r3, [pc, #260]	@ (800328c <MX_GPIO_Init+0x134>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	4a40      	ldr	r2, [pc, #256]	@ (800328c <MX_GPIO_Init+0x134>)
 800318c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003190:	6313      	str	r3, [r2, #48]	@ 0x30
 8003192:	4b3e      	ldr	r3, [pc, #248]	@ (800328c <MX_GPIO_Init+0x134>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800319e:	4b3b      	ldr	r3, [pc, #236]	@ (800328c <MX_GPIO_Init+0x134>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	4a3a      	ldr	r2, [pc, #232]	@ (800328c <MX_GPIO_Init+0x134>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031aa:	4b38      	ldr	r3, [pc, #224]	@ (800328c <MX_GPIO_Init+0x134>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b6:	4b35      	ldr	r3, [pc, #212]	@ (800328c <MX_GPIO_Init+0x134>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	4a34      	ldr	r2, [pc, #208]	@ (800328c <MX_GPIO_Init+0x134>)
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031c2:	4b32      	ldr	r3, [pc, #200]	@ (800328c <MX_GPIO_Init+0x134>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ce:	4b2f      	ldr	r3, [pc, #188]	@ (800328c <MX_GPIO_Init+0x134>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	4a2e      	ldr	r2, [pc, #184]	@ (800328c <MX_GPIO_Init+0x134>)
 80031d4:	f043 0308 	orr.w	r3, r3, #8
 80031d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031da:	4b2c      	ldr	r3, [pc, #176]	@ (800328c <MX_GPIO_Init+0x134>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031e6:	4b29      	ldr	r3, [pc, #164]	@ (800328c <MX_GPIO_Init+0x134>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	4a28      	ldr	r2, [pc, #160]	@ (800328c <MX_GPIO_Init+0x134>)
 80031ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f2:	4b26      	ldr	r3, [pc, #152]	@ (800328c <MX_GPIO_Init+0x134>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80031fe:	2200      	movs	r2, #0
 8003200:	f244 0181 	movw	r1, #16513	@ 0x4081
 8003204:	4822      	ldr	r0, [pc, #136]	@ (8003290 <MX_GPIO_Init+0x138>)
 8003206:	f001 f8df 	bl	80043c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800320a:	2200      	movs	r2, #0
 800320c:	2140      	movs	r1, #64	@ 0x40
 800320e:	4821      	ldr	r0, [pc, #132]	@ (8003294 <MX_GPIO_Init+0x13c>)
 8003210:	f001 f8da 	bl	80043c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003214:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800321a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800321e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003224:	f107 031c 	add.w	r3, r7, #28
 8003228:	4619      	mov	r1, r3
 800322a:	481b      	ldr	r0, [pc, #108]	@ (8003298 <MX_GPIO_Init+0x140>)
 800322c:	f000 ff20 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003230:	f244 0381 	movw	r3, #16513	@ 0x4081
 8003234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003236:	2301      	movs	r3, #1
 8003238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323e:	2300      	movs	r3, #0
 8003240:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003242:	f107 031c 	add.w	r3, r7, #28
 8003246:	4619      	mov	r1, r3
 8003248:	4811      	ldr	r0, [pc, #68]	@ (8003290 <MX_GPIO_Init+0x138>)
 800324a:	f000 ff11 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800324e:	2340      	movs	r3, #64	@ 0x40
 8003250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003252:	2301      	movs	r3, #1
 8003254:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003256:	2300      	movs	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325a:	2300      	movs	r3, #0
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800325e:	f107 031c 	add.w	r3, r7, #28
 8003262:	4619      	mov	r1, r3
 8003264:	480b      	ldr	r0, [pc, #44]	@ (8003294 <MX_GPIO_Init+0x13c>)
 8003266:	f000 ff03 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800326a:	2380      	movs	r3, #128	@ 0x80
 800326c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800326e:	2300      	movs	r3, #0
 8003270:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003276:	f107 031c 	add.w	r3, r7, #28
 800327a:	4619      	mov	r1, r3
 800327c:	4805      	ldr	r0, [pc, #20]	@ (8003294 <MX_GPIO_Init+0x13c>)
 800327e:	f000 fef7 	bl	8004070 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003282:	bf00      	nop
 8003284:	3730      	adds	r7, #48	@ 0x30
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	40020400 	.word	0x40020400
 8003294:	40021800 	.word	0x40021800
 8003298:	40020800 	.word	0x40020800

0800329c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032a0:	b672      	cpsid	i
}
 80032a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032a4:	bf00      	nop
 80032a6:	e7fd      	b.n	80032a4 <Error_Handler+0x8>

080032a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80032ae:	4b0f      	ldr	r3, [pc, #60]	@ (80032ec <HAL_MspInit+0x44>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	4a0e      	ldr	r2, [pc, #56]	@ (80032ec <HAL_MspInit+0x44>)
 80032b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ba:	4b0c      	ldr	r3, [pc, #48]	@ (80032ec <HAL_MspInit+0x44>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c6:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <HAL_MspInit+0x44>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ca:	4a08      	ldr	r2, [pc, #32]	@ (80032ec <HAL_MspInit+0x44>)
 80032cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032d2:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <HAL_MspInit+0x44>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800

080032f0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08e      	sub	sp, #56	@ 0x38
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a4e      	ldr	r2, [pc, #312]	@ (8003448 <HAL_ETH_MspInit+0x158>)
 800330e:	4293      	cmp	r3, r2
 8003310:	f040 8096 	bne.w	8003440 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003314:	4b4d      	ldr	r3, [pc, #308]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	4a4c      	ldr	r2, [pc, #304]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 800331a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800331e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003320:	4b4a      	ldr	r3, [pc, #296]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003328:	623b      	str	r3, [r7, #32]
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	4b47      	ldr	r3, [pc, #284]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 800332e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003330:	4a46      	ldr	r2, [pc, #280]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 8003332:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003336:	6313      	str	r3, [r2, #48]	@ 0x30
 8003338:	4b44      	ldr	r3, [pc, #272]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 800333a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	4b41      	ldr	r3, [pc, #260]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 8003346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003348:	4a40      	ldr	r2, [pc, #256]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 800334a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800334e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003350:	4b3e      	ldr	r3, [pc, #248]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800335c:	4b3b      	ldr	r3, [pc, #236]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003360:	4a3a      	ldr	r2, [pc, #232]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 8003362:	f043 0304 	orr.w	r3, r3, #4
 8003366:	6313      	str	r3, [r2, #48]	@ 0x30
 8003368:	4b38      	ldr	r3, [pc, #224]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003374:	4b35      	ldr	r3, [pc, #212]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003378:	4a34      	ldr	r2, [pc, #208]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003380:	4b32      	ldr	r3, [pc, #200]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 8003382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338c:	4b2f      	ldr	r3, [pc, #188]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	4a2e      	ldr	r2, [pc, #184]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 8003392:	f043 0302 	orr.w	r3, r3, #2
 8003396:	6313      	str	r3, [r2, #48]	@ 0x30
 8003398:	4b2c      	ldr	r3, [pc, #176]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 800339a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033a4:	4b29      	ldr	r3, [pc, #164]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 80033a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a8:	4a28      	ldr	r2, [pc, #160]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 80033aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b0:	4b26      	ldr	r3, [pc, #152]	@ (800344c <HAL_ETH_MspInit+0x15c>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80033bc:	2332      	movs	r3, #50	@ 0x32
 80033be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c0:	2302      	movs	r3, #2
 80033c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c8:	2303      	movs	r3, #3
 80033ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033cc:	230b      	movs	r3, #11
 80033ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033d4:	4619      	mov	r1, r3
 80033d6:	481e      	ldr	r0, [pc, #120]	@ (8003450 <HAL_ETH_MspInit+0x160>)
 80033d8:	f000 fe4a 	bl	8004070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80033dc:	2386      	movs	r3, #134	@ 0x86
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e0:	2302      	movs	r3, #2
 80033e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e8:	2303      	movs	r3, #3
 80033ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033ec:	230b      	movs	r3, #11
 80033ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033f4:	4619      	mov	r1, r3
 80033f6:	4817      	ldr	r0, [pc, #92]	@ (8003454 <HAL_ETH_MspInit+0x164>)
 80033f8:	f000 fe3a 	bl	8004070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80033fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003400:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003402:	2302      	movs	r3, #2
 8003404:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003406:	2300      	movs	r3, #0
 8003408:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340a:	2303      	movs	r3, #3
 800340c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800340e:	230b      	movs	r3, #11
 8003410:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003416:	4619      	mov	r1, r3
 8003418:	480f      	ldr	r0, [pc, #60]	@ (8003458 <HAL_ETH_MspInit+0x168>)
 800341a:	f000 fe29 	bl	8004070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800341e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003424:	2302      	movs	r3, #2
 8003426:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342c:	2303      	movs	r3, #3
 800342e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003430:	230b      	movs	r3, #11
 8003432:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003438:	4619      	mov	r1, r3
 800343a:	4808      	ldr	r0, [pc, #32]	@ (800345c <HAL_ETH_MspInit+0x16c>)
 800343c:	f000 fe18 	bl	8004070 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003440:	bf00      	nop
 8003442:	3738      	adds	r7, #56	@ 0x38
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40028000 	.word	0x40028000
 800344c:	40023800 	.word	0x40023800
 8003450:	40020800 	.word	0x40020800
 8003454:	40020000 	.word	0x40020000
 8003458:	40020400 	.word	0x40020400
 800345c:	40021800 	.word	0x40021800

08003460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b0aa      	sub	sp, #168	@ 0xa8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003468:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	60da      	str	r2, [r3, #12]
 8003476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003478:	f107 0310 	add.w	r3, r7, #16
 800347c:	2284      	movs	r2, #132	@ 0x84
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f003 f9b7 	bl	80067f4 <memset>
  if(huart->Instance==USART3)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a22      	ldr	r2, [pc, #136]	@ (8003514 <HAL_UART_MspInit+0xb4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d13c      	bne.n	800350a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003490:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003494:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003496:	2300      	movs	r3, #0
 8003498:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800349a:	f107 0310 	add.w	r3, r7, #16
 800349e:	4618      	mov	r0, r3
 80034a0:	f001 fdce 	bl	8005040 <HAL_RCCEx_PeriphCLKConfig>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80034aa:	f7ff fef7 	bl	800329c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80034ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003518 <HAL_UART_MspInit+0xb8>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	4a19      	ldr	r2, [pc, #100]	@ (8003518 <HAL_UART_MspInit+0xb8>)
 80034b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ba:	4b17      	ldr	r3, [pc, #92]	@ (8003518 <HAL_UART_MspInit+0xb8>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034c6:	4b14      	ldr	r3, [pc, #80]	@ (8003518 <HAL_UART_MspInit+0xb8>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	4a13      	ldr	r2, [pc, #76]	@ (8003518 <HAL_UART_MspInit+0xb8>)
 80034cc:	f043 0308 	orr.w	r3, r3, #8
 80034d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034d2:	4b11      	ldr	r3, [pc, #68]	@ (8003518 <HAL_UART_MspInit+0xb8>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80034de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80034e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e6:	2302      	movs	r3, #2
 80034e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f2:	2303      	movs	r3, #3
 80034f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034f8:	2307      	movs	r3, #7
 80034fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034fe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003502:	4619      	mov	r1, r3
 8003504:	4805      	ldr	r0, [pc, #20]	@ (800351c <HAL_UART_MspInit+0xbc>)
 8003506:	f000 fdb3 	bl	8004070 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800350a:	bf00      	nop
 800350c:	37a8      	adds	r7, #168	@ 0xa8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40004800 	.word	0x40004800
 8003518:	40023800 	.word	0x40023800
 800351c:	40020c00 	.word	0x40020c00

08003520 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b0ac      	sub	sp, #176	@ 0xb0
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003528:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	60da      	str	r2, [r3, #12]
 8003536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003538:	f107 0318 	add.w	r3, r7, #24
 800353c:	2284      	movs	r2, #132	@ 0x84
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f003 f957 	bl	80067f4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800354e:	d159      	bne.n	8003604 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003550:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003554:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003556:	2300      	movs	r3, #0
 8003558:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800355c:	f107 0318 	add.w	r3, r7, #24
 8003560:	4618      	mov	r0, r3
 8003562:	f001 fd6d 	bl	8005040 <HAL_RCCEx_PeriphCLKConfig>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800356c:	f7ff fe96 	bl	800329c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003570:	4b26      	ldr	r3, [pc, #152]	@ (800360c <HAL_PCD_MspInit+0xec>)
 8003572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003574:	4a25      	ldr	r2, [pc, #148]	@ (800360c <HAL_PCD_MspInit+0xec>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	6313      	str	r3, [r2, #48]	@ 0x30
 800357c:	4b23      	ldr	r3, [pc, #140]	@ (800360c <HAL_PCD_MspInit+0xec>)
 800357e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003588:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800358c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003590:	2302      	movs	r3, #2
 8003592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359c:	2303      	movs	r3, #3
 800359e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80035a2:	230a      	movs	r3, #10
 80035a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80035ac:	4619      	mov	r1, r3
 80035ae:	4818      	ldr	r0, [pc, #96]	@ (8003610 <HAL_PCD_MspInit+0xf0>)
 80035b0:	f000 fd5e 	bl	8004070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80035b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035bc:	2300      	movs	r3, #0
 80035be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80035c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80035cc:	4619      	mov	r1, r3
 80035ce:	4810      	ldr	r0, [pc, #64]	@ (8003610 <HAL_PCD_MspInit+0xf0>)
 80035d0:	f000 fd4e 	bl	8004070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80035d4:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <HAL_PCD_MspInit+0xec>)
 80035d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d8:	4a0c      	ldr	r2, [pc, #48]	@ (800360c <HAL_PCD_MspInit+0xec>)
 80035da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035de:	6353      	str	r3, [r2, #52]	@ 0x34
 80035e0:	4b0a      	ldr	r3, [pc, #40]	@ (800360c <HAL_PCD_MspInit+0xec>)
 80035e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4b07      	ldr	r3, [pc, #28]	@ (800360c <HAL_PCD_MspInit+0xec>)
 80035ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f0:	4a06      	ldr	r2, [pc, #24]	@ (800360c <HAL_PCD_MspInit+0xec>)
 80035f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80035f8:	4b04      	ldr	r3, [pc, #16]	@ (800360c <HAL_PCD_MspInit+0xec>)
 80035fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003604:	bf00      	nop
 8003606:	37b0      	adds	r7, #176	@ 0xb0
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40023800 	.word	0x40023800
 8003610:	40020000 	.word	0x40020000

08003614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003618:	bf00      	nop
 800361a:	e7fd      	b.n	8003618 <NMI_Handler+0x4>

0800361c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003620:	bf00      	nop
 8003622:	e7fd      	b.n	8003620 <HardFault_Handler+0x4>

08003624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003628:	bf00      	nop
 800362a:	e7fd      	b.n	8003628 <MemManage_Handler+0x4>

0800362c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003630:	bf00      	nop
 8003632:	e7fd      	b.n	8003630 <BusFault_Handler+0x4>

08003634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003638:	bf00      	nop
 800363a:	e7fd      	b.n	8003638 <UsageFault_Handler+0x4>

0800363c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003640:	bf00      	nop
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800364a:	b480      	push	{r7}
 800364c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800366a:	f000 f8b1 	bl	80037d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800367c:	4a14      	ldr	r2, [pc, #80]	@ (80036d0 <_sbrk+0x5c>)
 800367e:	4b15      	ldr	r3, [pc, #84]	@ (80036d4 <_sbrk+0x60>)
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003688:	4b13      	ldr	r3, [pc, #76]	@ (80036d8 <_sbrk+0x64>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003690:	4b11      	ldr	r3, [pc, #68]	@ (80036d8 <_sbrk+0x64>)
 8003692:	4a12      	ldr	r2, [pc, #72]	@ (80036dc <_sbrk+0x68>)
 8003694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003696:	4b10      	ldr	r3, [pc, #64]	@ (80036d8 <_sbrk+0x64>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d207      	bcs.n	80036b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036a4:	f003 f8ae 	bl	8006804 <__errno>
 80036a8:	4603      	mov	r3, r0
 80036aa:	220c      	movs	r2, #12
 80036ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036b2:	e009      	b.n	80036c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036b4:	4b08      	ldr	r3, [pc, #32]	@ (80036d8 <_sbrk+0x64>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ba:	4b07      	ldr	r3, [pc, #28]	@ (80036d8 <_sbrk+0x64>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	4a05      	ldr	r2, [pc, #20]	@ (80036d8 <_sbrk+0x64>)
 80036c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036c6:	68fb      	ldr	r3, [r7, #12]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20050000 	.word	0x20050000
 80036d4:	00000400 	.word	0x00000400
 80036d8:	20003dfc 	.word	0x20003dfc
 80036dc:	20003f50 	.word	0x20003f50

080036e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036e4:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <SystemInit+0x20>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ea:	4a05      	ldr	r2, [pc, #20]	@ (8003700 <SystemInit+0x20>)
 80036ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003704:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800373c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003708:	480d      	ldr	r0, [pc, #52]	@ (8003740 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800370a:	490e      	ldr	r1, [pc, #56]	@ (8003744 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800370c:	4a0e      	ldr	r2, [pc, #56]	@ (8003748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800370e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003710:	e002      	b.n	8003718 <LoopCopyDataInit>

08003712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003716:	3304      	adds	r3, #4

08003718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800371a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800371c:	d3f9      	bcc.n	8003712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800371e:	4a0b      	ldr	r2, [pc, #44]	@ (800374c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003720:	4c0b      	ldr	r4, [pc, #44]	@ (8003750 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003724:	e001      	b.n	800372a <LoopFillZerobss>

08003726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003728:	3204      	adds	r2, #4

0800372a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800372a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800372c:	d3fb      	bcc.n	8003726 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800372e:	f7ff ffd7 	bl	80036e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003732:	f003 f86d 	bl	8006810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003736:	f7ff fa09 	bl	8002b4c <main>
  bx  lr    
 800373a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800373c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003744:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003748:	080071d0 	.word	0x080071d0
  ldr r2, =_sbss
 800374c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003750:	20003f4c 	.word	0x20003f4c

08003754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003754:	e7fe      	b.n	8003754 <ADC_IRQHandler>

08003756 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800375a:	2003      	movs	r0, #3
 800375c:	f000 f92e 	bl	80039bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003760:	2000      	movs	r0, #0
 8003762:	f000 f805 	bl	8003770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003766:	f7ff fd9f 	bl	80032a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003778:	4b12      	ldr	r3, [pc, #72]	@ (80037c4 <HAL_InitTick+0x54>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b12      	ldr	r3, [pc, #72]	@ (80037c8 <HAL_InitTick+0x58>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	4619      	mov	r1, r3
 8003782:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003786:	fbb3 f3f1 	udiv	r3, r3, r1
 800378a:	fbb2 f3f3 	udiv	r3, r2, r3
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f93b 	bl	8003a0a <HAL_SYSTICK_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e00e      	b.n	80037bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b0f      	cmp	r3, #15
 80037a2:	d80a      	bhi.n	80037ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037a4:	2200      	movs	r2, #0
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037ac:	f000 f911 	bl	80039d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037b0:	4a06      	ldr	r2, [pc, #24]	@ (80037cc <HAL_InitTick+0x5c>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	2000003c 	.word	0x2000003c
 80037c8:	20000044 	.word	0x20000044
 80037cc:	20000040 	.word	0x20000040

080037d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037d4:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <HAL_IncTick+0x20>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <HAL_IncTick+0x24>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4413      	add	r3, r2
 80037e0:	4a04      	ldr	r2, [pc, #16]	@ (80037f4 <HAL_IncTick+0x24>)
 80037e2:	6013      	str	r3, [r2, #0]
}
 80037e4:	bf00      	nop
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000044 	.word	0x20000044
 80037f4:	20003e00 	.word	0x20003e00

080037f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return uwTick;
 80037fc:	4b03      	ldr	r3, [pc, #12]	@ (800380c <HAL_GetTick+0x14>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	20003e00 	.word	0x20003e00

08003810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003818:	f7ff ffee 	bl	80037f8 <HAL_GetTick>
 800381c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003828:	d005      	beq.n	8003836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800382a:	4b0a      	ldr	r3, [pc, #40]	@ (8003854 <HAL_Delay+0x44>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003836:	bf00      	nop
 8003838:	f7ff ffde 	bl	80037f8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	429a      	cmp	r2, r3
 8003846:	d8f7      	bhi.n	8003838 <HAL_Delay+0x28>
  {
  }
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000044 	.word	0x20000044

08003858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003868:	4b0b      	ldr	r3, [pc, #44]	@ (8003898 <__NVIC_SetPriorityGrouping+0x40>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003874:	4013      	ands	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <__NVIC_SetPriorityGrouping+0x44>)
 8003882:	4313      	orrs	r3, r2
 8003884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003886:	4a04      	ldr	r2, [pc, #16]	@ (8003898 <__NVIC_SetPriorityGrouping+0x40>)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	60d3      	str	r3, [r2, #12]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000ed00 	.word	0xe000ed00
 800389c:	05fa0000 	.word	0x05fa0000

080038a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038a4:	4b04      	ldr	r3, [pc, #16]	@ (80038b8 <__NVIC_GetPriorityGrouping+0x18>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	f003 0307 	and.w	r3, r3, #7
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	e000ed00 	.word	0xe000ed00

080038bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	6039      	str	r1, [r7, #0]
 80038c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	db0a      	blt.n	80038e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	490c      	ldr	r1, [pc, #48]	@ (8003908 <__NVIC_SetPriority+0x4c>)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	0112      	lsls	r2, r2, #4
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	440b      	add	r3, r1
 80038e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038e4:	e00a      	b.n	80038fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	4908      	ldr	r1, [pc, #32]	@ (800390c <__NVIC_SetPriority+0x50>)
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	3b04      	subs	r3, #4
 80038f4:	0112      	lsls	r2, r2, #4
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	440b      	add	r3, r1
 80038fa:	761a      	strb	r2, [r3, #24]
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	e000e100 	.word	0xe000e100
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003910:	b480      	push	{r7}
 8003912:	b089      	sub	sp, #36	@ 0x24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f1c3 0307 	rsb	r3, r3, #7
 800392a:	2b04      	cmp	r3, #4
 800392c:	bf28      	it	cs
 800392e:	2304      	movcs	r3, #4
 8003930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3304      	adds	r3, #4
 8003936:	2b06      	cmp	r3, #6
 8003938:	d902      	bls.n	8003940 <NVIC_EncodePriority+0x30>
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3b03      	subs	r3, #3
 800393e:	e000      	b.n	8003942 <NVIC_EncodePriority+0x32>
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003944:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43da      	mvns	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	401a      	ands	r2, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003958:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	fa01 f303 	lsl.w	r3, r1, r3
 8003962:	43d9      	mvns	r1, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003968:	4313      	orrs	r3, r2
         );
}
 800396a:	4618      	mov	r0, r3
 800396c:	3724      	adds	r7, #36	@ 0x24
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3b01      	subs	r3, #1
 8003984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003988:	d301      	bcc.n	800398e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800398a:	2301      	movs	r3, #1
 800398c:	e00f      	b.n	80039ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800398e:	4a0a      	ldr	r2, [pc, #40]	@ (80039b8 <SysTick_Config+0x40>)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3b01      	subs	r3, #1
 8003994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003996:	210f      	movs	r1, #15
 8003998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800399c:	f7ff ff8e 	bl	80038bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039a0:	4b05      	ldr	r3, [pc, #20]	@ (80039b8 <SysTick_Config+0x40>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039a6:	4b04      	ldr	r3, [pc, #16]	@ (80039b8 <SysTick_Config+0x40>)
 80039a8:	2207      	movs	r2, #7
 80039aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	e000e010 	.word	0xe000e010

080039bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff ff47 	bl	8003858 <__NVIC_SetPriorityGrouping>
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b086      	sub	sp, #24
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	4603      	mov	r3, r0
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039e4:	f7ff ff5c 	bl	80038a0 <__NVIC_GetPriorityGrouping>
 80039e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	6978      	ldr	r0, [r7, #20]
 80039f0:	f7ff ff8e 	bl	8003910 <NVIC_EncodePriority>
 80039f4:	4602      	mov	r2, r0
 80039f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ff5d 	bl	80038bc <__NVIC_SetPriority>
}
 8003a02:	bf00      	nop
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ffb0 	bl	8003978 <SysTick_Config>
 8003a18:	4603      	mov	r3, r0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e06a      	b.n	8003b0c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2223      	movs	r2, #35	@ 0x23
 8003a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff fc51 	bl	80032f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4e:	4b31      	ldr	r3, [pc, #196]	@ (8003b14 <HAL_ETH_Init+0xf0>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a52:	4a30      	ldr	r2, [pc, #192]	@ (8003b14 <HAL_ETH_Init+0xf0>)
 8003a54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b14 <HAL_ETH_Init+0xf0>)
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003a66:	4b2c      	ldr	r3, [pc, #176]	@ (8003b18 <HAL_ETH_Init+0xf4>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4a2b      	ldr	r2, [pc, #172]	@ (8003b18 <HAL_ETH_Init+0xf4>)
 8003a6c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a70:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003a72:	4b29      	ldr	r3, [pc, #164]	@ (8003b18 <HAL_ETH_Init+0xf4>)
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	4927      	ldr	r1, [pc, #156]	@ (8003b18 <HAL_ETH_Init+0xf4>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003a80:	4b25      	ldr	r3, [pc, #148]	@ (8003b18 <HAL_ETH_Init+0xf4>)
 8003a82:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a9c:	f7ff feac 	bl	80037f8 <HAL_GetTick>
 8003aa0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003aa2:	e011      	b.n	8003ac8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003aa4:	f7ff fea8 	bl	80037f8 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003ab2:	d909      	bls.n	8003ac8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	22e0      	movs	r2, #224	@ 0xe0
 8003ac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e021      	b.n	8003b0c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e4      	bne.n	8003aa4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f958 	bl	8003d90 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f9ff 	bl	8003ee4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fa55 	bl	8003f96 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	461a      	mov	r2, r3
 8003af2:	2100      	movs	r1, #0
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f9bd 	bl	8003e74 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2210      	movs	r2, #16
 8003b06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40013800 	.word	0x40013800

08003b1c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4b51      	ldr	r3, [pc, #324]	@ (8003c78 <ETH_SetMACConfig+0x15c>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	7c1b      	ldrb	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <ETH_SetMACConfig+0x28>
 8003b3e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003b42:	e000      	b.n	8003b46 <ETH_SetMACConfig+0x2a>
 8003b44:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	7c5b      	ldrb	r3, [r3, #17]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d102      	bne.n	8003b54 <ETH_SetMACConfig+0x38>
 8003b4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b52:	e000      	b.n	8003b56 <ETH_SetMACConfig+0x3a>
 8003b54:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b56:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	7fdb      	ldrb	r3, [r3, #31]
 8003b62:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003b64:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	7f92      	ldrb	r2, [r2, #30]
 8003b70:	2a00      	cmp	r2, #0
 8003b72:	d102      	bne.n	8003b7a <ETH_SetMACConfig+0x5e>
 8003b74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b78:	e000      	b.n	8003b7c <ETH_SetMACConfig+0x60>
 8003b7a:	2200      	movs	r2, #0
                        macconf->Speed |
 8003b7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	7f1b      	ldrb	r3, [r3, #28]
 8003b82:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b84:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	791b      	ldrb	r3, [r3, #4]
 8003b90:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003b92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003b9a:	2a00      	cmp	r2, #0
 8003b9c:	d102      	bne.n	8003ba4 <ETH_SetMACConfig+0x88>
 8003b9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ba2:	e000      	b.n	8003ba6 <ETH_SetMACConfig+0x8a>
 8003ba4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003ba6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	7bdb      	ldrb	r3, [r3, #15]
 8003bac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003bae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003bb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bbc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	f7ff fe1a 	bl	8003810 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bfa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003c02:	2a00      	cmp	r2, #0
 8003c04:	d101      	bne.n	8003c0a <ETH_SetMACConfig+0xee>
 8003c06:	2280      	movs	r2, #128	@ 0x80
 8003c08:	e000      	b.n	8003c0c <ETH_SetMACConfig+0xf0>
 8003c0a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c0c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003c12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003c1a:	2a01      	cmp	r2, #1
 8003c1c:	d101      	bne.n	8003c22 <ETH_SetMACConfig+0x106>
 8003c1e:	2208      	movs	r2, #8
 8003c20:	e000      	b.n	8003c24 <ETH_SetMACConfig+0x108>
 8003c22:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003c24:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003c2c:	2a01      	cmp	r2, #1
 8003c2e:	d101      	bne.n	8003c34 <ETH_SetMACConfig+0x118>
 8003c30:	2204      	movs	r2, #4
 8003c32:	e000      	b.n	8003c36 <ETH_SetMACConfig+0x11a>
 8003c34:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c36:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003c3e:	2a01      	cmp	r2, #1
 8003c40:	d101      	bne.n	8003c46 <ETH_SetMACConfig+0x12a>
 8003c42:	2202      	movs	r2, #2
 8003c44:	e000      	b.n	8003c48 <ETH_SetMACConfig+0x12c>
 8003c46:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c60:	2001      	movs	r0, #1
 8003c62:	f7ff fdd5 	bl	8003810 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	619a      	str	r2, [r3, #24]
}
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	ff20810f 	.word	0xff20810f

08003c7c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4b3d      	ldr	r3, [pc, #244]	@ (8003d8c <ETH_SetDMAConfig+0x110>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	7b1b      	ldrb	r3, [r3, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d102      	bne.n	8003ca8 <ETH_SetDMAConfig+0x2c>
 8003ca2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003ca6:	e000      	b.n	8003caa <ETH_SetDMAConfig+0x2e>
 8003ca8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	7b5b      	ldrb	r3, [r3, #13]
 8003cae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003cb0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	7f52      	ldrb	r2, [r2, #29]
 8003cb6:	2a00      	cmp	r2, #0
 8003cb8:	d102      	bne.n	8003cc0 <ETH_SetDMAConfig+0x44>
 8003cba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003cbe:	e000      	b.n	8003cc2 <ETH_SetDMAConfig+0x46>
 8003cc0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003cc2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	7b9b      	ldrb	r3, [r3, #14]
 8003cc8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003cca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003cd0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	7f1b      	ldrb	r3, [r3, #28]
 8003cd6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003cd8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	7f9b      	ldrb	r3, [r3, #30]
 8003cde:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003ce0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003ce6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003cee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d00:	461a      	mov	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d12:	2001      	movs	r0, #1
 8003d14:	f7ff fd7c 	bl	8003810 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d20:	461a      	mov	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	791b      	ldrb	r3, [r3, #4]
 8003d2a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d30:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003d36:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d3c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d44:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003d46:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d4e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d54:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d62:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d70:	2001      	movs	r0, #1
 8003d72:	f7ff fd4d 	bl	8003810 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6013      	str	r3, [r2, #0]
}
 8003d84:	bf00      	nop
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	f8de3f23 	.word	0xf8de3f23

08003d90 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b0a6      	sub	sp, #152	@ 0x98
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003da4:	2300      	movs	r3, #0
 8003da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003de0:	2300      	movs	r3, #0
 8003de2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003de6:	2300      	movs	r3, #0
 8003de8:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003df2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003df6:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003df8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003e04:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff fe86 	bl	8003b1c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003e10:	2301      	movs	r3, #1
 8003e12:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003e14:	2301      	movs	r3, #1
 8003e16:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003e32:	2300      	movs	r3, #0
 8003e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003e40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e44:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003e46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003e4a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e50:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003e60:	f107 0308 	add.w	r3, r7, #8
 8003e64:	4619      	mov	r1, r3
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff ff08 	bl	8003c7c <ETH_SetDMAConfig>
}
 8003e6c:	bf00      	nop
 8003e6e:	3798      	adds	r7, #152	@ 0x98
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3305      	adds	r3, #5
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	3204      	adds	r2, #4
 8003e8c:	7812      	ldrb	r2, [r2, #0]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	4b11      	ldr	r3, [pc, #68]	@ (8003edc <ETH_MACAddressConfig+0x68>)
 8003e96:	4413      	add	r3, r2
 8003e98:	461a      	mov	r2, r3
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3303      	adds	r3, #3
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	061a      	lsls	r2, r3, #24
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3302      	adds	r3, #2
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	7812      	ldrb	r2, [r2, #0]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	4b06      	ldr	r3, [pc, #24]	@ (8003ee0 <ETH_MACAddressConfig+0x6c>)
 8003ec6:	4413      	add	r3, r2
 8003ec8:	461a      	mov	r2, r3
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	6013      	str	r3, [r2, #0]
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40028040 	.word	0x40028040
 8003ee0:	40028044 	.word	0x40028044

08003ee4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	e03e      	b.n	8003f70 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68d9      	ldr	r1, [r3, #12]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	440b      	add	r3, r1
 8003f02:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2200      	movs	r2, #0
 8003f14:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	3206      	adds	r2, #6
 8003f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d80c      	bhi.n	8003f54 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68d9      	ldr	r1, [r3, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	440b      	add	r3, r1
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	60da      	str	r2, [r3, #12]
 8003f52:	e004      	b.n	8003f5e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d9bd      	bls.n	8003ef2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f88:	611a      	str	r2, [r3, #16]
}
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b085      	sub	sp, #20
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	e046      	b.n	8004032 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6919      	ldr	r1, [r3, #16]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	440b      	add	r3, r1
 8003fb4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003fe0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8003fe8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	3212      	adds	r2, #18
 8003ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d80c      	bhi.n	8004022 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6919      	ldr	r1, [r3, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	440b      	add	r3, r1
 800401a:	461a      	mov	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	60da      	str	r2, [r3, #12]
 8004020:	e004      	b.n	800402c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	461a      	mov	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3301      	adds	r3, #1
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d9b5      	bls.n	8003fa4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004062:	60da      	str	r2, [r3, #12]
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004070:	b480      	push	{r7}
 8004072:	b089      	sub	sp, #36	@ 0x24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004086:	2300      	movs	r3, #0
 8004088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	e175      	b.n	800437c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004090:	2201      	movs	r2, #1
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4013      	ands	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	f040 8164 	bne.w	8004376 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d005      	beq.n	80040c6 <HAL_GPIO_Init+0x56>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d130      	bne.n	8004128 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	2203      	movs	r2, #3
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43db      	mvns	r3, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4013      	ands	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040fc:	2201      	movs	r2, #1
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	f003 0201 	and.w	r2, r3, #1
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4313      	orrs	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	2b03      	cmp	r3, #3
 8004132:	d017      	beq.n	8004164 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	2203      	movs	r2, #3
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4313      	orrs	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d123      	bne.n	80041b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	08da      	lsrs	r2, r3, #3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3208      	adds	r2, #8
 8004178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800417c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	220f      	movs	r2, #15
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4013      	ands	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	08da      	lsrs	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3208      	adds	r2, #8
 80041b2:	69b9      	ldr	r1, [r7, #24]
 80041b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	2203      	movs	r2, #3
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f003 0203 	and.w	r2, r3, #3
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80be 	beq.w	8004376 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041fa:	4b66      	ldr	r3, [pc, #408]	@ (8004394 <HAL_GPIO_Init+0x324>)
 80041fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fe:	4a65      	ldr	r2, [pc, #404]	@ (8004394 <HAL_GPIO_Init+0x324>)
 8004200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004204:	6453      	str	r3, [r2, #68]	@ 0x44
 8004206:	4b63      	ldr	r3, [pc, #396]	@ (8004394 <HAL_GPIO_Init+0x324>)
 8004208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004212:	4a61      	ldr	r2, [pc, #388]	@ (8004398 <HAL_GPIO_Init+0x328>)
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	089b      	lsrs	r3, r3, #2
 8004218:	3302      	adds	r3, #2
 800421a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800421e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	220f      	movs	r2, #15
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4013      	ands	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a58      	ldr	r2, [pc, #352]	@ (800439c <HAL_GPIO_Init+0x32c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d037      	beq.n	80042ae <HAL_GPIO_Init+0x23e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a57      	ldr	r2, [pc, #348]	@ (80043a0 <HAL_GPIO_Init+0x330>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d031      	beq.n	80042aa <HAL_GPIO_Init+0x23a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a56      	ldr	r2, [pc, #344]	@ (80043a4 <HAL_GPIO_Init+0x334>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d02b      	beq.n	80042a6 <HAL_GPIO_Init+0x236>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a55      	ldr	r2, [pc, #340]	@ (80043a8 <HAL_GPIO_Init+0x338>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d025      	beq.n	80042a2 <HAL_GPIO_Init+0x232>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a54      	ldr	r2, [pc, #336]	@ (80043ac <HAL_GPIO_Init+0x33c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01f      	beq.n	800429e <HAL_GPIO_Init+0x22e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a53      	ldr	r2, [pc, #332]	@ (80043b0 <HAL_GPIO_Init+0x340>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d019      	beq.n	800429a <HAL_GPIO_Init+0x22a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a52      	ldr	r2, [pc, #328]	@ (80043b4 <HAL_GPIO_Init+0x344>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <HAL_GPIO_Init+0x226>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a51      	ldr	r2, [pc, #324]	@ (80043b8 <HAL_GPIO_Init+0x348>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00d      	beq.n	8004292 <HAL_GPIO_Init+0x222>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a50      	ldr	r2, [pc, #320]	@ (80043bc <HAL_GPIO_Init+0x34c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d007      	beq.n	800428e <HAL_GPIO_Init+0x21e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a4f      	ldr	r2, [pc, #316]	@ (80043c0 <HAL_GPIO_Init+0x350>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d101      	bne.n	800428a <HAL_GPIO_Init+0x21a>
 8004286:	2309      	movs	r3, #9
 8004288:	e012      	b.n	80042b0 <HAL_GPIO_Init+0x240>
 800428a:	230a      	movs	r3, #10
 800428c:	e010      	b.n	80042b0 <HAL_GPIO_Init+0x240>
 800428e:	2308      	movs	r3, #8
 8004290:	e00e      	b.n	80042b0 <HAL_GPIO_Init+0x240>
 8004292:	2307      	movs	r3, #7
 8004294:	e00c      	b.n	80042b0 <HAL_GPIO_Init+0x240>
 8004296:	2306      	movs	r3, #6
 8004298:	e00a      	b.n	80042b0 <HAL_GPIO_Init+0x240>
 800429a:	2305      	movs	r3, #5
 800429c:	e008      	b.n	80042b0 <HAL_GPIO_Init+0x240>
 800429e:	2304      	movs	r3, #4
 80042a0:	e006      	b.n	80042b0 <HAL_GPIO_Init+0x240>
 80042a2:	2303      	movs	r3, #3
 80042a4:	e004      	b.n	80042b0 <HAL_GPIO_Init+0x240>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e002      	b.n	80042b0 <HAL_GPIO_Init+0x240>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <HAL_GPIO_Init+0x240>
 80042ae:	2300      	movs	r3, #0
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	f002 0203 	and.w	r2, r2, #3
 80042b6:	0092      	lsls	r2, r2, #2
 80042b8:	4093      	lsls	r3, r2
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80042c0:	4935      	ldr	r1, [pc, #212]	@ (8004398 <HAL_GPIO_Init+0x328>)
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	089b      	lsrs	r3, r3, #2
 80042c6:	3302      	adds	r3, #2
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042ce:	4b3d      	ldr	r3, [pc, #244]	@ (80043c4 <HAL_GPIO_Init+0x354>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	43db      	mvns	r3, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4013      	ands	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042f2:	4a34      	ldr	r2, [pc, #208]	@ (80043c4 <HAL_GPIO_Init+0x354>)
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042f8:	4b32      	ldr	r3, [pc, #200]	@ (80043c4 <HAL_GPIO_Init+0x354>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	43db      	mvns	r3, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4013      	ands	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800431c:	4a29      	ldr	r2, [pc, #164]	@ (80043c4 <HAL_GPIO_Init+0x354>)
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004322:	4b28      	ldr	r3, [pc, #160]	@ (80043c4 <HAL_GPIO_Init+0x354>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	43db      	mvns	r3, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4013      	ands	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004346:	4a1f      	ldr	r2, [pc, #124]	@ (80043c4 <HAL_GPIO_Init+0x354>)
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800434c:	4b1d      	ldr	r3, [pc, #116]	@ (80043c4 <HAL_GPIO_Init+0x354>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	43db      	mvns	r3, r3
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	4013      	ands	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004370:	4a14      	ldr	r2, [pc, #80]	@ (80043c4 <HAL_GPIO_Init+0x354>)
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	3301      	adds	r3, #1
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	2b0f      	cmp	r3, #15
 8004380:	f67f ae86 	bls.w	8004090 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop
 8004388:	3724      	adds	r7, #36	@ 0x24
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800
 8004398:	40013800 	.word	0x40013800
 800439c:	40020000 	.word	0x40020000
 80043a0:	40020400 	.word	0x40020400
 80043a4:	40020800 	.word	0x40020800
 80043a8:	40020c00 	.word	0x40020c00
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40021400 	.word	0x40021400
 80043b4:	40021800 	.word	0x40021800
 80043b8:	40021c00 	.word	0x40021c00
 80043bc:	40022000 	.word	0x40022000
 80043c0:	40022400 	.word	0x40022400
 80043c4:	40013c00 	.word	0x40013c00

080043c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	807b      	strh	r3, [r7, #2]
 80043d4:	4613      	mov	r3, r2
 80043d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043d8:	787b      	ldrb	r3, [r7, #1]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043de:	887a      	ldrh	r2, [r7, #2]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80043e4:	e003      	b.n	80043ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80043e6:	887b      	ldrh	r3, [r7, #2]
 80043e8:	041a      	lsls	r2, r3, #16
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	619a      	str	r2, [r3, #24]
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043fc:	b08f      	sub	sp, #60	@ 0x3c
 80043fe:	af0a      	add	r7, sp, #40	@ 0x28
 8004400:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e116      	b.n	800463a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff f87a 	bl	8003520 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2203      	movs	r2, #3
 8004430:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443c:	2b00      	cmp	r3, #0
 800443e:	d102      	bne.n	8004446 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f001 ff16 	bl	800627c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	603b      	str	r3, [r7, #0]
 8004456:	687e      	ldr	r6, [r7, #4]
 8004458:	466d      	mov	r5, sp
 800445a:	f106 0410 	add.w	r4, r6, #16
 800445e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004466:	e894 0003 	ldmia.w	r4, {r0, r1}
 800446a:	e885 0003 	stmia.w	r5, {r0, r1}
 800446e:	1d33      	adds	r3, r6, #4
 8004470:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004472:	6838      	ldr	r0, [r7, #0]
 8004474:	f001 feaa 	bl	80061cc <USB_CoreInit>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2202      	movs	r2, #2
 8004482:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e0d7      	b.n	800463a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2100      	movs	r1, #0
 8004490:	4618      	mov	r0, r3
 8004492:	f001 ff04 	bl	800629e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004496:	2300      	movs	r3, #0
 8004498:	73fb      	strb	r3, [r7, #15]
 800449a:	e04a      	b.n	8004532 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800449c:	7bfa      	ldrb	r2, [r7, #15]
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	333d      	adds	r3, #61	@ 0x3d
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044b0:	7bfa      	ldrb	r2, [r7, #15]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	333c      	adds	r3, #60	@ 0x3c
 80044c0:	7bfa      	ldrb	r2, [r7, #15]
 80044c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044c4:	7bfa      	ldrb	r2, [r7, #15]
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	b298      	uxth	r0, r3
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	3344      	adds	r3, #68	@ 0x44
 80044d8:	4602      	mov	r2, r0
 80044da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044dc:	7bfa      	ldrb	r2, [r7, #15]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	3340      	adds	r3, #64	@ 0x40
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044f0:	7bfa      	ldrb	r2, [r7, #15]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	3348      	adds	r3, #72	@ 0x48
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004504:	7bfa      	ldrb	r2, [r7, #15]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	334c      	adds	r3, #76	@ 0x4c
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004518:	7bfa      	ldrb	r2, [r7, #15]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	3354      	adds	r3, #84	@ 0x54
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	3301      	adds	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
 8004532:	7bfa      	ldrb	r2, [r7, #15]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	429a      	cmp	r2, r3
 800453a:	d3af      	bcc.n	800449c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800453c:	2300      	movs	r3, #0
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	e044      	b.n	80045cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004542:	7bfa      	ldrb	r2, [r7, #15]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800456a:	7bfa      	ldrb	r2, [r7, #15]
 800456c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800456e:	7bfa      	ldrb	r2, [r7, #15]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004584:	7bfa      	ldrb	r2, [r7, #15]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800459a:	7bfa      	ldrb	r2, [r7, #15]
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045b0:	7bfa      	ldrb	r2, [r7, #15]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	3301      	adds	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
 80045cc:	7bfa      	ldrb	r2, [r7, #15]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d3b5      	bcc.n	8004542 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	687e      	ldr	r6, [r7, #4]
 80045de:	466d      	mov	r5, sp
 80045e0:	f106 0410 	add.w	r4, r6, #16
 80045e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80045f4:	1d33      	adds	r3, r6, #4
 80045f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045f8:	6838      	ldr	r0, [r7, #0]
 80045fa:	f001 fe9d 	bl	8006338 <USB_DevInit>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e014      	b.n	800463a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004624:	2b01      	cmp	r3, #1
 8004626:	d102      	bne.n	800462e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f80b 	bl	8004644 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f002 f85b 	bl	80066ee <USB_DevDisconnect>

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004644 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004672:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <HAL_PCDEx_ActivateLPM+0x44>)
 8004674:	4313      	orrs	r3, r2
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	10000003 	.word	0x10000003

0800468c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004690:	4b05      	ldr	r3, [pc, #20]	@ (80046a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a04      	ldr	r2, [pc, #16]	@ (80046a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800469a:	6013      	str	r3, [r2, #0]
}
 800469c:	bf00      	nop
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40007000 	.word	0x40007000

080046ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80046b4:	2300      	movs	r3, #0
 80046b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e291      	b.n	8004be6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 8087 	beq.w	80047de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046d0:	4b96      	ldr	r3, [pc, #600]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 030c 	and.w	r3, r3, #12
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d00c      	beq.n	80046f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046dc:	4b93      	ldr	r3, [pc, #588]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 030c 	and.w	r3, r3, #12
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d112      	bne.n	800470e <HAL_RCC_OscConfig+0x62>
 80046e8:	4b90      	ldr	r3, [pc, #576]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046f4:	d10b      	bne.n	800470e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f6:	4b8d      	ldr	r3, [pc, #564]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d06c      	beq.n	80047dc <HAL_RCC_OscConfig+0x130>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d168      	bne.n	80047dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e26b      	b.n	8004be6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004716:	d106      	bne.n	8004726 <HAL_RCC_OscConfig+0x7a>
 8004718:	4b84      	ldr	r3, [pc, #528]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a83      	ldr	r2, [pc, #524]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 800471e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	e02e      	b.n	8004784 <HAL_RCC_OscConfig+0xd8>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10c      	bne.n	8004748 <HAL_RCC_OscConfig+0x9c>
 800472e:	4b7f      	ldr	r3, [pc, #508]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a7e      	ldr	r2, [pc, #504]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	4b7c      	ldr	r3, [pc, #496]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a7b      	ldr	r2, [pc, #492]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004740:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e01d      	b.n	8004784 <HAL_RCC_OscConfig+0xd8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0xc0>
 8004752:	4b76      	ldr	r3, [pc, #472]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a75      	ldr	r2, [pc, #468]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b73      	ldr	r3, [pc, #460]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a72      	ldr	r2, [pc, #456]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e00b      	b.n	8004784 <HAL_RCC_OscConfig+0xd8>
 800476c:	4b6f      	ldr	r3, [pc, #444]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a6e      	ldr	r2, [pc, #440]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b6c      	ldr	r3, [pc, #432]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a6b      	ldr	r2, [pc, #428]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 800477e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d013      	beq.n	80047b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7ff f834 	bl	80037f8 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004794:	f7ff f830 	bl	80037f8 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	@ 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e21f      	b.n	8004be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	4b61      	ldr	r3, [pc, #388]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0xe8>
 80047b2:	e014      	b.n	80047de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b4:	f7ff f820 	bl	80037f8 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047bc:	f7ff f81c 	bl	80037f8 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b64      	cmp	r3, #100	@ 0x64
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e20b      	b.n	8004be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ce:	4b57      	ldr	r3, [pc, #348]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x110>
 80047da:	e000      	b.n	80047de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d069      	beq.n	80048be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ea:	4b50      	ldr	r3, [pc, #320]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047f6:	4b4d      	ldr	r3, [pc, #308]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 030c 	and.w	r3, r3, #12
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d11c      	bne.n	800483c <HAL_RCC_OscConfig+0x190>
 8004802:	4b4a      	ldr	r3, [pc, #296]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d116      	bne.n	800483c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480e:	4b47      	ldr	r3, [pc, #284]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d005      	beq.n	8004826 <HAL_RCC_OscConfig+0x17a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d001      	beq.n	8004826 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e1df      	b.n	8004be6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004826:	4b41      	ldr	r3, [pc, #260]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	493d      	ldr	r1, [pc, #244]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483a:	e040      	b.n	80048be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d023      	beq.n	800488c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004844:	4b39      	ldr	r3, [pc, #228]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a38      	ldr	r2, [pc, #224]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 800484a:	f043 0301 	orr.w	r3, r3, #1
 800484e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fe ffd2 	bl	80037f8 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004858:	f7fe ffce 	bl	80037f8 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e1bd      	b.n	8004be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486a:	4b30      	ldr	r3, [pc, #192]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f0      	beq.n	8004858 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004876:	4b2d      	ldr	r3, [pc, #180]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4929      	ldr	r1, [pc, #164]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004886:	4313      	orrs	r3, r2
 8004888:	600b      	str	r3, [r1, #0]
 800488a:	e018      	b.n	80048be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488c:	4b27      	ldr	r3, [pc, #156]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a26      	ldr	r2, [pc, #152]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004892:	f023 0301 	bic.w	r3, r3, #1
 8004896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fe ffae 	bl	80037f8 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a0:	f7fe ffaa 	bl	80037f8 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e199      	b.n	8004be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b2:	4b1e      	ldr	r3, [pc, #120]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d038      	beq.n	800493c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d019      	beq.n	8004906 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048d2:	4b16      	ldr	r3, [pc, #88]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 80048d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048d6:	4a15      	ldr	r2, [pc, #84]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048de:	f7fe ff8b 	bl	80037f8 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e6:	f7fe ff87 	bl	80037f8 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e176      	b.n	8004be6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f8:	4b0c      	ldr	r3, [pc, #48]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 80048fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCC_OscConfig+0x23a>
 8004904:	e01a      	b.n	800493c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004906:	4b09      	ldr	r3, [pc, #36]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 8004908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800490a:	4a08      	ldr	r2, [pc, #32]	@ (800492c <HAL_RCC_OscConfig+0x280>)
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004912:	f7fe ff71 	bl	80037f8 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004918:	e00a      	b.n	8004930 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800491a:	f7fe ff6d 	bl	80037f8 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d903      	bls.n	8004930 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e15c      	b.n	8004be6 <HAL_RCC_OscConfig+0x53a>
 800492c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004930:	4b91      	ldr	r3, [pc, #580]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1ee      	bne.n	800491a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80a4 	beq.w	8004a92 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800494a:	4b8b      	ldr	r3, [pc, #556]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10d      	bne.n	8004972 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004956:	4b88      	ldr	r3, [pc, #544]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	4a87      	ldr	r2, [pc, #540]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004960:	6413      	str	r3, [r2, #64]	@ 0x40
 8004962:	4b85      	ldr	r3, [pc, #532]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004972:	4b82      	ldr	r3, [pc, #520]	@ (8004b7c <HAL_RCC_OscConfig+0x4d0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d118      	bne.n	80049b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800497e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b7c <HAL_RCC_OscConfig+0x4d0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a7e      	ldr	r2, [pc, #504]	@ (8004b7c <HAL_RCC_OscConfig+0x4d0>)
 8004984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498a:	f7fe ff35 	bl	80037f8 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004992:	f7fe ff31 	bl	80037f8 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b64      	cmp	r3, #100	@ 0x64
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e120      	b.n	8004be6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a4:	4b75      	ldr	r3, [pc, #468]	@ (8004b7c <HAL_RCC_OscConfig+0x4d0>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f0      	beq.n	8004992 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d106      	bne.n	80049c6 <HAL_RCC_OscConfig+0x31a>
 80049b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 80049ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049c4:	e02d      	b.n	8004a22 <HAL_RCC_OscConfig+0x376>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x33c>
 80049ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d2:	4a69      	ldr	r2, [pc, #420]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 80049d4:	f023 0301 	bic.w	r3, r3, #1
 80049d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049da:	4b67      	ldr	r3, [pc, #412]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 80049dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049de:	4a66      	ldr	r2, [pc, #408]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 80049e0:	f023 0304 	bic.w	r3, r3, #4
 80049e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e6:	e01c      	b.n	8004a22 <HAL_RCC_OscConfig+0x376>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	d10c      	bne.n	8004a0a <HAL_RCC_OscConfig+0x35e>
 80049f0:	4b61      	ldr	r3, [pc, #388]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 80049f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f4:	4a60      	ldr	r2, [pc, #384]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 80049f6:	f043 0304 	orr.w	r3, r3, #4
 80049fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80049fc:	4b5e      	ldr	r3, [pc, #376]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 80049fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a00:	4a5d      	ldr	r2, [pc, #372]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a08:	e00b      	b.n	8004a22 <HAL_RCC_OscConfig+0x376>
 8004a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0e:	4a5a      	ldr	r2, [pc, #360]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004a10:	f023 0301 	bic.w	r3, r3, #1
 8004a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a16:	4b58      	ldr	r3, [pc, #352]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1a:	4a57      	ldr	r2, [pc, #348]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004a1c:	f023 0304 	bic.w	r3, r3, #4
 8004a20:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d015      	beq.n	8004a56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2a:	f7fe fee5 	bl	80037f8 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a32:	f7fe fee1 	bl	80037f8 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e0ce      	b.n	8004be6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a48:	4b4b      	ldr	r3, [pc, #300]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0ee      	beq.n	8004a32 <HAL_RCC_OscConfig+0x386>
 8004a54:	e014      	b.n	8004a80 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a56:	f7fe fecf 	bl	80037f8 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a5c:	e00a      	b.n	8004a74 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5e:	f7fe fecb 	bl	80037f8 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e0b8      	b.n	8004be6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a74:	4b40      	ldr	r3, [pc, #256]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1ee      	bne.n	8004a5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a80:	7dfb      	ldrb	r3, [r7, #23]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d105      	bne.n	8004a92 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a86:	4b3c      	ldr	r3, [pc, #240]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004a8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a90:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 80a4 	beq.w	8004be4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a9c:	4b36      	ldr	r3, [pc, #216]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 030c 	and.w	r3, r3, #12
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d06b      	beq.n	8004b80 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d149      	bne.n	8004b44 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab0:	4b31      	ldr	r3, [pc, #196]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a30      	ldr	r2, [pc, #192]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004ab6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fe fe9c 	bl	80037f8 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac4:	f7fe fe98 	bl	80037f8 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e087      	b.n	8004be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad6:	4b28      	ldr	r3, [pc, #160]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69da      	ldr	r2, [r3, #28]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	019b      	lsls	r3, r3, #6
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af8:	085b      	lsrs	r3, r3, #1
 8004afa:	3b01      	subs	r3, #1
 8004afc:	041b      	lsls	r3, r3, #16
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	4313      	orrs	r3, r2
 8004b08:	4a1b      	ldr	r2, [pc, #108]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004b0a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004b0e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b10:	4b19      	ldr	r3, [pc, #100]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a18      	ldr	r2, [pc, #96]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1c:	f7fe fe6c 	bl	80037f8 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b24:	f7fe fe68 	bl	80037f8 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e057      	b.n	8004be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b36:	4b10      	ldr	r3, [pc, #64]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCC_OscConfig+0x478>
 8004b42:	e04f      	b.n	8004be4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b44:	4b0c      	ldr	r3, [pc, #48]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a0b      	ldr	r2, [pc, #44]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b50:	f7fe fe52 	bl	80037f8 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b58:	f7fe fe4e 	bl	80037f8 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e03d      	b.n	8004be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6a:	4b03      	ldr	r3, [pc, #12]	@ (8004b78 <HAL_RCC_OscConfig+0x4cc>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f0      	bne.n	8004b58 <HAL_RCC_OscConfig+0x4ac>
 8004b76:	e035      	b.n	8004be4 <HAL_RCC_OscConfig+0x538>
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004b80:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf0 <HAL_RCC_OscConfig+0x544>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d028      	beq.n	8004be0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d121      	bne.n	8004be0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d11a      	bne.n	8004be0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bb6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d111      	bne.n	8004be0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d107      	bne.n	8004be0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800

08004bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0d0      	b.n	8004dae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 030f 	and.w	r3, r3, #15
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d910      	bls.n	8004c3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1a:	4b67      	ldr	r3, [pc, #412]	@ (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 020f 	bic.w	r2, r3, #15
 8004c22:	4965      	ldr	r1, [pc, #404]	@ (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2a:	4b63      	ldr	r3, [pc, #396]	@ (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 030f 	and.w	r3, r3, #15
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d001      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0b8      	b.n	8004dae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d020      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d005      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c54:	4b59      	ldr	r3, [pc, #356]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	4a58      	ldr	r2, [pc, #352]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004c5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c6c:	4b53      	ldr	r3, [pc, #332]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	4a52      	ldr	r2, [pc, #328]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004c72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c78:	4b50      	ldr	r3, [pc, #320]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	494d      	ldr	r1, [pc, #308]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d040      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d107      	bne.n	8004cae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9e:	4b47      	ldr	r3, [pc, #284]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d115      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e07f      	b.n	8004dae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d107      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb6:	4b41      	ldr	r3, [pc, #260]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e073      	b.n	8004dae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc6:	4b3d      	ldr	r3, [pc, #244]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e06b      	b.n	8004dae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cd6:	4b39      	ldr	r3, [pc, #228]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f023 0203 	bic.w	r2, r3, #3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	4936      	ldr	r1, [pc, #216]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce8:	f7fe fd86 	bl	80037f8 <HAL_GetTick>
 8004cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cee:	e00a      	b.n	8004d06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cf0:	f7fe fd82 	bl	80037f8 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e053      	b.n	8004dae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d06:	4b2d      	ldr	r3, [pc, #180]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 020c 	and.w	r2, r3, #12
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d1eb      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d18:	4b27      	ldr	r3, [pc, #156]	@ (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d210      	bcs.n	8004d48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d26:	4b24      	ldr	r3, [pc, #144]	@ (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f023 020f 	bic.w	r2, r3, #15
 8004d2e:	4922      	ldr	r1, [pc, #136]	@ (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d36:	4b20      	ldr	r3, [pc, #128]	@ (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e032      	b.n	8004dae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d54:	4b19      	ldr	r3, [pc, #100]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	4916      	ldr	r1, [pc, #88]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d72:	4b12      	ldr	r3, [pc, #72]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	490e      	ldr	r1, [pc, #56]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d86:	f000 f821 	bl	8004dcc <HAL_RCC_GetSysClockFreq>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	490a      	ldr	r1, [pc, #40]	@ (8004dc0 <HAL_RCC_ClockConfig+0x1cc>)
 8004d98:	5ccb      	ldrb	r3, [r1, r3]
 8004d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9e:	4a09      	ldr	r2, [pc, #36]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1d0>)
 8004da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004da2:	4b09      	ldr	r3, [pc, #36]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1d4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fce2 	bl	8003770 <HAL_InitTick>

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40023c00 	.word	0x40023c00
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	08007174 	.word	0x08007174
 8004dc4:	2000003c 	.word	0x2000003c
 8004dc8:	20000040 	.word	0x20000040

08004dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd0:	b094      	sub	sp, #80	@ 0x50
 8004dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dd8:	2300      	movs	r3, #0
 8004dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ddc:	2300      	movs	r3, #0
 8004dde:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004de4:	4b79      	ldr	r3, [pc, #484]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 030c 	and.w	r3, r3, #12
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d00d      	beq.n	8004e0c <HAL_RCC_GetSysClockFreq+0x40>
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	f200 80e1 	bhi.w	8004fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_RCC_GetSysClockFreq+0x34>
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d003      	beq.n	8004e06 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dfe:	e0db      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e00:	4b73      	ldr	r3, [pc, #460]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e04:	e0db      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e06:	4b73      	ldr	r3, [pc, #460]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e0a:	e0d8      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e16:	4b6d      	ldr	r3, [pc, #436]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d063      	beq.n	8004eea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e22:	4b6a      	ldr	r3, [pc, #424]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	099b      	lsrs	r3, r3, #6
 8004e28:	2200      	movs	r2, #0
 8004e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e36:	2300      	movs	r3, #0
 8004e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e3e:	4622      	mov	r2, r4
 8004e40:	462b      	mov	r3, r5
 8004e42:	f04f 0000 	mov.w	r0, #0
 8004e46:	f04f 0100 	mov.w	r1, #0
 8004e4a:	0159      	lsls	r1, r3, #5
 8004e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e50:	0150      	lsls	r0, r2, #5
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	4621      	mov	r1, r4
 8004e58:	1a51      	subs	r1, r2, r1
 8004e5a:	6139      	str	r1, [r7, #16]
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e70:	4659      	mov	r1, fp
 8004e72:	018b      	lsls	r3, r1, #6
 8004e74:	4651      	mov	r1, sl
 8004e76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e7a:	4651      	mov	r1, sl
 8004e7c:	018a      	lsls	r2, r1, #6
 8004e7e:	4651      	mov	r1, sl
 8004e80:	ebb2 0801 	subs.w	r8, r2, r1
 8004e84:	4659      	mov	r1, fp
 8004e86:	eb63 0901 	sbc.w	r9, r3, r1
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e9e:	4690      	mov	r8, r2
 8004ea0:	4699      	mov	r9, r3
 8004ea2:	4623      	mov	r3, r4
 8004ea4:	eb18 0303 	adds.w	r3, r8, r3
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	462b      	mov	r3, r5
 8004eac:	eb49 0303 	adc.w	r3, r9, r3
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	024b      	lsls	r3, r1, #9
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ec8:	4621      	mov	r1, r4
 8004eca:	024a      	lsls	r2, r1, #9
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4619      	mov	r1, r3
 8004ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ed8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004edc:	f7fb f9e8 	bl	80002b0 <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ee8:	e058      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eea:	4b38      	ldr	r3, [pc, #224]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	099b      	lsrs	r3, r3, #6
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004efa:	623b      	str	r3, [r7, #32]
 8004efc:	2300      	movs	r3, #0
 8004efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f04:	4642      	mov	r2, r8
 8004f06:	464b      	mov	r3, r9
 8004f08:	f04f 0000 	mov.w	r0, #0
 8004f0c:	f04f 0100 	mov.w	r1, #0
 8004f10:	0159      	lsls	r1, r3, #5
 8004f12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f16:	0150      	lsls	r0, r2, #5
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4641      	mov	r1, r8
 8004f1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f22:	4649      	mov	r1, r9
 8004f24:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f3c:	ebb2 040a 	subs.w	r4, r2, sl
 8004f40:	eb63 050b 	sbc.w	r5, r3, fp
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	00eb      	lsls	r3, r5, #3
 8004f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f52:	00e2      	lsls	r2, r4, #3
 8004f54:	4614      	mov	r4, r2
 8004f56:	461d      	mov	r5, r3
 8004f58:	4643      	mov	r3, r8
 8004f5a:	18e3      	adds	r3, r4, r3
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	464b      	mov	r3, r9
 8004f60:	eb45 0303 	adc.w	r3, r5, r3
 8004f64:	607b      	str	r3, [r7, #4]
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f72:	4629      	mov	r1, r5
 8004f74:	028b      	lsls	r3, r1, #10
 8004f76:	4621      	mov	r1, r4
 8004f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	028a      	lsls	r2, r1, #10
 8004f80:	4610      	mov	r0, r2
 8004f82:	4619      	mov	r1, r3
 8004f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f86:	2200      	movs	r2, #0
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	61fa      	str	r2, [r7, #28]
 8004f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f90:	f7fb f98e 	bl	80002b0 <__aeabi_uldivmod>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4613      	mov	r3, r2
 8004f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	0c1b      	lsrs	r3, r3, #16
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004fac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fb6:	e002      	b.n	8004fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fb8:	4b05      	ldr	r3, [pc, #20]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3750      	adds	r7, #80	@ 0x50
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fca:	bf00      	nop
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	00f42400 	.word	0x00f42400
 8004fd4:	007a1200 	.word	0x007a1200

08004fd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fdc:	4b03      	ldr	r3, [pc, #12]	@ (8004fec <HAL_RCC_GetHCLKFreq+0x14>)
 8004fde:	681b      	ldr	r3, [r3, #0]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	2000003c 	.word	0x2000003c

08004ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ff4:	f7ff fff0 	bl	8004fd8 <HAL_RCC_GetHCLKFreq>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4b05      	ldr	r3, [pc, #20]	@ (8005010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	0a9b      	lsrs	r3, r3, #10
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	4903      	ldr	r1, [pc, #12]	@ (8005014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005006:	5ccb      	ldrb	r3, [r1, r3]
 8005008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800500c:	4618      	mov	r0, r3
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40023800 	.word	0x40023800
 8005014:	08007184 	.word	0x08007184

08005018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800501c:	f7ff ffdc 	bl	8004fd8 <HAL_RCC_GetHCLKFreq>
 8005020:	4602      	mov	r2, r0
 8005022:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	0b5b      	lsrs	r3, r3, #13
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	4903      	ldr	r1, [pc, #12]	@ (800503c <HAL_RCC_GetPCLK2Freq+0x24>)
 800502e:	5ccb      	ldrb	r3, [r1, r3]
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005034:	4618      	mov	r0, r3
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40023800 	.word	0x40023800
 800503c:	08007184 	.word	0x08007184

08005040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005058:	2300      	movs	r3, #0
 800505a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d012      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005068:	4b69      	ldr	r3, [pc, #420]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	4a68      	ldr	r2, [pc, #416]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800506e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005072:	6093      	str	r3, [r2, #8]
 8005074:	4b66      	ldr	r3, [pc, #408]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800507c:	4964      	ldr	r1, [pc, #400]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507e:	4313      	orrs	r3, r2
 8005080:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800508a:	2301      	movs	r3, #1
 800508c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d017      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800509a:	4b5d      	ldr	r3, [pc, #372]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800509c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050a0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a8:	4959      	ldr	r1, [pc, #356]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050b8:	d101      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80050ba:	2301      	movs	r3, #1
 80050bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80050c6:	2301      	movs	r3, #1
 80050c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d017      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050d6:	4b4e      	ldr	r3, [pc, #312]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	494a      	ldr	r1, [pc, #296]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050f4:	d101      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80050f6:	2301      	movs	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005102:	2301      	movs	r3, #1
 8005104:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005112:	2301      	movs	r3, #1
 8005114:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 808b 	beq.w	800523a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005124:	4b3a      	ldr	r3, [pc, #232]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005128:	4a39      	ldr	r2, [pc, #228]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800512a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800512e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005130:	4b37      	ldr	r3, [pc, #220]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800513c:	4b35      	ldr	r3, [pc, #212]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a34      	ldr	r2, [pc, #208]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005148:	f7fe fb56 	bl	80037f8 <HAL_GetTick>
 800514c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005150:	f7fe fb52 	bl	80037f8 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b64      	cmp	r3, #100	@ 0x64
 800515c:	d901      	bls.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e357      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005162:	4b2c      	ldr	r3, [pc, #176]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0f0      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800516e:	4b28      	ldr	r3, [pc, #160]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005176:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d035      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	429a      	cmp	r2, r3
 800518a:	d02e      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800518c:	4b20      	ldr	r3, [pc, #128]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800518e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005194:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005196:	4b1e      	ldr	r3, [pc, #120]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519a:	4a1d      	ldr	r2, [pc, #116]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800519c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051a0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80051ae:	4a18      	ldr	r2, [pc, #96]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051b4:	4b16      	ldr	r3, [pc, #88]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d114      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7fe fb1a 	bl	80037f8 <HAL_GetTick>
 80051c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c6:	e00a      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c8:	f7fe fb16 	bl	80037f8 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d901      	bls.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e319      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051de:	4b0c      	ldr	r3, [pc, #48]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0ee      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051f6:	d111      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80051f8:	4b05      	ldr	r3, [pc, #20]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005204:	4b04      	ldr	r3, [pc, #16]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005206:	400b      	ands	r3, r1
 8005208:	4901      	ldr	r1, [pc, #4]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800520a:	4313      	orrs	r3, r2
 800520c:	608b      	str	r3, [r1, #8]
 800520e:	e00b      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005210:	40023800 	.word	0x40023800
 8005214:	40007000 	.word	0x40007000
 8005218:	0ffffcff 	.word	0x0ffffcff
 800521c:	4baa      	ldr	r3, [pc, #680]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	4aa9      	ldr	r2, [pc, #676]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005222:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005226:	6093      	str	r3, [r2, #8]
 8005228:	4ba7      	ldr	r3, [pc, #668]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800522a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005234:	49a4      	ldr	r1, [pc, #656]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005236:	4313      	orrs	r3, r2
 8005238:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	2b00      	cmp	r3, #0
 8005244:	d010      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005246:	4ba0      	ldr	r3, [pc, #640]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005248:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800524c:	4a9e      	ldr	r2, [pc, #632]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800524e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005252:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005256:	4b9c      	ldr	r3, [pc, #624]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005258:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005260:	4999      	ldr	r1, [pc, #612]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005274:	4b94      	ldr	r3, [pc, #592]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800527a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005282:	4991      	ldr	r1, [pc, #580]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005296:	4b8c      	ldr	r3, [pc, #560]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052a4:	4988      	ldr	r1, [pc, #544]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052b8:	4b83      	ldr	r3, [pc, #524]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052c6:	4980      	ldr	r1, [pc, #512]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052da:	4b7b      	ldr	r3, [pc, #492]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e8:	4977      	ldr	r1, [pc, #476]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052fc:	4b72      	ldr	r3, [pc, #456]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005302:	f023 0203 	bic.w	r2, r3, #3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530a:	496f      	ldr	r1, [pc, #444]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800531e:	4b6a      	ldr	r3, [pc, #424]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005324:	f023 020c 	bic.w	r2, r3, #12
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800532c:	4966      	ldr	r1, [pc, #408]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005340:	4b61      	ldr	r3, [pc, #388]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005346:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800534e:	495e      	ldr	r1, [pc, #376]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005362:	4b59      	ldr	r3, [pc, #356]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005368:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005370:	4955      	ldr	r1, [pc, #340]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00a      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005384:	4b50      	ldr	r3, [pc, #320]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005392:	494d      	ldr	r1, [pc, #308]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80053a6:	4b48      	ldr	r3, [pc, #288]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b4:	4944      	ldr	r1, [pc, #272]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80053c8:	4b3f      	ldr	r3, [pc, #252]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d6:	493c      	ldr	r1, [pc, #240]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80053ea:	4b37      	ldr	r3, [pc, #220]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053f8:	4933      	ldr	r1, [pc, #204]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800540c:	4b2e      	ldr	r3, [pc, #184]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005412:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800541a:	492b      	ldr	r1, [pc, #172]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d011      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800542e:	4b26      	ldr	r3, [pc, #152]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005434:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800543c:	4922      	ldr	r1, [pc, #136]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005448:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800544c:	d101      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800544e:	2301      	movs	r3, #1
 8005450:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800545e:	2301      	movs	r3, #1
 8005460:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800546e:	4b16      	ldr	r3, [pc, #88]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005474:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800547c:	4912      	ldr	r1, [pc, #72]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00b      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005490:	4b0d      	ldr	r3, [pc, #52]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005496:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054a0:	4909      	ldr	r1, [pc, #36]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d006      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 80d9 	beq.w	800566e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054bc:	4b02      	ldr	r3, [pc, #8]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a01      	ldr	r2, [pc, #4]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80054c6:	e001      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80054c8:	40023800 	.word	0x40023800
 80054cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ce:	f7fe f993 	bl	80037f8 <HAL_GetTick>
 80054d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054d4:	e008      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054d6:	f7fe f98f 	bl	80037f8 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b64      	cmp	r3, #100	@ 0x64
 80054e2:	d901      	bls.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e194      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054e8:	4b6c      	ldr	r3, [pc, #432]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1f0      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d021      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005504:	2b00      	cmp	r3, #0
 8005506:	d11d      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005508:	4b64      	ldr	r3, [pc, #400]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800550a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800550e:	0c1b      	lsrs	r3, r3, #16
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005516:	4b61      	ldr	r3, [pc, #388]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005518:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800551c:	0e1b      	lsrs	r3, r3, #24
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	019a      	lsls	r2, r3, #6
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	041b      	lsls	r3, r3, #16
 800552e:	431a      	orrs	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	061b      	lsls	r3, r3, #24
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	071b      	lsls	r3, r3, #28
 800553c:	4957      	ldr	r1, [pc, #348]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005554:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005558:	d00a      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005562:	2b00      	cmp	r3, #0
 8005564:	d02e      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800556e:	d129      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005570:	4b4a      	ldr	r3, [pc, #296]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005576:	0c1b      	lsrs	r3, r3, #16
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800557e:	4b47      	ldr	r3, [pc, #284]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005584:	0f1b      	lsrs	r3, r3, #28
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	019a      	lsls	r2, r3, #6
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	061b      	lsls	r3, r3, #24
 800559e:	431a      	orrs	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	071b      	lsls	r3, r3, #28
 80055a4:	493d      	ldr	r1, [pc, #244]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055ac:	4b3b      	ldr	r3, [pc, #236]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055b2:	f023 021f 	bic.w	r2, r3, #31
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ba:	3b01      	subs	r3, #1
 80055bc:	4937      	ldr	r1, [pc, #220]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01d      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055d0:	4b32      	ldr	r3, [pc, #200]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055d6:	0e1b      	lsrs	r3, r3, #24
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055de:	4b2f      	ldr	r3, [pc, #188]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055e4:	0f1b      	lsrs	r3, r3, #28
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	019a      	lsls	r2, r3, #6
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	041b      	lsls	r3, r3, #16
 80055f8:	431a      	orrs	r2, r3
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	061b      	lsls	r3, r3, #24
 80055fe:	431a      	orrs	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	071b      	lsls	r3, r3, #28
 8005604:	4925      	ldr	r1, [pc, #148]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d011      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	019a      	lsls	r2, r3, #6
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	041b      	lsls	r3, r3, #16
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	061b      	lsls	r3, r3, #24
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	071b      	lsls	r3, r3, #28
 8005634:	4919      	ldr	r1, [pc, #100]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800563c:	4b17      	ldr	r3, [pc, #92]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a16      	ldr	r2, [pc, #88]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005642:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005648:	f7fe f8d6 	bl	80037f8 <HAL_GetTick>
 800564c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800564e:	e008      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005650:	f7fe f8d2 	bl	80037f8 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b64      	cmp	r3, #100	@ 0x64
 800565c:	d901      	bls.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e0d7      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005662:	4b0e      	ldr	r3, [pc, #56]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0f0      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	2b01      	cmp	r3, #1
 8005672:	f040 80cd 	bne.w	8005810 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005676:	4b09      	ldr	r3, [pc, #36]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a08      	ldr	r2, [pc, #32]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800567c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005682:	f7fe f8b9 	bl	80037f8 <HAL_GetTick>
 8005686:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005688:	e00a      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800568a:	f7fe f8b5 	bl	80037f8 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b64      	cmp	r3, #100	@ 0x64
 8005696:	d903      	bls.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e0ba      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800569c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80056a0:	4b5e      	ldr	r3, [pc, #376]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056ac:	d0ed      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d009      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d02e      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d12a      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056d6:	4b51      	ldr	r3, [pc, #324]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056dc:	0c1b      	lsrs	r3, r3, #16
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056e4:	4b4d      	ldr	r3, [pc, #308]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ea:	0f1b      	lsrs	r3, r3, #28
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	019a      	lsls	r2, r3, #6
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	041b      	lsls	r3, r3, #16
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	061b      	lsls	r3, r3, #24
 8005704:	431a      	orrs	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	071b      	lsls	r3, r3, #28
 800570a:	4944      	ldr	r1, [pc, #272]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800570c:	4313      	orrs	r3, r2
 800570e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005712:	4b42      	ldr	r3, [pc, #264]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005718:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005720:	3b01      	subs	r3, #1
 8005722:	021b      	lsls	r3, r3, #8
 8005724:	493d      	ldr	r1, [pc, #244]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d022      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800573c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005740:	d11d      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005742:	4b36      	ldr	r3, [pc, #216]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005748:	0e1b      	lsrs	r3, r3, #24
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005750:	4b32      	ldr	r3, [pc, #200]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005756:	0f1b      	lsrs	r3, r3, #28
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	019a      	lsls	r2, r3, #6
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	431a      	orrs	r2, r3
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	061b      	lsls	r3, r3, #24
 8005770:	431a      	orrs	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	071b      	lsls	r3, r3, #28
 8005776:	4929      	ldr	r1, [pc, #164]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0308 	and.w	r3, r3, #8
 8005786:	2b00      	cmp	r3, #0
 8005788:	d028      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800578a:	4b24      	ldr	r3, [pc, #144]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005790:	0e1b      	lsrs	r3, r3, #24
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005798:	4b20      	ldr	r3, [pc, #128]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579e:	0c1b      	lsrs	r3, r3, #16
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	019a      	lsls	r2, r3, #6
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	041b      	lsls	r3, r3, #16
 80057b0:	431a      	orrs	r2, r3
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	061b      	lsls	r3, r3, #24
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	071b      	lsls	r3, r3, #28
 80057be:	4917      	ldr	r1, [pc, #92]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80057c6:	4b15      	ldr	r3, [pc, #84]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d4:	4911      	ldr	r1, [pc, #68]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80057dc:	4b0f      	ldr	r3, [pc, #60]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a0e      	ldr	r2, [pc, #56]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e8:	f7fe f806 	bl	80037f8 <HAL_GetTick>
 80057ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057f0:	f7fe f802 	bl	80037f8 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b64      	cmp	r3, #100	@ 0x64
 80057fc:	d901      	bls.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e007      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005802:	4b06      	ldr	r3, [pc, #24]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800580a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800580e:	d1ef      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40023800 	.word	0x40023800

08005820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e040      	b.n	80058b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fd fe0c 	bl	8003460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2224      	movs	r2, #36	@ 0x24
 800584c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0201 	bic.w	r2, r2, #1
 800585c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f8b0 	bl	80059c4 <UART_SetConfig>
 8005864:	4603      	mov	r3, r0
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e022      	b.n	80058b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fb08 	bl	8005e8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800588a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800589a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0201 	orr.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fb8f 	bl	8005fd0 <UART_CheckIdleState>
 80058b2:	4603      	mov	r3, r0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08a      	sub	sp, #40	@ 0x28
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	4613      	mov	r3, r2
 80058ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d171      	bne.n	80059b8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <HAL_UART_Transmit+0x24>
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e06a      	b.n	80059ba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2221      	movs	r2, #33	@ 0x21
 80058f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058f2:	f7fd ff81 	bl	80037f8 <HAL_GetTick>
 80058f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	88fa      	ldrh	r2, [r7, #6]
 80058fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	88fa      	ldrh	r2, [r7, #6]
 8005904:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005910:	d108      	bne.n	8005924 <HAL_UART_Transmit+0x68>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d104      	bne.n	8005924 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800591a:	2300      	movs	r3, #0
 800591c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	61bb      	str	r3, [r7, #24]
 8005922:	e003      	b.n	800592c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005928:	2300      	movs	r3, #0
 800592a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800592c:	e02c      	b.n	8005988 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2200      	movs	r2, #0
 8005936:	2180      	movs	r1, #128	@ 0x80
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fb80 	bl	800603e <UART_WaitOnFlagUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e038      	b.n	80059ba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10b      	bne.n	8005966 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800595c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	3302      	adds	r3, #2
 8005962:	61bb      	str	r3, [r7, #24]
 8005964:	e007      	b.n	8005976 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	781a      	ldrb	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	3301      	adds	r3, #1
 8005974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1cc      	bne.n	800592e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2200      	movs	r2, #0
 800599c:	2140      	movs	r1, #64	@ 0x40
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 fb4d 	bl	800603e <UART_WaitOnFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e005      	b.n	80059ba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	e000      	b.n	80059ba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80059b8:	2302      	movs	r3, #2
  }
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3720      	adds	r7, #32
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	4ba6      	ldr	r3, [pc, #664]	@ (8005c88 <UART_SetConfig+0x2c4>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6812      	ldr	r2, [r2, #0]
 80059f6:	6979      	ldr	r1, [r7, #20]
 80059f8:	430b      	orrs	r3, r1
 80059fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a94      	ldr	r2, [pc, #592]	@ (8005c8c <UART_SetConfig+0x2c8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d120      	bne.n	8005a82 <UART_SetConfig+0xbe>
 8005a40:	4b93      	ldr	r3, [pc, #588]	@ (8005c90 <UART_SetConfig+0x2cc>)
 8005a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d816      	bhi.n	8005a7c <UART_SetConfig+0xb8>
 8005a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a54 <UART_SetConfig+0x90>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005a65 	.word	0x08005a65
 8005a58:	08005a71 	.word	0x08005a71
 8005a5c:	08005a6b 	.word	0x08005a6b
 8005a60:	08005a77 	.word	0x08005a77
 8005a64:	2301      	movs	r3, #1
 8005a66:	77fb      	strb	r3, [r7, #31]
 8005a68:	e150      	b.n	8005d0c <UART_SetConfig+0x348>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	77fb      	strb	r3, [r7, #31]
 8005a6e:	e14d      	b.n	8005d0c <UART_SetConfig+0x348>
 8005a70:	2304      	movs	r3, #4
 8005a72:	77fb      	strb	r3, [r7, #31]
 8005a74:	e14a      	b.n	8005d0c <UART_SetConfig+0x348>
 8005a76:	2308      	movs	r3, #8
 8005a78:	77fb      	strb	r3, [r7, #31]
 8005a7a:	e147      	b.n	8005d0c <UART_SetConfig+0x348>
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	77fb      	strb	r3, [r7, #31]
 8005a80:	e144      	b.n	8005d0c <UART_SetConfig+0x348>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a83      	ldr	r2, [pc, #524]	@ (8005c94 <UART_SetConfig+0x2d0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d132      	bne.n	8005af2 <UART_SetConfig+0x12e>
 8005a8c:	4b80      	ldr	r3, [pc, #512]	@ (8005c90 <UART_SetConfig+0x2cc>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a92:	f003 030c 	and.w	r3, r3, #12
 8005a96:	2b0c      	cmp	r3, #12
 8005a98:	d828      	bhi.n	8005aec <UART_SetConfig+0x128>
 8005a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa0 <UART_SetConfig+0xdc>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005ad5 	.word	0x08005ad5
 8005aa4:	08005aed 	.word	0x08005aed
 8005aa8:	08005aed 	.word	0x08005aed
 8005aac:	08005aed 	.word	0x08005aed
 8005ab0:	08005ae1 	.word	0x08005ae1
 8005ab4:	08005aed 	.word	0x08005aed
 8005ab8:	08005aed 	.word	0x08005aed
 8005abc:	08005aed 	.word	0x08005aed
 8005ac0:	08005adb 	.word	0x08005adb
 8005ac4:	08005aed 	.word	0x08005aed
 8005ac8:	08005aed 	.word	0x08005aed
 8005acc:	08005aed 	.word	0x08005aed
 8005ad0:	08005ae7 	.word	0x08005ae7
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	77fb      	strb	r3, [r7, #31]
 8005ad8:	e118      	b.n	8005d0c <UART_SetConfig+0x348>
 8005ada:	2302      	movs	r3, #2
 8005adc:	77fb      	strb	r3, [r7, #31]
 8005ade:	e115      	b.n	8005d0c <UART_SetConfig+0x348>
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	77fb      	strb	r3, [r7, #31]
 8005ae4:	e112      	b.n	8005d0c <UART_SetConfig+0x348>
 8005ae6:	2308      	movs	r3, #8
 8005ae8:	77fb      	strb	r3, [r7, #31]
 8005aea:	e10f      	b.n	8005d0c <UART_SetConfig+0x348>
 8005aec:	2310      	movs	r3, #16
 8005aee:	77fb      	strb	r3, [r7, #31]
 8005af0:	e10c      	b.n	8005d0c <UART_SetConfig+0x348>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a68      	ldr	r2, [pc, #416]	@ (8005c98 <UART_SetConfig+0x2d4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d120      	bne.n	8005b3e <UART_SetConfig+0x17a>
 8005afc:	4b64      	ldr	r3, [pc, #400]	@ (8005c90 <UART_SetConfig+0x2cc>)
 8005afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b02:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b06:	2b30      	cmp	r3, #48	@ 0x30
 8005b08:	d013      	beq.n	8005b32 <UART_SetConfig+0x16e>
 8005b0a:	2b30      	cmp	r3, #48	@ 0x30
 8005b0c:	d814      	bhi.n	8005b38 <UART_SetConfig+0x174>
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	d009      	beq.n	8005b26 <UART_SetConfig+0x162>
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d810      	bhi.n	8005b38 <UART_SetConfig+0x174>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <UART_SetConfig+0x15c>
 8005b1a:	2b10      	cmp	r3, #16
 8005b1c:	d006      	beq.n	8005b2c <UART_SetConfig+0x168>
 8005b1e:	e00b      	b.n	8005b38 <UART_SetConfig+0x174>
 8005b20:	2300      	movs	r3, #0
 8005b22:	77fb      	strb	r3, [r7, #31]
 8005b24:	e0f2      	b.n	8005d0c <UART_SetConfig+0x348>
 8005b26:	2302      	movs	r3, #2
 8005b28:	77fb      	strb	r3, [r7, #31]
 8005b2a:	e0ef      	b.n	8005d0c <UART_SetConfig+0x348>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	77fb      	strb	r3, [r7, #31]
 8005b30:	e0ec      	b.n	8005d0c <UART_SetConfig+0x348>
 8005b32:	2308      	movs	r3, #8
 8005b34:	77fb      	strb	r3, [r7, #31]
 8005b36:	e0e9      	b.n	8005d0c <UART_SetConfig+0x348>
 8005b38:	2310      	movs	r3, #16
 8005b3a:	77fb      	strb	r3, [r7, #31]
 8005b3c:	e0e6      	b.n	8005d0c <UART_SetConfig+0x348>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a56      	ldr	r2, [pc, #344]	@ (8005c9c <UART_SetConfig+0x2d8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d120      	bne.n	8005b8a <UART_SetConfig+0x1c6>
 8005b48:	4b51      	ldr	r3, [pc, #324]	@ (8005c90 <UART_SetConfig+0x2cc>)
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b52:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b54:	d013      	beq.n	8005b7e <UART_SetConfig+0x1ba>
 8005b56:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b58:	d814      	bhi.n	8005b84 <UART_SetConfig+0x1c0>
 8005b5a:	2b80      	cmp	r3, #128	@ 0x80
 8005b5c:	d009      	beq.n	8005b72 <UART_SetConfig+0x1ae>
 8005b5e:	2b80      	cmp	r3, #128	@ 0x80
 8005b60:	d810      	bhi.n	8005b84 <UART_SetConfig+0x1c0>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <UART_SetConfig+0x1a8>
 8005b66:	2b40      	cmp	r3, #64	@ 0x40
 8005b68:	d006      	beq.n	8005b78 <UART_SetConfig+0x1b4>
 8005b6a:	e00b      	b.n	8005b84 <UART_SetConfig+0x1c0>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	77fb      	strb	r3, [r7, #31]
 8005b70:	e0cc      	b.n	8005d0c <UART_SetConfig+0x348>
 8005b72:	2302      	movs	r3, #2
 8005b74:	77fb      	strb	r3, [r7, #31]
 8005b76:	e0c9      	b.n	8005d0c <UART_SetConfig+0x348>
 8005b78:	2304      	movs	r3, #4
 8005b7a:	77fb      	strb	r3, [r7, #31]
 8005b7c:	e0c6      	b.n	8005d0c <UART_SetConfig+0x348>
 8005b7e:	2308      	movs	r3, #8
 8005b80:	77fb      	strb	r3, [r7, #31]
 8005b82:	e0c3      	b.n	8005d0c <UART_SetConfig+0x348>
 8005b84:	2310      	movs	r3, #16
 8005b86:	77fb      	strb	r3, [r7, #31]
 8005b88:	e0c0      	b.n	8005d0c <UART_SetConfig+0x348>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a44      	ldr	r2, [pc, #272]	@ (8005ca0 <UART_SetConfig+0x2dc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d125      	bne.n	8005be0 <UART_SetConfig+0x21c>
 8005b94:	4b3e      	ldr	r3, [pc, #248]	@ (8005c90 <UART_SetConfig+0x2cc>)
 8005b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ba2:	d017      	beq.n	8005bd4 <UART_SetConfig+0x210>
 8005ba4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ba8:	d817      	bhi.n	8005bda <UART_SetConfig+0x216>
 8005baa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bae:	d00b      	beq.n	8005bc8 <UART_SetConfig+0x204>
 8005bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb4:	d811      	bhi.n	8005bda <UART_SetConfig+0x216>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <UART_SetConfig+0x1fe>
 8005bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bbe:	d006      	beq.n	8005bce <UART_SetConfig+0x20a>
 8005bc0:	e00b      	b.n	8005bda <UART_SetConfig+0x216>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	77fb      	strb	r3, [r7, #31]
 8005bc6:	e0a1      	b.n	8005d0c <UART_SetConfig+0x348>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	77fb      	strb	r3, [r7, #31]
 8005bcc:	e09e      	b.n	8005d0c <UART_SetConfig+0x348>
 8005bce:	2304      	movs	r3, #4
 8005bd0:	77fb      	strb	r3, [r7, #31]
 8005bd2:	e09b      	b.n	8005d0c <UART_SetConfig+0x348>
 8005bd4:	2308      	movs	r3, #8
 8005bd6:	77fb      	strb	r3, [r7, #31]
 8005bd8:	e098      	b.n	8005d0c <UART_SetConfig+0x348>
 8005bda:	2310      	movs	r3, #16
 8005bdc:	77fb      	strb	r3, [r7, #31]
 8005bde:	e095      	b.n	8005d0c <UART_SetConfig+0x348>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a2f      	ldr	r2, [pc, #188]	@ (8005ca4 <UART_SetConfig+0x2e0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d125      	bne.n	8005c36 <UART_SetConfig+0x272>
 8005bea:	4b29      	ldr	r3, [pc, #164]	@ (8005c90 <UART_SetConfig+0x2cc>)
 8005bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005bf4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bf8:	d017      	beq.n	8005c2a <UART_SetConfig+0x266>
 8005bfa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bfe:	d817      	bhi.n	8005c30 <UART_SetConfig+0x26c>
 8005c00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c04:	d00b      	beq.n	8005c1e <UART_SetConfig+0x25a>
 8005c06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c0a:	d811      	bhi.n	8005c30 <UART_SetConfig+0x26c>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <UART_SetConfig+0x254>
 8005c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c14:	d006      	beq.n	8005c24 <UART_SetConfig+0x260>
 8005c16:	e00b      	b.n	8005c30 <UART_SetConfig+0x26c>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	77fb      	strb	r3, [r7, #31]
 8005c1c:	e076      	b.n	8005d0c <UART_SetConfig+0x348>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	77fb      	strb	r3, [r7, #31]
 8005c22:	e073      	b.n	8005d0c <UART_SetConfig+0x348>
 8005c24:	2304      	movs	r3, #4
 8005c26:	77fb      	strb	r3, [r7, #31]
 8005c28:	e070      	b.n	8005d0c <UART_SetConfig+0x348>
 8005c2a:	2308      	movs	r3, #8
 8005c2c:	77fb      	strb	r3, [r7, #31]
 8005c2e:	e06d      	b.n	8005d0c <UART_SetConfig+0x348>
 8005c30:	2310      	movs	r3, #16
 8005c32:	77fb      	strb	r3, [r7, #31]
 8005c34:	e06a      	b.n	8005d0c <UART_SetConfig+0x348>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ca8 <UART_SetConfig+0x2e4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d138      	bne.n	8005cb2 <UART_SetConfig+0x2ee>
 8005c40:	4b13      	ldr	r3, [pc, #76]	@ (8005c90 <UART_SetConfig+0x2cc>)
 8005c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c46:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005c4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c4e:	d017      	beq.n	8005c80 <UART_SetConfig+0x2bc>
 8005c50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c54:	d82a      	bhi.n	8005cac <UART_SetConfig+0x2e8>
 8005c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c5a:	d00b      	beq.n	8005c74 <UART_SetConfig+0x2b0>
 8005c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c60:	d824      	bhi.n	8005cac <UART_SetConfig+0x2e8>
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <UART_SetConfig+0x2aa>
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6a:	d006      	beq.n	8005c7a <UART_SetConfig+0x2b6>
 8005c6c:	e01e      	b.n	8005cac <UART_SetConfig+0x2e8>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	77fb      	strb	r3, [r7, #31]
 8005c72:	e04b      	b.n	8005d0c <UART_SetConfig+0x348>
 8005c74:	2302      	movs	r3, #2
 8005c76:	77fb      	strb	r3, [r7, #31]
 8005c78:	e048      	b.n	8005d0c <UART_SetConfig+0x348>
 8005c7a:	2304      	movs	r3, #4
 8005c7c:	77fb      	strb	r3, [r7, #31]
 8005c7e:	e045      	b.n	8005d0c <UART_SetConfig+0x348>
 8005c80:	2308      	movs	r3, #8
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	e042      	b.n	8005d0c <UART_SetConfig+0x348>
 8005c86:	bf00      	nop
 8005c88:	efff69f3 	.word	0xefff69f3
 8005c8c:	40011000 	.word	0x40011000
 8005c90:	40023800 	.word	0x40023800
 8005c94:	40004400 	.word	0x40004400
 8005c98:	40004800 	.word	0x40004800
 8005c9c:	40004c00 	.word	0x40004c00
 8005ca0:	40005000 	.word	0x40005000
 8005ca4:	40011400 	.word	0x40011400
 8005ca8:	40007800 	.word	0x40007800
 8005cac:	2310      	movs	r3, #16
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	e02c      	b.n	8005d0c <UART_SetConfig+0x348>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a72      	ldr	r2, [pc, #456]	@ (8005e80 <UART_SetConfig+0x4bc>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d125      	bne.n	8005d08 <UART_SetConfig+0x344>
 8005cbc:	4b71      	ldr	r3, [pc, #452]	@ (8005e84 <UART_SetConfig+0x4c0>)
 8005cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005cc6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005cca:	d017      	beq.n	8005cfc <UART_SetConfig+0x338>
 8005ccc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005cd0:	d817      	bhi.n	8005d02 <UART_SetConfig+0x33e>
 8005cd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cd6:	d00b      	beq.n	8005cf0 <UART_SetConfig+0x32c>
 8005cd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cdc:	d811      	bhi.n	8005d02 <UART_SetConfig+0x33e>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <UART_SetConfig+0x326>
 8005ce2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ce6:	d006      	beq.n	8005cf6 <UART_SetConfig+0x332>
 8005ce8:	e00b      	b.n	8005d02 <UART_SetConfig+0x33e>
 8005cea:	2300      	movs	r3, #0
 8005cec:	77fb      	strb	r3, [r7, #31]
 8005cee:	e00d      	b.n	8005d0c <UART_SetConfig+0x348>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	77fb      	strb	r3, [r7, #31]
 8005cf4:	e00a      	b.n	8005d0c <UART_SetConfig+0x348>
 8005cf6:	2304      	movs	r3, #4
 8005cf8:	77fb      	strb	r3, [r7, #31]
 8005cfa:	e007      	b.n	8005d0c <UART_SetConfig+0x348>
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e004      	b.n	8005d0c <UART_SetConfig+0x348>
 8005d02:	2310      	movs	r3, #16
 8005d04:	77fb      	strb	r3, [r7, #31]
 8005d06:	e001      	b.n	8005d0c <UART_SetConfig+0x348>
 8005d08:	2310      	movs	r3, #16
 8005d0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d14:	d15b      	bne.n	8005dce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005d16:	7ffb      	ldrb	r3, [r7, #31]
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d828      	bhi.n	8005d6e <UART_SetConfig+0x3aa>
 8005d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d24 <UART_SetConfig+0x360>)
 8005d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d22:	bf00      	nop
 8005d24:	08005d49 	.word	0x08005d49
 8005d28:	08005d51 	.word	0x08005d51
 8005d2c:	08005d59 	.word	0x08005d59
 8005d30:	08005d6f 	.word	0x08005d6f
 8005d34:	08005d5f 	.word	0x08005d5f
 8005d38:	08005d6f 	.word	0x08005d6f
 8005d3c:	08005d6f 	.word	0x08005d6f
 8005d40:	08005d6f 	.word	0x08005d6f
 8005d44:	08005d67 	.word	0x08005d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d48:	f7ff f952 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 8005d4c:	61b8      	str	r0, [r7, #24]
        break;
 8005d4e:	e013      	b.n	8005d78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d50:	f7ff f962 	bl	8005018 <HAL_RCC_GetPCLK2Freq>
 8005d54:	61b8      	str	r0, [r7, #24]
        break;
 8005d56:	e00f      	b.n	8005d78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d58:	4b4b      	ldr	r3, [pc, #300]	@ (8005e88 <UART_SetConfig+0x4c4>)
 8005d5a:	61bb      	str	r3, [r7, #24]
        break;
 8005d5c:	e00c      	b.n	8005d78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d5e:	f7ff f835 	bl	8004dcc <HAL_RCC_GetSysClockFreq>
 8005d62:	61b8      	str	r0, [r7, #24]
        break;
 8005d64:	e008      	b.n	8005d78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d6a:	61bb      	str	r3, [r7, #24]
        break;
 8005d6c:	e004      	b.n	8005d78 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	77bb      	strb	r3, [r7, #30]
        break;
 8005d76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d074      	beq.n	8005e68 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	005a      	lsls	r2, r3, #1
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	085b      	lsrs	r3, r3, #1
 8005d88:	441a      	add	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	2b0f      	cmp	r3, #15
 8005d98:	d916      	bls.n	8005dc8 <UART_SetConfig+0x404>
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005da0:	d212      	bcs.n	8005dc8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f023 030f 	bic.w	r3, r3, #15
 8005daa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	085b      	lsrs	r3, r3, #1
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	89fb      	ldrh	r3, [r7, #14]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	89fa      	ldrh	r2, [r7, #14]
 8005dc4:	60da      	str	r2, [r3, #12]
 8005dc6:	e04f      	b.n	8005e68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	77bb      	strb	r3, [r7, #30]
 8005dcc:	e04c      	b.n	8005e68 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dce:	7ffb      	ldrb	r3, [r7, #31]
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d828      	bhi.n	8005e26 <UART_SetConfig+0x462>
 8005dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ddc <UART_SetConfig+0x418>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005e01 	.word	0x08005e01
 8005de0:	08005e09 	.word	0x08005e09
 8005de4:	08005e11 	.word	0x08005e11
 8005de8:	08005e27 	.word	0x08005e27
 8005dec:	08005e17 	.word	0x08005e17
 8005df0:	08005e27 	.word	0x08005e27
 8005df4:	08005e27 	.word	0x08005e27
 8005df8:	08005e27 	.word	0x08005e27
 8005dfc:	08005e1f 	.word	0x08005e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e00:	f7ff f8f6 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 8005e04:	61b8      	str	r0, [r7, #24]
        break;
 8005e06:	e013      	b.n	8005e30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e08:	f7ff f906 	bl	8005018 <HAL_RCC_GetPCLK2Freq>
 8005e0c:	61b8      	str	r0, [r7, #24]
        break;
 8005e0e:	e00f      	b.n	8005e30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e10:	4b1d      	ldr	r3, [pc, #116]	@ (8005e88 <UART_SetConfig+0x4c4>)
 8005e12:	61bb      	str	r3, [r7, #24]
        break;
 8005e14:	e00c      	b.n	8005e30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e16:	f7fe ffd9 	bl	8004dcc <HAL_RCC_GetSysClockFreq>
 8005e1a:	61b8      	str	r0, [r7, #24]
        break;
 8005e1c:	e008      	b.n	8005e30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e22:	61bb      	str	r3, [r7, #24]
        break;
 8005e24:	e004      	b.n	8005e30 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	77bb      	strb	r3, [r7, #30]
        break;
 8005e2e:	bf00      	nop
    }

    if (pclk != 0U)
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d018      	beq.n	8005e68 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	085a      	lsrs	r2, r3, #1
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	441a      	add	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b0f      	cmp	r3, #15
 8005e4e:	d909      	bls.n	8005e64 <UART_SetConfig+0x4a0>
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e56:	d205      	bcs.n	8005e64 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60da      	str	r2, [r3, #12]
 8005e62:	e001      	b.n	8005e68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005e74:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3720      	adds	r7, #32
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	40007c00 	.word	0x40007c00
 8005e84:	40023800 	.word	0x40023800
 8005e88:	00f42400 	.word	0x00f42400

08005e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f20:	f003 0310 	and.w	r3, r3, #16
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f42:	f003 0320 	and.w	r3, r3, #32
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01a      	beq.n	8005fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f8a:	d10a      	bne.n	8005fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	605a      	str	r2, [r3, #4]
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fe0:	f7fd fc0a 	bl	80037f8 <HAL_GetTick>
 8005fe4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0308 	and.w	r3, r3, #8
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d10e      	bne.n	8006012 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f81b 	bl	800603e <UART_WaitOnFlagUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e011      	b.n	8006036 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2220      	movs	r2, #32
 800601c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b09c      	sub	sp, #112	@ 0x70
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	603b      	str	r3, [r7, #0]
 800604a:	4613      	mov	r3, r2
 800604c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800604e:	e0a7      	b.n	80061a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006050:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006052:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006056:	f000 80a3 	beq.w	80061a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800605a:	f7fd fbcd 	bl	80037f8 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006066:	429a      	cmp	r2, r3
 8006068:	d302      	bcc.n	8006070 <UART_WaitOnFlagUntilTimeout+0x32>
 800606a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800606c:	2b00      	cmp	r3, #0
 800606e:	d13f      	bne.n	80060f0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800607e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006080:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006084:	667b      	str	r3, [r7, #100]	@ 0x64
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800608e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006090:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006094:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800609c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e6      	bne.n	8006070 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3308      	adds	r3, #8
 80060a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b4:	f023 0301 	bic.w	r3, r3, #1
 80060b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3308      	adds	r3, #8
 80060c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80060c2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80060c4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80060c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80060d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1e5      	bne.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2220      	movs	r2, #32
 80060da:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2220      	movs	r2, #32
 80060e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e068      	b.n	80061c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d050      	beq.n	80061a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006108:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800610c:	d148      	bne.n	80061a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006116:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800612c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006136:	637b      	str	r3, [r7, #52]	@ 0x34
 8006138:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800613c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e6      	bne.n	8006118 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3308      	adds	r3, #8
 8006150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	613b      	str	r3, [r7, #16]
   return(result);
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f023 0301 	bic.w	r3, r3, #1
 8006160:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3308      	adds	r3, #8
 8006168:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800616a:	623a      	str	r2, [r7, #32]
 800616c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	69f9      	ldr	r1, [r7, #28]
 8006170:	6a3a      	ldr	r2, [r7, #32]
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	61bb      	str	r3, [r7, #24]
   return(result);
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e5      	bne.n	800614a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2220      	movs	r2, #32
 8006190:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e010      	b.n	80061c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	69da      	ldr	r2, [r3, #28]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	4013      	ands	r3, r2
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	bf0c      	ite	eq
 80061b0:	2301      	moveq	r3, #1
 80061b2:	2300      	movne	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	f43f af48 	beq.w	8006050 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3770      	adds	r7, #112	@ 0x70
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061cc:	b084      	sub	sp, #16
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	f107 001c 	add.w	r0, r7, #28
 80061da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d120      	bne.n	8006226 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	4b20      	ldr	r3, [pc, #128]	@ (8006278 <USB_CoreInit+0xac>)
 80061f6:	4013      	ands	r3, r2
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800620a:	2b01      	cmp	r3, #1
 800620c:	d105      	bne.n	800621a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fa96 	bl	800674c <USB_CoreReset>
 8006220:	4603      	mov	r3, r0
 8006222:	73fb      	strb	r3, [r7, #15]
 8006224:	e010      	b.n	8006248 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa8a 	bl	800674c <USB_CoreReset>
 8006238:	4603      	mov	r3, r0
 800623a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006240:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	2b01      	cmp	r3, #1
 800624c:	d10b      	bne.n	8006266 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f043 0206 	orr.w	r2, r3, #6
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f043 0220 	orr.w	r2, r3, #32
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006266:	7bfb      	ldrb	r3, [r7, #15]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006272:	b004      	add	sp, #16
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	ffbdffbf 	.word	0xffbdffbf

0800627c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f023 0201 	bic.w	r2, r3, #1
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	460b      	mov	r3, r1
 80062a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d115      	bne.n	80062ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062cc:	2001      	movs	r0, #1
 80062ce:	f7fd fa9f 	bl	8003810 <HAL_Delay>
      ms++;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3301      	adds	r3, #1
 80062d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fa29 	bl	8006730 <USB_GetMode>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d01e      	beq.n	8006322 <USB_SetCurrentMode+0x84>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2b31      	cmp	r3, #49	@ 0x31
 80062e8:	d9f0      	bls.n	80062cc <USB_SetCurrentMode+0x2e>
 80062ea:	e01a      	b.n	8006322 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d115      	bne.n	800631e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062fe:	2001      	movs	r0, #1
 8006300:	f7fd fa86 	bl	8003810 <HAL_Delay>
      ms++;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3301      	adds	r3, #1
 8006308:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fa10 	bl	8006730 <USB_GetMode>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d005      	beq.n	8006322 <USB_SetCurrentMode+0x84>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b31      	cmp	r3, #49	@ 0x31
 800631a:	d9f0      	bls.n	80062fe <USB_SetCurrentMode+0x60>
 800631c:	e001      	b.n	8006322 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e005      	b.n	800632e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b32      	cmp	r3, #50	@ 0x32
 8006326:	d101      	bne.n	800632c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006338:	b084      	sub	sp, #16
 800633a:	b580      	push	{r7, lr}
 800633c:	b086      	sub	sp, #24
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006352:	2300      	movs	r3, #0
 8006354:	613b      	str	r3, [r7, #16]
 8006356:	e009      	b.n	800636c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	3340      	adds	r3, #64	@ 0x40
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	2200      	movs	r2, #0
 8006364:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	3301      	adds	r3, #1
 800636a:	613b      	str	r3, [r7, #16]
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	2b0e      	cmp	r3, #14
 8006370:	d9f2      	bls.n	8006358 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d11c      	bne.n	80063b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006386:	f043 0302 	orr.w	r3, r3, #2
 800638a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006390:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	e005      	b.n	80063be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063c4:	461a      	mov	r2, r3
 80063c6:	2300      	movs	r3, #0
 80063c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d0:	4619      	mov	r1, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d8:	461a      	mov	r2, r3
 80063da:	680b      	ldr	r3, [r1, #0]
 80063dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d10c      	bne.n	80063fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80063e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d104      	bne.n	80063f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80063ea:	2100      	movs	r1, #0
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f965 	bl	80066bc <USB_SetDevSpeed>
 80063f2:	e008      	b.n	8006406 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80063f4:	2101      	movs	r1, #1
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f960 	bl	80066bc <USB_SetDevSpeed>
 80063fc:	e003      	b.n	8006406 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80063fe:	2103      	movs	r1, #3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f95b 	bl	80066bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006406:	2110      	movs	r1, #16
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f8f3 	bl	80065f4 <USB_FlushTxFifo>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f91f 	bl	800665c <USB_FlushRxFifo>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800642e:	461a      	mov	r2, r3
 8006430:	2300      	movs	r3, #0
 8006432:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800643a:	461a      	mov	r2, r3
 800643c:	2300      	movs	r3, #0
 800643e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006446:	461a      	mov	r2, r3
 8006448:	2300      	movs	r3, #0
 800644a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800644c:	2300      	movs	r3, #0
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	e043      	b.n	80064da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006464:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006468:	d118      	bne.n	800649c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10a      	bne.n	8006486 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800647c:	461a      	mov	r2, r3
 800647e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	e013      	b.n	80064ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006492:	461a      	mov	r2, r3
 8006494:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	e008      	b.n	80064ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064a8:	461a      	mov	r2, r3
 80064aa:	2300      	movs	r3, #0
 80064ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ba:	461a      	mov	r2, r3
 80064bc:	2300      	movs	r3, #0
 80064be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064cc:	461a      	mov	r2, r3
 80064ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	3301      	adds	r3, #1
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d3b7      	bcc.n	8006452 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064e2:	2300      	movs	r3, #0
 80064e4:	613b      	str	r3, [r7, #16]
 80064e6:	e043      	b.n	8006570 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064fe:	d118      	bne.n	8006532 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10a      	bne.n	800651c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006512:	461a      	mov	r2, r3
 8006514:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	e013      	b.n	8006544 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006528:	461a      	mov	r2, r3
 800652a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	e008      	b.n	8006544 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800653e:	461a      	mov	r2, r3
 8006540:	2300      	movs	r3, #0
 8006542:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006550:	461a      	mov	r2, r3
 8006552:	2300      	movs	r3, #0
 8006554:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006562:	461a      	mov	r2, r3
 8006564:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006568:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	3301      	adds	r3, #1
 800656e:	613b      	str	r3, [r7, #16]
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	429a      	cmp	r2, r3
 8006576:	d3b7      	bcc.n	80064e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006586:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800658a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006598:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	2b00      	cmp	r3, #0
 800659e:	d105      	bne.n	80065ac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	f043 0210 	orr.w	r2, r3, #16
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699a      	ldr	r2, [r3, #24]
 80065b0:	4b0e      	ldr	r3, [pc, #56]	@ (80065ec <USB_DevInit+0x2b4>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80065b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	f043 0208 	orr.w	r2, r3, #8
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80065ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d105      	bne.n	80065dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699a      	ldr	r2, [r3, #24]
 80065d4:	4b06      	ldr	r3, [pc, #24]	@ (80065f0 <USB_DevInit+0x2b8>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065e8:	b004      	add	sp, #16
 80065ea:	4770      	bx	lr
 80065ec:	803c3800 	.word	0x803c3800
 80065f0:	40000004 	.word	0x40000004

080065f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3301      	adds	r3, #1
 8006606:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4a13      	ldr	r2, [pc, #76]	@ (8006658 <USB_FlushTxFifo+0x64>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d901      	bls.n	8006614 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e01b      	b.n	800664c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	daf2      	bge.n	8006602 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800661c:	2300      	movs	r3, #0
 800661e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	019b      	lsls	r3, r3, #6
 8006624:	f043 0220 	orr.w	r2, r3, #32
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3301      	adds	r3, #1
 8006630:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4a08      	ldr	r2, [pc, #32]	@ (8006658 <USB_FlushTxFifo+0x64>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e006      	b.n	800664c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f003 0320 	and.w	r3, r3, #32
 8006646:	2b20      	cmp	r3, #32
 8006648:	d0f0      	beq.n	800662c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	00030d40 	.word	0x00030d40

0800665c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3301      	adds	r3, #1
 800666c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a11      	ldr	r2, [pc, #68]	@ (80066b8 <USB_FlushRxFifo+0x5c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d901      	bls.n	800667a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e018      	b.n	80066ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	daf2      	bge.n	8006668 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2210      	movs	r2, #16
 800668a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3301      	adds	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4a08      	ldr	r2, [pc, #32]	@ (80066b8 <USB_FlushRxFifo+0x5c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d901      	bls.n	800669e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e006      	b.n	80066ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f003 0310 	and.w	r3, r3, #16
 80066a6:	2b10      	cmp	r3, #16
 80066a8:	d0f0      	beq.n	800668c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	00030d40 	.word	0x00030d40

080066bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	68f9      	ldr	r1, [r7, #12]
 80066d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066dc:	4313      	orrs	r3, r2
 80066de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006708:	f023 0303 	bic.w	r3, r3, #3
 800670c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800671c:	f043 0302 	orr.w	r3, r3, #2
 8006720:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	f003 0301 	and.w	r3, r3, #1
}
 8006740:	4618      	mov	r0, r3
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3301      	adds	r3, #1
 800675c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4a13      	ldr	r2, [pc, #76]	@ (80067b0 <USB_CoreReset+0x64>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d901      	bls.n	800676a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e01b      	b.n	80067a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	daf2      	bge.n	8006758 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	f043 0201 	orr.w	r2, r3, #1
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3301      	adds	r3, #1
 8006786:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4a09      	ldr	r2, [pc, #36]	@ (80067b0 <USB_CoreReset+0x64>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d901      	bls.n	8006794 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e006      	b.n	80067a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b01      	cmp	r3, #1
 800679e:	d0f0      	beq.n	8006782 <USB_CoreReset+0x36>

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	00030d40 	.word	0x00030d40

080067b4 <siprintf>:
 80067b4:	b40e      	push	{r1, r2, r3}
 80067b6:	b500      	push	{lr}
 80067b8:	b09c      	sub	sp, #112	@ 0x70
 80067ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80067bc:	9002      	str	r0, [sp, #8]
 80067be:	9006      	str	r0, [sp, #24]
 80067c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80067c4:	4809      	ldr	r0, [pc, #36]	@ (80067ec <siprintf+0x38>)
 80067c6:	9107      	str	r1, [sp, #28]
 80067c8:	9104      	str	r1, [sp, #16]
 80067ca:	4909      	ldr	r1, [pc, #36]	@ (80067f0 <siprintf+0x3c>)
 80067cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80067d0:	9105      	str	r1, [sp, #20]
 80067d2:	6800      	ldr	r0, [r0, #0]
 80067d4:	9301      	str	r3, [sp, #4]
 80067d6:	a902      	add	r1, sp, #8
 80067d8:	f000 f9a2 	bl	8006b20 <_svfiprintf_r>
 80067dc:	9b02      	ldr	r3, [sp, #8]
 80067de:	2200      	movs	r2, #0
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	b01c      	add	sp, #112	@ 0x70
 80067e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80067e8:	b003      	add	sp, #12
 80067ea:	4770      	bx	lr
 80067ec:	20000048 	.word	0x20000048
 80067f0:	ffff0208 	.word	0xffff0208

080067f4 <memset>:
 80067f4:	4402      	add	r2, r0
 80067f6:	4603      	mov	r3, r0
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d100      	bne.n	80067fe <memset+0xa>
 80067fc:	4770      	bx	lr
 80067fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006802:	e7f9      	b.n	80067f8 <memset+0x4>

08006804 <__errno>:
 8006804:	4b01      	ldr	r3, [pc, #4]	@ (800680c <__errno+0x8>)
 8006806:	6818      	ldr	r0, [r3, #0]
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	20000048 	.word	0x20000048

08006810 <__libc_init_array>:
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	4d0d      	ldr	r5, [pc, #52]	@ (8006848 <__libc_init_array+0x38>)
 8006814:	4c0d      	ldr	r4, [pc, #52]	@ (800684c <__libc_init_array+0x3c>)
 8006816:	1b64      	subs	r4, r4, r5
 8006818:	10a4      	asrs	r4, r4, #2
 800681a:	2600      	movs	r6, #0
 800681c:	42a6      	cmp	r6, r4
 800681e:	d109      	bne.n	8006834 <__libc_init_array+0x24>
 8006820:	4d0b      	ldr	r5, [pc, #44]	@ (8006850 <__libc_init_array+0x40>)
 8006822:	4c0c      	ldr	r4, [pc, #48]	@ (8006854 <__libc_init_array+0x44>)
 8006824:	f000 fc66 	bl	80070f4 <_init>
 8006828:	1b64      	subs	r4, r4, r5
 800682a:	10a4      	asrs	r4, r4, #2
 800682c:	2600      	movs	r6, #0
 800682e:	42a6      	cmp	r6, r4
 8006830:	d105      	bne.n	800683e <__libc_init_array+0x2e>
 8006832:	bd70      	pop	{r4, r5, r6, pc}
 8006834:	f855 3b04 	ldr.w	r3, [r5], #4
 8006838:	4798      	blx	r3
 800683a:	3601      	adds	r6, #1
 800683c:	e7ee      	b.n	800681c <__libc_init_array+0xc>
 800683e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006842:	4798      	blx	r3
 8006844:	3601      	adds	r6, #1
 8006846:	e7f2      	b.n	800682e <__libc_init_array+0x1e>
 8006848:	080071c8 	.word	0x080071c8
 800684c:	080071c8 	.word	0x080071c8
 8006850:	080071c8 	.word	0x080071c8
 8006854:	080071cc 	.word	0x080071cc

08006858 <__retarget_lock_acquire_recursive>:
 8006858:	4770      	bx	lr

0800685a <__retarget_lock_release_recursive>:
 800685a:	4770      	bx	lr

0800685c <memcpy>:
 800685c:	440a      	add	r2, r1
 800685e:	4291      	cmp	r1, r2
 8006860:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006864:	d100      	bne.n	8006868 <memcpy+0xc>
 8006866:	4770      	bx	lr
 8006868:	b510      	push	{r4, lr}
 800686a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800686e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006872:	4291      	cmp	r1, r2
 8006874:	d1f9      	bne.n	800686a <memcpy+0xe>
 8006876:	bd10      	pop	{r4, pc}

08006878 <_free_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	4605      	mov	r5, r0
 800687c:	2900      	cmp	r1, #0
 800687e:	d041      	beq.n	8006904 <_free_r+0x8c>
 8006880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006884:	1f0c      	subs	r4, r1, #4
 8006886:	2b00      	cmp	r3, #0
 8006888:	bfb8      	it	lt
 800688a:	18e4      	addlt	r4, r4, r3
 800688c:	f000 f8e0 	bl	8006a50 <__malloc_lock>
 8006890:	4a1d      	ldr	r2, [pc, #116]	@ (8006908 <_free_r+0x90>)
 8006892:	6813      	ldr	r3, [r2, #0]
 8006894:	b933      	cbnz	r3, 80068a4 <_free_r+0x2c>
 8006896:	6063      	str	r3, [r4, #4]
 8006898:	6014      	str	r4, [r2, #0]
 800689a:	4628      	mov	r0, r5
 800689c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068a0:	f000 b8dc 	b.w	8006a5c <__malloc_unlock>
 80068a4:	42a3      	cmp	r3, r4
 80068a6:	d908      	bls.n	80068ba <_free_r+0x42>
 80068a8:	6820      	ldr	r0, [r4, #0]
 80068aa:	1821      	adds	r1, r4, r0
 80068ac:	428b      	cmp	r3, r1
 80068ae:	bf01      	itttt	eq
 80068b0:	6819      	ldreq	r1, [r3, #0]
 80068b2:	685b      	ldreq	r3, [r3, #4]
 80068b4:	1809      	addeq	r1, r1, r0
 80068b6:	6021      	streq	r1, [r4, #0]
 80068b8:	e7ed      	b.n	8006896 <_free_r+0x1e>
 80068ba:	461a      	mov	r2, r3
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	b10b      	cbz	r3, 80068c4 <_free_r+0x4c>
 80068c0:	42a3      	cmp	r3, r4
 80068c2:	d9fa      	bls.n	80068ba <_free_r+0x42>
 80068c4:	6811      	ldr	r1, [r2, #0]
 80068c6:	1850      	adds	r0, r2, r1
 80068c8:	42a0      	cmp	r0, r4
 80068ca:	d10b      	bne.n	80068e4 <_free_r+0x6c>
 80068cc:	6820      	ldr	r0, [r4, #0]
 80068ce:	4401      	add	r1, r0
 80068d0:	1850      	adds	r0, r2, r1
 80068d2:	4283      	cmp	r3, r0
 80068d4:	6011      	str	r1, [r2, #0]
 80068d6:	d1e0      	bne.n	800689a <_free_r+0x22>
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	6053      	str	r3, [r2, #4]
 80068de:	4408      	add	r0, r1
 80068e0:	6010      	str	r0, [r2, #0]
 80068e2:	e7da      	b.n	800689a <_free_r+0x22>
 80068e4:	d902      	bls.n	80068ec <_free_r+0x74>
 80068e6:	230c      	movs	r3, #12
 80068e8:	602b      	str	r3, [r5, #0]
 80068ea:	e7d6      	b.n	800689a <_free_r+0x22>
 80068ec:	6820      	ldr	r0, [r4, #0]
 80068ee:	1821      	adds	r1, r4, r0
 80068f0:	428b      	cmp	r3, r1
 80068f2:	bf04      	itt	eq
 80068f4:	6819      	ldreq	r1, [r3, #0]
 80068f6:	685b      	ldreq	r3, [r3, #4]
 80068f8:	6063      	str	r3, [r4, #4]
 80068fa:	bf04      	itt	eq
 80068fc:	1809      	addeq	r1, r1, r0
 80068fe:	6021      	streq	r1, [r4, #0]
 8006900:	6054      	str	r4, [r2, #4]
 8006902:	e7ca      	b.n	800689a <_free_r+0x22>
 8006904:	bd38      	pop	{r3, r4, r5, pc}
 8006906:	bf00      	nop
 8006908:	20003f48 	.word	0x20003f48

0800690c <sbrk_aligned>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	4e0f      	ldr	r6, [pc, #60]	@ (800694c <sbrk_aligned+0x40>)
 8006910:	460c      	mov	r4, r1
 8006912:	6831      	ldr	r1, [r6, #0]
 8006914:	4605      	mov	r5, r0
 8006916:	b911      	cbnz	r1, 800691e <sbrk_aligned+0x12>
 8006918:	f000 fba6 	bl	8007068 <_sbrk_r>
 800691c:	6030      	str	r0, [r6, #0]
 800691e:	4621      	mov	r1, r4
 8006920:	4628      	mov	r0, r5
 8006922:	f000 fba1 	bl	8007068 <_sbrk_r>
 8006926:	1c43      	adds	r3, r0, #1
 8006928:	d103      	bne.n	8006932 <sbrk_aligned+0x26>
 800692a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800692e:	4620      	mov	r0, r4
 8006930:	bd70      	pop	{r4, r5, r6, pc}
 8006932:	1cc4      	adds	r4, r0, #3
 8006934:	f024 0403 	bic.w	r4, r4, #3
 8006938:	42a0      	cmp	r0, r4
 800693a:	d0f8      	beq.n	800692e <sbrk_aligned+0x22>
 800693c:	1a21      	subs	r1, r4, r0
 800693e:	4628      	mov	r0, r5
 8006940:	f000 fb92 	bl	8007068 <_sbrk_r>
 8006944:	3001      	adds	r0, #1
 8006946:	d1f2      	bne.n	800692e <sbrk_aligned+0x22>
 8006948:	e7ef      	b.n	800692a <sbrk_aligned+0x1e>
 800694a:	bf00      	nop
 800694c:	20003f44 	.word	0x20003f44

08006950 <_malloc_r>:
 8006950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006954:	1ccd      	adds	r5, r1, #3
 8006956:	f025 0503 	bic.w	r5, r5, #3
 800695a:	3508      	adds	r5, #8
 800695c:	2d0c      	cmp	r5, #12
 800695e:	bf38      	it	cc
 8006960:	250c      	movcc	r5, #12
 8006962:	2d00      	cmp	r5, #0
 8006964:	4606      	mov	r6, r0
 8006966:	db01      	blt.n	800696c <_malloc_r+0x1c>
 8006968:	42a9      	cmp	r1, r5
 800696a:	d904      	bls.n	8006976 <_malloc_r+0x26>
 800696c:	230c      	movs	r3, #12
 800696e:	6033      	str	r3, [r6, #0]
 8006970:	2000      	movs	r0, #0
 8006972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006976:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a4c <_malloc_r+0xfc>
 800697a:	f000 f869 	bl	8006a50 <__malloc_lock>
 800697e:	f8d8 3000 	ldr.w	r3, [r8]
 8006982:	461c      	mov	r4, r3
 8006984:	bb44      	cbnz	r4, 80069d8 <_malloc_r+0x88>
 8006986:	4629      	mov	r1, r5
 8006988:	4630      	mov	r0, r6
 800698a:	f7ff ffbf 	bl	800690c <sbrk_aligned>
 800698e:	1c43      	adds	r3, r0, #1
 8006990:	4604      	mov	r4, r0
 8006992:	d158      	bne.n	8006a46 <_malloc_r+0xf6>
 8006994:	f8d8 4000 	ldr.w	r4, [r8]
 8006998:	4627      	mov	r7, r4
 800699a:	2f00      	cmp	r7, #0
 800699c:	d143      	bne.n	8006a26 <_malloc_r+0xd6>
 800699e:	2c00      	cmp	r4, #0
 80069a0:	d04b      	beq.n	8006a3a <_malloc_r+0xea>
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	4639      	mov	r1, r7
 80069a6:	4630      	mov	r0, r6
 80069a8:	eb04 0903 	add.w	r9, r4, r3
 80069ac:	f000 fb5c 	bl	8007068 <_sbrk_r>
 80069b0:	4581      	cmp	r9, r0
 80069b2:	d142      	bne.n	8006a3a <_malloc_r+0xea>
 80069b4:	6821      	ldr	r1, [r4, #0]
 80069b6:	1a6d      	subs	r5, r5, r1
 80069b8:	4629      	mov	r1, r5
 80069ba:	4630      	mov	r0, r6
 80069bc:	f7ff ffa6 	bl	800690c <sbrk_aligned>
 80069c0:	3001      	adds	r0, #1
 80069c2:	d03a      	beq.n	8006a3a <_malloc_r+0xea>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	442b      	add	r3, r5
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	f8d8 3000 	ldr.w	r3, [r8]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	bb62      	cbnz	r2, 8006a2c <_malloc_r+0xdc>
 80069d2:	f8c8 7000 	str.w	r7, [r8]
 80069d6:	e00f      	b.n	80069f8 <_malloc_r+0xa8>
 80069d8:	6822      	ldr	r2, [r4, #0]
 80069da:	1b52      	subs	r2, r2, r5
 80069dc:	d420      	bmi.n	8006a20 <_malloc_r+0xd0>
 80069de:	2a0b      	cmp	r2, #11
 80069e0:	d917      	bls.n	8006a12 <_malloc_r+0xc2>
 80069e2:	1961      	adds	r1, r4, r5
 80069e4:	42a3      	cmp	r3, r4
 80069e6:	6025      	str	r5, [r4, #0]
 80069e8:	bf18      	it	ne
 80069ea:	6059      	strne	r1, [r3, #4]
 80069ec:	6863      	ldr	r3, [r4, #4]
 80069ee:	bf08      	it	eq
 80069f0:	f8c8 1000 	streq.w	r1, [r8]
 80069f4:	5162      	str	r2, [r4, r5]
 80069f6:	604b      	str	r3, [r1, #4]
 80069f8:	4630      	mov	r0, r6
 80069fa:	f000 f82f 	bl	8006a5c <__malloc_unlock>
 80069fe:	f104 000b 	add.w	r0, r4, #11
 8006a02:	1d23      	adds	r3, r4, #4
 8006a04:	f020 0007 	bic.w	r0, r0, #7
 8006a08:	1ac2      	subs	r2, r0, r3
 8006a0a:	bf1c      	itt	ne
 8006a0c:	1a1b      	subne	r3, r3, r0
 8006a0e:	50a3      	strne	r3, [r4, r2]
 8006a10:	e7af      	b.n	8006972 <_malloc_r+0x22>
 8006a12:	6862      	ldr	r2, [r4, #4]
 8006a14:	42a3      	cmp	r3, r4
 8006a16:	bf0c      	ite	eq
 8006a18:	f8c8 2000 	streq.w	r2, [r8]
 8006a1c:	605a      	strne	r2, [r3, #4]
 8006a1e:	e7eb      	b.n	80069f8 <_malloc_r+0xa8>
 8006a20:	4623      	mov	r3, r4
 8006a22:	6864      	ldr	r4, [r4, #4]
 8006a24:	e7ae      	b.n	8006984 <_malloc_r+0x34>
 8006a26:	463c      	mov	r4, r7
 8006a28:	687f      	ldr	r7, [r7, #4]
 8006a2a:	e7b6      	b.n	800699a <_malloc_r+0x4a>
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	d1fb      	bne.n	8006a2c <_malloc_r+0xdc>
 8006a34:	2300      	movs	r3, #0
 8006a36:	6053      	str	r3, [r2, #4]
 8006a38:	e7de      	b.n	80069f8 <_malloc_r+0xa8>
 8006a3a:	230c      	movs	r3, #12
 8006a3c:	6033      	str	r3, [r6, #0]
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f000 f80c 	bl	8006a5c <__malloc_unlock>
 8006a44:	e794      	b.n	8006970 <_malloc_r+0x20>
 8006a46:	6005      	str	r5, [r0, #0]
 8006a48:	e7d6      	b.n	80069f8 <_malloc_r+0xa8>
 8006a4a:	bf00      	nop
 8006a4c:	20003f48 	.word	0x20003f48

08006a50 <__malloc_lock>:
 8006a50:	4801      	ldr	r0, [pc, #4]	@ (8006a58 <__malloc_lock+0x8>)
 8006a52:	f7ff bf01 	b.w	8006858 <__retarget_lock_acquire_recursive>
 8006a56:	bf00      	nop
 8006a58:	20003f40 	.word	0x20003f40

08006a5c <__malloc_unlock>:
 8006a5c:	4801      	ldr	r0, [pc, #4]	@ (8006a64 <__malloc_unlock+0x8>)
 8006a5e:	f7ff befc 	b.w	800685a <__retarget_lock_release_recursive>
 8006a62:	bf00      	nop
 8006a64:	20003f40 	.word	0x20003f40

08006a68 <__ssputs_r>:
 8006a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6c:	688e      	ldr	r6, [r1, #8]
 8006a6e:	461f      	mov	r7, r3
 8006a70:	42be      	cmp	r6, r7
 8006a72:	680b      	ldr	r3, [r1, #0]
 8006a74:	4682      	mov	sl, r0
 8006a76:	460c      	mov	r4, r1
 8006a78:	4690      	mov	r8, r2
 8006a7a:	d82d      	bhi.n	8006ad8 <__ssputs_r+0x70>
 8006a7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006a84:	d026      	beq.n	8006ad4 <__ssputs_r+0x6c>
 8006a86:	6965      	ldr	r5, [r4, #20]
 8006a88:	6909      	ldr	r1, [r1, #16]
 8006a8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a8e:	eba3 0901 	sub.w	r9, r3, r1
 8006a92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a96:	1c7b      	adds	r3, r7, #1
 8006a98:	444b      	add	r3, r9
 8006a9a:	106d      	asrs	r5, r5, #1
 8006a9c:	429d      	cmp	r5, r3
 8006a9e:	bf38      	it	cc
 8006aa0:	461d      	movcc	r5, r3
 8006aa2:	0553      	lsls	r3, r2, #21
 8006aa4:	d527      	bpl.n	8006af6 <__ssputs_r+0x8e>
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	f7ff ff52 	bl	8006950 <_malloc_r>
 8006aac:	4606      	mov	r6, r0
 8006aae:	b360      	cbz	r0, 8006b0a <__ssputs_r+0xa2>
 8006ab0:	6921      	ldr	r1, [r4, #16]
 8006ab2:	464a      	mov	r2, r9
 8006ab4:	f7ff fed2 	bl	800685c <memcpy>
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ac2:	81a3      	strh	r3, [r4, #12]
 8006ac4:	6126      	str	r6, [r4, #16]
 8006ac6:	6165      	str	r5, [r4, #20]
 8006ac8:	444e      	add	r6, r9
 8006aca:	eba5 0509 	sub.w	r5, r5, r9
 8006ace:	6026      	str	r6, [r4, #0]
 8006ad0:	60a5      	str	r5, [r4, #8]
 8006ad2:	463e      	mov	r6, r7
 8006ad4:	42be      	cmp	r6, r7
 8006ad6:	d900      	bls.n	8006ada <__ssputs_r+0x72>
 8006ad8:	463e      	mov	r6, r7
 8006ada:	6820      	ldr	r0, [r4, #0]
 8006adc:	4632      	mov	r2, r6
 8006ade:	4641      	mov	r1, r8
 8006ae0:	f000 faa8 	bl	8007034 <memmove>
 8006ae4:	68a3      	ldr	r3, [r4, #8]
 8006ae6:	1b9b      	subs	r3, r3, r6
 8006ae8:	60a3      	str	r3, [r4, #8]
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	4433      	add	r3, r6
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	2000      	movs	r0, #0
 8006af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af6:	462a      	mov	r2, r5
 8006af8:	f000 fac6 	bl	8007088 <_realloc_r>
 8006afc:	4606      	mov	r6, r0
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d1e0      	bne.n	8006ac4 <__ssputs_r+0x5c>
 8006b02:	6921      	ldr	r1, [r4, #16]
 8006b04:	4650      	mov	r0, sl
 8006b06:	f7ff feb7 	bl	8006878 <_free_r>
 8006b0a:	230c      	movs	r3, #12
 8006b0c:	f8ca 3000 	str.w	r3, [sl]
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b16:	81a3      	strh	r3, [r4, #12]
 8006b18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b1c:	e7e9      	b.n	8006af2 <__ssputs_r+0x8a>
	...

08006b20 <_svfiprintf_r>:
 8006b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	4698      	mov	r8, r3
 8006b26:	898b      	ldrh	r3, [r1, #12]
 8006b28:	061b      	lsls	r3, r3, #24
 8006b2a:	b09d      	sub	sp, #116	@ 0x74
 8006b2c:	4607      	mov	r7, r0
 8006b2e:	460d      	mov	r5, r1
 8006b30:	4614      	mov	r4, r2
 8006b32:	d510      	bpl.n	8006b56 <_svfiprintf_r+0x36>
 8006b34:	690b      	ldr	r3, [r1, #16]
 8006b36:	b973      	cbnz	r3, 8006b56 <_svfiprintf_r+0x36>
 8006b38:	2140      	movs	r1, #64	@ 0x40
 8006b3a:	f7ff ff09 	bl	8006950 <_malloc_r>
 8006b3e:	6028      	str	r0, [r5, #0]
 8006b40:	6128      	str	r0, [r5, #16]
 8006b42:	b930      	cbnz	r0, 8006b52 <_svfiprintf_r+0x32>
 8006b44:	230c      	movs	r3, #12
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b4c:	b01d      	add	sp, #116	@ 0x74
 8006b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b52:	2340      	movs	r3, #64	@ 0x40
 8006b54:	616b      	str	r3, [r5, #20]
 8006b56:	2300      	movs	r3, #0
 8006b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b5a:	2320      	movs	r3, #32
 8006b5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b60:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b64:	2330      	movs	r3, #48	@ 0x30
 8006b66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d04 <_svfiprintf_r+0x1e4>
 8006b6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b6e:	f04f 0901 	mov.w	r9, #1
 8006b72:	4623      	mov	r3, r4
 8006b74:	469a      	mov	sl, r3
 8006b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b7a:	b10a      	cbz	r2, 8006b80 <_svfiprintf_r+0x60>
 8006b7c:	2a25      	cmp	r2, #37	@ 0x25
 8006b7e:	d1f9      	bne.n	8006b74 <_svfiprintf_r+0x54>
 8006b80:	ebba 0b04 	subs.w	fp, sl, r4
 8006b84:	d00b      	beq.n	8006b9e <_svfiprintf_r+0x7e>
 8006b86:	465b      	mov	r3, fp
 8006b88:	4622      	mov	r2, r4
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	f7ff ff6b 	bl	8006a68 <__ssputs_r>
 8006b92:	3001      	adds	r0, #1
 8006b94:	f000 80a7 	beq.w	8006ce6 <_svfiprintf_r+0x1c6>
 8006b98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b9a:	445a      	add	r2, fp
 8006b9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 809f 	beq.w	8006ce6 <_svfiprintf_r+0x1c6>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bb2:	f10a 0a01 	add.w	sl, sl, #1
 8006bb6:	9304      	str	r3, [sp, #16]
 8006bb8:	9307      	str	r3, [sp, #28]
 8006bba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bc0:	4654      	mov	r4, sl
 8006bc2:	2205      	movs	r2, #5
 8006bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bc8:	484e      	ldr	r0, [pc, #312]	@ (8006d04 <_svfiprintf_r+0x1e4>)
 8006bca:	f7f9 fb21 	bl	8000210 <memchr>
 8006bce:	9a04      	ldr	r2, [sp, #16]
 8006bd0:	b9d8      	cbnz	r0, 8006c0a <_svfiprintf_r+0xea>
 8006bd2:	06d0      	lsls	r0, r2, #27
 8006bd4:	bf44      	itt	mi
 8006bd6:	2320      	movmi	r3, #32
 8006bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bdc:	0711      	lsls	r1, r2, #28
 8006bde:	bf44      	itt	mi
 8006be0:	232b      	movmi	r3, #43	@ 0x2b
 8006be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006be6:	f89a 3000 	ldrb.w	r3, [sl]
 8006bea:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bec:	d015      	beq.n	8006c1a <_svfiprintf_r+0xfa>
 8006bee:	9a07      	ldr	r2, [sp, #28]
 8006bf0:	4654      	mov	r4, sl
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	f04f 0c0a 	mov.w	ip, #10
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bfe:	3b30      	subs	r3, #48	@ 0x30
 8006c00:	2b09      	cmp	r3, #9
 8006c02:	d94b      	bls.n	8006c9c <_svfiprintf_r+0x17c>
 8006c04:	b1b0      	cbz	r0, 8006c34 <_svfiprintf_r+0x114>
 8006c06:	9207      	str	r2, [sp, #28]
 8006c08:	e014      	b.n	8006c34 <_svfiprintf_r+0x114>
 8006c0a:	eba0 0308 	sub.w	r3, r0, r8
 8006c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8006c12:	4313      	orrs	r3, r2
 8006c14:	9304      	str	r3, [sp, #16]
 8006c16:	46a2      	mov	sl, r4
 8006c18:	e7d2      	b.n	8006bc0 <_svfiprintf_r+0xa0>
 8006c1a:	9b03      	ldr	r3, [sp, #12]
 8006c1c:	1d19      	adds	r1, r3, #4
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	9103      	str	r1, [sp, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	bfbb      	ittet	lt
 8006c26:	425b      	neglt	r3, r3
 8006c28:	f042 0202 	orrlt.w	r2, r2, #2
 8006c2c:	9307      	strge	r3, [sp, #28]
 8006c2e:	9307      	strlt	r3, [sp, #28]
 8006c30:	bfb8      	it	lt
 8006c32:	9204      	strlt	r2, [sp, #16]
 8006c34:	7823      	ldrb	r3, [r4, #0]
 8006c36:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c38:	d10a      	bne.n	8006c50 <_svfiprintf_r+0x130>
 8006c3a:	7863      	ldrb	r3, [r4, #1]
 8006c3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c3e:	d132      	bne.n	8006ca6 <_svfiprintf_r+0x186>
 8006c40:	9b03      	ldr	r3, [sp, #12]
 8006c42:	1d1a      	adds	r2, r3, #4
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	9203      	str	r2, [sp, #12]
 8006c48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c4c:	3402      	adds	r4, #2
 8006c4e:	9305      	str	r3, [sp, #20]
 8006c50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006d14 <_svfiprintf_r+0x1f4>
 8006c54:	7821      	ldrb	r1, [r4, #0]
 8006c56:	2203      	movs	r2, #3
 8006c58:	4650      	mov	r0, sl
 8006c5a:	f7f9 fad9 	bl	8000210 <memchr>
 8006c5e:	b138      	cbz	r0, 8006c70 <_svfiprintf_r+0x150>
 8006c60:	9b04      	ldr	r3, [sp, #16]
 8006c62:	eba0 000a 	sub.w	r0, r0, sl
 8006c66:	2240      	movs	r2, #64	@ 0x40
 8006c68:	4082      	lsls	r2, r0
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	3401      	adds	r4, #1
 8006c6e:	9304      	str	r3, [sp, #16]
 8006c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c74:	4824      	ldr	r0, [pc, #144]	@ (8006d08 <_svfiprintf_r+0x1e8>)
 8006c76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c7a:	2206      	movs	r2, #6
 8006c7c:	f7f9 fac8 	bl	8000210 <memchr>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d036      	beq.n	8006cf2 <_svfiprintf_r+0x1d2>
 8006c84:	4b21      	ldr	r3, [pc, #132]	@ (8006d0c <_svfiprintf_r+0x1ec>)
 8006c86:	bb1b      	cbnz	r3, 8006cd0 <_svfiprintf_r+0x1b0>
 8006c88:	9b03      	ldr	r3, [sp, #12]
 8006c8a:	3307      	adds	r3, #7
 8006c8c:	f023 0307 	bic.w	r3, r3, #7
 8006c90:	3308      	adds	r3, #8
 8006c92:	9303      	str	r3, [sp, #12]
 8006c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c96:	4433      	add	r3, r6
 8006c98:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c9a:	e76a      	b.n	8006b72 <_svfiprintf_r+0x52>
 8006c9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	e7a8      	b.n	8006bf8 <_svfiprintf_r+0xd8>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	3401      	adds	r4, #1
 8006caa:	9305      	str	r3, [sp, #20]
 8006cac:	4619      	mov	r1, r3
 8006cae:	f04f 0c0a 	mov.w	ip, #10
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cb8:	3a30      	subs	r2, #48	@ 0x30
 8006cba:	2a09      	cmp	r2, #9
 8006cbc:	d903      	bls.n	8006cc6 <_svfiprintf_r+0x1a6>
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d0c6      	beq.n	8006c50 <_svfiprintf_r+0x130>
 8006cc2:	9105      	str	r1, [sp, #20]
 8006cc4:	e7c4      	b.n	8006c50 <_svfiprintf_r+0x130>
 8006cc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cca:	4604      	mov	r4, r0
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e7f0      	b.n	8006cb2 <_svfiprintf_r+0x192>
 8006cd0:	ab03      	add	r3, sp, #12
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	462a      	mov	r2, r5
 8006cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8006d10 <_svfiprintf_r+0x1f0>)
 8006cd8:	a904      	add	r1, sp, #16
 8006cda:	4638      	mov	r0, r7
 8006cdc:	f3af 8000 	nop.w
 8006ce0:	1c42      	adds	r2, r0, #1
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	d1d6      	bne.n	8006c94 <_svfiprintf_r+0x174>
 8006ce6:	89ab      	ldrh	r3, [r5, #12]
 8006ce8:	065b      	lsls	r3, r3, #25
 8006cea:	f53f af2d 	bmi.w	8006b48 <_svfiprintf_r+0x28>
 8006cee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cf0:	e72c      	b.n	8006b4c <_svfiprintf_r+0x2c>
 8006cf2:	ab03      	add	r3, sp, #12
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	462a      	mov	r2, r5
 8006cf8:	4b05      	ldr	r3, [pc, #20]	@ (8006d10 <_svfiprintf_r+0x1f0>)
 8006cfa:	a904      	add	r1, sp, #16
 8006cfc:	4638      	mov	r0, r7
 8006cfe:	f000 f879 	bl	8006df4 <_printf_i>
 8006d02:	e7ed      	b.n	8006ce0 <_svfiprintf_r+0x1c0>
 8006d04:	0800718c 	.word	0x0800718c
 8006d08:	08007196 	.word	0x08007196
 8006d0c:	00000000 	.word	0x00000000
 8006d10:	08006a69 	.word	0x08006a69
 8006d14:	08007192 	.word	0x08007192

08006d18 <_printf_common>:
 8006d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d1c:	4616      	mov	r6, r2
 8006d1e:	4698      	mov	r8, r3
 8006d20:	688a      	ldr	r2, [r1, #8]
 8006d22:	690b      	ldr	r3, [r1, #16]
 8006d24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	bfb8      	it	lt
 8006d2c:	4613      	movlt	r3, r2
 8006d2e:	6033      	str	r3, [r6, #0]
 8006d30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d34:	4607      	mov	r7, r0
 8006d36:	460c      	mov	r4, r1
 8006d38:	b10a      	cbz	r2, 8006d3e <_printf_common+0x26>
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	6033      	str	r3, [r6, #0]
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	0699      	lsls	r1, r3, #26
 8006d42:	bf42      	ittt	mi
 8006d44:	6833      	ldrmi	r3, [r6, #0]
 8006d46:	3302      	addmi	r3, #2
 8006d48:	6033      	strmi	r3, [r6, #0]
 8006d4a:	6825      	ldr	r5, [r4, #0]
 8006d4c:	f015 0506 	ands.w	r5, r5, #6
 8006d50:	d106      	bne.n	8006d60 <_printf_common+0x48>
 8006d52:	f104 0a19 	add.w	sl, r4, #25
 8006d56:	68e3      	ldr	r3, [r4, #12]
 8006d58:	6832      	ldr	r2, [r6, #0]
 8006d5a:	1a9b      	subs	r3, r3, r2
 8006d5c:	42ab      	cmp	r3, r5
 8006d5e:	dc26      	bgt.n	8006dae <_printf_common+0x96>
 8006d60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d64:	6822      	ldr	r2, [r4, #0]
 8006d66:	3b00      	subs	r3, #0
 8006d68:	bf18      	it	ne
 8006d6a:	2301      	movne	r3, #1
 8006d6c:	0692      	lsls	r2, r2, #26
 8006d6e:	d42b      	bmi.n	8006dc8 <_printf_common+0xb0>
 8006d70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d74:	4641      	mov	r1, r8
 8006d76:	4638      	mov	r0, r7
 8006d78:	47c8      	blx	r9
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	d01e      	beq.n	8006dbc <_printf_common+0xa4>
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	6922      	ldr	r2, [r4, #16]
 8006d82:	f003 0306 	and.w	r3, r3, #6
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	bf02      	ittt	eq
 8006d8a:	68e5      	ldreq	r5, [r4, #12]
 8006d8c:	6833      	ldreq	r3, [r6, #0]
 8006d8e:	1aed      	subeq	r5, r5, r3
 8006d90:	68a3      	ldr	r3, [r4, #8]
 8006d92:	bf0c      	ite	eq
 8006d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d98:	2500      	movne	r5, #0
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	bfc4      	itt	gt
 8006d9e:	1a9b      	subgt	r3, r3, r2
 8006da0:	18ed      	addgt	r5, r5, r3
 8006da2:	2600      	movs	r6, #0
 8006da4:	341a      	adds	r4, #26
 8006da6:	42b5      	cmp	r5, r6
 8006da8:	d11a      	bne.n	8006de0 <_printf_common+0xc8>
 8006daa:	2000      	movs	r0, #0
 8006dac:	e008      	b.n	8006dc0 <_printf_common+0xa8>
 8006dae:	2301      	movs	r3, #1
 8006db0:	4652      	mov	r2, sl
 8006db2:	4641      	mov	r1, r8
 8006db4:	4638      	mov	r0, r7
 8006db6:	47c8      	blx	r9
 8006db8:	3001      	adds	r0, #1
 8006dba:	d103      	bne.n	8006dc4 <_printf_common+0xac>
 8006dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc4:	3501      	adds	r5, #1
 8006dc6:	e7c6      	b.n	8006d56 <_printf_common+0x3e>
 8006dc8:	18e1      	adds	r1, r4, r3
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	2030      	movs	r0, #48	@ 0x30
 8006dce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006dd2:	4422      	add	r2, r4
 8006dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006dd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ddc:	3302      	adds	r3, #2
 8006dde:	e7c7      	b.n	8006d70 <_printf_common+0x58>
 8006de0:	2301      	movs	r3, #1
 8006de2:	4622      	mov	r2, r4
 8006de4:	4641      	mov	r1, r8
 8006de6:	4638      	mov	r0, r7
 8006de8:	47c8      	blx	r9
 8006dea:	3001      	adds	r0, #1
 8006dec:	d0e6      	beq.n	8006dbc <_printf_common+0xa4>
 8006dee:	3601      	adds	r6, #1
 8006df0:	e7d9      	b.n	8006da6 <_printf_common+0x8e>
	...

08006df4 <_printf_i>:
 8006df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006df8:	7e0f      	ldrb	r7, [r1, #24]
 8006dfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006dfc:	2f78      	cmp	r7, #120	@ 0x78
 8006dfe:	4691      	mov	r9, r2
 8006e00:	4680      	mov	r8, r0
 8006e02:	460c      	mov	r4, r1
 8006e04:	469a      	mov	sl, r3
 8006e06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e0a:	d807      	bhi.n	8006e1c <_printf_i+0x28>
 8006e0c:	2f62      	cmp	r7, #98	@ 0x62
 8006e0e:	d80a      	bhi.n	8006e26 <_printf_i+0x32>
 8006e10:	2f00      	cmp	r7, #0
 8006e12:	f000 80d2 	beq.w	8006fba <_printf_i+0x1c6>
 8006e16:	2f58      	cmp	r7, #88	@ 0x58
 8006e18:	f000 80b9 	beq.w	8006f8e <_printf_i+0x19a>
 8006e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e24:	e03a      	b.n	8006e9c <_printf_i+0xa8>
 8006e26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e2a:	2b15      	cmp	r3, #21
 8006e2c:	d8f6      	bhi.n	8006e1c <_printf_i+0x28>
 8006e2e:	a101      	add	r1, pc, #4	@ (adr r1, 8006e34 <_printf_i+0x40>)
 8006e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e34:	08006e8d 	.word	0x08006e8d
 8006e38:	08006ea1 	.word	0x08006ea1
 8006e3c:	08006e1d 	.word	0x08006e1d
 8006e40:	08006e1d 	.word	0x08006e1d
 8006e44:	08006e1d 	.word	0x08006e1d
 8006e48:	08006e1d 	.word	0x08006e1d
 8006e4c:	08006ea1 	.word	0x08006ea1
 8006e50:	08006e1d 	.word	0x08006e1d
 8006e54:	08006e1d 	.word	0x08006e1d
 8006e58:	08006e1d 	.word	0x08006e1d
 8006e5c:	08006e1d 	.word	0x08006e1d
 8006e60:	08006fa1 	.word	0x08006fa1
 8006e64:	08006ecb 	.word	0x08006ecb
 8006e68:	08006f5b 	.word	0x08006f5b
 8006e6c:	08006e1d 	.word	0x08006e1d
 8006e70:	08006e1d 	.word	0x08006e1d
 8006e74:	08006fc3 	.word	0x08006fc3
 8006e78:	08006e1d 	.word	0x08006e1d
 8006e7c:	08006ecb 	.word	0x08006ecb
 8006e80:	08006e1d 	.word	0x08006e1d
 8006e84:	08006e1d 	.word	0x08006e1d
 8006e88:	08006f63 	.word	0x08006f63
 8006e8c:	6833      	ldr	r3, [r6, #0]
 8006e8e:	1d1a      	adds	r2, r3, #4
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6032      	str	r2, [r6, #0]
 8006e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e09d      	b.n	8006fdc <_printf_i+0x1e8>
 8006ea0:	6833      	ldr	r3, [r6, #0]
 8006ea2:	6820      	ldr	r0, [r4, #0]
 8006ea4:	1d19      	adds	r1, r3, #4
 8006ea6:	6031      	str	r1, [r6, #0]
 8006ea8:	0606      	lsls	r6, r0, #24
 8006eaa:	d501      	bpl.n	8006eb0 <_printf_i+0xbc>
 8006eac:	681d      	ldr	r5, [r3, #0]
 8006eae:	e003      	b.n	8006eb8 <_printf_i+0xc4>
 8006eb0:	0645      	lsls	r5, r0, #25
 8006eb2:	d5fb      	bpl.n	8006eac <_printf_i+0xb8>
 8006eb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006eb8:	2d00      	cmp	r5, #0
 8006eba:	da03      	bge.n	8006ec4 <_printf_i+0xd0>
 8006ebc:	232d      	movs	r3, #45	@ 0x2d
 8006ebe:	426d      	negs	r5, r5
 8006ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ec4:	4859      	ldr	r0, [pc, #356]	@ (800702c <_printf_i+0x238>)
 8006ec6:	230a      	movs	r3, #10
 8006ec8:	e011      	b.n	8006eee <_printf_i+0xfa>
 8006eca:	6821      	ldr	r1, [r4, #0]
 8006ecc:	6833      	ldr	r3, [r6, #0]
 8006ece:	0608      	lsls	r0, r1, #24
 8006ed0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ed4:	d402      	bmi.n	8006edc <_printf_i+0xe8>
 8006ed6:	0649      	lsls	r1, r1, #25
 8006ed8:	bf48      	it	mi
 8006eda:	b2ad      	uxthmi	r5, r5
 8006edc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ede:	4853      	ldr	r0, [pc, #332]	@ (800702c <_printf_i+0x238>)
 8006ee0:	6033      	str	r3, [r6, #0]
 8006ee2:	bf14      	ite	ne
 8006ee4:	230a      	movne	r3, #10
 8006ee6:	2308      	moveq	r3, #8
 8006ee8:	2100      	movs	r1, #0
 8006eea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006eee:	6866      	ldr	r6, [r4, #4]
 8006ef0:	60a6      	str	r6, [r4, #8]
 8006ef2:	2e00      	cmp	r6, #0
 8006ef4:	bfa2      	ittt	ge
 8006ef6:	6821      	ldrge	r1, [r4, #0]
 8006ef8:	f021 0104 	bicge.w	r1, r1, #4
 8006efc:	6021      	strge	r1, [r4, #0]
 8006efe:	b90d      	cbnz	r5, 8006f04 <_printf_i+0x110>
 8006f00:	2e00      	cmp	r6, #0
 8006f02:	d04b      	beq.n	8006f9c <_printf_i+0x1a8>
 8006f04:	4616      	mov	r6, r2
 8006f06:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f0a:	fb03 5711 	mls	r7, r3, r1, r5
 8006f0e:	5dc7      	ldrb	r7, [r0, r7]
 8006f10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f14:	462f      	mov	r7, r5
 8006f16:	42bb      	cmp	r3, r7
 8006f18:	460d      	mov	r5, r1
 8006f1a:	d9f4      	bls.n	8006f06 <_printf_i+0x112>
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d10b      	bne.n	8006f38 <_printf_i+0x144>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	07df      	lsls	r7, r3, #31
 8006f24:	d508      	bpl.n	8006f38 <_printf_i+0x144>
 8006f26:	6923      	ldr	r3, [r4, #16]
 8006f28:	6861      	ldr	r1, [r4, #4]
 8006f2a:	4299      	cmp	r1, r3
 8006f2c:	bfde      	ittt	le
 8006f2e:	2330      	movle	r3, #48	@ 0x30
 8006f30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f34:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006f38:	1b92      	subs	r2, r2, r6
 8006f3a:	6122      	str	r2, [r4, #16]
 8006f3c:	f8cd a000 	str.w	sl, [sp]
 8006f40:	464b      	mov	r3, r9
 8006f42:	aa03      	add	r2, sp, #12
 8006f44:	4621      	mov	r1, r4
 8006f46:	4640      	mov	r0, r8
 8006f48:	f7ff fee6 	bl	8006d18 <_printf_common>
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	d14a      	bne.n	8006fe6 <_printf_i+0x1f2>
 8006f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f54:	b004      	add	sp, #16
 8006f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	f043 0320 	orr.w	r3, r3, #32
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	4833      	ldr	r0, [pc, #204]	@ (8007030 <_printf_i+0x23c>)
 8006f64:	2778      	movs	r7, #120	@ 0x78
 8006f66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	6831      	ldr	r1, [r6, #0]
 8006f6e:	061f      	lsls	r7, r3, #24
 8006f70:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f74:	d402      	bmi.n	8006f7c <_printf_i+0x188>
 8006f76:	065f      	lsls	r7, r3, #25
 8006f78:	bf48      	it	mi
 8006f7a:	b2ad      	uxthmi	r5, r5
 8006f7c:	6031      	str	r1, [r6, #0]
 8006f7e:	07d9      	lsls	r1, r3, #31
 8006f80:	bf44      	itt	mi
 8006f82:	f043 0320 	orrmi.w	r3, r3, #32
 8006f86:	6023      	strmi	r3, [r4, #0]
 8006f88:	b11d      	cbz	r5, 8006f92 <_printf_i+0x19e>
 8006f8a:	2310      	movs	r3, #16
 8006f8c:	e7ac      	b.n	8006ee8 <_printf_i+0xf4>
 8006f8e:	4827      	ldr	r0, [pc, #156]	@ (800702c <_printf_i+0x238>)
 8006f90:	e7e9      	b.n	8006f66 <_printf_i+0x172>
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	f023 0320 	bic.w	r3, r3, #32
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	e7f6      	b.n	8006f8a <_printf_i+0x196>
 8006f9c:	4616      	mov	r6, r2
 8006f9e:	e7bd      	b.n	8006f1c <_printf_i+0x128>
 8006fa0:	6833      	ldr	r3, [r6, #0]
 8006fa2:	6825      	ldr	r5, [r4, #0]
 8006fa4:	6961      	ldr	r1, [r4, #20]
 8006fa6:	1d18      	adds	r0, r3, #4
 8006fa8:	6030      	str	r0, [r6, #0]
 8006faa:	062e      	lsls	r6, r5, #24
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	d501      	bpl.n	8006fb4 <_printf_i+0x1c0>
 8006fb0:	6019      	str	r1, [r3, #0]
 8006fb2:	e002      	b.n	8006fba <_printf_i+0x1c6>
 8006fb4:	0668      	lsls	r0, r5, #25
 8006fb6:	d5fb      	bpl.n	8006fb0 <_printf_i+0x1bc>
 8006fb8:	8019      	strh	r1, [r3, #0]
 8006fba:	2300      	movs	r3, #0
 8006fbc:	6123      	str	r3, [r4, #16]
 8006fbe:	4616      	mov	r6, r2
 8006fc0:	e7bc      	b.n	8006f3c <_printf_i+0x148>
 8006fc2:	6833      	ldr	r3, [r6, #0]
 8006fc4:	1d1a      	adds	r2, r3, #4
 8006fc6:	6032      	str	r2, [r6, #0]
 8006fc8:	681e      	ldr	r6, [r3, #0]
 8006fca:	6862      	ldr	r2, [r4, #4]
 8006fcc:	2100      	movs	r1, #0
 8006fce:	4630      	mov	r0, r6
 8006fd0:	f7f9 f91e 	bl	8000210 <memchr>
 8006fd4:	b108      	cbz	r0, 8006fda <_printf_i+0x1e6>
 8006fd6:	1b80      	subs	r0, r0, r6
 8006fd8:	6060      	str	r0, [r4, #4]
 8006fda:	6863      	ldr	r3, [r4, #4]
 8006fdc:	6123      	str	r3, [r4, #16]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fe4:	e7aa      	b.n	8006f3c <_printf_i+0x148>
 8006fe6:	6923      	ldr	r3, [r4, #16]
 8006fe8:	4632      	mov	r2, r6
 8006fea:	4649      	mov	r1, r9
 8006fec:	4640      	mov	r0, r8
 8006fee:	47d0      	blx	sl
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d0ad      	beq.n	8006f50 <_printf_i+0x15c>
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	079b      	lsls	r3, r3, #30
 8006ff8:	d413      	bmi.n	8007022 <_printf_i+0x22e>
 8006ffa:	68e0      	ldr	r0, [r4, #12]
 8006ffc:	9b03      	ldr	r3, [sp, #12]
 8006ffe:	4298      	cmp	r0, r3
 8007000:	bfb8      	it	lt
 8007002:	4618      	movlt	r0, r3
 8007004:	e7a6      	b.n	8006f54 <_printf_i+0x160>
 8007006:	2301      	movs	r3, #1
 8007008:	4632      	mov	r2, r6
 800700a:	4649      	mov	r1, r9
 800700c:	4640      	mov	r0, r8
 800700e:	47d0      	blx	sl
 8007010:	3001      	adds	r0, #1
 8007012:	d09d      	beq.n	8006f50 <_printf_i+0x15c>
 8007014:	3501      	adds	r5, #1
 8007016:	68e3      	ldr	r3, [r4, #12]
 8007018:	9903      	ldr	r1, [sp, #12]
 800701a:	1a5b      	subs	r3, r3, r1
 800701c:	42ab      	cmp	r3, r5
 800701e:	dcf2      	bgt.n	8007006 <_printf_i+0x212>
 8007020:	e7eb      	b.n	8006ffa <_printf_i+0x206>
 8007022:	2500      	movs	r5, #0
 8007024:	f104 0619 	add.w	r6, r4, #25
 8007028:	e7f5      	b.n	8007016 <_printf_i+0x222>
 800702a:	bf00      	nop
 800702c:	0800719d 	.word	0x0800719d
 8007030:	080071ae 	.word	0x080071ae

08007034 <memmove>:
 8007034:	4288      	cmp	r0, r1
 8007036:	b510      	push	{r4, lr}
 8007038:	eb01 0402 	add.w	r4, r1, r2
 800703c:	d902      	bls.n	8007044 <memmove+0x10>
 800703e:	4284      	cmp	r4, r0
 8007040:	4623      	mov	r3, r4
 8007042:	d807      	bhi.n	8007054 <memmove+0x20>
 8007044:	1e43      	subs	r3, r0, #1
 8007046:	42a1      	cmp	r1, r4
 8007048:	d008      	beq.n	800705c <memmove+0x28>
 800704a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800704e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007052:	e7f8      	b.n	8007046 <memmove+0x12>
 8007054:	4402      	add	r2, r0
 8007056:	4601      	mov	r1, r0
 8007058:	428a      	cmp	r2, r1
 800705a:	d100      	bne.n	800705e <memmove+0x2a>
 800705c:	bd10      	pop	{r4, pc}
 800705e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007066:	e7f7      	b.n	8007058 <memmove+0x24>

08007068 <_sbrk_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d06      	ldr	r5, [pc, #24]	@ (8007084 <_sbrk_r+0x1c>)
 800706c:	2300      	movs	r3, #0
 800706e:	4604      	mov	r4, r0
 8007070:	4608      	mov	r0, r1
 8007072:	602b      	str	r3, [r5, #0]
 8007074:	f7fc fafe 	bl	8003674 <_sbrk>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_sbrk_r+0x1a>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	b103      	cbz	r3, 8007082 <_sbrk_r+0x1a>
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	20003f3c 	.word	0x20003f3c

08007088 <_realloc_r>:
 8007088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800708c:	4680      	mov	r8, r0
 800708e:	4615      	mov	r5, r2
 8007090:	460c      	mov	r4, r1
 8007092:	b921      	cbnz	r1, 800709e <_realloc_r+0x16>
 8007094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007098:	4611      	mov	r1, r2
 800709a:	f7ff bc59 	b.w	8006950 <_malloc_r>
 800709e:	b92a      	cbnz	r2, 80070ac <_realloc_r+0x24>
 80070a0:	f7ff fbea 	bl	8006878 <_free_r>
 80070a4:	2400      	movs	r4, #0
 80070a6:	4620      	mov	r0, r4
 80070a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070ac:	f000 f81a 	bl	80070e4 <_malloc_usable_size_r>
 80070b0:	4285      	cmp	r5, r0
 80070b2:	4606      	mov	r6, r0
 80070b4:	d802      	bhi.n	80070bc <_realloc_r+0x34>
 80070b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80070ba:	d8f4      	bhi.n	80070a6 <_realloc_r+0x1e>
 80070bc:	4629      	mov	r1, r5
 80070be:	4640      	mov	r0, r8
 80070c0:	f7ff fc46 	bl	8006950 <_malloc_r>
 80070c4:	4607      	mov	r7, r0
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d0ec      	beq.n	80070a4 <_realloc_r+0x1c>
 80070ca:	42b5      	cmp	r5, r6
 80070cc:	462a      	mov	r2, r5
 80070ce:	4621      	mov	r1, r4
 80070d0:	bf28      	it	cs
 80070d2:	4632      	movcs	r2, r6
 80070d4:	f7ff fbc2 	bl	800685c <memcpy>
 80070d8:	4621      	mov	r1, r4
 80070da:	4640      	mov	r0, r8
 80070dc:	f7ff fbcc 	bl	8006878 <_free_r>
 80070e0:	463c      	mov	r4, r7
 80070e2:	e7e0      	b.n	80070a6 <_realloc_r+0x1e>

080070e4 <_malloc_usable_size_r>:
 80070e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070e8:	1f18      	subs	r0, r3, #4
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	bfbc      	itt	lt
 80070ee:	580b      	ldrlt	r3, [r1, r0]
 80070f0:	18c0      	addlt	r0, r0, r3
 80070f2:	4770      	bx	lr

080070f4 <_init>:
 80070f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f6:	bf00      	nop
 80070f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070fa:	bc08      	pop	{r3}
 80070fc:	469e      	mov	lr, r3
 80070fe:	4770      	bx	lr

08007100 <_fini>:
 8007100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007102:	bf00      	nop
 8007104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007106:	bc08      	pop	{r3}
 8007108:	469e      	mov	lr, r3
 800710a:	4770      	bx	lr
