
EliMAC-Assembly-TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006914  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006ae4  08006ae4  00007ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bc4  08006bc4  000081cc  2**0
                  CONTENTS
  4 .ARM          00000008  08006bc4  08006bc4  00007bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bcc  08006bcc  000081cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bcc  08006bcc  00007bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bd0  08006bd0  00007bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08006bd4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08006c60  0000808c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08006d00  0000812c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00002c4c  200001cc  08006da0  000081cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20002e18  08006da0  00008e18  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000081cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012062  00000000  00000000  000081fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002631  00000000  00000000  0001a25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d80  00000000  00000000  0001c890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a25  00000000  00000000  0001d610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027937  00000000  00000000  0001e035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010b70  00000000  00000000  0004596c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f0e5a  00000000  00000000  000564dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00147336  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003bf4  00000000  00000000  0014737c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000dc  00000000  00000000  0014af70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006acc 	.word	0x08006acc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08006acc 	.word	0x08006acc

08000210 <packing>:
* r10 = b_30 b_62 b_94 b_126 || ... || b_6 b_38 b_70 b_102
* r11 = b_31 b_63 b_95 b_127 || ... || b_7 b_39 b_71 b_103
******************************************************************************/
.align 2
packing:
    movw    r3, #0x0f0f
 8000210:	f640 730f 	movw	r3, #3855	@ 0xf0f
    movt    r3, #0x0f0f             // r3 <- 0x0f0f0f0f (mask for SWAPMOVE)
 8000214:	f6c0 730f 	movt	r3, #3855	@ 0xf0f
    eor     r2, r3, r3, lsl #2      // r2 <- 0x33333333 (mask for SWAPMOVE)
 8000218:	ea83 0283 	eor.w	r2, r3, r3, lsl #2
    eor     r1, r2, r2, lsl #1      // r1 <- 0x55555555 (mask for SWAPMOVE)
 800021c:	ea82 0142 	eor.w	r1, r2, r2, lsl #1
    swpmv   r8, r4, r8, r4, r1, #1, r12
 8000220:	ea84 0c58 	eor.w	ip, r4, r8, lsr #1
 8000224:	ea0c 0c01 	and.w	ip, ip, r1
 8000228:	ea84 040c 	eor.w	r4, r4, ip
 800022c:	ea88 084c 	eor.w	r8, r8, ip, lsl #1
    swpmv   r9, r5, r9, r5, r1, #1, r12
 8000230:	ea85 0c59 	eor.w	ip, r5, r9, lsr #1
 8000234:	ea0c 0c01 	and.w	ip, ip, r1
 8000238:	ea85 050c 	eor.w	r5, r5, ip
 800023c:	ea89 094c 	eor.w	r9, r9, ip, lsl #1
    swpmv   r10, r6, r10, r6, r1, #1, r12
 8000240:	ea86 0c5a 	eor.w	ip, r6, sl, lsr #1
 8000244:	ea0c 0c01 	and.w	ip, ip, r1
 8000248:	ea86 060c 	eor.w	r6, r6, ip
 800024c:	ea8a 0a4c 	eor.w	sl, sl, ip, lsl #1
    swpmv   r11, r7, r11, r7, r1, #1, r12
 8000250:	ea87 0c5b 	eor.w	ip, r7, fp, lsr #1
 8000254:	ea0c 0c01 	and.w	ip, ip, r1
 8000258:	ea87 070c 	eor.w	r7, r7, ip
 800025c:	ea8b 0b4c 	eor.w	fp, fp, ip, lsl #1
    swpmv   r0, r4, r5, r4, r2, #2, r12
 8000260:	ea84 0c95 	eor.w	ip, r4, r5, lsr #2
 8000264:	ea0c 0c02 	and.w	ip, ip, r2
 8000268:	ea84 040c 	eor.w	r4, r4, ip
 800026c:	ea85 008c 	eor.w	r0, r5, ip, lsl #2
    swpmv   r9, r5, r9, r8, r2, #2, r12
 8000270:	ea88 0c99 	eor.w	ip, r8, r9, lsr #2
 8000274:	ea0c 0c02 	and.w	ip, ip, r2
 8000278:	ea88 050c 	eor.w	r5, r8, ip
 800027c:	ea89 098c 	eor.w	r9, r9, ip, lsl #2
    swpmv   r7, r8, r7, r6, r2, #2, r12
 8000280:	ea86 0c97 	eor.w	ip, r6, r7, lsr #2
 8000284:	ea0c 0c02 	and.w	ip, ip, r2
 8000288:	ea86 080c 	eor.w	r8, r6, ip
 800028c:	ea87 078c 	eor.w	r7, r7, ip, lsl #2
    swpmv   r11, r2, r11, r10, r2, #2, r12
 8000290:	ea8a 0c9b 	eor.w	ip, sl, fp, lsr #2
 8000294:	ea0c 0c02 	and.w	ip, ip, r2
 8000298:	ea8a 020c 	eor.w	r2, sl, ip
 800029c:	ea8b 0b8c 	eor.w	fp, fp, ip, lsl #2
    swpmv   r8, r4, r8, r4, r3, #4, r12
 80002a0:	ea84 1c18 	eor.w	ip, r4, r8, lsr #4
 80002a4:	ea0c 0c03 	and.w	ip, ip, r3
 80002a8:	ea84 040c 	eor.w	r4, r4, ip
 80002ac:	ea88 180c 	eor.w	r8, r8, ip, lsl #4
    swpmv   r10, r6, r7, r0, r3, #4, r12
 80002b0:	ea80 1c17 	eor.w	ip, r0, r7, lsr #4
 80002b4:	ea0c 0c03 	and.w	ip, ip, r3
 80002b8:	ea80 060c 	eor.w	r6, r0, ip
 80002bc:	ea87 1a0c 	eor.w	sl, r7, ip, lsl #4
    swpmv   r11, r7, r11, r9, r3, #4, r12
 80002c0:	ea89 1c1b 	eor.w	ip, r9, fp, lsr #4
 80002c4:	ea0c 0c03 	and.w	ip, ip, r3
 80002c8:	ea89 070c 	eor.w	r7, r9, ip
 80002cc:	ea8b 1b0c 	eor.w	fp, fp, ip, lsl #4
    swpmv   r9, r5, r2, r5, r3, #4, r12
 80002d0:	ea85 1c12 	eor.w	ip, r5, r2, lsr #4
 80002d4:	ea0c 0c03 	and.w	ip, ip, r3
 80002d8:	ea85 050c 	eor.w	r5, r5, ip
 80002dc:	ea82 190c 	eor.w	r9, r2, ip, lsl #4
    bx      lr
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop

080002e4 <unpacking>:
/******************************************************************************
* Unpacks the 256-bit internal state in two 128-bit blocs.
******************************************************************************/
.align 2
unpacking:
    movw    r3, #0x0f0f
 80002e4:	f640 730f 	movw	r3, #3855	@ 0xf0f
    movt    r3, #0x0f0f                 // r3 <- 0x0f0f0f0f (mask for SWAPMOVE)
 80002e8:	f6c0 730f 	movt	r3, #3855	@ 0xf0f
    swpmv   r2, r5, r9, r5, r3, #4, r12
 80002ec:	ea85 1c19 	eor.w	ip, r5, r9, lsr #4
 80002f0:	ea0c 0c03 	and.w	ip, ip, r3
 80002f4:	ea85 050c 	eor.w	r5, r5, ip
 80002f8:	ea89 120c 	eor.w	r2, r9, ip, lsl #4
    swpmv   r11, r9, r11, r7, r3, #4, r12
 80002fc:	ea87 1c1b 	eor.w	ip, r7, fp, lsr #4
 8000300:	ea0c 0c03 	and.w	ip, ip, r3
 8000304:	ea87 090c 	eor.w	r9, r7, ip
 8000308:	ea8b 1b0c 	eor.w	fp, fp, ip, lsl #4
    swpmv   r7, r1, r10, r6, r3, #4, r12
 800030c:	ea86 1c1a 	eor.w	ip, r6, sl, lsr #4
 8000310:	ea0c 0c03 	and.w	ip, ip, r3
 8000314:	ea86 010c 	eor.w	r1, r6, ip
 8000318:	ea8a 170c 	eor.w	r7, sl, ip, lsl #4
    swpmv   r8, r4, r8, r4, r3, #4, r12
 800031c:	ea84 1c18 	eor.w	ip, r4, r8, lsr #4
 8000320:	ea0c 0c03 	and.w	ip, ip, r3
 8000324:	ea84 040c 	eor.w	r4, r4, ip
 8000328:	ea88 180c 	eor.w	r8, r8, ip, lsl #4
    eor     r3, r3, r3, lsl #2          // r3 <- 0x33333333 (mask for SWAPMOVE)
 800032c:	ea83 0383 	eor.w	r3, r3, r3, lsl #2
    swpmv   r11, r10,r11, r2, r3, #2, r12
 8000330:	ea82 0c9b 	eor.w	ip, r2, fp, lsr #2
 8000334:	ea0c 0c03 	and.w	ip, ip, r3
 8000338:	ea82 0a0c 	eor.w	sl, r2, ip
 800033c:	ea8b 0b8c 	eor.w	fp, fp, ip, lsl #2
    swpmv   r7, r6, r7, r8, r3, #2, r12
 8000340:	ea88 0c97 	eor.w	ip, r8, r7, lsr #2
 8000344:	ea0c 0c03 	and.w	ip, ip, r3
 8000348:	ea88 060c 	eor.w	r6, r8, ip
 800034c:	ea87 078c 	eor.w	r7, r7, ip, lsl #2
    swpmv   r9, r8, r9, r5, r3, #2, r12
 8000350:	ea85 0c99 	eor.w	ip, r5, r9, lsr #2
 8000354:	ea0c 0c03 	and.w	ip, ip, r3
 8000358:	ea85 080c 	eor.w	r8, r5, ip
 800035c:	ea89 098c 	eor.w	r9, r9, ip, lsl #2
    swpmv   r5, r4, r1, r4, r3, #2, r12
 8000360:	ea84 0c91 	eor.w	ip, r4, r1, lsr #2
 8000364:	ea0c 0c03 	and.w	ip, ip, r3
 8000368:	ea84 040c 	eor.w	r4, r4, ip
 800036c:	ea81 058c 	eor.w	r5, r1, ip, lsl #2
    eor     r1, r3, r3, lsl #1          // r1 <- 0x55555555 (mask for SWAPMOVE)
 8000370:	ea83 0143 	eor.w	r1, r3, r3, lsl #1
    swpmv   r8, r4, r8, r4, r1, #1, r12
 8000374:	ea84 0c58 	eor.w	ip, r4, r8, lsr #1
 8000378:	ea0c 0c01 	and.w	ip, ip, r1
 800037c:	ea84 040c 	eor.w	r4, r4, ip
 8000380:	ea88 084c 	eor.w	r8, r8, ip, lsl #1
    swpmv   r9, r5,r9, r5, r1, #1, r12
 8000384:	ea85 0c59 	eor.w	ip, r5, r9, lsr #1
 8000388:	ea0c 0c01 	and.w	ip, ip, r1
 800038c:	ea85 050c 	eor.w	r5, r5, ip
 8000390:	ea89 094c 	eor.w	r9, r9, ip, lsl #1
    swpmv   r10, r6, r10, r6, r1, #1, r12
 8000394:	ea86 0c5a 	eor.w	ip, r6, sl, lsr #1
 8000398:	ea0c 0c01 	and.w	ip, ip, r1
 800039c:	ea86 060c 	eor.w	r6, r6, ip
 80003a0:	ea8a 0a4c 	eor.w	sl, sl, ip, lsl #1
    swpmv   r11, r7, r11, r7, r1, #1, r12
 80003a4:	ea87 0c5b 	eor.w	ip, r7, fp, lsr #1
 80003a8:	ea0c 0c01 	and.w	ip, ip, r1
 80003ac:	ea87 070c 	eor.w	r7, r7, ip
 80003b0:	ea8b 0b4c 	eor.w	fp, fp, ip, lsl #1
    bx      lr
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop

080003b8 <ark>:
* Credits to https://github.com/Ko-/aes-armcortexm for the S-box implementation
******************************************************************************/
.align 2
ark:
    // add round key
    ldr.w   r1, [sp, #48]
 80003b8:	f8dd 1030 	ldr.w	r1, [sp, #48]	@ 0x30
    ldmia   r1!, {r0,r2,r3,r12}
 80003bc:	e8b1 100d 	ldmia.w	r1!, {r0, r2, r3, ip}
    eor     r4, r0
 80003c0:	ea84 0400 	eor.w	r4, r4, r0
    eor     r5, r2
 80003c4:	ea85 0502 	eor.w	r5, r5, r2
    eor     r6, r3
 80003c8:	ea86 0603 	eor.w	r6, r6, r3
    eor     r7, r12
 80003cc:	ea87 070c 	eor.w	r7, r7, ip
    ldmia   r1!, {r0,r2,r3,r12}
 80003d0:	e8b1 100d 	ldmia.w	r1!, {r0, r2, r3, ip}
    eor     r8, r0
 80003d4:	ea88 0800 	eor.w	r8, r8, r0
    eor     r9, r2
 80003d8:	ea89 0902 	eor.w	r9, r9, r2
    eor     r10, r3
 80003dc:	ea8a 0a03 	eor.w	sl, sl, r3
    eor     r11, r12
 80003e0:	ea8b 0b0c 	eor.w	fp, fp, ip
    str.w   r1, [sp, #48]
 80003e4:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    str     r14, [sp, #52]
 80003e8:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
    bx      lr
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop

080003f0 <ark_sbox>:
* Credits to https://github.com/Ko-/aes-armcortexm for the S-box implementation
******************************************************************************/
.align 2
ark_sbox:
    // add round key
    ldr.w   r1, [sp, #48]
 80003f0:	f8dd 1030 	ldr.w	r1, [sp, #48]	@ 0x30
    ldmia   r1!, {r0,r2,r3,r12}
 80003f4:	e8b1 100d 	ldmia.w	r1!, {r0, r2, r3, ip}
    eor     r4, r0
 80003f8:	ea84 0400 	eor.w	r4, r4, r0
    eor     r5, r2
 80003fc:	ea85 0502 	eor.w	r5, r5, r2
    eor     r6, r3
 8000400:	ea86 0603 	eor.w	r6, r6, r3
    eor     r7, r12
 8000404:	ea87 070c 	eor.w	r7, r7, ip
    ldmia   r1!, {r0,r2,r3,r12}
 8000408:	e8b1 100d 	ldmia.w	r1!, {r0, r2, r3, ip}
    eor     r8, r0
 800040c:	ea88 0800 	eor.w	r8, r8, r0
    eor     r9, r2
 8000410:	ea89 0902 	eor.w	r9, r9, r2
    eor     r10, r3
 8000414:	ea8a 0a03 	eor.w	sl, sl, r3
    eor     r11, r12
 8000418:	ea8b 0b0c 	eor.w	fp, fp, ip
    str.w   r1, [sp, #48]
 800041c:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    str     r14, [sp, #52]
 8000420:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
    // sbox: credits to https://github.com/Ko-/aes-armcortexm
    eor     r1, r7, r9              //Exec y14 = U3 ^ U5; into r1
 8000424:	ea87 0109 	eor.w	r1, r7, r9
    eor     r3, r4, r10             //Exec y13 = U0 ^ U6; into r3
 8000428:	ea84 030a 	eor.w	r3, r4, sl
    eor     r2, r3, r1              //Exec y12 = y13 ^ y14; into r2
 800042c:	ea83 0201 	eor.w	r2, r3, r1
    eor     r0, r8, r2              //Exec t1 = U4 ^ y12; into r0
 8000430:	ea88 0002 	eor.w	r0, r8, r2
    eor     r14, r0, r9             //Exec y15 = t1 ^ U5; into r14
 8000434:	ea80 0e09 	eor.w	lr, r0, r9
    and     r12, r2, r14            //Exec t2 = y12 & y15; into r12
 8000438:	ea02 0c0e 	and.w	ip, r2, lr
    eor     r8, r14, r11            //Exec y6 = y15 ^ U7; into r8
 800043c:	ea8e 080b 	eor.w	r8, lr, fp
    eor     r0, r0, r5              //Exec y20 = t1 ^ U1; into r0
 8000440:	ea80 0005 	eor.w	r0, r0, r5
    str.w   r2, [sp, #44]           //Store r2/y12 on stack
 8000444:	f8cd 202c 	str.w	r2, [sp, #44]	@ 0x2c
    eor     r2, r4, r7              //Exec y9 = U0 ^ U3; into r2
 8000448:	ea84 0207 	eor.w	r2, r4, r7
    str     r0, [sp, #40]           //Store r0/y20 on stack
 800044c:	900a      	str	r0, [sp, #40]	@ 0x28
    eor     r0, r0, r2              //Exec y11 = y20 ^ y9; into r0
 800044e:	ea80 0002 	eor.w	r0, r0, r2
    str     r2, [sp, #36]           //Store r2/y9 on stack
 8000452:	9209      	str	r2, [sp, #36]	@ 0x24
    and     r2, r2, r0              //Exec t12 = y9 & y11; into r2
 8000454:	ea02 0200 	and.w	r2, r2, r0
    str     r8, [sp, #32]           //Store r8/y6 on stack
 8000458:	f8cd 8020 	str.w	r8, [sp, #32]
    eor     r8, r11, r0             //Exec y7 = U7 ^ y11; into r8
 800045c:	ea8b 0800 	eor.w	r8, fp, r0
    eor     r9, r4, r9              //Exec y8 = U0 ^ U5; into r9
 8000460:	ea84 0909 	eor.w	r9, r4, r9
    eor     r6, r5, r6              //Exec t0 = U1 ^ U2; into r6
 8000464:	ea85 0606 	eor.w	r6, r5, r6
    eor     r5, r14, r6             //Exec y10 = y15 ^ t0; into r5
 8000468:	ea8e 0506 	eor.w	r5, lr, r6
    str     r14, [sp, #28]          //Store r14/y15 on stack
 800046c:	f8cd e01c 	str.w	lr, [sp, #28]
    eor     r14, r5, r0             //Exec y17 = y10 ^ y11; into r14
 8000470:	ea85 0e00 	eor.w	lr, r5, r0
    str.w   r1, [sp, #24]           //Store r1/y14 on stack
 8000474:	f8cd 1018 	str.w	r1, [sp, #24]
    and     r1, r1, r14             //Exec t13 = y14 & y17; into r1
 8000478:	ea01 010e 	and.w	r1, r1, lr
    eor     r1, r1, r2              //Exec t14 = t13 ^ t12; into r1
 800047c:	ea81 0102 	eor.w	r1, r1, r2
    str     r14, [sp, #20]          //Store r14/y17 on stack
 8000480:	f8cd e014 	str.w	lr, [sp, #20]
    eor     r14, r5, r9             //Exec y19 = y10 ^ y8; into r14
 8000484:	ea85 0e09 	eor.w	lr, r5, r9
    str.w   r5, [sp, #16]           //Store r5/y10 on stack
 8000488:	f8cd 5010 	str.w	r5, [sp, #16]
    and     r5, r9, r5              //Exec t15 = y8 & y10; into r5
 800048c:	ea09 0505 	and.w	r5, r9, r5
    eor     r2, r5, r2              //Exec t16 = t15 ^ t12; into r2
 8000490:	ea85 0202 	eor.w	r2, r5, r2
    eor     r5, r6, r0              //Exec y16 = t0 ^ y11; into r5
 8000494:	ea86 0500 	eor.w	r5, r6, r0
    str.w   r0, [sp, #12]           //Store r0/y11 on stack
 8000498:	f8cd 000c 	str.w	r0, [sp, #12]
    eor     r0, r3, r5              //Exec y21 = y13 ^ y16; into r0
 800049c:	ea83 0005 	eor.w	r0, r3, r5
    str     r3, [sp, #8]            //Store r3/y13 on stack
 80004a0:	9302      	str	r3, [sp, #8]
    and     r3, r3, r5              //Exec t7 = y13 & y16; into r3
 80004a2:	ea03 0305 	and.w	r3, r3, r5
    str     r5, [sp, #4]            //Store r5/y16 on stack
 80004a6:	9501      	str	r5, [sp, #4]
    str     r11, [sp, #0]           //Store r11/U7 on stack
 80004a8:	f8cd b000 	str.w	fp, [sp]
    eor     r5, r4, r5              //Exec y18 = U0 ^ y16; into r5
 80004ac:	ea84 0505 	eor.w	r5, r4, r5
    eor     r6, r6, r11             //Exec y1 = t0 ^ U7; into r6
 80004b0:	ea86 060b 	eor.w	r6, r6, fp
    eor     r7, r6, r7              //Exec y4 = y1 ^ U3; into r7
 80004b4:	ea86 0707 	eor.w	r7, r6, r7
    and     r11, r7, r11            //Exec t5 = y4 & U7; into r11
 80004b8:	ea07 0b0b 	and.w	fp, r7, fp
    eor     r11, r11, r12           //Exec t6 = t5 ^ t2; into r11
 80004bc:	ea8b 0b0c 	eor.w	fp, fp, ip
    eor     r11, r11, r2            //Exec t18 = t6 ^ t16; into r11
 80004c0:	ea8b 0b02 	eor.w	fp, fp, r2
    eor     r14, r11, r14           //Exec t22 = t18 ^ y19; into r14
 80004c4:	ea8b 0e0e 	eor.w	lr, fp, lr
    eor     r4, r6, r4              //Exec y2 = y1 ^ U0; into r4
 80004c8:	ea86 0404 	eor.w	r4, r6, r4
    and     r11, r4, r8             //Exec t10 = y2 & y7; into r11
 80004cc:	ea04 0b08 	and.w	fp, r4, r8
    eor     r11, r11, r3            //Exec t11 = t10 ^ t7; into r11
 80004d0:	ea8b 0b03 	eor.w	fp, fp, r3
    eor     r2, r11, r2             //Exec t20 = t11 ^ t16; into r2
 80004d4:	ea8b 0202 	eor.w	r2, fp, r2
    eor     r2, r2, r5              //Exec t24 = t20 ^ y18; into r2
 80004d8:	ea82 0205 	eor.w	r2, r2, r5
    eor     r10, r6, r10            //Exec y5 = y1 ^ U6; into r10
 80004dc:	ea86 0a0a 	eor.w	sl, r6, sl
    and     r11, r10, r6            //Exec t8 = y5 & y1; into r11
 80004e0:	ea0a 0b06 	and.w	fp, sl, r6
    eor     r3, r11, r3             //Exec t9 = t8 ^ t7; into r3
 80004e4:	ea8b 0303 	eor.w	r3, fp, r3
    eor     r3, r3, r1              //Exec t19 = t9 ^ t14; into r3
 80004e8:	ea83 0301 	eor.w	r3, r3, r1
    eor     r3, r3, r0              //Exec t23 = t19 ^ y21; into r3
 80004ec:	ea83 0300 	eor.w	r3, r3, r0
    eor     r0, r10, r9             //Exec y3 = y5 ^ y8; into r0
 80004f0:	ea8a 0009 	eor.w	r0, sl, r9
    ldr     r11, [sp, #32]          //Load y6 into r11
 80004f4:	f8dd b020 	ldr.w	fp, [sp, #32]
    and     r5, r0, r11             //Exec t3 = y3 & y6; into r5
 80004f8:	ea00 050b 	and.w	r5, r0, fp
    eor     r12, r5, r12            //Exec t4 = t3 ^ t2; into r12
 80004fc:	ea85 0c0c 	eor.w	ip, r5, ip
    ldr     r5, [sp, #40]           //Load y20 into r5
 8000500:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
    str     r7, [sp, #32]           //Store r7/y4 on stack
 8000502:	9708      	str	r7, [sp, #32]
    eor     r12, r12, r5            //Exec t17 = t4 ^ y20; into r12
 8000504:	ea8c 0c05 	eor.w	ip, ip, r5
    eor     r1, r12, r1             //Exec t21 = t17 ^ t14; into r1
 8000508:	ea8c 0101 	eor.w	r1, ip, r1
    and     r12, r1, r3             //Exec t26 = t21 & t23; into r12
 800050c:	ea01 0c03 	and.w	ip, r1, r3
    eor     r5, r2, r12             //Exec t27 = t24 ^ t26; into r5
 8000510:	ea82 050c 	eor.w	r5, r2, ip
    eor     r12, r14, r12           //Exec t31 = t22 ^ t26; into r12
 8000514:	ea8e 0c0c 	eor.w	ip, lr, ip
    eor     r1, r1, r14             //Exec t25 = t21 ^ t22; into r1
 8000518:	ea81 010e 	eor.w	r1, r1, lr
    and     r7, r1, r5              //Exec t28 = t25 & t27; into r7
 800051c:	ea01 0705 	and.w	r7, r1, r5
    eor     r14, r7, r14            //Exec t29 = t28 ^ t22; into r14
 8000520:	ea87 0e0e 	eor.w	lr, r7, lr
    and     r4, r14, r4             //Exec z14 = t29 & y2; into r4
 8000524:	ea0e 0404 	and.w	r4, lr, r4
    and     r8, r14, r8             //Exec z5 = t29 & y7; into r8
 8000528:	ea0e 0808 	and.w	r8, lr, r8
    eor     r7, r3, r2              //Exec t30 = t23 ^ t24; into r7
 800052c:	ea83 0702 	eor.w	r7, r3, r2
    and     r12, r12, r7            //Exec t32 = t31 & t30; into r12
 8000530:	ea0c 0c07 	and.w	ip, ip, r7
    eor     r12, r12, r2            //Exec t33 = t32 ^ t24; into r12
 8000534:	ea8c 0c02 	eor.w	ip, ip, r2
    eor     r7, r5, r12             //Exec t35 = t27 ^ t33; into r7
 8000538:	ea85 070c 	eor.w	r7, r5, ip
    and     r2, r2, r7              //Exec t36 = t24 & t35; into r2
 800053c:	ea02 0207 	and.w	r2, r2, r7
    eor     r5, r5, r2              //Exec t38 = t27 ^ t36; into r5
 8000540:	ea85 0502 	eor.w	r5, r5, r2
    and     r5, r14, r5             //Exec t39 = t29 & t38; into r5
 8000544:	ea0e 0505 	and.w	r5, lr, r5
    eor     r1, r1, r5              //Exec t40 = t25 ^ t39; into r1
 8000548:	ea81 0105 	eor.w	r1, r1, r5
    eor     r5, r14, r1             //Exec t43 = t29 ^ t40; into r5
 800054c:	ea8e 0501 	eor.w	r5, lr, r1
    ldr.w   r7, [sp, #4]            //Load y16 into r7
 8000550:	f8dd 7004 	ldr.w	r7, [sp, #4]
    and     r7, r5, r7              //Exec z3 = t43 & y16; into r7
 8000554:	ea05 0707 	and.w	r7, r5, r7
    eor     r8, r7, r8              //Exec tc12 = z3 ^ z5; into r8
 8000558:	ea87 0808 	eor.w	r8, r7, r8
    str     r8, [sp, #40]           //Store r8/tc12 on stack
 800055c:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
    ldr     r8, [sp, #8]            //Load y13 into r8
 8000560:	f8dd 8008 	ldr.w	r8, [sp, #8]
    and     r8, r5, r8              //Exec z12 = t43 & y13; into r8
 8000564:	ea05 0808 	and.w	r8, r5, r8
    and     r10, r1, r10            //Exec z13 = t40 & y5; into r10
 8000568:	ea01 0a0a 	and.w	sl, r1, sl
    and     r6, r1, r6              //Exec z4 = t40 & y1; into r6
 800056c:	ea01 0606 	and.w	r6, r1, r6
    eor     r6, r7, r6              //Exec tc6 = z3 ^ z4; into r6
 8000570:	ea87 0606 	eor.w	r6, r7, r6
    eor     r3, r3, r12             //Exec t34 = t23 ^ t33; into r3
 8000574:	ea83 030c 	eor.w	r3, r3, ip
    eor     r3, r2, r3              //Exec t37 = t36 ^ t34; into r3
 8000578:	ea82 0303 	eor.w	r3, r2, r3
    eor     r1, r1, r3              //Exec t41 = t40 ^ t37; into r1
 800057c:	ea81 0103 	eor.w	r1, r1, r3
    ldr.w   r5, [sp, #16]           //Load y10 into r5
 8000580:	f8dd 5010 	ldr.w	r5, [sp, #16]
    and     r2, r1, r5              //Exec z8 = t41 & y10; into r2
 8000584:	ea01 0205 	and.w	r2, r1, r5
    and     r9, r1, r9              //Exec z17 = t41 & y8; into r9
 8000588:	ea01 0909 	and.w	r9, r1, r9
    str     r9, [sp, #16]           //Store r9/z17 on stack
 800058c:	f8cd 9010 	str.w	r9, [sp, #16]
    eor     r5, r12, r3             //Exec t44 = t33 ^ t37; into r5
 8000590:	ea8c 0503 	eor.w	r5, ip, r3
    ldr     r9, [sp, #28]           //Load y15 into r9
 8000594:	f8dd 901c 	ldr.w	r9, [sp, #28]
    ldr.w   r7, [sp, #44]           //Load y12 into r7
 8000598:	f8dd 702c 	ldr.w	r7, [sp, #44]	@ 0x2c
    and     r9, r5, r9              //Exec z0 = t44 & y15; into r9
 800059c:	ea05 0909 	and.w	r9, r5, r9
    and     r7, r5, r7              //Exec z9 = t44 & y12; into r7
 80005a0:	ea05 0707 	and.w	r7, r5, r7
    and     r0, r3, r0              //Exec z10 = t37 & y3; into r0
 80005a4:	ea03 0000 	and.w	r0, r3, r0
    and     r3, r3, r11             //Exec z1 = t37 & y6; into r3
 80005a8:	ea03 030b 	and.w	r3, r3, fp
    eor     r3, r3, r9              //Exec tc5 = z1 ^ z0; into r3
 80005ac:	ea83 0309 	eor.w	r3, r3, r9
    eor     r3, r6, r3              //Exec tc11 = tc6 ^ tc5; into r3
 80005b0:	ea86 0303 	eor.w	r3, r6, r3
    ldr     r11, [sp, #32]          //Load y4 into r11
 80005b4:	f8dd b020 	ldr.w	fp, [sp, #32]
    ldr.w   r5, [sp, #20]           //Load y17 into r5
 80005b8:	f8dd 5014 	ldr.w	r5, [sp, #20]
    and     r11, r12, r11           //Exec z11 = t33 & y4; into r11
 80005bc:	ea0c 0b0b 	and.w	fp, ip, fp
    eor     r14, r14, r12           //Exec t42 = t29 ^ t33; into r14
 80005c0:	ea8e 0e0c 	eor.w	lr, lr, ip
    eor     r1, r14, r1             //Exec t45 = t42 ^ t41; into r1
 80005c4:	ea8e 0101 	eor.w	r1, lr, r1
    and     r5, r1, r5              //Exec z7 = t45 & y17; into r5
 80005c8:	ea01 0505 	and.w	r5, r1, r5
    eor     r6, r5, r6              //Exec tc8 = z7 ^ tc6; into r6
 80005cc:	ea85 0606 	eor.w	r6, r5, r6
    ldr     r5, [sp, #24]           //Load y14 into r5
 80005d0:	9d06      	ldr	r5, [sp, #24]
    str     r4, [sp, #32]           //Store r4/z14 on stack
 80005d2:	9408      	str	r4, [sp, #32]
    and     r1, r1, r5              //Exec z16 = t45 & y14; into r1
 80005d4:	ea01 0105 	and.w	r1, r1, r5
    ldr     r5, [sp, #12]           //Load y11 into r5
 80005d8:	9d03      	ldr	r5, [sp, #12]
    ldr     r4, [sp, #36]           //Load y9 into r4
 80005da:	9c09      	ldr	r4, [sp, #36]	@ 0x24
    and     r5, r14, r5             //Exec z6 = t42 & y11; into r5
 80005dc:	ea0e 0505 	and.w	r5, lr, r5
    eor     r5, r5, r6              //Exec tc16 = z6 ^ tc8; into r5
 80005e0:	ea85 0506 	eor.w	r5, r5, r6
    and     r4, r14, r4             //Exec z15 = t42 & y9; into r4
 80005e4:	ea0e 0404 	and.w	r4, lr, r4
    eor     r14, r4, r5             //Exec tc20 = z15 ^ tc16; into r14
 80005e8:	ea84 0e05 	eor.w	lr, r4, r5
    eor     r4, r4, r1              //Exec tc1 = z15 ^ z16; into r4
 80005ec:	ea84 0401 	eor.w	r4, r4, r1
    eor     r1, r0, r4              //Exec tc2 = z10 ^ tc1; into r1
 80005f0:	ea80 0104 	eor.w	r1, r0, r4
    eor     r0, r1, r11             //Exec tc21 = tc2 ^ z11; into r0
 80005f4:	ea81 000b 	eor.w	r0, r1, fp
    eor     r7, r7, r1              //Exec tc3 = z9 ^ tc2; into r7
 80005f8:	ea87 0701 	eor.w	r7, r7, r1
    eor     r1, r7, r5              //Exec S0 = tc3 ^ tc16; into r1
 80005fc:	ea87 0105 	eor.w	r1, r7, r5
    eor     r7, r7, r3              //Exec S3 = tc3 ^ tc11; into r7
 8000600:	ea87 0703 	eor.w	r7, r7, r3
    eor     r3, r7, r5              //Exec S1 = S3 ^ tc16 ^ 1; into r3
 8000604:	ea87 0305 	eor.w	r3, r7, r5
    eor     r11, r10, r4            //Exec tc13 = z13 ^ tc1; into r11
 8000608:	ea8a 0b04 	eor.w	fp, sl, r4
    ldr.w   r4, [sp, #0]            //Load U7 into r4
 800060c:	f8dd 4000 	ldr.w	r4, [sp]
    and     r12, r12, r4            //Exec z2 = t33 & U7; into r12
 8000610:	ea0c 0c04 	and.w	ip, ip, r4
    eor     r9, r9, r12             //Exec tc4 = z0 ^ z2; into r9
 8000614:	ea89 090c 	eor.w	r9, r9, ip
    eor     r12, r8, r9             //Exec tc7 = z12 ^ tc4; into r12
 8000618:	ea88 0c09 	eor.w	ip, r8, r9
    eor     r2, r2, r12             //Exec tc9 = z8 ^ tc7; into r2
 800061c:	ea82 020c 	eor.w	r2, r2, ip
    eor     r2, r6, r2              //Exec tc10 = tc8 ^ tc9; into r2
 8000620:	ea86 0202 	eor.w	r2, r6, r2
    ldr.w   r4, [sp, #32]           //Load z14 into r4
 8000624:	f8dd 4020 	ldr.w	r4, [sp, #32]
    eor     r12, r4, r2             //Exec tc17 = z14 ^ tc10; into r12
 8000628:	ea84 0c02 	eor.w	ip, r4, r2
    eor     r0, r0, r12             //Exec S5 = tc21 ^ tc17; into r0
 800062c:	ea80 000c 	eor.w	r0, r0, ip
    eor     r6, r12, r14            //Exec tc26 = tc17 ^ tc20; into r6
 8000630:	ea8c 060e 	eor.w	r6, ip, lr
    ldr.w   r4, [sp, #16]           //Load z17 into r4
 8000634:	f8dd 4010 	ldr.w	r4, [sp, #16]
    ldr     r12, [sp, #40]          //Load tc12 into r12
 8000638:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
    eor     r6, r6, r4              //Exec S2 = tc26 ^ z17 ^ 1; into r6
 800063c:	ea86 0604 	eor.w	r6, r6, r4
    eor     r12, r9, r12            //Exec tc14 = tc4 ^ tc12; into r12
 8000640:	ea89 0c0c 	eor.w	ip, r9, ip
    eor     r14, r11, r12           //Exec tc18 = tc13 ^ tc14; into r14
 8000644:	ea8b 0e0c 	eor.w	lr, fp, ip
    eor     r2, r2, r14             //Exec S6 = tc10 ^ tc18 ^ 1; into r2
 8000648:	ea82 020e 	eor.w	r2, r2, lr
    eor     r11, r8, r14            //Exec S7 = z12 ^ tc18 ^ 1; into r11
 800064c:	ea88 0b0e 	eor.w	fp, r8, lr
    ldr     r14, [sp, #52]          // restore link register
 8000650:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
    eor     r8, r12, r7             //Exec S4 = tc14 ^ S3; into r8
 8000654:	ea8c 0807 	eor.w	r8, ip, r7
    bx      lr
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <mixcolumns_0>:
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 0.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 0.
******************************************************************************/
.align 2
mixcolumns_0:
    str     r14, [sp, #52]          // store link register
 800065c:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
    movw    r12, #0x0303
 8000660:	f240 3c03 	movw	ip, #771	@ 0x303
    movt    r12, #0x0303
 8000664:	f2c0 3c03 	movt	ip, #771	@ 0x303
    mc_0_2  r12, 6, 2, 26, 18
 8000668:	ea0c 1e91 	and.w	lr, ip, r1, lsr #6
 800066c:	ea21 09bc 	bic.w	r9, r1, ip, ror #2
 8000670:	ea4e 0e89 	orr.w	lr, lr, r9, lsl #2
 8000674:	ea81 243e 	eor.w	r4, r1, lr, ror #8
 8000678:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800067c:	f6c0 710f 	movt	r1, #3855	@ 0xf0f
 8000680:	ea0c 159b 	and.w	r5, ip, fp, lsr #6
 8000684:	ea2b 09bc 	bic.w	r9, fp, ip, ror #2
 8000688:	ea45 0589 	orr.w	r5, r5, r9, lsl #2
 800068c:	ea8b 2a35 	eor.w	sl, fp, r5, ror #8
 8000690:	ea01 1b1a 	and.w	fp, r1, sl, lsr #4
 8000694:	ea2a 1931 	bic.w	r9, sl, r1, ror #4
 8000698:	ea4b 1b09 	orr.w	fp, fp, r9, lsl #4
 800069c:	ea84 4b3b 	eor.w	fp, r4, fp, ror #16
 80006a0:	ea8b 2b35 	eor.w	fp, fp, r5, ror #8
 80006a4:	ea0c 1592 	and.w	r5, ip, r2, lsr #6
 80006a8:	ea22 09bc 	bic.w	r9, r2, ip, ror #2
 80006ac:	ea45 0589 	orr.w	r5, r5, r9, lsl #2
 80006b0:	ea82 2235 	eor.w	r2, r2, r5, ror #8
 80006b4:	ea8a 2a35 	eor.w	sl, sl, r5, ror #8
 80006b8:	ea01 1512 	and.w	r5, r1, r2, lsr #4
 80006bc:	ea22 1931 	bic.w	r9, r2, r1, ror #4
 80006c0:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
 80006c4:	ea8a 4a35 	eor.w	sl, sl, r5, ror #16
 80006c8:	ea8a 0a04 	eor.w	sl, sl, r4
 80006cc:	ea0c 1590 	and.w	r5, ip, r0, lsr #6
 80006d0:	ea20 09bc 	bic.w	r9, r0, ip, ror #2
 80006d4:	ea45 0589 	orr.w	r5, r5, r9, lsl #2
 80006d8:	ea80 2035 	eor.w	r0, r0, r5, ror #8
 80006dc:	ea82 2935 	eor.w	r9, r2, r5, ror #8
 80006e0:	ea01 1510 	and.w	r5, r1, r0, lsr #4
 80006e4:	ea20 1231 	bic.w	r2, r0, r1, ror #4
 80006e8:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
 80006ec:	ea89 4935 	eor.w	r9, r9, r5, ror #16
 80006f0:	ea0c 1598 	and.w	r5, ip, r8, lsr #6
 80006f4:	ea28 02bc 	bic.w	r2, r8, ip, ror #2
 80006f8:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
 80006fc:	ea88 2235 	eor.w	r2, r8, r5, ror #8
 8000700:	ea80 2835 	eor.w	r8, r0, r5, ror #8
 8000704:	ea01 1512 	and.w	r5, r1, r2, lsr #4
 8000708:	ea22 1031 	bic.w	r0, r2, r1, ror #4
 800070c:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
 8000710:	ea88 4835 	eor.w	r8, r8, r5, ror #16
 8000714:	ea88 0804 	eor.w	r8, r8, r4
 8000718:	ea0c 1597 	and.w	r5, ip, r7, lsr #6
 800071c:	ea27 00bc 	bic.w	r0, r7, ip, ror #2
 8000720:	ea45 0580 	orr.w	r5, r5, r0, lsl #2
 8000724:	ea87 2035 	eor.w	r0, r7, r5, ror #8
 8000728:	ea82 2735 	eor.w	r7, r2, r5, ror #8
 800072c:	ea01 1510 	and.w	r5, r1, r0, lsr #4
 8000730:	ea20 1231 	bic.w	r2, r0, r1, ror #4
 8000734:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
 8000738:	ea87 4735 	eor.w	r7, r7, r5, ror #16
 800073c:	ea87 0704 	eor.w	r7, r7, r4
 8000740:	ea0c 1596 	and.w	r5, ip, r6, lsr #6
 8000744:	ea26 02bc 	bic.w	r2, r6, ip, ror #2
 8000748:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
 800074c:	ea86 2235 	eor.w	r2, r6, r5, ror #8
 8000750:	ea80 2635 	eor.w	r6, r0, r5, ror #8
 8000754:	ea01 1512 	and.w	r5, r1, r2, lsr #4
 8000758:	ea22 1031 	bic.w	r0, r2, r1, ror #4
 800075c:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
 8000760:	ea86 4635 	eor.w	r6, r6, r5, ror #16
 8000764:	ea0c 1593 	and.w	r5, ip, r3, lsr #6
 8000768:	ea23 00bc 	bic.w	r0, r3, ip, ror #2
 800076c:	ea45 0580 	orr.w	r5, r5, r0, lsl #2
 8000770:	ea83 2035 	eor.w	r0, r3, r5, ror #8
 8000774:	ea82 2335 	eor.w	r3, r2, r5, ror #8
 8000778:	ea01 1510 	and.w	r5, r1, r0, lsr #4
 800077c:	ea20 1231 	bic.w	r2, r0, r1, ror #4
 8000780:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
 8000784:	ea83 4535 	eor.w	r5, r3, r5, ror #16
 8000788:	ea80 2e3e 	eor.w	lr, r0, lr, ror #8
 800078c:	ea01 1014 	and.w	r0, r1, r4, lsr #4
 8000790:	ea24 1231 	bic.w	r2, r4, r1, ror #4
 8000794:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8000798:	ea8e 4430 	eor.w	r4, lr, r0, ror #16
    ldr     r14, [sp, #52]          // restore link register
 800079c:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
    bx      lr
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop

080007a4 <mixcolumns_1>:
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for round i s.t. (i%4) == 1.
******************************************************************************/
.align 2
mixcolumns_1:
    str     r14, [sp, #52]          // store link register
 80007a4:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
    movw    r14, #0x0f0f
 80007a8:	f640 7e0f 	movw	lr, #3855	@ 0xf0f
    movt    r14, #0x0f0f            // r14<- 0x0f0f0f0f (mask for BYTE_ROR_4)
 80007ac:	f6c0 7e0f 	movt	lr, #3855	@ 0xf0f
    and     r5, r14, r1, lsr #4     // r5 <- (S0 >> 4) & 0x0f0f0f0f
 80007b0:	ea0e 1511 	and.w	r5, lr, r1, lsr #4
    and     r9, r14, r1             // r9 <- S0 & 0x0f0f0f0f
 80007b4:	ea0e 0901 	and.w	r9, lr, r1
    orr     r5, r5, r9, lsl #4      // r5 <- BYTE_ROR_4(S0)
 80007b8:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
    eor     r4, r1, r5, ror #8      // r4 <- S0 ^ (BYTE_ROR_4(S0) >>> 8)
 80007bc:	ea81 2435 	eor.w	r4, r1, r5, ror #8
    mov.w   r1, r5, ror #8          // r1 <- (BYTE_ROR_4(S0) >>> 8)
 80007c0:	ea4f 2135 	mov.w	r1, r5, ror #8
    and     r5, r14, r11, lsr #4    // r5 <- (S7 >> 4) & 0x0f0f0f0f
 80007c4:	ea0e 151b 	and.w	r5, lr, fp, lsr #4
    and     r9, r14, r11            // r9 <- S7 & 0x0f0f0f0f
 80007c8:	ea0e 090b 	and.w	r9, lr, fp
    orr     r5, r5, r9, lsl #4      // r5 <- BYTE_ROR_4(S7)
 80007cc:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
    eor     r12, r11, r5, ror #8    // r12<- S7 ^ (BYTE_ROR_4(S7) >>> 8)
 80007d0:	ea8b 2c35 	eor.w	ip, fp, r5, ror #8
    eor     r10, r4, r12            // r10<- r4 ^ r12
 80007d4:	ea84 0a0c 	eor.w	sl, r4, ip
    eor     r11, r10                // r11<- S7 ^ r4 ^ r12
 80007d8:	ea8b 0b0a 	eor.w	fp, fp, sl
    eor     r11, r11, r12, ror #16  // r11<- r11 ^ (r12 >>> 16)
 80007dc:	ea8b 4b3c 	eor.w	fp, fp, ip, ror #16
    and     r5, r14, r2, lsr #4     // r5 <- (S6 >> 4) & 0x0f0f0f0f
 80007e0:	ea0e 1512 	and.w	r5, lr, r2, lsr #4
    and     r9, r14, r2             // r9 <- S6 & 0x0f0f0f0f
 80007e4:	ea0e 0902 	and.w	r9, lr, r2
    orr     r5, r5, r9, lsl #4      // r5 <- BYTE_ROR_4(S6)
 80007e8:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
    eor     r10, r10, r5, ror #8    // r10<- r10 ^ (BYTE_ROR_4(S6) >>> 8)
 80007ec:	ea8a 2a35 	eor.w	sl, sl, r5, ror #8
    eor     r12, r2, r5, ror #8     // r12<- S6 ^ (BYTE_ROR_4(S6) >>> 8)
 80007f0:	ea82 2c35 	eor.w	ip, r2, r5, ror #8
    eor     r10, r10, r12, ror #16  // r10<- r10 ^ (r12 >>> 16)
 80007f4:	ea8a 4a3c 	eor.w	sl, sl, ip, ror #16
    and     r5, r14, r0, lsr #4     // r5 <- (S5 >> 4) & 0x0f0f0f0f
 80007f8:	ea0e 1510 	and.w	r5, lr, r0, lsr #4
    and     r9, r14, r0             // r9 <- S5 & 0x0f0f0f0f
 80007fc:	ea0e 0900 	and.w	r9, lr, r0
    orr     r5, r5, r9, lsl #4      // r5 <- BYTE_ROR_4(S5)
 8000800:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
    eor     r9, r12, r5, ror #8     // r9 <- r12 ^ (BYTE_ROR_4(S5) >>> 8)
 8000804:	ea8c 2935 	eor.w	r9, ip, r5, ror #8
    eor     r12, r0, r5, ror #8     // r12<- S5 ^ (BYTE_ROR_4(S5) >>> 8)
 8000808:	ea80 2c35 	eor.w	ip, r0, r5, ror #8
    eor     r9, r9, r12, ror #16    // r9 <- (r9 ^ r12 >>> 16)
 800080c:	ea89 493c 	eor.w	r9, r9, ip, ror #16
    eor     r0, r4, r12             // r0 <- r12 ^ S0 ^ (BYTE_ROR_4(S0) >>> 8)
 8000810:	ea84 000c 	eor.w	r0, r4, ip
    and     r5, r14, r8, lsr #4     // r5 <- (S4 >> 4) & 0x0f0f0f0f
 8000814:	ea0e 1518 	and.w	r5, lr, r8, lsr #4
    and     r2, r14, r8             // r2 <- S4 & 0x0f0f0f0f
 8000818:	ea0e 0208 	and.w	r2, lr, r8
    orr     r2, r5, r2, lsl #4      // r2 <- BYTE_ROR_4(S4)
 800081c:	ea45 1202 	orr.w	r2, r5, r2, lsl #4
    eor     r0, r0, r2, ror #8      // r0 <- r0 ^ (BYTE_ROR_4(S4) >>> 8)
 8000820:	ea80 2032 	eor.w	r0, r0, r2, ror #8
    eor     r2, r8, r2, ror #8      // r2 <- S4 ^ (BYTE_ROR_4(S4) >>> 8)
 8000824:	ea88 2232 	eor.w	r2, r8, r2, ror #8
    eor     r8, r0, r2, ror #16     // r8 <- r0 ^ (r2 >>> 16)
 8000828:	ea80 4832 	eor.w	r8, r0, r2, ror #16
    eor     r2, r4                  // r2 <- r2 ^ S0 ^ (BYTE_ROR_4(S0) >>> 8)
 800082c:	ea82 0204 	eor.w	r2, r2, r4
    and     r5, r14, r7, lsr #4     // r5 <- (S3 >> 4) & 0x0f0f0f0f
 8000830:	ea0e 1517 	and.w	r5, lr, r7, lsr #4
    and     r0, r14, r7             // r0 <- S3 & 0x0f0f0f0f
 8000834:	ea0e 0007 	and.w	r0, lr, r7
    orr     r0, r5, r0, lsl #4      // r0 <- BYTE_ROR_4(S3)
 8000838:	ea45 1000 	orr.w	r0, r5, r0, lsl #4
    eor     r2, r2, r0, ror #8      // r2 <- r2 ^ (BYTE_ROR_4(S3) >>> 8)
 800083c:	ea82 2230 	eor.w	r2, r2, r0, ror #8
    eor     r0, r7, r0, ror #8      // r0 <- S3 ^ (BYTE_ROR_4(S3) >>> 8)
 8000840:	ea87 2030 	eor.w	r0, r7, r0, ror #8
    eor     r7, r2, r0, ror #16     // r7 <- r2 ^ (r0 >>> 16)
 8000844:	ea82 4730 	eor.w	r7, r2, r0, ror #16
    and     r5, r14, r6, lsr #4     // r5 <- (S2 >> 4) & 0x0f0f0f0f
 8000848:	ea0e 1516 	and.w	r5, lr, r6, lsr #4
    and     r2, r14, r6             // r2 <- S2 & 0x0f0f0f0f
 800084c:	ea0e 0206 	and.w	r2, lr, r6
    orr     r2, r5, r2, lsl #4      // r2 <- BYTE_ROR_4(S2)
 8000850:	ea45 1202 	orr.w	r2, r5, r2, lsl #4
    eor     r0, r0, r2, ror #8      // r0 <- r0 ^ (BYTE_ROR_4(S2) >>> 8)
 8000854:	ea80 2032 	eor.w	r0, r0, r2, ror #8
    eor     r2, r6, r2, ror #8      // r2 <- S2 ^ (BYTE_ROR_4(S2) >>> 8)
 8000858:	ea86 2232 	eor.w	r2, r6, r2, ror #8
    eor     r6, r0, r2, ror #16     // r6 <- r0 ^ (r2 >>> 16)
 800085c:	ea80 4632 	eor.w	r6, r0, r2, ror #16
    and     r5, r14, r3, lsr #4     // r5 <- (S1 >> 4) & 0x0f0f0f0f
 8000860:	ea0e 1513 	and.w	r5, lr, r3, lsr #4
    and     r0, r14, r3             // r0 <- S1 & 0x0f0f0f0f
 8000864:	ea0e 0003 	and.w	r0, lr, r3
    orr     r0, r5, r0, lsl #4      // r0 <- BYTE_ROR_4(S1)
 8000868:	ea45 1000 	orr.w	r0, r5, r0, lsl #4
    ldr     r14, [sp, #52]          // restore link register
 800086c:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
    eor     r2, r2, r0, ror #8      // r2 <- r2 ^ (BYTE_ROR_4(S1) >>> 8)
 8000870:	ea82 2230 	eor.w	r2, r2, r0, ror #8
    eor     r0, r3, r0, ror #8      // r0 <- S1 ^ (BYTE_ROR_4(S1) >>> 8)
 8000874:	ea83 2030 	eor.w	r0, r3, r0, ror #8
    eor     r5, r2, r0, ror #16     // r5 <- r2 <- (r0 >>> 16)
 8000878:	ea82 4530 	eor.w	r5, r2, r0, ror #16
    eor     r1, r0, r1              // r1 <- r0 ^ BYTE_ROR_4(S0) >>> 8
 800087c:	ea80 0101 	eor.w	r1, r0, r1
    eor     r4, r1, r4, ror #16     // r4 <- r4 ^ (r0 >>> 16)
 8000880:	ea81 4434 	eor.w	r4, r1, r4, ror #16
    bx      lr
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop

08000888 <mixcolumns_2>:
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for rounds i s.t. (i%4) == 2.
******************************************************************************/
.align 2
mixcolumns_2:
    str     r14, [sp, #52]          // store link register
 8000888:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
    movw    r12, #0x3f3f
 800088c:	f643 7c3f 	movw	ip, #16191	@ 0x3f3f
    movt    r12, #0x3f3f
 8000890:	f6c3 7c3f 	movt	ip, #16191	@ 0x3f3f
    mc_0_2  r12, 2, 6, 30, 22
 8000894:	ea0c 0e91 	and.w	lr, ip, r1, lsr #2
 8000898:	ea21 19bc 	bic.w	r9, r1, ip, ror #6
 800089c:	ea4e 1e89 	orr.w	lr, lr, r9, lsl #6
 80008a0:	ea81 243e 	eor.w	r4, r1, lr, ror #8
 80008a4:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80008a8:	f6c0 710f 	movt	r1, #3855	@ 0xf0f
 80008ac:	ea0c 059b 	and.w	r5, ip, fp, lsr #2
 80008b0:	ea2b 19bc 	bic.w	r9, fp, ip, ror #6
 80008b4:	ea45 1589 	orr.w	r5, r5, r9, lsl #6
 80008b8:	ea8b 2a35 	eor.w	sl, fp, r5, ror #8
 80008bc:	ea01 1b1a 	and.w	fp, r1, sl, lsr #4
 80008c0:	ea2a 1931 	bic.w	r9, sl, r1, ror #4
 80008c4:	ea4b 1b09 	orr.w	fp, fp, r9, lsl #4
 80008c8:	ea84 4b3b 	eor.w	fp, r4, fp, ror #16
 80008cc:	ea8b 2b35 	eor.w	fp, fp, r5, ror #8
 80008d0:	ea0c 0592 	and.w	r5, ip, r2, lsr #2
 80008d4:	ea22 19bc 	bic.w	r9, r2, ip, ror #6
 80008d8:	ea45 1589 	orr.w	r5, r5, r9, lsl #6
 80008dc:	ea82 2235 	eor.w	r2, r2, r5, ror #8
 80008e0:	ea8a 2a35 	eor.w	sl, sl, r5, ror #8
 80008e4:	ea01 1512 	and.w	r5, r1, r2, lsr #4
 80008e8:	ea22 1931 	bic.w	r9, r2, r1, ror #4
 80008ec:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
 80008f0:	ea8a 4a35 	eor.w	sl, sl, r5, ror #16
 80008f4:	ea8a 0a04 	eor.w	sl, sl, r4
 80008f8:	ea0c 0590 	and.w	r5, ip, r0, lsr #2
 80008fc:	ea20 19bc 	bic.w	r9, r0, ip, ror #6
 8000900:	ea45 1589 	orr.w	r5, r5, r9, lsl #6
 8000904:	ea80 2035 	eor.w	r0, r0, r5, ror #8
 8000908:	ea82 2935 	eor.w	r9, r2, r5, ror #8
 800090c:	ea01 1510 	and.w	r5, r1, r0, lsr #4
 8000910:	ea20 1231 	bic.w	r2, r0, r1, ror #4
 8000914:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
 8000918:	ea89 4935 	eor.w	r9, r9, r5, ror #16
 800091c:	ea0c 0598 	and.w	r5, ip, r8, lsr #2
 8000920:	ea28 12bc 	bic.w	r2, r8, ip, ror #6
 8000924:	ea45 1582 	orr.w	r5, r5, r2, lsl #6
 8000928:	ea88 2235 	eor.w	r2, r8, r5, ror #8
 800092c:	ea80 2835 	eor.w	r8, r0, r5, ror #8
 8000930:	ea01 1512 	and.w	r5, r1, r2, lsr #4
 8000934:	ea22 1031 	bic.w	r0, r2, r1, ror #4
 8000938:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
 800093c:	ea88 4835 	eor.w	r8, r8, r5, ror #16
 8000940:	ea88 0804 	eor.w	r8, r8, r4
 8000944:	ea0c 0597 	and.w	r5, ip, r7, lsr #2
 8000948:	ea27 10bc 	bic.w	r0, r7, ip, ror #6
 800094c:	ea45 1580 	orr.w	r5, r5, r0, lsl #6
 8000950:	ea87 2035 	eor.w	r0, r7, r5, ror #8
 8000954:	ea82 2735 	eor.w	r7, r2, r5, ror #8
 8000958:	ea01 1510 	and.w	r5, r1, r0, lsr #4
 800095c:	ea20 1231 	bic.w	r2, r0, r1, ror #4
 8000960:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
 8000964:	ea87 4735 	eor.w	r7, r7, r5, ror #16
 8000968:	ea87 0704 	eor.w	r7, r7, r4
 800096c:	ea0c 0596 	and.w	r5, ip, r6, lsr #2
 8000970:	ea26 12bc 	bic.w	r2, r6, ip, ror #6
 8000974:	ea45 1582 	orr.w	r5, r5, r2, lsl #6
 8000978:	ea86 2235 	eor.w	r2, r6, r5, ror #8
 800097c:	ea80 2635 	eor.w	r6, r0, r5, ror #8
 8000980:	ea01 1512 	and.w	r5, r1, r2, lsr #4
 8000984:	ea22 1031 	bic.w	r0, r2, r1, ror #4
 8000988:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
 800098c:	ea86 4635 	eor.w	r6, r6, r5, ror #16
 8000990:	ea0c 0593 	and.w	r5, ip, r3, lsr #2
 8000994:	ea23 10bc 	bic.w	r0, r3, ip, ror #6
 8000998:	ea45 1580 	orr.w	r5, r5, r0, lsl #6
 800099c:	ea83 2035 	eor.w	r0, r3, r5, ror #8
 80009a0:	ea82 2335 	eor.w	r3, r2, r5, ror #8
 80009a4:	ea01 1510 	and.w	r5, r1, r0, lsr #4
 80009a8:	ea20 1231 	bic.w	r2, r0, r1, ror #4
 80009ac:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
 80009b0:	ea83 4535 	eor.w	r5, r3, r5, ror #16
 80009b4:	ea80 2e3e 	eor.w	lr, r0, lr, ror #8
 80009b8:	ea01 1014 	and.w	r0, r1, r4, lsr #4
 80009bc:	ea24 1231 	bic.w	r2, r4, r1, ror #4
 80009c0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80009c4:	ea8e 4430 	eor.w	r4, lr, r0, ror #16
    ldr     r14, [sp, #52]          // restore link register
 80009c8:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
    bx      lr
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <mixcolumns_3>:
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 1.
* Based on Käsper-Schwabe, similar to https://github.com/Ko-/aes-armcortexm.
******************************************************************************/
.align 2
mixcolumns_3:
    eor     r12, r11, r11, ror #8   // r12<- S7 ^ (S7 >>> 8)
 80009d0:	ea8b 2c3b 	eor.w	ip, fp, fp, ror #8
    eor     r4, r1, r1, ror #8      // r4 <- S0 ^ (S0 >>> 8)
 80009d4:	ea81 2431 	eor.w	r4, r1, r1, ror #8
    eor     r11, r4, r11, ror #8    // r11<- S0 ^ (S0 >>> 8) ^ (S7 >>> 8)
 80009d8:	ea84 2b3b 	eor.w	fp, r4, fp, ror #8
    eor     r11, r11, r12, ror #16  // r11<- r11 ^ (S7 >>> 16) ^ (S7 >>> 24)
 80009dc:	ea8b 4b3c 	eor.w	fp, fp, ip, ror #16
    eor     r10, r12, r2, ror #8    // r10<- S7 ^ (S7 >>> 8) ^ (S6 >>> 8)
 80009e0:	ea8c 2a32 	eor.w	sl, ip, r2, ror #8
    eor     r12, r2, r2, ror #8     // r12<- S6 ^ (S6 >>> 8)
 80009e4:	ea82 2c32 	eor.w	ip, r2, r2, ror #8
    eor     r10, r10, r12, ror #16  // r10<- r10 ^ (S6 >>> 16) ^ (S6 >>> 24)
 80009e8:	ea8a 4a3c 	eor.w	sl, sl, ip, ror #16
    eor     r10, r4                 // r10<- r10 ^ S0 ^ (S0 >>> 8)
 80009ec:	ea8a 0a04 	eor.w	sl, sl, r4
    eor     r9, r12, r0, ror #8     // r9 <- S6 ^ (S6 >>> 8) ^ (S5 >>> 8)
 80009f0:	ea8c 2930 	eor.w	r9, ip, r0, ror #8
    eor     r12, r0, r0, ror #8     // r12<- S5 ^ (S5 >>> 8)
 80009f4:	ea80 2c30 	eor.w	ip, r0, r0, ror #8
    eor     r9, r9, r12, ror #16    // r9 <- r9 ^ (S5 >>> 16) ^ (S5 >>> 24)
 80009f8:	ea89 493c 	eor.w	r9, r9, ip, ror #16
    eor     r2, r8, r8, ror #8      // r2 <- S4 ^ (S4 >>> 8)
 80009fc:	ea88 2238 	eor.w	r2, r8, r8, ror #8
    eor     r8, r12, r8, ror #8     // r8 <- S5 ^ (S5 >>> 8) ^ (S4 >>> 8)
 8000a00:	ea8c 2838 	eor.w	r8, ip, r8, ror #8
    eor     r8, r4                  // r8 <- r8 ^ S0 ^ (S0 >>> 8)
 8000a04:	ea88 0804 	eor.w	r8, r8, r4
    eor     r8, r8, r2, ror #16     // r8 <- r8 ^ (S4 >>> 16) ^ (S4 >>> 24)
 8000a08:	ea88 4832 	eor.w	r8, r8, r2, ror #16
    eor     r12, r7, r7, ror #8     // r12<- S3 ^ (S3 >>> 8)
 8000a0c:	ea87 2c37 	eor.w	ip, r7, r7, ror #8
    eor     r7, r2, r7, ror #8      // r7 <- S4 ^ (S4 >>> 8) ^ (S3 >>> 8)
 8000a10:	ea82 2737 	eor.w	r7, r2, r7, ror #8
    eor     r7, r4                  // r7 <- r7 ^ S0 ^ (S0 >>> 8)
 8000a14:	ea87 0704 	eor.w	r7, r7, r4
    eor     r7, r7, r12, ror #16    // r7 <- r7 ^ (S3 >>> 16) ^ (S3 >>> 24)
 8000a18:	ea87 473c 	eor.w	r7, r7, ip, ror #16
    eor     r2, r6, r6, ror #8      // r2 <- S2 ^ (S2 >>> 8)
 8000a1c:	ea86 2236 	eor.w	r2, r6, r6, ror #8
    eor     r6, r12, r6, ror #8     // r6 <- S3 ^ (S3 >>> 8) ^ (S2 >>> 8)
 8000a20:	ea8c 2636 	eor.w	r6, ip, r6, ror #8
    eor     r6, r6, r2, ror #16     // r6 <- r6 ^ (S2 >>> 16) ^ (S2 >>> 24)
 8000a24:	ea86 4632 	eor.w	r6, r6, r2, ror #16
    eor     r12, r3, r3, ror #8     // r12<- S1 ^ (S1 >>> 8)
 8000a28:	ea83 2c33 	eor.w	ip, r3, r3, ror #8
    eor     r5, r2, r3, ror #8      // r5 <- S2 ^ (S2 >>> 8) ^ (S1 >>> 8)
 8000a2c:	ea82 2533 	eor.w	r5, r2, r3, ror #8
    eor     r5, r5, r12, ror #16    // r5 <- r5 ^ (S1 >>> 16) ^ (S1 >>> 24)
 8000a30:	ea85 453c 	eor.w	r5, r5, ip, ror #16
    eor     r4, r12, r4, ror #16    // r4 <- S1 ^ (S1 >>> 8) ^ (r4 >>> 16)
 8000a34:	ea8c 4434 	eor.w	r4, ip, r4, ror #16
    eor     r4, r4, r1, ror #8      // r4 <- r4 ^ (S0 >>> 8)
 8000a38:	ea84 2431 	eor.w	r4, r4, r1, ror #8
    bx      lr
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <double_shiftrows>:
/******************************************************************************
* Applies the ShiftRows transformation twice (i.e. SR^2) on the internal state.
******************************************************************************/
.align 2
double_shiftrows:
    movw    r10, #0x0f00
 8000a40:	f640 7a00 	movw	sl, #3840	@ 0xf00
    movt    r10, #0x0f00            // r10<- 0x0f000f00 (mask)
 8000a44:	f6c0 7a00 	movt	sl, #3840	@ 0xf00
    swpmv   r0, r0, r0, r0, r10, #4, r12
 8000a48:	ea80 1c10 	eor.w	ip, r0, r0, lsr #4
 8000a4c:	ea0c 0c0a 	and.w	ip, ip, sl
 8000a50:	ea80 000c 	eor.w	r0, r0, ip
 8000a54:	ea80 100c 	eor.w	r0, r0, ip, lsl #4
    swpmv   r1, r1, r1, r1, r10, #4, r12
 8000a58:	ea81 1c11 	eor.w	ip, r1, r1, lsr #4
 8000a5c:	ea0c 0c0a 	and.w	ip, ip, sl
 8000a60:	ea81 010c 	eor.w	r1, r1, ip
 8000a64:	ea81 110c 	eor.w	r1, r1, ip, lsl #4
    swpmv   r2, r2, r2, r2, r10, #4, r12
 8000a68:	ea82 1c12 	eor.w	ip, r2, r2, lsr #4
 8000a6c:	ea0c 0c0a 	and.w	ip, ip, sl
 8000a70:	ea82 020c 	eor.w	r2, r2, ip
 8000a74:	ea82 120c 	eor.w	r2, r2, ip, lsl #4
    swpmv   r3, r3, r3, r3, r10, #4, r12
 8000a78:	ea83 1c13 	eor.w	ip, r3, r3, lsr #4
 8000a7c:	ea0c 0c0a 	and.w	ip, ip, sl
 8000a80:	ea83 030c 	eor.w	r3, r3, ip
 8000a84:	ea83 130c 	eor.w	r3, r3, ip, lsl #4
    swpmv   r6, r6, r6, r6, r10, #4, r12
 8000a88:	ea86 1c16 	eor.w	ip, r6, r6, lsr #4
 8000a8c:	ea0c 0c0a 	and.w	ip, ip, sl
 8000a90:	ea86 060c 	eor.w	r6, r6, ip
 8000a94:	ea86 160c 	eor.w	r6, r6, ip, lsl #4
    swpmv   r7, r7, r7, r7, r10, #4, r12
 8000a98:	ea87 1c17 	eor.w	ip, r7, r7, lsr #4
 8000a9c:	ea0c 0c0a 	and.w	ip, ip, sl
 8000aa0:	ea87 070c 	eor.w	r7, r7, ip
 8000aa4:	ea87 170c 	eor.w	r7, r7, ip, lsl #4
    swpmv   r8, r8, r8, r8, r10, #4, r12
 8000aa8:	ea88 1c18 	eor.w	ip, r8, r8, lsr #4
 8000aac:	ea0c 0c0a 	and.w	ip, ip, sl
 8000ab0:	ea88 080c 	eor.w	r8, r8, ip
 8000ab4:	ea88 180c 	eor.w	r8, r8, ip, lsl #4
    swpmv   r11, r11, r11, r11, r10, #4, r12
 8000ab8:	ea8b 1c1b 	eor.w	ip, fp, fp, lsr #4
 8000abc:	ea0c 0c0a 	and.w	ip, ip, sl
 8000ac0:	ea8b 0b0c 	eor.w	fp, fp, ip
 8000ac4:	ea8b 1b0c 	eor.w	fp, fp, ip, lsl #4
    bx      lr
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <double_shiftrows_change>:
* Applies the ShiftRows transformation twice (i.e. SR^2) on the internal state.
******************************************************************************/
.align 2
double_shiftrows_change:
    //movw    r10, #0x0f00
    movt    r10, #0x0f00            // r10<- 0x0f000f00 (mask)
 8000acc:	f6c0 7a00 	movt	sl, #3840	@ 0xf00
    //swpmv   r0, r0, r0, r0, r10, #4, r12
    //swpmv   r1, r1, r1, r1, r10, #4, r12
    swpmv   r2, r2, r2, r2, r10, #4, r12
 8000ad0:	ea82 1c12 	eor.w	ip, r2, r2, lsr #4
 8000ad4:	ea0c 0c0a 	and.w	ip, ip, sl
 8000ad8:	ea82 020c 	eor.w	r2, r2, ip
 8000adc:	ea82 120c 	eor.w	r2, r2, ip, lsl #4

    swpmv   r6, r6, r6, r6, r10, #4, r12
    swpmv   r7, r7, r7, r7, r10, #4, r12
    swpmv   r8, r8, r8, r8, r10, #4, r12
    swpmv   r11, r11, r11, r11, r10, #4, r12*/
    bx      lr
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <aes128_encrypt_ffs>:
@                   const u8* ptext_bis, const u32* rkey);
.global aes128_encrypt_ffs
.type   aes128_encrypt_ffs,%function
.align 2
aes128_encrypt_ffs:
    push    {r0-r12,r14}
 8000ae4:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8000ae8:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 8000aec:	f8d2 4000 	ldr.w	r4, [r2]
    ldr     r5, [r2, #4]
 8000af0:	6855      	ldr	r5, [r2, #4]
    ldr     r6, [r2, #8]
 8000af2:	6896      	ldr	r6, [r2, #8]
    ldr     r7, [r2, #12]
 8000af4:	68d7      	ldr	r7, [r2, #12]
    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 8000af6:	f8d3 8000 	ldr.w	r8, [r3]
    ldr     r9, [r3, #4]
 8000afa:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ldr     r10,[r3, #8]
 8000afe:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ldr     r11,[r3, #12]
 8000b02:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 8000b06:	f8dd 1070 	ldr.w	r1, [sp, #112]	@ 0x70
    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 8000b0a:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    bl      packing                 // pack the 2 input blocks
 8000b0e:	f7ff fb7f 	bl	8000210 <packing>
    bl      ark_sbox                // ark + sbox (round 0)
 8000b12:	f7ff fc6d 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 0)
 8000b16:	f7ff fda1 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 1)
 8000b1a:	f7ff fc69 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 1)
 8000b1e:	f7ff fe41 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 2)
 8000b22:	f7ff fc65 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 2)
 8000b26:	f7ff feaf 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 3)
 8000b2a:	f7ff fc61 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 3)
 8000b2e:	f7ff ff4f 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 4)
 8000b32:	f7ff fc5d 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 4)
 8000b36:	f7ff fd91 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 5)
 8000b3a:	f7ff fc59 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 5)
 8000b3e:	f7ff fe31 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 6)
 8000b42:	f7ff fc55 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 6)
 8000b46:	f7ff fe9f 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 7)
 8000b4a:	f7ff fc51 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 7)
 8000b4e:	f7ff ff3f 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 8)
 8000b52:	f7ff fc4d 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 8)
 8000b56:	f7ff fd81 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 9)
 8000b5a:	f7ff fc49 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000b5e:	f7ff ff6f 	bl	8000a40 <double_shiftrows>
    ldr     r14, [sp, #48]          // ---------------------------------------
 8000b62:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
    ldmia   r14!, {r4,r5,r10,r12}   // 
 8000b66:	e8be 1430 	ldmia.w	lr!, {r4, r5, sl, ip}
    eor     r4, r1                  // 
 8000b6a:	ea84 0401 	eor.w	r4, r4, r1
    eor     r5, r3                  // 
 8000b6e:	ea85 0503 	eor.w	r5, r5, r3
    eor     r6, r10                 // 
 8000b72:	ea86 060a 	eor.w	r6, r6, sl
    eor     r7, r12                 //  Last add_round_key
 8000b76:	ea87 070c 	eor.w	r7, r7, ip
    ldmia   r14!, {r1,r3,r10,r12}   // 
 8000b7a:	e8be 140a 	ldmia.w	lr!, {r1, r3, sl, ip}
    eor     r8, r1                  // 
 8000b7e:	ea88 0801 	eor.w	r8, r8, r1
    eor     r9, r0, r3              // 
 8000b82:	ea80 0903 	eor.w	r9, r0, r3
    eor     r10, r2                 // 
 8000b86:	ea8a 0a02 	eor.w	sl, sl, r2
    eor     r11, r12                // ---------------------------------------
 8000b8a:	ea8b 0b0c 	eor.w	fp, fp, ip
    bl      unpacking               // unpack the internal state
 8000b8e:	f7ff fba9 	bl	80002e4 <unpacking>
    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 8000b92:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    add.w   sp, #64                 // restore the stack pointer
 8000b96:	f10d 0d40 	add.w	sp, sp, #64	@ 0x40
    str.w   r4, [r0]                // store the ciphertext
 8000b9a:	f8c0 4000 	str.w	r4, [r0]
    str     r5, [r0, #4]
 8000b9e:	6045      	str	r5, [r0, #4]
    str     r6, [r0, #8]
 8000ba0:	6086      	str	r6, [r0, #8]
    str     r7, [r0, #12]
 8000ba2:	60c7      	str	r7, [r0, #12]
    str.w   r8, [r1]                // store the ciphertext
 8000ba4:	f8c1 8000 	str.w	r8, [r1]
    str     r9, [r1, #4]
 8000ba8:	f8c1 9004 	str.w	r9, [r1, #4]
    str     r10,[r1, #8]
 8000bac:	f8c1 a008 	str.w	sl, [r1, #8]
    str     r11,[r1, #12]
 8000bb0:	f8c1 b00c 	str.w	fp, [r1, #12]
    pop     {r2-r12, r14}           // restore context
 8000bb4:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <two_Rounds_aes128_encrypt_ffs>:
@                   const u8* ptext_bis, const u32* rkey);
.global two_Rounds_aes128_encrypt_ffs
.type   two_Rounds_aes128_encrypt_ffs,%function
.align 2
two_Rounds_aes128_encrypt_ffs:
     push    {r0-r12,r14}
 8000bbc:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8000bc0:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 8000bc4:	f8d2 4000 	ldr.w	r4, [r2]
    ldr     r5, [r2, #4]
 8000bc8:	6855      	ldr	r5, [r2, #4]
    ldr     r6, [r2, #8]
 8000bca:	6896      	ldr	r6, [r2, #8]
    ldr     r7, [r2, #12]
 8000bcc:	68d7      	ldr	r7, [r2, #12]
    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 8000bce:	f8d3 8000 	ldr.w	r8, [r3]
    ldr     r9, [r3, #4]
 8000bd2:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ldr     r10,[r3, #8]
 8000bd6:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ldr     r11,[r3, #12]
 8000bda:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 8000bde:	f8dd 1070 	ldr.w	r1, [sp, #112]	@ 0x70
    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 8000be2:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    bl      packing                 // pack the 2 input blocks
 8000be6:	f7ff fb13 	bl	8000210 <packing>
    bl      ark_sbox                // ark + sbox (round 0)
 8000bea:	f7ff fc01 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 0)
 8000bee:	f7ff fd35 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 1)
 8000bf2:	f7ff fbfd 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 1)
 8000bf6:	f7ff fdd5 	bl	80007a4 <mixcolumns_1>
    bl      ark                // ark + sbox (round 2)
 8000bfa:	f7ff fbdd 	bl	80003b8 <ark>
    ldmia   r14!, {r1,r3,r10,r12}   //
    eor     r8, r1                  //
    eor     r9, r0, r3              //
    eor     r10, r2                 //
    eor     r11, r12                // ---------------------------------------*/
    bl      unpacking               // unpack the internal state
 8000bfe:	f7ff fb71 	bl	80002e4 <unpacking>
    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 8000c02:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    add.w   sp, #64                 // restore the stack pointer
 8000c06:	f10d 0d40 	add.w	sp, sp, #64	@ 0x40
    str.w   r4, [r0]                // store the ciphertext
 8000c0a:	f8c0 4000 	str.w	r4, [r0]
    str     r5, [r0, #4]
 8000c0e:	6045      	str	r5, [r0, #4]
    str     r6, [r0, #8]
 8000c10:	6086      	str	r6, [r0, #8]
    str     r7, [r0, #12]
 8000c12:	60c7      	str	r7, [r0, #12]
    str.w   r8, [r1]                // store the ciphertext
 8000c14:	f8c1 8000 	str.w	r8, [r1]
    str     r9, [r1, #4]
 8000c18:	f8c1 9004 	str.w	r9, [r1, #4]
    str     r10,[r1, #8]
 8000c1c:	f8c1 a008 	str.w	sl, [r1, #8]
    str     r11,[r1, #12]
 8000c20:	f8c1 b00c 	str.w	fp, [r1, #12]
    pop     {r2-r12, r14}           // restore context
 8000c24:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <four_Rounds_aes128_encrypt_ffs>:
@                   const u8* ptext_bis, const u32* rkey);
.global four_Rounds_aes128_encrypt_ffs
.type   four_Rounds_aes128_encrypt_ffs,%function
.align 2
four_Rounds_aes128_encrypt_ffs:
    push    {r0-r12,r14}
 8000c2c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8000c30:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 8000c34:	f8d2 4000 	ldr.w	r4, [r2]
    ldr     r5, [r2, #4]
 8000c38:	6855      	ldr	r5, [r2, #4]
    ldr     r6, [r2, #8]
 8000c3a:	6896      	ldr	r6, [r2, #8]
    ldr     r7, [r2, #12]
 8000c3c:	68d7      	ldr	r7, [r2, #12]
    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 8000c3e:	f8d3 8000 	ldr.w	r8, [r3]
    ldr     r9, [r3, #4]
 8000c42:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ldr     r10,[r3, #8]
 8000c46:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ldr     r11,[r3, #12]
 8000c4a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 8000c4e:	f8dd 1070 	ldr.w	r1, [sp, #112]	@ 0x70
    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 8000c52:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    bl      packing                 // pack the 2 input blocks
 8000c56:	f7ff fadb 	bl	8000210 <packing>
    bl      ark_sbox                // ark + sbox (round 0)
 8000c5a:	f7ff fbc9 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 0)
 8000c5e:	f7ff fcfd 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 1)
 8000c62:	f7ff fbc5 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 1)
 8000c66:	f7ff fd9d 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 2)
 8000c6a:	f7ff fbc1 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 2)
 8000c6e:	f7ff fe0b 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 3)
 8000c72:	f7ff fbbd 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 3)
 8000c76:	f7ff feab 	bl	80009d0 <mixcolumns_3>
    bl      ark                // ark + sbox (round 2)
 8000c7a:	f7ff fb9d 	bl	80003b8 <ark>
    bl      unpacking               // unpack the internal state
 8000c7e:	f7ff fb31 	bl	80002e4 <unpacking>
    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 8000c82:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    add.w   sp, #64                 // restore the stack pointer
 8000c86:	f10d 0d40 	add.w	sp, sp, #64	@ 0x40
    str.w   r4, [r0]                // store the ciphertext
 8000c8a:	f8c0 4000 	str.w	r4, [r0]
    str     r5, [r0, #4]
 8000c8e:	6045      	str	r5, [r0, #4]
    str     r6, [r0, #8]
 8000c90:	6086      	str	r6, [r0, #8]
    str     r7, [r0, #12]
 8000c92:	60c7      	str	r7, [r0, #12]
    str.w   r8, [r1]                // store the ciphertext
 8000c94:	f8c1 8000 	str.w	r8, [r1]
    str     r9, [r1, #4]
 8000c98:	f8c1 9004 	str.w	r9, [r1, #4]
    str     r10,[r1, #8]
 8000c9c:	f8c1 a008 	str.w	sl, [r1, #8]
    str     r11,[r1, #12]
 8000ca0:	f8c1 b00c 	str.w	fp, [r1, #12]
    pop     {r2-r12, r14}           // restore context
 8000ca4:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <six_Rounds_aes128_encrypt_ffs>:
@                   const u8* ptext_bis, const u32* rkey);
.global six_Rounds_aes128_encrypt_ffs
.type   six_Rounds_aes128_encrypt_ffs,%function
.align 2
six_Rounds_aes128_encrypt_ffs:
    push    {r0-r12,r14}
 8000cac:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8000cb0:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 8000cb4:	f8d2 4000 	ldr.w	r4, [r2]
    ldr     r5, [r2, #4]
 8000cb8:	6855      	ldr	r5, [r2, #4]
    ldr     r6, [r2, #8]
 8000cba:	6896      	ldr	r6, [r2, #8]
    ldr     r7, [r2, #12]
 8000cbc:	68d7      	ldr	r7, [r2, #12]
    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 8000cbe:	f8d3 8000 	ldr.w	r8, [r3]
    ldr     r9, [r3, #4]
 8000cc2:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ldr     r10,[r3, #8]
 8000cc6:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ldr     r11,[r3, #12]
 8000cca:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 8000cce:	f8dd 1070 	ldr.w	r1, [sp, #112]	@ 0x70
    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 8000cd2:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    bl      packing                 // pack the 2 input blocks
 8000cd6:	f7ff fa9b 	bl	8000210 <packing>
    bl      ark_sbox                // ark + sbox (round 0)
 8000cda:	f7ff fb89 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 0)
 8000cde:	f7ff fcbd 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 1)
 8000ce2:	f7ff fb85 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 1)
 8000ce6:	f7ff fd5d 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 2)
 8000cea:	f7ff fb81 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 2)
 8000cee:	f7ff fdcb 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 3)
 8000cf2:	f7ff fb7d 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 3)
 8000cf6:	f7ff fe6b 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 4)
 8000cfa:	f7ff fb79 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 4)
 8000cfe:	f7ff fcad 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 5)
 8000d02:	f7ff fb75 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 5)
 8000d06:	f7ff fd4d 	bl	80007a4 <mixcolumns_1>
    bl      ark                		// ark + sbox (round 2)
 8000d0a:	f7ff fb55 	bl	80003b8 <ark>
    //bl      double_shiftrows        // to resynchronize with the classical rep
    bl      unpacking               // unpack the internal state
 8000d0e:	f7ff fae9 	bl	80002e4 <unpacking>
    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 8000d12:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    add.w   sp, #64                 // restore the stack pointer
 8000d16:	f10d 0d40 	add.w	sp, sp, #64	@ 0x40
    str.w   r4, [r0]                // store the ciphertext
 8000d1a:	f8c0 4000 	str.w	r4, [r0]
    str     r5, [r0, #4]
 8000d1e:	6045      	str	r5, [r0, #4]
    str     r6, [r0, #8]
 8000d20:	6086      	str	r6, [r0, #8]
    str     r7, [r0, #12]
 8000d22:	60c7      	str	r7, [r0, #12]
    str.w   r8, [r1]                // store the ciphertext
 8000d24:	f8c1 8000 	str.w	r8, [r1]
    str     r9, [r1, #4]
 8000d28:	f8c1 9004 	str.w	r9, [r1, #4]
    str     r10,[r1, #8]
 8000d2c:	f8c1 a008 	str.w	sl, [r1, #8]
    str     r11,[r1, #12]
 8000d30:	f8c1 b00c 	str.w	fp, [r1, #12]
    pop     {r2-r12, r14}           // restore context
 8000d34:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <eigth_Rounds_aes128_encrypt_ffs>:
@                   const u8* ptext_bis, const u32* rkey);
.global eigth_Rounds_aes128_encrypt_ffs
.type   eigth_Rounds_aes128_encrypt_ffs,%function
.align 2
eigth_Rounds_aes128_encrypt_ffs:
    push    {r0-r12,r14}
 8000d3c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8000d40:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 8000d44:	f8d2 4000 	ldr.w	r4, [r2]
    ldr     r5, [r2, #4]
 8000d48:	6855      	ldr	r5, [r2, #4]
    ldr     r6, [r2, #8]
 8000d4a:	6896      	ldr	r6, [r2, #8]
    ldr     r7, [r2, #12]
 8000d4c:	68d7      	ldr	r7, [r2, #12]
    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 8000d4e:	f8d3 8000 	ldr.w	r8, [r3]
    ldr     r9, [r3, #4]
 8000d52:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ldr     r10,[r3, #8]
 8000d56:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ldr     r11,[r3, #12]
 8000d5a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 8000d5e:	f8dd 1070 	ldr.w	r1, [sp, #112]	@ 0x70
    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 8000d62:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    bl      packing                 // pack the 2 input blocks
 8000d66:	f7ff fa53 	bl	8000210 <packing>
    bl      ark_sbox                // ark + sbox (round 0)
 8000d6a:	f7ff fb41 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 0)
 8000d6e:	f7ff fc75 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 1)
 8000d72:	f7ff fb3d 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 1)
 8000d76:	f7ff fd15 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 2)
 8000d7a:	f7ff fb39 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 2)
 8000d7e:	f7ff fd83 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 3)
 8000d82:	f7ff fb35 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 3)
 8000d86:	f7ff fe23 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 4)
 8000d8a:	f7ff fb31 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 4)
 8000d8e:	f7ff fc65 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 5)
 8000d92:	f7ff fb2d 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 5)
 8000d96:	f7ff fd05 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 6)
 8000d9a:	f7ff fb29 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 6)
 8000d9e:	f7ff fd73 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 7)
 8000da2:	f7ff fb25 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 7)
 8000da6:	f7ff fe13 	bl	80009d0 <mixcolumns_3>
    bl      ark                // ark + sbox (round 2)
 8000daa:	f7ff fb05 	bl	80003b8 <ark>
    bl      unpacking               // unpack the internal state
 8000dae:	f7ff fa99 	bl	80002e4 <unpacking>
    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 8000db2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    add.w   sp, #64                 // restore the stack pointer
 8000db6:	f10d 0d40 	add.w	sp, sp, #64	@ 0x40
    str.w   r4, [r0]                // store the ciphertext
 8000dba:	f8c0 4000 	str.w	r4, [r0]
    str     r5, [r0, #4]
 8000dbe:	6045      	str	r5, [r0, #4]
    str     r6, [r0, #8]
 8000dc0:	6086      	str	r6, [r0, #8]
    str     r7, [r0, #12]
 8000dc2:	60c7      	str	r7, [r0, #12]
    str.w   r8, [r1]                // store the ciphertext
 8000dc4:	f8c1 8000 	str.w	r8, [r1]
    str     r9, [r1, #4]
 8000dc8:	f8c1 9004 	str.w	r9, [r1, #4]
    str     r10,[r1, #8]
 8000dcc:	f8c1 a008 	str.w	sl, [r1, #8]
    str     r11,[r1, #12]
 8000dd0:	f8c1 b00c 	str.w	fp, [r1, #12]
    pop     {r2-r12, r14}           // restore context
 8000dd4:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <aes256_encrypt_ffs>:
@                   const u8* ptext_bis, const u32* rkey);
.global aes256_encrypt_ffs
.type   aes256_encrypt_ffs,%function
.align 2
aes256_encrypt_ffs:
    push    {r0-r12,r14}
 8000ddc:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8000de0:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 8000de4:	f8d2 4000 	ldr.w	r4, [r2]
    ldr     r5, [r2, #4]
 8000de8:	6855      	ldr	r5, [r2, #4]
    ldr     r6, [r2, #8]
 8000dea:	6896      	ldr	r6, [r2, #8]
    ldr     r7, [r2, #12]
 8000dec:	68d7      	ldr	r7, [r2, #12]
    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 8000dee:	f8d3 8000 	ldr.w	r8, [r3]
    ldr     r9, [r3, #4]
 8000df2:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ldr     r10,[r3, #8]
 8000df6:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ldr     r11,[r3, #12]
 8000dfa:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 8000dfe:	f8dd 1070 	ldr.w	r1, [sp, #112]	@ 0x70
    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 8000e02:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    bl      packing                 // pack the 2 input blocks
 8000e06:	f7ff fa03 	bl	8000210 <packing>
    bl      ark_sbox                // ark + sbox (round 0)
 8000e0a:	f7ff faf1 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 0)
 8000e0e:	f7ff fc25 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 1)
 8000e12:	f7ff faed 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 1)
 8000e16:	f7ff fcc5 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 2)
 8000e1a:	f7ff fae9 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 2)
 8000e1e:	f7ff fd33 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 3)
 8000e22:	f7ff fae5 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 3)
 8000e26:	f7ff fdd3 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 4)
 8000e2a:	f7ff fae1 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 4)
 8000e2e:	f7ff fc15 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 5)
 8000e32:	f7ff fadd 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 5)
 8000e36:	f7ff fcb5 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 6)
 8000e3a:	f7ff fad9 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 6)
 8000e3e:	f7ff fd23 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 7)
 8000e42:	f7ff fad5 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 7)
 8000e46:	f7ff fdc3 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 8)
 8000e4a:	f7ff fad1 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 8)
 8000e4e:	f7ff fc05 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 9)
 8000e52:	f7ff facd 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 9)
 8000e56:	f7ff fca5 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 10)
 8000e5a:	f7ff fac9 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 10)
 8000e5e:	f7ff fd13 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 11)
 8000e62:	f7ff fac5 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 11)
 8000e66:	f7ff fdb3 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 12)
 8000e6a:	f7ff fac1 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 12)
 8000e6e:	f7ff fbf5 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 13)
 8000e72:	f7ff fabd 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000e76:	f7ff fde3 	bl	8000a40 <double_shiftrows>
    ldr     r14, [sp, #48]          // ---------------------------------------
 8000e7a:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
    ldmia   r14!, {r4,r5,r10,r12}   // 
 8000e7e:	e8be 1430 	ldmia.w	lr!, {r4, r5, sl, ip}
    eor     r4, r1                  // 
 8000e82:	ea84 0401 	eor.w	r4, r4, r1
    eor     r5, r3                  // 
 8000e86:	ea85 0503 	eor.w	r5, r5, r3
    eor     r6, r10                 // 
 8000e8a:	ea86 060a 	eor.w	r6, r6, sl
    eor     r7, r12                 //  Last add_round_key
 8000e8e:	ea87 070c 	eor.w	r7, r7, ip
    ldmia   r14!, {r1,r3,r10,r12}   // 
 8000e92:	e8be 140a 	ldmia.w	lr!, {r1, r3, sl, ip}
    eor     r8, r1                  // 
 8000e96:	ea88 0801 	eor.w	r8, r8, r1
    eor     r9, r0, r3              // 
 8000e9a:	ea80 0903 	eor.w	r9, r0, r3
    eor     r10, r2                 // 
 8000e9e:	ea8a 0a02 	eor.w	sl, sl, r2
    eor     r11, r12                // ---------------------------------------
 8000ea2:	ea8b 0b0c 	eor.w	fp, fp, ip
    bl      unpacking               // unpack the internal state
 8000ea6:	f7ff fa1d 	bl	80002e4 <unpacking>
    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 8000eaa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    add.w   sp, #64                 // restore the stack pointer
 8000eae:	f10d 0d40 	add.w	sp, sp, #64	@ 0x40
    str.w   r4, [r0]                // store the ciphertext
 8000eb2:	f8c0 4000 	str.w	r4, [r0]
    str     r5, [r0, #4]
 8000eb6:	6045      	str	r5, [r0, #4]
    str     r6, [r0, #8]
 8000eb8:	6086      	str	r6, [r0, #8]
    str     r7, [r0, #12]
 8000eba:	60c7      	str	r7, [r0, #12]
    str.w   r8, [r1]                // store the ciphertext
 8000ebc:	f8c1 8000 	str.w	r8, [r1]
    str     r9, [r1, #4]
 8000ec0:	f8c1 9004 	str.w	r9, [r1, #4]
    str     r10,[r1, #8]
 8000ec4:	f8c1 a008 	str.w	sl, [r1, #8]
    str     r11,[r1, #12]
 8000ec8:	f8c1 b00c 	str.w	fp, [r1, #12]
    pop     {r2-r12, r14}           // restore context
 8000ecc:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <aes128_encrypt_sfs>:
@                   const u8* ptext_bis, const u32* rkey);
.global aes128_encrypt_sfs
.type   aes128_encrypt_sfs,%function
.align 2
aes128_encrypt_sfs:
    push    {r0-r12,r14}
 8000ed4:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8000ed8:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 8000edc:	f8d2 4000 	ldr.w	r4, [r2]
    ldr     r5, [r2, #4]
 8000ee0:	6855      	ldr	r5, [r2, #4]
    ldr     r6, [r2, #8]
 8000ee2:	6896      	ldr	r6, [r2, #8]
    ldr     r7, [r2, #12]
 8000ee4:	68d7      	ldr	r7, [r2, #12]
    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 8000ee6:	f8d3 8000 	ldr.w	r8, [r3]
    ldr     r9, [r3, #4]
 8000eea:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ldr     r10,[r3, #8]
 8000eee:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ldr     r11,[r3, #12]
 8000ef2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 8000ef6:	f8dd 1070 	ldr.w	r1, [sp, #112]	@ 0x70
    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 8000efa:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    bl      packing                 // pack the 2 input blocks
 8000efe:	f7ff f987 	bl	8000210 <packing>
    bl      ark_sbox                // ark + sbox (round 0)
 8000f02:	f7ff fa75 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 0)
 8000f06:	f7ff fba9 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 1)
 8000f0a:	f7ff fa71 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000f0e:	f7ff fd97 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 1)
 8000f12:	f7ff fd5d 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 2)
 8000f16:	f7ff fa6b 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 2)
 8000f1a:	f7ff fb9f 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 3)
 8000f1e:	f7ff fa67 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000f22:	f7ff fd8d 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 3)
 8000f26:	f7ff fd53 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 4)
 8000f2a:	f7ff fa61 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 4)
 8000f2e:	f7ff fb95 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 5)
 8000f32:	f7ff fa5d 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000f36:	f7ff fd83 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 5)
 8000f3a:	f7ff fd49 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 6)
 8000f3e:	f7ff fa57 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 6)
 8000f42:	f7ff fb8b 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 7)
 8000f46:	f7ff fa53 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000f4a:	f7ff fd79 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 7)
 8000f4e:	f7ff fd3f 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 8)
 8000f52:	f7ff fa4d 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 8)
 8000f56:	f7ff fb81 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 9)
 8000f5a:	f7ff fa49 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000f5e:	f7ff fd6f 	bl	8000a40 <double_shiftrows>
    ldr     r14, [sp, #48]          // ---------------------------------------
 8000f62:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
    ldmia   r14!, {r4,r5,r10,r12}   // 
 8000f66:	e8be 1430 	ldmia.w	lr!, {r4, r5, sl, ip}
    eor     r4, r1                  // 
 8000f6a:	ea84 0401 	eor.w	r4, r4, r1
    eor     r5, r3                  // 
 8000f6e:	ea85 0503 	eor.w	r5, r5, r3
    eor     r6, r10                 // 
 8000f72:	ea86 060a 	eor.w	r6, r6, sl
    eor     r7, r12                 //  Last add_round_key
 8000f76:	ea87 070c 	eor.w	r7, r7, ip
    ldmia   r14!, {r1,r3,r10,r12}   // 
 8000f7a:	e8be 140a 	ldmia.w	lr!, {r1, r3, sl, ip}
    eor     r8, r1                  // 
 8000f7e:	ea88 0801 	eor.w	r8, r8, r1
    eor     r9, r0, r3              // 
 8000f82:	ea80 0903 	eor.w	r9, r0, r3
    eor     r10, r2                 // 
 8000f86:	ea8a 0a02 	eor.w	sl, sl, r2
    eor     r11, r12                // ---------------------------------------
 8000f8a:	ea8b 0b0c 	eor.w	fp, fp, ip
    bl      unpacking               // unpack the internal state
 8000f8e:	f7ff f9a9 	bl	80002e4 <unpacking>
    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 8000f92:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    add.w   sp, #64                 // restore the stack pointer
 8000f96:	f10d 0d40 	add.w	sp, sp, #64	@ 0x40
    str.w   r4, [r0]                // store the ciphertext
 8000f9a:	f8c0 4000 	str.w	r4, [r0]
    str     r5, [r0, #4]
 8000f9e:	6045      	str	r5, [r0, #4]
    str     r6, [r0, #8]
 8000fa0:	6086      	str	r6, [r0, #8]
    str     r7, [r0, #12]
 8000fa2:	60c7      	str	r7, [r0, #12]
    str.w   r8, [r1]                // store the ciphertext
 8000fa4:	f8c1 8000 	str.w	r8, [r1]
    str     r9, [r1, #4]
 8000fa8:	f8c1 9004 	str.w	r9, [r1, #4]
    str     r10,[r1, #8]
 8000fac:	f8c1 a008 	str.w	sl, [r1, #8]
    str     r11,[r1, #12]
 8000fb0:	f8c1 b00c 	str.w	fp, [r1, #12]
    pop     {r2-r12, r14}           // restore context
 8000fb4:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <aes256_encrypt_sfs>:
@                   const u8* ptext_bis, const u32* rkey);
.global aes256_encrypt_sfs
.type   aes256_encrypt_sfs,%function
.align 2
aes256_encrypt_sfs:
    push    {r0-r12,r14}
 8000fbc:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8000fc0:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 8000fc4:	f8d2 4000 	ldr.w	r4, [r2]
    ldr     r5, [r2, #4]
 8000fc8:	6855      	ldr	r5, [r2, #4]
    ldr     r6, [r2, #8]
 8000fca:	6896      	ldr	r6, [r2, #8]
    ldr     r7, [r2, #12]
 8000fcc:	68d7      	ldr	r7, [r2, #12]
    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 8000fce:	f8d3 8000 	ldr.w	r8, [r3]
    ldr     r9, [r3, #4]
 8000fd2:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ldr     r10,[r3, #8]
 8000fd6:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ldr     r11,[r3, #12]
 8000fda:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 8000fde:	f8dd 1070 	ldr.w	r1, [sp, #112]	@ 0x70
    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 8000fe2:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    bl      packing                 // pack the 2 input blocks
 8000fe6:	f7ff f913 	bl	8000210 <packing>
    bl      ark_sbox                // ark + sbox (round 0)
 8000fea:	f7ff fa01 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 0)
 8000fee:	f7ff fb35 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 1)
 8000ff2:	f7ff f9fd 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000ff6:	f7ff fd23 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 1)
 8000ffa:	f7ff fce9 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 2)
 8000ffe:	f7ff f9f7 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 2)
 8001002:	f7ff fb2b 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 3)
 8001006:	f7ff f9f3 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 800100a:	f7ff fd19 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 3)
 800100e:	f7ff fcdf 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 4)
 8001012:	f7ff f9ed 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 4)
 8001016:	f7ff fb21 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 5)
 800101a:	f7ff f9e9 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 800101e:	f7ff fd0f 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 5)
 8001022:	f7ff fcd5 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 6)
 8001026:	f7ff f9e3 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 6)
 800102a:	f7ff fb17 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 7)
 800102e:	f7ff f9df 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8001032:	f7ff fd05 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 7)
 8001036:	f7ff fccb 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 8)
 800103a:	f7ff f9d9 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 8)
 800103e:	f7ff fb0d 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 9)
 8001042:	f7ff f9d5 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8001046:	f7ff fcfb 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 9)
 800104a:	f7ff fcc1 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 10)
 800104e:	f7ff f9cf 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 10)
 8001052:	f7ff fb03 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 11)
 8001056:	f7ff f9cb 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 800105a:	f7ff fcf1 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 11)
 800105e:	f7ff fcb7 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 12)
 8001062:	f7ff f9c5 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 12)
 8001066:	f7ff faf9 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 13)
 800106a:	f7ff f9c1 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 800106e:	f7ff fce7 	bl	8000a40 <double_shiftrows>
    ldr     r14, [sp, #48]          // ---------------------------------------
 8001072:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
    ldmia   r14!, {r4,r5,r10,r12}   // 
 8001076:	e8be 1430 	ldmia.w	lr!, {r4, r5, sl, ip}
    eor     r4, r1                  // 
 800107a:	ea84 0401 	eor.w	r4, r4, r1
    eor     r5, r3                  // 
 800107e:	ea85 0503 	eor.w	r5, r5, r3
    eor     r6, r10                 // 
 8001082:	ea86 060a 	eor.w	r6, r6, sl
    eor     r7, r12                 //  Last add_round_key
 8001086:	ea87 070c 	eor.w	r7, r7, ip
    ldmia   r14!, {r1,r3,r10,r12}   // 
 800108a:	e8be 140a 	ldmia.w	lr!, {r1, r3, sl, ip}
    eor     r8, r1                  // 
 800108e:	ea88 0801 	eor.w	r8, r8, r1
    eor     r9, r0, r3              // 
 8001092:	ea80 0903 	eor.w	r9, r0, r3
    eor     r10, r2                 // 
 8001096:	ea8a 0a02 	eor.w	sl, sl, r2
    eor     r11, r12                // ---------------------------------------
 800109a:	ea8b 0b0c 	eor.w	fp, fp, ip
    bl      unpacking               // unpack the internal state
 800109e:	f7ff f921 	bl	80002e4 <unpacking>
    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 80010a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    add.w   sp, #64                 // restore the stack pointer
 80010a6:	f10d 0d40 	add.w	sp, sp, #64	@ 0x40
    str.w   r4, [r0]                // store the ciphertext
 80010aa:	f8c0 4000 	str.w	r4, [r0]
    str     r5, [r0, #4]
 80010ae:	6045      	str	r5, [r0, #4]
    str     r6, [r0, #8]
 80010b0:	6086      	str	r6, [r0, #8]
    str     r7, [r0, #12]
 80010b2:	60c7      	str	r7, [r0, #12]
    str.w   r8, [r1]                // store the ciphertext
 80010b4:	f8c1 8000 	str.w	r8, [r1]
    str     r9, [r1, #4]
 80010b8:	f8c1 9004 	str.w	r9, [r1, #4]
    str     r10,[r1, #8]
 80010bc:	f8c1 a008 	str.w	sl, [r1, #8]
    str     r11,[r1, #12]
 80010c0:	f8c1 b00c 	str.w	fp, [r1, #12]
    pop     {r2-r12, r14}           // restore context
 80010c4:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <AES_Sbox_compact>:
 80010cc:	7c63 7b77 6bf2 c56f 0130 2b67 d7fe 76ab     c|w{.ko.0.g+...v
 80010dc:	82ca 7dc9 59fa f047 d4ad afa2 a49c c072     ...}.YG.......r.
 80010ec:	fdb7 2693 3f36 ccf7 a534 f1e5 d871 1531     ...&6?..4...q.1.
 80010fc:	c704 c323 9618 9a05 1207 e280 27eb 75b2     ..#..........'.u
 800110c:	8309 1a2c 6e1b a05a 3b52 b3d6 e329 842f     ..,..nZ.R;..)./.
 800111c:	d153 ed00 fc20 5bb1 cb6a 39be 4c4a cf58     S... ..[j..9JLX.
 800112c:	efd0 fbaa 4d43 8533 f945 7f02 3c50 a89f     ....CM3.E...P<..
 800113c:	a351 8f40 9d92 f538 b6bc 21da ff10 d2f3     Q.@...8....!....
 800114c:	0ccd ec13 975f 1744 a7c4 3d7e 5d64 7319     ...._.D...~=d].s
 800115c:	8160 dc4f 2a22 8890 ee46 14b8 5ede db0b     `.O."*..F....^..
 800116c:	32e0 0a3a 0649 5c24 d3c2 62ac 9591 79e4     .2:.I.$\...b...y
 800117c:	c8e7 6d37 d58d a94e 566c eaf4 7a65 08ae     ..7m..N.lV..ez..
 800118c:	78ba 2e25 a61c c6b4 dde8 1f74 bd4b 8a8b     .x%.......t.K...
 800119c:	3e70 66b5 0348 0ef6 3561 b957 c186 9e1d     p>.fH...a5W.....
 80011ac:	f8e1 1198 d969 948e 1e9b e987 55ce df28     ....i........U(.
 80011bc:	a18c 0d89 e6bf 6842 9941 0f2d 54b0 16bb     ......BhA.-..T..

080011cc <aes128_keyschedule_rfunc>:
* Note that it expects r2 to contain the corresponding round constant and r3 to
* contain the S-box address.
******************************************************************************/
.align 2
aes128_keyschedule_rfunc:
    movw    r1, #0xfc
 80011cc:	f240 01fc 	movw	r1, #252	@ 0xfc
    and     r8, r1, r7, lsr #8
 80011d0:	ea01 2817 	and.w	r8, r1, r7, lsr #8
    and     r9, r1, r7, lsr #16
 80011d4:	ea01 4917 	and.w	r9, r1, r7, lsr #16
    and     r10, r1, r7, lsr #24
 80011d8:	ea01 6a17 	and.w	sl, r1, r7, lsr #24
    and     r11, r1, r7
 80011dc:	ea01 0b07 	and.w	fp, r1, r7
    ldr     r8, [r3, r8]            // computes the sbox using the LUT
 80011e0:	f853 8008 	ldr.w	r8, [r3, r8]
    ldr     r9, [r3, r9]            // computes the sbox using the LUT
 80011e4:	f853 9009 	ldr.w	r9, [r3, r9]
    ldr     r10, [r3, r10]          // computes the sbox using the LUT
 80011e8:	f853 a00a 	ldr.w	sl, [r3, sl]
    ldr     r11, [r3, r11]          // computes the sbox using the LUT
 80011ec:	f853 b00b 	ldr.w	fp, [r3, fp]
    movw    r1, #0x18
 80011f0:	f240 0118 	movw	r1, #24
    and     r12, r1, r7, lsr #5     
 80011f4:	ea01 1c57 	and.w	ip, r1, r7, lsr #5
    lsr     r8, r8, r12
 80011f8:	fa28 f80c 	lsr.w	r8, r8, ip
    and     r8, #0xff
 80011fc:	f008 08ff 	and.w	r8, r8, #255	@ 0xff
    and     r12, r1, r7, lsr #13     
 8001200:	ea01 3c57 	and.w	ip, r1, r7, lsr #13
    lsr     r9, r9, r12
 8001204:	fa29 f90c 	lsr.w	r9, r9, ip
    and     r9, #0xff
 8001208:	f009 09ff 	and.w	r9, r9, #255	@ 0xff
    and     r12, r1, r7, lsr #21     
 800120c:	ea01 5c57 	and.w	ip, r1, r7, lsr #21
    lsr     r10, r10, r12
 8001210:	fa2a fa0c 	lsr.w	sl, sl, ip
    and     r10, #0xff
 8001214:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
    and     r12, r1, r7, lsl #3     
 8001218:	ea01 0cc7 	and.w	ip, r1, r7, lsl #3
    lsr     r11, r11, r12
 800121c:	fa2b fb0c 	lsr.w	fp, fp, ip
    and     r11, #0xff
 8001220:	f00b 0bff 	and.w	fp, fp, #255	@ 0xff
    eor     r4, r2                  // adds the first rconst
 8001224:	ea84 0402 	eor.w	r4, r4, r2
    eor     r4, r8                  // xor the columns (1st sbox byte)
 8001228:	ea84 0408 	eor.w	r4, r4, r8
    eor     r4, r4, r9, ror #24     // xor the columns (2nd sbox byte)
 800122c:	ea84 6439 	eor.w	r4, r4, r9, ror #24
    eor     r4, r4, r10, ror #16    // xor the columns (3rd sbox byte)
 8001230:	ea84 443a 	eor.w	r4, r4, sl, ror #16
    eor     r4, r4, r11, ror #8     // xor the columns (4th sbox byte)
 8001234:	ea84 243b 	eor.w	r4, r4, fp, ror #8
    eor     r5, r4                  // xor the columns
 8001238:	ea85 0504 	eor.w	r5, r5, r4
    eor     r6, r5                  // xor the columns
 800123c:	ea86 0605 	eor.w	r6, r6, r5
    eor     r7, r6                  // xor the columns
 8001240:	ea87 0706 	eor.w	r7, r7, r6
    push.w   {r4-r7}
 8001244:	e92d 00f0 	stmdb	sp!, {r4, r5, r6, r7}
    bx      lr
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop

0800124c <aes256_keyschedule_rfunc_0>:
* Operates slightly differently than 'aes128_keyschedule_rfunc' as 8 words have
* to be maintained in registers (instead of 4).
******************************************************************************/
.align 2
aes256_keyschedule_rfunc_0:
    eor     r4, r2                  // adds the first rconst
 800124c:	ea84 0402 	eor.w	r4, r4, r2
    movw    r1, #0xfc
 8001250:	f240 01fc 	movw	r1, #252	@ 0xfc
    movw    r2, #0x18
 8001254:	f240 0218 	movw	r2, #24
    and     r12, r1, r11, lsr #8
 8001258:	ea01 2c1b 	and.w	ip, r1, fp, lsr #8
    ldr     r12, [r3, r12]          // computes the sbox using the LUT
 800125c:	f853 c00c 	ldr.w	ip, [r3, ip]
    and     r0, r2, r11, lsr #5     
 8001260:	ea02 105b 	and.w	r0, r2, fp, lsr #5
    lsr     r12, r12, r0
 8001264:	fa2c fc00 	lsr.w	ip, ip, r0
    and     r12, #0xff
 8001268:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
    eor     r4, r12                 // xor the columns (sbox output byte)
 800126c:	ea84 040c 	eor.w	r4, r4, ip
    and     r12, r1, r11, lsr #16
 8001270:	ea01 4c1b 	and.w	ip, r1, fp, lsr #16
    ldr     r12, [r3, r12]          // computes the sbox using the LUT
 8001274:	f853 c00c 	ldr.w	ip, [r3, ip]
    and     r0, r2, r11, lsr #13
 8001278:	ea02 305b 	and.w	r0, r2, fp, lsr #13
    lsr     r12, r12, r0
 800127c:	fa2c fc00 	lsr.w	ip, ip, r0
    and     r12, #0xff
 8001280:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
    eor     r4, r4, r12, ror #24    // xor the columns (sbox output byte)
 8001284:	ea84 643c 	eor.w	r4, r4, ip, ror #24
    and     r12, r1, r11, lsr #24
 8001288:	ea01 6c1b 	and.w	ip, r1, fp, lsr #24
    ldr     r12, [r3, r12]          // computes the sbox using the LUT
 800128c:	f853 c00c 	ldr.w	ip, [r3, ip]
    and     r0, r2, r11, lsr #21
 8001290:	ea02 505b 	and.w	r0, r2, fp, lsr #21
    lsr     r12, r12, r0
 8001294:	fa2c fc00 	lsr.w	ip, ip, r0
    and     r12, #0xff
 8001298:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
    eor     r4, r4, r12, ror #16    // xor the columns (sbox output byte)
 800129c:	ea84 443c 	eor.w	r4, r4, ip, ror #16
    and     r12, r1, r11
 80012a0:	ea01 0c0b 	and.w	ip, r1, fp
    ldr     r12, [r3, r12]          // computes the sbox using the LUT
 80012a4:	f853 c00c 	ldr.w	ip, [r3, ip]
    and     r0, r2, r11, lsl #3
 80012a8:	ea02 00cb 	and.w	r0, r2, fp, lsl #3
    lsr     r12, r12, r0
 80012ac:	fa2c fc00 	lsr.w	ip, ip, r0
    and     r12, #0xff
 80012b0:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
    eor     r4, r4, r12, ror #8     // xor the columns (sbox output byte)
 80012b4:	ea84 243c 	eor.w	r4, r4, ip, ror #8
    eor     r5, r4                  // xor the columns
 80012b8:	ea85 0504 	eor.w	r5, r5, r4
    eor     r6, r5                  // xor the columns
 80012bc:	ea86 0605 	eor.w	r6, r6, r5
    eor     r7, r6                  // xor the columns
 80012c0:	ea87 0706 	eor.w	r7, r7, r6
    push.w  {r4-r7}                 // store on stack, to be packed later
 80012c4:	e92d 00f0 	stmdb	sp!, {r4, r5, r6, r7}
    bx      lr
 80012c8:	4770      	bx	lr

080012ca <aes256_keyschedule_rfunc_1>:
* Note that it expects r2 to contain the corresponding round constant and r3 to
* contain the S-box address.
* Unlike 'aes256_keyschedule_rfunc_0' it doesnt compute the RotWord operation.
******************************************************************************/
aes256_keyschedule_rfunc_1:
    and     r12, r1, r7, lsr #8
 80012ca:	ea01 2c17 	and.w	ip, r1, r7, lsr #8
    ldr     r12, [r3, r12]          // computes the sbox using the LUT
 80012ce:	f853 c00c 	ldr.w	ip, [r3, ip]
    and     r0, r2, r7, lsr #5     
 80012d2:	ea02 1057 	and.w	r0, r2, r7, lsr #5
    lsr     r12, r12, r0
 80012d6:	fa2c fc00 	lsr.w	ip, ip, r0
    and     r12, #0xff
 80012da:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
    eor     r8, r8, r12, lsl #8     // xor the columns (sbox output byte)
 80012de:	ea88 280c 	eor.w	r8, r8, ip, lsl #8
    and     r12, r1, r7, lsr #16
 80012e2:	ea01 4c17 	and.w	ip, r1, r7, lsr #16
    ldr     r12, [r3, r12]          // computes the sbox using the LUT
 80012e6:	f853 c00c 	ldr.w	ip, [r3, ip]
    and     r0, r2, r7, lsr #13
 80012ea:	ea02 3057 	and.w	r0, r2, r7, lsr #13
    lsr     r12, r12, r0
 80012ee:	fa2c fc00 	lsr.w	ip, ip, r0
    and     r12, #0xff
 80012f2:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
    eor     r8, r8, r12, lsl #16    // xor the columns (sbox output byte)
 80012f6:	ea88 480c 	eor.w	r8, r8, ip, lsl #16
    and     r12, r1, r7, lsr #24
 80012fa:	ea01 6c17 	and.w	ip, r1, r7, lsr #24
    ldr     r12, [r3, r12]          // computes the sbox using the LUT
 80012fe:	f853 c00c 	ldr.w	ip, [r3, ip]
    and     r0, r2, r7, lsr #21
 8001302:	ea02 5057 	and.w	r0, r2, r7, lsr #21
    lsr     r12, r12, r0
 8001306:	fa2c fc00 	lsr.w	ip, ip, r0
    and     r12, #0xff
 800130a:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
    eor     r8, r8, r12, lsl #24    // xor the columns (sbox output byte)
 800130e:	ea88 680c 	eor.w	r8, r8, ip, lsl #24
    and     r12, r1, r7
 8001312:	ea01 0c07 	and.w	ip, r1, r7
    ldr     r12, [r3, r12]          // computes the sbox using the LUT
 8001316:	f853 c00c 	ldr.w	ip, [r3, ip]
    and     r0, r2, r7, lsl #3
 800131a:	ea02 00c7 	and.w	r0, r2, r7, lsl #3
    lsr     r12, r12, r0
 800131e:	fa2c fc00 	lsr.w	ip, ip, r0
    and     r12, #0xff
 8001322:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
    eor     r8, r8, r12             // xor the columns (sbox output byte)
 8001326:	ea88 080c 	eor.w	r8, r8, ip
    eor     r9, r8                  // xor the columns
 800132a:	ea89 0908 	eor.w	r9, r9, r8
    eor     r10, r9                 // xor the columns
 800132e:	ea8a 0a09 	eor.w	sl, sl, r9
    eor     r11, r10                // xor the columns
 8001332:	ea8b 0b0a 	eor.w	fp, fp, sl
    push    {r8-r11}
 8001336:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
    bx      lr
 800133a:	4770      	bx	lr

0800133c <packing_rkey>:
* Packing routine. Note that it is the same as the one used in the encryption
* function so some code size could be saved by merging the two files.
******************************************************************************/
.align 2
packing_rkey:
    eor     r12, r8, r8, lsr #1     // SWAPMOVE(r8, r4, 0x55555555, 1) ....
 800133c:	ea88 0c58 	eor.w	ip, r8, r8, lsr #1
    and     r12, r1
 8001340:	ea0c 0c01 	and.w	ip, ip, r1
    eor     r4, r8, r12
 8001344:	ea88 040c 	eor.w	r4, r8, ip
    eor     r8, r8, r12, lsl #1     // .... SWAPMOVE(r8, r4, 0x55555555, 1)
 8001348:	ea88 084c 	eor.w	r8, r8, ip, lsl #1
    eor     r12, r9, r9, lsr #1     // SWAPMOVE(r9, r5, 0x55555555, 1) ....
 800134c:	ea89 0c59 	eor.w	ip, r9, r9, lsr #1
    and     r12, r1
 8001350:	ea0c 0c01 	and.w	ip, ip, r1
    eor     r5, r9, r12
 8001354:	ea89 050c 	eor.w	r5, r9, ip
    eor     r9, r9, r12, lsl #1     // .... SWAPMOVE(r9, r5, 0x55555555, 1)
 8001358:	ea89 094c 	eor.w	r9, r9, ip, lsl #1
    eor     r12, r10, r10, lsr #1   // SWAPMOVE(r10, r6, 0x55555555, 1) ....
 800135c:	ea8a 0c5a 	eor.w	ip, sl, sl, lsr #1
    and     r12, r1
 8001360:	ea0c 0c01 	and.w	ip, ip, r1
    eor     r6, r10, r12
 8001364:	ea8a 060c 	eor.w	r6, sl, ip
    eor     r10, r10, r12, lsl #1   // .... SWAPMOVE(r10, r6, 0x55555555, 1)
 8001368:	ea8a 0a4c 	eor.w	sl, sl, ip, lsl #1
    eor     r12, r11, r11, lsr #1   // SWAPMOVE(r11, r7, 0x55555555, 1) ....
 800136c:	ea8b 0c5b 	eor.w	ip, fp, fp, lsr #1
    and     r12, r1
 8001370:	ea0c 0c01 	and.w	ip, ip, r1
    eor     r7, r11, r12
 8001374:	ea8b 070c 	eor.w	r7, fp, ip
    eor     r11, r11, r12, lsl #1   // .... SWAPMOVE(r11, r7, 0x55555555, 1)
 8001378:	ea8b 0b4c 	eor.w	fp, fp, ip, lsl #1
    eor     r12, r4, r5, lsr #2     // SWAPMOVE(r5, r4, 0x33333333, 2) ....
 800137c:	ea84 0c95 	eor.w	ip, r4, r5, lsr #2
    and     r12, r2
 8001380:	ea0c 0c02 	and.w	ip, ip, r2
    eor     r4, r12
 8001384:	ea84 040c 	eor.w	r4, r4, ip
    eor     r5, r5, r12, lsl #2     // .... SWAPMOVE(r5, r4, 0x33333333, 2)
 8001388:	ea85 058c 	eor.w	r5, r5, ip, lsl #2
    eor     r12, r8, r9, lsr #2     // SWAPMOVE(r9, r8, 0x33333333, 2) ....
 800138c:	ea88 0c99 	eor.w	ip, r8, r9, lsr #2
    and     r12, r2
 8001390:	ea0c 0c02 	and.w	ip, ip, r2
    eor     r8, r8, r12
 8001394:	ea88 080c 	eor.w	r8, r8, ip
    eor     r9, r9, r12, lsl #2     // .... SWAPMOVE(r9, r8, 0x33333333, 2)
 8001398:	ea89 098c 	eor.w	r9, r9, ip, lsl #2
    eor     r12, r6, r7, lsr #2     // SWAPMOVE(r7, r6, 0x33333333, 2) ....
 800139c:	ea86 0c97 	eor.w	ip, r6, r7, lsr #2
    and     r12, r2
 80013a0:	ea0c 0c02 	and.w	ip, ip, r2
    eor     r6, r6, r12
 80013a4:	ea86 060c 	eor.w	r6, r6, ip
    eor     r7, r7, r12, lsl #2     // .... SWAPMOVE(r7, r6, 0x33333333, 2)
 80013a8:	ea87 078c 	eor.w	r7, r7, ip, lsl #2
    eor     r12, r10, r11, lsr #2   // SWAPMOVE(r11, r10, 0x33333333, 2) ....
 80013ac:	ea8a 0c9b 	eor.w	ip, sl, fp, lsr #2
    and     r12, r2
 80013b0:	ea0c 0c02 	and.w	ip, ip, r2
    eor     r10, r10, r12
 80013b4:	ea8a 0a0c 	eor.w	sl, sl, ip
    eor     r11, r11, r12, lsl #2   // .... SWAPMOVE(r11, r10, 0x33333333, 2)
 80013b8:	ea8b 0b8c 	eor.w	fp, fp, ip, lsl #2
    eor     r12, r4, r6, lsr #4     // SWAPMOVE(r6, r4, 0x0f0f0f0f, 4) ....
 80013bc:	ea84 1c16 	eor.w	ip, r4, r6, lsr #4
    and     r12, r3
 80013c0:	ea0c 0c03 	and.w	ip, ip, r3
    eor     r4, r12
 80013c4:	ea84 040c 	eor.w	r4, r4, ip
    eor     r6, r6, r12, lsl #4     // .... SWAPMOVE(r6, r4, 0x0f0f0f0f,4)
 80013c8:	ea86 160c 	eor.w	r6, r6, ip, lsl #4
    eor     r12, r5, r7, lsr #4     // SWAPMOVE(r7, r5, 0x0f0f0f0f, 4) ....
 80013cc:	ea85 1c17 	eor.w	ip, r5, r7, lsr #4
    and     r12, r3
 80013d0:	ea0c 0c03 	and.w	ip, ip, r3
    eor     r5, r5, r12
 80013d4:	ea85 050c 	eor.w	r5, r5, ip
    eor     r7, r7, r12, lsl #4     // .... SWAPMOVE(r7, r5, 0x0f0f0f0f, 4)
 80013d8:	ea87 170c 	eor.w	r7, r7, ip, lsl #4
    eor     r12, r8, r10, lsr #4    // SWAPMOVE(r10, r8, 0x0f0f0f0f, 4) ....
 80013dc:	ea88 1c1a 	eor.w	ip, r8, sl, lsr #4
    and     r12, r3
 80013e0:	ea0c 0c03 	and.w	ip, ip, r3
    eor     r8, r8, r12
 80013e4:	ea88 080c 	eor.w	r8, r8, ip
    eor     r10, r10, r12, lsl #4   // .... SWAPMOVE(r10,r8, 0x0f0f0f0f, 4)
 80013e8:	ea8a 1a0c 	eor.w	sl, sl, ip, lsl #4
    eor     r12, r9, r11, lsr #4    // SWAPMOVE(r11, r9, 0x0f0f0f0f, 4) ....
 80013ec:	ea89 1c1b 	eor.w	ip, r9, fp, lsr #4
    and     r12, r3
 80013f0:	ea0c 0c03 	and.w	ip, ip, r3
    eor     r9, r12
 80013f4:	ea89 090c 	eor.w	r9, r9, ip
    eor     r11, r11, r12, lsl #4   // .... SWAPMOVE(r11, r9, 0x0f0f0f0f, 4)
 80013f8:	ea8b 1b0c 	eor.w	fp, fp, ip, lsl #4
    mvn     r5, r5
 80013fc:	ea6f 0505 	mvn.w	r5, r5
    mvn     r8, r8
 8001400:	ea6f 0808 	mvn.w	r8, r8
    mvn     r7, r7
 8001404:	ea6f 0707 	mvn.w	r7, r7
    mvn     r11, r11
 8001408:	ea6f 0b0b 	mvn.w	fp, fp
    strd    r7, r11, [r0, #-8]
 800140c:	e940 7b02 	strd	r7, fp, [r0, #-8]
    strd    r6, r10, [r0, #-16]
 8001410:	e940 6a04 	strd	r6, sl, [r0, #-16]
    strd    r5, r9, [r0, #-24]
 8001414:	e940 5906 	strd	r5, r9, [r0, #-24]
    strd    r4, r8, [r0, #-32]!
 8001418:	e960 4808 	strd	r4, r8, [r0, #-32]!
    bx      lr
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop

08001420 <inv_shiftrows_1>:
/******************************************************************************
* Applies ShiftRows^(-1) on a round key to match fully/semi-fixslicing.
******************************************************************************/
.align 2
inv_shiftrows_1:
    and     r8, r4, #0xff
 8001420:	f004 08ff 	and.w	r8, r4, #255	@ 0xff
    and     r12, r7, #0xff00
 8001424:	f407 4c7f 	and.w	ip, r7, #65280	@ 0xff00
    orr     r8, r8, r12
 8001428:	ea48 080c 	orr.w	r8, r8, ip
    and     r12, r6, #0xff0000
 800142c:	f406 0c7f 	and.w	ip, r6, #16711680	@ 0xff0000
    orr     r8, r8, r12
 8001430:	ea48 080c 	orr.w	r8, r8, ip
    and     r12, r5, #0xff000000
 8001434:	f005 4c7f 	and.w	ip, r5, #4278190080	@ 0xff000000
    orr     r8, r8, r12
 8001438:	ea48 080c 	orr.w	r8, r8, ip
    and     r9, r5, #0xff
 800143c:	f005 09ff 	and.w	r9, r5, #255	@ 0xff
    and     r12, r4, #0xff00
 8001440:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
    orr     r9, r9, r12
 8001444:	ea49 090c 	orr.w	r9, r9, ip
    and     r12, r7, #0xff0000
 8001448:	f407 0c7f 	and.w	ip, r7, #16711680	@ 0xff0000
    orr     r9, r9, r12
 800144c:	ea49 090c 	orr.w	r9, r9, ip
    and     r12, r6, #0xff000000
 8001450:	f006 4c7f 	and.w	ip, r6, #4278190080	@ 0xff000000
    orr     r9, r9, r12
 8001454:	ea49 090c 	orr.w	r9, r9, ip
    and     r10, r6, #0xff
 8001458:	f006 0aff 	and.w	sl, r6, #255	@ 0xff
    and     r12, r5, #0xff00
 800145c:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
    orr     r10, r10, r12
 8001460:	ea4a 0a0c 	orr.w	sl, sl, ip
    and     r12, r4, #0xff0000
 8001464:	f404 0c7f 	and.w	ip, r4, #16711680	@ 0xff0000
    orr     r10, r10, r12
 8001468:	ea4a 0a0c 	orr.w	sl, sl, ip
    and     r12, r7, #0xff000000
 800146c:	f007 4c7f 	and.w	ip, r7, #4278190080	@ 0xff000000
    orr     r10, r10, r12
 8001470:	ea4a 0a0c 	orr.w	sl, sl, ip
    and     r11, r7, #0xff
 8001474:	f007 0bff 	and.w	fp, r7, #255	@ 0xff
    and     r12, r6, #0xff00
 8001478:	f406 4c7f 	and.w	ip, r6, #65280	@ 0xff00
    orr     r11, r11, r12
 800147c:	ea4b 0b0c 	orr.w	fp, fp, ip
    and     r12, r5, #0xff0000
 8001480:	f405 0c7f 	and.w	ip, r5, #16711680	@ 0xff0000
    orr     r11, r11, r12
 8001484:	ea4b 0b0c 	orr.w	fp, fp, ip
    and     r12, r4, #0xff000000
 8001488:	f004 4c7f 	and.w	ip, r4, #4278190080	@ 0xff000000
    orr     r11, r11, r12
 800148c:	ea4b 0b0c 	orr.w	fp, fp, ip
    bx      lr
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop

08001494 <inv_shiftrows_2>:
/******************************************************************************
* Applies ShiftRows^(-2) on a round key to match full-fixslicing.
******************************************************************************/
.align 2
inv_shiftrows_2:
    movw    r12, #0xff00
 8001494:	f64f 7c00 	movw	ip, #65280	@ 0xff00
    movt    r12, #0xff00
 8001498:	f6cf 7c00 	movt	ip, #65280	@ 0xff00
    eor     r8, r4, r6
 800149c:	ea84 0806 	eor.w	r8, r4, r6
    and     r8, r8, r12
 80014a0:	ea08 080c 	and.w	r8, r8, ip
    eor     r10, r8, r6
 80014a4:	ea88 0a06 	eor.w	sl, r8, r6
    eor     r8, r8, r4
 80014a8:	ea88 0804 	eor.w	r8, r8, r4
    eor     r9, r5, r7
 80014ac:	ea85 0907 	eor.w	r9, r5, r7
    and     r9, r9, r12
 80014b0:	ea09 090c 	and.w	r9, r9, ip
    eor     r11, r9, r7
 80014b4:	ea89 0b07 	eor.w	fp, r9, r7
    eor     r9, r9, r5
 80014b8:	ea89 0905 	eor.w	r9, r9, r5
    bx      lr
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <inv_shiftrows_3>:
/******************************************************************************
* Applies ShiftRows^(-3) on a round key to match fully-fixslicing.
******************************************************************************/
.align 2
inv_shiftrows_3:
    and     r8, r4, #0xff
 80014c0:	f004 08ff 	and.w	r8, r4, #255	@ 0xff
    and     r12, r5, #0xff00
 80014c4:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
    orr     r8, r8, r12
 80014c8:	ea48 080c 	orr.w	r8, r8, ip
    and     r12, r6, #0xff0000
 80014cc:	f406 0c7f 	and.w	ip, r6, #16711680	@ 0xff0000
    orr     r8, r8, r12
 80014d0:	ea48 080c 	orr.w	r8, r8, ip
    and     r12, r7, #0xff000000
 80014d4:	f007 4c7f 	and.w	ip, r7, #4278190080	@ 0xff000000
    orr     r8, r8, r12
 80014d8:	ea48 080c 	orr.w	r8, r8, ip
    and     r9, r5, #0xff
 80014dc:	f005 09ff 	and.w	r9, r5, #255	@ 0xff
    and     r12, r6, #0xff00
 80014e0:	f406 4c7f 	and.w	ip, r6, #65280	@ 0xff00
    orr     r9, r9, r12
 80014e4:	ea49 090c 	orr.w	r9, r9, ip
    and     r12, r7, #0xff0000
 80014e8:	f407 0c7f 	and.w	ip, r7, #16711680	@ 0xff0000
    orr     r9, r9, r12
 80014ec:	ea49 090c 	orr.w	r9, r9, ip
    and     r12, r4, #0xff000000
 80014f0:	f004 4c7f 	and.w	ip, r4, #4278190080	@ 0xff000000
    orr     r9, r9, r12
 80014f4:	ea49 090c 	orr.w	r9, r9, ip
    and     r10, r6, #0xff
 80014f8:	f006 0aff 	and.w	sl, r6, #255	@ 0xff
    and     r12, r7, #0xff00
 80014fc:	f407 4c7f 	and.w	ip, r7, #65280	@ 0xff00
    orr     r10, r10, r12
 8001500:	ea4a 0a0c 	orr.w	sl, sl, ip
    and     r12, r4, #0xff0000
 8001504:	f404 0c7f 	and.w	ip, r4, #16711680	@ 0xff0000
    orr     r10, r10, r12
 8001508:	ea4a 0a0c 	orr.w	sl, sl, ip
    and     r12, r5, #0xff000000
 800150c:	f005 4c7f 	and.w	ip, r5, #4278190080	@ 0xff000000
    orr     r10, r10, r12
 8001510:	ea4a 0a0c 	orr.w	sl, sl, ip
    and     r11, r7, #0xff
 8001514:	f007 0bff 	and.w	fp, r7, #255	@ 0xff
    and     r12, r4, #0xff00
 8001518:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
    orr     r11, r11, r12
 800151c:	ea4b 0b0c 	orr.w	fp, fp, ip
    and     r12, r5, #0xff0000
 8001520:	f405 0c7f 	and.w	ip, r5, #16711680	@ 0xff0000
    orr     r11, r11, r12
 8001524:	ea4b 0b0c 	orr.w	fp, fp, ip
    and     r12, r6, #0xff000000
 8001528:	f006 4c7f 	and.w	ip, r6, #4278190080	@ 0xff000000
    orr     r11, r11, r12
 800152c:	ea4b 0b0c 	orr.w	fp, fp, ip
    bx      lr
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop

08001534 <aes128_keyschedule_ffs_lut>:
@ void aes128_keyschedule_ffs_lut(u32* rkeys, const u8* key);
.global aes128_keyschedule_ffs_lut
.type   aes128_keyschedule_ffs_lut,%function
.align 2
aes128_keyschedule_ffs_lut:
    push    {r1-r12,r14}
 8001534:	e92d 5ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ldr.w   r4, [r1]                    // load the encryption key
 8001538:	f8d1 4000 	ldr.w	r4, [r1]
    ldr     r5, [r1, #4]
 800153c:	684d      	ldr	r5, [r1, #4]
    ldr     r6, [r1, #8]
 800153e:	688e      	ldr	r6, [r1, #8]
    ldr     r7, [r1, #12]
 8001540:	68cf      	ldr	r7, [r1, #12]
    adr     r3, AES_Sbox_compact        // load the sbox LUT address in r3
 8001542:	f2af 4378 	subw	r3, pc, #1144	@ 0x478
    movw    r2, #0x01                   // 1st const
 8001546:	f240 0201 	movw	r2, #1
    bl      aes128_keyschedule_rfunc    // 1st round
 800154a:	f7ff fe3f 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x02                   // 2nd rconst
 800154e:	f240 0202 	movw	r2, #2
    bl      aes128_keyschedule_rfunc    // 2nd round
 8001552:	f7ff fe3b 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x04                   // 3rd rconst
 8001556:	f240 0204 	movw	r2, #4
    bl      aes128_keyschedule_rfunc    // 3rd round
 800155a:	f7ff fe37 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x08                   // 4th rconst
 800155e:	f240 0208 	movw	r2, #8
    bl      aes128_keyschedule_rfunc    // 4th round
 8001562:	f7ff fe33 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x10                   // 5th rconst
 8001566:	f240 0210 	movw	r2, #16
    bl      aes128_keyschedule_rfunc    // 5th round
 800156a:	f7ff fe2f 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x20                   // 6th rconst
 800156e:	f240 0220 	movw	r2, #32
    bl      aes128_keyschedule_rfunc    // 6th round
 8001572:	f7ff fe2b 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x40                   // 7th rconst
 8001576:	f240 0240 	movw	r2, #64	@ 0x40
    bl      aes128_keyschedule_rfunc    // 7th round
 800157a:	f7ff fe27 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x80                   // 8th rconst
 800157e:	f240 0280 	movw	r2, #128	@ 0x80
    bl      aes128_keyschedule_rfunc    // 8th round
 8001582:	f7ff fe23 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x1b                   // 9th rconst
 8001586:	f240 021b 	movw	r2, #27
    bl      aes128_keyschedule_rfunc    // 9th round
 800158a:	f7ff fe1f 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x36                   // 10th rconst
 800158e:	f240 0236 	movw	r2, #54	@ 0x36
    bl      aes128_keyschedule_rfunc    // 10th round
 8001592:	f7ff fe1b 	bl	80011cc <aes128_keyschedule_rfunc>
    //done expanding, now start bitslicing
    //set r0 to end of rk, to be filled backwards
    add     r0, #352
 8001596:	f500 70b0 	add.w	r0, r0, #352	@ 0x160
    movw    r3, #0x0f0f
 800159a:	f640 730f 	movw	r3, #3855	@ 0xf0f
    movt    r3, #0x0f0f                 // r3 <- 0x0f0f0f0f (mask for SWAPMOVE)
 800159e:	f6c0 730f 	movt	r3, #3855	@ 0xf0f
    eor     r2, r3, r3, lsl #2          // r2 <- 0x33333333 (mask for SWAPMOVE)
 80015a2:	ea83 0283 	eor.w	r2, r3, r3, lsl #2
    eor     r1, r2, r2, lsl #1          // r1 <- 0x55555555 (mask for SWAPMOVE)
 80015a6:	ea82 0142 	eor.w	r1, r2, r2, lsl #1
    pop.w   {r4-r7}
 80015aa:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 80015ae:	46a0      	mov	r8, r4
    mov     r9, r5
 80015b0:	46a9      	mov	r9, r5
    mov     r10, r6
 80015b2:	46b2      	mov	sl, r6
    mov     r11, r7
 80015b4:	46bb      	mov	fp, r7
    bl      packing_rkey
 80015b6:	f7ff fec1 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80015ba:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 80015be:	f7ff ff2f 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 80015c2:	f7ff febb 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80015c6:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 80015ca:	46a0      	mov	r8, r4
    mov     r9, r5
 80015cc:	46a9      	mov	r9, r5
    mov     r10, r6
 80015ce:	46b2      	mov	sl, r6
    mov     r11, r7
 80015d0:	46bb      	mov	fp, r7
    bl      packing_rkey
 80015d2:	f7ff feb3 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80015d6:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_3
 80015da:	f7ff ff71 	bl	80014c0 <inv_shiftrows_3>
    bl      packing_rkey
 80015de:	f7ff fead 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80015e2:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_2
 80015e6:	f7ff ff55 	bl	8001494 <inv_shiftrows_2>
    bl      packing_rkey
 80015ea:	f7ff fea7 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80015ee:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 80015f2:	f7ff ff15 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 80015f6:	f7ff fea1 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80015fa:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 80015fe:	46a0      	mov	r8, r4
    mov     r9, r5
 8001600:	46a9      	mov	r9, r5
    mov     r10, r6
 8001602:	46b2      	mov	sl, r6
    mov     r11, r7
 8001604:	46bb      	mov	fp, r7
    bl      packing_rkey
 8001606:	f7ff fe99 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 800160a:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_3
 800160e:	f7ff ff57 	bl	80014c0 <inv_shiftrows_3>
    bl      packing_rkey
 8001612:	f7ff fe93 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001616:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_2
 800161a:	f7ff ff3b 	bl	8001494 <inv_shiftrows_2>
    bl      packing_rkey
 800161e:	f7ff fe8d 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001622:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 8001626:	f7ff fefb 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 800162a:	f7ff fe87 	bl	800133c <packing_rkey>
    ldr     r12, [sp]
 800162e:	f8dd c000 	ldr.w	ip, [sp]
    ldr.w   r4, [r12]                    // load the encryption key
 8001632:	f8dc 4000 	ldr.w	r4, [ip]
    ldr     r5, [r12, #4]
 8001636:	f8dc 5004 	ldr.w	r5, [ip, #4]
    ldr     r6, [r12, #8]
 800163a:	f8dc 6008 	ldr.w	r6, [ip, #8]
    ldr     r7, [r12, #12]
 800163e:	f8dc 700c 	ldr.w	r7, [ip, #12]
    mov     r8, r4
 8001642:	46a0      	mov	r8, r4
    mov     r9, r5
 8001644:	46a9      	mov	r9, r5
    mov     r10, r6
 8001646:	46b2      	mov	sl, r6
    mov     r11, r7
 8001648:	46bb      	mov	fp, r7
    bl      packing_rkey
 800164a:	f7ff fe77 	bl	800133c <packing_rkey>
    mvn     r5, r5              // cancels the NOT applied in 'packing_rkey'
 800164e:	ea6f 0505 	mvn.w	r5, r5
    mvn     r8, r8              // cancels the NOT applied in 'packing_rkey'
 8001652:	ea6f 0808 	mvn.w	r8, r8
    mvn     r7, r7              // cancels the NOT applied in 'packing_rkey'
 8001656:	ea6f 0707 	mvn.w	r7, r7
    mvn     r11, r11            // cancels the NOT applied in 'packing_rkey'
 800165a:	ea6f 0b0b 	mvn.w	fp, fp
    strd    r7, r11, [r0, #24]  // restore after fix
 800165e:	e9c0 7b06 	strd	r7, fp, [r0, #24]
    strd    r6, r10, [r0, #16]  // restore after fix
 8001662:	e9c0 6a04 	strd	r6, sl, [r0, #16]
    strd    r5, r9, [r0, #8]    // restore after fix
 8001666:	e9c0 5902 	strd	r5, r9, [r0, #8]
    strd    r4, r8, [r0]        // restore after fix
 800166a:	e9c0 4800 	strd	r4, r8, [r0]
    pop     {r1-r12, r14}       // restore context
 800166e:	e8bd 5ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8001672:	4770      	bx	lr

08001674 <aes256_keyschedule_ffs_lut>:
@ void aes256_keyschedule_ffs_lut(u32* rkeys, const u8* key);
.global aes256_keyschedule_ffs_lut
.type   aes256_keyschedule_ffs_lut,%function
.align 2
aes256_keyschedule_ffs_lut:
    push    {r0-r12,r14}
 8001674:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ldr.w   r4, [r1]                    // load the encryption key
 8001678:	f8d1 4000 	ldr.w	r4, [r1]
    ldr     r5, [r1, #4]
 800167c:	684d      	ldr	r5, [r1, #4]
    ldr     r6, [r1, #8]
 800167e:	688e      	ldr	r6, [r1, #8]
    ldr     r7, [r1, #12]
 8001680:	68cf      	ldr	r7, [r1, #12]
    adr     r3, AES_Sbox_compact        // load the sbox LUT address in r3
 8001682:	f2af 53b8 	subw	r3, pc, #1464	@ 0x5b8
    movw    r2, #0x01                   // 1st const
 8001686:	f240 0201 	movw	r2, #1
    bl      aes256_keyschedule_rfunc_0  // 1st round
 800168a:	f7ff fddf 	bl	800124c <aes256_keyschedule_rfunc_0>
    bl      aes256_keyschedule_rfunc_1  // 2nd round
 800168e:	f7ff fe1c 	bl	80012ca <aes256_keyschedule_rfunc_1>
    movw    r2, #0x02                   // 2nd rconst
 8001692:	f240 0202 	movw	r2, #2
    bl      aes256_keyschedule_rfunc_0  // 3rd round
 8001696:	f7ff fdd9 	bl	800124c <aes256_keyschedule_rfunc_0>
    bl      aes256_keyschedule_rfunc_1  // 4th round
 800169a:	f7ff fe16 	bl	80012ca <aes256_keyschedule_rfunc_1>
    movw    r2, #0x04                   // 3rd rconst
 800169e:	f240 0204 	movw	r2, #4
    bl      aes256_keyschedule_rfunc_0  // 5th round
 80016a2:	f7ff fdd3 	bl	800124c <aes256_keyschedule_rfunc_0>
    bl      aes256_keyschedule_rfunc_1  // 6th round
 80016a6:	f7ff fe10 	bl	80012ca <aes256_keyschedule_rfunc_1>
    movw    r2, #0x08                   // 4th rconst
 80016aa:	f240 0208 	movw	r2, #8
    bl      aes256_keyschedule_rfunc_0  // 7th round
 80016ae:	f7ff fdcd 	bl	800124c <aes256_keyschedule_rfunc_0>
    bl      aes256_keyschedule_rfunc_1  // 8th round
 80016b2:	f7ff fe0a 	bl	80012ca <aes256_keyschedule_rfunc_1>
    movw    r2, #0x10                   // 5th rconst
 80016b6:	f240 0210 	movw	r2, #16
    bl      aes256_keyschedule_rfunc_0  // 9th round
 80016ba:	f7ff fdc7 	bl	800124c <aes256_keyschedule_rfunc_0>
    bl      aes256_keyschedule_rfunc_1  // 10th round
 80016be:	f7ff fe04 	bl	80012ca <aes256_keyschedule_rfunc_1>
    movw    r2, #0x20                   // 6th rconst
 80016c2:	f240 0220 	movw	r2, #32
    bl      aes256_keyschedule_rfunc_0  // 11th round
 80016c6:	f7ff fdc1 	bl	800124c <aes256_keyschedule_rfunc_0>
    bl      aes256_keyschedule_rfunc_1  // 12th round
 80016ca:	f7ff fdfe 	bl	80012ca <aes256_keyschedule_rfunc_1>
    movw    r2, #0x40                   // 7th rconst
 80016ce:	f240 0240 	movw	r2, #64	@ 0x40
    bl      aes256_keyschedule_rfunc_0  // 13th round
 80016d2:	f7ff fdbb 	bl	800124c <aes256_keyschedule_rfunc_0>
    //done expanding, now start bitslicing
    //set r0 to end of rk, to be filled backwards
    ldr.w   r0, [sp, #208]              // restore rkeys address
 80016d6:	f8dd 00d0 	ldr.w	r0, [sp, #208]	@ 0xd0
    pop.w   {r4-r7}                     // load the last rkey stored on the stack
 80016da:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    add.w   r0, #480                    // points to the last rkey
 80016de:	f500 70f0 	add.w	r0, r0, #480	@ 0x1e0
    movw    r3, #0x0f0f
 80016e2:	f640 730f 	movw	r3, #3855	@ 0xf0f
    movt    r3, #0x0f0f                 // r3 <- 0x0f0f0f0f (mask for SWAPMOVE)
 80016e6:	f6c0 730f 	movt	r3, #3855	@ 0xf0f
    eor     r2, r3, r3, lsl #2          // r2 <- 0x33333333 (mask for SWAPMOVE)
 80016ea:	ea83 0283 	eor.w	r2, r3, r3, lsl #2
    eor     r1, r2, r2, lsl #1          // r1 <- 0x55555555 (mask for SWAPMOVE)
 80016ee:	ea82 0142 	eor.w	r1, r2, r2, lsl #1
    mov     r8, r4
 80016f2:	46a0      	mov	r8, r4
    mov     r9, r5
 80016f4:	46a9      	mov	r9, r5
    mov     r10, r6
 80016f6:	46b2      	mov	sl, r6
    mov     r11, r7
 80016f8:	46bb      	mov	fp, r7
    bl      packing_rkey
 80016fa:	f7ff fe1f 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80016fe:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 8001702:	f7ff fe8d 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 8001706:	f7ff fe19 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 800170a:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 800170e:	46a0      	mov	r8, r4
    mov     r9, r5
 8001710:	46a9      	mov	r9, r5
    mov     r10, r6
 8001712:	46b2      	mov	sl, r6
    mov     r11, r7
 8001714:	46bb      	mov	fp, r7
    bl      packing_rkey
 8001716:	f7ff fe11 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 800171a:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_3
 800171e:	f7ff fecf 	bl	80014c0 <inv_shiftrows_3>
    bl      packing_rkey
 8001722:	f7ff fe0b 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001726:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_2
 800172a:	f7ff feb3 	bl	8001494 <inv_shiftrows_2>
    bl      packing_rkey
 800172e:	f7ff fe05 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001732:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 8001736:	f7ff fe73 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 800173a:	f7ff fdff 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 800173e:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 8001742:	46a0      	mov	r8, r4
    mov     r9, r5
 8001744:	46a9      	mov	r9, r5
    mov     r10, r6
 8001746:	46b2      	mov	sl, r6
    mov     r11, r7
 8001748:	46bb      	mov	fp, r7
    bl      packing_rkey
 800174a:	f7ff fdf7 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 800174e:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_3
 8001752:	f7ff feb5 	bl	80014c0 <inv_shiftrows_3>
    bl      packing_rkey
 8001756:	f7ff fdf1 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 800175a:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_2
 800175e:	f7ff fe99 	bl	8001494 <inv_shiftrows_2>
    bl      packing_rkey
 8001762:	f7ff fdeb 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001766:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 800176a:	f7ff fe59 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 800176e:	f7ff fde5 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001772:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 8001776:	46a0      	mov	r8, r4
    mov     r9, r5
 8001778:	46a9      	mov	r9, r5
    mov     r10, r6
 800177a:	46b2      	mov	sl, r6
    mov     r11, r7
 800177c:	46bb      	mov	fp, r7
    bl      packing_rkey
 800177e:	f7ff fddd 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001782:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_3
 8001786:	f7ff fe9b 	bl	80014c0 <inv_shiftrows_3>
    bl      packing_rkey
 800178a:	f7ff fdd7 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 800178e:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_2
 8001792:	f7ff fe7f 	bl	8001494 <inv_shiftrows_2>
    bl      packing_rkey
 8001796:	f7ff fdd1 	bl	800133c <packing_rkey>
    ldr     r12, [sp, #4]!
 800179a:	f85d cf04 	ldr.w	ip, [sp, #4]!
    add.w   r12, #16
 800179e:	f10c 0c10 	add.w	ip, ip, #16
    ldr.w   r4, [r12]
 80017a2:	f8dc 4000 	ldr.w	r4, [ip]
    ldr     r5, [r12, #4]
 80017a6:	f8dc 5004 	ldr.w	r5, [ip, #4]
    ldr     r6, [r12, #8]
 80017aa:	f8dc 6008 	ldr.w	r6, [ip, #8]
    ldr     r7, [r12, #12]
 80017ae:	f8dc 700c 	ldr.w	r7, [ip, #12]
    bl      inv_shiftrows_1
 80017b2:	f7ff fe35 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 80017b6:	f7ff fdc1 	bl	800133c <packing_rkey>
    ldr     r12, [sp]
 80017ba:	f8dd c000 	ldr.w	ip, [sp]
    ldr.w   r4, [r12]                    // load the encryption key
 80017be:	f8dc 4000 	ldr.w	r4, [ip]
    ldr     r5, [r12, #4]
 80017c2:	f8dc 5004 	ldr.w	r5, [ip, #4]
    ldr     r6, [r12, #8]
 80017c6:	f8dc 6008 	ldr.w	r6, [ip, #8]
    ldr     r7, [r12, #12]
 80017ca:	f8dc 700c 	ldr.w	r7, [ip, #12]
    mov     r8, r4
 80017ce:	46a0      	mov	r8, r4
    mov     r9, r5
 80017d0:	46a9      	mov	r9, r5
    mov     r10, r6
 80017d2:	46b2      	mov	sl, r6
    mov     r11, r7
 80017d4:	46bb      	mov	fp, r7
    bl      packing_rkey
 80017d6:	f7ff fdb1 	bl	800133c <packing_rkey>
    mvn     r5, r5              // cancels the NOT applied in 'packing_rkey'
 80017da:	ea6f 0505 	mvn.w	r5, r5
    mvn     r8, r8              // cancels the NOT applied in 'packing_rkey'
 80017de:	ea6f 0808 	mvn.w	r8, r8
    mvn     r7, r7              // cancels the NOT applied in 'packing_rkey'
 80017e2:	ea6f 0707 	mvn.w	r7, r7
    mvn     r11, r11            // cancels the NOT applied in 'packing_rkey'
 80017e6:	ea6f 0b0b 	mvn.w	fp, fp
    strd    r7, r11, [r0, #24]  // restore after fix
 80017ea:	e9c0 7b06 	strd	r7, fp, [r0, #24]
    strd    r6, r10, [r0, #16]  // restore after fix
 80017ee:	e9c0 6a04 	strd	r6, sl, [r0, #16]
    strd    r5, r9, [r0, #8]    // restore after fix
 80017f2:	e9c0 5902 	strd	r5, r9, [r0, #8]
    strd    r4, r8, [r0]        // restore after fix
 80017f6:	e9c0 4800 	strd	r4, r8, [r0]
    pop     {r1-r12, r14}       // restore context
 80017fa:	e8bd 5ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 80017fe:	4770      	bx	lr

08001800 <aes128_keyschedule_sfs_lut>:
@ void aes128_keyschedule_sfs_lut(u32* rkeys, const u8* key);
.global aes128_keyschedule_sfs_lut
.type   aes128_keyschedule_sfs_lut,%function
.align 2
aes128_keyschedule_sfs_lut:
    push    {r1-r12,r14}
 8001800:	e92d 5ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ldr.w   r4, [r1]                    // load the encryption key
 8001804:	f8d1 4000 	ldr.w	r4, [r1]
    ldr     r5, [r1, #4]
 8001808:	684d      	ldr	r5, [r1, #4]
    ldr     r6, [r1, #8]
 800180a:	688e      	ldr	r6, [r1, #8]
    ldr     r7, [r1, #12]
 800180c:	68cf      	ldr	r7, [r1, #12]
    adr     r3, AES_Sbox_compact        // load the sbox LUT address in r3
 800180e:	f2af 7344 	subw	r3, pc, #1860	@ 0x744
    movw    r2, #0x01                   // 1st const
 8001812:	f240 0201 	movw	r2, #1
    bl      aes128_keyschedule_rfunc    // 1st round
 8001816:	f7ff fcd9 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x02                   // 2nd rconst
 800181a:	f240 0202 	movw	r2, #2
    bl      aes128_keyschedule_rfunc    // 2nd round
 800181e:	f7ff fcd5 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x04                   // 3rd rconst
 8001822:	f240 0204 	movw	r2, #4
    bl      aes128_keyschedule_rfunc    // 3rd round
 8001826:	f7ff fcd1 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x08                   // 4th rconst
 800182a:	f240 0208 	movw	r2, #8
    bl      aes128_keyschedule_rfunc    // 4th round
 800182e:	f7ff fccd 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x10                   // 5th rconst
 8001832:	f240 0210 	movw	r2, #16
    bl      aes128_keyschedule_rfunc    // 5th round
 8001836:	f7ff fcc9 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x20                   // 6th rconst
 800183a:	f240 0220 	movw	r2, #32
    bl      aes128_keyschedule_rfunc    // 6th round
 800183e:	f7ff fcc5 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x40                   // 7th rconst
 8001842:	f240 0240 	movw	r2, #64	@ 0x40
    bl      aes128_keyschedule_rfunc    // 7th round
 8001846:	f7ff fcc1 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x80                   // 8th rconst
 800184a:	f240 0280 	movw	r2, #128	@ 0x80
    bl      aes128_keyschedule_rfunc    // 8th round
 800184e:	f7ff fcbd 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x1b                   // 9th rconst
 8001852:	f240 021b 	movw	r2, #27
    bl      aes128_keyschedule_rfunc    // 9th round
 8001856:	f7ff fcb9 	bl	80011cc <aes128_keyschedule_rfunc>
    movw    r2, #0x36                   // 10th rconst
 800185a:	f240 0236 	movw	r2, #54	@ 0x36
    bl      aes128_keyschedule_rfunc    // 10th round
 800185e:	f7ff fcb5 	bl	80011cc <aes128_keyschedule_rfunc>
    //done expanding, now start bitslicing
    //set r0 to end of rk, to be filled backwards
    add     r0, #352
 8001862:	f500 70b0 	add.w	r0, r0, #352	@ 0x160
    movw    r3, #0x0f0f
 8001866:	f640 730f 	movw	r3, #3855	@ 0xf0f
    movt    r3, #0x0f0f                 // r3 <- 0x0f0f0f0f (mask for SWAPMOVE)
 800186a:	f6c0 730f 	movt	r3, #3855	@ 0xf0f
    eor     r2, r3, r3, lsl #2          // r2 <- 0x33333333 (mask for SWAPMOVE)
 800186e:	ea83 0283 	eor.w	r2, r3, r3, lsl #2
    eor     r1, r2, r2, lsl #1          // r1 <- 0x55555555 (mask for SWAPMOVE)
 8001872:	ea82 0142 	eor.w	r1, r2, r2, lsl #1
    pop.w   {r4-r7}
 8001876:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 800187a:	46a0      	mov	r8, r4
    mov     r9, r5
 800187c:	46a9      	mov	r9, r5
    mov     r10, r6
 800187e:	46b2      	mov	sl, r6
    mov     r11, r7
 8001880:	46bb      	mov	fp, r7
    bl      packing_rkey
 8001882:	f7ff fd5b 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001886:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 800188a:	f7ff fdc9 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 800188e:	f7ff fd55 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001892:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 8001896:	46a0      	mov	r8, r4
    mov     r9, r5
 8001898:	46a9      	mov	r9, r5
    mov     r10, r6
 800189a:	46b2      	mov	sl, r6
    mov     r11, r7
 800189c:	46bb      	mov	fp, r7
    bl      packing_rkey
 800189e:	f7ff fd4d 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80018a2:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 80018a6:	f7ff fdbb 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 80018aa:	f7ff fd47 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80018ae:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 80018b2:	46a0      	mov	r8, r4
    mov     r9, r5
 80018b4:	46a9      	mov	r9, r5
    mov     r10, r6
 80018b6:	46b2      	mov	sl, r6
    mov     r11, r7
 80018b8:	46bb      	mov	fp, r7
    bl      packing_rkey
 80018ba:	f7ff fd3f 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80018be:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 80018c2:	f7ff fdad 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 80018c6:	f7ff fd39 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80018ca:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 80018ce:	46a0      	mov	r8, r4
    mov     r9, r5
 80018d0:	46a9      	mov	r9, r5
    mov     r10, r6
 80018d2:	46b2      	mov	sl, r6
    mov     r11, r7
 80018d4:	46bb      	mov	fp, r7
    bl      packing_rkey
 80018d6:	f7ff fd31 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80018da:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 80018de:	f7ff fd9f 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 80018e2:	f7ff fd2b 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80018e6:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 80018ea:	46a0      	mov	r8, r4
    mov     r9, r5
 80018ec:	46a9      	mov	r9, r5
    mov     r10, r6
 80018ee:	46b2      	mov	sl, r6
    mov     r11, r7
 80018f0:	46bb      	mov	fp, r7
    bl      packing_rkey
 80018f2:	f7ff fd23 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80018f6:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 80018fa:	f7ff fd91 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 80018fe:	f7ff fd1d 	bl	800133c <packing_rkey>
    ldr     r12, [sp]
 8001902:	f8dd c000 	ldr.w	ip, [sp]
    ldr.w   r4, [r12]                    // load the encryption key
 8001906:	f8dc 4000 	ldr.w	r4, [ip]
    ldr     r5, [r12, #4]
 800190a:	f8dc 5004 	ldr.w	r5, [ip, #4]
    ldr     r6, [r12, #8]
 800190e:	f8dc 6008 	ldr.w	r6, [ip, #8]
    ldr     r7, [r12, #12]
 8001912:	f8dc 700c 	ldr.w	r7, [ip, #12]
    mov     r8, r4
 8001916:	46a0      	mov	r8, r4
    mov     r9, r5
 8001918:	46a9      	mov	r9, r5
    mov     r10, r6
 800191a:	46b2      	mov	sl, r6
    mov     r11, r7
 800191c:	46bb      	mov	fp, r7
    bl      packing_rkey
 800191e:	f7ff fd0d 	bl	800133c <packing_rkey>
    mvn     r5, r5              // cancels the NOT applied in 'packing_rkey'
 8001922:	ea6f 0505 	mvn.w	r5, r5
    mvn     r8, r8              // cancels the NOT applied in 'packing_rkey'
 8001926:	ea6f 0808 	mvn.w	r8, r8
    mvn     r7, r7              // cancels the NOT applied in 'packing_rkey'
 800192a:	ea6f 0707 	mvn.w	r7, r7
    mvn     r11, r11            // cancels the NOT applied in 'packing_rkey'
 800192e:	ea6f 0b0b 	mvn.w	fp, fp
    strd    r7, r11, [r0, #24]  // restore after fix
 8001932:	e9c0 7b06 	strd	r7, fp, [r0, #24]
    strd    r6, r10, [r0, #16]  // restore after fix
 8001936:	e9c0 6a04 	strd	r6, sl, [r0, #16]
    strd    r5, r9, [r0, #8]    // restore after fix
 800193a:	e9c0 5902 	strd	r5, r9, [r0, #8]
    strd    r4, r8, [r0]        // restore after fix
 800193e:	e9c0 4800 	strd	r4, r8, [r0]
    pop     {r1-r12, r14}       // restore context
 8001942:	e8bd 5ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8001946:	4770      	bx	lr

08001948 <aes256_keyschedule_sfs_lut>:
@ void aes256_keyschedule_sfs_lut(u32* rkeys, const u8* key);
.global aes256_keyschedule_sfs_lut
.type   aes256_keyschedule_sfs_lut,%function
.align 2
aes256_keyschedule_sfs_lut:
    push    {r0-r12,r14}
 8001948:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ldr.w   r4, [r1]                    // load the encryption key
 800194c:	f8d1 4000 	ldr.w	r4, [r1]
    ldr     r5, [r1, #4]
 8001950:	684d      	ldr	r5, [r1, #4]
    ldr     r6, [r1, #8]
 8001952:	688e      	ldr	r6, [r1, #8]
    ldr     r7, [r1, #12]
 8001954:	68cf      	ldr	r7, [r1, #12]
    adr     r3, AES_Sbox_compact        // load the sbox LUT address in r3
 8001956:	f6af 038c 	subw	r3, pc, #2188	@ 0x88c
    movw    r2, #0x01                   // 1st const
 800195a:	f240 0201 	movw	r2, #1
    bl      aes256_keyschedule_rfunc_0  // 1st round
 800195e:	f7ff fc75 	bl	800124c <aes256_keyschedule_rfunc_0>
    bl      aes256_keyschedule_rfunc_1  // 2nd round
 8001962:	f7ff fcb2 	bl	80012ca <aes256_keyschedule_rfunc_1>
    movw    r2, #0x02                   // 2nd rconst
 8001966:	f240 0202 	movw	r2, #2
    bl      aes256_keyschedule_rfunc_0  // 3rd round
 800196a:	f7ff fc6f 	bl	800124c <aes256_keyschedule_rfunc_0>
    bl      aes256_keyschedule_rfunc_1  // 4th round
 800196e:	f7ff fcac 	bl	80012ca <aes256_keyschedule_rfunc_1>
    movw    r2, #0x04                   // 3rd rconst
 8001972:	f240 0204 	movw	r2, #4
    bl      aes256_keyschedule_rfunc_0  // 5th round
 8001976:	f7ff fc69 	bl	800124c <aes256_keyschedule_rfunc_0>
    bl      aes256_keyschedule_rfunc_1  // 6th round
 800197a:	f7ff fca6 	bl	80012ca <aes256_keyschedule_rfunc_1>
    movw    r2, #0x08                   // 4th rconst
 800197e:	f240 0208 	movw	r2, #8
    bl      aes256_keyschedule_rfunc_0  // 7th round
 8001982:	f7ff fc63 	bl	800124c <aes256_keyschedule_rfunc_0>
    bl      aes256_keyschedule_rfunc_1  // 8th round
 8001986:	f7ff fca0 	bl	80012ca <aes256_keyschedule_rfunc_1>
    movw    r2, #0x10                   // 5th rconst
 800198a:	f240 0210 	movw	r2, #16
    bl      aes256_keyschedule_rfunc_0  // 9th round
 800198e:	f7ff fc5d 	bl	800124c <aes256_keyschedule_rfunc_0>
    bl      aes256_keyschedule_rfunc_1  // 10th round
 8001992:	f7ff fc9a 	bl	80012ca <aes256_keyschedule_rfunc_1>
    movw    r2, #0x20                   // 6th rconst
 8001996:	f240 0220 	movw	r2, #32
    bl      aes256_keyschedule_rfunc_0  // 11th round
 800199a:	f7ff fc57 	bl	800124c <aes256_keyschedule_rfunc_0>
    bl      aes256_keyschedule_rfunc_1  // 12th round
 800199e:	f7ff fc94 	bl	80012ca <aes256_keyschedule_rfunc_1>
    movw    r2, #0x40                   // 7th rconst
 80019a2:	f240 0240 	movw	r2, #64	@ 0x40
    bl      aes256_keyschedule_rfunc_0  // 13th round
 80019a6:	f7ff fc51 	bl	800124c <aes256_keyschedule_rfunc_0>
    //done expanding, now start bitslicing
    //set r0 to end of rk, to be filled backwards
    ldr.w   r0, [sp, #208]              // restore rkeys address
 80019aa:	f8dd 00d0 	ldr.w	r0, [sp, #208]	@ 0xd0
    pop.w   {r4-r7}                     // load the last rkey stored on the stack
 80019ae:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    add.w   r0, #480                    // points to the last rkey
 80019b2:	f500 70f0 	add.w	r0, r0, #480	@ 0x1e0
    movw    r3, #0x0f0f
 80019b6:	f640 730f 	movw	r3, #3855	@ 0xf0f
    movt    r3, #0x0f0f                 // r3 <- 0x0f0f0f0f (mask for SWAPMOVE)
 80019ba:	f6c0 730f 	movt	r3, #3855	@ 0xf0f
    eor     r2, r3, r3, lsl #2          // r2 <- 0x33333333 (mask for SWAPMOVE)
 80019be:	ea83 0283 	eor.w	r2, r3, r3, lsl #2
    eor     r1, r2, r2, lsl #1          // r1 <- 0x55555555 (mask for SWAPMOVE)
 80019c2:	ea82 0142 	eor.w	r1, r2, r2, lsl #1
    mov     r8, r4
 80019c6:	46a0      	mov	r8, r4
    mov     r9, r5
 80019c8:	46a9      	mov	r9, r5
    mov     r10, r6
 80019ca:	46b2      	mov	sl, r6
    mov     r11, r7
 80019cc:	46bb      	mov	fp, r7
    bl      packing_rkey
 80019ce:	f7ff fcb5 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80019d2:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 80019d6:	f7ff fd23 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 80019da:	f7ff fcaf 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80019de:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 80019e2:	46a0      	mov	r8, r4
    mov     r9, r5
 80019e4:	46a9      	mov	r9, r5
    mov     r10, r6
 80019e6:	46b2      	mov	sl, r6
    mov     r11, r7
 80019e8:	46bb      	mov	fp, r7
    bl      packing_rkey
 80019ea:	f7ff fca7 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80019ee:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 80019f2:	f7ff fd15 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 80019f6:	f7ff fca1 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 80019fa:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 80019fe:	46a0      	mov	r8, r4
    mov     r9, r5
 8001a00:	46a9      	mov	r9, r5
    mov     r10, r6
 8001a02:	46b2      	mov	sl, r6
    mov     r11, r7
 8001a04:	46bb      	mov	fp, r7
    bl      packing_rkey
 8001a06:	f7ff fc99 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001a0a:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 8001a0e:	f7ff fd07 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 8001a12:	f7ff fc93 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001a16:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 8001a1a:	46a0      	mov	r8, r4
    mov     r9, r5
 8001a1c:	46a9      	mov	r9, r5
    mov     r10, r6
 8001a1e:	46b2      	mov	sl, r6
    mov     r11, r7
 8001a20:	46bb      	mov	fp, r7
    bl      packing_rkey
 8001a22:	f7ff fc8b 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001a26:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 8001a2a:	f7ff fcf9 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 8001a2e:	f7ff fc85 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001a32:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 8001a36:	46a0      	mov	r8, r4
    mov     r9, r5
 8001a38:	46a9      	mov	r9, r5
    mov     r10, r6
 8001a3a:	46b2      	mov	sl, r6
    mov     r11, r7
 8001a3c:	46bb      	mov	fp, r7
    bl      packing_rkey
 8001a3e:	f7ff fc7d 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001a42:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 8001a46:	f7ff fceb 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 8001a4a:	f7ff fc77 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001a4e:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 8001a52:	46a0      	mov	r8, r4
    mov     r9, r5
 8001a54:	46a9      	mov	r9, r5
    mov     r10, r6
 8001a56:	46b2      	mov	sl, r6
    mov     r11, r7
 8001a58:	46bb      	mov	fp, r7
    bl      packing_rkey
 8001a5a:	f7ff fc6f 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001a5e:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    bl      inv_shiftrows_1
 8001a62:	f7ff fcdd 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 8001a66:	f7ff fc69 	bl	800133c <packing_rkey>
    pop.w   {r4-r7}
 8001a6a:	e8bd 00f0 	ldmia.w	sp!, {r4, r5, r6, r7}
    mov     r8, r4
 8001a6e:	46a0      	mov	r8, r4
    mov     r9, r5
 8001a70:	46a9      	mov	r9, r5
    mov     r10, r6
 8001a72:	46b2      	mov	sl, r6
    mov     r11, r7
 8001a74:	46bb      	mov	fp, r7
    bl      packing_rkey
 8001a76:	f7ff fc61 	bl	800133c <packing_rkey>
    ldr     r12, [sp, #4]!
 8001a7a:	f85d cf04 	ldr.w	ip, [sp, #4]!
    add.w   r12, #16
 8001a7e:	f10c 0c10 	add.w	ip, ip, #16
    ldr.w   r4, [r12]
 8001a82:	f8dc 4000 	ldr.w	r4, [ip]
    ldr     r5, [r12, #4]
 8001a86:	f8dc 5004 	ldr.w	r5, [ip, #4]
    ldr     r6, [r12, #8]
 8001a8a:	f8dc 6008 	ldr.w	r6, [ip, #8]
    ldr     r7, [r12, #12]
 8001a8e:	f8dc 700c 	ldr.w	r7, [ip, #12]
    bl      inv_shiftrows_1
 8001a92:	f7ff fcc5 	bl	8001420 <inv_shiftrows_1>
    bl      packing_rkey
 8001a96:	f7ff fc51 	bl	800133c <packing_rkey>
    ldr     r12, [sp]
 8001a9a:	f8dd c000 	ldr.w	ip, [sp]
    ldr.w   r4, [r12]                    // load the encryption key
 8001a9e:	f8dc 4000 	ldr.w	r4, [ip]
    ldr     r5, [r12, #4]
 8001aa2:	f8dc 5004 	ldr.w	r5, [ip, #4]
    ldr     r6, [r12, #8]
 8001aa6:	f8dc 6008 	ldr.w	r6, [ip, #8]
    ldr     r7, [r12, #12]
 8001aaa:	f8dc 700c 	ldr.w	r7, [ip, #12]
    mov     r8, r4
 8001aae:	46a0      	mov	r8, r4
    mov     r9, r5
 8001ab0:	46a9      	mov	r9, r5
    mov     r10, r6
 8001ab2:	46b2      	mov	sl, r6
    mov     r11, r7
 8001ab4:	46bb      	mov	fp, r7
    bl      packing_rkey
 8001ab6:	f7ff fc41 	bl	800133c <packing_rkey>
    mvn     r5, r5              // cancels the NOT applied in 'packing_rkey'
 8001aba:	ea6f 0505 	mvn.w	r5, r5
    mvn     r8, r8              // cancels the NOT applied in 'packing_rkey'
 8001abe:	ea6f 0808 	mvn.w	r8, r8
    mvn     r7, r7              // cancels the NOT applied in 'packing_rkey'
 8001ac2:	ea6f 0707 	mvn.w	r7, r7
    mvn     r11, r11            // cancels the NOT applied in 'packing_rkey'
 8001ac6:	ea6f 0b0b 	mvn.w	fp, fp
    strd    r7, r11, [r0, #24]  // restore after fix
 8001aca:	e9c0 7b06 	strd	r7, fp, [r0, #24]
    strd    r6, r10, [r0, #16]  // restore after fix
 8001ace:	e9c0 6a04 	strd	r6, sl, [r0, #16]
    strd    r5, r9, [r0, #8]    // restore after fix
 8001ad2:	e9c0 5902 	strd	r5, r9, [r0, #8]
    strd    r4, r8, [r0]        // restore after fix
 8001ad6:	e9c0 4800 	strd	r4, r8, [r0]
    pop     {r1-r12, r14}       // restore context
 8001ada:	e8bd 5ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8001ade:	4770      	bx	lr

08001ae0 <memchr>:
 8001ae0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8001ae4:	2a10      	cmp	r2, #16
 8001ae6:	db2b      	blt.n	8001b40 <memchr+0x60>
 8001ae8:	f010 0f07 	tst.w	r0, #7
 8001aec:	d008      	beq.n	8001b00 <memchr+0x20>
 8001aee:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001af2:	3a01      	subs	r2, #1
 8001af4:	428b      	cmp	r3, r1
 8001af6:	d02d      	beq.n	8001b54 <memchr+0x74>
 8001af8:	f010 0f07 	tst.w	r0, #7
 8001afc:	b342      	cbz	r2, 8001b50 <memchr+0x70>
 8001afe:	d1f6      	bne.n	8001aee <memchr+0xe>
 8001b00:	b4f0      	push	{r4, r5, r6, r7}
 8001b02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001b06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8001b0a:	f022 0407 	bic.w	r4, r2, #7
 8001b0e:	f07f 0700 	mvns.w	r7, #0
 8001b12:	2300      	movs	r3, #0
 8001b14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001b18:	3c08      	subs	r4, #8
 8001b1a:	ea85 0501 	eor.w	r5, r5, r1
 8001b1e:	ea86 0601 	eor.w	r6, r6, r1
 8001b22:	fa85 f547 	uadd8	r5, r5, r7
 8001b26:	faa3 f587 	sel	r5, r3, r7
 8001b2a:	fa86 f647 	uadd8	r6, r6, r7
 8001b2e:	faa5 f687 	sel	r6, r5, r7
 8001b32:	b98e      	cbnz	r6, 8001b58 <memchr+0x78>
 8001b34:	d1ee      	bne.n	8001b14 <memchr+0x34>
 8001b36:	bcf0      	pop	{r4, r5, r6, r7}
 8001b38:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8001b3c:	f002 0207 	and.w	r2, r2, #7
 8001b40:	b132      	cbz	r2, 8001b50 <memchr+0x70>
 8001b42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001b46:	3a01      	subs	r2, #1
 8001b48:	ea83 0301 	eor.w	r3, r3, r1
 8001b4c:	b113      	cbz	r3, 8001b54 <memchr+0x74>
 8001b4e:	d1f8      	bne.n	8001b42 <memchr+0x62>
 8001b50:	2000      	movs	r0, #0
 8001b52:	4770      	bx	lr
 8001b54:	3801      	subs	r0, #1
 8001b56:	4770      	bx	lr
 8001b58:	2d00      	cmp	r5, #0
 8001b5a:	bf06      	itte	eq
 8001b5c:	4635      	moveq	r5, r6
 8001b5e:	3803      	subeq	r0, #3
 8001b60:	3807      	subne	r0, #7
 8001b62:	f015 0f01 	tst.w	r5, #1
 8001b66:	d107      	bne.n	8001b78 <memchr+0x98>
 8001b68:	3001      	adds	r0, #1
 8001b6a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8001b6e:	bf02      	ittt	eq
 8001b70:	3001      	addeq	r0, #1
 8001b72:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8001b76:	3001      	addeq	r0, #1
 8001b78:	bcf0      	pop	{r4, r5, r6, r7}
 8001b7a:	3801      	subs	r0, #1
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop

08001b80 <__aeabi_uldivmod>:
 8001b80:	b953      	cbnz	r3, 8001b98 <__aeabi_uldivmod+0x18>
 8001b82:	b94a      	cbnz	r2, 8001b98 <__aeabi_uldivmod+0x18>
 8001b84:	2900      	cmp	r1, #0
 8001b86:	bf08      	it	eq
 8001b88:	2800      	cmpeq	r0, #0
 8001b8a:	bf1c      	itt	ne
 8001b8c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001b90:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001b94:	f000 b96a 	b.w	8001e6c <__aeabi_idiv0>
 8001b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8001b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001ba0:	f000 f806 	bl	8001bb0 <__udivmoddi4>
 8001ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001bac:	b004      	add	sp, #16
 8001bae:	4770      	bx	lr

08001bb0 <__udivmoddi4>:
 8001bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bb4:	9d08      	ldr	r5, [sp, #32]
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d14e      	bne.n	8001c5a <__udivmoddi4+0xaa>
 8001bbc:	4694      	mov	ip, r2
 8001bbe:	458c      	cmp	ip, r1
 8001bc0:	4686      	mov	lr, r0
 8001bc2:	fab2 f282 	clz	r2, r2
 8001bc6:	d962      	bls.n	8001c8e <__udivmoddi4+0xde>
 8001bc8:	b14a      	cbz	r2, 8001bde <__udivmoddi4+0x2e>
 8001bca:	f1c2 0320 	rsb	r3, r2, #32
 8001bce:	4091      	lsls	r1, r2
 8001bd0:	fa20 f303 	lsr.w	r3, r0, r3
 8001bd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8001bd8:	4319      	orrs	r1, r3
 8001bda:	fa00 fe02 	lsl.w	lr, r0, r2
 8001bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001be2:	fa1f f68c 	uxth.w	r6, ip
 8001be6:	fbb1 f4f7 	udiv	r4, r1, r7
 8001bea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001bee:	fb07 1114 	mls	r1, r7, r4, r1
 8001bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001bf6:	fb04 f106 	mul.w	r1, r4, r6
 8001bfa:	4299      	cmp	r1, r3
 8001bfc:	d90a      	bls.n	8001c14 <__udivmoddi4+0x64>
 8001bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8001c02:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8001c06:	f080 8112 	bcs.w	8001e2e <__udivmoddi4+0x27e>
 8001c0a:	4299      	cmp	r1, r3
 8001c0c:	f240 810f 	bls.w	8001e2e <__udivmoddi4+0x27e>
 8001c10:	3c02      	subs	r4, #2
 8001c12:	4463      	add	r3, ip
 8001c14:	1a59      	subs	r1, r3, r1
 8001c16:	fa1f f38e 	uxth.w	r3, lr
 8001c1a:	fbb1 f0f7 	udiv	r0, r1, r7
 8001c1e:	fb07 1110 	mls	r1, r7, r0, r1
 8001c22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001c26:	fb00 f606 	mul.w	r6, r0, r6
 8001c2a:	429e      	cmp	r6, r3
 8001c2c:	d90a      	bls.n	8001c44 <__udivmoddi4+0x94>
 8001c2e:	eb1c 0303 	adds.w	r3, ip, r3
 8001c32:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8001c36:	f080 80fc 	bcs.w	8001e32 <__udivmoddi4+0x282>
 8001c3a:	429e      	cmp	r6, r3
 8001c3c:	f240 80f9 	bls.w	8001e32 <__udivmoddi4+0x282>
 8001c40:	4463      	add	r3, ip
 8001c42:	3802      	subs	r0, #2
 8001c44:	1b9b      	subs	r3, r3, r6
 8001c46:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	b11d      	cbz	r5, 8001c56 <__udivmoddi4+0xa6>
 8001c4e:	40d3      	lsrs	r3, r2
 8001c50:	2200      	movs	r2, #0
 8001c52:	e9c5 3200 	strd	r3, r2, [r5]
 8001c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c5a:	428b      	cmp	r3, r1
 8001c5c:	d905      	bls.n	8001c6a <__udivmoddi4+0xba>
 8001c5e:	b10d      	cbz	r5, 8001c64 <__udivmoddi4+0xb4>
 8001c60:	e9c5 0100 	strd	r0, r1, [r5]
 8001c64:	2100      	movs	r1, #0
 8001c66:	4608      	mov	r0, r1
 8001c68:	e7f5      	b.n	8001c56 <__udivmoddi4+0xa6>
 8001c6a:	fab3 f183 	clz	r1, r3
 8001c6e:	2900      	cmp	r1, #0
 8001c70:	d146      	bne.n	8001d00 <__udivmoddi4+0x150>
 8001c72:	42a3      	cmp	r3, r4
 8001c74:	d302      	bcc.n	8001c7c <__udivmoddi4+0xcc>
 8001c76:	4290      	cmp	r0, r2
 8001c78:	f0c0 80f0 	bcc.w	8001e5c <__udivmoddi4+0x2ac>
 8001c7c:	1a86      	subs	r6, r0, r2
 8001c7e:	eb64 0303 	sbc.w	r3, r4, r3
 8001c82:	2001      	movs	r0, #1
 8001c84:	2d00      	cmp	r5, #0
 8001c86:	d0e6      	beq.n	8001c56 <__udivmoddi4+0xa6>
 8001c88:	e9c5 6300 	strd	r6, r3, [r5]
 8001c8c:	e7e3      	b.n	8001c56 <__udivmoddi4+0xa6>
 8001c8e:	2a00      	cmp	r2, #0
 8001c90:	f040 8090 	bne.w	8001db4 <__udivmoddi4+0x204>
 8001c94:	eba1 040c 	sub.w	r4, r1, ip
 8001c98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001c9c:	fa1f f78c 	uxth.w	r7, ip
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fbb4 f6f8 	udiv	r6, r4, r8
 8001ca6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001caa:	fb08 4416 	mls	r4, r8, r6, r4
 8001cae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001cb2:	fb07 f006 	mul.w	r0, r7, r6
 8001cb6:	4298      	cmp	r0, r3
 8001cb8:	d908      	bls.n	8001ccc <__udivmoddi4+0x11c>
 8001cba:	eb1c 0303 	adds.w	r3, ip, r3
 8001cbe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8001cc2:	d202      	bcs.n	8001cca <__udivmoddi4+0x11a>
 8001cc4:	4298      	cmp	r0, r3
 8001cc6:	f200 80cd 	bhi.w	8001e64 <__udivmoddi4+0x2b4>
 8001cca:	4626      	mov	r6, r4
 8001ccc:	1a1c      	subs	r4, r3, r0
 8001cce:	fa1f f38e 	uxth.w	r3, lr
 8001cd2:	fbb4 f0f8 	udiv	r0, r4, r8
 8001cd6:	fb08 4410 	mls	r4, r8, r0, r4
 8001cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001cde:	fb00 f707 	mul.w	r7, r0, r7
 8001ce2:	429f      	cmp	r7, r3
 8001ce4:	d908      	bls.n	8001cf8 <__udivmoddi4+0x148>
 8001ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8001cea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8001cee:	d202      	bcs.n	8001cf6 <__udivmoddi4+0x146>
 8001cf0:	429f      	cmp	r7, r3
 8001cf2:	f200 80b0 	bhi.w	8001e56 <__udivmoddi4+0x2a6>
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	1bdb      	subs	r3, r3, r7
 8001cfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001cfe:	e7a5      	b.n	8001c4c <__udivmoddi4+0x9c>
 8001d00:	f1c1 0620 	rsb	r6, r1, #32
 8001d04:	408b      	lsls	r3, r1
 8001d06:	fa22 f706 	lsr.w	r7, r2, r6
 8001d0a:	431f      	orrs	r7, r3
 8001d0c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001d10:	fa04 f301 	lsl.w	r3, r4, r1
 8001d14:	ea43 030c 	orr.w	r3, r3, ip
 8001d18:	40f4      	lsrs	r4, r6
 8001d1a:	fa00 f801 	lsl.w	r8, r0, r1
 8001d1e:	0c38      	lsrs	r0, r7, #16
 8001d20:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001d24:	fbb4 fef0 	udiv	lr, r4, r0
 8001d28:	fa1f fc87 	uxth.w	ip, r7
 8001d2c:	fb00 441e 	mls	r4, r0, lr, r4
 8001d30:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001d34:	fb0e f90c 	mul.w	r9, lr, ip
 8001d38:	45a1      	cmp	r9, r4
 8001d3a:	fa02 f201 	lsl.w	r2, r2, r1
 8001d3e:	d90a      	bls.n	8001d56 <__udivmoddi4+0x1a6>
 8001d40:	193c      	adds	r4, r7, r4
 8001d42:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8001d46:	f080 8084 	bcs.w	8001e52 <__udivmoddi4+0x2a2>
 8001d4a:	45a1      	cmp	r9, r4
 8001d4c:	f240 8081 	bls.w	8001e52 <__udivmoddi4+0x2a2>
 8001d50:	f1ae 0e02 	sub.w	lr, lr, #2
 8001d54:	443c      	add	r4, r7
 8001d56:	eba4 0409 	sub.w	r4, r4, r9
 8001d5a:	fa1f f983 	uxth.w	r9, r3
 8001d5e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001d62:	fb00 4413 	mls	r4, r0, r3, r4
 8001d66:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001d6a:	fb03 fc0c 	mul.w	ip, r3, ip
 8001d6e:	45a4      	cmp	ip, r4
 8001d70:	d907      	bls.n	8001d82 <__udivmoddi4+0x1d2>
 8001d72:	193c      	adds	r4, r7, r4
 8001d74:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8001d78:	d267      	bcs.n	8001e4a <__udivmoddi4+0x29a>
 8001d7a:	45a4      	cmp	ip, r4
 8001d7c:	d965      	bls.n	8001e4a <__udivmoddi4+0x29a>
 8001d7e:	3b02      	subs	r3, #2
 8001d80:	443c      	add	r4, r7
 8001d82:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001d86:	fba0 9302 	umull	r9, r3, r0, r2
 8001d8a:	eba4 040c 	sub.w	r4, r4, ip
 8001d8e:	429c      	cmp	r4, r3
 8001d90:	46ce      	mov	lr, r9
 8001d92:	469c      	mov	ip, r3
 8001d94:	d351      	bcc.n	8001e3a <__udivmoddi4+0x28a>
 8001d96:	d04e      	beq.n	8001e36 <__udivmoddi4+0x286>
 8001d98:	b155      	cbz	r5, 8001db0 <__udivmoddi4+0x200>
 8001d9a:	ebb8 030e 	subs.w	r3, r8, lr
 8001d9e:	eb64 040c 	sbc.w	r4, r4, ip
 8001da2:	fa04 f606 	lsl.w	r6, r4, r6
 8001da6:	40cb      	lsrs	r3, r1
 8001da8:	431e      	orrs	r6, r3
 8001daa:	40cc      	lsrs	r4, r1
 8001dac:	e9c5 6400 	strd	r6, r4, [r5]
 8001db0:	2100      	movs	r1, #0
 8001db2:	e750      	b.n	8001c56 <__udivmoddi4+0xa6>
 8001db4:	f1c2 0320 	rsb	r3, r2, #32
 8001db8:	fa20 f103 	lsr.w	r1, r0, r3
 8001dbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8001dc0:	fa24 f303 	lsr.w	r3, r4, r3
 8001dc4:	4094      	lsls	r4, r2
 8001dc6:	430c      	orrs	r4, r1
 8001dc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001dcc:	fa00 fe02 	lsl.w	lr, r0, r2
 8001dd0:	fa1f f78c 	uxth.w	r7, ip
 8001dd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8001dd8:	fb08 3110 	mls	r1, r8, r0, r3
 8001ddc:	0c23      	lsrs	r3, r4, #16
 8001dde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001de2:	fb00 f107 	mul.w	r1, r0, r7
 8001de6:	4299      	cmp	r1, r3
 8001de8:	d908      	bls.n	8001dfc <__udivmoddi4+0x24c>
 8001dea:	eb1c 0303 	adds.w	r3, ip, r3
 8001dee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001df2:	d22c      	bcs.n	8001e4e <__udivmoddi4+0x29e>
 8001df4:	4299      	cmp	r1, r3
 8001df6:	d92a      	bls.n	8001e4e <__udivmoddi4+0x29e>
 8001df8:	3802      	subs	r0, #2
 8001dfa:	4463      	add	r3, ip
 8001dfc:	1a5b      	subs	r3, r3, r1
 8001dfe:	b2a4      	uxth	r4, r4
 8001e00:	fbb3 f1f8 	udiv	r1, r3, r8
 8001e04:	fb08 3311 	mls	r3, r8, r1, r3
 8001e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001e0c:	fb01 f307 	mul.w	r3, r1, r7
 8001e10:	42a3      	cmp	r3, r4
 8001e12:	d908      	bls.n	8001e26 <__udivmoddi4+0x276>
 8001e14:	eb1c 0404 	adds.w	r4, ip, r4
 8001e18:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001e1c:	d213      	bcs.n	8001e46 <__udivmoddi4+0x296>
 8001e1e:	42a3      	cmp	r3, r4
 8001e20:	d911      	bls.n	8001e46 <__udivmoddi4+0x296>
 8001e22:	3902      	subs	r1, #2
 8001e24:	4464      	add	r4, ip
 8001e26:	1ae4      	subs	r4, r4, r3
 8001e28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001e2c:	e739      	b.n	8001ca2 <__udivmoddi4+0xf2>
 8001e2e:	4604      	mov	r4, r0
 8001e30:	e6f0      	b.n	8001c14 <__udivmoddi4+0x64>
 8001e32:	4608      	mov	r0, r1
 8001e34:	e706      	b.n	8001c44 <__udivmoddi4+0x94>
 8001e36:	45c8      	cmp	r8, r9
 8001e38:	d2ae      	bcs.n	8001d98 <__udivmoddi4+0x1e8>
 8001e3a:	ebb9 0e02 	subs.w	lr, r9, r2
 8001e3e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001e42:	3801      	subs	r0, #1
 8001e44:	e7a8      	b.n	8001d98 <__udivmoddi4+0x1e8>
 8001e46:	4631      	mov	r1, r6
 8001e48:	e7ed      	b.n	8001e26 <__udivmoddi4+0x276>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	e799      	b.n	8001d82 <__udivmoddi4+0x1d2>
 8001e4e:	4630      	mov	r0, r6
 8001e50:	e7d4      	b.n	8001dfc <__udivmoddi4+0x24c>
 8001e52:	46d6      	mov	lr, sl
 8001e54:	e77f      	b.n	8001d56 <__udivmoddi4+0x1a6>
 8001e56:	4463      	add	r3, ip
 8001e58:	3802      	subs	r0, #2
 8001e5a:	e74d      	b.n	8001cf8 <__udivmoddi4+0x148>
 8001e5c:	4606      	mov	r6, r0
 8001e5e:	4623      	mov	r3, r4
 8001e60:	4608      	mov	r0, r1
 8001e62:	e70f      	b.n	8001c84 <__udivmoddi4+0xd4>
 8001e64:	3e02      	subs	r6, #2
 8001e66:	4463      	add	r3, ip
 8001e68:	e730      	b.n	8001ccc <__udivmoddi4+0x11c>
 8001e6a:	bf00      	nop

08001e6c <__aeabi_idiv0>:
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop

08001e70 <ELIMAC>:
extern void four_Rounds_aes128_encrypt_ffs(uint8_t* ctext, uint8_t* ctext_bis, const uint8_t* ptext, const uint8_t* ptext_bis, const uint32_t* rkey);
extern void six_Rounds_aes128_encrypt_ffs(uint8_t* ctext, uint8_t* ctext_bis, const uint8_t* ptext, const uint8_t* ptext_bis, const uint32_t* rkey);
extern void eigth_Rounds_aes128_encrypt_ffs(uint8_t* ctext, uint8_t* ctext_bis, const uint8_t* ptext, const uint8_t* ptext_bis, const uint32_t* rkey);


void ELIMAC(unsigned char* plaintext,  unsigned int plaintext_size, unsigned char* key1, unsigned char* key2, unsigned char rounds, unsigned char* tag){
 8001e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e74:	f5ad 7d67 	sub.w	sp, sp, #924	@ 0x39c
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	f507 7664 	add.w	r6, r7, #912	@ 0x390
 8001e7e:	f5a6 765f 	sub.w	r6, r6, #892	@ 0x37c
 8001e82:	6030      	str	r0, [r6, #0]
 8001e84:	f507 7064 	add.w	r0, r7, #912	@ 0x390
 8001e88:	f5a0 7060 	sub.w	r0, r0, #896	@ 0x380
 8001e8c:	6001      	str	r1, [r0, #0]
 8001e8e:	f507 7164 	add.w	r1, r7, #912	@ 0x390
 8001e92:	f5a1 7161 	sub.w	r1, r1, #900	@ 0x384
 8001e96:	600a      	str	r2, [r1, #0]
 8001e98:	f507 7264 	add.w	r2, r7, #912	@ 0x390
 8001e9c:	f5a2 7262 	sub.w	r2, r2, #904	@ 0x388
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	466b      	mov	r3, sp
 8001ea4:	461e      	mov	r6, r3

    unsigned char ptext0[plaintext_size];
 8001ea6:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 8001eaa:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8001eae:	6819      	ldr	r1, [r3, #0]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 8001eb8:	2300      	movs	r3, #0
 8001eba:	6039      	str	r1, [r7, #0]
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	00c3      	lsls	r3, r0, #3
 8001eca:	6838      	ldr	r0, [r7, #0]
 8001ecc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ed0:	6838      	ldr	r0, [r7, #0]
 8001ed2:	00c2      	lsls	r2, r0, #3
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	468a      	mov	sl, r1
 8001ed8:	469b      	mov	fp, r3
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ee6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001eea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001eee:	1dcb      	adds	r3, r1, #7
 8001ef0:	08db      	lsrs	r3, r3, #3
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	ebad 0d03 	sub.w	sp, sp, r3
 8001ef8:	ab02      	add	r3, sp, #8
 8001efa:	3300      	adds	r3, #0
 8001efc:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
    unsigned char ptext1[plaintext_size];
 8001f00:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 8001f04:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8001f08:	6819      	ldr	r1, [r3, #0]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 8001f12:	2300      	movs	r3, #0
 8001f14:	4688      	mov	r8, r1
 8001f16:	4699      	mov	r9, r3
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	460c      	mov	r4, r1
 8001f30:	461d      	mov	r5, r3
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	00eb      	lsls	r3, r5, #3
 8001f3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f40:	00e2      	lsls	r2, r4, #3
 8001f42:	1dcb      	adds	r3, r1, #7
 8001f44:	08db      	lsrs	r3, r3, #3
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	ebad 0d03 	sub.w	sp, sp, r3
 8001f4c:	ab02      	add	r3, sp, #8
 8001f4e:	3300      	adds	r3, #0
 8001f50:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374

    unsigned char i_n1[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 8001f54:	4b94      	ldr	r3, [pc, #592]	@ (80021a8 <ELIMAC+0x338>)
 8001f56:	f507 7457 	add.w	r4, r7, #860	@ 0x35c
 8001f5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char i_n2[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 8001f60:	4b91      	ldr	r3, [pc, #580]	@ (80021a8 <ELIMAC+0x338>)
 8001f62:	f507 7453 	add.w	r4, r7, #844	@ 0x34c
 8001f66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char i_n1_t[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 8001f6c:	4b8e      	ldr	r3, [pc, #568]	@ (80021a8 <ELIMAC+0x338>)
 8001f6e:	f507 744f 	add.w	r4, r7, #828	@ 0x33c
 8001f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char i_n2_t[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 8001f78:	4b8b      	ldr	r3, [pc, #556]	@ (80021a8 <ELIMAC+0x338>)
 8001f7a:	f507 744b 	add.w	r4, r7, #812	@ 0x32c
 8001f7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char S1[bit_size];
    unsigned char S2[bit_size];

    unsigned int add_nonce_0[4] = {0,0,0,0};
 8001f84:	f507 733f 	add.w	r3, r7, #764	@ 0x2fc
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
    unsigned int add_nonce_1[4] = {1,1,1,1};
 8001f92:	4b86      	ldr	r3, [pc, #536]	@ (80021ac <ELIMAC+0x33c>)
 8001f94:	f507 743b 	add.w	r4, r7, #748	@ 0x2ec
 8001f98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned int add_nonce_2[4] = {2,2,2,2};
 8001f9e:	4b84      	ldr	r3, [pc, #528]	@ (80021b0 <ELIMAC+0x340>)
 8001fa0:	f507 7437 	add.w	r4, r7, #732	@ 0x2dc
 8001fa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fa6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    uint32_t rkeys_ffs[88];
    uint32_t rkeys_ffs_H[88];

    for (uint32_t i = 0; i < plaintext_size; i++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8001fb0:	e012      	b.n	8001fd8 <ELIMAC+0x168>
    {
        ptext1[i]=0;
 8001fb2:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001fb6:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8001fba:	4413      	add	r3, r2
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
        ptext0[i]=0;
 8001fc0:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8001fc4:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8001fc8:	4413      	add	r3, r2
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < plaintext_size; i++)
 8001fce:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8001fd8:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 8001fdc:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8001fe0:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d3e3      	bcc.n	8001fb2 <ELIMAC+0x142>
    }

    divide_plaintext(plaintext, ptext0, ptext1, plaintext_size);
 8001fea:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 8001fee:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8001ff2:	f507 7264 	add.w	r2, r7, #912	@ 0x390
 8001ff6:	f5a2 705f 	sub.w	r0, r2, #892	@ 0x37c
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8002000:	f8d7 137c 	ldr.w	r1, [r7, #892]	@ 0x37c
 8002004:	6800      	ldr	r0, [r0, #0]
 8002006:	f000 fae6 	bl	80025d6 <divide_plaintext>

    for (uint32_t i = 0; i < bit_size; i++)
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 8002010:	e012      	b.n	8002038 <ELIMAC+0x1c8>
    {
        S1[i]=0;
 8002012:	f507 7247 	add.w	r2, r7, #796	@ 0x31c
 8002016:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 800201a:	4413      	add	r3, r2
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
        S2[i]=0;
 8002020:	f507 7243 	add.w	r2, r7, #780	@ 0x30c
 8002024:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8002028:	4413      	add	r3, r2
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < bit_size; i++)
 800202e:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8002032:	3301      	adds	r3, #1
 8002034:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 8002038:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 800203c:	2b0f      	cmp	r3, #15
 800203e:	d9e8      	bls.n	8002012 <ELIMAC+0x1a2>
    }

    aes128_keyschedule_ffs_lut(rkeys_ffs_H, key1);
 8002040:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 8002044:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8002048:	f107 021c 	add.w	r2, r7, #28
 800204c:	6819      	ldr	r1, [r3, #0]
 800204e:	4610      	mov	r0, r2
 8002050:	f7ff fa70 	bl	8001534 <aes128_keyschedule_ffs_lut>
    aes128_keyschedule_ffs_lut(rkeys_ffs, key2);
 8002054:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 8002058:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
 800205c:	f507 72be 	add.w	r2, r7, #380	@ 0x17c
 8002060:	6819      	ldr	r1, [r3, #0]
 8002062:	4610      	mov	r0, r2
 8002064:	f7ff fa66 	bl	8001534 <aes128_keyschedule_ffs_lut>

    int block_size = plaintext_size/32;
 8002068:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 800206c:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
    int j = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c


    for (int i = 0; i < block_size; i++){
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8002084:	e06c      	b.n	8002160 <ELIMAC+0x2f0>

        add_nonce(add_nonce_0, (unsigned int *)i_n1,(unsigned int *)i_n1_t, 4);
 8002086:	f507 724f 	add.w	r2, r7, #828	@ 0x33c
 800208a:	f507 7157 	add.w	r1, r7, #860	@ 0x35c
 800208e:	f507 703f 	add.w	r0, r7, #764	@ 0x2fc
 8002092:	2304      	movs	r3, #4
 8002094:	f000 fa52 	bl	800253c <add_nonce>
    	add_nonce(add_nonce_1, (unsigned int *)i_n2,(unsigned int *)i_n2_t, 4);
 8002098:	f507 724b 	add.w	r2, r7, #812	@ 0x32c
 800209c:	f507 7153 	add.w	r1, r7, #844	@ 0x34c
 80020a0:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 80020a4:	2304      	movs	r3, #4
 80020a6:	f000 fa49 	bl	800253c <add_nonce>

        H(i_n1_t, i_n2_t, rkeys_ffs_H, rounds);
 80020aa:	f897 33b8 	ldrb.w	r3, [r7, #952]	@ 0x3b8
 80020ae:	f107 021c 	add.w	r2, r7, #28
 80020b2:	f507 714b 	add.w	r1, r7, #812	@ 0x32c
 80020b6:	f507 704f 	add.w	r0, r7, #828	@ 0x33c
 80020ba:	f000 f87b 	bl	80021b4 <H>
        j = i*16;
 80020be:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
        xor_nonce( ptext0+ (j), i_n1_t, 16);
 80020c8:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80020cc:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 80020d0:	4413      	add	r3, r2
 80020d2:	f507 714f 	add.w	r1, r7, #828	@ 0x33c
 80020d6:	2210      	movs	r2, #16
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 fa57 	bl	800258c <xor_nonce>
        xor_nonce( ptext1+ (j), i_n2_t, 16);
 80020de:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80020e2:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 80020e6:	4413      	add	r3, r2
 80020e8:	f507 714b 	add.w	r1, r7, #812	@ 0x32c
 80020ec:	2210      	movs	r2, #16
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fa4c 	bl	800258c <xor_nonce>

        I(ptext0,  ptext1, rkeys_ffs, 4);
 80020f4:	f507 72be 	add.w	r2, r7, #380	@ 0x17c
 80020f8:	2304      	movs	r3, #4
 80020fa:	f8d7 1374 	ldr.w	r1, [r7, #884]	@ 0x374
 80020fe:	f8d7 037c 	ldr.w	r0, [r7, #892]	@ 0x37c
 8002102:	f000 f939 	bl	8002378 <I>

        xor_nonce( S1,ptext0+ (j), 16);
 8002106:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800210a:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 800210e:	18d1      	adds	r1, r2, r3
 8002110:	f507 7347 	add.w	r3, r7, #796	@ 0x31c
 8002114:	2210      	movs	r2, #16
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fa38 	bl	800258c <xor_nonce>
        xor_nonce( S2,ptext1+ (j), 16);
 800211c:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8002120:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8002124:	18d1      	adds	r1, r2, r3
 8002126:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 800212a:	2210      	movs	r2, #16
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fa2d 	bl	800258c <xor_nonce>

        add_nonce(add_nonce_2, add_nonce_0,add_nonce_0, 4);
 8002132:	f507 723f 	add.w	r2, r7, #764	@ 0x2fc
 8002136:	f507 713f 	add.w	r1, r7, #764	@ 0x2fc
 800213a:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 800213e:	2304      	movs	r3, #4
 8002140:	f000 f9fc 	bl	800253c <add_nonce>
        add_nonce(add_nonce_2, add_nonce_1,add_nonce_1, 4);
 8002144:	f507 723b 	add.w	r2, r7, #748	@ 0x2ec
 8002148:	f507 713b 	add.w	r1, r7, #748	@ 0x2ec
 800214c:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 8002150:	2304      	movs	r3, #4
 8002152:	f000 f9f3 	bl	800253c <add_nonce>
    for (int i = 0; i < block_size; i++){
 8002156:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 800215a:	3301      	adds	r3, #1
 800215c:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8002160:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 8002164:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8002168:	429a      	cmp	r2, r3
 800216a:	db8c      	blt.n	8002086 <ELIMAC+0x216>

    }
    //print_array(S1,16);
    //print_array(S2,16);
    xor_nonce( S1,S2, 16);
 800216c:	f507 7143 	add.w	r1, r7, #780	@ 0x30c
 8002170:	f507 7347 	add.w	r3, r7, #796	@ 0x31c
 8002174:	2210      	movs	r2, #16
 8002176:	4618      	mov	r0, r3
 8002178:	f000 fa08 	bl	800258c <xor_nonce>


    aes128_encrypt_ffs(tag, S2, S1,S1, rkeys_ffs);
 800217c:	f507 7047 	add.w	r0, r7, #796	@ 0x31c
 8002180:	f507 7247 	add.w	r2, r7, #796	@ 0x31c
 8002184:	f507 7143 	add.w	r1, r7, #780	@ 0x30c
 8002188:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	4603      	mov	r3, r0
 8002190:	f8d7 03bc 	ldr.w	r0, [r7, #956]	@ 0x3bc
 8002194:	f7fe fca6 	bl	8000ae4 <aes128_encrypt_ffs>
 8002198:	46b5      	mov	sp, r6

}
 800219a:	bf00      	nop
 800219c:	f507 7765 	add.w	r7, r7, #916	@ 0x394
 80021a0:	46bd      	mov	sp, r7
 80021a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021a6:	bf00      	nop
 80021a8:	08006ae4 	.word	0x08006ae4
 80021ac:	08006af4 	.word	0x08006af4
 80021b0:	08006b04 	.word	0x08006b04

080021b4 <H>:

void H(unsigned char* ptext0,  unsigned char *ptext1, uint32_t *rkeys_ffs_H, unsigned char rounds){
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b099      	sub	sp, #100	@ 0x64
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	70fb      	strb	r3, [r7, #3]
	 unsigned char temp_0[16]={0};
 80021c2:	2300      	movs	r3, #0
 80021c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80021c6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
	 unsigned char temp_1[16]={0};
 80021d2:	2300      	movs	r3, #0
 80021d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80021d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
	 //exclusive only if use 2 or 6 rounds
	 unsigned char shift_0[16]={0,9,2,11,4,13,6,7,8,1,10,3,12,5,14,15};
 80021e2:	4b63      	ldr	r3, [pc, #396]	@ (8002370 <H+0x1bc>)
 80021e4:	f107 0420 	add.w	r4, r7, #32
 80021e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 unsigned char shift_1[16]={0,9,2,11,4,13,6,15,8,1,10,3,12,5,14,7};
 80021ee:	4b61      	ldr	r3, [pc, #388]	@ (8002374 <H+0x1c0>)
 80021f0:	f107 0410 	add.w	r4, r7, #16
 80021f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    switch (rounds)
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	3b02      	subs	r3, #2
 80021fe:	2b08      	cmp	r3, #8
 8002200:	f200 80b1 	bhi.w	8002366 <H+0x1b2>
 8002204:	a201      	add	r2, pc, #4	@ (adr r2, 800220c <H+0x58>)
 8002206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220a:	bf00      	nop
 800220c:	08002231 	.word	0x08002231
 8002210:	08002367 	.word	0x08002367
 8002214:	080022b1 	.word	0x080022b1
 8002218:	08002367 	.word	0x08002367
 800221c:	080022c3 	.word	0x080022c3
 8002220:	08002367 	.word	0x08002367
 8002224:	08002343 	.word	0x08002343
 8002228:	08002367 	.word	0x08002367
 800222c:	08002355 	.word	0x08002355
    {
    case 2:

        two_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f7fe fcbe 	bl	8000bbc <two_Rounds_aes128_encrypt_ffs>
        memcpy(temp_0, ptext0, sizeof(unsigned char)*16);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	6859      	ldr	r1, [r3, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        memcpy(temp_1, ptext1, sizeof(unsigned char)*16);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	6859      	ldr	r1, [r3, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        for (size_t i = 0; i < 16; ++i) {
 8002260:	2300      	movs	r3, #0
 8002262:	657b      	str	r3, [r7, #84]	@ 0x54
 8002264:	e020      	b.n	80022a8 <H+0xf4>
        	ptext0[i]=temp_0[shift_0[i]];
 8002266:	f107 0220 	add.w	r2, r7, #32
 800226a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800226c:	4413      	add	r3, r2
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002276:	4413      	add	r3, r2
 8002278:	f101 0258 	add.w	r2, r1, #88	@ 0x58
 800227c:	443a      	add	r2, r7
 800227e:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002282:	701a      	strb	r2, [r3, #0]
        	ptext1[i]=temp_1[shift_1[i]];
 8002284:	f107 0210 	add.w	r2, r7, #16
 8002288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800228a:	4413      	add	r3, r2
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	4619      	mov	r1, r3
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002294:	4413      	add	r3, r2
 8002296:	f101 0258 	add.w	r2, r1, #88	@ 0x58
 800229a:	443a      	add	r2, r7
 800229c:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 80022a0:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < 16; ++i) {
 80022a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a4:	3301      	adds	r3, #1
 80022a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80022a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022aa:	2b0f      	cmp	r3, #15
 80022ac:	d9db      	bls.n	8002266 <H+0xb2>
        }
        break;
 80022ae:	e05b      	b.n	8002368 <H+0x1b4>
    case 4:
        four_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7fe fcb6 	bl	8000c2c <four_Rounds_aes128_encrypt_ffs>
        break;
 80022c0:	e052      	b.n	8002368 <H+0x1b4>
    case 6:
        six_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f7fe fced 	bl	8000cac <six_Rounds_aes128_encrypt_ffs>
        memcpy(shift_0, ptext0, sizeof(unsigned char)*16);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f107 0420 	add.w	r4, r7, #32
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(shift_1, ptext1, sizeof(unsigned char)*16);
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f107 0410 	add.w	r4, r7, #16
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		for (size_t i = 0; i < 16; ++i) {
 80022f2:	2300      	movs	r3, #0
 80022f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80022f6:	e020      	b.n	800233a <H+0x186>
			ptext0[i]=temp_0[shift_0[i]];
 80022f8:	f107 0220 	add.w	r2, r7, #32
 80022fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022fe:	4413      	add	r3, r2
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	4619      	mov	r1, r3
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002308:	4413      	add	r3, r2
 800230a:	f101 0258 	add.w	r2, r1, #88	@ 0x58
 800230e:	443a      	add	r2, r7
 8002310:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002314:	701a      	strb	r2, [r3, #0]
			ptext1[i]=temp_1[shift_1[i]];
 8002316:	f107 0210 	add.w	r2, r7, #16
 800231a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800231c:	4413      	add	r3, r2
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002326:	4413      	add	r3, r2
 8002328:	f101 0258 	add.w	r2, r1, #88	@ 0x58
 800232c:	443a      	add	r2, r7
 800232e:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8002332:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < 16; ++i) {
 8002334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002336:	3301      	adds	r3, #1
 8002338:	653b      	str	r3, [r7, #80]	@ 0x50
 800233a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800233c:	2b0f      	cmp	r3, #15
 800233e:	d9db      	bls.n	80022f8 <H+0x144>
		}
        break;
 8002340:	e012      	b.n	8002368 <H+0x1b4>
    case 8:
        eigth_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	68b9      	ldr	r1, [r7, #8]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f7fe fcf5 	bl	8000d3c <eigth_Rounds_aes128_encrypt_ffs>
        break;
 8002352:	e009      	b.n	8002368 <H+0x1b4>
    case 10:
    	   aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f7fe fbc0 	bl	8000ae4 <aes128_encrypt_ffs>
              break;
 8002364:	e000      	b.n	8002368 <H+0x1b4>
    default:
        break;
 8002366:	bf00      	nop
    }

}
 8002368:	bf00      	nop
 800236a:	375c      	adds	r7, #92	@ 0x5c
 800236c:	46bd      	mov	sp, r7
 800236e:	bd90      	pop	{r4, r7, pc}
 8002370:	08006b14 	.word	0x08006b14
 8002374:	08006b24 	.word	0x08006b24

08002378 <I>:

void I(unsigned char* ptext0,  unsigned char *ptext1, uint32_t *rkeys_ffs_H, unsigned char rounds){
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b099      	sub	sp, #100	@ 0x64
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	70fb      	strb	r3, [r7, #3]

   unsigned char temp_0[16]={0};
 8002386:	2300      	movs	r3, #0
 8002388:	643b      	str	r3, [r7, #64]	@ 0x40
 800238a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
   unsigned char temp_1[16]={0};
 8002396:	2300      	movs	r3, #0
 8002398:	633b      	str	r3, [r7, #48]	@ 0x30
 800239a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
   //exclusive only if use 2 or 6 rounds
   unsigned char shift_0[16]={0,9,2,11,4,13,6,7,8,1,10,3,12,5,14,15};
 80023a6:	4b63      	ldr	r3, [pc, #396]	@ (8002534 <I+0x1bc>)
 80023a8:	f107 0420 	add.w	r4, r7, #32
 80023ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   unsigned char shift_1[16]={0,9,2,11,4,13,6,15,8,1,10,3,12,5,14,7};
 80023b2:	4b61      	ldr	r3, [pc, #388]	@ (8002538 <I+0x1c0>)
 80023b4:	f107 0410 	add.w	r4, r7, #16
 80023b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   switch (rounds)
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	3b02      	subs	r3, #2
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	f200 80b1 	bhi.w	800252a <I+0x1b2>
 80023c8:	a201      	add	r2, pc, #4	@ (adr r2, 80023d0 <I+0x58>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	080023f5 	.word	0x080023f5
 80023d4:	0800252b 	.word	0x0800252b
 80023d8:	08002475 	.word	0x08002475
 80023dc:	0800252b 	.word	0x0800252b
 80023e0:	08002487 	.word	0x08002487
 80023e4:	0800252b 	.word	0x0800252b
 80023e8:	08002507 	.word	0x08002507
 80023ec:	0800252b 	.word	0x0800252b
 80023f0:	08002519 	.word	0x08002519
   {
   case 2:

       two_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f7fe fbdc 	bl	8000bbc <two_Rounds_aes128_encrypt_ffs>
       memcpy(temp_0, ptext0, sizeof(unsigned char)*16);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	6859      	ldr	r1, [r3, #4]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
       memcpy(temp_1, ptext1, sizeof(unsigned char)*16);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	6859      	ldr	r1, [r3, #4]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
       for (size_t i = 0; i < 16; ++i) {
 8002424:	2300      	movs	r3, #0
 8002426:	657b      	str	r3, [r7, #84]	@ 0x54
 8002428:	e020      	b.n	800246c <I+0xf4>
       	ptext0[i]=temp_0[shift_0[i]];
 800242a:	f107 0220 	add.w	r2, r7, #32
 800242e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002430:	4413      	add	r3, r2
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800243a:	4413      	add	r3, r2
 800243c:	f101 0258 	add.w	r2, r1, #88	@ 0x58
 8002440:	443a      	add	r2, r7
 8002442:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002446:	701a      	strb	r2, [r3, #0]
       	ptext1[i]=temp_1[shift_1[i]];
 8002448:	f107 0210 	add.w	r2, r7, #16
 800244c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800244e:	4413      	add	r3, r2
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4619      	mov	r1, r3
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002458:	4413      	add	r3, r2
 800245a:	f101 0258 	add.w	r2, r1, #88	@ 0x58
 800245e:	443a      	add	r2, r7
 8002460:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8002464:	701a      	strb	r2, [r3, #0]
       for (size_t i = 0; i < 16; ++i) {
 8002466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002468:	3301      	adds	r3, #1
 800246a:	657b      	str	r3, [r7, #84]	@ 0x54
 800246c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800246e:	2b0f      	cmp	r3, #15
 8002470:	d9db      	bls.n	800242a <I+0xb2>
       }
       break;
 8002472:	e05b      	b.n	800252c <I+0x1b4>
   case 4:
       four_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f7fe fbd4 	bl	8000c2c <four_Rounds_aes128_encrypt_ffs>
       break;
 8002484:	e052      	b.n	800252c <I+0x1b4>
   case 6:
       six_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f7fe fc0b 	bl	8000cac <six_Rounds_aes128_encrypt_ffs>
       memcpy(shift_0, ptext0, sizeof(unsigned char)*16);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f107 0420 	add.w	r4, r7, #32
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(shift_1, ptext1, sizeof(unsigned char)*16);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f107 0410 	add.w	r4, r7, #16
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		for (size_t i = 0; i < 16; ++i) {
 80024b6:	2300      	movs	r3, #0
 80024b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80024ba:	e020      	b.n	80024fe <I+0x186>
			ptext0[i]=temp_0[shift_0[i]];
 80024bc:	f107 0220 	add.w	r2, r7, #32
 80024c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024c2:	4413      	add	r3, r2
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	4619      	mov	r1, r3
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024cc:	4413      	add	r3, r2
 80024ce:	f101 0258 	add.w	r2, r1, #88	@ 0x58
 80024d2:	443a      	add	r2, r7
 80024d4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80024d8:	701a      	strb	r2, [r3, #0]
			ptext1[i]=temp_1[shift_1[i]];
 80024da:	f107 0210 	add.w	r2, r7, #16
 80024de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024e0:	4413      	add	r3, r2
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024ea:	4413      	add	r3, r2
 80024ec:	f101 0258 	add.w	r2, r1, #88	@ 0x58
 80024f0:	443a      	add	r2, r7
 80024f2:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 80024f6:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < 16; ++i) {
 80024f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024fa:	3301      	adds	r3, #1
 80024fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80024fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002500:	2b0f      	cmp	r3, #15
 8002502:	d9db      	bls.n	80024bc <I+0x144>
		}
       break;
 8002504:	e012      	b.n	800252c <I+0x1b4>
   case 8:
       eigth_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f7fe fc13 	bl	8000d3c <eigth_Rounds_aes128_encrypt_ffs>
       break;
 8002516:	e009      	b.n	800252c <I+0x1b4>
   case 10:
	   aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7fe fade 	bl	8000ae4 <aes128_encrypt_ffs>
          break;
 8002528:	e000      	b.n	800252c <I+0x1b4>

   default:
       break;
 800252a:	bf00      	nop
   }

}
 800252c:	bf00      	nop
 800252e:	375c      	adds	r7, #92	@ 0x5c
 8002530:	46bd      	mov	sp, r7
 8002532:	bd90      	pop	{r4, r7, pc}
 8002534:	08006b14 	.word	0x08006b14
 8002538:	08006b24 	.word	0x08006b24

0800253c <add_nonce>:

void add_nonce(unsigned int * add_nonce, unsigned int * nonce, unsigned int * nonce_result, unsigned int size){
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < size; i++){
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e012      	b.n	8002576 <add_nonce+0x3a>
        nonce_result[i]=nonce[i]+ add_nonce[i];
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	4413      	add	r3, r2
 8002558:	6819      	ldr	r1, [r3, #0]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4413      	add	r3, r2
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4403      	add	r3, r0
 800256c:	440a      	add	r2, r1
 800256e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < size; i++){
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	3301      	adds	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d3e8      	bcc.n	8002550 <add_nonce+0x14>
    }

}
 800257e:	bf00      	nop
 8002580:	bf00      	nop
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <xor_nonce>:

void xor_nonce(unsigned char * plaintext, unsigned char * nonce, unsigned int size){
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < size; i++){
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	e010      	b.n	80025c0 <xor_nonce+0x34>
        plaintext[i]=nonce[i]^ plaintext[i];
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	4413      	add	r3, r2
 80025a4:	7819      	ldrb	r1, [r3, #0]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	4413      	add	r3, r2
 80025ac:	781a      	ldrb	r2, [r3, #0]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	4403      	add	r3, r0
 80025b4:	404a      	eors	r2, r1
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < size; i++){
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	3301      	adds	r3, #1
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d3ea      	bcc.n	800259e <xor_nonce+0x12>
    }

}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	371c      	adds	r7, #28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <divide_plaintext>:
void divide_plaintext(unsigned char* plaintext, unsigned char* ptext0,  unsigned char* ptext1,unsigned int plaintext_size){
 80025d6:	b480      	push	{r7}
 80025d8:	b089      	sub	sp, #36	@ 0x24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	603b      	str	r3, [r7, #0]
    int condicion = 1;
 80025e4:	2301      	movs	r3, #1
 80025e6:	61fb      	str	r3, [r7, #28]
    size_t j=0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61bb      	str	r3, [r7, #24]
    size_t k=0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	e02c      	b.n	8002650 <divide_plaintext+0x7a>

        if (i%16==0 && i!=0)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d106      	bne.n	800260e <divide_plaintext+0x38>
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <divide_plaintext+0x38>
            condicion=condicion^1;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f083 0301 	eor.w	r3, r3, #1
 800260c:	61fb      	str	r3, [r7, #28]

        if (condicion)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <divide_plaintext+0x50>
            ptext0[j] = plaintext[i];
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	441a      	add	r2, r3
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	440b      	add	r3, r1
 8002620:	7812      	ldrb	r2, [r2, #0]
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e007      	b.n	8002636 <divide_plaintext+0x60>
        else
            ptext1[k] = plaintext[i];
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	441a      	add	r2, r3
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	440b      	add	r3, r1
 8002632:	7812      	ldrb	r2, [r2, #0]
 8002634:	701a      	strb	r2, [r3, #0]

        if (condicion)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <divide_plaintext+0x6e>
            j++;
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	3301      	adds	r3, #1
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	e002      	b.n	800264a <divide_plaintext+0x74>
        else
            k++;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3301      	adds	r3, #1
 8002648:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	3301      	adds	r3, #1
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d3ce      	bcc.n	80025f6 <divide_plaintext+0x20>
    }
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3724      	adds	r7, #36	@ 0x24
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <serial_printf>:
 *      Author: cuauhtemoc
 */

#include "Serial.h"

void serial_printf(UART_HandleTypeDef *huart, uint8_t *pData, uint32_t Timeout){
 8002666:	b580      	push	{r7, lr}
 8002668:	b086      	sub	sp, #24
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
	uint16_t Size = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	82fb      	strh	r3, [r7, #22]
	do{
		Size++;
 8002676:	8afb      	ldrh	r3, [r7, #22]
 8002678:	3301      	adds	r3, #1
 800267a:	82fb      	strh	r3, [r7, #22]
	}while(pData[Size]!='\0');
 800267c:	8afb      	ldrh	r3, [r7, #22]
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	4413      	add	r3, r2
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f6      	bne.n	8002676 <serial_printf+0x10>
	HAL_UART_Transmit(huart, pData,Size, HAL_MAX_DELAY);
 8002688:	8afa      	ldrh	r2, [r7, #22]
 800268a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f002 fdd3 	bl	800523c <HAL_UART_Transmit>
}
 8002696:	bf00      	nop
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <DWT_Init>:
static unsigned char asociated_data[plaintext_size];
static unsigned int bytes[8] = {32, 64, 128, 192, 256, 320, 512,1024};

char buffer [1024];
unsigned int performance[REP];
void DWT_Init(void) {
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0

    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80026a4:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <DWT_Init+0x34>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a0a      	ldr	r2, [pc, #40]	@ (80026d4 <DWT_Init+0x34>)
 80026aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026ae:	60d3      	str	r3, [r2, #12]
    DWT->LAR = 0xC5ACCE55;
 80026b0:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <DWT_Init+0x38>)
 80026b2:	4a0a      	ldr	r2, [pc, #40]	@ (80026dc <DWT_Init+0x3c>)
 80026b4:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
    DWT->CYCCNT = 0;
 80026b8:	4b07      	ldr	r3, [pc, #28]	@ (80026d8 <DWT_Init+0x38>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80026be:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <DWT_Init+0x38>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a05      	ldr	r2, [pc, #20]	@ (80026d8 <DWT_Init+0x38>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6013      	str	r3, [r2, #0]
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000edf0 	.word	0xe000edf0
 80026d8:	e0001000 	.word	0xe0001000
 80026dc:	c5acce55 	.word	0xc5acce55

080026e0 <start_timer>:

void start_timer(void) {
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0;
 80026e4:	4b03      	ldr	r3, [pc, #12]	@ (80026f4 <start_timer+0x14>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	605a      	str	r2, [r3, #4]
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e0001000 	.word	0xe0001000

080026f8 <stop_timer>:

uint32_t stop_timer(void) {
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 80026fc:	4b03      	ldr	r3, [pc, #12]	@ (800270c <stop_timer+0x14>)
 80026fe:	685b      	ldr	r3, [r3, #4]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	e0001000 	.word	0xe0001000

08002710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002716:	f000 fcc4 	bl	80030a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800271a:	f000 f8af 	bl	800287c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800271e:	f000 f9c1 	bl	8002aa4 <MX_GPIO_Init>
  MX_ETH_Init();
 8002722:	f000 f913 	bl	800294c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8002726:	f000 f95f 	bl	80029e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800272a:	f000 f98d 	bl	8002a48 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */


    for (uint32_t i = 0; i < plaintext_size; i++){
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	e010      	b.n	8002756 <main+0x46>
  	  plaintext[i] =i;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	b2d9      	uxtb	r1, r3
 8002738:	4a44      	ldr	r2, [pc, #272]	@ (800284c <main+0x13c>)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	4413      	add	r3, r2
 800273e:	460a      	mov	r2, r1
 8002740:	701a      	strb	r2, [r3, #0]
  	  asociated_data[i]=i;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	b2d9      	uxtb	r1, r3
 8002746:	4a42      	ldr	r2, [pc, #264]	@ (8002850 <main+0x140>)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	4413      	add	r3, r2
 800274c:	460a      	mov	r2, r1
 800274e:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < plaintext_size; i++){
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	3301      	adds	r3, #1
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800275c:	d3ea      	bcc.n	8002734 <main+0x24>

  	serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);*/



    DWT_Init(); // Inicializar el contador de ciclos
 800275e:	f7ff ff9f 	bl	80026a0 <DWT_Init>
    uint32_t cycles=0;
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
    uint32_t total_cycles=0;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]

    int i=0;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]


    i=0;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
	cycles=0;
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
	total_cycles=0;
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
	sprintf(buffer,"\n ELIMAC 12");
 800277a:	4936      	ldr	r1, [pc, #216]	@ (8002854 <main+0x144>)
 800277c:	4836      	ldr	r0, [pc, #216]	@ (8002858 <main+0x148>)
 800277e:	f003 fd05 	bl	800618c <siprintf>
		serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8002782:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002786:	4934      	ldr	r1, [pc, #208]	@ (8002858 <main+0x148>)
 8002788:	4834      	ldr	r0, [pc, #208]	@ (800285c <main+0x14c>)
 800278a:	f7ff ff6c 	bl	8002666 <serial_printf>
		for (int j = 0; j < Number_test; j++) {
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	e02c      	b.n	80027ee <main+0xde>
			for (i = 0; i < REP; i++) {
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e018      	b.n	80027cc <main+0xbc>
				start_timer(); // Iniciar el contador de ciclos
 800279a:	f7ff ffa1 	bl	80026e0 <start_timer>
				ELIMAC(plaintext, bytes[j], key1, key1, 8, tag);
 800279e:	4a30      	ldr	r2, [pc, #192]	@ (8002860 <main+0x150>)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80027a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002864 <main+0x154>)
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	2308      	movs	r3, #8
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002868 <main+0x158>)
 80027b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002868 <main+0x158>)
 80027b2:	4826      	ldr	r0, [pc, #152]	@ (800284c <main+0x13c>)
 80027b4:	f7ff fb5c 	bl	8001e70 <ELIMAC>
				cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 80027b8:	f7ff ff9e 	bl	80026f8 <stop_timer>
 80027bc:	6078      	str	r0, [r7, #4]
				total_cycles=cycles+total_cycles;
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4413      	add	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
			for (i = 0; i < REP; i++) {
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	3301      	adds	r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b1d      	cmp	r3, #29
 80027d0:	dde3      	ble.n	800279a <main+0x8a>
			}
			performance[j] = total_cycles/REP;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4a25      	ldr	r2, [pc, #148]	@ (800286c <main+0x15c>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	091a      	lsrs	r2, r3, #4
 80027dc:	4924      	ldr	r1, [pc, #144]	@ (8002870 <main+0x160>)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			total_cycles=0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
		for (int j = 0; j < Number_test; j++) {
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	3301      	adds	r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b06      	cmp	r3, #6
 80027f2:	ddcf      	ble.n	8002794 <main+0x84>
		}
	  for (i = 0; i < Number_test; i++) {
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	e020      	b.n	800283c <main+0x12c>
			sprintf(buffer,"\n bytes %u ", bytes[i]);
 80027fa:	4a19      	ldr	r2, [pc, #100]	@ (8002860 <main+0x150>)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002802:	461a      	mov	r2, r3
 8002804:	491b      	ldr	r1, [pc, #108]	@ (8002874 <main+0x164>)
 8002806:	4814      	ldr	r0, [pc, #80]	@ (8002858 <main+0x148>)
 8002808:	f003 fcc0 	bl	800618c <siprintf>
			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 800280c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002810:	4911      	ldr	r1, [pc, #68]	@ (8002858 <main+0x148>)
 8002812:	4812      	ldr	r0, [pc, #72]	@ (800285c <main+0x14c>)
 8002814:	f7ff ff27 	bl	8002666 <serial_printf>
			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 8002818:	4a15      	ldr	r2, [pc, #84]	@ (8002870 <main+0x160>)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4915      	ldr	r1, [pc, #84]	@ (8002878 <main+0x168>)
 8002824:	480c      	ldr	r0, [pc, #48]	@ (8002858 <main+0x148>)
 8002826:	f003 fcb1 	bl	800618c <siprintf>
			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 800282a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800282e:	490a      	ldr	r1, [pc, #40]	@ (8002858 <main+0x148>)
 8002830:	480a      	ldr	r0, [pc, #40]	@ (800285c <main+0x14c>)
 8002832:	f7ff ff18 	bl	8002666 <serial_printf>
	  for (i = 0; i < Number_test; i++) {
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3301      	adds	r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b06      	cmp	r3, #6
 8002840:	dddb      	ble.n	80027fa <main+0xea>
 8002842:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8002844:	4618      	mov	r0, r3
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000848 	.word	0x20000848
 8002850:	20001848 	.word	0x20001848
 8002854:	08006b48 	.word	0x08006b48
 8002858:	20002848 	.word	0x20002848
 800285c:	200002d0 	.word	0x200002d0
 8002860:	20000010 	.word	0x20000010
 8002864:	20000838 	.word	0x20000838
 8002868:	20000000 	.word	0x20000000
 800286c:	88888889 	.word	0x88888889
 8002870:	20002c48 	.word	0x20002c48
 8002874:	08006b54 	.word	0x08006b54
 8002878:	08006b60 	.word	0x08006b60

0800287c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b094      	sub	sp, #80	@ 0x50
 8002880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002882:	f107 0320 	add.w	r3, r7, #32
 8002886:	2230      	movs	r2, #48	@ 0x30
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f003 fc9e 	bl	80061cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002890:	f107 030c 	add.w	r3, r7, #12
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80028a0:	f001 fbb4 	bl	800400c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028a4:	4b27      	ldr	r3, [pc, #156]	@ (8002944 <SystemClock_Config+0xc8>)
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	4a26      	ldr	r2, [pc, #152]	@ (8002944 <SystemClock_Config+0xc8>)
 80028aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b0:	4b24      	ldr	r3, [pc, #144]	@ (8002944 <SystemClock_Config+0xc8>)
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80028bc:	4b22      	ldr	r3, [pc, #136]	@ (8002948 <SystemClock_Config+0xcc>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80028c4:	4a20      	ldr	r2, [pc, #128]	@ (8002948 <SystemClock_Config+0xcc>)
 80028c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002948 <SystemClock_Config+0xcc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028d8:	2301      	movs	r3, #1
 80028da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80028dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80028e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028e2:	2302      	movs	r3, #2
 80028e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80028ec:	2304      	movs	r3, #4
 80028ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80028f0:	2348      	movs	r3, #72	@ 0x48
 80028f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028f4:	2302      	movs	r3, #2
 80028f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80028f8:	2303      	movs	r3, #3
 80028fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028fc:	f107 0320 	add.w	r3, r7, #32
 8002900:	4618      	mov	r0, r3
 8002902:	f001 fb93 	bl	800402c <HAL_RCC_OscConfig>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800290c:	f000 f96c 	bl	8002be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002910:	230f      	movs	r3, #15
 8002912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002914:	2302      	movs	r3, #2
 8002916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800291c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002926:	f107 030c 	add.w	r3, r7, #12
 800292a:	2102      	movs	r1, #2
 800292c:	4618      	mov	r0, r3
 800292e:	f001 fe21 	bl	8004574 <HAL_RCC_ClockConfig>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002938:	f000 f956 	bl	8002be8 <Error_Handler>
  }
}
 800293c:	bf00      	nop
 800293e:	3750      	adds	r7, #80	@ 0x50
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800
 8002948:	40007000 	.word	0x40007000

0800294c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002950:	4b1f      	ldr	r3, [pc, #124]	@ (80029d0 <MX_ETH_Init+0x84>)
 8002952:	4a20      	ldr	r2, [pc, #128]	@ (80029d4 <MX_ETH_Init+0x88>)
 8002954:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002956:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <MX_ETH_Init+0x8c>)
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800295c:	4b1e      	ldr	r3, [pc, #120]	@ (80029d8 <MX_ETH_Init+0x8c>)
 800295e:	2280      	movs	r2, #128	@ 0x80
 8002960:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002962:	4b1d      	ldr	r3, [pc, #116]	@ (80029d8 <MX_ETH_Init+0x8c>)
 8002964:	22e1      	movs	r2, #225	@ 0xe1
 8002966:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002968:	4b1b      	ldr	r3, [pc, #108]	@ (80029d8 <MX_ETH_Init+0x8c>)
 800296a:	2200      	movs	r2, #0
 800296c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800296e:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <MX_ETH_Init+0x8c>)
 8002970:	2200      	movs	r2, #0
 8002972:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002974:	4b18      	ldr	r3, [pc, #96]	@ (80029d8 <MX_ETH_Init+0x8c>)
 8002976:	2200      	movs	r2, #0
 8002978:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800297a:	4b15      	ldr	r3, [pc, #84]	@ (80029d0 <MX_ETH_Init+0x84>)
 800297c:	4a16      	ldr	r2, [pc, #88]	@ (80029d8 <MX_ETH_Init+0x8c>)
 800297e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002980:	4b13      	ldr	r3, [pc, #76]	@ (80029d0 <MX_ETH_Init+0x84>)
 8002982:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002986:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002988:	4b11      	ldr	r3, [pc, #68]	@ (80029d0 <MX_ETH_Init+0x84>)
 800298a:	4a14      	ldr	r2, [pc, #80]	@ (80029dc <MX_ETH_Init+0x90>)
 800298c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800298e:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <MX_ETH_Init+0x84>)
 8002990:	4a13      	ldr	r2, [pc, #76]	@ (80029e0 <MX_ETH_Init+0x94>)
 8002992:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002994:	4b0e      	ldr	r3, [pc, #56]	@ (80029d0 <MX_ETH_Init+0x84>)
 8002996:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800299a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800299c:	480c      	ldr	r0, [pc, #48]	@ (80029d0 <MX_ETH_Init+0x84>)
 800299e:	f000 fce7 	bl	8003370 <HAL_ETH_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80029a8:	f000 f91e 	bl	8002be8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80029ac:	2238      	movs	r2, #56	@ 0x38
 80029ae:	2100      	movs	r1, #0
 80029b0:	480c      	ldr	r0, [pc, #48]	@ (80029e4 <MX_ETH_Init+0x98>)
 80029b2:	f003 fc0b 	bl	80061cc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80029b6:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <MX_ETH_Init+0x98>)
 80029b8:	2221      	movs	r2, #33	@ 0x21
 80029ba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80029bc:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <MX_ETH_Init+0x98>)
 80029be:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80029c2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80029c4:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <MX_ETH_Init+0x98>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000220 	.word	0x20000220
 80029d4:	40028000 	.word	0x40028000
 80029d8:	20002cc0 	.word	0x20002cc0
 80029dc:	2000012c 	.word	0x2000012c
 80029e0:	2000008c 	.word	0x2000008c
 80029e4:	200001e8 	.word	0x200001e8

080029e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029ec:	4b14      	ldr	r3, [pc, #80]	@ (8002a40 <MX_USART3_UART_Init+0x58>)
 80029ee:	4a15      	ldr	r2, [pc, #84]	@ (8002a44 <MX_USART3_UART_Init+0x5c>)
 80029f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029f2:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <MX_USART3_UART_Init+0x58>)
 80029f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029fa:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <MX_USART3_UART_Init+0x58>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a00:	4b0f      	ldr	r3, [pc, #60]	@ (8002a40 <MX_USART3_UART_Init+0x58>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a06:	4b0e      	ldr	r3, [pc, #56]	@ (8002a40 <MX_USART3_UART_Init+0x58>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <MX_USART3_UART_Init+0x58>)
 8002a0e:	220c      	movs	r2, #12
 8002a10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a12:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <MX_USART3_UART_Init+0x58>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a18:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <MX_USART3_UART_Init+0x58>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a1e:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <MX_USART3_UART_Init+0x58>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a24:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <MX_USART3_UART_Init+0x58>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a2a:	4805      	ldr	r0, [pc, #20]	@ (8002a40 <MX_USART3_UART_Init+0x58>)
 8002a2c:	f002 fbb8 	bl	80051a0 <HAL_UART_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002a36:	f000 f8d7 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200002d0 	.word	0x200002d0
 8002a44:	40004800 	.word	0x40004800

08002a48 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002a4c:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a4e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002a52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002a54:	4b12      	ldr	r3, [pc, #72]	@ (8002aa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a56:	2206      	movs	r2, #6
 8002a58:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002a5a:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002a60:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002a66:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a68:	2202      	movs	r2, #2
 8002a6a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002a72:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002a78:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002a7e:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002a84:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002a8a:	4805      	ldr	r0, [pc, #20]	@ (8002aa0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a8c:	f001 f983 	bl	8003d96 <HAL_PCD_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002a96:	f000 f8a7 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000358 	.word	0x20000358

08002aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	@ 0x30
 8002aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aaa:	f107 031c 	add.w	r3, r7, #28
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
 8002ab8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aba:	4b47      	ldr	r3, [pc, #284]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	4a46      	ldr	r2, [pc, #280]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002ac0:	f043 0304 	orr.w	r3, r3, #4
 8002ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac6:	4b44      	ldr	r3, [pc, #272]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	61bb      	str	r3, [r7, #24]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ad2:	4b41      	ldr	r3, [pc, #260]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	4a40      	ldr	r2, [pc, #256]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ade:	4b3e      	ldr	r3, [pc, #248]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aea:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	4a3a      	ldr	r2, [pc, #232]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af6:	4b38      	ldr	r3, [pc, #224]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b02:	4b35      	ldr	r3, [pc, #212]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	4a34      	ldr	r2, [pc, #208]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0e:	4b32      	ldr	r3, [pc, #200]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1e:	4a2e      	ldr	r2, [pc, #184]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002b20:	f043 0308 	orr.w	r3, r3, #8
 8002b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b26:	4b2c      	ldr	r3, [pc, #176]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b32:	4b29      	ldr	r3, [pc, #164]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	4a28      	ldr	r2, [pc, #160]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002b38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b3e:	4b26      	ldr	r3, [pc, #152]	@ (8002bd8 <MX_GPIO_Init+0x134>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002b50:	4822      	ldr	r0, [pc, #136]	@ (8002bdc <MX_GPIO_Init+0x138>)
 8002b52:	f001 f907 	bl	8003d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2140      	movs	r1, #64	@ 0x40
 8002b5a:	4821      	ldr	r0, [pc, #132]	@ (8002be0 <MX_GPIO_Init+0x13c>)
 8002b5c:	f001 f902 	bl	8003d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002b60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b66:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002b70:	f107 031c 	add.w	r3, r7, #28
 8002b74:	4619      	mov	r1, r3
 8002b76:	481b      	ldr	r0, [pc, #108]	@ (8002be4 <MX_GPIO_Init+0x140>)
 8002b78:	f000 ff48 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002b7c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b82:	2301      	movs	r3, #1
 8002b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8e:	f107 031c 	add.w	r3, r7, #28
 8002b92:	4619      	mov	r1, r3
 8002b94:	4811      	ldr	r0, [pc, #68]	@ (8002bdc <MX_GPIO_Init+0x138>)
 8002b96:	f000 ff39 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002b9a:	2340      	movs	r3, #64	@ 0x40
 8002b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002baa:	f107 031c 	add.w	r3, r7, #28
 8002bae:	4619      	mov	r1, r3
 8002bb0:	480b      	ldr	r0, [pc, #44]	@ (8002be0 <MX_GPIO_Init+0x13c>)
 8002bb2:	f000 ff2b 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002bb6:	2380      	movs	r3, #128	@ 0x80
 8002bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	f107 031c 	add.w	r3, r7, #28
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4805      	ldr	r0, [pc, #20]	@ (8002be0 <MX_GPIO_Init+0x13c>)
 8002bca:	f000 ff1f 	bl	8003a0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bce:	bf00      	nop
 8002bd0:	3730      	adds	r7, #48	@ 0x30
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020400 	.word	0x40020400
 8002be0:	40021800 	.word	0x40021800
 8002be4:	40020800 	.word	0x40020800

08002be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bec:	b672      	cpsid	i
}
 8002bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bf0:	bf00      	nop
 8002bf2:	e7fd      	b.n	8002bf0 <Error_Handler+0x8>

08002bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002c38 <HAL_MspInit+0x44>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8002c38 <HAL_MspInit+0x44>)
 8002c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c06:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <HAL_MspInit+0x44>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c12:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <HAL_MspInit+0x44>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	4a08      	ldr	r2, [pc, #32]	@ (8002c38 <HAL_MspInit+0x44>)
 8002c18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c1e:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <HAL_MspInit+0x44>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800

08002c3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08e      	sub	sp, #56	@ 0x38
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a4e      	ldr	r2, [pc, #312]	@ (8002d94 <HAL_ETH_MspInit+0x158>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	f040 8096 	bne.w	8002d8c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002c60:	4b4d      	ldr	r3, [pc, #308]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c64:	4a4c      	ldr	r2, [pc, #304]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002c66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6c:	4b4a      	ldr	r3, [pc, #296]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c74:	623b      	str	r3, [r7, #32]
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	4b47      	ldr	r3, [pc, #284]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7c:	4a46      	ldr	r2, [pc, #280]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002c7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c84:	4b44      	ldr	r3, [pc, #272]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	4b41      	ldr	r3, [pc, #260]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c94:	4a40      	ldr	r2, [pc, #256]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002c96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002c9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cac:	4a3a      	ldr	r2, [pc, #232]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002cae:	f043 0304 	orr.w	r3, r3, #4
 8002cb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb4:	4b38      	ldr	r3, [pc, #224]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc0:	4b35      	ldr	r3, [pc, #212]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc4:	4a34      	ldr	r2, [pc, #208]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ccc:	4b32      	ldr	r3, [pc, #200]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002cde:	f043 0302 	orr.w	r3, r3, #2
 8002ce2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cf0:	4b29      	ldr	r3, [pc, #164]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	4a28      	ldr	r2, [pc, #160]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfc:	4b26      	ldr	r3, [pc, #152]	@ (8002d98 <HAL_ETH_MspInit+0x15c>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002d08:	2332      	movs	r3, #50	@ 0x32
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d14:	2303      	movs	r3, #3
 8002d16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d18:	230b      	movs	r3, #11
 8002d1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d20:	4619      	mov	r1, r3
 8002d22:	481e      	ldr	r0, [pc, #120]	@ (8002d9c <HAL_ETH_MspInit+0x160>)
 8002d24:	f000 fe72 	bl	8003a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002d28:	2386      	movs	r3, #134	@ 0x86
 8002d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d34:	2303      	movs	r3, #3
 8002d36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d38:	230b      	movs	r3, #11
 8002d3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d40:	4619      	mov	r1, r3
 8002d42:	4817      	ldr	r0, [pc, #92]	@ (8002da0 <HAL_ETH_MspInit+0x164>)
 8002d44:	f000 fe62 	bl	8003a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002d48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d56:	2303      	movs	r3, #3
 8002d58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d5a:	230b      	movs	r3, #11
 8002d5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d62:	4619      	mov	r1, r3
 8002d64:	480f      	ldr	r0, [pc, #60]	@ (8002da4 <HAL_ETH_MspInit+0x168>)
 8002d66:	f000 fe51 	bl	8003a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002d6a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d70:	2302      	movs	r3, #2
 8002d72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d7c:	230b      	movs	r3, #11
 8002d7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d84:	4619      	mov	r1, r3
 8002d86:	4808      	ldr	r0, [pc, #32]	@ (8002da8 <HAL_ETH_MspInit+0x16c>)
 8002d88:	f000 fe40 	bl	8003a0c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8002d8c:	bf00      	nop
 8002d8e:	3738      	adds	r7, #56	@ 0x38
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40028000 	.word	0x40028000
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40020800 	.word	0x40020800
 8002da0:	40020000 	.word	0x40020000
 8002da4:	40020400 	.word	0x40020400
 8002da8:	40021800 	.word	0x40021800

08002dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b0aa      	sub	sp, #168	@ 0xa8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dc4:	f107 0310 	add.w	r3, r7, #16
 8002dc8:	2284      	movs	r2, #132	@ 0x84
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f003 f9fd 	bl	80061cc <memset>
  if(huart->Instance==USART3)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a22      	ldr	r2, [pc, #136]	@ (8002e60 <HAL_UART_MspInit+0xb4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d13c      	bne.n	8002e56 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002ddc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002de0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002de2:	2300      	movs	r3, #0
 8002de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002de6:	f107 0310 	add.w	r3, r7, #16
 8002dea:	4618      	mov	r0, r3
 8002dec:	f001 fde8 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002df6:	f7ff fef7 	bl	8002be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002e64 <HAL_UART_MspInit+0xb8>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfe:	4a19      	ldr	r2, [pc, #100]	@ (8002e64 <HAL_UART_MspInit+0xb8>)
 8002e00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e06:	4b17      	ldr	r3, [pc, #92]	@ (8002e64 <HAL_UART_MspInit+0xb8>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e12:	4b14      	ldr	r3, [pc, #80]	@ (8002e64 <HAL_UART_MspInit+0xb8>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	4a13      	ldr	r2, [pc, #76]	@ (8002e64 <HAL_UART_MspInit+0xb8>)
 8002e18:	f043 0308 	orr.w	r3, r3, #8
 8002e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1e:	4b11      	ldr	r3, [pc, #68]	@ (8002e64 <HAL_UART_MspInit+0xb8>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e44:	2307      	movs	r3, #7
 8002e46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e4a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4805      	ldr	r0, [pc, #20]	@ (8002e68 <HAL_UART_MspInit+0xbc>)
 8002e52:	f000 fddb 	bl	8003a0c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002e56:	bf00      	nop
 8002e58:	37a8      	adds	r7, #168	@ 0xa8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40004800 	.word	0x40004800
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40020c00 	.word	0x40020c00

08002e6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b0ac      	sub	sp, #176	@ 0xb0
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e84:	f107 0318 	add.w	r3, r7, #24
 8002e88:	2284      	movs	r2, #132	@ 0x84
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 f99d 	bl	80061cc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e9a:	d159      	bne.n	8002f50 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002e9c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002ea0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ea8:	f107 0318 	add.w	r3, r7, #24
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 fd87 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002eb8:	f7ff fe96 	bl	8002be8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebc:	4b26      	ldr	r3, [pc, #152]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec0:	4a25      	ldr	r2, [pc, #148]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec8:	4b23      	ldr	r3, [pc, #140]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002ed4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002ed8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2302      	movs	r3, #2
 8002ede:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002eee:	230a      	movs	r3, #10
 8002ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4818      	ldr	r0, [pc, #96]	@ (8002f5c <HAL_PCD_MspInit+0xf0>)
 8002efc:	f000 fd86 	bl	8003a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002f00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002f14:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4810      	ldr	r0, [pc, #64]	@ (8002f5c <HAL_PCD_MspInit+0xf0>)
 8002f1c:	f000 fd76 	bl	8003a0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002f20:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f24:	4a0c      	ldr	r2, [pc, #48]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f2a:	6353      	str	r3, [r2, #52]	@ 0x34
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4b07      	ldr	r3, [pc, #28]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3c:	4a06      	ldr	r2, [pc, #24]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002f3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f42:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f44:	4b04      	ldr	r3, [pc, #16]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002f50:	bf00      	nop
 8002f52:	37b0      	adds	r7, #176	@ 0xb0
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40020000 	.word	0x40020000

08002f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f64:	bf00      	nop
 8002f66:	e7fd      	b.n	8002f64 <NMI_Handler+0x4>

08002f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f6c:	bf00      	nop
 8002f6e:	e7fd      	b.n	8002f6c <HardFault_Handler+0x4>

08002f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f74:	bf00      	nop
 8002f76:	e7fd      	b.n	8002f74 <MemManage_Handler+0x4>

08002f78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <BusFault_Handler+0x4>

08002f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f84:	bf00      	nop
 8002f86:	e7fd      	b.n	8002f84 <UsageFault_Handler+0x4>

08002f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb6:	f000 f8b1 	bl	800311c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fc8:	4a14      	ldr	r2, [pc, #80]	@ (800301c <_sbrk+0x5c>)
 8002fca:	4b15      	ldr	r3, [pc, #84]	@ (8003020 <_sbrk+0x60>)
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fd4:	4b13      	ldr	r3, [pc, #76]	@ (8003024 <_sbrk+0x64>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fdc:	4b11      	ldr	r3, [pc, #68]	@ (8003024 <_sbrk+0x64>)
 8002fde:	4a12      	ldr	r2, [pc, #72]	@ (8003028 <_sbrk+0x68>)
 8002fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fe2:	4b10      	ldr	r3, [pc, #64]	@ (8003024 <_sbrk+0x64>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d207      	bcs.n	8003000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ff0:	f003 f8f4 	bl	80061dc <__errno>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	220c      	movs	r2, #12
 8002ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ffe:	e009      	b.n	8003014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003000:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <_sbrk+0x64>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003006:	4b07      	ldr	r3, [pc, #28]	@ (8003024 <_sbrk+0x64>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4413      	add	r3, r2
 800300e:	4a05      	ldr	r2, [pc, #20]	@ (8003024 <_sbrk+0x64>)
 8003010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003012:	68fb      	ldr	r3, [r7, #12]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20050000 	.word	0x20050000
 8003020:	00000400 	.word	0x00000400
 8003024:	20002cc8 	.word	0x20002cc8
 8003028:	20002e18 	.word	0x20002e18

0800302c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003030:	4b06      	ldr	r3, [pc, #24]	@ (800304c <SystemInit+0x20>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003036:	4a05      	ldr	r2, [pc, #20]	@ (800304c <SystemInit+0x20>)
 8003038:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800303c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003050:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003088 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003054:	f7ff ffea 	bl	800302c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003058:	480c      	ldr	r0, [pc, #48]	@ (800308c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800305a:	490d      	ldr	r1, [pc, #52]	@ (8003090 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800305c:	4a0d      	ldr	r2, [pc, #52]	@ (8003094 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003060:	e002      	b.n	8003068 <LoopCopyDataInit>

08003062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003066:	3304      	adds	r3, #4

08003068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800306a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800306c:	d3f9      	bcc.n	8003062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306e:	4a0a      	ldr	r2, [pc, #40]	@ (8003098 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003070:	4c0a      	ldr	r4, [pc, #40]	@ (800309c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003074:	e001      	b.n	800307a <LoopFillZerobss>

08003076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003078:	3204      	adds	r2, #4

0800307a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800307a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800307c:	d3fb      	bcc.n	8003076 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800307e:	f003 f8b3 	bl	80061e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003082:	f7ff fb45 	bl	8002710 <main>
  bx  lr    
 8003086:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003088:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800308c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003090:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003094:	08006bd4 	.word	0x08006bd4
  ldr r2, =_sbss
 8003098:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 800309c:	20002e18 	.word	0x20002e18

080030a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a0:	e7fe      	b.n	80030a0 <ADC_IRQHandler>

080030a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a6:	2003      	movs	r0, #3
 80030a8:	f000 f92e 	bl	8003308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ac:	2000      	movs	r0, #0
 80030ae:	f000 f805 	bl	80030bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030b2:	f7ff fd9f 	bl	8002bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030c4:	4b12      	ldr	r3, [pc, #72]	@ (8003110 <HAL_InitTick+0x54>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b12      	ldr	r3, [pc, #72]	@ (8003114 <HAL_InitTick+0x58>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	4619      	mov	r1, r3
 80030ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 f93b 	bl	8003356 <HAL_SYSTICK_Config>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00e      	b.n	8003108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b0f      	cmp	r3, #15
 80030ee:	d80a      	bhi.n	8003106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030f0:	2200      	movs	r2, #0
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030f8:	f000 f911 	bl	800331e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030fc:	4a06      	ldr	r2, [pc, #24]	@ (8003118 <HAL_InitTick+0x5c>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	e000      	b.n	8003108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000030 	.word	0x20000030
 8003114:	20000038 	.word	0x20000038
 8003118:	20000034 	.word	0x20000034

0800311c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003120:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_IncTick+0x20>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	4b06      	ldr	r3, [pc, #24]	@ (8003140 <HAL_IncTick+0x24>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4413      	add	r3, r2
 800312c:	4a04      	ldr	r2, [pc, #16]	@ (8003140 <HAL_IncTick+0x24>)
 800312e:	6013      	str	r3, [r2, #0]
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20000038 	.word	0x20000038
 8003140:	20002ccc 	.word	0x20002ccc

08003144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return uwTick;
 8003148:	4b03      	ldr	r3, [pc, #12]	@ (8003158 <HAL_GetTick+0x14>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20002ccc 	.word	0x20002ccc

0800315c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003164:	f7ff ffee 	bl	8003144 <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003174:	d005      	beq.n	8003182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003176:	4b0a      	ldr	r3, [pc, #40]	@ (80031a0 <HAL_Delay+0x44>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003182:	bf00      	nop
 8003184:	f7ff ffde 	bl	8003144 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	429a      	cmp	r2, r3
 8003192:	d8f7      	bhi.n	8003184 <HAL_Delay+0x28>
  {
  }
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000038 	.word	0x20000038

080031a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b4:	4b0b      	ldr	r3, [pc, #44]	@ (80031e4 <__NVIC_SetPriorityGrouping+0x40>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031c0:	4013      	ands	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031cc:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d2:	4a04      	ldr	r2, [pc, #16]	@ (80031e4 <__NVIC_SetPriorityGrouping+0x40>)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	60d3      	str	r3, [r2, #12]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00
 80031e8:	05fa0000 	.word	0x05fa0000

080031ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f0:	4b04      	ldr	r3, [pc, #16]	@ (8003204 <__NVIC_GetPriorityGrouping+0x18>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	f003 0307 	and.w	r3, r3, #7
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	6039      	str	r1, [r7, #0]
 8003212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003218:	2b00      	cmp	r3, #0
 800321a:	db0a      	blt.n	8003232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	490c      	ldr	r1, [pc, #48]	@ (8003254 <__NVIC_SetPriority+0x4c>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	0112      	lsls	r2, r2, #4
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	440b      	add	r3, r1
 800322c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003230:	e00a      	b.n	8003248 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4908      	ldr	r1, [pc, #32]	@ (8003258 <__NVIC_SetPriority+0x50>)
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	3b04      	subs	r3, #4
 8003240:	0112      	lsls	r2, r2, #4
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	440b      	add	r3, r1
 8003246:	761a      	strb	r2, [r3, #24]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000e100 	.word	0xe000e100
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800325c:	b480      	push	{r7}
 800325e:	b089      	sub	sp, #36	@ 0x24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f1c3 0307 	rsb	r3, r3, #7
 8003276:	2b04      	cmp	r3, #4
 8003278:	bf28      	it	cs
 800327a:	2304      	movcs	r3, #4
 800327c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3304      	adds	r3, #4
 8003282:	2b06      	cmp	r3, #6
 8003284:	d902      	bls.n	800328c <NVIC_EncodePriority+0x30>
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3b03      	subs	r3, #3
 800328a:	e000      	b.n	800328e <NVIC_EncodePriority+0x32>
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	401a      	ands	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	43d9      	mvns	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	4313      	orrs	r3, r2
         );
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3724      	adds	r7, #36	@ 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032d4:	d301      	bcc.n	80032da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00f      	b.n	80032fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032da:	4a0a      	ldr	r2, [pc, #40]	@ (8003304 <SysTick_Config+0x40>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032e2:	210f      	movs	r1, #15
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032e8:	f7ff ff8e 	bl	8003208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <SysTick_Config+0x40>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032f2:	4b04      	ldr	r3, [pc, #16]	@ (8003304 <SysTick_Config+0x40>)
 80032f4:	2207      	movs	r2, #7
 80032f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	e000e010 	.word	0xe000e010

08003308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff ff47 	bl	80031a4 <__NVIC_SetPriorityGrouping>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	4603      	mov	r3, r0
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003330:	f7ff ff5c 	bl	80031ec <__NVIC_GetPriorityGrouping>
 8003334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	6978      	ldr	r0, [r7, #20]
 800333c:	f7ff ff8e 	bl	800325c <NVIC_EncodePriority>
 8003340:	4602      	mov	r2, r0
 8003342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff5d 	bl	8003208 <__NVIC_SetPriority>
}
 800334e:	bf00      	nop
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ffb0 	bl	80032c4 <SysTick_Config>
 8003364:	4603      	mov	r3, r0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e086      	b.n	8003490 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003388:	2b00      	cmp	r3, #0
 800338a:	d106      	bne.n	800339a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2223      	movs	r2, #35	@ 0x23
 8003390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff fc51 	bl	8002c3c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800339a:	4b3f      	ldr	r3, [pc, #252]	@ (8003498 <HAL_ETH_Init+0x128>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339e:	4a3e      	ldr	r2, [pc, #248]	@ (8003498 <HAL_ETH_Init+0x128>)
 80033a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003498 <HAL_ETH_Init+0x128>)
 80033a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80033b2:	4b3a      	ldr	r3, [pc, #232]	@ (800349c <HAL_ETH_Init+0x12c>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4a39      	ldr	r2, [pc, #228]	@ (800349c <HAL_ETH_Init+0x12c>)
 80033b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80033bc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80033be:	4b37      	ldr	r3, [pc, #220]	@ (800349c <HAL_ETH_Init+0x12c>)
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	4935      	ldr	r1, [pc, #212]	@ (800349c <HAL_ETH_Init+0x12c>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80033cc:	4b33      	ldr	r3, [pc, #204]	@ (800349c <HAL_ETH_Init+0x12c>)
 80033ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033e8:	f7ff feac 	bl	8003144 <HAL_GetTick>
 80033ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80033ee:	e011      	b.n	8003414 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80033f0:	f7ff fea8 	bl	8003144 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80033fe:	d909      	bls.n	8003414 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2204      	movs	r2, #4
 8003404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	22e0      	movs	r2, #224	@ 0xe0
 800340c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e03d      	b.n	8003490 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1e4      	bne.n	80033f0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f97a 	bl	8003720 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fa25 	bl	800387c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fa7b 	bl	800392e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	461a      	mov	r2, r3
 800343e:	2100      	movs	r1, #0
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f9e3 	bl	800380c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003454:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b0f      	ldr	r3, [pc, #60]	@ (80034a0 <HAL_ETH_Init+0x130>)
 8003464:	430b      	orrs	r3, r1
 8003466:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800347a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2210      	movs	r2, #16
 800348a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40023800 	.word	0x40023800
 800349c:	40013800 	.word	0x40013800
 80034a0:	00020060 	.word	0x00020060

080034a4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4b53      	ldr	r3, [pc, #332]	@ (8003608 <ETH_SetMACConfig+0x164>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	7b9b      	ldrb	r3, [r3, #14]
 80034c2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	7c12      	ldrb	r2, [r2, #16]
 80034c8:	2a00      	cmp	r2, #0
 80034ca:	d102      	bne.n	80034d2 <ETH_SetMACConfig+0x2e>
 80034cc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80034d0:	e000      	b.n	80034d4 <ETH_SetMACConfig+0x30>
 80034d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80034d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	7c52      	ldrb	r2, [r2, #17]
 80034da:	2a00      	cmp	r2, #0
 80034dc:	d102      	bne.n	80034e4 <ETH_SetMACConfig+0x40>
 80034de:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80034e2:	e000      	b.n	80034e6 <ETH_SetMACConfig+0x42>
 80034e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80034e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80034ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	7fdb      	ldrb	r3, [r3, #31]
 80034f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80034f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80034fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	7f92      	ldrb	r2, [r2, #30]
 8003500:	2a00      	cmp	r2, #0
 8003502:	d102      	bne.n	800350a <ETH_SetMACConfig+0x66>
 8003504:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003508:	e000      	b.n	800350c <ETH_SetMACConfig+0x68>
 800350a:	2200      	movs	r2, #0
                        macconf->Speed |
 800350c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	7f1b      	ldrb	r3, [r3, #28]
 8003512:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003514:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800351a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	791b      	ldrb	r3, [r3, #4]
 8003520:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003522:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	f892 2020 	ldrb.w	r2, [r2, #32]
 800352a:	2a00      	cmp	r2, #0
 800352c:	d102      	bne.n	8003534 <ETH_SetMACConfig+0x90>
 800352e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003532:	e000      	b.n	8003536 <ETH_SetMACConfig+0x92>
 8003534:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003536:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	7bdb      	ldrb	r3, [r3, #15]
 800353c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800353e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003544:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800354c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800354e:	4313      	orrs	r3, r2
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003566:	2001      	movs	r0, #1
 8003568:	f7ff fdf8 	bl	800315c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003582:	4013      	ands	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800358a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003592:	2a00      	cmp	r2, #0
 8003594:	d101      	bne.n	800359a <ETH_SetMACConfig+0xf6>
 8003596:	2280      	movs	r2, #128	@ 0x80
 8003598:	e000      	b.n	800359c <ETH_SetMACConfig+0xf8>
 800359a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800359c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80035a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80035aa:	2a01      	cmp	r2, #1
 80035ac:	d101      	bne.n	80035b2 <ETH_SetMACConfig+0x10e>
 80035ae:	2208      	movs	r2, #8
 80035b0:	e000      	b.n	80035b4 <ETH_SetMACConfig+0x110>
 80035b2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80035b4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80035bc:	2a01      	cmp	r2, #1
 80035be:	d101      	bne.n	80035c4 <ETH_SetMACConfig+0x120>
 80035c0:	2204      	movs	r2, #4
 80035c2:	e000      	b.n	80035c6 <ETH_SetMACConfig+0x122>
 80035c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80035c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80035ce:	2a01      	cmp	r2, #1
 80035d0:	d101      	bne.n	80035d6 <ETH_SetMACConfig+0x132>
 80035d2:	2202      	movs	r2, #2
 80035d4:	e000      	b.n	80035d8 <ETH_SetMACConfig+0x134>
 80035d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80035d8:	4313      	orrs	r3, r2
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035f0:	2001      	movs	r0, #1
 80035f2:	f7ff fdb3 	bl	800315c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	619a      	str	r2, [r3, #24]
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	fd20810f 	.word	0xfd20810f

0800360c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4b3d      	ldr	r3, [pc, #244]	@ (800371c <ETH_SetDMAConfig+0x110>)
 8003626:	4013      	ands	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	7b1b      	ldrb	r3, [r3, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d102      	bne.n	8003638 <ETH_SetDMAConfig+0x2c>
 8003632:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003636:	e000      	b.n	800363a <ETH_SetDMAConfig+0x2e>
 8003638:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	7b5b      	ldrb	r3, [r3, #13]
 800363e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003640:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	7f52      	ldrb	r2, [r2, #29]
 8003646:	2a00      	cmp	r2, #0
 8003648:	d102      	bne.n	8003650 <ETH_SetDMAConfig+0x44>
 800364a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800364e:	e000      	b.n	8003652 <ETH_SetDMAConfig+0x46>
 8003650:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003652:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	7b9b      	ldrb	r3, [r3, #14]
 8003658:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800365a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003660:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	7f1b      	ldrb	r3, [r3, #28]
 8003666:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003668:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	7f9b      	ldrb	r3, [r3, #30]
 800366e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003670:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003676:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800367e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003680:	4313      	orrs	r3, r2
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003690:	461a      	mov	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036a2:	2001      	movs	r0, #1
 80036a4:	f7ff fd5a 	bl	800315c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036b0:	461a      	mov	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	791b      	ldrb	r3, [r3, #4]
 80036ba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80036c0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80036c6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80036cc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036d4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80036d6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036dc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80036de:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80036e4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80036f2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003700:	2001      	movs	r0, #1
 8003702:	f7ff fd2b 	bl	800315c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800370e:	461a      	mov	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6013      	str	r3, [r2, #0]
}
 8003714:	bf00      	nop
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	f8de3f23 	.word	0xf8de3f23

08003720 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b0a6      	sub	sp, #152	@ 0x98
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003728:	2301      	movs	r3, #1
 800372a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003734:	2300      	movs	r3, #0
 8003736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003738:	2300      	movs	r3, #0
 800373a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800373e:	2301      	movs	r3, #1
 8003740:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003744:	2300      	movs	r3, #0
 8003746:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800374a:	2301      	movs	r3, #1
 800374c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003756:	2300      	movs	r3, #0
 8003758:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800375c:	2300      	movs	r3, #0
 800375e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003762:	2300      	movs	r3, #0
 8003764:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003766:	2300      	movs	r3, #0
 8003768:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800376c:	2300      	movs	r3, #0
 800376e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003770:	2300      	movs	r3, #0
 8003772:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003776:	2300      	movs	r3, #0
 8003778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800377c:	2300      	movs	r3, #0
 800377e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003782:	2300      	movs	r3, #0
 8003784:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003788:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800378c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800378e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003794:	2300      	movs	r3, #0
 8003796:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800379a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800379e:	4619      	mov	r1, r3
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff fe7f 	bl	80034a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80037aa:	2301      	movs	r3, #1
 80037ac:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80037bc:	2300      	movs	r3, #0
 80037be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80037c2:	2300      	movs	r3, #0
 80037c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80037d2:	2301      	movs	r3, #1
 80037d4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80037d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80037dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80037e0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80037e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037e6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80037f6:	f107 0308 	add.w	r3, r7, #8
 80037fa:	4619      	mov	r1, r3
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff ff05 	bl	800360c <ETH_SetDMAConfig>
}
 8003802:	bf00      	nop
 8003804:	3798      	adds	r7, #152	@ 0x98
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3305      	adds	r3, #5
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	3204      	adds	r2, #4
 8003824:	7812      	ldrb	r2, [r2, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	4b11      	ldr	r3, [pc, #68]	@ (8003874 <ETH_MACAddressConfig+0x68>)
 800382e:	4413      	add	r3, r2
 8003830:	461a      	mov	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3303      	adds	r3, #3
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	061a      	lsls	r2, r3, #24
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3302      	adds	r3, #2
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	041b      	lsls	r3, r3, #16
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3301      	adds	r3, #1
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	4313      	orrs	r3, r2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	7812      	ldrb	r2, [r2, #0]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <ETH_MACAddressConfig+0x6c>)
 800385e:	4413      	add	r3, r2
 8003860:	461a      	mov	r2, r3
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	6013      	str	r3, [r2, #0]
}
 8003866:	bf00      	nop
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40028040 	.word	0x40028040
 8003878:	40028044 	.word	0x40028044

0800387c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	e03e      	b.n	8003908 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68d9      	ldr	r1, [r3, #12]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	440b      	add	r3, r1
 800389a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2200      	movs	r2, #0
 80038a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2200      	movs	r2, #0
 80038ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2200      	movs	r2, #0
 80038b2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	3206      	adds	r2, #6
 80038bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d80c      	bhi.n	80038ec <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68d9      	ldr	r1, [r3, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	440b      	add	r3, r1
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	e004      	b.n	80038f6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	461a      	mov	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	3301      	adds	r3, #1
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b03      	cmp	r3, #3
 800390c:	d9bd      	bls.n	800388a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003920:	611a      	str	r2, [r3, #16]
}
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800392e:	b480      	push	{r7}
 8003930:	b085      	sub	sp, #20
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	e048      	b.n	80039ce <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6919      	ldr	r1, [r3, #16]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	440b      	add	r3, r1
 800394c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2200      	movs	r2, #0
 8003958:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2200      	movs	r2, #0
 800395e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2200      	movs	r2, #0
 8003964:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2200      	movs	r2, #0
 800396a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2200      	movs	r2, #0
 8003970:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003978:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	3212      	adds	r2, #18
 800399a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d80c      	bhi.n	80039be <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6919      	ldr	r1, [r3, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	440b      	add	r3, r1
 80039b6:	461a      	mov	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	60da      	str	r2, [r3, #12]
 80039bc:	e004      	b.n	80039c8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	461a      	mov	r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3301      	adds	r3, #1
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d9b3      	bls.n	800393c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039fe:	60da      	str	r2, [r3, #12]
}
 8003a00:	bf00      	nop
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b089      	sub	sp, #36	@ 0x24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	e175      	b.n	8003d18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	f040 8164 	bne.w	8003d12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d005      	beq.n	8003a62 <HAL_GPIO_Init+0x56>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d130      	bne.n	8003ac4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a98:	2201      	movs	r2, #1
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 0201 	and.w	r2, r3, #1
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d017      	beq.n	8003b00 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	2203      	movs	r2, #3
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d123      	bne.n	8003b54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	08da      	lsrs	r2, r3, #3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3208      	adds	r2, #8
 8003b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	220f      	movs	r2, #15
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	08da      	lsrs	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3208      	adds	r2, #8
 8003b4e:	69b9      	ldr	r1, [r7, #24]
 8003b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	2203      	movs	r2, #3
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0203 	and.w	r2, r3, #3
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80be 	beq.w	8003d12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b96:	4b66      	ldr	r3, [pc, #408]	@ (8003d30 <HAL_GPIO_Init+0x324>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9a:	4a65      	ldr	r2, [pc, #404]	@ (8003d30 <HAL_GPIO_Init+0x324>)
 8003b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ba2:	4b63      	ldr	r3, [pc, #396]	@ (8003d30 <HAL_GPIO_Init+0x324>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003bae:	4a61      	ldr	r2, [pc, #388]	@ (8003d34 <HAL_GPIO_Init+0x328>)
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	089b      	lsrs	r3, r3, #2
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	220f      	movs	r2, #15
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a58      	ldr	r2, [pc, #352]	@ (8003d38 <HAL_GPIO_Init+0x32c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d037      	beq.n	8003c4a <HAL_GPIO_Init+0x23e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a57      	ldr	r2, [pc, #348]	@ (8003d3c <HAL_GPIO_Init+0x330>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d031      	beq.n	8003c46 <HAL_GPIO_Init+0x23a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a56      	ldr	r2, [pc, #344]	@ (8003d40 <HAL_GPIO_Init+0x334>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d02b      	beq.n	8003c42 <HAL_GPIO_Init+0x236>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a55      	ldr	r2, [pc, #340]	@ (8003d44 <HAL_GPIO_Init+0x338>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d025      	beq.n	8003c3e <HAL_GPIO_Init+0x232>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a54      	ldr	r2, [pc, #336]	@ (8003d48 <HAL_GPIO_Init+0x33c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01f      	beq.n	8003c3a <HAL_GPIO_Init+0x22e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a53      	ldr	r2, [pc, #332]	@ (8003d4c <HAL_GPIO_Init+0x340>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d019      	beq.n	8003c36 <HAL_GPIO_Init+0x22a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a52      	ldr	r2, [pc, #328]	@ (8003d50 <HAL_GPIO_Init+0x344>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <HAL_GPIO_Init+0x226>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a51      	ldr	r2, [pc, #324]	@ (8003d54 <HAL_GPIO_Init+0x348>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00d      	beq.n	8003c2e <HAL_GPIO_Init+0x222>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a50      	ldr	r2, [pc, #320]	@ (8003d58 <HAL_GPIO_Init+0x34c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d007      	beq.n	8003c2a <HAL_GPIO_Init+0x21e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a4f      	ldr	r2, [pc, #316]	@ (8003d5c <HAL_GPIO_Init+0x350>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d101      	bne.n	8003c26 <HAL_GPIO_Init+0x21a>
 8003c22:	2309      	movs	r3, #9
 8003c24:	e012      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c26:	230a      	movs	r3, #10
 8003c28:	e010      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	e00e      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c2e:	2307      	movs	r3, #7
 8003c30:	e00c      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c32:	2306      	movs	r3, #6
 8003c34:	e00a      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c36:	2305      	movs	r3, #5
 8003c38:	e008      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	e006      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e004      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e002      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	f002 0203 	and.w	r2, r2, #3
 8003c52:	0092      	lsls	r2, r2, #2
 8003c54:	4093      	lsls	r3, r2
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c5c:	4935      	ldr	r1, [pc, #212]	@ (8003d34 <HAL_GPIO_Init+0x328>)
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	089b      	lsrs	r3, r3, #2
 8003c62:	3302      	adds	r3, #2
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d60 <HAL_GPIO_Init+0x354>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c8e:	4a34      	ldr	r2, [pc, #208]	@ (8003d60 <HAL_GPIO_Init+0x354>)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c94:	4b32      	ldr	r3, [pc, #200]	@ (8003d60 <HAL_GPIO_Init+0x354>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cb8:	4a29      	ldr	r2, [pc, #164]	@ (8003d60 <HAL_GPIO_Init+0x354>)
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cbe:	4b28      	ldr	r3, [pc, #160]	@ (8003d60 <HAL_GPIO_Init+0x354>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d60 <HAL_GPIO_Init+0x354>)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d60 <HAL_GPIO_Init+0x354>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d0c:	4a14      	ldr	r2, [pc, #80]	@ (8003d60 <HAL_GPIO_Init+0x354>)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	3301      	adds	r3, #1
 8003d16:	61fb      	str	r3, [r7, #28]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	2b0f      	cmp	r3, #15
 8003d1c:	f67f ae86 	bls.w	8003a2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop
 8003d24:	3724      	adds	r7, #36	@ 0x24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
 8003d34:	40013800 	.word	0x40013800
 8003d38:	40020000 	.word	0x40020000
 8003d3c:	40020400 	.word	0x40020400
 8003d40:	40020800 	.word	0x40020800
 8003d44:	40020c00 	.word	0x40020c00
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40021400 	.word	0x40021400
 8003d50:	40021800 	.word	0x40021800
 8003d54:	40021c00 	.word	0x40021c00
 8003d58:	40022000 	.word	0x40022000
 8003d5c:	40022400 	.word	0x40022400
 8003d60:	40013c00 	.word	0x40013c00

08003d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	807b      	strh	r3, [r7, #2]
 8003d70:	4613      	mov	r3, r2
 8003d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d74:	787b      	ldrb	r3, [r7, #1]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003d80:	e003      	b.n	8003d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003d82:	887b      	ldrh	r3, [r7, #2]
 8003d84:	041a      	lsls	r2, r3, #16
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	619a      	str	r2, [r3, #24]
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b086      	sub	sp, #24
 8003d9a:	af02      	add	r7, sp, #8
 8003d9c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e108      	b.n	8003fba <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff f852 	bl	8002e6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2203      	movs	r2, #3
 8003dcc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dd6:	d102      	bne.n	8003dde <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f001 ff3c 	bl	8005c60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	7c1a      	ldrb	r2, [r3, #16]
 8003df0:	f88d 2000 	strb.w	r2, [sp]
 8003df4:	3304      	adds	r3, #4
 8003df6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003df8:	f001 fed8 	bl	8005bac <USB_CoreInit>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e0d5      	b.n	8003fba <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2100      	movs	r1, #0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f001 ff34 	bl	8005c82 <USB_SetCurrentMode>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0c6      	b.n	8003fba <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	73fb      	strb	r3, [r7, #15]
 8003e30:	e04a      	b.n	8003ec8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e32:	7bfa      	ldrb	r2, [r7, #15]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	3315      	adds	r3, #21
 8003e42:	2201      	movs	r2, #1
 8003e44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e46:	7bfa      	ldrb	r2, [r7, #15]
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	3314      	adds	r3, #20
 8003e56:	7bfa      	ldrb	r2, [r7, #15]
 8003e58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e5a:	7bfa      	ldrb	r2, [r7, #15]
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	b298      	uxth	r0, r3
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	332e      	adds	r3, #46	@ 0x2e
 8003e6e:	4602      	mov	r2, r0
 8003e70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e72:	7bfa      	ldrb	r2, [r7, #15]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	3318      	adds	r3, #24
 8003e82:	2200      	movs	r2, #0
 8003e84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e86:	7bfa      	ldrb	r2, [r7, #15]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	331c      	adds	r3, #28
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e9a:	7bfa      	ldrb	r2, [r7, #15]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3320      	adds	r3, #32
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003eae:	7bfa      	ldrb	r2, [r7, #15]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	3324      	adds	r3, #36	@ 0x24
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	791b      	ldrb	r3, [r3, #4]
 8003ecc:	7bfa      	ldrb	r2, [r7, #15]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d3af      	bcc.n	8003e32 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	73fb      	strb	r3, [r7, #15]
 8003ed6:	e044      	b.n	8003f62 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ed8:	7bfa      	ldrb	r2, [r7, #15]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003f00:	7bfa      	ldrb	r2, [r7, #15]
 8003f02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f1a:	7bfa      	ldrb	r2, [r7, #15]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f46:	7bfa      	ldrb	r2, [r7, #15]
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	4413      	add	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	791b      	ldrb	r3, [r3, #4]
 8003f66:	7bfa      	ldrb	r2, [r7, #15]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d3b5      	bcc.n	8003ed8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	7c1a      	ldrb	r2, [r3, #16]
 8003f74:	f88d 2000 	strb.w	r2, [sp]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f7c:	f001 fece 	bl	8005d1c <USB_DevInit>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e013      	b.n	8003fba <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7b1b      	ldrb	r3, [r3, #12]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d102      	bne.n	8003fae <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f80b 	bl	8003fc4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f002 f889 	bl	80060ca <USB_DevDisconnect>

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ff2:	4b05      	ldr	r3, [pc, #20]	@ (8004008 <HAL_PCDEx_ActivateLPM+0x44>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	10000003 	.word	0x10000003

0800400c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004010:	4b05      	ldr	r3, [pc, #20]	@ (8004028 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a04      	ldr	r2, [pc, #16]	@ (8004028 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800401a:	6013      	str	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40007000 	.word	0x40007000

0800402c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004034:	2300      	movs	r3, #0
 8004036:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e291      	b.n	8004566 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 8087 	beq.w	800415e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004050:	4b96      	ldr	r3, [pc, #600]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 030c 	and.w	r3, r3, #12
 8004058:	2b04      	cmp	r3, #4
 800405a:	d00c      	beq.n	8004076 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800405c:	4b93      	ldr	r3, [pc, #588]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 030c 	and.w	r3, r3, #12
 8004064:	2b08      	cmp	r3, #8
 8004066:	d112      	bne.n	800408e <HAL_RCC_OscConfig+0x62>
 8004068:	4b90      	ldr	r3, [pc, #576]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004070:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004074:	d10b      	bne.n	800408e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004076:	4b8d      	ldr	r3, [pc, #564]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d06c      	beq.n	800415c <HAL_RCC_OscConfig+0x130>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d168      	bne.n	800415c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e26b      	b.n	8004566 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004096:	d106      	bne.n	80040a6 <HAL_RCC_OscConfig+0x7a>
 8004098:	4b84      	ldr	r3, [pc, #528]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a83      	ldr	r2, [pc, #524]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 800409e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	e02e      	b.n	8004104 <HAL_RCC_OscConfig+0xd8>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10c      	bne.n	80040c8 <HAL_RCC_OscConfig+0x9c>
 80040ae:	4b7f      	ldr	r3, [pc, #508]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a7e      	ldr	r2, [pc, #504]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80040b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	4b7c      	ldr	r3, [pc, #496]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a7b      	ldr	r2, [pc, #492]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80040c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	e01d      	b.n	8004104 <HAL_RCC_OscConfig+0xd8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040d0:	d10c      	bne.n	80040ec <HAL_RCC_OscConfig+0xc0>
 80040d2:	4b76      	ldr	r3, [pc, #472]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a75      	ldr	r2, [pc, #468]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80040d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	4b73      	ldr	r3, [pc, #460]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a72      	ldr	r2, [pc, #456]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80040e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	e00b      	b.n	8004104 <HAL_RCC_OscConfig+0xd8>
 80040ec:	4b6f      	ldr	r3, [pc, #444]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a6e      	ldr	r2, [pc, #440]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80040f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	4b6c      	ldr	r3, [pc, #432]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a6b      	ldr	r2, [pc, #428]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80040fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d013      	beq.n	8004134 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7ff f81a 	bl	8003144 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004114:	f7ff f816 	bl	8003144 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b64      	cmp	r3, #100	@ 0x64
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e21f      	b.n	8004566 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004126:	4b61      	ldr	r3, [pc, #388]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0xe8>
 8004132:	e014      	b.n	800415e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7ff f806 	bl	8003144 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800413c:	f7ff f802 	bl	8003144 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b64      	cmp	r3, #100	@ 0x64
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e20b      	b.n	8004566 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414e:	4b57      	ldr	r3, [pc, #348]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x110>
 800415a:	e000      	b.n	800415e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d069      	beq.n	800423e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800416a:	4b50      	ldr	r3, [pc, #320]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00b      	beq.n	800418e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004176:	4b4d      	ldr	r3, [pc, #308]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 030c 	and.w	r3, r3, #12
 800417e:	2b08      	cmp	r3, #8
 8004180:	d11c      	bne.n	80041bc <HAL_RCC_OscConfig+0x190>
 8004182:	4b4a      	ldr	r3, [pc, #296]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d116      	bne.n	80041bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800418e:	4b47      	ldr	r3, [pc, #284]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <HAL_RCC_OscConfig+0x17a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d001      	beq.n	80041a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e1df      	b.n	8004566 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a6:	4b41      	ldr	r3, [pc, #260]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	493d      	ldr	r1, [pc, #244]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ba:	e040      	b.n	800423e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d023      	beq.n	800420c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041c4:	4b39      	ldr	r3, [pc, #228]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a38      	ldr	r2, [pc, #224]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fe ffb8 	bl	8003144 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d8:	f7fe ffb4 	bl	8003144 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e1bd      	b.n	8004566 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ea:	4b30      	ldr	r3, [pc, #192]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f6:	4b2d      	ldr	r3, [pc, #180]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4929      	ldr	r1, [pc, #164]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 8004206:	4313      	orrs	r3, r2
 8004208:	600b      	str	r3, [r1, #0]
 800420a:	e018      	b.n	800423e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800420c:	4b27      	ldr	r3, [pc, #156]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a26      	ldr	r2, [pc, #152]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 8004212:	f023 0301 	bic.w	r3, r3, #1
 8004216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fe ff94 	bl	8003144 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004220:	f7fe ff90 	bl	8003144 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e199      	b.n	8004566 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004232:	4b1e      	ldr	r3, [pc, #120]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d038      	beq.n	80042bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d019      	beq.n	8004286 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004252:	4b16      	ldr	r3, [pc, #88]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 8004254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004256:	4a15      	ldr	r2, [pc, #84]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425e:	f7fe ff71 	bl	8003144 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004266:	f7fe ff6d 	bl	8003144 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e176      	b.n	8004566 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004278:	4b0c      	ldr	r3, [pc, #48]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 800427a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x23a>
 8004284:	e01a      	b.n	80042bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004286:	4b09      	ldr	r3, [pc, #36]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 8004288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800428a:	4a08      	ldr	r2, [pc, #32]	@ (80042ac <HAL_RCC_OscConfig+0x280>)
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004292:	f7fe ff57 	bl	8003144 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004298:	e00a      	b.n	80042b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800429a:	f7fe ff53 	bl	8003144 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d903      	bls.n	80042b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e15c      	b.n	8004566 <HAL_RCC_OscConfig+0x53a>
 80042ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b0:	4b91      	ldr	r3, [pc, #580]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 80042b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1ee      	bne.n	800429a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80a4 	beq.w	8004412 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ca:	4b8b      	ldr	r3, [pc, #556]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10d      	bne.n	80042f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d6:	4b88      	ldr	r3, [pc, #544]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	4a87      	ldr	r2, [pc, #540]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 80042dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80042e2:	4b85      	ldr	r3, [pc, #532]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ee:	2301      	movs	r3, #1
 80042f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042f2:	4b82      	ldr	r3, [pc, #520]	@ (80044fc <HAL_RCC_OscConfig+0x4d0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d118      	bne.n	8004330 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80042fe:	4b7f      	ldr	r3, [pc, #508]	@ (80044fc <HAL_RCC_OscConfig+0x4d0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a7e      	ldr	r2, [pc, #504]	@ (80044fc <HAL_RCC_OscConfig+0x4d0>)
 8004304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430a:	f7fe ff1b 	bl	8003144 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004312:	f7fe ff17 	bl	8003144 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b64      	cmp	r3, #100	@ 0x64
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e120      	b.n	8004566 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004324:	4b75      	ldr	r3, [pc, #468]	@ (80044fc <HAL_RCC_OscConfig+0x4d0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d106      	bne.n	8004346 <HAL_RCC_OscConfig+0x31a>
 8004338:	4b6f      	ldr	r3, [pc, #444]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 800433a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433c:	4a6e      	ldr	r2, [pc, #440]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6713      	str	r3, [r2, #112]	@ 0x70
 8004344:	e02d      	b.n	80043a2 <HAL_RCC_OscConfig+0x376>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10c      	bne.n	8004368 <HAL_RCC_OscConfig+0x33c>
 800434e:	4b6a      	ldr	r3, [pc, #424]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004352:	4a69      	ldr	r2, [pc, #420]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	6713      	str	r3, [r2, #112]	@ 0x70
 800435a:	4b67      	ldr	r3, [pc, #412]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435e:	4a66      	ldr	r2, [pc, #408]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 8004360:	f023 0304 	bic.w	r3, r3, #4
 8004364:	6713      	str	r3, [r2, #112]	@ 0x70
 8004366:	e01c      	b.n	80043a2 <HAL_RCC_OscConfig+0x376>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b05      	cmp	r3, #5
 800436e:	d10c      	bne.n	800438a <HAL_RCC_OscConfig+0x35e>
 8004370:	4b61      	ldr	r3, [pc, #388]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004374:	4a60      	ldr	r2, [pc, #384]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 8004376:	f043 0304 	orr.w	r3, r3, #4
 800437a:	6713      	str	r3, [r2, #112]	@ 0x70
 800437c:	4b5e      	ldr	r3, [pc, #376]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004380:	4a5d      	ldr	r2, [pc, #372]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	6713      	str	r3, [r2, #112]	@ 0x70
 8004388:	e00b      	b.n	80043a2 <HAL_RCC_OscConfig+0x376>
 800438a:	4b5b      	ldr	r3, [pc, #364]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438e:	4a5a      	ldr	r2, [pc, #360]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	6713      	str	r3, [r2, #112]	@ 0x70
 8004396:	4b58      	ldr	r3, [pc, #352]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439a:	4a57      	ldr	r2, [pc, #348]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 800439c:	f023 0304 	bic.w	r3, r3, #4
 80043a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d015      	beq.n	80043d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043aa:	f7fe fecb 	bl	8003144 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b0:	e00a      	b.n	80043c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b2:	f7fe fec7 	bl	8003144 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e0ce      	b.n	8004566 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c8:	4b4b      	ldr	r3, [pc, #300]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0ee      	beq.n	80043b2 <HAL_RCC_OscConfig+0x386>
 80043d4:	e014      	b.n	8004400 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d6:	f7fe feb5 	bl	8003144 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043dc:	e00a      	b.n	80043f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043de:	f7fe feb1 	bl	8003144 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e0b8      	b.n	8004566 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f4:	4b40      	ldr	r3, [pc, #256]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1ee      	bne.n	80043de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d105      	bne.n	8004412 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004406:	4b3c      	ldr	r3, [pc, #240]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440a:	4a3b      	ldr	r2, [pc, #236]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 800440c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004410:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 80a4 	beq.w	8004564 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800441c:	4b36      	ldr	r3, [pc, #216]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 030c 	and.w	r3, r3, #12
 8004424:	2b08      	cmp	r3, #8
 8004426:	d06b      	beq.n	8004500 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d149      	bne.n	80044c4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004430:	4b31      	ldr	r3, [pc, #196]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a30      	ldr	r2, [pc, #192]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 8004436:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800443a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fe fe82 	bl	8003144 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004444:	f7fe fe7e 	bl	8003144 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e087      	b.n	8004566 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004456:	4b28      	ldr	r3, [pc, #160]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69da      	ldr	r2, [r3, #28]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	019b      	lsls	r3, r3, #6
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004478:	085b      	lsrs	r3, r3, #1
 800447a:	3b01      	subs	r3, #1
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004484:	061b      	lsls	r3, r3, #24
 8004486:	4313      	orrs	r3, r2
 8004488:	4a1b      	ldr	r2, [pc, #108]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 800448a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800448e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004490:	4b19      	ldr	r3, [pc, #100]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a18      	ldr	r2, [pc, #96]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 8004496:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800449a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7fe fe52 	bl	8003144 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a4:	f7fe fe4e 	bl	8003144 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e057      	b.n	8004566 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b6:	4b10      	ldr	r3, [pc, #64]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x478>
 80044c2:	e04f      	b.n	8004564 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c4:	4b0c      	ldr	r3, [pc, #48]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a0b      	ldr	r2, [pc, #44]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 80044ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fe fe38 	bl	8003144 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fe fe34 	bl	8003144 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e03d      	b.n	8004566 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ea:	4b03      	ldr	r3, [pc, #12]	@ (80044f8 <HAL_RCC_OscConfig+0x4cc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x4ac>
 80044f6:	e035      	b.n	8004564 <HAL_RCC_OscConfig+0x538>
 80044f8:	40023800 	.word	0x40023800
 80044fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004500:	4b1b      	ldr	r3, [pc, #108]	@ (8004570 <HAL_RCC_OscConfig+0x544>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d028      	beq.n	8004560 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d121      	bne.n	8004560 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004526:	429a      	cmp	r2, r3
 8004528:	d11a      	bne.n	8004560 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004530:	4013      	ands	r3, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004536:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004538:	4293      	cmp	r3, r2
 800453a:	d111      	bne.n	8004560 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004546:	085b      	lsrs	r3, r3, #1
 8004548:	3b01      	subs	r3, #1
 800454a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800454c:	429a      	cmp	r2, r3
 800454e:	d107      	bne.n	8004560 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800

08004574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e0d0      	b.n	800472e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800458c:	4b6a      	ldr	r3, [pc, #424]	@ (8004738 <HAL_RCC_ClockConfig+0x1c4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d910      	bls.n	80045bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459a:	4b67      	ldr	r3, [pc, #412]	@ (8004738 <HAL_RCC_ClockConfig+0x1c4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f023 020f 	bic.w	r2, r3, #15
 80045a2:	4965      	ldr	r1, [pc, #404]	@ (8004738 <HAL_RCC_ClockConfig+0x1c4>)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045aa:	4b63      	ldr	r3, [pc, #396]	@ (8004738 <HAL_RCC_ClockConfig+0x1c4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0b8      	b.n	800472e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d020      	beq.n	800460a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d4:	4b59      	ldr	r3, [pc, #356]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	4a58      	ldr	r2, [pc, #352]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 80045da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045ec:	4b53      	ldr	r3, [pc, #332]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	4a52      	ldr	r2, [pc, #328]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 80045f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f8:	4b50      	ldr	r3, [pc, #320]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	494d      	ldr	r1, [pc, #308]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 8004606:	4313      	orrs	r3, r2
 8004608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d040      	beq.n	8004698 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461e:	4b47      	ldr	r3, [pc, #284]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d115      	bne.n	8004656 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e07f      	b.n	800472e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d107      	bne.n	8004646 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004636:	4b41      	ldr	r3, [pc, #260]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e073      	b.n	800472e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004646:	4b3d      	ldr	r3, [pc, #244]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e06b      	b.n	800472e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004656:	4b39      	ldr	r3, [pc, #228]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f023 0203 	bic.w	r2, r3, #3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	4936      	ldr	r1, [pc, #216]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 8004664:	4313      	orrs	r3, r2
 8004666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004668:	f7fe fd6c 	bl	8003144 <HAL_GetTick>
 800466c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466e:	e00a      	b.n	8004686 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004670:	f7fe fd68 	bl	8003144 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e053      	b.n	800472e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004686:	4b2d      	ldr	r3, [pc, #180]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 020c 	and.w	r2, r3, #12
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	429a      	cmp	r2, r3
 8004696:	d1eb      	bne.n	8004670 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004698:	4b27      	ldr	r3, [pc, #156]	@ (8004738 <HAL_RCC_ClockConfig+0x1c4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d210      	bcs.n	80046c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a6:	4b24      	ldr	r3, [pc, #144]	@ (8004738 <HAL_RCC_ClockConfig+0x1c4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 020f 	bic.w	r2, r3, #15
 80046ae:	4922      	ldr	r1, [pc, #136]	@ (8004738 <HAL_RCC_ClockConfig+0x1c4>)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b6:	4b20      	ldr	r3, [pc, #128]	@ (8004738 <HAL_RCC_ClockConfig+0x1c4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e032      	b.n	800472e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d4:	4b19      	ldr	r3, [pc, #100]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4916      	ldr	r1, [pc, #88]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046f2:	4b12      	ldr	r3, [pc, #72]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	490e      	ldr	r1, [pc, #56]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 8004702:	4313      	orrs	r3, r2
 8004704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004706:	f000 f821 	bl	800474c <HAL_RCC_GetSysClockFreq>
 800470a:	4602      	mov	r2, r0
 800470c:	4b0b      	ldr	r3, [pc, #44]	@ (800473c <HAL_RCC_ClockConfig+0x1c8>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	490a      	ldr	r1, [pc, #40]	@ (8004740 <HAL_RCC_ClockConfig+0x1cc>)
 8004718:	5ccb      	ldrb	r3, [r1, r3]
 800471a:	fa22 f303 	lsr.w	r3, r2, r3
 800471e:	4a09      	ldr	r2, [pc, #36]	@ (8004744 <HAL_RCC_ClockConfig+0x1d0>)
 8004720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004722:	4b09      	ldr	r3, [pc, #36]	@ (8004748 <HAL_RCC_ClockConfig+0x1d4>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fcc8 	bl	80030bc <HAL_InitTick>

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40023c00 	.word	0x40023c00
 800473c:	40023800 	.word	0x40023800
 8004740:	08006b78 	.word	0x08006b78
 8004744:	20000030 	.word	0x20000030
 8004748:	20000034 	.word	0x20000034

0800474c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800474c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004750:	b094      	sub	sp, #80	@ 0x50
 8004752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	647b      	str	r3, [r7, #68]	@ 0x44
 8004758:	2300      	movs	r3, #0
 800475a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800475c:	2300      	movs	r3, #0
 800475e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004764:	4b79      	ldr	r3, [pc, #484]	@ (800494c <HAL_RCC_GetSysClockFreq+0x200>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 030c 	and.w	r3, r3, #12
 800476c:	2b08      	cmp	r3, #8
 800476e:	d00d      	beq.n	800478c <HAL_RCC_GetSysClockFreq+0x40>
 8004770:	2b08      	cmp	r3, #8
 8004772:	f200 80e1 	bhi.w	8004938 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0x34>
 800477a:	2b04      	cmp	r3, #4
 800477c:	d003      	beq.n	8004786 <HAL_RCC_GetSysClockFreq+0x3a>
 800477e:	e0db      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004780:	4b73      	ldr	r3, [pc, #460]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x204>)
 8004782:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004784:	e0db      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004786:	4b73      	ldr	r3, [pc, #460]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x208>)
 8004788:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800478a:	e0d8      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800478c:	4b6f      	ldr	r3, [pc, #444]	@ (800494c <HAL_RCC_GetSysClockFreq+0x200>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004794:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004796:	4b6d      	ldr	r3, [pc, #436]	@ (800494c <HAL_RCC_GetSysClockFreq+0x200>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d063      	beq.n	800486a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a2:	4b6a      	ldr	r3, [pc, #424]	@ (800494c <HAL_RCC_GetSysClockFreq+0x200>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	099b      	lsrs	r3, r3, #6
 80047a8:	2200      	movs	r2, #0
 80047aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80047b6:	2300      	movs	r3, #0
 80047b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047be:	4622      	mov	r2, r4
 80047c0:	462b      	mov	r3, r5
 80047c2:	f04f 0000 	mov.w	r0, #0
 80047c6:	f04f 0100 	mov.w	r1, #0
 80047ca:	0159      	lsls	r1, r3, #5
 80047cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047d0:	0150      	lsls	r0, r2, #5
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4621      	mov	r1, r4
 80047d8:	1a51      	subs	r1, r2, r1
 80047da:	6139      	str	r1, [r7, #16]
 80047dc:	4629      	mov	r1, r5
 80047de:	eb63 0301 	sbc.w	r3, r3, r1
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047f0:	4659      	mov	r1, fp
 80047f2:	018b      	lsls	r3, r1, #6
 80047f4:	4651      	mov	r1, sl
 80047f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047fa:	4651      	mov	r1, sl
 80047fc:	018a      	lsls	r2, r1, #6
 80047fe:	4651      	mov	r1, sl
 8004800:	ebb2 0801 	subs.w	r8, r2, r1
 8004804:	4659      	mov	r1, fp
 8004806:	eb63 0901 	sbc.w	r9, r3, r1
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800481a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800481e:	4690      	mov	r8, r2
 8004820:	4699      	mov	r9, r3
 8004822:	4623      	mov	r3, r4
 8004824:	eb18 0303 	adds.w	r3, r8, r3
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	462b      	mov	r3, r5
 800482c:	eb49 0303 	adc.w	r3, r9, r3
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800483e:	4629      	mov	r1, r5
 8004840:	024b      	lsls	r3, r1, #9
 8004842:	4621      	mov	r1, r4
 8004844:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004848:	4621      	mov	r1, r4
 800484a:	024a      	lsls	r2, r1, #9
 800484c:	4610      	mov	r0, r2
 800484e:	4619      	mov	r1, r3
 8004850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004852:	2200      	movs	r2, #0
 8004854:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004858:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800485c:	f7fd f990 	bl	8001b80 <__aeabi_uldivmod>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4613      	mov	r3, r2
 8004866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004868:	e058      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800486a:	4b38      	ldr	r3, [pc, #224]	@ (800494c <HAL_RCC_GetSysClockFreq+0x200>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	099b      	lsrs	r3, r3, #6
 8004870:	2200      	movs	r2, #0
 8004872:	4618      	mov	r0, r3
 8004874:	4611      	mov	r1, r2
 8004876:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800487a:	623b      	str	r3, [r7, #32]
 800487c:	2300      	movs	r3, #0
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004880:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004884:	4642      	mov	r2, r8
 8004886:	464b      	mov	r3, r9
 8004888:	f04f 0000 	mov.w	r0, #0
 800488c:	f04f 0100 	mov.w	r1, #0
 8004890:	0159      	lsls	r1, r3, #5
 8004892:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004896:	0150      	lsls	r0, r2, #5
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4641      	mov	r1, r8
 800489e:	ebb2 0a01 	subs.w	sl, r2, r1
 80048a2:	4649      	mov	r1, r9
 80048a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048bc:	ebb2 040a 	subs.w	r4, r2, sl
 80048c0:	eb63 050b 	sbc.w	r5, r3, fp
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	00eb      	lsls	r3, r5, #3
 80048ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048d2:	00e2      	lsls	r2, r4, #3
 80048d4:	4614      	mov	r4, r2
 80048d6:	461d      	mov	r5, r3
 80048d8:	4643      	mov	r3, r8
 80048da:	18e3      	adds	r3, r4, r3
 80048dc:	603b      	str	r3, [r7, #0]
 80048de:	464b      	mov	r3, r9
 80048e0:	eb45 0303 	adc.w	r3, r5, r3
 80048e4:	607b      	str	r3, [r7, #4]
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048f2:	4629      	mov	r1, r5
 80048f4:	028b      	lsls	r3, r1, #10
 80048f6:	4621      	mov	r1, r4
 80048f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048fc:	4621      	mov	r1, r4
 80048fe:	028a      	lsls	r2, r1, #10
 8004900:	4610      	mov	r0, r2
 8004902:	4619      	mov	r1, r3
 8004904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004906:	2200      	movs	r2, #0
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	61fa      	str	r2, [r7, #28]
 800490c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004910:	f7fd f936 	bl	8001b80 <__aeabi_uldivmod>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4613      	mov	r3, r2
 800491a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800491c:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <HAL_RCC_GetSysClockFreq+0x200>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	0c1b      	lsrs	r3, r3, #16
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	3301      	adds	r3, #1
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800492c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800492e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004930:	fbb2 f3f3 	udiv	r3, r2, r3
 8004934:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004936:	e002      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004938:	4b05      	ldr	r3, [pc, #20]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x204>)
 800493a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800493c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800493e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004940:	4618      	mov	r0, r3
 8004942:	3750      	adds	r7, #80	@ 0x50
 8004944:	46bd      	mov	sp, r7
 8004946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800494a:	bf00      	nop
 800494c:	40023800 	.word	0x40023800
 8004950:	00f42400 	.word	0x00f42400
 8004954:	007a1200 	.word	0x007a1200

08004958 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800495c:	4b03      	ldr	r3, [pc, #12]	@ (800496c <HAL_RCC_GetHCLKFreq+0x14>)
 800495e:	681b      	ldr	r3, [r3, #0]
}
 8004960:	4618      	mov	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	20000030 	.word	0x20000030

08004970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004974:	f7ff fff0 	bl	8004958 <HAL_RCC_GetHCLKFreq>
 8004978:	4602      	mov	r2, r0
 800497a:	4b05      	ldr	r3, [pc, #20]	@ (8004990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	0a9b      	lsrs	r3, r3, #10
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	4903      	ldr	r1, [pc, #12]	@ (8004994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004986:	5ccb      	ldrb	r3, [r1, r3]
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800498c:	4618      	mov	r0, r3
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40023800 	.word	0x40023800
 8004994:	08006b88 	.word	0x08006b88

08004998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800499c:	f7ff ffdc 	bl	8004958 <HAL_RCC_GetHCLKFreq>
 80049a0:	4602      	mov	r2, r0
 80049a2:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	0b5b      	lsrs	r3, r3, #13
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	4903      	ldr	r1, [pc, #12]	@ (80049bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ae:	5ccb      	ldrb	r3, [r1, r3]
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40023800 	.word	0x40023800
 80049bc:	08006b88 	.word	0x08006b88

080049c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d012      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049e8:	4b69      	ldr	r3, [pc, #420]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4a68      	ldr	r2, [pc, #416]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80049f2:	6093      	str	r3, [r2, #8]
 80049f4:	4b66      	ldr	r3, [pc, #408]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049fc:	4964      	ldr	r1, [pc, #400]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d017      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a20:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a28:	4959      	ldr	r1, [pc, #356]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a38:	d101      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a46:	2301      	movs	r3, #1
 8004a48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d017      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a56:	4b4e      	ldr	r3, [pc, #312]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a5c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a64:	494a      	ldr	r1, [pc, #296]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a74:	d101      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a76:	2301      	movs	r3, #1
 8004a78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a82:	2301      	movs	r3, #1
 8004a84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a92:	2301      	movs	r3, #1
 8004a94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 808b 	beq.w	8004bba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa8:	4a39      	ldr	r2, [pc, #228]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aae:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ab0:	4b37      	ldr	r3, [pc, #220]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004abc:	4b35      	ldr	r3, [pc, #212]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a34      	ldr	r2, [pc, #208]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac8:	f7fe fb3c 	bl	8003144 <HAL_GetTick>
 8004acc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad0:	f7fe fb38 	bl	8003144 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	@ 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e357      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004aee:	4b28      	ldr	r3, [pc, #160]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004af6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d035      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d02e      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b0c:	4b20      	ldr	r3, [pc, #128]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b16:	4b1e      	ldr	r3, [pc, #120]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b20:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b22:	4b1b      	ldr	r3, [pc, #108]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b26:	4a1a      	ldr	r2, [pc, #104]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b2c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b2e:	4a18      	ldr	r2, [pc, #96]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b34:	4b16      	ldr	r3, [pc, #88]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d114      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fe fb00 	bl	8003144 <HAL_GetTick>
 8004b44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b46:	e00a      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b48:	f7fe fafc 	bl	8003144 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e319      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0ee      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b76:	d111      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b78:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b84:	4b04      	ldr	r3, [pc, #16]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b86:	400b      	ands	r3, r1
 8004b88:	4901      	ldr	r1, [pc, #4]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	608b      	str	r3, [r1, #8]
 8004b8e:	e00b      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b90:	40023800 	.word	0x40023800
 8004b94:	40007000 	.word	0x40007000
 8004b98:	0ffffcff 	.word	0x0ffffcff
 8004b9c:	4baa      	ldr	r3, [pc, #680]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4aa9      	ldr	r2, [pc, #676]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ba2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004ba6:	6093      	str	r3, [r2, #8]
 8004ba8:	4ba7      	ldr	r3, [pc, #668]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004baa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb4:	49a4      	ldr	r1, [pc, #656]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0310 	and.w	r3, r3, #16
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d010      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bc6:	4ba0      	ldr	r3, [pc, #640]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bcc:	4a9e      	ldr	r2, [pc, #632]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004bd6:	4b9c      	ldr	r3, [pc, #624]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be0:	4999      	ldr	r1, [pc, #612]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bf4:	4b94      	ldr	r3, [pc, #592]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c02:	4991      	ldr	r1, [pc, #580]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c16:	4b8c      	ldr	r3, [pc, #560]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c24:	4988      	ldr	r1, [pc, #544]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c38:	4b83      	ldr	r3, [pc, #524]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c46:	4980      	ldr	r1, [pc, #512]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c5a:	4b7b      	ldr	r3, [pc, #492]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c60:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c68:	4977      	ldr	r1, [pc, #476]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c7c:	4b72      	ldr	r3, [pc, #456]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c82:	f023 0203 	bic.w	r2, r3, #3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8a:	496f      	ldr	r1, [pc, #444]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c9e:	4b6a      	ldr	r3, [pc, #424]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca4:	f023 020c 	bic.w	r2, r3, #12
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cac:	4966      	ldr	r1, [pc, #408]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cc0:	4b61      	ldr	r3, [pc, #388]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cce:	495e      	ldr	r1, [pc, #376]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ce2:	4b59      	ldr	r3, [pc, #356]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf0:	4955      	ldr	r1, [pc, #340]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d04:	4b50      	ldr	r3, [pc, #320]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d0a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d12:	494d      	ldr	r1, [pc, #308]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d26:	4b48      	ldr	r3, [pc, #288]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d34:	4944      	ldr	r1, [pc, #272]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d48:	4b3f      	ldr	r3, [pc, #252]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d56:	493c      	ldr	r1, [pc, #240]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d6a:	4b37      	ldr	r3, [pc, #220]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d70:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d78:	4933      	ldr	r1, [pc, #204]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d92:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d9a:	492b      	ldr	r1, [pc, #172]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d011      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004dae:	4b26      	ldr	r3, [pc, #152]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dbc:	4922      	ldr	r1, [pc, #136]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dcc:	d101      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004dde:	2301      	movs	r3, #1
 8004de0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dee:	4b16      	ldr	r3, [pc, #88]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dfc:	4912      	ldr	r1, [pc, #72]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00b      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e10:	4b0d      	ldr	r3, [pc, #52]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e16:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e20:	4909      	ldr	r1, [pc, #36]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d006      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 80d9 	beq.w	8004fee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e3c:	4b02      	ldr	r3, [pc, #8]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a01      	ldr	r2, [pc, #4]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e46:	e001      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e4e:	f7fe f979 	bl	8003144 <HAL_GetTick>
 8004e52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e54:	e008      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e56:	f7fe f975 	bl	8003144 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b64      	cmp	r3, #100	@ 0x64
 8004e62:	d901      	bls.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e194      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e68:	4b6c      	ldr	r3, [pc, #432]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1f0      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d021      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d11d      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e88:	4b64      	ldr	r3, [pc, #400]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e8e:	0c1b      	lsrs	r3, r3, #16
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e96:	4b61      	ldr	r3, [pc, #388]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e9c:	0e1b      	lsrs	r3, r3, #24
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	019a      	lsls	r2, r3, #6
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	041b      	lsls	r3, r3, #16
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	061b      	lsls	r3, r3, #24
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	071b      	lsls	r3, r3, #28
 8004ebc:	4957      	ldr	r1, [pc, #348]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d004      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ed8:	d00a      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d02e      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eee:	d129      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ef6:	0c1b      	lsrs	r3, r3, #16
 8004ef8:	f003 0303 	and.w	r3, r3, #3
 8004efc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004efe:	4b47      	ldr	r3, [pc, #284]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f04:	0f1b      	lsrs	r3, r3, #28
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	019a      	lsls	r2, r3, #6
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	061b      	lsls	r3, r3, #24
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	071b      	lsls	r3, r3, #28
 8004f24:	493d      	ldr	r1, [pc, #244]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f32:	f023 021f 	bic.w	r2, r3, #31
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	4937      	ldr	r1, [pc, #220]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01d      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f50:	4b32      	ldr	r3, [pc, #200]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f56:	0e1b      	lsrs	r3, r3, #24
 8004f58:	f003 030f 	and.w	r3, r3, #15
 8004f5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f64:	0f1b      	lsrs	r3, r3, #28
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	019a      	lsls	r2, r3, #6
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	041b      	lsls	r3, r3, #16
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	061b      	lsls	r3, r3, #24
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	071b      	lsls	r3, r3, #28
 8004f84:	4925      	ldr	r1, [pc, #148]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d011      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	019a      	lsls	r2, r3, #6
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	041b      	lsls	r3, r3, #16
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	061b      	lsls	r3, r3, #24
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	071b      	lsls	r3, r3, #28
 8004fb4:	4919      	ldr	r1, [pc, #100]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fbc:	4b17      	ldr	r3, [pc, #92]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a16      	ldr	r2, [pc, #88]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc8:	f7fe f8bc 	bl	8003144 <HAL_GetTick>
 8004fcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fd0:	f7fe f8b8 	bl	8003144 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b64      	cmp	r3, #100	@ 0x64
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e0d7      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	f040 80cd 	bne.w	8005190 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ff6:	4b09      	ldr	r3, [pc, #36]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a08      	ldr	r2, [pc, #32]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ffc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005002:	f7fe f89f 	bl	8003144 <HAL_GetTick>
 8005006:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005008:	e00a      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800500a:	f7fe f89b 	bl	8003144 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b64      	cmp	r3, #100	@ 0x64
 8005016:	d903      	bls.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e0ba      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800501c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005020:	4b5e      	ldr	r3, [pc, #376]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800502c:	d0ed      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800504a:	2b00      	cmp	r3, #0
 800504c:	d02e      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005052:	2b00      	cmp	r3, #0
 8005054:	d12a      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005056:	4b51      	ldr	r3, [pc, #324]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505c:	0c1b      	lsrs	r3, r3, #16
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005064:	4b4d      	ldr	r3, [pc, #308]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506a:	0f1b      	lsrs	r3, r3, #28
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	019a      	lsls	r2, r3, #6
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	041b      	lsls	r3, r3, #16
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	061b      	lsls	r3, r3, #24
 8005084:	431a      	orrs	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	071b      	lsls	r3, r3, #28
 800508a:	4944      	ldr	r1, [pc, #272]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005092:	4b42      	ldr	r3, [pc, #264]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005094:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005098:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a0:	3b01      	subs	r3, #1
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	493d      	ldr	r1, [pc, #244]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d022      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050c0:	d11d      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050c2:	4b36      	ldr	r3, [pc, #216]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c8:	0e1b      	lsrs	r3, r3, #24
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050d0:	4b32      	ldr	r3, [pc, #200]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d6:	0f1b      	lsrs	r3, r3, #28
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	019a      	lsls	r2, r3, #6
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	041b      	lsls	r3, r3, #16
 80050ea:	431a      	orrs	r2, r3
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	061b      	lsls	r3, r3, #24
 80050f0:	431a      	orrs	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	071b      	lsls	r3, r3, #28
 80050f6:	4929      	ldr	r1, [pc, #164]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d028      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800510a:	4b24      	ldr	r3, [pc, #144]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005110:	0e1b      	lsrs	r3, r3, #24
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005118:	4b20      	ldr	r3, [pc, #128]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800511e:	0c1b      	lsrs	r3, r3, #16
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	019a      	lsls	r2, r3, #6
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	041b      	lsls	r3, r3, #16
 8005130:	431a      	orrs	r2, r3
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	061b      	lsls	r3, r3, #24
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	071b      	lsls	r3, r3, #28
 800513e:	4917      	ldr	r1, [pc, #92]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005146:	4b15      	ldr	r3, [pc, #84]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800514c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005154:	4911      	ldr	r1, [pc, #68]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800515c:	4b0f      	ldr	r3, [pc, #60]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a0e      	ldr	r2, [pc, #56]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005162:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005166:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005168:	f7fd ffec 	bl	8003144 <HAL_GetTick>
 800516c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800516e:	e008      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005170:	f7fd ffe8 	bl	8003144 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b64      	cmp	r3, #100	@ 0x64
 800517c:	d901      	bls.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e007      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005182:	4b06      	ldr	r3, [pc, #24]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800518a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800518e:	d1ef      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3720      	adds	r7, #32
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40023800 	.word	0x40023800

080051a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e040      	b.n	8005234 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fd fdf2 	bl	8002dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2224      	movs	r2, #36	@ 0x24
 80051cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0201 	bic.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fb16 	bl	8005818 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f8af 	bl	8005350 <UART_SetConfig>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e01b      	b.n	8005234 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800520a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800521a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fb95 	bl	800595c <UART_CheckIdleState>
 8005232:	4603      	mov	r3, r0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08a      	sub	sp, #40	@ 0x28
 8005240:	af02      	add	r7, sp, #8
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005250:	2b20      	cmp	r3, #32
 8005252:	d177      	bne.n	8005344 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_UART_Transmit+0x24>
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e070      	b.n	8005346 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2221      	movs	r2, #33	@ 0x21
 8005270:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005272:	f7fd ff67 	bl	8003144 <HAL_GetTick>
 8005276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	88fa      	ldrh	r2, [r7, #6]
 8005284:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005290:	d108      	bne.n	80052a4 <HAL_UART_Transmit+0x68>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d104      	bne.n	80052a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800529a:	2300      	movs	r3, #0
 800529c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	e003      	b.n	80052ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a8:	2300      	movs	r3, #0
 80052aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052ac:	e02f      	b.n	800530e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2200      	movs	r2, #0
 80052b6:	2180      	movs	r1, #128	@ 0x80
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 fba6 	bl	8005a0a <UART_WaitOnFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d004      	beq.n	80052ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2220      	movs	r2, #32
 80052c8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e03b      	b.n	8005346 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10b      	bne.n	80052ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	3302      	adds	r3, #2
 80052e8:	61bb      	str	r3, [r7, #24]
 80052ea:	e007      	b.n	80052fc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	781a      	ldrb	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	3301      	adds	r3, #1
 80052fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1c9      	bne.n	80052ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2200      	movs	r2, #0
 8005322:	2140      	movs	r1, #64	@ 0x40
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 fb70 	bl	8005a0a <UART_WaitOnFlagUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d004      	beq.n	800533a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e005      	b.n	8005346 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2220      	movs	r2, #32
 800533e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	e000      	b.n	8005346 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005344:	2302      	movs	r3, #2
  }
}
 8005346:	4618      	mov	r0, r3
 8005348:	3720      	adds	r7, #32
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005358:	2300      	movs	r3, #0
 800535a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4ba6      	ldr	r3, [pc, #664]	@ (8005614 <UART_SetConfig+0x2c4>)
 800537c:	4013      	ands	r3, r2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	6979      	ldr	r1, [r7, #20]
 8005384:	430b      	orrs	r3, r1
 8005386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	430a      	orrs	r2, r1
 80053c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a94      	ldr	r2, [pc, #592]	@ (8005618 <UART_SetConfig+0x2c8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d120      	bne.n	800540e <UART_SetConfig+0xbe>
 80053cc:	4b93      	ldr	r3, [pc, #588]	@ (800561c <UART_SetConfig+0x2cc>)
 80053ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d816      	bhi.n	8005408 <UART_SetConfig+0xb8>
 80053da:	a201      	add	r2, pc, #4	@ (adr r2, 80053e0 <UART_SetConfig+0x90>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	080053f1 	.word	0x080053f1
 80053e4:	080053fd 	.word	0x080053fd
 80053e8:	080053f7 	.word	0x080053f7
 80053ec:	08005403 	.word	0x08005403
 80053f0:	2301      	movs	r3, #1
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e150      	b.n	8005698 <UART_SetConfig+0x348>
 80053f6:	2302      	movs	r3, #2
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e14d      	b.n	8005698 <UART_SetConfig+0x348>
 80053fc:	2304      	movs	r3, #4
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e14a      	b.n	8005698 <UART_SetConfig+0x348>
 8005402:	2308      	movs	r3, #8
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e147      	b.n	8005698 <UART_SetConfig+0x348>
 8005408:	2310      	movs	r3, #16
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e144      	b.n	8005698 <UART_SetConfig+0x348>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a83      	ldr	r2, [pc, #524]	@ (8005620 <UART_SetConfig+0x2d0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d132      	bne.n	800547e <UART_SetConfig+0x12e>
 8005418:	4b80      	ldr	r3, [pc, #512]	@ (800561c <UART_SetConfig+0x2cc>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800541e:	f003 030c 	and.w	r3, r3, #12
 8005422:	2b0c      	cmp	r3, #12
 8005424:	d828      	bhi.n	8005478 <UART_SetConfig+0x128>
 8005426:	a201      	add	r2, pc, #4	@ (adr r2, 800542c <UART_SetConfig+0xdc>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	08005461 	.word	0x08005461
 8005430:	08005479 	.word	0x08005479
 8005434:	08005479 	.word	0x08005479
 8005438:	08005479 	.word	0x08005479
 800543c:	0800546d 	.word	0x0800546d
 8005440:	08005479 	.word	0x08005479
 8005444:	08005479 	.word	0x08005479
 8005448:	08005479 	.word	0x08005479
 800544c:	08005467 	.word	0x08005467
 8005450:	08005479 	.word	0x08005479
 8005454:	08005479 	.word	0x08005479
 8005458:	08005479 	.word	0x08005479
 800545c:	08005473 	.word	0x08005473
 8005460:	2300      	movs	r3, #0
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	e118      	b.n	8005698 <UART_SetConfig+0x348>
 8005466:	2302      	movs	r3, #2
 8005468:	77fb      	strb	r3, [r7, #31]
 800546a:	e115      	b.n	8005698 <UART_SetConfig+0x348>
 800546c:	2304      	movs	r3, #4
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e112      	b.n	8005698 <UART_SetConfig+0x348>
 8005472:	2308      	movs	r3, #8
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e10f      	b.n	8005698 <UART_SetConfig+0x348>
 8005478:	2310      	movs	r3, #16
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e10c      	b.n	8005698 <UART_SetConfig+0x348>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a68      	ldr	r2, [pc, #416]	@ (8005624 <UART_SetConfig+0x2d4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d120      	bne.n	80054ca <UART_SetConfig+0x17a>
 8005488:	4b64      	ldr	r3, [pc, #400]	@ (800561c <UART_SetConfig+0x2cc>)
 800548a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800548e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005492:	2b30      	cmp	r3, #48	@ 0x30
 8005494:	d013      	beq.n	80054be <UART_SetConfig+0x16e>
 8005496:	2b30      	cmp	r3, #48	@ 0x30
 8005498:	d814      	bhi.n	80054c4 <UART_SetConfig+0x174>
 800549a:	2b20      	cmp	r3, #32
 800549c:	d009      	beq.n	80054b2 <UART_SetConfig+0x162>
 800549e:	2b20      	cmp	r3, #32
 80054a0:	d810      	bhi.n	80054c4 <UART_SetConfig+0x174>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <UART_SetConfig+0x15c>
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d006      	beq.n	80054b8 <UART_SetConfig+0x168>
 80054aa:	e00b      	b.n	80054c4 <UART_SetConfig+0x174>
 80054ac:	2300      	movs	r3, #0
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e0f2      	b.n	8005698 <UART_SetConfig+0x348>
 80054b2:	2302      	movs	r3, #2
 80054b4:	77fb      	strb	r3, [r7, #31]
 80054b6:	e0ef      	b.n	8005698 <UART_SetConfig+0x348>
 80054b8:	2304      	movs	r3, #4
 80054ba:	77fb      	strb	r3, [r7, #31]
 80054bc:	e0ec      	b.n	8005698 <UART_SetConfig+0x348>
 80054be:	2308      	movs	r3, #8
 80054c0:	77fb      	strb	r3, [r7, #31]
 80054c2:	e0e9      	b.n	8005698 <UART_SetConfig+0x348>
 80054c4:	2310      	movs	r3, #16
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e0e6      	b.n	8005698 <UART_SetConfig+0x348>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a56      	ldr	r2, [pc, #344]	@ (8005628 <UART_SetConfig+0x2d8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d120      	bne.n	8005516 <UART_SetConfig+0x1c6>
 80054d4:	4b51      	ldr	r3, [pc, #324]	@ (800561c <UART_SetConfig+0x2cc>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054de:	2bc0      	cmp	r3, #192	@ 0xc0
 80054e0:	d013      	beq.n	800550a <UART_SetConfig+0x1ba>
 80054e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80054e4:	d814      	bhi.n	8005510 <UART_SetConfig+0x1c0>
 80054e6:	2b80      	cmp	r3, #128	@ 0x80
 80054e8:	d009      	beq.n	80054fe <UART_SetConfig+0x1ae>
 80054ea:	2b80      	cmp	r3, #128	@ 0x80
 80054ec:	d810      	bhi.n	8005510 <UART_SetConfig+0x1c0>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <UART_SetConfig+0x1a8>
 80054f2:	2b40      	cmp	r3, #64	@ 0x40
 80054f4:	d006      	beq.n	8005504 <UART_SetConfig+0x1b4>
 80054f6:	e00b      	b.n	8005510 <UART_SetConfig+0x1c0>
 80054f8:	2300      	movs	r3, #0
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e0cc      	b.n	8005698 <UART_SetConfig+0x348>
 80054fe:	2302      	movs	r3, #2
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e0c9      	b.n	8005698 <UART_SetConfig+0x348>
 8005504:	2304      	movs	r3, #4
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e0c6      	b.n	8005698 <UART_SetConfig+0x348>
 800550a:	2308      	movs	r3, #8
 800550c:	77fb      	strb	r3, [r7, #31]
 800550e:	e0c3      	b.n	8005698 <UART_SetConfig+0x348>
 8005510:	2310      	movs	r3, #16
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e0c0      	b.n	8005698 <UART_SetConfig+0x348>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a44      	ldr	r2, [pc, #272]	@ (800562c <UART_SetConfig+0x2dc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d125      	bne.n	800556c <UART_SetConfig+0x21c>
 8005520:	4b3e      	ldr	r3, [pc, #248]	@ (800561c <UART_SetConfig+0x2cc>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800552a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800552e:	d017      	beq.n	8005560 <UART_SetConfig+0x210>
 8005530:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005534:	d817      	bhi.n	8005566 <UART_SetConfig+0x216>
 8005536:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800553a:	d00b      	beq.n	8005554 <UART_SetConfig+0x204>
 800553c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005540:	d811      	bhi.n	8005566 <UART_SetConfig+0x216>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <UART_SetConfig+0x1fe>
 8005546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800554a:	d006      	beq.n	800555a <UART_SetConfig+0x20a>
 800554c:	e00b      	b.n	8005566 <UART_SetConfig+0x216>
 800554e:	2300      	movs	r3, #0
 8005550:	77fb      	strb	r3, [r7, #31]
 8005552:	e0a1      	b.n	8005698 <UART_SetConfig+0x348>
 8005554:	2302      	movs	r3, #2
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e09e      	b.n	8005698 <UART_SetConfig+0x348>
 800555a:	2304      	movs	r3, #4
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	e09b      	b.n	8005698 <UART_SetConfig+0x348>
 8005560:	2308      	movs	r3, #8
 8005562:	77fb      	strb	r3, [r7, #31]
 8005564:	e098      	b.n	8005698 <UART_SetConfig+0x348>
 8005566:	2310      	movs	r3, #16
 8005568:	77fb      	strb	r3, [r7, #31]
 800556a:	e095      	b.n	8005698 <UART_SetConfig+0x348>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2f      	ldr	r2, [pc, #188]	@ (8005630 <UART_SetConfig+0x2e0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d125      	bne.n	80055c2 <UART_SetConfig+0x272>
 8005576:	4b29      	ldr	r3, [pc, #164]	@ (800561c <UART_SetConfig+0x2cc>)
 8005578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800557c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005580:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005584:	d017      	beq.n	80055b6 <UART_SetConfig+0x266>
 8005586:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800558a:	d817      	bhi.n	80055bc <UART_SetConfig+0x26c>
 800558c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005590:	d00b      	beq.n	80055aa <UART_SetConfig+0x25a>
 8005592:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005596:	d811      	bhi.n	80055bc <UART_SetConfig+0x26c>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <UART_SetConfig+0x254>
 800559c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a0:	d006      	beq.n	80055b0 <UART_SetConfig+0x260>
 80055a2:	e00b      	b.n	80055bc <UART_SetConfig+0x26c>
 80055a4:	2301      	movs	r3, #1
 80055a6:	77fb      	strb	r3, [r7, #31]
 80055a8:	e076      	b.n	8005698 <UART_SetConfig+0x348>
 80055aa:	2302      	movs	r3, #2
 80055ac:	77fb      	strb	r3, [r7, #31]
 80055ae:	e073      	b.n	8005698 <UART_SetConfig+0x348>
 80055b0:	2304      	movs	r3, #4
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e070      	b.n	8005698 <UART_SetConfig+0x348>
 80055b6:	2308      	movs	r3, #8
 80055b8:	77fb      	strb	r3, [r7, #31]
 80055ba:	e06d      	b.n	8005698 <UART_SetConfig+0x348>
 80055bc:	2310      	movs	r3, #16
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e06a      	b.n	8005698 <UART_SetConfig+0x348>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005634 <UART_SetConfig+0x2e4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d138      	bne.n	800563e <UART_SetConfig+0x2ee>
 80055cc:	4b13      	ldr	r3, [pc, #76]	@ (800561c <UART_SetConfig+0x2cc>)
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80055d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055da:	d017      	beq.n	800560c <UART_SetConfig+0x2bc>
 80055dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055e0:	d82a      	bhi.n	8005638 <UART_SetConfig+0x2e8>
 80055e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055e6:	d00b      	beq.n	8005600 <UART_SetConfig+0x2b0>
 80055e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055ec:	d824      	bhi.n	8005638 <UART_SetConfig+0x2e8>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <UART_SetConfig+0x2aa>
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f6:	d006      	beq.n	8005606 <UART_SetConfig+0x2b6>
 80055f8:	e01e      	b.n	8005638 <UART_SetConfig+0x2e8>
 80055fa:	2300      	movs	r3, #0
 80055fc:	77fb      	strb	r3, [r7, #31]
 80055fe:	e04b      	b.n	8005698 <UART_SetConfig+0x348>
 8005600:	2302      	movs	r3, #2
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	e048      	b.n	8005698 <UART_SetConfig+0x348>
 8005606:	2304      	movs	r3, #4
 8005608:	77fb      	strb	r3, [r7, #31]
 800560a:	e045      	b.n	8005698 <UART_SetConfig+0x348>
 800560c:	2308      	movs	r3, #8
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e042      	b.n	8005698 <UART_SetConfig+0x348>
 8005612:	bf00      	nop
 8005614:	efff69f3 	.word	0xefff69f3
 8005618:	40011000 	.word	0x40011000
 800561c:	40023800 	.word	0x40023800
 8005620:	40004400 	.word	0x40004400
 8005624:	40004800 	.word	0x40004800
 8005628:	40004c00 	.word	0x40004c00
 800562c:	40005000 	.word	0x40005000
 8005630:	40011400 	.word	0x40011400
 8005634:	40007800 	.word	0x40007800
 8005638:	2310      	movs	r3, #16
 800563a:	77fb      	strb	r3, [r7, #31]
 800563c:	e02c      	b.n	8005698 <UART_SetConfig+0x348>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a72      	ldr	r2, [pc, #456]	@ (800580c <UART_SetConfig+0x4bc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d125      	bne.n	8005694 <UART_SetConfig+0x344>
 8005648:	4b71      	ldr	r3, [pc, #452]	@ (8005810 <UART_SetConfig+0x4c0>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800564e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005652:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005656:	d017      	beq.n	8005688 <UART_SetConfig+0x338>
 8005658:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800565c:	d817      	bhi.n	800568e <UART_SetConfig+0x33e>
 800565e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005662:	d00b      	beq.n	800567c <UART_SetConfig+0x32c>
 8005664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005668:	d811      	bhi.n	800568e <UART_SetConfig+0x33e>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <UART_SetConfig+0x326>
 800566e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005672:	d006      	beq.n	8005682 <UART_SetConfig+0x332>
 8005674:	e00b      	b.n	800568e <UART_SetConfig+0x33e>
 8005676:	2300      	movs	r3, #0
 8005678:	77fb      	strb	r3, [r7, #31]
 800567a:	e00d      	b.n	8005698 <UART_SetConfig+0x348>
 800567c:	2302      	movs	r3, #2
 800567e:	77fb      	strb	r3, [r7, #31]
 8005680:	e00a      	b.n	8005698 <UART_SetConfig+0x348>
 8005682:	2304      	movs	r3, #4
 8005684:	77fb      	strb	r3, [r7, #31]
 8005686:	e007      	b.n	8005698 <UART_SetConfig+0x348>
 8005688:	2308      	movs	r3, #8
 800568a:	77fb      	strb	r3, [r7, #31]
 800568c:	e004      	b.n	8005698 <UART_SetConfig+0x348>
 800568e:	2310      	movs	r3, #16
 8005690:	77fb      	strb	r3, [r7, #31]
 8005692:	e001      	b.n	8005698 <UART_SetConfig+0x348>
 8005694:	2310      	movs	r3, #16
 8005696:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056a0:	d15b      	bne.n	800575a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80056a2:	7ffb      	ldrb	r3, [r7, #31]
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d828      	bhi.n	80056fa <UART_SetConfig+0x3aa>
 80056a8:	a201      	add	r2, pc, #4	@ (adr r2, 80056b0 <UART_SetConfig+0x360>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056d5 	.word	0x080056d5
 80056b4:	080056dd 	.word	0x080056dd
 80056b8:	080056e5 	.word	0x080056e5
 80056bc:	080056fb 	.word	0x080056fb
 80056c0:	080056eb 	.word	0x080056eb
 80056c4:	080056fb 	.word	0x080056fb
 80056c8:	080056fb 	.word	0x080056fb
 80056cc:	080056fb 	.word	0x080056fb
 80056d0:	080056f3 	.word	0x080056f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d4:	f7ff f94c 	bl	8004970 <HAL_RCC_GetPCLK1Freq>
 80056d8:	61b8      	str	r0, [r7, #24]
        break;
 80056da:	e013      	b.n	8005704 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056dc:	f7ff f95c 	bl	8004998 <HAL_RCC_GetPCLK2Freq>
 80056e0:	61b8      	str	r0, [r7, #24]
        break;
 80056e2:	e00f      	b.n	8005704 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e4:	4b4b      	ldr	r3, [pc, #300]	@ (8005814 <UART_SetConfig+0x4c4>)
 80056e6:	61bb      	str	r3, [r7, #24]
        break;
 80056e8:	e00c      	b.n	8005704 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ea:	f7ff f82f 	bl	800474c <HAL_RCC_GetSysClockFreq>
 80056ee:	61b8      	str	r0, [r7, #24]
        break;
 80056f0:	e008      	b.n	8005704 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056f6:	61bb      	str	r3, [r7, #24]
        break;
 80056f8:	e004      	b.n	8005704 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	77bb      	strb	r3, [r7, #30]
        break;
 8005702:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d074      	beq.n	80057f4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	005a      	lsls	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	085b      	lsrs	r3, r3, #1
 8005714:	441a      	add	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	fbb2 f3f3 	udiv	r3, r2, r3
 800571e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2b0f      	cmp	r3, #15
 8005724:	d916      	bls.n	8005754 <UART_SetConfig+0x404>
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800572c:	d212      	bcs.n	8005754 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	b29b      	uxth	r3, r3
 8005732:	f023 030f 	bic.w	r3, r3, #15
 8005736:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	b29b      	uxth	r3, r3
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	b29a      	uxth	r2, r3
 8005744:	89fb      	ldrh	r3, [r7, #14]
 8005746:	4313      	orrs	r3, r2
 8005748:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	89fa      	ldrh	r2, [r7, #14]
 8005750:	60da      	str	r2, [r3, #12]
 8005752:	e04f      	b.n	80057f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	77bb      	strb	r3, [r7, #30]
 8005758:	e04c      	b.n	80057f4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800575a:	7ffb      	ldrb	r3, [r7, #31]
 800575c:	2b08      	cmp	r3, #8
 800575e:	d828      	bhi.n	80057b2 <UART_SetConfig+0x462>
 8005760:	a201      	add	r2, pc, #4	@ (adr r2, 8005768 <UART_SetConfig+0x418>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	0800578d 	.word	0x0800578d
 800576c:	08005795 	.word	0x08005795
 8005770:	0800579d 	.word	0x0800579d
 8005774:	080057b3 	.word	0x080057b3
 8005778:	080057a3 	.word	0x080057a3
 800577c:	080057b3 	.word	0x080057b3
 8005780:	080057b3 	.word	0x080057b3
 8005784:	080057b3 	.word	0x080057b3
 8005788:	080057ab 	.word	0x080057ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800578c:	f7ff f8f0 	bl	8004970 <HAL_RCC_GetPCLK1Freq>
 8005790:	61b8      	str	r0, [r7, #24]
        break;
 8005792:	e013      	b.n	80057bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005794:	f7ff f900 	bl	8004998 <HAL_RCC_GetPCLK2Freq>
 8005798:	61b8      	str	r0, [r7, #24]
        break;
 800579a:	e00f      	b.n	80057bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800579c:	4b1d      	ldr	r3, [pc, #116]	@ (8005814 <UART_SetConfig+0x4c4>)
 800579e:	61bb      	str	r3, [r7, #24]
        break;
 80057a0:	e00c      	b.n	80057bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057a2:	f7fe ffd3 	bl	800474c <HAL_RCC_GetSysClockFreq>
 80057a6:	61b8      	str	r0, [r7, #24]
        break;
 80057a8:	e008      	b.n	80057bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ae:	61bb      	str	r3, [r7, #24]
        break;
 80057b0:	e004      	b.n	80057bc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	77bb      	strb	r3, [r7, #30]
        break;
 80057ba:	bf00      	nop
    }

    if (pclk != 0U)
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d018      	beq.n	80057f4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	085a      	lsrs	r2, r3, #1
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	441a      	add	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b0f      	cmp	r3, #15
 80057da:	d909      	bls.n	80057f0 <UART_SetConfig+0x4a0>
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057e2:	d205      	bcs.n	80057f0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60da      	str	r2, [r3, #12]
 80057ee:	e001      	b.n	80057f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005800:	7fbb      	ldrb	r3, [r7, #30]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40007c00 	.word	0x40007c00
 8005810:	40023800 	.word	0x40023800
 8005814:	00f42400 	.word	0x00f42400

08005818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00a      	beq.n	8005886 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588a:	f003 0304 	and.w	r3, r3, #4
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01a      	beq.n	800592e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005912:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005916:	d10a      	bne.n	800592e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	605a      	str	r2, [r3, #4]
  }
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08c      	sub	sp, #48	@ 0x30
 8005960:	af02      	add	r7, sp, #8
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800596c:	f7fd fbea 	bl	8003144 <HAL_GetTick>
 8005970:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b08      	cmp	r3, #8
 800597e:	d12e      	bne.n	80059de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005980:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	2200      	movs	r2, #0
 800598a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f83b 	bl	8005a0a <UART_WaitOnFlagUntilTimeout>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d021      	beq.n	80059de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	e853 3f00 	ldrex	r3, [r3]
 80059a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059ae:	623b      	str	r3, [r7, #32]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	61fb      	str	r3, [r7, #28]
 80059ba:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	69b9      	ldr	r1, [r7, #24]
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	617b      	str	r3, [r7, #20]
   return(result);
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e6      	bne.n	800599a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e011      	b.n	8005a02 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3728      	adds	r7, #40	@ 0x28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	603b      	str	r3, [r7, #0]
 8005a16:	4613      	mov	r3, r2
 8005a18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a1a:	e04f      	b.n	8005abc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a22:	d04b      	beq.n	8005abc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a24:	f7fd fb8e 	bl	8003144 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d302      	bcc.n	8005a3a <UART_WaitOnFlagUntilTimeout+0x30>
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e04e      	b.n	8005adc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d037      	beq.n	8005abc <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b80      	cmp	r3, #128	@ 0x80
 8005a50:	d034      	beq.n	8005abc <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b40      	cmp	r3, #64	@ 0x40
 8005a56:	d031      	beq.n	8005abc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d110      	bne.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2208      	movs	r2, #8
 8005a6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 f838 	bl	8005ae4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2208      	movs	r2, #8
 8005a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e029      	b.n	8005adc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a96:	d111      	bne.n	8005abc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005aa0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 f81e 	bl	8005ae4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e00f      	b.n	8005adc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69da      	ldr	r2, [r3, #28]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	bf0c      	ite	eq
 8005acc:	2301      	moveq	r3, #1
 8005ace:	2300      	movne	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	79fb      	ldrb	r3, [r7, #7]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d0a0      	beq.n	8005a1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b095      	sub	sp, #84	@ 0x54
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e6      	bne.n	8005aec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3308      	adds	r3, #8
 8005b24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	f023 0301 	bic.w	r3, r3, #1
 8005b34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e5      	bne.n	8005b1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d118      	bne.n	8005b8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	e853 3f00 	ldrex	r3, [r3]
 8005b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f023 0310 	bic.w	r3, r3, #16
 8005b6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	461a      	mov	r2, r3
 8005b76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	6979      	ldr	r1, [r7, #20]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	e841 2300 	strex	r3, r2, [r1]
 8005b84:	613b      	str	r3, [r7, #16]
   return(result);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e6      	bne.n	8005b5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ba0:	bf00      	nop
 8005ba2:	3754      	adds	r7, #84	@ 0x54
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bac:	b084      	sub	sp, #16
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	f107 001c 	add.w	r0, r7, #28
 8005bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bbe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d121      	bne.n	8005c0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	4b21      	ldr	r3, [pc, #132]	@ (8005c5c <USB_CoreInit+0xb0>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d105      	bne.n	8005bfe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fa92 	bl	8006128 <USB_CoreReset>
 8005c04:	4603      	mov	r3, r0
 8005c06:	73fb      	strb	r3, [r7, #15]
 8005c08:	e010      	b.n	8005c2c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fa86 	bl	8006128 <USB_CoreReset>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c24:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005c2c:	7fbb      	ldrb	r3, [r7, #30]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d10b      	bne.n	8005c4a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f043 0206 	orr.w	r2, r3, #6
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f043 0220 	orr.w	r2, r3, #32
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c56:	b004      	add	sp, #16
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	ffbdffbf 	.word	0xffbdffbf

08005c60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f023 0201 	bic.w	r2, r3, #1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d115      	bne.n	8005cd0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005cb0:	200a      	movs	r0, #10
 8005cb2:	f7fd fa53 	bl	800315c <HAL_Delay>
      ms += 10U;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	330a      	adds	r3, #10
 8005cba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fa25 	bl	800610c <USB_GetMode>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d01e      	beq.n	8005d06 <USB_SetCurrentMode+0x84>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ccc:	d9f0      	bls.n	8005cb0 <USB_SetCurrentMode+0x2e>
 8005cce:	e01a      	b.n	8005d06 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cd0:	78fb      	ldrb	r3, [r7, #3]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d115      	bne.n	8005d02 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ce2:	200a      	movs	r0, #10
 8005ce4:	f7fd fa3a 	bl	800315c <HAL_Delay>
      ms += 10U;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	330a      	adds	r3, #10
 8005cec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fa0c 	bl	800610c <USB_GetMode>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d005      	beq.n	8005d06 <USB_SetCurrentMode+0x84>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2bc7      	cmp	r3, #199	@ 0xc7
 8005cfe:	d9f0      	bls.n	8005ce2 <USB_SetCurrentMode+0x60>
 8005d00:	e001      	b.n	8005d06 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e005      	b.n	8005d12 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2bc8      	cmp	r3, #200	@ 0xc8
 8005d0a:	d101      	bne.n	8005d10 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b086      	sub	sp, #24
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d36:	2300      	movs	r3, #0
 8005d38:	613b      	str	r3, [r7, #16]
 8005d3a:	e009      	b.n	8005d50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	3340      	adds	r3, #64	@ 0x40
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	2200      	movs	r2, #0
 8005d48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2b0e      	cmp	r3, #14
 8005d54:	d9f2      	bls.n	8005d3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d11c      	bne.n	8005d98 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d6c:	f043 0302 	orr.w	r3, r3, #2
 8005d70:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d76:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	e005      	b.n	8005da4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005daa:	461a      	mov	r2, r3
 8005dac:	2300      	movs	r3, #0
 8005dae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005db0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d10d      	bne.n	8005dd4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005db8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d104      	bne.n	8005dca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f968 	bl	8006098 <USB_SetDevSpeed>
 8005dc8:	e008      	b.n	8005ddc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005dca:	2101      	movs	r1, #1
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f963 	bl	8006098 <USB_SetDevSpeed>
 8005dd2:	e003      	b.n	8005ddc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005dd4:	2103      	movs	r1, #3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f95e 	bl	8006098 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ddc:	2110      	movs	r1, #16
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f8fa 	bl	8005fd8 <USB_FlushTxFifo>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f924 	bl	800603c <USB_FlushRxFifo>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e04:	461a      	mov	r2, r3
 8005e06:	2300      	movs	r3, #0
 8005e08:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e10:	461a      	mov	r2, r3
 8005e12:	2300      	movs	r3, #0
 8005e14:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e22:	2300      	movs	r3, #0
 8005e24:	613b      	str	r3, [r7, #16]
 8005e26:	e043      	b.n	8005eb0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e3e:	d118      	bne.n	8005e72 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e52:	461a      	mov	r2, r3
 8005e54:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e013      	b.n	8005e84 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	e008      	b.n	8005e84 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e7e:	461a      	mov	r2, r3
 8005e80:	2300      	movs	r3, #0
 8005e82:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e90:	461a      	mov	r2, r3
 8005e92:	2300      	movs	r3, #0
 8005e94:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ea8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	3301      	adds	r3, #1
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d3b5      	bcc.n	8005e28 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	613b      	str	r3, [r7, #16]
 8005ec0:	e043      	b.n	8005f4a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ed8:	d118      	bne.n	8005f0c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10a      	bne.n	8005ef6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eec:	461a      	mov	r2, r3
 8005eee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	e013      	b.n	8005f1e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f02:	461a      	mov	r2, r3
 8005f04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	e008      	b.n	8005f1e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f18:	461a      	mov	r2, r3
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	3301      	adds	r3, #1
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f4e:	461a      	mov	r2, r3
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d3b5      	bcc.n	8005ec2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f68:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005f76:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d105      	bne.n	8005f8c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	f043 0210 	orr.w	r2, r3, #16
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	699a      	ldr	r2, [r3, #24]
 8005f90:	4b0f      	ldr	r3, [pc, #60]	@ (8005fd0 <USB_DevInit+0x2b4>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	f043 0208 	orr.w	r2, r3, #8
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005fac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d105      	bne.n	8005fc0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699a      	ldr	r2, [r3, #24]
 8005fb8:	4b06      	ldr	r3, [pc, #24]	@ (8005fd4 <USB_DevInit+0x2b8>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fcc:	b004      	add	sp, #16
 8005fce:	4770      	bx	lr
 8005fd0:	803c3800 	.word	0x803c3800
 8005fd4:	40000004 	.word	0x40000004

08005fd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ff2:	d901      	bls.n	8005ff8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e01b      	b.n	8006030 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	daf2      	bge.n	8005fe6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	019b      	lsls	r3, r3, #6
 8006008:	f043 0220 	orr.w	r2, r3, #32
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3301      	adds	r3, #1
 8006014:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800601c:	d901      	bls.n	8006022 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e006      	b.n	8006030 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b20      	cmp	r3, #32
 800602c:	d0f0      	beq.n	8006010 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	3301      	adds	r3, #1
 800604c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006054:	d901      	bls.n	800605a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e018      	b.n	800608c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	daf2      	bge.n	8006048 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2210      	movs	r2, #16
 800606a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3301      	adds	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006078:	d901      	bls.n	800607e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e006      	b.n	800608c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f003 0310 	and.w	r3, r3, #16
 8006086:	2b10      	cmp	r3, #16
 8006088:	d0f0      	beq.n	800606c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	68f9      	ldr	r1, [r7, #12]
 80060b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060b8:	4313      	orrs	r3, r2
 80060ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b085      	sub	sp, #20
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80060e4:	f023 0303 	bic.w	r3, r3, #3
 80060e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060f8:	f043 0302 	orr.w	r3, r3, #2
 80060fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	f003 0301 	and.w	r3, r3, #1
}
 800611c:	4618      	mov	r0, r3
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3301      	adds	r3, #1
 8006138:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006140:	d901      	bls.n	8006146 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e01b      	b.n	800617e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	daf2      	bge.n	8006134 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	f043 0201 	orr.w	r2, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3301      	adds	r3, #1
 8006162:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800616a:	d901      	bls.n	8006170 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e006      	b.n	800617e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b01      	cmp	r3, #1
 800617a:	d0f0      	beq.n	800615e <USB_CoreReset+0x36>

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <siprintf>:
 800618c:	b40e      	push	{r1, r2, r3}
 800618e:	b500      	push	{lr}
 8006190:	b09c      	sub	sp, #112	@ 0x70
 8006192:	ab1d      	add	r3, sp, #116	@ 0x74
 8006194:	9002      	str	r0, [sp, #8]
 8006196:	9006      	str	r0, [sp, #24]
 8006198:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800619c:	4809      	ldr	r0, [pc, #36]	@ (80061c4 <siprintf+0x38>)
 800619e:	9107      	str	r1, [sp, #28]
 80061a0:	9104      	str	r1, [sp, #16]
 80061a2:	4909      	ldr	r1, [pc, #36]	@ (80061c8 <siprintf+0x3c>)
 80061a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80061a8:	9105      	str	r1, [sp, #20]
 80061aa:	6800      	ldr	r0, [r0, #0]
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	a902      	add	r1, sp, #8
 80061b0:	f000 f994 	bl	80064dc <_svfiprintf_r>
 80061b4:	9b02      	ldr	r3, [sp, #8]
 80061b6:	2200      	movs	r2, #0
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	b01c      	add	sp, #112	@ 0x70
 80061bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80061c0:	b003      	add	sp, #12
 80061c2:	4770      	bx	lr
 80061c4:	2000003c 	.word	0x2000003c
 80061c8:	ffff0208 	.word	0xffff0208

080061cc <memset>:
 80061cc:	4402      	add	r2, r0
 80061ce:	4603      	mov	r3, r0
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d100      	bne.n	80061d6 <memset+0xa>
 80061d4:	4770      	bx	lr
 80061d6:	f803 1b01 	strb.w	r1, [r3], #1
 80061da:	e7f9      	b.n	80061d0 <memset+0x4>

080061dc <__errno>:
 80061dc:	4b01      	ldr	r3, [pc, #4]	@ (80061e4 <__errno+0x8>)
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	2000003c 	.word	0x2000003c

080061e8 <__libc_init_array>:
 80061e8:	b570      	push	{r4, r5, r6, lr}
 80061ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006220 <__libc_init_array+0x38>)
 80061ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006224 <__libc_init_array+0x3c>)
 80061ee:	1b64      	subs	r4, r4, r5
 80061f0:	10a4      	asrs	r4, r4, #2
 80061f2:	2600      	movs	r6, #0
 80061f4:	42a6      	cmp	r6, r4
 80061f6:	d109      	bne.n	800620c <__libc_init_array+0x24>
 80061f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006228 <__libc_init_array+0x40>)
 80061fa:	4c0c      	ldr	r4, [pc, #48]	@ (800622c <__libc_init_array+0x44>)
 80061fc:	f000 fc66 	bl	8006acc <_init>
 8006200:	1b64      	subs	r4, r4, r5
 8006202:	10a4      	asrs	r4, r4, #2
 8006204:	2600      	movs	r6, #0
 8006206:	42a6      	cmp	r6, r4
 8006208:	d105      	bne.n	8006216 <__libc_init_array+0x2e>
 800620a:	bd70      	pop	{r4, r5, r6, pc}
 800620c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006210:	4798      	blx	r3
 8006212:	3601      	adds	r6, #1
 8006214:	e7ee      	b.n	80061f4 <__libc_init_array+0xc>
 8006216:	f855 3b04 	ldr.w	r3, [r5], #4
 800621a:	4798      	blx	r3
 800621c:	3601      	adds	r6, #1
 800621e:	e7f2      	b.n	8006206 <__libc_init_array+0x1e>
 8006220:	08006bcc 	.word	0x08006bcc
 8006224:	08006bcc 	.word	0x08006bcc
 8006228:	08006bcc 	.word	0x08006bcc
 800622c:	08006bd0 	.word	0x08006bd0

08006230 <__retarget_lock_acquire_recursive>:
 8006230:	4770      	bx	lr

08006232 <__retarget_lock_release_recursive>:
 8006232:	4770      	bx	lr

08006234 <_free_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4605      	mov	r5, r0
 8006238:	2900      	cmp	r1, #0
 800623a:	d041      	beq.n	80062c0 <_free_r+0x8c>
 800623c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006240:	1f0c      	subs	r4, r1, #4
 8006242:	2b00      	cmp	r3, #0
 8006244:	bfb8      	it	lt
 8006246:	18e4      	addlt	r4, r4, r3
 8006248:	f000 f8e0 	bl	800640c <__malloc_lock>
 800624c:	4a1d      	ldr	r2, [pc, #116]	@ (80062c4 <_free_r+0x90>)
 800624e:	6813      	ldr	r3, [r2, #0]
 8006250:	b933      	cbnz	r3, 8006260 <_free_r+0x2c>
 8006252:	6063      	str	r3, [r4, #4]
 8006254:	6014      	str	r4, [r2, #0]
 8006256:	4628      	mov	r0, r5
 8006258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800625c:	f000 b8dc 	b.w	8006418 <__malloc_unlock>
 8006260:	42a3      	cmp	r3, r4
 8006262:	d908      	bls.n	8006276 <_free_r+0x42>
 8006264:	6820      	ldr	r0, [r4, #0]
 8006266:	1821      	adds	r1, r4, r0
 8006268:	428b      	cmp	r3, r1
 800626a:	bf01      	itttt	eq
 800626c:	6819      	ldreq	r1, [r3, #0]
 800626e:	685b      	ldreq	r3, [r3, #4]
 8006270:	1809      	addeq	r1, r1, r0
 8006272:	6021      	streq	r1, [r4, #0]
 8006274:	e7ed      	b.n	8006252 <_free_r+0x1e>
 8006276:	461a      	mov	r2, r3
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	b10b      	cbz	r3, 8006280 <_free_r+0x4c>
 800627c:	42a3      	cmp	r3, r4
 800627e:	d9fa      	bls.n	8006276 <_free_r+0x42>
 8006280:	6811      	ldr	r1, [r2, #0]
 8006282:	1850      	adds	r0, r2, r1
 8006284:	42a0      	cmp	r0, r4
 8006286:	d10b      	bne.n	80062a0 <_free_r+0x6c>
 8006288:	6820      	ldr	r0, [r4, #0]
 800628a:	4401      	add	r1, r0
 800628c:	1850      	adds	r0, r2, r1
 800628e:	4283      	cmp	r3, r0
 8006290:	6011      	str	r1, [r2, #0]
 8006292:	d1e0      	bne.n	8006256 <_free_r+0x22>
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	6053      	str	r3, [r2, #4]
 800629a:	4408      	add	r0, r1
 800629c:	6010      	str	r0, [r2, #0]
 800629e:	e7da      	b.n	8006256 <_free_r+0x22>
 80062a0:	d902      	bls.n	80062a8 <_free_r+0x74>
 80062a2:	230c      	movs	r3, #12
 80062a4:	602b      	str	r3, [r5, #0]
 80062a6:	e7d6      	b.n	8006256 <_free_r+0x22>
 80062a8:	6820      	ldr	r0, [r4, #0]
 80062aa:	1821      	adds	r1, r4, r0
 80062ac:	428b      	cmp	r3, r1
 80062ae:	bf04      	itt	eq
 80062b0:	6819      	ldreq	r1, [r3, #0]
 80062b2:	685b      	ldreq	r3, [r3, #4]
 80062b4:	6063      	str	r3, [r4, #4]
 80062b6:	bf04      	itt	eq
 80062b8:	1809      	addeq	r1, r1, r0
 80062ba:	6021      	streq	r1, [r4, #0]
 80062bc:	6054      	str	r4, [r2, #4]
 80062be:	e7ca      	b.n	8006256 <_free_r+0x22>
 80062c0:	bd38      	pop	{r3, r4, r5, pc}
 80062c2:	bf00      	nop
 80062c4:	20002e14 	.word	0x20002e14

080062c8 <sbrk_aligned>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	4e0f      	ldr	r6, [pc, #60]	@ (8006308 <sbrk_aligned+0x40>)
 80062cc:	460c      	mov	r4, r1
 80062ce:	6831      	ldr	r1, [r6, #0]
 80062d0:	4605      	mov	r5, r0
 80062d2:	b911      	cbnz	r1, 80062da <sbrk_aligned+0x12>
 80062d4:	f000 fba6 	bl	8006a24 <_sbrk_r>
 80062d8:	6030      	str	r0, [r6, #0]
 80062da:	4621      	mov	r1, r4
 80062dc:	4628      	mov	r0, r5
 80062de:	f000 fba1 	bl	8006a24 <_sbrk_r>
 80062e2:	1c43      	adds	r3, r0, #1
 80062e4:	d103      	bne.n	80062ee <sbrk_aligned+0x26>
 80062e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80062ea:	4620      	mov	r0, r4
 80062ec:	bd70      	pop	{r4, r5, r6, pc}
 80062ee:	1cc4      	adds	r4, r0, #3
 80062f0:	f024 0403 	bic.w	r4, r4, #3
 80062f4:	42a0      	cmp	r0, r4
 80062f6:	d0f8      	beq.n	80062ea <sbrk_aligned+0x22>
 80062f8:	1a21      	subs	r1, r4, r0
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 fb92 	bl	8006a24 <_sbrk_r>
 8006300:	3001      	adds	r0, #1
 8006302:	d1f2      	bne.n	80062ea <sbrk_aligned+0x22>
 8006304:	e7ef      	b.n	80062e6 <sbrk_aligned+0x1e>
 8006306:	bf00      	nop
 8006308:	20002e10 	.word	0x20002e10

0800630c <_malloc_r>:
 800630c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006310:	1ccd      	adds	r5, r1, #3
 8006312:	f025 0503 	bic.w	r5, r5, #3
 8006316:	3508      	adds	r5, #8
 8006318:	2d0c      	cmp	r5, #12
 800631a:	bf38      	it	cc
 800631c:	250c      	movcc	r5, #12
 800631e:	2d00      	cmp	r5, #0
 8006320:	4606      	mov	r6, r0
 8006322:	db01      	blt.n	8006328 <_malloc_r+0x1c>
 8006324:	42a9      	cmp	r1, r5
 8006326:	d904      	bls.n	8006332 <_malloc_r+0x26>
 8006328:	230c      	movs	r3, #12
 800632a:	6033      	str	r3, [r6, #0]
 800632c:	2000      	movs	r0, #0
 800632e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006332:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006408 <_malloc_r+0xfc>
 8006336:	f000 f869 	bl	800640c <__malloc_lock>
 800633a:	f8d8 3000 	ldr.w	r3, [r8]
 800633e:	461c      	mov	r4, r3
 8006340:	bb44      	cbnz	r4, 8006394 <_malloc_r+0x88>
 8006342:	4629      	mov	r1, r5
 8006344:	4630      	mov	r0, r6
 8006346:	f7ff ffbf 	bl	80062c8 <sbrk_aligned>
 800634a:	1c43      	adds	r3, r0, #1
 800634c:	4604      	mov	r4, r0
 800634e:	d158      	bne.n	8006402 <_malloc_r+0xf6>
 8006350:	f8d8 4000 	ldr.w	r4, [r8]
 8006354:	4627      	mov	r7, r4
 8006356:	2f00      	cmp	r7, #0
 8006358:	d143      	bne.n	80063e2 <_malloc_r+0xd6>
 800635a:	2c00      	cmp	r4, #0
 800635c:	d04b      	beq.n	80063f6 <_malloc_r+0xea>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	4639      	mov	r1, r7
 8006362:	4630      	mov	r0, r6
 8006364:	eb04 0903 	add.w	r9, r4, r3
 8006368:	f000 fb5c 	bl	8006a24 <_sbrk_r>
 800636c:	4581      	cmp	r9, r0
 800636e:	d142      	bne.n	80063f6 <_malloc_r+0xea>
 8006370:	6821      	ldr	r1, [r4, #0]
 8006372:	1a6d      	subs	r5, r5, r1
 8006374:	4629      	mov	r1, r5
 8006376:	4630      	mov	r0, r6
 8006378:	f7ff ffa6 	bl	80062c8 <sbrk_aligned>
 800637c:	3001      	adds	r0, #1
 800637e:	d03a      	beq.n	80063f6 <_malloc_r+0xea>
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	442b      	add	r3, r5
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	f8d8 3000 	ldr.w	r3, [r8]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	bb62      	cbnz	r2, 80063e8 <_malloc_r+0xdc>
 800638e:	f8c8 7000 	str.w	r7, [r8]
 8006392:	e00f      	b.n	80063b4 <_malloc_r+0xa8>
 8006394:	6822      	ldr	r2, [r4, #0]
 8006396:	1b52      	subs	r2, r2, r5
 8006398:	d420      	bmi.n	80063dc <_malloc_r+0xd0>
 800639a:	2a0b      	cmp	r2, #11
 800639c:	d917      	bls.n	80063ce <_malloc_r+0xc2>
 800639e:	1961      	adds	r1, r4, r5
 80063a0:	42a3      	cmp	r3, r4
 80063a2:	6025      	str	r5, [r4, #0]
 80063a4:	bf18      	it	ne
 80063a6:	6059      	strne	r1, [r3, #4]
 80063a8:	6863      	ldr	r3, [r4, #4]
 80063aa:	bf08      	it	eq
 80063ac:	f8c8 1000 	streq.w	r1, [r8]
 80063b0:	5162      	str	r2, [r4, r5]
 80063b2:	604b      	str	r3, [r1, #4]
 80063b4:	4630      	mov	r0, r6
 80063b6:	f000 f82f 	bl	8006418 <__malloc_unlock>
 80063ba:	f104 000b 	add.w	r0, r4, #11
 80063be:	1d23      	adds	r3, r4, #4
 80063c0:	f020 0007 	bic.w	r0, r0, #7
 80063c4:	1ac2      	subs	r2, r0, r3
 80063c6:	bf1c      	itt	ne
 80063c8:	1a1b      	subne	r3, r3, r0
 80063ca:	50a3      	strne	r3, [r4, r2]
 80063cc:	e7af      	b.n	800632e <_malloc_r+0x22>
 80063ce:	6862      	ldr	r2, [r4, #4]
 80063d0:	42a3      	cmp	r3, r4
 80063d2:	bf0c      	ite	eq
 80063d4:	f8c8 2000 	streq.w	r2, [r8]
 80063d8:	605a      	strne	r2, [r3, #4]
 80063da:	e7eb      	b.n	80063b4 <_malloc_r+0xa8>
 80063dc:	4623      	mov	r3, r4
 80063de:	6864      	ldr	r4, [r4, #4]
 80063e0:	e7ae      	b.n	8006340 <_malloc_r+0x34>
 80063e2:	463c      	mov	r4, r7
 80063e4:	687f      	ldr	r7, [r7, #4]
 80063e6:	e7b6      	b.n	8006356 <_malloc_r+0x4a>
 80063e8:	461a      	mov	r2, r3
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	42a3      	cmp	r3, r4
 80063ee:	d1fb      	bne.n	80063e8 <_malloc_r+0xdc>
 80063f0:	2300      	movs	r3, #0
 80063f2:	6053      	str	r3, [r2, #4]
 80063f4:	e7de      	b.n	80063b4 <_malloc_r+0xa8>
 80063f6:	230c      	movs	r3, #12
 80063f8:	6033      	str	r3, [r6, #0]
 80063fa:	4630      	mov	r0, r6
 80063fc:	f000 f80c 	bl	8006418 <__malloc_unlock>
 8006400:	e794      	b.n	800632c <_malloc_r+0x20>
 8006402:	6005      	str	r5, [r0, #0]
 8006404:	e7d6      	b.n	80063b4 <_malloc_r+0xa8>
 8006406:	bf00      	nop
 8006408:	20002e14 	.word	0x20002e14

0800640c <__malloc_lock>:
 800640c:	4801      	ldr	r0, [pc, #4]	@ (8006414 <__malloc_lock+0x8>)
 800640e:	f7ff bf0f 	b.w	8006230 <__retarget_lock_acquire_recursive>
 8006412:	bf00      	nop
 8006414:	20002e0c 	.word	0x20002e0c

08006418 <__malloc_unlock>:
 8006418:	4801      	ldr	r0, [pc, #4]	@ (8006420 <__malloc_unlock+0x8>)
 800641a:	f7ff bf0a 	b.w	8006232 <__retarget_lock_release_recursive>
 800641e:	bf00      	nop
 8006420:	20002e0c 	.word	0x20002e0c

08006424 <__ssputs_r>:
 8006424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006428:	688e      	ldr	r6, [r1, #8]
 800642a:	461f      	mov	r7, r3
 800642c:	42be      	cmp	r6, r7
 800642e:	680b      	ldr	r3, [r1, #0]
 8006430:	4682      	mov	sl, r0
 8006432:	460c      	mov	r4, r1
 8006434:	4690      	mov	r8, r2
 8006436:	d82d      	bhi.n	8006494 <__ssputs_r+0x70>
 8006438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800643c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006440:	d026      	beq.n	8006490 <__ssputs_r+0x6c>
 8006442:	6965      	ldr	r5, [r4, #20]
 8006444:	6909      	ldr	r1, [r1, #16]
 8006446:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800644a:	eba3 0901 	sub.w	r9, r3, r1
 800644e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006452:	1c7b      	adds	r3, r7, #1
 8006454:	444b      	add	r3, r9
 8006456:	106d      	asrs	r5, r5, #1
 8006458:	429d      	cmp	r5, r3
 800645a:	bf38      	it	cc
 800645c:	461d      	movcc	r5, r3
 800645e:	0553      	lsls	r3, r2, #21
 8006460:	d527      	bpl.n	80064b2 <__ssputs_r+0x8e>
 8006462:	4629      	mov	r1, r5
 8006464:	f7ff ff52 	bl	800630c <_malloc_r>
 8006468:	4606      	mov	r6, r0
 800646a:	b360      	cbz	r0, 80064c6 <__ssputs_r+0xa2>
 800646c:	6921      	ldr	r1, [r4, #16]
 800646e:	464a      	mov	r2, r9
 8006470:	f000 fae8 	bl	8006a44 <memcpy>
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800647a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800647e:	81a3      	strh	r3, [r4, #12]
 8006480:	6126      	str	r6, [r4, #16]
 8006482:	6165      	str	r5, [r4, #20]
 8006484:	444e      	add	r6, r9
 8006486:	eba5 0509 	sub.w	r5, r5, r9
 800648a:	6026      	str	r6, [r4, #0]
 800648c:	60a5      	str	r5, [r4, #8]
 800648e:	463e      	mov	r6, r7
 8006490:	42be      	cmp	r6, r7
 8006492:	d900      	bls.n	8006496 <__ssputs_r+0x72>
 8006494:	463e      	mov	r6, r7
 8006496:	6820      	ldr	r0, [r4, #0]
 8006498:	4632      	mov	r2, r6
 800649a:	4641      	mov	r1, r8
 800649c:	f000 faa8 	bl	80069f0 <memmove>
 80064a0:	68a3      	ldr	r3, [r4, #8]
 80064a2:	1b9b      	subs	r3, r3, r6
 80064a4:	60a3      	str	r3, [r4, #8]
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	4433      	add	r3, r6
 80064aa:	6023      	str	r3, [r4, #0]
 80064ac:	2000      	movs	r0, #0
 80064ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b2:	462a      	mov	r2, r5
 80064b4:	f000 fad4 	bl	8006a60 <_realloc_r>
 80064b8:	4606      	mov	r6, r0
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d1e0      	bne.n	8006480 <__ssputs_r+0x5c>
 80064be:	6921      	ldr	r1, [r4, #16]
 80064c0:	4650      	mov	r0, sl
 80064c2:	f7ff feb7 	bl	8006234 <_free_r>
 80064c6:	230c      	movs	r3, #12
 80064c8:	f8ca 3000 	str.w	r3, [sl]
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064d2:	81a3      	strh	r3, [r4, #12]
 80064d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064d8:	e7e9      	b.n	80064ae <__ssputs_r+0x8a>
	...

080064dc <_svfiprintf_r>:
 80064dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e0:	4698      	mov	r8, r3
 80064e2:	898b      	ldrh	r3, [r1, #12]
 80064e4:	061b      	lsls	r3, r3, #24
 80064e6:	b09d      	sub	sp, #116	@ 0x74
 80064e8:	4607      	mov	r7, r0
 80064ea:	460d      	mov	r5, r1
 80064ec:	4614      	mov	r4, r2
 80064ee:	d510      	bpl.n	8006512 <_svfiprintf_r+0x36>
 80064f0:	690b      	ldr	r3, [r1, #16]
 80064f2:	b973      	cbnz	r3, 8006512 <_svfiprintf_r+0x36>
 80064f4:	2140      	movs	r1, #64	@ 0x40
 80064f6:	f7ff ff09 	bl	800630c <_malloc_r>
 80064fa:	6028      	str	r0, [r5, #0]
 80064fc:	6128      	str	r0, [r5, #16]
 80064fe:	b930      	cbnz	r0, 800650e <_svfiprintf_r+0x32>
 8006500:	230c      	movs	r3, #12
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006508:	b01d      	add	sp, #116	@ 0x74
 800650a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650e:	2340      	movs	r3, #64	@ 0x40
 8006510:	616b      	str	r3, [r5, #20]
 8006512:	2300      	movs	r3, #0
 8006514:	9309      	str	r3, [sp, #36]	@ 0x24
 8006516:	2320      	movs	r3, #32
 8006518:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800651c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006520:	2330      	movs	r3, #48	@ 0x30
 8006522:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80066c0 <_svfiprintf_r+0x1e4>
 8006526:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800652a:	f04f 0901 	mov.w	r9, #1
 800652e:	4623      	mov	r3, r4
 8006530:	469a      	mov	sl, r3
 8006532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006536:	b10a      	cbz	r2, 800653c <_svfiprintf_r+0x60>
 8006538:	2a25      	cmp	r2, #37	@ 0x25
 800653a:	d1f9      	bne.n	8006530 <_svfiprintf_r+0x54>
 800653c:	ebba 0b04 	subs.w	fp, sl, r4
 8006540:	d00b      	beq.n	800655a <_svfiprintf_r+0x7e>
 8006542:	465b      	mov	r3, fp
 8006544:	4622      	mov	r2, r4
 8006546:	4629      	mov	r1, r5
 8006548:	4638      	mov	r0, r7
 800654a:	f7ff ff6b 	bl	8006424 <__ssputs_r>
 800654e:	3001      	adds	r0, #1
 8006550:	f000 80a7 	beq.w	80066a2 <_svfiprintf_r+0x1c6>
 8006554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006556:	445a      	add	r2, fp
 8006558:	9209      	str	r2, [sp, #36]	@ 0x24
 800655a:	f89a 3000 	ldrb.w	r3, [sl]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 809f 	beq.w	80066a2 <_svfiprintf_r+0x1c6>
 8006564:	2300      	movs	r3, #0
 8006566:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800656a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800656e:	f10a 0a01 	add.w	sl, sl, #1
 8006572:	9304      	str	r3, [sp, #16]
 8006574:	9307      	str	r3, [sp, #28]
 8006576:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800657a:	931a      	str	r3, [sp, #104]	@ 0x68
 800657c:	4654      	mov	r4, sl
 800657e:	2205      	movs	r2, #5
 8006580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006584:	484e      	ldr	r0, [pc, #312]	@ (80066c0 <_svfiprintf_r+0x1e4>)
 8006586:	f7fb faab 	bl	8001ae0 <memchr>
 800658a:	9a04      	ldr	r2, [sp, #16]
 800658c:	b9d8      	cbnz	r0, 80065c6 <_svfiprintf_r+0xea>
 800658e:	06d0      	lsls	r0, r2, #27
 8006590:	bf44      	itt	mi
 8006592:	2320      	movmi	r3, #32
 8006594:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006598:	0711      	lsls	r1, r2, #28
 800659a:	bf44      	itt	mi
 800659c:	232b      	movmi	r3, #43	@ 0x2b
 800659e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065a2:	f89a 3000 	ldrb.w	r3, [sl]
 80065a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80065a8:	d015      	beq.n	80065d6 <_svfiprintf_r+0xfa>
 80065aa:	9a07      	ldr	r2, [sp, #28]
 80065ac:	4654      	mov	r4, sl
 80065ae:	2000      	movs	r0, #0
 80065b0:	f04f 0c0a 	mov.w	ip, #10
 80065b4:	4621      	mov	r1, r4
 80065b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ba:	3b30      	subs	r3, #48	@ 0x30
 80065bc:	2b09      	cmp	r3, #9
 80065be:	d94b      	bls.n	8006658 <_svfiprintf_r+0x17c>
 80065c0:	b1b0      	cbz	r0, 80065f0 <_svfiprintf_r+0x114>
 80065c2:	9207      	str	r2, [sp, #28]
 80065c4:	e014      	b.n	80065f0 <_svfiprintf_r+0x114>
 80065c6:	eba0 0308 	sub.w	r3, r0, r8
 80065ca:	fa09 f303 	lsl.w	r3, r9, r3
 80065ce:	4313      	orrs	r3, r2
 80065d0:	9304      	str	r3, [sp, #16]
 80065d2:	46a2      	mov	sl, r4
 80065d4:	e7d2      	b.n	800657c <_svfiprintf_r+0xa0>
 80065d6:	9b03      	ldr	r3, [sp, #12]
 80065d8:	1d19      	adds	r1, r3, #4
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	9103      	str	r1, [sp, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	bfbb      	ittet	lt
 80065e2:	425b      	neglt	r3, r3
 80065e4:	f042 0202 	orrlt.w	r2, r2, #2
 80065e8:	9307      	strge	r3, [sp, #28]
 80065ea:	9307      	strlt	r3, [sp, #28]
 80065ec:	bfb8      	it	lt
 80065ee:	9204      	strlt	r2, [sp, #16]
 80065f0:	7823      	ldrb	r3, [r4, #0]
 80065f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80065f4:	d10a      	bne.n	800660c <_svfiprintf_r+0x130>
 80065f6:	7863      	ldrb	r3, [r4, #1]
 80065f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80065fa:	d132      	bne.n	8006662 <_svfiprintf_r+0x186>
 80065fc:	9b03      	ldr	r3, [sp, #12]
 80065fe:	1d1a      	adds	r2, r3, #4
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	9203      	str	r2, [sp, #12]
 8006604:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006608:	3402      	adds	r4, #2
 800660a:	9305      	str	r3, [sp, #20]
 800660c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80066d0 <_svfiprintf_r+0x1f4>
 8006610:	7821      	ldrb	r1, [r4, #0]
 8006612:	2203      	movs	r2, #3
 8006614:	4650      	mov	r0, sl
 8006616:	f7fb fa63 	bl	8001ae0 <memchr>
 800661a:	b138      	cbz	r0, 800662c <_svfiprintf_r+0x150>
 800661c:	9b04      	ldr	r3, [sp, #16]
 800661e:	eba0 000a 	sub.w	r0, r0, sl
 8006622:	2240      	movs	r2, #64	@ 0x40
 8006624:	4082      	lsls	r2, r0
 8006626:	4313      	orrs	r3, r2
 8006628:	3401      	adds	r4, #1
 800662a:	9304      	str	r3, [sp, #16]
 800662c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006630:	4824      	ldr	r0, [pc, #144]	@ (80066c4 <_svfiprintf_r+0x1e8>)
 8006632:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006636:	2206      	movs	r2, #6
 8006638:	f7fb fa52 	bl	8001ae0 <memchr>
 800663c:	2800      	cmp	r0, #0
 800663e:	d036      	beq.n	80066ae <_svfiprintf_r+0x1d2>
 8006640:	4b21      	ldr	r3, [pc, #132]	@ (80066c8 <_svfiprintf_r+0x1ec>)
 8006642:	bb1b      	cbnz	r3, 800668c <_svfiprintf_r+0x1b0>
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	3307      	adds	r3, #7
 8006648:	f023 0307 	bic.w	r3, r3, #7
 800664c:	3308      	adds	r3, #8
 800664e:	9303      	str	r3, [sp, #12]
 8006650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006652:	4433      	add	r3, r6
 8006654:	9309      	str	r3, [sp, #36]	@ 0x24
 8006656:	e76a      	b.n	800652e <_svfiprintf_r+0x52>
 8006658:	fb0c 3202 	mla	r2, ip, r2, r3
 800665c:	460c      	mov	r4, r1
 800665e:	2001      	movs	r0, #1
 8006660:	e7a8      	b.n	80065b4 <_svfiprintf_r+0xd8>
 8006662:	2300      	movs	r3, #0
 8006664:	3401      	adds	r4, #1
 8006666:	9305      	str	r3, [sp, #20]
 8006668:	4619      	mov	r1, r3
 800666a:	f04f 0c0a 	mov.w	ip, #10
 800666e:	4620      	mov	r0, r4
 8006670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006674:	3a30      	subs	r2, #48	@ 0x30
 8006676:	2a09      	cmp	r2, #9
 8006678:	d903      	bls.n	8006682 <_svfiprintf_r+0x1a6>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0c6      	beq.n	800660c <_svfiprintf_r+0x130>
 800667e:	9105      	str	r1, [sp, #20]
 8006680:	e7c4      	b.n	800660c <_svfiprintf_r+0x130>
 8006682:	fb0c 2101 	mla	r1, ip, r1, r2
 8006686:	4604      	mov	r4, r0
 8006688:	2301      	movs	r3, #1
 800668a:	e7f0      	b.n	800666e <_svfiprintf_r+0x192>
 800668c:	ab03      	add	r3, sp, #12
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	462a      	mov	r2, r5
 8006692:	4b0e      	ldr	r3, [pc, #56]	@ (80066cc <_svfiprintf_r+0x1f0>)
 8006694:	a904      	add	r1, sp, #16
 8006696:	4638      	mov	r0, r7
 8006698:	f3af 8000 	nop.w
 800669c:	1c42      	adds	r2, r0, #1
 800669e:	4606      	mov	r6, r0
 80066a0:	d1d6      	bne.n	8006650 <_svfiprintf_r+0x174>
 80066a2:	89ab      	ldrh	r3, [r5, #12]
 80066a4:	065b      	lsls	r3, r3, #25
 80066a6:	f53f af2d 	bmi.w	8006504 <_svfiprintf_r+0x28>
 80066aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066ac:	e72c      	b.n	8006508 <_svfiprintf_r+0x2c>
 80066ae:	ab03      	add	r3, sp, #12
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	462a      	mov	r2, r5
 80066b4:	4b05      	ldr	r3, [pc, #20]	@ (80066cc <_svfiprintf_r+0x1f0>)
 80066b6:	a904      	add	r1, sp, #16
 80066b8:	4638      	mov	r0, r7
 80066ba:	f000 f879 	bl	80067b0 <_printf_i>
 80066be:	e7ed      	b.n	800669c <_svfiprintf_r+0x1c0>
 80066c0:	08006b90 	.word	0x08006b90
 80066c4:	08006b9a 	.word	0x08006b9a
 80066c8:	00000000 	.word	0x00000000
 80066cc:	08006425 	.word	0x08006425
 80066d0:	08006b96 	.word	0x08006b96

080066d4 <_printf_common>:
 80066d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d8:	4616      	mov	r6, r2
 80066da:	4698      	mov	r8, r3
 80066dc:	688a      	ldr	r2, [r1, #8]
 80066de:	690b      	ldr	r3, [r1, #16]
 80066e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066e4:	4293      	cmp	r3, r2
 80066e6:	bfb8      	it	lt
 80066e8:	4613      	movlt	r3, r2
 80066ea:	6033      	str	r3, [r6, #0]
 80066ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066f0:	4607      	mov	r7, r0
 80066f2:	460c      	mov	r4, r1
 80066f4:	b10a      	cbz	r2, 80066fa <_printf_common+0x26>
 80066f6:	3301      	adds	r3, #1
 80066f8:	6033      	str	r3, [r6, #0]
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	0699      	lsls	r1, r3, #26
 80066fe:	bf42      	ittt	mi
 8006700:	6833      	ldrmi	r3, [r6, #0]
 8006702:	3302      	addmi	r3, #2
 8006704:	6033      	strmi	r3, [r6, #0]
 8006706:	6825      	ldr	r5, [r4, #0]
 8006708:	f015 0506 	ands.w	r5, r5, #6
 800670c:	d106      	bne.n	800671c <_printf_common+0x48>
 800670e:	f104 0a19 	add.w	sl, r4, #25
 8006712:	68e3      	ldr	r3, [r4, #12]
 8006714:	6832      	ldr	r2, [r6, #0]
 8006716:	1a9b      	subs	r3, r3, r2
 8006718:	42ab      	cmp	r3, r5
 800671a:	dc26      	bgt.n	800676a <_printf_common+0x96>
 800671c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006720:	6822      	ldr	r2, [r4, #0]
 8006722:	3b00      	subs	r3, #0
 8006724:	bf18      	it	ne
 8006726:	2301      	movne	r3, #1
 8006728:	0692      	lsls	r2, r2, #26
 800672a:	d42b      	bmi.n	8006784 <_printf_common+0xb0>
 800672c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006730:	4641      	mov	r1, r8
 8006732:	4638      	mov	r0, r7
 8006734:	47c8      	blx	r9
 8006736:	3001      	adds	r0, #1
 8006738:	d01e      	beq.n	8006778 <_printf_common+0xa4>
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	6922      	ldr	r2, [r4, #16]
 800673e:	f003 0306 	and.w	r3, r3, #6
 8006742:	2b04      	cmp	r3, #4
 8006744:	bf02      	ittt	eq
 8006746:	68e5      	ldreq	r5, [r4, #12]
 8006748:	6833      	ldreq	r3, [r6, #0]
 800674a:	1aed      	subeq	r5, r5, r3
 800674c:	68a3      	ldr	r3, [r4, #8]
 800674e:	bf0c      	ite	eq
 8006750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006754:	2500      	movne	r5, #0
 8006756:	4293      	cmp	r3, r2
 8006758:	bfc4      	itt	gt
 800675a:	1a9b      	subgt	r3, r3, r2
 800675c:	18ed      	addgt	r5, r5, r3
 800675e:	2600      	movs	r6, #0
 8006760:	341a      	adds	r4, #26
 8006762:	42b5      	cmp	r5, r6
 8006764:	d11a      	bne.n	800679c <_printf_common+0xc8>
 8006766:	2000      	movs	r0, #0
 8006768:	e008      	b.n	800677c <_printf_common+0xa8>
 800676a:	2301      	movs	r3, #1
 800676c:	4652      	mov	r2, sl
 800676e:	4641      	mov	r1, r8
 8006770:	4638      	mov	r0, r7
 8006772:	47c8      	blx	r9
 8006774:	3001      	adds	r0, #1
 8006776:	d103      	bne.n	8006780 <_printf_common+0xac>
 8006778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800677c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006780:	3501      	adds	r5, #1
 8006782:	e7c6      	b.n	8006712 <_printf_common+0x3e>
 8006784:	18e1      	adds	r1, r4, r3
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	2030      	movs	r0, #48	@ 0x30
 800678a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800678e:	4422      	add	r2, r4
 8006790:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006794:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006798:	3302      	adds	r3, #2
 800679a:	e7c7      	b.n	800672c <_printf_common+0x58>
 800679c:	2301      	movs	r3, #1
 800679e:	4622      	mov	r2, r4
 80067a0:	4641      	mov	r1, r8
 80067a2:	4638      	mov	r0, r7
 80067a4:	47c8      	blx	r9
 80067a6:	3001      	adds	r0, #1
 80067a8:	d0e6      	beq.n	8006778 <_printf_common+0xa4>
 80067aa:	3601      	adds	r6, #1
 80067ac:	e7d9      	b.n	8006762 <_printf_common+0x8e>
	...

080067b0 <_printf_i>:
 80067b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067b4:	7e0f      	ldrb	r7, [r1, #24]
 80067b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067b8:	2f78      	cmp	r7, #120	@ 0x78
 80067ba:	4691      	mov	r9, r2
 80067bc:	4680      	mov	r8, r0
 80067be:	460c      	mov	r4, r1
 80067c0:	469a      	mov	sl, r3
 80067c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067c6:	d807      	bhi.n	80067d8 <_printf_i+0x28>
 80067c8:	2f62      	cmp	r7, #98	@ 0x62
 80067ca:	d80a      	bhi.n	80067e2 <_printf_i+0x32>
 80067cc:	2f00      	cmp	r7, #0
 80067ce:	f000 80d2 	beq.w	8006976 <_printf_i+0x1c6>
 80067d2:	2f58      	cmp	r7, #88	@ 0x58
 80067d4:	f000 80b9 	beq.w	800694a <_printf_i+0x19a>
 80067d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067e0:	e03a      	b.n	8006858 <_printf_i+0xa8>
 80067e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067e6:	2b15      	cmp	r3, #21
 80067e8:	d8f6      	bhi.n	80067d8 <_printf_i+0x28>
 80067ea:	a101      	add	r1, pc, #4	@ (adr r1, 80067f0 <_printf_i+0x40>)
 80067ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067f0:	08006849 	.word	0x08006849
 80067f4:	0800685d 	.word	0x0800685d
 80067f8:	080067d9 	.word	0x080067d9
 80067fc:	080067d9 	.word	0x080067d9
 8006800:	080067d9 	.word	0x080067d9
 8006804:	080067d9 	.word	0x080067d9
 8006808:	0800685d 	.word	0x0800685d
 800680c:	080067d9 	.word	0x080067d9
 8006810:	080067d9 	.word	0x080067d9
 8006814:	080067d9 	.word	0x080067d9
 8006818:	080067d9 	.word	0x080067d9
 800681c:	0800695d 	.word	0x0800695d
 8006820:	08006887 	.word	0x08006887
 8006824:	08006917 	.word	0x08006917
 8006828:	080067d9 	.word	0x080067d9
 800682c:	080067d9 	.word	0x080067d9
 8006830:	0800697f 	.word	0x0800697f
 8006834:	080067d9 	.word	0x080067d9
 8006838:	08006887 	.word	0x08006887
 800683c:	080067d9 	.word	0x080067d9
 8006840:	080067d9 	.word	0x080067d9
 8006844:	0800691f 	.word	0x0800691f
 8006848:	6833      	ldr	r3, [r6, #0]
 800684a:	1d1a      	adds	r2, r3, #4
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6032      	str	r2, [r6, #0]
 8006850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006854:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006858:	2301      	movs	r3, #1
 800685a:	e09d      	b.n	8006998 <_printf_i+0x1e8>
 800685c:	6833      	ldr	r3, [r6, #0]
 800685e:	6820      	ldr	r0, [r4, #0]
 8006860:	1d19      	adds	r1, r3, #4
 8006862:	6031      	str	r1, [r6, #0]
 8006864:	0606      	lsls	r6, r0, #24
 8006866:	d501      	bpl.n	800686c <_printf_i+0xbc>
 8006868:	681d      	ldr	r5, [r3, #0]
 800686a:	e003      	b.n	8006874 <_printf_i+0xc4>
 800686c:	0645      	lsls	r5, r0, #25
 800686e:	d5fb      	bpl.n	8006868 <_printf_i+0xb8>
 8006870:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006874:	2d00      	cmp	r5, #0
 8006876:	da03      	bge.n	8006880 <_printf_i+0xd0>
 8006878:	232d      	movs	r3, #45	@ 0x2d
 800687a:	426d      	negs	r5, r5
 800687c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006880:	4859      	ldr	r0, [pc, #356]	@ (80069e8 <_printf_i+0x238>)
 8006882:	230a      	movs	r3, #10
 8006884:	e011      	b.n	80068aa <_printf_i+0xfa>
 8006886:	6821      	ldr	r1, [r4, #0]
 8006888:	6833      	ldr	r3, [r6, #0]
 800688a:	0608      	lsls	r0, r1, #24
 800688c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006890:	d402      	bmi.n	8006898 <_printf_i+0xe8>
 8006892:	0649      	lsls	r1, r1, #25
 8006894:	bf48      	it	mi
 8006896:	b2ad      	uxthmi	r5, r5
 8006898:	2f6f      	cmp	r7, #111	@ 0x6f
 800689a:	4853      	ldr	r0, [pc, #332]	@ (80069e8 <_printf_i+0x238>)
 800689c:	6033      	str	r3, [r6, #0]
 800689e:	bf14      	ite	ne
 80068a0:	230a      	movne	r3, #10
 80068a2:	2308      	moveq	r3, #8
 80068a4:	2100      	movs	r1, #0
 80068a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068aa:	6866      	ldr	r6, [r4, #4]
 80068ac:	60a6      	str	r6, [r4, #8]
 80068ae:	2e00      	cmp	r6, #0
 80068b0:	bfa2      	ittt	ge
 80068b2:	6821      	ldrge	r1, [r4, #0]
 80068b4:	f021 0104 	bicge.w	r1, r1, #4
 80068b8:	6021      	strge	r1, [r4, #0]
 80068ba:	b90d      	cbnz	r5, 80068c0 <_printf_i+0x110>
 80068bc:	2e00      	cmp	r6, #0
 80068be:	d04b      	beq.n	8006958 <_printf_i+0x1a8>
 80068c0:	4616      	mov	r6, r2
 80068c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80068c6:	fb03 5711 	mls	r7, r3, r1, r5
 80068ca:	5dc7      	ldrb	r7, [r0, r7]
 80068cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068d0:	462f      	mov	r7, r5
 80068d2:	42bb      	cmp	r3, r7
 80068d4:	460d      	mov	r5, r1
 80068d6:	d9f4      	bls.n	80068c2 <_printf_i+0x112>
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d10b      	bne.n	80068f4 <_printf_i+0x144>
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	07df      	lsls	r7, r3, #31
 80068e0:	d508      	bpl.n	80068f4 <_printf_i+0x144>
 80068e2:	6923      	ldr	r3, [r4, #16]
 80068e4:	6861      	ldr	r1, [r4, #4]
 80068e6:	4299      	cmp	r1, r3
 80068e8:	bfde      	ittt	le
 80068ea:	2330      	movle	r3, #48	@ 0x30
 80068ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068f0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80068f4:	1b92      	subs	r2, r2, r6
 80068f6:	6122      	str	r2, [r4, #16]
 80068f8:	f8cd a000 	str.w	sl, [sp]
 80068fc:	464b      	mov	r3, r9
 80068fe:	aa03      	add	r2, sp, #12
 8006900:	4621      	mov	r1, r4
 8006902:	4640      	mov	r0, r8
 8006904:	f7ff fee6 	bl	80066d4 <_printf_common>
 8006908:	3001      	adds	r0, #1
 800690a:	d14a      	bne.n	80069a2 <_printf_i+0x1f2>
 800690c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006910:	b004      	add	sp, #16
 8006912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	f043 0320 	orr.w	r3, r3, #32
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	4833      	ldr	r0, [pc, #204]	@ (80069ec <_printf_i+0x23c>)
 8006920:	2778      	movs	r7, #120	@ 0x78
 8006922:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	6831      	ldr	r1, [r6, #0]
 800692a:	061f      	lsls	r7, r3, #24
 800692c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006930:	d402      	bmi.n	8006938 <_printf_i+0x188>
 8006932:	065f      	lsls	r7, r3, #25
 8006934:	bf48      	it	mi
 8006936:	b2ad      	uxthmi	r5, r5
 8006938:	6031      	str	r1, [r6, #0]
 800693a:	07d9      	lsls	r1, r3, #31
 800693c:	bf44      	itt	mi
 800693e:	f043 0320 	orrmi.w	r3, r3, #32
 8006942:	6023      	strmi	r3, [r4, #0]
 8006944:	b11d      	cbz	r5, 800694e <_printf_i+0x19e>
 8006946:	2310      	movs	r3, #16
 8006948:	e7ac      	b.n	80068a4 <_printf_i+0xf4>
 800694a:	4827      	ldr	r0, [pc, #156]	@ (80069e8 <_printf_i+0x238>)
 800694c:	e7e9      	b.n	8006922 <_printf_i+0x172>
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	f023 0320 	bic.w	r3, r3, #32
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	e7f6      	b.n	8006946 <_printf_i+0x196>
 8006958:	4616      	mov	r6, r2
 800695a:	e7bd      	b.n	80068d8 <_printf_i+0x128>
 800695c:	6833      	ldr	r3, [r6, #0]
 800695e:	6825      	ldr	r5, [r4, #0]
 8006960:	6961      	ldr	r1, [r4, #20]
 8006962:	1d18      	adds	r0, r3, #4
 8006964:	6030      	str	r0, [r6, #0]
 8006966:	062e      	lsls	r6, r5, #24
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	d501      	bpl.n	8006970 <_printf_i+0x1c0>
 800696c:	6019      	str	r1, [r3, #0]
 800696e:	e002      	b.n	8006976 <_printf_i+0x1c6>
 8006970:	0668      	lsls	r0, r5, #25
 8006972:	d5fb      	bpl.n	800696c <_printf_i+0x1bc>
 8006974:	8019      	strh	r1, [r3, #0]
 8006976:	2300      	movs	r3, #0
 8006978:	6123      	str	r3, [r4, #16]
 800697a:	4616      	mov	r6, r2
 800697c:	e7bc      	b.n	80068f8 <_printf_i+0x148>
 800697e:	6833      	ldr	r3, [r6, #0]
 8006980:	1d1a      	adds	r2, r3, #4
 8006982:	6032      	str	r2, [r6, #0]
 8006984:	681e      	ldr	r6, [r3, #0]
 8006986:	6862      	ldr	r2, [r4, #4]
 8006988:	2100      	movs	r1, #0
 800698a:	4630      	mov	r0, r6
 800698c:	f7fb f8a8 	bl	8001ae0 <memchr>
 8006990:	b108      	cbz	r0, 8006996 <_printf_i+0x1e6>
 8006992:	1b80      	subs	r0, r0, r6
 8006994:	6060      	str	r0, [r4, #4]
 8006996:	6863      	ldr	r3, [r4, #4]
 8006998:	6123      	str	r3, [r4, #16]
 800699a:	2300      	movs	r3, #0
 800699c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069a0:	e7aa      	b.n	80068f8 <_printf_i+0x148>
 80069a2:	6923      	ldr	r3, [r4, #16]
 80069a4:	4632      	mov	r2, r6
 80069a6:	4649      	mov	r1, r9
 80069a8:	4640      	mov	r0, r8
 80069aa:	47d0      	blx	sl
 80069ac:	3001      	adds	r0, #1
 80069ae:	d0ad      	beq.n	800690c <_printf_i+0x15c>
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	079b      	lsls	r3, r3, #30
 80069b4:	d413      	bmi.n	80069de <_printf_i+0x22e>
 80069b6:	68e0      	ldr	r0, [r4, #12]
 80069b8:	9b03      	ldr	r3, [sp, #12]
 80069ba:	4298      	cmp	r0, r3
 80069bc:	bfb8      	it	lt
 80069be:	4618      	movlt	r0, r3
 80069c0:	e7a6      	b.n	8006910 <_printf_i+0x160>
 80069c2:	2301      	movs	r3, #1
 80069c4:	4632      	mov	r2, r6
 80069c6:	4649      	mov	r1, r9
 80069c8:	4640      	mov	r0, r8
 80069ca:	47d0      	blx	sl
 80069cc:	3001      	adds	r0, #1
 80069ce:	d09d      	beq.n	800690c <_printf_i+0x15c>
 80069d0:	3501      	adds	r5, #1
 80069d2:	68e3      	ldr	r3, [r4, #12]
 80069d4:	9903      	ldr	r1, [sp, #12]
 80069d6:	1a5b      	subs	r3, r3, r1
 80069d8:	42ab      	cmp	r3, r5
 80069da:	dcf2      	bgt.n	80069c2 <_printf_i+0x212>
 80069dc:	e7eb      	b.n	80069b6 <_printf_i+0x206>
 80069de:	2500      	movs	r5, #0
 80069e0:	f104 0619 	add.w	r6, r4, #25
 80069e4:	e7f5      	b.n	80069d2 <_printf_i+0x222>
 80069e6:	bf00      	nop
 80069e8:	08006ba1 	.word	0x08006ba1
 80069ec:	08006bb2 	.word	0x08006bb2

080069f0 <memmove>:
 80069f0:	4288      	cmp	r0, r1
 80069f2:	b510      	push	{r4, lr}
 80069f4:	eb01 0402 	add.w	r4, r1, r2
 80069f8:	d902      	bls.n	8006a00 <memmove+0x10>
 80069fa:	4284      	cmp	r4, r0
 80069fc:	4623      	mov	r3, r4
 80069fe:	d807      	bhi.n	8006a10 <memmove+0x20>
 8006a00:	1e43      	subs	r3, r0, #1
 8006a02:	42a1      	cmp	r1, r4
 8006a04:	d008      	beq.n	8006a18 <memmove+0x28>
 8006a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a0e:	e7f8      	b.n	8006a02 <memmove+0x12>
 8006a10:	4402      	add	r2, r0
 8006a12:	4601      	mov	r1, r0
 8006a14:	428a      	cmp	r2, r1
 8006a16:	d100      	bne.n	8006a1a <memmove+0x2a>
 8006a18:	bd10      	pop	{r4, pc}
 8006a1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a22:	e7f7      	b.n	8006a14 <memmove+0x24>

08006a24 <_sbrk_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	4d06      	ldr	r5, [pc, #24]	@ (8006a40 <_sbrk_r+0x1c>)
 8006a28:	2300      	movs	r3, #0
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	4608      	mov	r0, r1
 8006a2e:	602b      	str	r3, [r5, #0]
 8006a30:	f7fc fac6 	bl	8002fc0 <_sbrk>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	d102      	bne.n	8006a3e <_sbrk_r+0x1a>
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	b103      	cbz	r3, 8006a3e <_sbrk_r+0x1a>
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	20002e08 	.word	0x20002e08

08006a44 <memcpy>:
 8006a44:	440a      	add	r2, r1
 8006a46:	4291      	cmp	r1, r2
 8006a48:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006a4c:	d100      	bne.n	8006a50 <memcpy+0xc>
 8006a4e:	4770      	bx	lr
 8006a50:	b510      	push	{r4, lr}
 8006a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a5a:	4291      	cmp	r1, r2
 8006a5c:	d1f9      	bne.n	8006a52 <memcpy+0xe>
 8006a5e:	bd10      	pop	{r4, pc}

08006a60 <_realloc_r>:
 8006a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a64:	4680      	mov	r8, r0
 8006a66:	4615      	mov	r5, r2
 8006a68:	460c      	mov	r4, r1
 8006a6a:	b921      	cbnz	r1, 8006a76 <_realloc_r+0x16>
 8006a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a70:	4611      	mov	r1, r2
 8006a72:	f7ff bc4b 	b.w	800630c <_malloc_r>
 8006a76:	b92a      	cbnz	r2, 8006a84 <_realloc_r+0x24>
 8006a78:	f7ff fbdc 	bl	8006234 <_free_r>
 8006a7c:	2400      	movs	r4, #0
 8006a7e:	4620      	mov	r0, r4
 8006a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a84:	f000 f81a 	bl	8006abc <_malloc_usable_size_r>
 8006a88:	4285      	cmp	r5, r0
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	d802      	bhi.n	8006a94 <_realloc_r+0x34>
 8006a8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006a92:	d8f4      	bhi.n	8006a7e <_realloc_r+0x1e>
 8006a94:	4629      	mov	r1, r5
 8006a96:	4640      	mov	r0, r8
 8006a98:	f7ff fc38 	bl	800630c <_malloc_r>
 8006a9c:	4607      	mov	r7, r0
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d0ec      	beq.n	8006a7c <_realloc_r+0x1c>
 8006aa2:	42b5      	cmp	r5, r6
 8006aa4:	462a      	mov	r2, r5
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	bf28      	it	cs
 8006aaa:	4632      	movcs	r2, r6
 8006aac:	f7ff ffca 	bl	8006a44 <memcpy>
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	f7ff fbbe 	bl	8006234 <_free_r>
 8006ab8:	463c      	mov	r4, r7
 8006aba:	e7e0      	b.n	8006a7e <_realloc_r+0x1e>

08006abc <_malloc_usable_size_r>:
 8006abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac0:	1f18      	subs	r0, r3, #4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bfbc      	itt	lt
 8006ac6:	580b      	ldrlt	r3, [r1, r0]
 8006ac8:	18c0      	addlt	r0, r0, r3
 8006aca:	4770      	bx	lr

08006acc <_init>:
 8006acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ace:	bf00      	nop
 8006ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad2:	bc08      	pop	{r3}
 8006ad4:	469e      	mov	lr, r3
 8006ad6:	4770      	bx	lr

08006ad8 <_fini>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	bf00      	nop
 8006adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ade:	bc08      	pop	{r3}
 8006ae0:	469e      	mov	lr, r3
 8006ae2:	4770      	bx	lr
