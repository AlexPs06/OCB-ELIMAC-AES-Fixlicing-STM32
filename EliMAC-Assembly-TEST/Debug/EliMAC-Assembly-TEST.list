
EliMAC-Assembly-TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006db0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006f80  08006f80  00007f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007068  08007068  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007068  08007068  00008068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007070  08007070  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007070  08007070  00008070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007074  08007074  00008074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08007078  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  08007110  00009098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  080071b0  00009138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000c9c  200001d8  08007250  000091d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000e74  08007250  00009e74  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012073  00000000  00000000  00009208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002631  00000000  00000000  0001b27b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d80  00000000  00000000  0001d8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a25  00000000  00000000  0001e630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027974  00000000  00000000  0001f055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010cb9  00000000  00000000  000469c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f10a8  00000000  00000000  00057682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014872a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003bf4  00000000  00000000  00148770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000d8  00000000  00000000  0014c364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006f68 	.word	0x08006f68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08006f68 	.word	0x08006f68

08000210 <packing>:
* r10 = b_30 b_62 b_94 b_126 || ... || b_6 b_38 b_70 b_102
* r11 = b_31 b_63 b_95 b_127 || ... || b_7 b_39 b_71 b_103
******************************************************************************/
.align 2
packing:
    movw    r3, #0x0f0f
 8000210:	f640 730f 	movw	r3, #3855	@ 0xf0f
    movt    r3, #0x0f0f             // r3 <- 0x0f0f0f0f (mask for SWAPMOVE)
 8000214:	f6c0 730f 	movt	r3, #3855	@ 0xf0f
    eor     r2, r3, r3, lsl #2      // r2 <- 0x33333333 (mask for SWAPMOVE)
 8000218:	ea83 0283 	eor.w	r2, r3, r3, lsl #2
    eor     r1, r2, r2, lsl #1      // r1 <- 0x55555555 (mask for SWAPMOVE)
 800021c:	ea82 0142 	eor.w	r1, r2, r2, lsl #1
    swpmv   r8, r4, r8, r4, r1, #1, r12
 8000220:	ea84 0c58 	eor.w	ip, r4, r8, lsr #1
 8000224:	ea0c 0c01 	and.w	ip, ip, r1
 8000228:	ea84 040c 	eor.w	r4, r4, ip
 800022c:	ea88 084c 	eor.w	r8, r8, ip, lsl #1
    swpmv   r9, r5, r9, r5, r1, #1, r12
 8000230:	ea85 0c59 	eor.w	ip, r5, r9, lsr #1
 8000234:	ea0c 0c01 	and.w	ip, ip, r1
 8000238:	ea85 050c 	eor.w	r5, r5, ip
 800023c:	ea89 094c 	eor.w	r9, r9, ip, lsl #1
    swpmv   r10, r6, r10, r6, r1, #1, r12
 8000240:	ea86 0c5a 	eor.w	ip, r6, sl, lsr #1
 8000244:	ea0c 0c01 	and.w	ip, ip, r1
 8000248:	ea86 060c 	eor.w	r6, r6, ip
 800024c:	ea8a 0a4c 	eor.w	sl, sl, ip, lsl #1
    swpmv   r11, r7, r11, r7, r1, #1, r12
 8000250:	ea87 0c5b 	eor.w	ip, r7, fp, lsr #1
 8000254:	ea0c 0c01 	and.w	ip, ip, r1
 8000258:	ea87 070c 	eor.w	r7, r7, ip
 800025c:	ea8b 0b4c 	eor.w	fp, fp, ip, lsl #1
    swpmv   r0, r4, r5, r4, r2, #2, r12
 8000260:	ea84 0c95 	eor.w	ip, r4, r5, lsr #2
 8000264:	ea0c 0c02 	and.w	ip, ip, r2
 8000268:	ea84 040c 	eor.w	r4, r4, ip
 800026c:	ea85 008c 	eor.w	r0, r5, ip, lsl #2
    swpmv   r9, r5, r9, r8, r2, #2, r12
 8000270:	ea88 0c99 	eor.w	ip, r8, r9, lsr #2
 8000274:	ea0c 0c02 	and.w	ip, ip, r2
 8000278:	ea88 050c 	eor.w	r5, r8, ip
 800027c:	ea89 098c 	eor.w	r9, r9, ip, lsl #2
    swpmv   r7, r8, r7, r6, r2, #2, r12
 8000280:	ea86 0c97 	eor.w	ip, r6, r7, lsr #2
 8000284:	ea0c 0c02 	and.w	ip, ip, r2
 8000288:	ea86 080c 	eor.w	r8, r6, ip
 800028c:	ea87 078c 	eor.w	r7, r7, ip, lsl #2
    swpmv   r11, r2, r11, r10, r2, #2, r12
 8000290:	ea8a 0c9b 	eor.w	ip, sl, fp, lsr #2
 8000294:	ea0c 0c02 	and.w	ip, ip, r2
 8000298:	ea8a 020c 	eor.w	r2, sl, ip
 800029c:	ea8b 0b8c 	eor.w	fp, fp, ip, lsl #2
    swpmv   r8, r4, r8, r4, r3, #4, r12
 80002a0:	ea84 1c18 	eor.w	ip, r4, r8, lsr #4
 80002a4:	ea0c 0c03 	and.w	ip, ip, r3
 80002a8:	ea84 040c 	eor.w	r4, r4, ip
 80002ac:	ea88 180c 	eor.w	r8, r8, ip, lsl #4
    swpmv   r10, r6, r7, r0, r3, #4, r12
 80002b0:	ea80 1c17 	eor.w	ip, r0, r7, lsr #4
 80002b4:	ea0c 0c03 	and.w	ip, ip, r3
 80002b8:	ea80 060c 	eor.w	r6, r0, ip
 80002bc:	ea87 1a0c 	eor.w	sl, r7, ip, lsl #4
    swpmv   r11, r7, r11, r9, r3, #4, r12
 80002c0:	ea89 1c1b 	eor.w	ip, r9, fp, lsr #4
 80002c4:	ea0c 0c03 	and.w	ip, ip, r3
 80002c8:	ea89 070c 	eor.w	r7, r9, ip
 80002cc:	ea8b 1b0c 	eor.w	fp, fp, ip, lsl #4
    swpmv   r9, r5, r2, r5, r3, #4, r12
 80002d0:	ea85 1c12 	eor.w	ip, r5, r2, lsr #4
 80002d4:	ea0c 0c03 	and.w	ip, ip, r3
 80002d8:	ea85 050c 	eor.w	r5, r5, ip
 80002dc:	ea82 190c 	eor.w	r9, r2, ip, lsl #4
    bx      lr
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop

080002e4 <unpacking>:
/******************************************************************************
* Unpacks the 256-bit internal state in two 128-bit blocs.
******************************************************************************/
.align 2
unpacking:
    movw    r3, #0x0f0f
 80002e4:	f640 730f 	movw	r3, #3855	@ 0xf0f
    movt    r3, #0x0f0f                 // r3 <- 0x0f0f0f0f (mask for SWAPMOVE)
 80002e8:	f6c0 730f 	movt	r3, #3855	@ 0xf0f
    swpmv   r2, r5, r9, r5, r3, #4, r12
 80002ec:	ea85 1c19 	eor.w	ip, r5, r9, lsr #4
 80002f0:	ea0c 0c03 	and.w	ip, ip, r3
 80002f4:	ea85 050c 	eor.w	r5, r5, ip
 80002f8:	ea89 120c 	eor.w	r2, r9, ip, lsl #4
    swpmv   r11, r9, r11, r7, r3, #4, r12
 80002fc:	ea87 1c1b 	eor.w	ip, r7, fp, lsr #4
 8000300:	ea0c 0c03 	and.w	ip, ip, r3
 8000304:	ea87 090c 	eor.w	r9, r7, ip
 8000308:	ea8b 1b0c 	eor.w	fp, fp, ip, lsl #4
    swpmv   r7, r1, r10, r6, r3, #4, r12
 800030c:	ea86 1c1a 	eor.w	ip, r6, sl, lsr #4
 8000310:	ea0c 0c03 	and.w	ip, ip, r3
 8000314:	ea86 010c 	eor.w	r1, r6, ip
 8000318:	ea8a 170c 	eor.w	r7, sl, ip, lsl #4
    swpmv   r8, r4, r8, r4, r3, #4, r12
 800031c:	ea84 1c18 	eor.w	ip, r4, r8, lsr #4
 8000320:	ea0c 0c03 	and.w	ip, ip, r3
 8000324:	ea84 040c 	eor.w	r4, r4, ip
 8000328:	ea88 180c 	eor.w	r8, r8, ip, lsl #4
    eor     r3, r3, r3, lsl #2          // r3 <- 0x33333333 (mask for SWAPMOVE)
 800032c:	ea83 0383 	eor.w	r3, r3, r3, lsl #2
    swpmv   r11, r10,r11, r2, r3, #2, r12
 8000330:	ea82 0c9b 	eor.w	ip, r2, fp, lsr #2
 8000334:	ea0c 0c03 	and.w	ip, ip, r3
 8000338:	ea82 0a0c 	eor.w	sl, r2, ip
 800033c:	ea8b 0b8c 	eor.w	fp, fp, ip, lsl #2
    swpmv   r7, r6, r7, r8, r3, #2, r12
 8000340:	ea88 0c97 	eor.w	ip, r8, r7, lsr #2
 8000344:	ea0c 0c03 	and.w	ip, ip, r3
 8000348:	ea88 060c 	eor.w	r6, r8, ip
 800034c:	ea87 078c 	eor.w	r7, r7, ip, lsl #2
    swpmv   r9, r8, r9, r5, r3, #2, r12
 8000350:	ea85 0c99 	eor.w	ip, r5, r9, lsr #2
 8000354:	ea0c 0c03 	and.w	ip, ip, r3
 8000358:	ea85 080c 	eor.w	r8, r5, ip
 800035c:	ea89 098c 	eor.w	r9, r9, ip, lsl #2
    swpmv   r5, r4, r1, r4, r3, #2, r12
 8000360:	ea84 0c91 	eor.w	ip, r4, r1, lsr #2
 8000364:	ea0c 0c03 	and.w	ip, ip, r3
 8000368:	ea84 040c 	eor.w	r4, r4, ip
 800036c:	ea81 058c 	eor.w	r5, r1, ip, lsl #2
    eor     r1, r3, r3, lsl #1          // r1 <- 0x55555555 (mask for SWAPMOVE)
 8000370:	ea83 0143 	eor.w	r1, r3, r3, lsl #1
    swpmv   r8, r4, r8, r4, r1, #1, r12
 8000374:	ea84 0c58 	eor.w	ip, r4, r8, lsr #1
 8000378:	ea0c 0c01 	and.w	ip, ip, r1
 800037c:	ea84 040c 	eor.w	r4, r4, ip
 8000380:	ea88 084c 	eor.w	r8, r8, ip, lsl #1
    swpmv   r9, r5,r9, r5, r1, #1, r12
 8000384:	ea85 0c59 	eor.w	ip, r5, r9, lsr #1
 8000388:	ea0c 0c01 	and.w	ip, ip, r1
 800038c:	ea85 050c 	eor.w	r5, r5, ip
 8000390:	ea89 094c 	eor.w	r9, r9, ip, lsl #1
    swpmv   r10, r6, r10, r6, r1, #1, r12
 8000394:	ea86 0c5a 	eor.w	ip, r6, sl, lsr #1
 8000398:	ea0c 0c01 	and.w	ip, ip, r1
 800039c:	ea86 060c 	eor.w	r6, r6, ip
 80003a0:	ea8a 0a4c 	eor.w	sl, sl, ip, lsl #1
    swpmv   r11, r7, r11, r7, r1, #1, r12
 80003a4:	ea87 0c5b 	eor.w	ip, r7, fp, lsr #1
 80003a8:	ea0c 0c01 	and.w	ip, ip, r1
 80003ac:	ea87 070c 	eor.w	r7, r7, ip
 80003b0:	ea8b 0b4c 	eor.w	fp, fp, ip, lsl #1
    bx      lr
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop

080003b8 <ark>:
* Credits to https://github.com/Ko-/aes-armcortexm for the S-box implementation
******************************************************************************/
.align 2
ark:
    // add round key
    ldr.w   r1, [sp, #48]
 80003b8:	f8dd 1030 	ldr.w	r1, [sp, #48]	@ 0x30
    ldmia   r1!, {r0,r2,r3,r12}
 80003bc:	e8b1 100d 	ldmia.w	r1!, {r0, r2, r3, ip}
    eor     r4, r0
 80003c0:	ea84 0400 	eor.w	r4, r4, r0
    eor     r5, r2
 80003c4:	ea85 0502 	eor.w	r5, r5, r2
    eor     r6, r3
 80003c8:	ea86 0603 	eor.w	r6, r6, r3
    eor     r7, r12
 80003cc:	ea87 070c 	eor.w	r7, r7, ip
    ldmia   r1!, {r0,r2,r3,r12}
 80003d0:	e8b1 100d 	ldmia.w	r1!, {r0, r2, r3, ip}
    eor     r8, r0
 80003d4:	ea88 0800 	eor.w	r8, r8, r0
    eor     r9, r2
 80003d8:	ea89 0902 	eor.w	r9, r9, r2
    eor     r10, r3
 80003dc:	ea8a 0a03 	eor.w	sl, sl, r3
    eor     r11, r12
 80003e0:	ea8b 0b0c 	eor.w	fp, fp, ip
    str.w   r1, [sp, #48]
 80003e4:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    str     r14, [sp, #52]
 80003e8:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
    bx      lr
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop

080003f0 <ark_sbox>:
* Credits to https://github.com/Ko-/aes-armcortexm for the S-box implementation
******************************************************************************/
.align 2
ark_sbox:
    // add round key
    ldr.w   r1, [sp, #48]
 80003f0:	f8dd 1030 	ldr.w	r1, [sp, #48]	@ 0x30
    ldmia   r1!, {r0,r2,r3,r12}
 80003f4:	e8b1 100d 	ldmia.w	r1!, {r0, r2, r3, ip}
    eor     r4, r0
 80003f8:	ea84 0400 	eor.w	r4, r4, r0
    eor     r5, r2
 80003fc:	ea85 0502 	eor.w	r5, r5, r2
    eor     r6, r3
 8000400:	ea86 0603 	eor.w	r6, r6, r3
    eor     r7, r12
 8000404:	ea87 070c 	eor.w	r7, r7, ip
    ldmia   r1!, {r0,r2,r3,r12}
 8000408:	e8b1 100d 	ldmia.w	r1!, {r0, r2, r3, ip}
    eor     r8, r0
 800040c:	ea88 0800 	eor.w	r8, r8, r0
    eor     r9, r2
 8000410:	ea89 0902 	eor.w	r9, r9, r2
    eor     r10, r3
 8000414:	ea8a 0a03 	eor.w	sl, sl, r3
    eor     r11, r12
 8000418:	ea8b 0b0c 	eor.w	fp, fp, ip
    str.w   r1, [sp, #48]
 800041c:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    str     r14, [sp, #52]
 8000420:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
    // sbox: credits to https://github.com/Ko-/aes-armcortexm
    eor     r1, r7, r9              //Exec y14 = U3 ^ U5; into r1
 8000424:	ea87 0109 	eor.w	r1, r7, r9
    eor     r3, r4, r10             //Exec y13 = U0 ^ U6; into r3
 8000428:	ea84 030a 	eor.w	r3, r4, sl
    eor     r2, r3, r1              //Exec y12 = y13 ^ y14; into r2
 800042c:	ea83 0201 	eor.w	r2, r3, r1
    eor     r0, r8, r2              //Exec t1 = U4 ^ y12; into r0
 8000430:	ea88 0002 	eor.w	r0, r8, r2
    eor     r14, r0, r9             //Exec y15 = t1 ^ U5; into r14
 8000434:	ea80 0e09 	eor.w	lr, r0, r9
    and     r12, r2, r14            //Exec t2 = y12 & y15; into r12
 8000438:	ea02 0c0e 	and.w	ip, r2, lr
    eor     r8, r14, r11            //Exec y6 = y15 ^ U7; into r8
 800043c:	ea8e 080b 	eor.w	r8, lr, fp
    eor     r0, r0, r5              //Exec y20 = t1 ^ U1; into r0
 8000440:	ea80 0005 	eor.w	r0, r0, r5
    str.w   r2, [sp, #44]           //Store r2/y12 on stack
 8000444:	f8cd 202c 	str.w	r2, [sp, #44]	@ 0x2c
    eor     r2, r4, r7              //Exec y9 = U0 ^ U3; into r2
 8000448:	ea84 0207 	eor.w	r2, r4, r7
    str     r0, [sp, #40]           //Store r0/y20 on stack
 800044c:	900a      	str	r0, [sp, #40]	@ 0x28
    eor     r0, r0, r2              //Exec y11 = y20 ^ y9; into r0
 800044e:	ea80 0002 	eor.w	r0, r0, r2
    str     r2, [sp, #36]           //Store r2/y9 on stack
 8000452:	9209      	str	r2, [sp, #36]	@ 0x24
    and     r2, r2, r0              //Exec t12 = y9 & y11; into r2
 8000454:	ea02 0200 	and.w	r2, r2, r0
    str     r8, [sp, #32]           //Store r8/y6 on stack
 8000458:	f8cd 8020 	str.w	r8, [sp, #32]
    eor     r8, r11, r0             //Exec y7 = U7 ^ y11; into r8
 800045c:	ea8b 0800 	eor.w	r8, fp, r0
    eor     r9, r4, r9              //Exec y8 = U0 ^ U5; into r9
 8000460:	ea84 0909 	eor.w	r9, r4, r9
    eor     r6, r5, r6              //Exec t0 = U1 ^ U2; into r6
 8000464:	ea85 0606 	eor.w	r6, r5, r6
    eor     r5, r14, r6             //Exec y10 = y15 ^ t0; into r5
 8000468:	ea8e 0506 	eor.w	r5, lr, r6
    str     r14, [sp, #28]          //Store r14/y15 on stack
 800046c:	f8cd e01c 	str.w	lr, [sp, #28]
    eor     r14, r5, r0             //Exec y17 = y10 ^ y11; into r14
 8000470:	ea85 0e00 	eor.w	lr, r5, r0
    str.w   r1, [sp, #24]           //Store r1/y14 on stack
 8000474:	f8cd 1018 	str.w	r1, [sp, #24]
    and     r1, r1, r14             //Exec t13 = y14 & y17; into r1
 8000478:	ea01 010e 	and.w	r1, r1, lr
    eor     r1, r1, r2              //Exec t14 = t13 ^ t12; into r1
 800047c:	ea81 0102 	eor.w	r1, r1, r2
    str     r14, [sp, #20]          //Store r14/y17 on stack
 8000480:	f8cd e014 	str.w	lr, [sp, #20]
    eor     r14, r5, r9             //Exec y19 = y10 ^ y8; into r14
 8000484:	ea85 0e09 	eor.w	lr, r5, r9
    str.w   r5, [sp, #16]           //Store r5/y10 on stack
 8000488:	f8cd 5010 	str.w	r5, [sp, #16]
    and     r5, r9, r5              //Exec t15 = y8 & y10; into r5
 800048c:	ea09 0505 	and.w	r5, r9, r5
    eor     r2, r5, r2              //Exec t16 = t15 ^ t12; into r2
 8000490:	ea85 0202 	eor.w	r2, r5, r2
    eor     r5, r6, r0              //Exec y16 = t0 ^ y11; into r5
 8000494:	ea86 0500 	eor.w	r5, r6, r0
    str.w   r0, [sp, #12]           //Store r0/y11 on stack
 8000498:	f8cd 000c 	str.w	r0, [sp, #12]
    eor     r0, r3, r5              //Exec y21 = y13 ^ y16; into r0
 800049c:	ea83 0005 	eor.w	r0, r3, r5
    str     r3, [sp, #8]            //Store r3/y13 on stack
 80004a0:	9302      	str	r3, [sp, #8]
    and     r3, r3, r5              //Exec t7 = y13 & y16; into r3
 80004a2:	ea03 0305 	and.w	r3, r3, r5
    str     r5, [sp, #4]            //Store r5/y16 on stack
 80004a6:	9501      	str	r5, [sp, #4]
    str     r11, [sp, #0]           //Store r11/U7 on stack
 80004a8:	f8cd b000 	str.w	fp, [sp]
    eor     r5, r4, r5              //Exec y18 = U0 ^ y16; into r5
 80004ac:	ea84 0505 	eor.w	r5, r4, r5
    eor     r6, r6, r11             //Exec y1 = t0 ^ U7; into r6
 80004b0:	ea86 060b 	eor.w	r6, r6, fp
    eor     r7, r6, r7              //Exec y4 = y1 ^ U3; into r7
 80004b4:	ea86 0707 	eor.w	r7, r6, r7
    and     r11, r7, r11            //Exec t5 = y4 & U7; into r11
 80004b8:	ea07 0b0b 	and.w	fp, r7, fp
    eor     r11, r11, r12           //Exec t6 = t5 ^ t2; into r11
 80004bc:	ea8b 0b0c 	eor.w	fp, fp, ip
    eor     r11, r11, r2            //Exec t18 = t6 ^ t16; into r11
 80004c0:	ea8b 0b02 	eor.w	fp, fp, r2
    eor     r14, r11, r14           //Exec t22 = t18 ^ y19; into r14
 80004c4:	ea8b 0e0e 	eor.w	lr, fp, lr
    eor     r4, r6, r4              //Exec y2 = y1 ^ U0; into r4
 80004c8:	ea86 0404 	eor.w	r4, r6, r4
    and     r11, r4, r8             //Exec t10 = y2 & y7; into r11
 80004cc:	ea04 0b08 	and.w	fp, r4, r8
    eor     r11, r11, r3            //Exec t11 = t10 ^ t7; into r11
 80004d0:	ea8b 0b03 	eor.w	fp, fp, r3
    eor     r2, r11, r2             //Exec t20 = t11 ^ t16; into r2
 80004d4:	ea8b 0202 	eor.w	r2, fp, r2
    eor     r2, r2, r5              //Exec t24 = t20 ^ y18; into r2
 80004d8:	ea82 0205 	eor.w	r2, r2, r5
    eor     r10, r6, r10            //Exec y5 = y1 ^ U6; into r10
 80004dc:	ea86 0a0a 	eor.w	sl, r6, sl
    and     r11, r10, r6            //Exec t8 = y5 & y1; into r11
 80004e0:	ea0a 0b06 	and.w	fp, sl, r6
    eor     r3, r11, r3             //Exec t9 = t8 ^ t7; into r3
 80004e4:	ea8b 0303 	eor.w	r3, fp, r3
    eor     r3, r3, r1              //Exec t19 = t9 ^ t14; into r3
 80004e8:	ea83 0301 	eor.w	r3, r3, r1
    eor     r3, r3, r0              //Exec t23 = t19 ^ y21; into r3
 80004ec:	ea83 0300 	eor.w	r3, r3, r0
    eor     r0, r10, r9             //Exec y3 = y5 ^ y8; into r0
 80004f0:	ea8a 0009 	eor.w	r0, sl, r9
    ldr     r11, [sp, #32]          //Load y6 into r11
 80004f4:	f8dd b020 	ldr.w	fp, [sp, #32]
    and     r5, r0, r11             //Exec t3 = y3 & y6; into r5
 80004f8:	ea00 050b 	and.w	r5, r0, fp
    eor     r12, r5, r12            //Exec t4 = t3 ^ t2; into r12
 80004fc:	ea85 0c0c 	eor.w	ip, r5, ip
    ldr     r5, [sp, #40]           //Load y20 into r5
 8000500:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
    str     r7, [sp, #32]           //Store r7/y4 on stack
 8000502:	9708      	str	r7, [sp, #32]
    eor     r12, r12, r5            //Exec t17 = t4 ^ y20; into r12
 8000504:	ea8c 0c05 	eor.w	ip, ip, r5
    eor     r1, r12, r1             //Exec t21 = t17 ^ t14; into r1
 8000508:	ea8c 0101 	eor.w	r1, ip, r1
    and     r12, r1, r3             //Exec t26 = t21 & t23; into r12
 800050c:	ea01 0c03 	and.w	ip, r1, r3
    eor     r5, r2, r12             //Exec t27 = t24 ^ t26; into r5
 8000510:	ea82 050c 	eor.w	r5, r2, ip
    eor     r12, r14, r12           //Exec t31 = t22 ^ t26; into r12
 8000514:	ea8e 0c0c 	eor.w	ip, lr, ip
    eor     r1, r1, r14             //Exec t25 = t21 ^ t22; into r1
 8000518:	ea81 010e 	eor.w	r1, r1, lr
    and     r7, r1, r5              //Exec t28 = t25 & t27; into r7
 800051c:	ea01 0705 	and.w	r7, r1, r5
    eor     r14, r7, r14            //Exec t29 = t28 ^ t22; into r14
 8000520:	ea87 0e0e 	eor.w	lr, r7, lr
    and     r4, r14, r4             //Exec z14 = t29 & y2; into r4
 8000524:	ea0e 0404 	and.w	r4, lr, r4
    and     r8, r14, r8             //Exec z5 = t29 & y7; into r8
 8000528:	ea0e 0808 	and.w	r8, lr, r8
    eor     r7, r3, r2              //Exec t30 = t23 ^ t24; into r7
 800052c:	ea83 0702 	eor.w	r7, r3, r2
    and     r12, r12, r7            //Exec t32 = t31 & t30; into r12
 8000530:	ea0c 0c07 	and.w	ip, ip, r7
    eor     r12, r12, r2            //Exec t33 = t32 ^ t24; into r12
 8000534:	ea8c 0c02 	eor.w	ip, ip, r2
    eor     r7, r5, r12             //Exec t35 = t27 ^ t33; into r7
 8000538:	ea85 070c 	eor.w	r7, r5, ip
    and     r2, r2, r7              //Exec t36 = t24 & t35; into r2
 800053c:	ea02 0207 	and.w	r2, r2, r7
    eor     r5, r5, r2              //Exec t38 = t27 ^ t36; into r5
 8000540:	ea85 0502 	eor.w	r5, r5, r2
    and     r5, r14, r5             //Exec t39 = t29 & t38; into r5
 8000544:	ea0e 0505 	and.w	r5, lr, r5
    eor     r1, r1, r5              //Exec t40 = t25 ^ t39; into r1
 8000548:	ea81 0105 	eor.w	r1, r1, r5
    eor     r5, r14, r1             //Exec t43 = t29 ^ t40; into r5
 800054c:	ea8e 0501 	eor.w	r5, lr, r1
    ldr.w   r7, [sp, #4]            //Load y16 into r7
 8000550:	f8dd 7004 	ldr.w	r7, [sp, #4]
    and     r7, r5, r7              //Exec z3 = t43 & y16; into r7
 8000554:	ea05 0707 	and.w	r7, r5, r7
    eor     r8, r7, r8              //Exec tc12 = z3 ^ z5; into r8
 8000558:	ea87 0808 	eor.w	r8, r7, r8
    str     r8, [sp, #40]           //Store r8/tc12 on stack
 800055c:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
    ldr     r8, [sp, #8]            //Load y13 into r8
 8000560:	f8dd 8008 	ldr.w	r8, [sp, #8]
    and     r8, r5, r8              //Exec z12 = t43 & y13; into r8
 8000564:	ea05 0808 	and.w	r8, r5, r8
    and     r10, r1, r10            //Exec z13 = t40 & y5; into r10
 8000568:	ea01 0a0a 	and.w	sl, r1, sl
    and     r6, r1, r6              //Exec z4 = t40 & y1; into r6
 800056c:	ea01 0606 	and.w	r6, r1, r6
    eor     r6, r7, r6              //Exec tc6 = z3 ^ z4; into r6
 8000570:	ea87 0606 	eor.w	r6, r7, r6
    eor     r3, r3, r12             //Exec t34 = t23 ^ t33; into r3
 8000574:	ea83 030c 	eor.w	r3, r3, ip
    eor     r3, r2, r3              //Exec t37 = t36 ^ t34; into r3
 8000578:	ea82 0303 	eor.w	r3, r2, r3
    eor     r1, r1, r3              //Exec t41 = t40 ^ t37; into r1
 800057c:	ea81 0103 	eor.w	r1, r1, r3
    ldr.w   r5, [sp, #16]           //Load y10 into r5
 8000580:	f8dd 5010 	ldr.w	r5, [sp, #16]
    and     r2, r1, r5              //Exec z8 = t41 & y10; into r2
 8000584:	ea01 0205 	and.w	r2, r1, r5
    and     r9, r1, r9              //Exec z17 = t41 & y8; into r9
 8000588:	ea01 0909 	and.w	r9, r1, r9
    str     r9, [sp, #16]           //Store r9/z17 on stack
 800058c:	f8cd 9010 	str.w	r9, [sp, #16]
    eor     r5, r12, r3             //Exec t44 = t33 ^ t37; into r5
 8000590:	ea8c 0503 	eor.w	r5, ip, r3
    ldr     r9, [sp, #28]           //Load y15 into r9
 8000594:	f8dd 901c 	ldr.w	r9, [sp, #28]
    ldr.w   r7, [sp, #44]           //Load y12 into r7
 8000598:	f8dd 702c 	ldr.w	r7, [sp, #44]	@ 0x2c
    and     r9, r5, r9              //Exec z0 = t44 & y15; into r9
 800059c:	ea05 0909 	and.w	r9, r5, r9
    and     r7, r5, r7              //Exec z9 = t44 & y12; into r7
 80005a0:	ea05 0707 	and.w	r7, r5, r7
    and     r0, r3, r0              //Exec z10 = t37 & y3; into r0
 80005a4:	ea03 0000 	and.w	r0, r3, r0
    and     r3, r3, r11             //Exec z1 = t37 & y6; into r3
 80005a8:	ea03 030b 	and.w	r3, r3, fp
    eor     r3, r3, r9              //Exec tc5 = z1 ^ z0; into r3
 80005ac:	ea83 0309 	eor.w	r3, r3, r9
    eor     r3, r6, r3              //Exec tc11 = tc6 ^ tc5; into r3
 80005b0:	ea86 0303 	eor.w	r3, r6, r3
    ldr     r11, [sp, #32]          //Load y4 into r11
 80005b4:	f8dd b020 	ldr.w	fp, [sp, #32]
    ldr.w   r5, [sp, #20]           //Load y17 into r5
 80005b8:	f8dd 5014 	ldr.w	r5, [sp, #20]
    and     r11, r12, r11           //Exec z11 = t33 & y4; into r11
 80005bc:	ea0c 0b0b 	and.w	fp, ip, fp
    eor     r14, r14, r12           //Exec t42 = t29 ^ t33; into r14
 80005c0:	ea8e 0e0c 	eor.w	lr, lr, ip
    eor     r1, r14, r1             //Exec t45 = t42 ^ t41; into r1
 80005c4:	ea8e 0101 	eor.w	r1, lr, r1
    and     r5, r1, r5              //Exec z7 = t45 & y17; into r5
 80005c8:	ea01 0505 	and.w	r5, r1, r5
    eor     r6, r5, r6              //Exec tc8 = z7 ^ tc6; into r6
 80005cc:	ea85 0606 	eor.w	r6, r5, r6
    ldr     r5, [sp, #24]           //Load y14 into r5
 80005d0:	9d06      	ldr	r5, [sp, #24]
    str     r4, [sp, #32]           //Store r4/z14 on stack
 80005d2:	9408      	str	r4, [sp, #32]
    and     r1, r1, r5              //Exec z16 = t45 & y14; into r1
 80005d4:	ea01 0105 	and.w	r1, r1, r5
    ldr     r5, [sp, #12]           //Load y11 into r5
 80005d8:	9d03      	ldr	r5, [sp, #12]
    ldr     r4, [sp, #36]           //Load y9 into r4
 80005da:	9c09      	ldr	r4, [sp, #36]	@ 0x24
    and     r5, r14, r5             //Exec z6 = t42 & y11; into r5
 80005dc:	ea0e 0505 	and.w	r5, lr, r5
    eor     r5, r5, r6              //Exec tc16 = z6 ^ tc8; into r5
 80005e0:	ea85 0506 	eor.w	r5, r5, r6
    and     r4, r14, r4             //Exec z15 = t42 & y9; into r4
 80005e4:	ea0e 0404 	and.w	r4, lr, r4
    eor     r14, r4, r5             //Exec tc20 = z15 ^ tc16; into r14
 80005e8:	ea84 0e05 	eor.w	lr, r4, r5
    eor     r4, r4, r1              //Exec tc1 = z15 ^ z16; into r4
 80005ec:	ea84 0401 	eor.w	r4, r4, r1
    eor     r1, r0, r4              //Exec tc2 = z10 ^ tc1; into r1
 80005f0:	ea80 0104 	eor.w	r1, r0, r4
    eor     r0, r1, r11             //Exec tc21 = tc2 ^ z11; into r0
 80005f4:	ea81 000b 	eor.w	r0, r1, fp
    eor     r7, r7, r1              //Exec tc3 = z9 ^ tc2; into r7
 80005f8:	ea87 0701 	eor.w	r7, r7, r1
    eor     r1, r7, r5              //Exec S0 = tc3 ^ tc16; into r1
 80005fc:	ea87 0105 	eor.w	r1, r7, r5
    eor     r7, r7, r3              //Exec S3 = tc3 ^ tc11; into r7
 8000600:	ea87 0703 	eor.w	r7, r7, r3
    eor     r3, r7, r5              //Exec S1 = S3 ^ tc16 ^ 1; into r3
 8000604:	ea87 0305 	eor.w	r3, r7, r5
    eor     r11, r10, r4            //Exec tc13 = z13 ^ tc1; into r11
 8000608:	ea8a 0b04 	eor.w	fp, sl, r4
    ldr.w   r4, [sp, #0]            //Load U7 into r4
 800060c:	f8dd 4000 	ldr.w	r4, [sp]
    and     r12, r12, r4            //Exec z2 = t33 & U7; into r12
 8000610:	ea0c 0c04 	and.w	ip, ip, r4
    eor     r9, r9, r12             //Exec tc4 = z0 ^ z2; into r9
 8000614:	ea89 090c 	eor.w	r9, r9, ip
    eor     r12, r8, r9             //Exec tc7 = z12 ^ tc4; into r12
 8000618:	ea88 0c09 	eor.w	ip, r8, r9
    eor     r2, r2, r12             //Exec tc9 = z8 ^ tc7; into r2
 800061c:	ea82 020c 	eor.w	r2, r2, ip
    eor     r2, r6, r2              //Exec tc10 = tc8 ^ tc9; into r2
 8000620:	ea86 0202 	eor.w	r2, r6, r2
    ldr.w   r4, [sp, #32]           //Load z14 into r4
 8000624:	f8dd 4020 	ldr.w	r4, [sp, #32]
    eor     r12, r4, r2             //Exec tc17 = z14 ^ tc10; into r12
 8000628:	ea84 0c02 	eor.w	ip, r4, r2
    eor     r0, r0, r12             //Exec S5 = tc21 ^ tc17; into r0
 800062c:	ea80 000c 	eor.w	r0, r0, ip
    eor     r6, r12, r14            //Exec tc26 = tc17 ^ tc20; into r6
 8000630:	ea8c 060e 	eor.w	r6, ip, lr
    ldr.w   r4, [sp, #16]           //Load z17 into r4
 8000634:	f8dd 4010 	ldr.w	r4, [sp, #16]
    ldr     r12, [sp, #40]          //Load tc12 into r12
 8000638:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
    eor     r6, r6, r4              //Exec S2 = tc26 ^ z17 ^ 1; into r6
 800063c:	ea86 0604 	eor.w	r6, r6, r4
    eor     r12, r9, r12            //Exec tc14 = tc4 ^ tc12; into r12
 8000640:	ea89 0c0c 	eor.w	ip, r9, ip
    eor     r14, r11, r12           //Exec tc18 = tc13 ^ tc14; into r14
 8000644:	ea8b 0e0c 	eor.w	lr, fp, ip
    eor     r2, r2, r14             //Exec S6 = tc10 ^ tc18 ^ 1; into r2
 8000648:	ea82 020e 	eor.w	r2, r2, lr
    eor     r11, r8, r14            //Exec S7 = z12 ^ tc18 ^ 1; into r11
 800064c:	ea88 0b0e 	eor.w	fp, r8, lr
    ldr     r14, [sp, #52]          // restore link register
 8000650:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
    eor     r8, r12, r7             //Exec S4 = tc14 ^ S3; into r8
 8000654:	ea8c 0807 	eor.w	r8, ip, r7
    bx      lr
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <mixcolumns_0>:
* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 0.
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 0.
******************************************************************************/
.align 2
mixcolumns_0:
    str     r14, [sp, #52]          // store link register
 800065c:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
    movw    r12, #0x0303
 8000660:	f240 3c03 	movw	ip, #771	@ 0x303
    movt    r12, #0x0303
 8000664:	f2c0 3c03 	movt	ip, #771	@ 0x303
    mc_0_2  r12, 6, 2, 26, 18
 8000668:	ea0c 1e91 	and.w	lr, ip, r1, lsr #6
 800066c:	ea21 09bc 	bic.w	r9, r1, ip, ror #2
 8000670:	ea4e 0e89 	orr.w	lr, lr, r9, lsl #2
 8000674:	ea81 243e 	eor.w	r4, r1, lr, ror #8
 8000678:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800067c:	f6c0 710f 	movt	r1, #3855	@ 0xf0f
 8000680:	ea0c 159b 	and.w	r5, ip, fp, lsr #6
 8000684:	ea2b 09bc 	bic.w	r9, fp, ip, ror #2
 8000688:	ea45 0589 	orr.w	r5, r5, r9, lsl #2
 800068c:	ea8b 2a35 	eor.w	sl, fp, r5, ror #8
 8000690:	ea01 1b1a 	and.w	fp, r1, sl, lsr #4
 8000694:	ea2a 1931 	bic.w	r9, sl, r1, ror #4
 8000698:	ea4b 1b09 	orr.w	fp, fp, r9, lsl #4
 800069c:	ea84 4b3b 	eor.w	fp, r4, fp, ror #16
 80006a0:	ea8b 2b35 	eor.w	fp, fp, r5, ror #8
 80006a4:	ea0c 1592 	and.w	r5, ip, r2, lsr #6
 80006a8:	ea22 09bc 	bic.w	r9, r2, ip, ror #2
 80006ac:	ea45 0589 	orr.w	r5, r5, r9, lsl #2
 80006b0:	ea82 2235 	eor.w	r2, r2, r5, ror #8
 80006b4:	ea8a 2a35 	eor.w	sl, sl, r5, ror #8
 80006b8:	ea01 1512 	and.w	r5, r1, r2, lsr #4
 80006bc:	ea22 1931 	bic.w	r9, r2, r1, ror #4
 80006c0:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
 80006c4:	ea8a 4a35 	eor.w	sl, sl, r5, ror #16
 80006c8:	ea8a 0a04 	eor.w	sl, sl, r4
 80006cc:	ea0c 1590 	and.w	r5, ip, r0, lsr #6
 80006d0:	ea20 09bc 	bic.w	r9, r0, ip, ror #2
 80006d4:	ea45 0589 	orr.w	r5, r5, r9, lsl #2
 80006d8:	ea80 2035 	eor.w	r0, r0, r5, ror #8
 80006dc:	ea82 2935 	eor.w	r9, r2, r5, ror #8
 80006e0:	ea01 1510 	and.w	r5, r1, r0, lsr #4
 80006e4:	ea20 1231 	bic.w	r2, r0, r1, ror #4
 80006e8:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
 80006ec:	ea89 4935 	eor.w	r9, r9, r5, ror #16
 80006f0:	ea0c 1598 	and.w	r5, ip, r8, lsr #6
 80006f4:	ea28 02bc 	bic.w	r2, r8, ip, ror #2
 80006f8:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
 80006fc:	ea88 2235 	eor.w	r2, r8, r5, ror #8
 8000700:	ea80 2835 	eor.w	r8, r0, r5, ror #8
 8000704:	ea01 1512 	and.w	r5, r1, r2, lsr #4
 8000708:	ea22 1031 	bic.w	r0, r2, r1, ror #4
 800070c:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
 8000710:	ea88 4835 	eor.w	r8, r8, r5, ror #16
 8000714:	ea88 0804 	eor.w	r8, r8, r4
 8000718:	ea0c 1597 	and.w	r5, ip, r7, lsr #6
 800071c:	ea27 00bc 	bic.w	r0, r7, ip, ror #2
 8000720:	ea45 0580 	orr.w	r5, r5, r0, lsl #2
 8000724:	ea87 2035 	eor.w	r0, r7, r5, ror #8
 8000728:	ea82 2735 	eor.w	r7, r2, r5, ror #8
 800072c:	ea01 1510 	and.w	r5, r1, r0, lsr #4
 8000730:	ea20 1231 	bic.w	r2, r0, r1, ror #4
 8000734:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
 8000738:	ea87 4735 	eor.w	r7, r7, r5, ror #16
 800073c:	ea87 0704 	eor.w	r7, r7, r4
 8000740:	ea0c 1596 	and.w	r5, ip, r6, lsr #6
 8000744:	ea26 02bc 	bic.w	r2, r6, ip, ror #2
 8000748:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
 800074c:	ea86 2235 	eor.w	r2, r6, r5, ror #8
 8000750:	ea80 2635 	eor.w	r6, r0, r5, ror #8
 8000754:	ea01 1512 	and.w	r5, r1, r2, lsr #4
 8000758:	ea22 1031 	bic.w	r0, r2, r1, ror #4
 800075c:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
 8000760:	ea86 4635 	eor.w	r6, r6, r5, ror #16
 8000764:	ea0c 1593 	and.w	r5, ip, r3, lsr #6
 8000768:	ea23 00bc 	bic.w	r0, r3, ip, ror #2
 800076c:	ea45 0580 	orr.w	r5, r5, r0, lsl #2
 8000770:	ea83 2035 	eor.w	r0, r3, r5, ror #8
 8000774:	ea82 2335 	eor.w	r3, r2, r5, ror #8
 8000778:	ea01 1510 	and.w	r5, r1, r0, lsr #4
 800077c:	ea20 1231 	bic.w	r2, r0, r1, ror #4
 8000780:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
 8000784:	ea83 4535 	eor.w	r5, r3, r5, ror #16
 8000788:	ea80 2e3e 	eor.w	lr, r0, lr, ror #8
 800078c:	ea01 1014 	and.w	r0, r1, r4, lsr #4
 8000790:	ea24 1231 	bic.w	r2, r4, r1, ror #4
 8000794:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8000798:	ea8e 4430 	eor.w	r4, lr, r0, ror #16
    ldr     r14, [sp, #52]          // restore link register
 800079c:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
    bx      lr
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop

080007a4 <mixcolumns_1>:
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for round i s.t. (i%4) == 1.
******************************************************************************/
.align 2
mixcolumns_1:
    str     r14, [sp, #52]          // store link register
 80007a4:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
    movw    r14, #0x0f0f
 80007a8:	f640 7e0f 	movw	lr, #3855	@ 0xf0f
    movt    r14, #0x0f0f            // r14<- 0x0f0f0f0f (mask for BYTE_ROR_4)
 80007ac:	f6c0 7e0f 	movt	lr, #3855	@ 0xf0f
    and     r5, r14, r1, lsr #4     // r5 <- (S0 >> 4) & 0x0f0f0f0f
 80007b0:	ea0e 1511 	and.w	r5, lr, r1, lsr #4
    and     r9, r14, r1             // r9 <- S0 & 0x0f0f0f0f
 80007b4:	ea0e 0901 	and.w	r9, lr, r1
    orr     r5, r5, r9, lsl #4      // r5 <- BYTE_ROR_4(S0)
 80007b8:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
    eor     r4, r1, r5, ror #8      // r4 <- S0 ^ (BYTE_ROR_4(S0) >>> 8)
 80007bc:	ea81 2435 	eor.w	r4, r1, r5, ror #8
    mov.w   r1, r5, ror #8          // r1 <- (BYTE_ROR_4(S0) >>> 8)
 80007c0:	ea4f 2135 	mov.w	r1, r5, ror #8
    and     r5, r14, r11, lsr #4    // r5 <- (S7 >> 4) & 0x0f0f0f0f
 80007c4:	ea0e 151b 	and.w	r5, lr, fp, lsr #4
    and     r9, r14, r11            // r9 <- S7 & 0x0f0f0f0f
 80007c8:	ea0e 090b 	and.w	r9, lr, fp
    orr     r5, r5, r9, lsl #4      // r5 <- BYTE_ROR_4(S7)
 80007cc:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
    eor     r12, r11, r5, ror #8    // r12<- S7 ^ (BYTE_ROR_4(S7) >>> 8)
 80007d0:	ea8b 2c35 	eor.w	ip, fp, r5, ror #8
    eor     r10, r4, r12            // r10<- r4 ^ r12
 80007d4:	ea84 0a0c 	eor.w	sl, r4, ip
    eor     r11, r10                // r11<- S7 ^ r4 ^ r12
 80007d8:	ea8b 0b0a 	eor.w	fp, fp, sl
    eor     r11, r11, r12, ror #16  // r11<- r11 ^ (r12 >>> 16)
 80007dc:	ea8b 4b3c 	eor.w	fp, fp, ip, ror #16
    and     r5, r14, r2, lsr #4     // r5 <- (S6 >> 4) & 0x0f0f0f0f
 80007e0:	ea0e 1512 	and.w	r5, lr, r2, lsr #4
    and     r9, r14, r2             // r9 <- S6 & 0x0f0f0f0f
 80007e4:	ea0e 0902 	and.w	r9, lr, r2
    orr     r5, r5, r9, lsl #4      // r5 <- BYTE_ROR_4(S6)
 80007e8:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
    eor     r10, r10, r5, ror #8    // r10<- r10 ^ (BYTE_ROR_4(S6) >>> 8)
 80007ec:	ea8a 2a35 	eor.w	sl, sl, r5, ror #8
    eor     r12, r2, r5, ror #8     // r12<- S6 ^ (BYTE_ROR_4(S6) >>> 8)
 80007f0:	ea82 2c35 	eor.w	ip, r2, r5, ror #8
    eor     r10, r10, r12, ror #16  // r10<- r10 ^ (r12 >>> 16)
 80007f4:	ea8a 4a3c 	eor.w	sl, sl, ip, ror #16
    and     r5, r14, r0, lsr #4     // r5 <- (S5 >> 4) & 0x0f0f0f0f
 80007f8:	ea0e 1510 	and.w	r5, lr, r0, lsr #4
    and     r9, r14, r0             // r9 <- S5 & 0x0f0f0f0f
 80007fc:	ea0e 0900 	and.w	r9, lr, r0
    orr     r5, r5, r9, lsl #4      // r5 <- BYTE_ROR_4(S5)
 8000800:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
    eor     r9, r12, r5, ror #8     // r9 <- r12 ^ (BYTE_ROR_4(S5) >>> 8)
 8000804:	ea8c 2935 	eor.w	r9, ip, r5, ror #8
    eor     r12, r0, r5, ror #8     // r12<- S5 ^ (BYTE_ROR_4(S5) >>> 8)
 8000808:	ea80 2c35 	eor.w	ip, r0, r5, ror #8
    eor     r9, r9, r12, ror #16    // r9 <- (r9 ^ r12 >>> 16)
 800080c:	ea89 493c 	eor.w	r9, r9, ip, ror #16
    eor     r0, r4, r12             // r0 <- r12 ^ S0 ^ (BYTE_ROR_4(S0) >>> 8)
 8000810:	ea84 000c 	eor.w	r0, r4, ip
    and     r5, r14, r8, lsr #4     // r5 <- (S4 >> 4) & 0x0f0f0f0f
 8000814:	ea0e 1518 	and.w	r5, lr, r8, lsr #4
    and     r2, r14, r8             // r2 <- S4 & 0x0f0f0f0f
 8000818:	ea0e 0208 	and.w	r2, lr, r8
    orr     r2, r5, r2, lsl #4      // r2 <- BYTE_ROR_4(S4)
 800081c:	ea45 1202 	orr.w	r2, r5, r2, lsl #4
    eor     r0, r0, r2, ror #8      // r0 <- r0 ^ (BYTE_ROR_4(S4) >>> 8)
 8000820:	ea80 2032 	eor.w	r0, r0, r2, ror #8
    eor     r2, r8, r2, ror #8      // r2 <- S4 ^ (BYTE_ROR_4(S4) >>> 8)
 8000824:	ea88 2232 	eor.w	r2, r8, r2, ror #8
    eor     r8, r0, r2, ror #16     // r8 <- r0 ^ (r2 >>> 16)
 8000828:	ea80 4832 	eor.w	r8, r0, r2, ror #16
    eor     r2, r4                  // r2 <- r2 ^ S0 ^ (BYTE_ROR_4(S0) >>> 8)
 800082c:	ea82 0204 	eor.w	r2, r2, r4
    and     r5, r14, r7, lsr #4     // r5 <- (S3 >> 4) & 0x0f0f0f0f
 8000830:	ea0e 1517 	and.w	r5, lr, r7, lsr #4
    and     r0, r14, r7             // r0 <- S3 & 0x0f0f0f0f
 8000834:	ea0e 0007 	and.w	r0, lr, r7
    orr     r0, r5, r0, lsl #4      // r0 <- BYTE_ROR_4(S3)
 8000838:	ea45 1000 	orr.w	r0, r5, r0, lsl #4
    eor     r2, r2, r0, ror #8      // r2 <- r2 ^ (BYTE_ROR_4(S3) >>> 8)
 800083c:	ea82 2230 	eor.w	r2, r2, r0, ror #8
    eor     r0, r7, r0, ror #8      // r0 <- S3 ^ (BYTE_ROR_4(S3) >>> 8)
 8000840:	ea87 2030 	eor.w	r0, r7, r0, ror #8
    eor     r7, r2, r0, ror #16     // r7 <- r2 ^ (r0 >>> 16)
 8000844:	ea82 4730 	eor.w	r7, r2, r0, ror #16
    and     r5, r14, r6, lsr #4     // r5 <- (S2 >> 4) & 0x0f0f0f0f
 8000848:	ea0e 1516 	and.w	r5, lr, r6, lsr #4
    and     r2, r14, r6             // r2 <- S2 & 0x0f0f0f0f
 800084c:	ea0e 0206 	and.w	r2, lr, r6
    orr     r2, r5, r2, lsl #4      // r2 <- BYTE_ROR_4(S2)
 8000850:	ea45 1202 	orr.w	r2, r5, r2, lsl #4
    eor     r0, r0, r2, ror #8      // r0 <- r0 ^ (BYTE_ROR_4(S2) >>> 8)
 8000854:	ea80 2032 	eor.w	r0, r0, r2, ror #8
    eor     r2, r6, r2, ror #8      // r2 <- S2 ^ (BYTE_ROR_4(S2) >>> 8)
 8000858:	ea86 2232 	eor.w	r2, r6, r2, ror #8
    eor     r6, r0, r2, ror #16     // r6 <- r0 ^ (r2 >>> 16)
 800085c:	ea80 4632 	eor.w	r6, r0, r2, ror #16
    and     r5, r14, r3, lsr #4     // r5 <- (S1 >> 4) & 0x0f0f0f0f
 8000860:	ea0e 1513 	and.w	r5, lr, r3, lsr #4
    and     r0, r14, r3             // r0 <- S1 & 0x0f0f0f0f
 8000864:	ea0e 0003 	and.w	r0, lr, r3
    orr     r0, r5, r0, lsl #4      // r0 <- BYTE_ROR_4(S1)
 8000868:	ea45 1000 	orr.w	r0, r5, r0, lsl #4
    ldr     r14, [sp, #52]          // restore link register
 800086c:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
    eor     r2, r2, r0, ror #8      // r2 <- r2 ^ (BYTE_ROR_4(S1) >>> 8)
 8000870:	ea82 2230 	eor.w	r2, r2, r0, ror #8
    eor     r0, r3, r0, ror #8      // r0 <- S1 ^ (BYTE_ROR_4(S1) >>> 8)
 8000874:	ea83 2030 	eor.w	r0, r3, r0, ror #8
    eor     r5, r2, r0, ror #16     // r5 <- r2 <- (r0 >>> 16)
 8000878:	ea82 4530 	eor.w	r5, r2, r0, ror #16
    eor     r1, r0, r1              // r1 <- r0 ^ BYTE_ROR_4(S0) >>> 8
 800087c:	ea80 0101 	eor.w	r1, r0, r1
    eor     r4, r1, r4, ror #16     // r4 <- r4 ^ (r0 >>> 16)
 8000880:	ea81 4434 	eor.w	r4, r1, r4, ror #16
    bx      lr
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop

08000888 <mixcolumns_2>:
* Computation of the MixColumns transformation in the fixsliced representation.
* For fully-fixsliced implementations only, for rounds i s.t. (i%4) == 2.
******************************************************************************/
.align 2
mixcolumns_2:
    str     r14, [sp, #52]          // store link register
 8000888:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
    movw    r12, #0x3f3f
 800088c:	f643 7c3f 	movw	ip, #16191	@ 0x3f3f
    movt    r12, #0x3f3f
 8000890:	f6c3 7c3f 	movt	ip, #16191	@ 0x3f3f
    mc_0_2  r12, 2, 6, 30, 22
 8000894:	ea0c 0e91 	and.w	lr, ip, r1, lsr #2
 8000898:	ea21 19bc 	bic.w	r9, r1, ip, ror #6
 800089c:	ea4e 1e89 	orr.w	lr, lr, r9, lsl #6
 80008a0:	ea81 243e 	eor.w	r4, r1, lr, ror #8
 80008a4:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80008a8:	f6c0 710f 	movt	r1, #3855	@ 0xf0f
 80008ac:	ea0c 059b 	and.w	r5, ip, fp, lsr #2
 80008b0:	ea2b 19bc 	bic.w	r9, fp, ip, ror #6
 80008b4:	ea45 1589 	orr.w	r5, r5, r9, lsl #6
 80008b8:	ea8b 2a35 	eor.w	sl, fp, r5, ror #8
 80008bc:	ea01 1b1a 	and.w	fp, r1, sl, lsr #4
 80008c0:	ea2a 1931 	bic.w	r9, sl, r1, ror #4
 80008c4:	ea4b 1b09 	orr.w	fp, fp, r9, lsl #4
 80008c8:	ea84 4b3b 	eor.w	fp, r4, fp, ror #16
 80008cc:	ea8b 2b35 	eor.w	fp, fp, r5, ror #8
 80008d0:	ea0c 0592 	and.w	r5, ip, r2, lsr #2
 80008d4:	ea22 19bc 	bic.w	r9, r2, ip, ror #6
 80008d8:	ea45 1589 	orr.w	r5, r5, r9, lsl #6
 80008dc:	ea82 2235 	eor.w	r2, r2, r5, ror #8
 80008e0:	ea8a 2a35 	eor.w	sl, sl, r5, ror #8
 80008e4:	ea01 1512 	and.w	r5, r1, r2, lsr #4
 80008e8:	ea22 1931 	bic.w	r9, r2, r1, ror #4
 80008ec:	ea45 1509 	orr.w	r5, r5, r9, lsl #4
 80008f0:	ea8a 4a35 	eor.w	sl, sl, r5, ror #16
 80008f4:	ea8a 0a04 	eor.w	sl, sl, r4
 80008f8:	ea0c 0590 	and.w	r5, ip, r0, lsr #2
 80008fc:	ea20 19bc 	bic.w	r9, r0, ip, ror #6
 8000900:	ea45 1589 	orr.w	r5, r5, r9, lsl #6
 8000904:	ea80 2035 	eor.w	r0, r0, r5, ror #8
 8000908:	ea82 2935 	eor.w	r9, r2, r5, ror #8
 800090c:	ea01 1510 	and.w	r5, r1, r0, lsr #4
 8000910:	ea20 1231 	bic.w	r2, r0, r1, ror #4
 8000914:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
 8000918:	ea89 4935 	eor.w	r9, r9, r5, ror #16
 800091c:	ea0c 0598 	and.w	r5, ip, r8, lsr #2
 8000920:	ea28 12bc 	bic.w	r2, r8, ip, ror #6
 8000924:	ea45 1582 	orr.w	r5, r5, r2, lsl #6
 8000928:	ea88 2235 	eor.w	r2, r8, r5, ror #8
 800092c:	ea80 2835 	eor.w	r8, r0, r5, ror #8
 8000930:	ea01 1512 	and.w	r5, r1, r2, lsr #4
 8000934:	ea22 1031 	bic.w	r0, r2, r1, ror #4
 8000938:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
 800093c:	ea88 4835 	eor.w	r8, r8, r5, ror #16
 8000940:	ea88 0804 	eor.w	r8, r8, r4
 8000944:	ea0c 0597 	and.w	r5, ip, r7, lsr #2
 8000948:	ea27 10bc 	bic.w	r0, r7, ip, ror #6
 800094c:	ea45 1580 	orr.w	r5, r5, r0, lsl #6
 8000950:	ea87 2035 	eor.w	r0, r7, r5, ror #8
 8000954:	ea82 2735 	eor.w	r7, r2, r5, ror #8
 8000958:	ea01 1510 	and.w	r5, r1, r0, lsr #4
 800095c:	ea20 1231 	bic.w	r2, r0, r1, ror #4
 8000960:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
 8000964:	ea87 4735 	eor.w	r7, r7, r5, ror #16
 8000968:	ea87 0704 	eor.w	r7, r7, r4
 800096c:	ea0c 0596 	and.w	r5, ip, r6, lsr #2
 8000970:	ea26 12bc 	bic.w	r2, r6, ip, ror #6
 8000974:	ea45 1582 	orr.w	r5, r5, r2, lsl #6
 8000978:	ea86 2235 	eor.w	r2, r6, r5, ror #8
 800097c:	ea80 2635 	eor.w	r6, r0, r5, ror #8
 8000980:	ea01 1512 	and.w	r5, r1, r2, lsr #4
 8000984:	ea22 1031 	bic.w	r0, r2, r1, ror #4
 8000988:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
 800098c:	ea86 4635 	eor.w	r6, r6, r5, ror #16
 8000990:	ea0c 0593 	and.w	r5, ip, r3, lsr #2
 8000994:	ea23 10bc 	bic.w	r0, r3, ip, ror #6
 8000998:	ea45 1580 	orr.w	r5, r5, r0, lsl #6
 800099c:	ea83 2035 	eor.w	r0, r3, r5, ror #8
 80009a0:	ea82 2335 	eor.w	r3, r2, r5, ror #8
 80009a4:	ea01 1510 	and.w	r5, r1, r0, lsr #4
 80009a8:	ea20 1231 	bic.w	r2, r0, r1, ror #4
 80009ac:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
 80009b0:	ea83 4535 	eor.w	r5, r3, r5, ror #16
 80009b4:	ea80 2e3e 	eor.w	lr, r0, lr, ror #8
 80009b8:	ea01 1014 	and.w	r0, r1, r4, lsr #4
 80009bc:	ea24 1231 	bic.w	r2, r4, r1, ror #4
 80009c0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80009c4:	ea8e 4430 	eor.w	r4, lr, r0, ror #16
    ldr     r14, [sp, #52]          // restore link register
 80009c8:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
    bx      lr
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <mixcolumns_3>:
* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 1.
* Based on Käsper-Schwabe, similar to https://github.com/Ko-/aes-armcortexm.
******************************************************************************/
.align 2
mixcolumns_3:
    eor     r12, r11, r11, ror #8   // r12<- S7 ^ (S7 >>> 8)
 80009d0:	ea8b 2c3b 	eor.w	ip, fp, fp, ror #8
    eor     r4, r1, r1, ror #8      // r4 <- S0 ^ (S0 >>> 8)
 80009d4:	ea81 2431 	eor.w	r4, r1, r1, ror #8
    eor     r11, r4, r11, ror #8    // r11<- S0 ^ (S0 >>> 8) ^ (S7 >>> 8)
 80009d8:	ea84 2b3b 	eor.w	fp, r4, fp, ror #8
    eor     r11, r11, r12, ror #16  // r11<- r11 ^ (S7 >>> 16) ^ (S7 >>> 24)
 80009dc:	ea8b 4b3c 	eor.w	fp, fp, ip, ror #16
    eor     r10, r12, r2, ror #8    // r10<- S7 ^ (S7 >>> 8) ^ (S6 >>> 8)
 80009e0:	ea8c 2a32 	eor.w	sl, ip, r2, ror #8
    eor     r12, r2, r2, ror #8     // r12<- S6 ^ (S6 >>> 8)
 80009e4:	ea82 2c32 	eor.w	ip, r2, r2, ror #8
    eor     r10, r10, r12, ror #16  // r10<- r10 ^ (S6 >>> 16) ^ (S6 >>> 24)
 80009e8:	ea8a 4a3c 	eor.w	sl, sl, ip, ror #16
    eor     r10, r4                 // r10<- r10 ^ S0 ^ (S0 >>> 8)
 80009ec:	ea8a 0a04 	eor.w	sl, sl, r4
    eor     r9, r12, r0, ror #8     // r9 <- S6 ^ (S6 >>> 8) ^ (S5 >>> 8)
 80009f0:	ea8c 2930 	eor.w	r9, ip, r0, ror #8
    eor     r12, r0, r0, ror #8     // r12<- S5 ^ (S5 >>> 8)
 80009f4:	ea80 2c30 	eor.w	ip, r0, r0, ror #8
    eor     r9, r9, r12, ror #16    // r9 <- r9 ^ (S5 >>> 16) ^ (S5 >>> 24)
 80009f8:	ea89 493c 	eor.w	r9, r9, ip, ror #16
    eor     r2, r8, r8, ror #8      // r2 <- S4 ^ (S4 >>> 8)
 80009fc:	ea88 2238 	eor.w	r2, r8, r8, ror #8
    eor     r8, r12, r8, ror #8     // r8 <- S5 ^ (S5 >>> 8) ^ (S4 >>> 8)
 8000a00:	ea8c 2838 	eor.w	r8, ip, r8, ror #8
    eor     r8, r4                  // r8 <- r8 ^ S0 ^ (S0 >>> 8)
 8000a04:	ea88 0804 	eor.w	r8, r8, r4
    eor     r8, r8, r2, ror #16     // r8 <- r8 ^ (S4 >>> 16) ^ (S4 >>> 24)
 8000a08:	ea88 4832 	eor.w	r8, r8, r2, ror #16
    eor     r12, r7, r7, ror #8     // r12<- S3 ^ (S3 >>> 8)
 8000a0c:	ea87 2c37 	eor.w	ip, r7, r7, ror #8
    eor     r7, r2, r7, ror #8      // r7 <- S4 ^ (S4 >>> 8) ^ (S3 >>> 8)
 8000a10:	ea82 2737 	eor.w	r7, r2, r7, ror #8
    eor     r7, r4                  // r7 <- r7 ^ S0 ^ (S0 >>> 8)
 8000a14:	ea87 0704 	eor.w	r7, r7, r4
    eor     r7, r7, r12, ror #16    // r7 <- r7 ^ (S3 >>> 16) ^ (S3 >>> 24)
 8000a18:	ea87 473c 	eor.w	r7, r7, ip, ror #16
    eor     r2, r6, r6, ror #8      // r2 <- S2 ^ (S2 >>> 8)
 8000a1c:	ea86 2236 	eor.w	r2, r6, r6, ror #8
    eor     r6, r12, r6, ror #8     // r6 <- S3 ^ (S3 >>> 8) ^ (S2 >>> 8)
 8000a20:	ea8c 2636 	eor.w	r6, ip, r6, ror #8
    eor     r6, r6, r2, ror #16     // r6 <- r6 ^ (S2 >>> 16) ^ (S2 >>> 24)
 8000a24:	ea86 4632 	eor.w	r6, r6, r2, ror #16
    eor     r12, r3, r3, ror #8     // r12<- S1 ^ (S1 >>> 8)
 8000a28:	ea83 2c33 	eor.w	ip, r3, r3, ror #8
    eor     r5, r2, r3, ror #8      // r5 <- S2 ^ (S2 >>> 8) ^ (S1 >>> 8)
 8000a2c:	ea82 2533 	eor.w	r5, r2, r3, ror #8
    eor     r5, r5, r12, ror #16    // r5 <- r5 ^ (S1 >>> 16) ^ (S1 >>> 24)
 8000a30:	ea85 453c 	eor.w	r5, r5, ip, ror #16
    eor     r4, r12, r4, ror #16    // r4 <- S1 ^ (S1 >>> 8) ^ (r4 >>> 16)
 8000a34:	ea8c 4434 	eor.w	r4, ip, r4, ror #16
    eor     r4, r4, r1, ror #8      // r4 <- r4 ^ (S0 >>> 8)
 8000a38:	ea84 2431 	eor.w	r4, r4, r1, ror #8
    bx      lr
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <double_shiftrows>:
/******************************************************************************
* Applies the ShiftRows transformation twice (i.e. SR^2) on the internal state.
******************************************************************************/
.align 2
double_shiftrows:
    movw    r10, #0x0f00
 8000a40:	f640 7a00 	movw	sl, #3840	@ 0xf00
    movt    r10, #0x0f00            // r10<- 0x0f000f00 (mask)
 8000a44:	f6c0 7a00 	movt	sl, #3840	@ 0xf00
    swpmv   r0, r0, r0, r0, r10, #4, r12
 8000a48:	ea80 1c10 	eor.w	ip, r0, r0, lsr #4
 8000a4c:	ea0c 0c0a 	and.w	ip, ip, sl
 8000a50:	ea80 000c 	eor.w	r0, r0, ip
 8000a54:	ea80 100c 	eor.w	r0, r0, ip, lsl #4
    swpmv   r1, r1, r1, r1, r10, #4, r12
 8000a58:	ea81 1c11 	eor.w	ip, r1, r1, lsr #4
 8000a5c:	ea0c 0c0a 	and.w	ip, ip, sl
 8000a60:	ea81 010c 	eor.w	r1, r1, ip
 8000a64:	ea81 110c 	eor.w	r1, r1, ip, lsl #4
    swpmv   r2, r2, r2, r2, r10, #4, r12
 8000a68:	ea82 1c12 	eor.w	ip, r2, r2, lsr #4
 8000a6c:	ea0c 0c0a 	and.w	ip, ip, sl
 8000a70:	ea82 020c 	eor.w	r2, r2, ip
 8000a74:	ea82 120c 	eor.w	r2, r2, ip, lsl #4
    swpmv   r3, r3, r3, r3, r10, #4, r12
 8000a78:	ea83 1c13 	eor.w	ip, r3, r3, lsr #4
 8000a7c:	ea0c 0c0a 	and.w	ip, ip, sl
 8000a80:	ea83 030c 	eor.w	r3, r3, ip
 8000a84:	ea83 130c 	eor.w	r3, r3, ip, lsl #4
    swpmv   r6, r6, r6, r6, r10, #4, r12
 8000a88:	ea86 1c16 	eor.w	ip, r6, r6, lsr #4
 8000a8c:	ea0c 0c0a 	and.w	ip, ip, sl
 8000a90:	ea86 060c 	eor.w	r6, r6, ip
 8000a94:	ea86 160c 	eor.w	r6, r6, ip, lsl #4
    swpmv   r7, r7, r7, r7, r10, #4, r12
 8000a98:	ea87 1c17 	eor.w	ip, r7, r7, lsr #4
 8000a9c:	ea0c 0c0a 	and.w	ip, ip, sl
 8000aa0:	ea87 070c 	eor.w	r7, r7, ip
 8000aa4:	ea87 170c 	eor.w	r7, r7, ip, lsl #4
    swpmv   r8, r8, r8, r8, r10, #4, r12
 8000aa8:	ea88 1c18 	eor.w	ip, r8, r8, lsr #4
 8000aac:	ea0c 0c0a 	and.w	ip, ip, sl
 8000ab0:	ea88 080c 	eor.w	r8, r8, ip
 8000ab4:	ea88 180c 	eor.w	r8, r8, ip, lsl #4
    swpmv   r11, r11, r11, r11, r10, #4, r12
 8000ab8:	ea8b 1c1b 	eor.w	ip, fp, fp, lsr #4
 8000abc:	ea0c 0c0a 	and.w	ip, ip, sl
 8000ac0:	ea8b 0b0c 	eor.w	fp, fp, ip
 8000ac4:	ea8b 1b0c 	eor.w	fp, fp, ip, lsl #4
    bx      lr
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <double_shiftrows_change>:
* Applies the ShiftRows transformation twice (i.e. SR^2) on the internal state.
******************************************************************************/
.align 2
double_shiftrows_change:
    //movw    r10, #0x0f00
    movt    r10, #0x0f00            // r10<- 0x0f000f00 (mask)
 8000acc:	f6c0 7a00 	movt	sl, #3840	@ 0xf00
    //swpmv   r0, r0, r0, r0, r10, #4, r12
    //swpmv   r1, r1, r1, r1, r10, #4, r12
    swpmv   r2, r2, r2, r2, r10, #4, r12
 8000ad0:	ea82 1c12 	eor.w	ip, r2, r2, lsr #4
 8000ad4:	ea0c 0c0a 	and.w	ip, ip, sl
 8000ad8:	ea82 020c 	eor.w	r2, r2, ip
 8000adc:	ea82 120c 	eor.w	r2, r2, ip, lsl #4

    swpmv   r6, r6, r6, r6, r10, #4, r12
    swpmv   r7, r7, r7, r7, r10, #4, r12
    swpmv   r8, r8, r8, r8, r10, #4, r12
    swpmv   r11, r11, r11, r11, r10, #4, r12*/
    bx      lr
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <aes128_encrypt_ffs>:
@                   const u8* ptext_bis, const u32* rkey);
.global aes128_encrypt_ffs
.type   aes128_encrypt_ffs,%function
.align 2
aes128_encrypt_ffs:
    push    {r0-r12,r14}
 8000ae4:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8000ae8:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 8000aec:	f8d2 4000 	ldr.w	r4, [r2]
    ldr     r5, [r2, #4]
 8000af0:	6855      	ldr	r5, [r2, #4]
    ldr     r6, [r2, #8]
 8000af2:	6896      	ldr	r6, [r2, #8]
    ldr     r7, [r2, #12]
 8000af4:	68d7      	ldr	r7, [r2, #12]
    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 8000af6:	f8d3 8000 	ldr.w	r8, [r3]
    ldr     r9, [r3, #4]
 8000afa:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ldr     r10,[r3, #8]
 8000afe:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ldr     r11,[r3, #12]
 8000b02:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 8000b06:	f8dd 1070 	ldr.w	r1, [sp, #112]	@ 0x70
    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 8000b0a:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    bl      packing                 // pack the 2 input blocks
 8000b0e:	f7ff fb7f 	bl	8000210 <packing>
    bl      ark_sbox                // ark + sbox (round 0)
 8000b12:	f7ff fc6d 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 0)
 8000b16:	f7ff fda1 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 1)
 8000b1a:	f7ff fc69 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 1)
 8000b1e:	f7ff fe41 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 2)
 8000b22:	f7ff fc65 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 2)
 8000b26:	f7ff feaf 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 3)
 8000b2a:	f7ff fc61 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 3)
 8000b2e:	f7ff ff4f 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 4)
 8000b32:	f7ff fc5d 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 4)
 8000b36:	f7ff fd91 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 5)
 8000b3a:	f7ff fc59 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 5)
 8000b3e:	f7ff fe31 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 6)
 8000b42:	f7ff fc55 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 6)
 8000b46:	f7ff fe9f 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 7)
 8000b4a:	f7ff fc51 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 7)
 8000b4e:	f7ff ff3f 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 8)
 8000b52:	f7ff fc4d 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 8)
 8000b56:	f7ff fd81 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 9)
 8000b5a:	f7ff fc49 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000b5e:	f7ff ff6f 	bl	8000a40 <double_shiftrows>
    ldr     r14, [sp, #48]          // ---------------------------------------
 8000b62:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
    ldmia   r14!, {r4,r5,r10,r12}   // 
 8000b66:	e8be 1430 	ldmia.w	lr!, {r4, r5, sl, ip}
    eor     r4, r1                  // 
 8000b6a:	ea84 0401 	eor.w	r4, r4, r1
    eor     r5, r3                  // 
 8000b6e:	ea85 0503 	eor.w	r5, r5, r3
    eor     r6, r10                 // 
 8000b72:	ea86 060a 	eor.w	r6, r6, sl
    eor     r7, r12                 //  Last add_round_key
 8000b76:	ea87 070c 	eor.w	r7, r7, ip
    ldmia   r14!, {r1,r3,r10,r12}   // 
 8000b7a:	e8be 140a 	ldmia.w	lr!, {r1, r3, sl, ip}
    eor     r8, r1                  // 
 8000b7e:	ea88 0801 	eor.w	r8, r8, r1
    eor     r9, r0, r3              // 
 8000b82:	ea80 0903 	eor.w	r9, r0, r3
    eor     r10, r2                 // 
 8000b86:	ea8a 0a02 	eor.w	sl, sl, r2
    eor     r11, r12                // ---------------------------------------
 8000b8a:	ea8b 0b0c 	eor.w	fp, fp, ip
    bl      unpacking               // unpack the internal state
 8000b8e:	f7ff fba9 	bl	80002e4 <unpacking>
    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 8000b92:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    add.w   sp, #64                 // restore the stack pointer
 8000b96:	f10d 0d40 	add.w	sp, sp, #64	@ 0x40
    str.w   r4, [r0]                // store the ciphertext
 8000b9a:	f8c0 4000 	str.w	r4, [r0]
    str     r5, [r0, #4]
 8000b9e:	6045      	str	r5, [r0, #4]
    str     r6, [r0, #8]
 8000ba0:	6086      	str	r6, [r0, #8]
    str     r7, [r0, #12]
 8000ba2:	60c7      	str	r7, [r0, #12]
    str.w   r8, [r1]                // store the ciphertext
 8000ba4:	f8c1 8000 	str.w	r8, [r1]
    str     r9, [r1, #4]
 8000ba8:	f8c1 9004 	str.w	r9, [r1, #4]
    str     r10,[r1, #8]
 8000bac:	f8c1 a008 	str.w	sl, [r1, #8]
    str     r11,[r1, #12]
 8000bb0:	f8c1 b00c 	str.w	fp, [r1, #12]
    pop     {r2-r12, r14}           // restore context
 8000bb4:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <two_Rounds_aes128_encrypt_ffs>:
@                   const u8* ptext_bis, const u32* rkey);
.global two_Rounds_aes128_encrypt_ffs
.type   two_Rounds_aes128_encrypt_ffs,%function
.align 2
two_Rounds_aes128_encrypt_ffs:
     push    {r0-r12,r14}
 8000bbc:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8000bc0:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 8000bc4:	f8d2 4000 	ldr.w	r4, [r2]
    ldr     r5, [r2, #4]
 8000bc8:	6855      	ldr	r5, [r2, #4]
    ldr     r6, [r2, #8]
 8000bca:	6896      	ldr	r6, [r2, #8]
    ldr     r7, [r2, #12]
 8000bcc:	68d7      	ldr	r7, [r2, #12]
    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 8000bce:	f8d3 8000 	ldr.w	r8, [r3]
    ldr     r9, [r3, #4]
 8000bd2:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ldr     r10,[r3, #8]
 8000bd6:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ldr     r11,[r3, #12]
 8000bda:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 8000bde:	f8dd 1070 	ldr.w	r1, [sp, #112]	@ 0x70
    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 8000be2:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    bl      packing                 // pack the 2 input blocks
 8000be6:	f7ff fb13 	bl	8000210 <packing>
    bl      ark_sbox                // ark + sbox (round 0)
 8000bea:	f7ff fc01 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 0)
 8000bee:	f7ff fd35 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 1)
 8000bf2:	f7ff fbfd 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 1)
 8000bf6:	f7ff fdd5 	bl	80007a4 <mixcolumns_1>
    bl      ark                // ark + sbox (round 2)
 8000bfa:	f7ff fbdd 	bl	80003b8 <ark>
    ldmia   r14!, {r1,r3,r10,r12}   //
    eor     r8, r1                  //
    eor     r9, r0, r3              //
    eor     r10, r2                 //
    eor     r11, r12                // ---------------------------------------*/
    bl      unpacking               // unpack the internal state
 8000bfe:	f7ff fb71 	bl	80002e4 <unpacking>
    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 8000c02:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    add.w   sp, #64                 // restore the stack pointer
 8000c06:	f10d 0d40 	add.w	sp, sp, #64	@ 0x40
    str.w   r4, [r0]                // store the ciphertext
 8000c0a:	f8c0 4000 	str.w	r4, [r0]
    str     r5, [r0, #4]
 8000c0e:	6045      	str	r5, [r0, #4]
    str     r6, [r0, #8]
 8000c10:	6086      	str	r6, [r0, #8]
    str     r7, [r0, #12]
 8000c12:	60c7      	str	r7, [r0, #12]
    str.w   r8, [r1]                // store the ciphertext
 8000c14:	f8c1 8000 	str.w	r8, [r1]
    str     r9, [r1, #4]
 8000c18:	f8c1 9004 	str.w	r9, [r1, #4]
    str     r10,[r1, #8]
 8000c1c:	f8c1 a008 	str.w	sl, [r1, #8]
    str     r11,[r1, #12]
 8000c20:	f8c1 b00c 	str.w	fp, [r1, #12]
    pop     {r2-r12, r14}           // restore context
 8000c24:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <four_Rounds_aes128_encrypt_ffs>:
@                   const u8* ptext_bis, const u32* rkey);
.global four_Rounds_aes128_encrypt_ffs
.type   four_Rounds_aes128_encrypt_ffs,%function
.align 2
four_Rounds_aes128_encrypt_ffs:
    push    {r0-r12,r14}
 8000c2c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8000c30:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 8000c34:	f8d2 4000 	ldr.w	r4, [r2]
    ldr     r5, [r2, #4]
 8000c38:	6855      	ldr	r5, [r2, #4]
    ldr     r6, [r2, #8]
 8000c3a:	6896      	ldr	r6, [r2, #8]
    ldr     r7, [r2, #12]
 8000c3c:	68d7      	ldr	r7, [r2, #12]
    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 8000c3e:	f8d3 8000 	ldr.w	r8, [r3]
    ldr     r9, [r3, #4]
 8000c42:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ldr     r10,[r3, #8]
 8000c46:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ldr     r11,[r3, #12]
 8000c4a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 8000c4e:	f8dd 1070 	ldr.w	r1, [sp, #112]	@ 0x70
    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 8000c52:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    bl      packing                 // pack the 2 input blocks
 8000c56:	f7ff fadb 	bl	8000210 <packing>
    bl      ark_sbox                // ark + sbox (round 0)
 8000c5a:	f7ff fbc9 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 0)
 8000c5e:	f7ff fcfd 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 1)
 8000c62:	f7ff fbc5 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 1)
 8000c66:	f7ff fd9d 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 2)
 8000c6a:	f7ff fbc1 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 2)
 8000c6e:	f7ff fe0b 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 3)
 8000c72:	f7ff fbbd 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 3)
 8000c76:	f7ff feab 	bl	80009d0 <mixcolumns_3>
    bl      ark                // ark + sbox (round 2)
 8000c7a:	f7ff fb9d 	bl	80003b8 <ark>
    bl      unpacking               // unpack the internal state
 8000c7e:	f7ff fb31 	bl	80002e4 <unpacking>
    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 8000c82:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    add.w   sp, #64                 // restore the stack pointer
 8000c86:	f10d 0d40 	add.w	sp, sp, #64	@ 0x40
    str.w   r4, [r0]                // store the ciphertext
 8000c8a:	f8c0 4000 	str.w	r4, [r0]
    str     r5, [r0, #4]
 8000c8e:	6045      	str	r5, [r0, #4]
    str     r6, [r0, #8]
 8000c90:	6086      	str	r6, [r0, #8]
    str     r7, [r0, #12]
 8000c92:	60c7      	str	r7, [r0, #12]
    str.w   r8, [r1]                // store the ciphertext
 8000c94:	f8c1 8000 	str.w	r8, [r1]
    str     r9, [r1, #4]
 8000c98:	f8c1 9004 	str.w	r9, [r1, #4]
    str     r10,[r1, #8]
 8000c9c:	f8c1 a008 	str.w	sl, [r1, #8]
    str     r11,[r1, #12]
 8000ca0:	f8c1 b00c 	str.w	fp, [r1, #12]
    pop     {r2-r12, r14}           // restore context
 8000ca4:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <six_Rounds_aes128_encrypt_ffs>:
@                   const u8* ptext_bis, const u32* rkey);
.global six_Rounds_aes128_encrypt_ffs
.type   six_Rounds_aes128_encrypt_ffs,%function
.align 2
six_Rounds_aes128_encrypt_ffs:
    push    {r0-r12,r14}
 8000cac:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8000cb0:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 8000cb4:	f8d2 4000 	ldr.w	r4, [r2]
    ldr     r5, [r2, #4]
 8000cb8:	6855      	ldr	r5, [r2, #4]
    ldr     r6, [r2, #8]
 8000cba:	6896      	ldr	r6, [r2, #8]
    ldr     r7, [r2, #12]
 8000cbc:	68d7      	ldr	r7, [r2, #12]
    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 8000cbe:	f8d3 8000 	ldr.w	r8, [r3]
    ldr     r9, [r3, #4]
 8000cc2:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ldr     r10,[r3, #8]
 8000cc6:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ldr     r11,[r3, #12]
 8000cca:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 8000cce:	f8dd 1070 	ldr.w	r1, [sp, #112]	@ 0x70
    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 8000cd2:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    bl      packing                 // pack the 2 input blocks
 8000cd6:	f7ff fa9b 	bl	8000210 <packing>
    bl      ark_sbox                // ark + sbox (round 0)
 8000cda:	f7ff fb89 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 0)
 8000cde:	f7ff fcbd 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 1)
 8000ce2:	f7ff fb85 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 1)
 8000ce6:	f7ff fd5d 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 2)
 8000cea:	f7ff fb81 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 2)
 8000cee:	f7ff fdcb 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 3)
 8000cf2:	f7ff fb7d 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 3)
 8000cf6:	f7ff fe6b 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 4)
 8000cfa:	f7ff fb79 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 4)
 8000cfe:	f7ff fcad 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 5)
 8000d02:	f7ff fb75 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 5)
 8000d06:	f7ff fd4d 	bl	80007a4 <mixcolumns_1>
    bl      ark                		// ark + sbox (round 2)
 8000d0a:	f7ff fb55 	bl	80003b8 <ark>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000d0e:	f7ff fe97 	bl	8000a40 <double_shiftrows>
    bl      unpacking               // unpack the internal state
 8000d12:	f7ff fae7 	bl	80002e4 <unpacking>
    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 8000d16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    add.w   sp, #64                 // restore the stack pointer
 8000d1a:	f10d 0d40 	add.w	sp, sp, #64	@ 0x40
    str.w   r4, [r0]                // store the ciphertext
 8000d1e:	f8c0 4000 	str.w	r4, [r0]
    str     r5, [r0, #4]
 8000d22:	6045      	str	r5, [r0, #4]
    str     r6, [r0, #8]
 8000d24:	6086      	str	r6, [r0, #8]
    str     r7, [r0, #12]
 8000d26:	60c7      	str	r7, [r0, #12]
    str.w   r8, [r1]                // store the ciphertext
 8000d28:	f8c1 8000 	str.w	r8, [r1]
    str     r9, [r1, #4]
 8000d2c:	f8c1 9004 	str.w	r9, [r1, #4]
    str     r10,[r1, #8]
 8000d30:	f8c1 a008 	str.w	sl, [r1, #8]
    str     r11,[r1, #12]
 8000d34:	f8c1 b00c 	str.w	fp, [r1, #12]
    pop     {r2-r12, r14}           // restore context
 8000d38:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <eigth_Rounds_aes128_encrypt_ffs>:
@                   const u8* ptext_bis, const u32* rkey);
.global eigth_Rounds_aes128_encrypt_ffs
.type   eigth_Rounds_aes128_encrypt_ffs,%function
.align 2
eigth_Rounds_aes128_encrypt_ffs:
    push    {r0-r12,r14}
 8000d40:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8000d44:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 8000d48:	f8d2 4000 	ldr.w	r4, [r2]
    ldr     r5, [r2, #4]
 8000d4c:	6855      	ldr	r5, [r2, #4]
    ldr     r6, [r2, #8]
 8000d4e:	6896      	ldr	r6, [r2, #8]
    ldr     r7, [r2, #12]
 8000d50:	68d7      	ldr	r7, [r2, #12]
    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 8000d52:	f8d3 8000 	ldr.w	r8, [r3]
    ldr     r9, [r3, #4]
 8000d56:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ldr     r10,[r3, #8]
 8000d5a:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ldr     r11,[r3, #12]
 8000d5e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 8000d62:	f8dd 1070 	ldr.w	r1, [sp, #112]	@ 0x70
    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 8000d66:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    bl      packing                 // pack the 2 input blocks
 8000d6a:	f7ff fa51 	bl	8000210 <packing>
    bl      ark_sbox                // ark + sbox (round 0)
 8000d6e:	f7ff fb3f 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 0)
 8000d72:	f7ff fc73 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 1)
 8000d76:	f7ff fb3b 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 1)
 8000d7a:	f7ff fd13 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 2)
 8000d7e:	f7ff fb37 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 2)
 8000d82:	f7ff fd81 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 3)
 8000d86:	f7ff fb33 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 3)
 8000d8a:	f7ff fe21 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 4)
 8000d8e:	f7ff fb2f 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 4)
 8000d92:	f7ff fc63 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 5)
 8000d96:	f7ff fb2b 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 5)
 8000d9a:	f7ff fd03 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 6)
 8000d9e:	f7ff fb27 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 6)
 8000da2:	f7ff fd71 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 7)
 8000da6:	f7ff fb23 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 7)
 8000daa:	f7ff fe11 	bl	80009d0 <mixcolumns_3>
    bl      ark                // ark + sbox (round 2)
 8000dae:	f7ff fb03 	bl	80003b8 <ark>
    bl      unpacking               // unpack the internal state
 8000db2:	f7ff fa97 	bl	80002e4 <unpacking>
    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 8000db6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    add.w   sp, #64                 // restore the stack pointer
 8000dba:	f10d 0d40 	add.w	sp, sp, #64	@ 0x40
    str.w   r4, [r0]                // store the ciphertext
 8000dbe:	f8c0 4000 	str.w	r4, [r0]
    str     r5, [r0, #4]
 8000dc2:	6045      	str	r5, [r0, #4]
    str     r6, [r0, #8]
 8000dc4:	6086      	str	r6, [r0, #8]
    str     r7, [r0, #12]
 8000dc6:	60c7      	str	r7, [r0, #12]
    str.w   r8, [r1]                // store the ciphertext
 8000dc8:	f8c1 8000 	str.w	r8, [r1]
    str     r9, [r1, #4]
 8000dcc:	f8c1 9004 	str.w	r9, [r1, #4]
    str     r10,[r1, #8]
 8000dd0:	f8c1 a008 	str.w	sl, [r1, #8]
    str     r11,[r1, #12]
 8000dd4:	f8c1 b00c 	str.w	fp, [r1, #12]
    pop     {r2-r12, r14}           // restore context
 8000dd8:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <aes256_encrypt_ffs>:
@                   const u8* ptext_bis, const u32* rkey);
.global aes256_encrypt_ffs
.type   aes256_encrypt_ffs,%function
.align 2
aes256_encrypt_ffs:
    push    {r0-r12,r14}
 8000de0:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8000de4:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 8000de8:	f8d2 4000 	ldr.w	r4, [r2]
    ldr     r5, [r2, #4]
 8000dec:	6855      	ldr	r5, [r2, #4]
    ldr     r6, [r2, #8]
 8000dee:	6896      	ldr	r6, [r2, #8]
    ldr     r7, [r2, #12]
 8000df0:	68d7      	ldr	r7, [r2, #12]
    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 8000df2:	f8d3 8000 	ldr.w	r8, [r3]
    ldr     r9, [r3, #4]
 8000df6:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ldr     r10,[r3, #8]
 8000dfa:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ldr     r11,[r3, #12]
 8000dfe:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 8000e02:	f8dd 1070 	ldr.w	r1, [sp, #112]	@ 0x70
    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 8000e06:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    bl      packing                 // pack the 2 input blocks
 8000e0a:	f7ff fa01 	bl	8000210 <packing>
    bl      ark_sbox                // ark + sbox (round 0)
 8000e0e:	f7ff faef 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 0)
 8000e12:	f7ff fc23 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 1)
 8000e16:	f7ff faeb 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 1)
 8000e1a:	f7ff fcc3 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 2)
 8000e1e:	f7ff fae7 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 2)
 8000e22:	f7ff fd31 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 3)
 8000e26:	f7ff fae3 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 3)
 8000e2a:	f7ff fdd1 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 4)
 8000e2e:	f7ff fadf 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 4)
 8000e32:	f7ff fc13 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 5)
 8000e36:	f7ff fadb 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 5)
 8000e3a:	f7ff fcb3 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 6)
 8000e3e:	f7ff fad7 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 6)
 8000e42:	f7ff fd21 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 7)
 8000e46:	f7ff fad3 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 7)
 8000e4a:	f7ff fdc1 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 8)
 8000e4e:	f7ff facf 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 8)
 8000e52:	f7ff fc03 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 9)
 8000e56:	f7ff facb 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_1            // mixcolumns (round 9)
 8000e5a:	f7ff fca3 	bl	80007a4 <mixcolumns_1>
    bl      ark_sbox                // ark + sbox (round 10)
 8000e5e:	f7ff fac7 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_2            // mixcolumns (round 10)
 8000e62:	f7ff fd11 	bl	8000888 <mixcolumns_2>
    bl      ark_sbox                // ark + sbox (round 11)
 8000e66:	f7ff fac3 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_3            // mixcolumns (round 11)
 8000e6a:	f7ff fdb1 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 12)
 8000e6e:	f7ff fabf 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 12)
 8000e72:	f7ff fbf3 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 13)
 8000e76:	f7ff fabb 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000e7a:	f7ff fde1 	bl	8000a40 <double_shiftrows>
    ldr     r14, [sp, #48]          // ---------------------------------------
 8000e7e:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
    ldmia   r14!, {r4,r5,r10,r12}   // 
 8000e82:	e8be 1430 	ldmia.w	lr!, {r4, r5, sl, ip}
    eor     r4, r1                  // 
 8000e86:	ea84 0401 	eor.w	r4, r4, r1
    eor     r5, r3                  // 
 8000e8a:	ea85 0503 	eor.w	r5, r5, r3
    eor     r6, r10                 // 
 8000e8e:	ea86 060a 	eor.w	r6, r6, sl
    eor     r7, r12                 //  Last add_round_key
 8000e92:	ea87 070c 	eor.w	r7, r7, ip
    ldmia   r14!, {r1,r3,r10,r12}   // 
 8000e96:	e8be 140a 	ldmia.w	lr!, {r1, r3, sl, ip}
    eor     r8, r1                  // 
 8000e9a:	ea88 0801 	eor.w	r8, r8, r1
    eor     r9, r0, r3              // 
 8000e9e:	ea80 0903 	eor.w	r9, r0, r3
    eor     r10, r2                 // 
 8000ea2:	ea8a 0a02 	eor.w	sl, sl, r2
    eor     r11, r12                // ---------------------------------------
 8000ea6:	ea8b 0b0c 	eor.w	fp, fp, ip
    bl      unpacking               // unpack the internal state
 8000eaa:	f7ff fa1b 	bl	80002e4 <unpacking>
    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 8000eae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    add.w   sp, #64                 // restore the stack pointer
 8000eb2:	f10d 0d40 	add.w	sp, sp, #64	@ 0x40
    str.w   r4, [r0]                // store the ciphertext
 8000eb6:	f8c0 4000 	str.w	r4, [r0]
    str     r5, [r0, #4]
 8000eba:	6045      	str	r5, [r0, #4]
    str     r6, [r0, #8]
 8000ebc:	6086      	str	r6, [r0, #8]
    str     r7, [r0, #12]
 8000ebe:	60c7      	str	r7, [r0, #12]
    str.w   r8, [r1]                // store the ciphertext
 8000ec0:	f8c1 8000 	str.w	r8, [r1]
    str     r9, [r1, #4]
 8000ec4:	f8c1 9004 	str.w	r9, [r1, #4]
    str     r10,[r1, #8]
 8000ec8:	f8c1 a008 	str.w	sl, [r1, #8]
    str     r11,[r1, #12]
 8000ecc:	f8c1 b00c 	str.w	fp, [r1, #12]
    pop     {r2-r12, r14}           // restore context
 8000ed0:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <aes128_encrypt_sfs>:
@                   const u8* ptext_bis, const u32* rkey);
.global aes128_encrypt_sfs
.type   aes128_encrypt_sfs,%function
.align 2
aes128_encrypt_sfs:
    push    {r0-r12,r14}
 8000ed8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8000edc:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 8000ee0:	f8d2 4000 	ldr.w	r4, [r2]
    ldr     r5, [r2, #4]
 8000ee4:	6855      	ldr	r5, [r2, #4]
    ldr     r6, [r2, #8]
 8000ee6:	6896      	ldr	r6, [r2, #8]
    ldr     r7, [r2, #12]
 8000ee8:	68d7      	ldr	r7, [r2, #12]
    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 8000eea:	f8d3 8000 	ldr.w	r8, [r3]
    ldr     r9, [r3, #4]
 8000eee:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ldr     r10,[r3, #8]
 8000ef2:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ldr     r11,[r3, #12]
 8000ef6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 8000efa:	f8dd 1070 	ldr.w	r1, [sp, #112]	@ 0x70
    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 8000efe:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    bl      packing                 // pack the 2 input blocks
 8000f02:	f7ff f985 	bl	8000210 <packing>
    bl      ark_sbox                // ark + sbox (round 0)
 8000f06:	f7ff fa73 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 0)
 8000f0a:	f7ff fba7 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 1)
 8000f0e:	f7ff fa6f 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000f12:	f7ff fd95 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 1)
 8000f16:	f7ff fd5b 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 2)
 8000f1a:	f7ff fa69 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 2)
 8000f1e:	f7ff fb9d 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 3)
 8000f22:	f7ff fa65 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000f26:	f7ff fd8b 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 3)
 8000f2a:	f7ff fd51 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 4)
 8000f2e:	f7ff fa5f 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 4)
 8000f32:	f7ff fb93 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 5)
 8000f36:	f7ff fa5b 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000f3a:	f7ff fd81 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 5)
 8000f3e:	f7ff fd47 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 6)
 8000f42:	f7ff fa55 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 6)
 8000f46:	f7ff fb89 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 7)
 8000f4a:	f7ff fa51 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000f4e:	f7ff fd77 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 7)
 8000f52:	f7ff fd3d 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 8)
 8000f56:	f7ff fa4b 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 8)
 8000f5a:	f7ff fb7f 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 9)
 8000f5e:	f7ff fa47 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000f62:	f7ff fd6d 	bl	8000a40 <double_shiftrows>
    ldr     r14, [sp, #48]          // ---------------------------------------
 8000f66:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
    ldmia   r14!, {r4,r5,r10,r12}   // 
 8000f6a:	e8be 1430 	ldmia.w	lr!, {r4, r5, sl, ip}
    eor     r4, r1                  // 
 8000f6e:	ea84 0401 	eor.w	r4, r4, r1
    eor     r5, r3                  // 
 8000f72:	ea85 0503 	eor.w	r5, r5, r3
    eor     r6, r10                 // 
 8000f76:	ea86 060a 	eor.w	r6, r6, sl
    eor     r7, r12                 //  Last add_round_key
 8000f7a:	ea87 070c 	eor.w	r7, r7, ip
    ldmia   r14!, {r1,r3,r10,r12}   // 
 8000f7e:	e8be 140a 	ldmia.w	lr!, {r1, r3, sl, ip}
    eor     r8, r1                  // 
 8000f82:	ea88 0801 	eor.w	r8, r8, r1
    eor     r9, r0, r3              // 
 8000f86:	ea80 0903 	eor.w	r9, r0, r3
    eor     r10, r2                 // 
 8000f8a:	ea8a 0a02 	eor.w	sl, sl, r2
    eor     r11, r12                // ---------------------------------------
 8000f8e:	ea8b 0b0c 	eor.w	fp, fp, ip
    bl      unpacking               // unpack the internal state
 8000f92:	f7ff f9a7 	bl	80002e4 <unpacking>
    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 8000f96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    add.w   sp, #64                 // restore the stack pointer
 8000f9a:	f10d 0d40 	add.w	sp, sp, #64	@ 0x40
    str.w   r4, [r0]                // store the ciphertext
 8000f9e:	f8c0 4000 	str.w	r4, [r0]
    str     r5, [r0, #4]
 8000fa2:	6045      	str	r5, [r0, #4]
    str     r6, [r0, #8]
 8000fa4:	6086      	str	r6, [r0, #8]
    str     r7, [r0, #12]
 8000fa6:	60c7      	str	r7, [r0, #12]
    str.w   r8, [r1]                // store the ciphertext
 8000fa8:	f8c1 8000 	str.w	r8, [r1]
    str     r9, [r1, #4]
 8000fac:	f8c1 9004 	str.w	r9, [r1, #4]
    str     r10,[r1, #8]
 8000fb0:	f8c1 a008 	str.w	sl, [r1, #8]
    str     r11,[r1, #12]
 8000fb4:	f8c1 b00c 	str.w	fp, [r1, #12]
    pop     {r2-r12, r14}           // restore context
 8000fb8:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <aes256_encrypt_sfs>:
@                   const u8* ptext_bis, const u32* rkey);
.global aes256_encrypt_sfs
.type   aes256_encrypt_sfs,%function
.align 2
aes256_encrypt_sfs:
    push    {r0-r12,r14}
 8000fc0:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8000fc4:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 8000fc8:	f8d2 4000 	ldr.w	r4, [r2]
    ldr     r5, [r2, #4]
 8000fcc:	6855      	ldr	r5, [r2, #4]
    ldr     r6, [r2, #8]
 8000fce:	6896      	ldr	r6, [r2, #8]
    ldr     r7, [r2, #12]
 8000fd0:	68d7      	ldr	r7, [r2, #12]
    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 8000fd2:	f8d3 8000 	ldr.w	r8, [r3]
    ldr     r9, [r3, #4]
 8000fd6:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ldr     r10,[r3, #8]
 8000fda:	f8d3 a008 	ldr.w	sl, [r3, #8]
    ldr     r11,[r3, #12]
 8000fde:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 8000fe2:	f8dd 1070 	ldr.w	r1, [sp, #112]	@ 0x70
    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 8000fe6:	f8cd 1030 	str.w	r1, [sp, #48]	@ 0x30
    bl      packing                 // pack the 2 input blocks
 8000fea:	f7ff f911 	bl	8000210 <packing>
    bl      ark_sbox                // ark + sbox (round 0)
 8000fee:	f7ff f9ff 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 0)
 8000ff2:	f7ff fb33 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 1)
 8000ff6:	f7ff f9fb 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8000ffa:	f7ff fd21 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 1)
 8000ffe:	f7ff fce7 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 2)
 8001002:	f7ff f9f5 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 2)
 8001006:	f7ff fb29 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 3)
 800100a:	f7ff f9f1 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 800100e:	f7ff fd17 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 3)
 8001012:	f7ff fcdd 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 4)
 8001016:	f7ff f9eb 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 4)
 800101a:	f7ff fb1f 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 5)
 800101e:	f7ff f9e7 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8001022:	f7ff fd0d 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 5)
 8001026:	f7ff fcd3 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 6)
 800102a:	f7ff f9e1 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 6)
 800102e:	f7ff fb15 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 7)
 8001032:	f7ff f9dd 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8001036:	f7ff fd03 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 7)
 800103a:	f7ff fcc9 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 8)
 800103e:	f7ff f9d7 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 8)
 8001042:	f7ff fb0b 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 9)
 8001046:	f7ff f9d3 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 800104a:	f7ff fcf9 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 9)
 800104e:	f7ff fcbf 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 10)
 8001052:	f7ff f9cd 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 10)
 8001056:	f7ff fb01 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 11)
 800105a:	f7ff f9c9 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 800105e:	f7ff fcef 	bl	8000a40 <double_shiftrows>
    bl      mixcolumns_3            // mixcolumns (round 11)
 8001062:	f7ff fcb5 	bl	80009d0 <mixcolumns_3>
    bl      ark_sbox                // ark + sbox (round 12)
 8001066:	f7ff f9c3 	bl	80003f0 <ark_sbox>
    bl      mixcolumns_0            // mixcolumns (round 12)
 800106a:	f7ff faf7 	bl	800065c <mixcolumns_0>
    bl      ark_sbox                // ark + sbox (round 13)
 800106e:	f7ff f9bf 	bl	80003f0 <ark_sbox>
    bl      double_shiftrows        // to resynchronize with the classical rep
 8001072:	f7ff fce5 	bl	8000a40 <double_shiftrows>
    ldr     r14, [sp, #48]          // ---------------------------------------
 8001076:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
    ldmia   r14!, {r4,r5,r10,r12}   // 
 800107a:	e8be 1430 	ldmia.w	lr!, {r4, r5, sl, ip}
    eor     r4, r1                  // 
 800107e:	ea84 0401 	eor.w	r4, r4, r1
    eor     r5, r3                  // 
 8001082:	ea85 0503 	eor.w	r5, r5, r3
    eor     r6, r10                 // 
 8001086:	ea86 060a 	eor.w	r6, r6, sl
    eor     r7, r12                 //  Last add_round_key
 800108a:	ea87 070c 	eor.w	r7, r7, ip
    ldmia   r14!, {r1,r3,r10,r12}   // 
 800108e:	e8be 140a 	ldmia.w	lr!, {r1, r3, sl, ip}
    eor     r8, r1                  // 
 8001092:	ea88 0801 	eor.w	r8, r8, r1
    eor     r9, r0, r3              // 
 8001096:	ea80 0903 	eor.w	r9, r0, r3
    eor     r10, r2                 // 
 800109a:	ea8a 0a02 	eor.w	sl, sl, r2
    eor     r11, r12                // ---------------------------------------
 800109e:	ea8b 0b0c 	eor.w	fp, fp, ip
    bl      unpacking               // unpack the internal state
 80010a2:	f7ff f91f 	bl	80002e4 <unpacking>
    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 80010a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    add.w   sp, #64                 // restore the stack pointer
 80010aa:	f10d 0d40 	add.w	sp, sp, #64	@ 0x40
    str.w   r4, [r0]                // store the ciphertext
 80010ae:	f8c0 4000 	str.w	r4, [r0]
    str     r5, [r0, #4]
 80010b2:	6045      	str	r5, [r0, #4]
    str     r6, [r0, #8]
 80010b4:	6086      	str	r6, [r0, #8]
    str     r7, [r0, #12]
 80010b6:	60c7      	str	r7, [r0, #12]
    str.w   r8, [r1]                // store the ciphertext
 80010b8:	f8c1 8000 	str.w	r8, [r1]
    str     r9, [r1, #4]
 80010bc:	f8c1 9004 	str.w	r9, [r1, #4]
    str     r10,[r1, #8]
 80010c0:	f8c1 a008 	str.w	sl, [r1, #8]
    str     r11,[r1, #12]
 80010c4:	f8c1 b00c 	str.w	fp, [r1, #12]
    pop     {r2-r12, r14}           // restore context
 80010c8:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <packing>:
* Packing routine. Note that it is the same as the one used in the encryption
* function so some code size could be saved by merging the two files.
******************************************************************************/
.align 2
packing:
    movw    r3, #0x0f0f
 80010d0:	f640 730f 	movw	r3, #3855	@ 0xf0f
    movt    r3, #0x0f0f             // r3 <- 0x0f0f0f0f (mask for SWAPMOVE)
 80010d4:	f6c0 730f 	movt	r3, #3855	@ 0xf0f
    eor     r2, r3, r3, lsl #2      // r2 <- 0x33333333 (mask for SWAPMOVE)
 80010d8:	ea83 0283 	eor.w	r2, r3, r3, lsl #2
    eor     r1, r2, r2, lsl #1      // r1 <- 0x55555555 (mask for SWAPMOVE)
 80010dc:	ea82 0142 	eor.w	r1, r2, r2, lsl #1
    swpmv   r8, r4, r8, r4, r1, #1, r12
 80010e0:	ea84 0c58 	eor.w	ip, r4, r8, lsr #1
 80010e4:	ea0c 0c01 	and.w	ip, ip, r1
 80010e8:	ea84 040c 	eor.w	r4, r4, ip
 80010ec:	ea88 084c 	eor.w	r8, r8, ip, lsl #1
    swpmv   r9, r5, r9, r5, r1, #1, r12
 80010f0:	ea85 0c59 	eor.w	ip, r5, r9, lsr #1
 80010f4:	ea0c 0c01 	and.w	ip, ip, r1
 80010f8:	ea85 050c 	eor.w	r5, r5, ip
 80010fc:	ea89 094c 	eor.w	r9, r9, ip, lsl #1
    swpmv   r10, r6, r10, r6, r1, #1, r12
 8001100:	ea86 0c5a 	eor.w	ip, r6, sl, lsr #1
 8001104:	ea0c 0c01 	and.w	ip, ip, r1
 8001108:	ea86 060c 	eor.w	r6, r6, ip
 800110c:	ea8a 0a4c 	eor.w	sl, sl, ip, lsl #1
    swpmv   r11, r7, r11, r7, r1, #1, r12
 8001110:	ea87 0c5b 	eor.w	ip, r7, fp, lsr #1
 8001114:	ea0c 0c01 	and.w	ip, ip, r1
 8001118:	ea87 070c 	eor.w	r7, r7, ip
 800111c:	ea8b 0b4c 	eor.w	fp, fp, ip, lsl #1
    swpmv   r0, r4, r5, r4, r2, #2, r12
 8001120:	ea84 0c95 	eor.w	ip, r4, r5, lsr #2
 8001124:	ea0c 0c02 	and.w	ip, ip, r2
 8001128:	ea84 040c 	eor.w	r4, r4, ip
 800112c:	ea85 008c 	eor.w	r0, r5, ip, lsl #2
    swpmv   r9, r5, r9, r8, r2, #2, r12
 8001130:	ea88 0c99 	eor.w	ip, r8, r9, lsr #2
 8001134:	ea0c 0c02 	and.w	ip, ip, r2
 8001138:	ea88 050c 	eor.w	r5, r8, ip
 800113c:	ea89 098c 	eor.w	r9, r9, ip, lsl #2
    swpmv   r7, r8, r7, r6, r2, #2, r12
 8001140:	ea86 0c97 	eor.w	ip, r6, r7, lsr #2
 8001144:	ea0c 0c02 	and.w	ip, ip, r2
 8001148:	ea86 080c 	eor.w	r8, r6, ip
 800114c:	ea87 078c 	eor.w	r7, r7, ip, lsl #2
    swpmv   r11, r2, r11, r10, r2, #2, r12
 8001150:	ea8a 0c9b 	eor.w	ip, sl, fp, lsr #2
 8001154:	ea0c 0c02 	and.w	ip, ip, r2
 8001158:	ea8a 020c 	eor.w	r2, sl, ip
 800115c:	ea8b 0b8c 	eor.w	fp, fp, ip, lsl #2
    swpmv   r8, r4, r8, r4, r3, #4, r12
 8001160:	ea84 1c18 	eor.w	ip, r4, r8, lsr #4
 8001164:	ea0c 0c03 	and.w	ip, ip, r3
 8001168:	ea84 040c 	eor.w	r4, r4, ip
 800116c:	ea88 180c 	eor.w	r8, r8, ip, lsl #4
    swpmv   r10, r6, r7, r0, r3, #4, r12
 8001170:	ea80 1c17 	eor.w	ip, r0, r7, lsr #4
 8001174:	ea0c 0c03 	and.w	ip, ip, r3
 8001178:	ea80 060c 	eor.w	r6, r0, ip
 800117c:	ea87 1a0c 	eor.w	sl, r7, ip, lsl #4
    swpmv   r11, r7, r11, r9, r3, #4, r12
 8001180:	ea89 1c1b 	eor.w	ip, r9, fp, lsr #4
 8001184:	ea0c 0c03 	and.w	ip, ip, r3
 8001188:	ea89 070c 	eor.w	r7, r9, ip
 800118c:	ea8b 1b0c 	eor.w	fp, fp, ip, lsl #4
    swpmv   r9, r5, r2, r5, r3, #4, r12
 8001190:	ea85 1c12 	eor.w	ip, r5, r2, lsr #4
 8001194:	ea0c 0c03 	and.w	ip, ip, r3
 8001198:	ea85 050c 	eor.w	r5, r5, ip
 800119c:	ea82 190c 	eor.w	r9, r2, ip, lsl #4
    bx      lr
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop

080011a4 <sbox>:
* encryption function, so some code size could be saved by merging the 2 files.
* Credits to https://github.com/Ko-/aes-armcortexm.
******************************************************************************/
.align 2
sbox:
    str     r14, [sp, #52]
 80011a4:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
    eor     r1, r7, r9              //Exec y14 = U3 ^ U5; into r1
 80011a8:	ea87 0109 	eor.w	r1, r7, r9
    eor     r3, r4, r10             //Exec y13 = U0 ^ U6; into r3
 80011ac:	ea84 030a 	eor.w	r3, r4, sl
    eor     r2, r3, r1              //Exec y12 = y13 ^ y14; into r2
 80011b0:	ea83 0201 	eor.w	r2, r3, r1
    eor     r0, r8, r2              //Exec t1 = U4 ^ y12; into r0
 80011b4:	ea88 0002 	eor.w	r0, r8, r2
    eor     r14, r0, r9             //Exec y15 = t1 ^ U5; into r14
 80011b8:	ea80 0e09 	eor.w	lr, r0, r9
    and     r12, r2, r14            //Exec t2 = y12 & y15; into r12
 80011bc:	ea02 0c0e 	and.w	ip, r2, lr
    eor     r8, r14, r11            //Exec y6 = y15 ^ U7; into r8
 80011c0:	ea8e 080b 	eor.w	r8, lr, fp
    eor     r0, r0, r5              //Exec y20 = t1 ^ U1; into r0
 80011c4:	ea80 0005 	eor.w	r0, r0, r5
    str.w   r2, [sp, #44]           //Store r2/y12 on stack
 80011c8:	f8cd 202c 	str.w	r2, [sp, #44]	@ 0x2c
    eor     r2, r4, r7              //Exec y9 = U0 ^ U3; into r2
 80011cc:	ea84 0207 	eor.w	r2, r4, r7
    str     r0, [sp, #40]           //Store r0/y20 on stack
 80011d0:	900a      	str	r0, [sp, #40]	@ 0x28
    eor     r0, r0, r2              //Exec y11 = y20 ^ y9; into r0
 80011d2:	ea80 0002 	eor.w	r0, r0, r2
    str     r2, [sp, #36]           //Store r2/y9 on stack
 80011d6:	9209      	str	r2, [sp, #36]	@ 0x24
    and     r2, r2, r0              //Exec t12 = y9 & y11; into r2
 80011d8:	ea02 0200 	and.w	r2, r2, r0
    str     r8, [sp, #32]           //Store r8/y6 on stack
 80011dc:	f8cd 8020 	str.w	r8, [sp, #32]
    eor     r8, r11, r0             //Exec y7 = U7 ^ y11; into r8
 80011e0:	ea8b 0800 	eor.w	r8, fp, r0
    eor     r9, r4, r9              //Exec y8 = U0 ^ U5; into r9
 80011e4:	ea84 0909 	eor.w	r9, r4, r9
    eor     r6, r5, r6              //Exec t0 = U1 ^ U2; into r6
 80011e8:	ea85 0606 	eor.w	r6, r5, r6
    eor     r5, r14, r6             //Exec y10 = y15 ^ t0; into r5
 80011ec:	ea8e 0506 	eor.w	r5, lr, r6
    str     r14, [sp, #28]          //Store r14/y15 on stack
 80011f0:	f8cd e01c 	str.w	lr, [sp, #28]
    eor     r14, r5, r0             //Exec y17 = y10 ^ y11; into r14
 80011f4:	ea85 0e00 	eor.w	lr, r5, r0
    str.w   r1, [sp, #24]           //Store r1/y14 on stack
 80011f8:	f8cd 1018 	str.w	r1, [sp, #24]
    and     r1, r1, r14             //Exec t13 = y14 & y17; into r1
 80011fc:	ea01 010e 	and.w	r1, r1, lr
    eor     r1, r1, r2              //Exec t14 = t13 ^ t12; into r1
 8001200:	ea81 0102 	eor.w	r1, r1, r2
    str     r14, [sp, #20]          //Store r14/y17 on stack
 8001204:	f8cd e014 	str.w	lr, [sp, #20]
    eor     r14, r5, r9             //Exec y19 = y10 ^ y8; into r14
 8001208:	ea85 0e09 	eor.w	lr, r5, r9
    str.w   r5, [sp, #16]           //Store r5/y10 on stack
 800120c:	f8cd 5010 	str.w	r5, [sp, #16]
    and     r5, r9, r5              //Exec t15 = y8 & y10; into r5
 8001210:	ea09 0505 	and.w	r5, r9, r5
    eor     r2, r5, r2              //Exec t16 = t15 ^ t12; into r2
 8001214:	ea85 0202 	eor.w	r2, r5, r2
    eor     r5, r6, r0              //Exec y16 = t0 ^ y11; into r5
 8001218:	ea86 0500 	eor.w	r5, r6, r0
    str.w   r0, [sp, #12]           //Store r0/y11 on stack
 800121c:	f8cd 000c 	str.w	r0, [sp, #12]
    eor     r0, r3, r5              //Exec y21 = y13 ^ y16; into r0
 8001220:	ea83 0005 	eor.w	r0, r3, r5
    str     r3, [sp, #8]            //Store r3/y13 on stack
 8001224:	9302      	str	r3, [sp, #8]
    and     r3, r3, r5              //Exec t7 = y13 & y16; into r3
 8001226:	ea03 0305 	and.w	r3, r3, r5
    str     r5, [sp, #4]            //Store r5/y16 on stack
 800122a:	9501      	str	r5, [sp, #4]
    str     r11, [sp, #0]           //Store r11/U7 on stack
 800122c:	f8cd b000 	str.w	fp, [sp]
    eor     r5, r4, r5              //Exec y18 = U0 ^ y16; into r5
 8001230:	ea84 0505 	eor.w	r5, r4, r5
    eor     r6, r6, r11             //Exec y1 = t0 ^ U7; into r6
 8001234:	ea86 060b 	eor.w	r6, r6, fp
    eor     r7, r6, r7              //Exec y4 = y1 ^ U3; into r7
 8001238:	ea86 0707 	eor.w	r7, r6, r7
    and     r11, r7, r11            //Exec t5 = y4 & U7; into r11
 800123c:	ea07 0b0b 	and.w	fp, r7, fp
    eor     r11, r11, r12           //Exec t6 = t5 ^ t2; into r11
 8001240:	ea8b 0b0c 	eor.w	fp, fp, ip
    eor     r11, r11, r2            //Exec t18 = t6 ^ t16; into r11
 8001244:	ea8b 0b02 	eor.w	fp, fp, r2
    eor     r14, r11, r14           //Exec t22 = t18 ^ y19; into r14
 8001248:	ea8b 0e0e 	eor.w	lr, fp, lr
    eor     r4, r6, r4              //Exec y2 = y1 ^ U0; into r4
 800124c:	ea86 0404 	eor.w	r4, r6, r4
    and     r11, r4, r8             //Exec t10 = y2 & y7; into r11
 8001250:	ea04 0b08 	and.w	fp, r4, r8
    eor     r11, r11, r3            //Exec t11 = t10 ^ t7; into r11
 8001254:	ea8b 0b03 	eor.w	fp, fp, r3
    eor     r2, r11, r2             //Exec t20 = t11 ^ t16; into r2
 8001258:	ea8b 0202 	eor.w	r2, fp, r2
    eor     r2, r2, r5              //Exec t24 = t20 ^ y18; into r2
 800125c:	ea82 0205 	eor.w	r2, r2, r5
    eor     r10, r6, r10            //Exec y5 = y1 ^ U6; into r10
 8001260:	ea86 0a0a 	eor.w	sl, r6, sl
    and     r11, r10, r6            //Exec t8 = y5 & y1; into r11
 8001264:	ea0a 0b06 	and.w	fp, sl, r6
    eor     r3, r11, r3             //Exec t9 = t8 ^ t7; into r3
 8001268:	ea8b 0303 	eor.w	r3, fp, r3
    eor     r3, r3, r1              //Exec t19 = t9 ^ t14; into r3
 800126c:	ea83 0301 	eor.w	r3, r3, r1
    eor     r3, r3, r0              //Exec t23 = t19 ^ y21; into r3
 8001270:	ea83 0300 	eor.w	r3, r3, r0
    eor     r0, r10, r9             //Exec y3 = y5 ^ y8; into r0
 8001274:	ea8a 0009 	eor.w	r0, sl, r9
    ldr     r11, [sp, #32]          //Load y6 into r11
 8001278:	f8dd b020 	ldr.w	fp, [sp, #32]
    and     r5, r0, r11             //Exec t3 = y3 & y6; into r5
 800127c:	ea00 050b 	and.w	r5, r0, fp
    eor     r12, r5, r12            //Exec t4 = t3 ^ t2; into r12
 8001280:	ea85 0c0c 	eor.w	ip, r5, ip
    ldr     r5, [sp, #40]           //Load y20 into r5
 8001284:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
    str     r7, [sp, #32]           //Store r7/y4 on stack
 8001286:	9708      	str	r7, [sp, #32]
    eor     r12, r12, r5            //Exec t17 = t4 ^ y20; into r12
 8001288:	ea8c 0c05 	eor.w	ip, ip, r5
    eor     r1, r12, r1             //Exec t21 = t17 ^ t14; into r1
 800128c:	ea8c 0101 	eor.w	r1, ip, r1
    and     r12, r1, r3             //Exec t26 = t21 & t23; into r12
 8001290:	ea01 0c03 	and.w	ip, r1, r3
    eor     r5, r2, r12             //Exec t27 = t24 ^ t26; into r5
 8001294:	ea82 050c 	eor.w	r5, r2, ip
    eor     r12, r14, r12           //Exec t31 = t22 ^ t26; into r12
 8001298:	ea8e 0c0c 	eor.w	ip, lr, ip
    eor     r1, r1, r14             //Exec t25 = t21 ^ t22; into r1
 800129c:	ea81 010e 	eor.w	r1, r1, lr
    and     r7, r1, r5              //Exec t28 = t25 & t27; into r7
 80012a0:	ea01 0705 	and.w	r7, r1, r5
    eor     r14, r7, r14            //Exec t29 = t28 ^ t22; into r14
 80012a4:	ea87 0e0e 	eor.w	lr, r7, lr
    and     r4, r14, r4             //Exec z14 = t29 & y2; into r4
 80012a8:	ea0e 0404 	and.w	r4, lr, r4
    and     r8, r14, r8             //Exec z5 = t29 & y7; into r8
 80012ac:	ea0e 0808 	and.w	r8, lr, r8
    eor     r7, r3, r2              //Exec t30 = t23 ^ t24; into r7
 80012b0:	ea83 0702 	eor.w	r7, r3, r2
    and     r12, r12, r7            //Exec t32 = t31 & t30; into r12
 80012b4:	ea0c 0c07 	and.w	ip, ip, r7
    eor     r12, r12, r2            //Exec t33 = t32 ^ t24; into r12
 80012b8:	ea8c 0c02 	eor.w	ip, ip, r2
    eor     r7, r5, r12             //Exec t35 = t27 ^ t33; into r7
 80012bc:	ea85 070c 	eor.w	r7, r5, ip
    and     r2, r2, r7              //Exec t36 = t24 & t35; into r2
 80012c0:	ea02 0207 	and.w	r2, r2, r7
    eor     r5, r5, r2              //Exec t38 = t27 ^ t36; into r5
 80012c4:	ea85 0502 	eor.w	r5, r5, r2
    and     r5, r14, r5             //Exec t39 = t29 & t38; into r5
 80012c8:	ea0e 0505 	and.w	r5, lr, r5
    eor     r1, r1, r5              //Exec t40 = t25 ^ t39; into r1
 80012cc:	ea81 0105 	eor.w	r1, r1, r5
    eor     r5, r14, r1             //Exec t43 = t29 ^ t40; into r5
 80012d0:	ea8e 0501 	eor.w	r5, lr, r1
    ldr.w   r7, [sp, #4]            //Load y16 into r7
 80012d4:	f8dd 7004 	ldr.w	r7, [sp, #4]
    and     r7, r5, r7              //Exec z3 = t43 & y16; into r7
 80012d8:	ea05 0707 	and.w	r7, r5, r7
    eor     r8, r7, r8              //Exec tc12 = z3 ^ z5; into r8
 80012dc:	ea87 0808 	eor.w	r8, r7, r8
    str     r8, [sp, #40]           //Store r8/tc12 on stack
 80012e0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
    ldr     r8, [sp, #8]            //Load y13 into r8
 80012e4:	f8dd 8008 	ldr.w	r8, [sp, #8]
    and     r8, r5, r8              //Exec z12 = t43 & y13; into r8
 80012e8:	ea05 0808 	and.w	r8, r5, r8
    and     r10, r1, r10            //Exec z13 = t40 & y5; into r10
 80012ec:	ea01 0a0a 	and.w	sl, r1, sl
    and     r6, r1, r6              //Exec z4 = t40 & y1; into r6
 80012f0:	ea01 0606 	and.w	r6, r1, r6
    eor     r6, r7, r6              //Exec tc6 = z3 ^ z4; into r6
 80012f4:	ea87 0606 	eor.w	r6, r7, r6
    eor     r3, r3, r12             //Exec t34 = t23 ^ t33; into r3
 80012f8:	ea83 030c 	eor.w	r3, r3, ip
    eor     r3, r2, r3              //Exec t37 = t36 ^ t34; into r3
 80012fc:	ea82 0303 	eor.w	r3, r2, r3
    eor     r1, r1, r3              //Exec t41 = t40 ^ t37; into r1
 8001300:	ea81 0103 	eor.w	r1, r1, r3
    ldr.w   r5, [sp, #16]           //Load y10 into r5
 8001304:	f8dd 5010 	ldr.w	r5, [sp, #16]
    and     r2, r1, r5              //Exec z8 = t41 & y10; into r2
 8001308:	ea01 0205 	and.w	r2, r1, r5
    and     r9, r1, r9              //Exec z17 = t41 & y8; into r9
 800130c:	ea01 0909 	and.w	r9, r1, r9
    str     r9, [sp, #16]           //Store r9/z17 on stack
 8001310:	f8cd 9010 	str.w	r9, [sp, #16]
    eor     r5, r12, r3             //Exec t44 = t33 ^ t37; into r5
 8001314:	ea8c 0503 	eor.w	r5, ip, r3
    ldr     r9, [sp, #28]           //Load y15 into r9
 8001318:	f8dd 901c 	ldr.w	r9, [sp, #28]
    ldr.w   r7, [sp, #44]           //Load y12 into r7
 800131c:	f8dd 702c 	ldr.w	r7, [sp, #44]	@ 0x2c
    and     r9, r5, r9              //Exec z0 = t44 & y15; into r9
 8001320:	ea05 0909 	and.w	r9, r5, r9
    and     r7, r5, r7              //Exec z9 = t44 & y12; into r7
 8001324:	ea05 0707 	and.w	r7, r5, r7
    and     r0, r3, r0              //Exec z10 = t37 & y3; into r0
 8001328:	ea03 0000 	and.w	r0, r3, r0
    and     r3, r3, r11             //Exec z1 = t37 & y6; into r3
 800132c:	ea03 030b 	and.w	r3, r3, fp
    eor     r3, r3, r9              //Exec tc5 = z1 ^ z0; into r3
 8001330:	ea83 0309 	eor.w	r3, r3, r9
    eor     r3, r6, r3              //Exec tc11 = tc6 ^ tc5; into r3
 8001334:	ea86 0303 	eor.w	r3, r6, r3
    ldr     r11, [sp, #32]          //Load y4 into r11
 8001338:	f8dd b020 	ldr.w	fp, [sp, #32]
    ldr.w   r5, [sp, #20]           //Load y17 into r5
 800133c:	f8dd 5014 	ldr.w	r5, [sp, #20]
    and     r11, r12, r11           //Exec z11 = t33 & y4; into r11
 8001340:	ea0c 0b0b 	and.w	fp, ip, fp
    eor     r14, r14, r12           //Exec t42 = t29 ^ t33; into r14
 8001344:	ea8e 0e0c 	eor.w	lr, lr, ip
    eor     r1, r14, r1             //Exec t45 = t42 ^ t41; into r1
 8001348:	ea8e 0101 	eor.w	r1, lr, r1
    and     r5, r1, r5              //Exec z7 = t45 & y17; into r5
 800134c:	ea01 0505 	and.w	r5, r1, r5
    eor     r6, r5, r6              //Exec tc8 = z7 ^ tc6; into r6
 8001350:	ea85 0606 	eor.w	r6, r5, r6
    ldr     r5, [sp, #24]           //Load y14 into r5
 8001354:	9d06      	ldr	r5, [sp, #24]
    str     r4, [sp, #32]           //Store r4/z14 on stack
 8001356:	9408      	str	r4, [sp, #32]
    and     r1, r1, r5              //Exec z16 = t45 & y14; into r1
 8001358:	ea01 0105 	and.w	r1, r1, r5
    ldr     r5, [sp, #12]           //Load y11 into r5
 800135c:	9d03      	ldr	r5, [sp, #12]
    ldr     r4, [sp, #36]           //Load y9 into r4
 800135e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
    and     r5, r14, r5             //Exec z6 = t42 & y11; into r5
 8001360:	ea0e 0505 	and.w	r5, lr, r5
    eor     r5, r5, r6              //Exec tc16 = z6 ^ tc8; into r5
 8001364:	ea85 0506 	eor.w	r5, r5, r6
    and     r4, r14, r4             //Exec z15 = t42 & y9; into r4
 8001368:	ea0e 0404 	and.w	r4, lr, r4
    eor     r14, r4, r5             //Exec tc20 = z15 ^ tc16; into r14
 800136c:	ea84 0e05 	eor.w	lr, r4, r5
    eor     r4, r4, r1              //Exec tc1 = z15 ^ z16; into r4
 8001370:	ea84 0401 	eor.w	r4, r4, r1
    eor     r1, r0, r4              //Exec tc2 = z10 ^ tc1; into r1
 8001374:	ea80 0104 	eor.w	r1, r0, r4
    eor     r0, r1, r11             //Exec tc21 = tc2 ^ z11; into r0
 8001378:	ea81 000b 	eor.w	r0, r1, fp
    eor     r7, r7, r1              //Exec tc3 = z9 ^ tc2; into r7
 800137c:	ea87 0701 	eor.w	r7, r7, r1
    eor     r1, r7, r5              //Exec S0 = tc3 ^ tc16; into r1
 8001380:	ea87 0105 	eor.w	r1, r7, r5
    eor     r7, r7, r3              //Exec S3 = tc3 ^ tc11; into r7
 8001384:	ea87 0703 	eor.w	r7, r7, r3
    eor     r3, r7, r5              //Exec S1 = S3 ^ tc16 ^ 1; into r3
 8001388:	ea87 0305 	eor.w	r3, r7, r5
    eor     r11, r10, r4            //Exec tc13 = z13 ^ tc1; into r11
 800138c:	ea8a 0b04 	eor.w	fp, sl, r4
    ldr.w   r4, [sp, #0]            //Load U7 into r4
 8001390:	f8dd 4000 	ldr.w	r4, [sp]
    and     r12, r12, r4            //Exec z2 = t33 & U7; into r12
 8001394:	ea0c 0c04 	and.w	ip, ip, r4
    eor     r9, r9, r12             //Exec tc4 = z0 ^ z2; into r9
 8001398:	ea89 090c 	eor.w	r9, r9, ip
    eor     r12, r8, r9             //Exec tc7 = z12 ^ tc4; into r12
 800139c:	ea88 0c09 	eor.w	ip, r8, r9
    eor     r2, r2, r12             //Exec tc9 = z8 ^ tc7; into r2
 80013a0:	ea82 020c 	eor.w	r2, r2, ip
    eor     r2, r6, r2              //Exec tc10 = tc8 ^ tc9; into r2
 80013a4:	ea86 0202 	eor.w	r2, r6, r2
    ldr.w   r4, [sp, #32]           //Load z14 into r4
 80013a8:	f8dd 4020 	ldr.w	r4, [sp, #32]
    eor     r12, r4, r2             //Exec tc17 = z14 ^ tc10; into r12
 80013ac:	ea84 0c02 	eor.w	ip, r4, r2
    eor     r0, r0, r12             //Exec S5 = tc21 ^ tc17; into r0
 80013b0:	ea80 000c 	eor.w	r0, r0, ip
    eor     r6, r12, r14            //Exec tc26 = tc17 ^ tc20; into r6
 80013b4:	ea8c 060e 	eor.w	r6, ip, lr
    ldr.w   r4, [sp, #16]           //Load z17 into r4
 80013b8:	f8dd 4010 	ldr.w	r4, [sp, #16]
    ldr     r12, [sp, #40]          //Load tc12 into r12
 80013bc:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
    eor     r6, r6, r4              //Exec S2 = tc26 ^ z17 ^ 1; into r6
 80013c0:	ea86 0604 	eor.w	r6, r6, r4
    eor     r12, r9, r12            //Exec tc14 = tc4 ^ tc12; into r12
 80013c4:	ea89 0c0c 	eor.w	ip, r9, ip
    eor     r14, r11, r12           //Exec tc18 = tc13 ^ tc14; into r14
 80013c8:	ea8b 0e0c 	eor.w	lr, fp, ip
    eor     r2, r2, r14             //Exec S6 = tc10 ^ tc18 ^ 1; into r2
 80013cc:	ea82 020e 	eor.w	r2, r2, lr
    eor     r11, r8, r14            //Exec S7 = z12 ^ tc18 ^ 1; into r11
 80013d0:	ea88 0b0e 	eor.w	fp, r8, lr
    ldr     r14, [sp, #52]          // restore link register
 80013d4:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
    eor     r8, r12, r7             //Exec S4 = tc14 ^ S3; into r8
 80013d8:	ea8c 0807 	eor.w	r8, ip, r7
    bx      lr
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop

080013e0 <aes128_xorcolumns_rotword>:
* Note that the code size could be reduced at the cost of some instructions
* since some redundant code is applied on different registers.
******************************************************************************/
.align 2
aes128_xorcolumns_rotword:
    ldr     r12, [sp, #56]          // restore 'rkeys' address
 80013e0:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
    ldr.w   r5, [r12, #28]          // load rkey word of rkey from prev round
 80013e4:	f8dc 501c 	ldr.w	r5, [ip, #28]
    movw    r4, #0xc0c0
 80013e8:	f24c 04c0 	movw	r4, #49344	@ 0xc0c0
    movt    r4, #0xc0c0             // r4 <- 0xc0c0c0c0
 80013ec:	f2cc 04c0 	movt	r4, #49344	@ 0xc0c0
    eor     r11, r5, r11, ror #2    // r11<- r5 ^ (r11 >>> 2)
 80013f0:	ea85 0bbb 	eor.w	fp, r5, fp, ror #2
    bic     r11, r4, r11            // r11<- ~r11 & 0xc0c0c0c0 (NOT omitted in sbox)
 80013f4:	ea24 0b0b 	bic.w	fp, r4, fp
    eor     r9, r5, r11, ror #2     // r9 <- r5 ^ (r11 >>> 2)
 80013f8:	ea85 09bb 	eor.w	r9, r5, fp, ror #2
    and     r9, r9, r4, ror #2      // r9 <- r9 & 0x30303030
 80013fc:	ea09 09b4 	and.w	r9, r9, r4, ror #2
    orr     r11, r11, r9            // r11<- r11 | r9
 8001400:	ea4b 0b09 	orr.w	fp, fp, r9
    eor     r9, r5, r11, ror #2     // r9 <- r5 ^ (r11 >>> 2)
 8001404:	ea85 09bb 	eor.w	r9, r5, fp, ror #2
    and     r9, r9, r4, ror #4      // r9 <- r9 & 0x0c0c0c0c
 8001408:	ea09 1934 	and.w	r9, r9, r4, ror #4
    orr     r11, r11, r9            // r11<- r11 | r9
 800140c:	ea4b 0b09 	orr.w	fp, fp, r9
    eor     r9, r5, r11, ror #2     // r9 <- r5 ^ (r11 >>> 2)
 8001410:	ea85 09bb 	eor.w	r9, r5, fp, ror #2
    and     r9, r9, r4, ror #6      // r9 <- r9 & 0x03030303
 8001414:	ea09 19b4 	and.w	r9, r9, r4, ror #6
    orr     r11, r11, r9            // r11<- r11 | r9
 8001418:	ea4b 0b09 	orr.w	fp, fp, r9
    mvn     r9, r5                  // NOT omitted in sbox
 800141c:	ea6f 0905 	mvn.w	r9, r5
    ldr.w   r5, [r12, #24]          // load rkey word of rkey from prev round
 8001420:	f8dc 5018 	ldr.w	r5, [ip, #24]
    str     r9, [r12, #28]          // store new rkey word after NOT
 8001424:	f8cc 901c 	str.w	r9, [ip, #28]
    str     r11, [r12, #60]         // store new rkey word in 'rkeys'
 8001428:	f8cc b03c 	str.w	fp, [ip, #60]	@ 0x3c
    eor     r10, r5, r2, ror #2     // r10<- r5 ^ (r2 >>> 2)
 800142c:	ea85 0ab2 	eor.w	sl, r5, r2, ror #2
    bic     r10, r4, r10            // r10<- ~r10 & 0xc0c0c0c0 (NOT omitted in sbox)
 8001430:	ea24 0a0a 	bic.w	sl, r4, sl
    eor     r9, r5, r10, ror #2     // r9 <- r5 ^ (r10 >>> 2)
 8001434:	ea85 09ba 	eor.w	r9, r5, sl, ror #2
    and     r9, r9, r4, ror #2      // r9 <- r9 & 0x30303030
 8001438:	ea09 09b4 	and.w	r9, r9, r4, ror #2
    orr     r10, r10, r9            // r10<- r10 | r9
 800143c:	ea4a 0a09 	orr.w	sl, sl, r9
    eor     r9, r5, r10, ror #2     // r9 <- r5 ^ (r10 >>> 2)
 8001440:	ea85 09ba 	eor.w	r9, r5, sl, ror #2
    and     r9, r9, r4, ror #4      // r9 <- r9 & 0x0c0c0c0c
 8001444:	ea09 1934 	and.w	r9, r9, r4, ror #4
    orr     r10, r10, r9            // r10<- r10 | r9
 8001448:	ea4a 0a09 	orr.w	sl, sl, r9
    eor     r9, r5, r10, ror #2     // r9 <- r5 ^ (r10 >>> 2)
 800144c:	ea85 09ba 	eor.w	r9, r5, sl, ror #2
    and     r9, r9, r4, ror #6      // r9 <- r9 & 0x03030303
 8001450:	ea09 19b4 	and.w	r9, r9, r4, ror #6
    orr     r10, r10, r9            // r10<- r10 | r9
 8001454:	ea4a 0a09 	orr.w	sl, sl, r9
    mvn     r9, r5                  // NOT omitted in sbox
 8001458:	ea6f 0905 	mvn.w	r9, r5
    ldr.w   r2, [r12, #20]          // load rkey word of rkey from prev round
 800145c:	f8dc 2014 	ldr.w	r2, [ip, #20]
    str     r9, [r12, #24]          // store new rkey word after NOT
 8001460:	f8cc 9018 	str.w	r9, [ip, #24]
    str     r10, [r12, #56]         // store new rkey word in 'rkeys'
 8001464:	f8cc a038 	str.w	sl, [ip, #56]	@ 0x38
    eor     r9, r2, r0, ror #2      // r9 <- r2 ^ (r9 >>> 2)
 8001468:	ea82 09b0 	eor.w	r9, r2, r0, ror #2
    and     r9, r4, r9              // r9 <- r9 & 0xc0c0c0c0
 800146c:	ea04 0909 	and.w	r9, r4, r9
    eor     r0, r2, r9, ror #2      // r0 <- r2 ^ (r9 >>> 2)
 8001470:	ea82 00b9 	eor.w	r0, r2, r9, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 8001474:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r9, r9, r0              // r9 <- r9 | r0
 8001478:	ea49 0900 	orr.w	r9, r9, r0
    eor     r0, r2, r9, ror #2      // r0 <- r2 ^ (r9 >>> 2)
 800147c:	ea82 00b9 	eor.w	r0, r2, r9, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 8001480:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r9, r9, r0              // r9 <- r9 | r0
 8001484:	ea49 0900 	orr.w	r9, r9, r0
    eor     r0, r2, r9, ror #2      // r0 <- r2 ^ (r9 >>> 2)
 8001488:	ea82 00b9 	eor.w	r0, r2, r9, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 800148c:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r9, r9, r0              // r9 <- r9 | r0
 8001490:	ea49 0900 	orr.w	r9, r9, r0
    ldr.w   r2, [r12, #16]          // load rkey word of rkey from prev round
 8001494:	f8dc 2010 	ldr.w	r2, [ip, #16]
    str.w   r9, [r12, #52]          // store new rkey word in 'rkeys'
 8001498:	f8cc 9034 	str.w	r9, [ip, #52]	@ 0x34
    eor     r8, r2, r8, ror #2      // r8 <- r2 ^ (r8 >>> 2)
 800149c:	ea82 08b8 	eor.w	r8, r2, r8, ror #2
    and     r8, r4, r8              // r8 <- r8 & 0xc0c0c0c0
 80014a0:	ea04 0808 	and.w	r8, r4, r8
    eor     r0, r2, r8, ror #2      // r0 <- r2 ^ (r8 >>> 2)
 80014a4:	ea82 00b8 	eor.w	r0, r2, r8, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 80014a8:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r8, r8, r0              // r8 <- r8 | r0
 80014ac:	ea48 0800 	orr.w	r8, r8, r0
    eor     r0, r2, r8, ror #2      // r0 <- r2 ^ (r8 >>> 2)
 80014b0:	ea82 00b8 	eor.w	r0, r2, r8, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 80014b4:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r8, r8, r0              // r8 <- r8 | r0
 80014b8:	ea48 0800 	orr.w	r8, r8, r0
    eor     r0, r2, r8, ror #2      // r0 <- r2 ^ (r8 >>> 2)
 80014bc:	ea82 00b8 	eor.w	r0, r2, r8, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 80014c0:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r8, r8, r0              // r8 <- r8 | r0
 80014c4:	ea48 0800 	orr.w	r8, r8, r0
    ldr.w   r2, [r12, #12]          // load rkey word of rkey from prev round
 80014c8:	f8dc 200c 	ldr.w	r2, [ip, #12]
    str.w   r8, [r12, #48]          // store new rkey word in 'rkeys'
 80014cc:	f8cc 8030 	str.w	r8, [ip, #48]	@ 0x30
    eor     r7, r2, r7, ror #2      // r7 <- r2 ^ (r7 >>> 2)
 80014d0:	ea82 07b7 	eor.w	r7, r2, r7, ror #2
    and     r7, r4, r7              // r7 <- r7 & 0xc0c0c0c0
 80014d4:	ea04 0707 	and.w	r7, r4, r7
    eor     r0, r2, r7, ror #2      // r0 <- r2 ^ (r7 >>> 2)
 80014d8:	ea82 00b7 	eor.w	r0, r2, r7, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 80014dc:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r7, r7, r0              // r7 <- r7 | r0
 80014e0:	ea47 0700 	orr.w	r7, r7, r0
    eor     r0, r2, r7, ror #2      // r0 <- r2 ^ (r7 >>> 2)
 80014e4:	ea82 00b7 	eor.w	r0, r2, r7, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 80014e8:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r7, r7, r0              // r7 <- r7 | r0
 80014ec:	ea47 0700 	orr.w	r7, r7, r0
    eor     r0, r2, r7, ror #2      // r0 <- r2 ^ (r7 >>> 2)
 80014f0:	ea82 00b7 	eor.w	r0, r2, r7, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 80014f4:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r7, r7, r0              // r7 <- r7 | r0
 80014f8:	ea47 0700 	orr.w	r7, r7, r0
    ldr.w   r2, [r12, #8]           // load rkey word of rkey from prev round
 80014fc:	f8dc 2008 	ldr.w	r2, [ip, #8]
    str.w   r7, [r12, #44]          // store new rkey word in 'rkeys'
 8001500:	f8cc 702c 	str.w	r7, [ip, #44]	@ 0x2c
    eor     r6, r2, r6, ror #2      // r6 <- r2 ^ (r6 >>> 2)
 8001504:	ea82 06b6 	eor.w	r6, r2, r6, ror #2
    bic     r6, r4, r6              // r6 <- ~r6 & 0xc0c0c0c0 (NOT omitted in sbox)
 8001508:	ea24 0606 	bic.w	r6, r4, r6
    eor     r0, r2, r6, ror #2      // r0 <- r2 ^ (r6 >>> 2)
 800150c:	ea82 00b6 	eor.w	r0, r2, r6, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 8001510:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r6, r6, r0              // r6 <- r6 | r0
 8001514:	ea46 0600 	orr.w	r6, r6, r0
    eor     r0, r2, r6, ror #2      // r0 <- r2 ^ (r6 >>> 2)
 8001518:	ea82 00b6 	eor.w	r0, r2, r6, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 800151c:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r6, r6, r0              // r6 <- r6 | r0
 8001520:	ea46 0600 	orr.w	r6, r6, r0
    eor     r0, r2, r6, ror #2      // r0 <- r2 ^ (r6 >>> 2)
 8001524:	ea82 00b6 	eor.w	r0, r2, r6, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 8001528:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r6, r6, r0              // r6 <- r6 | r0
 800152c:	ea46 0600 	orr.w	r6, r6, r0
    mvn     r0, r2                  // NOT omitted in sbox
 8001530:	ea6f 0002 	mvn.w	r0, r2
    ldr.w   r2, [r12, #4]           // load rkey word of rkey from prev round
 8001534:	f8dc 2004 	ldr.w	r2, [ip, #4]
    str.w   r0, [r12, #8]           // store new rkey word after NOT
 8001538:	f8cc 0008 	str.w	r0, [ip, #8]
    str.w   r6, [r12, #40]          // store new rkey word in 'rkeys'
 800153c:	f8cc 6028 	str.w	r6, [ip, #40]	@ 0x28
    eor     r5, r2, r3, ror #2      // r5 <- r2 ^ (r3 >>> 2)
 8001540:	ea82 05b3 	eor.w	r5, r2, r3, ror #2
    bic     r5, r4, r5              // r5 <- ~r5 & 0xc0c0c0c0 (NOT omitted in sbox)
 8001544:	ea24 0505 	bic.w	r5, r4, r5
    eor     r0, r2, r5, ror #2      // r0 <- r2 ^ (r5 >>> 2)
 8001548:	ea82 00b5 	eor.w	r0, r2, r5, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 800154c:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r5, r5, r0              // r5 <- r5 | r0
 8001550:	ea45 0500 	orr.w	r5, r5, r0
    eor     r0, r2, r5, ror #2      // r0 <- r2 ^ (r5 >>> 2)
 8001554:	ea82 00b5 	eor.w	r0, r2, r5, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 8001558:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r5, r5, r0              // r5 <- r5 | r0
 800155c:	ea45 0500 	orr.w	r5, r5, r0
    eor     r0, r2, r5, ror #2      // r0 <- r2 ^ (r5 >>> 2)
 8001560:	ea82 00b5 	eor.w	r0, r2, r5, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 8001564:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r5, r5, r0              // r5 <- r5 | r0
 8001568:	ea45 0500 	orr.w	r5, r5, r0
    mvn     r0, r2                  // NOT omitted in sbox
 800156c:	ea6f 0002 	mvn.w	r0, r2
    ldr.w   r2, [r12], #32          // load rkey word of rkey from prev round
 8001570:	f85c 2b20 	ldr.w	r2, [ip], #32
    str.w   r0, [r12, #-28]         // store new rkey word after NOT
 8001574:	f84c 0c1c 	str.w	r0, [ip, #-28]
    str.w   r5, [r12, #4]           // store new rkey word in 'rkeys'
 8001578:	f8cc 5004 	str.w	r5, [ip, #4]
    eor     r3, r2, r1, ror #2      // r3 <- r2 ^ (r1 >>> 2)
 800157c:	ea82 03b1 	eor.w	r3, r2, r1, ror #2
    and     r3, r4, r3              // r3 <- r3 & 0xc0c0c0c0
 8001580:	ea04 0303 	and.w	r3, r4, r3
    eor     r0, r2, r3, ror #2      // r0 <- r2 ^ (r3 >>> 2)
 8001584:	ea82 00b3 	eor.w	r0, r2, r3, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 8001588:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r3, r3, r0              // r3 <- r3 | r0
 800158c:	ea43 0300 	orr.w	r3, r3, r0
    eor     r0, r2, r3, ror #2      // r0 <- r2 ^ (r3 >>> 2)
 8001590:	ea82 00b3 	eor.w	r0, r2, r3, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 8001594:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r3, r3, r0              // r3 <- r3 | r0
 8001598:	ea43 0300 	orr.w	r3, r3, r0
    eor     r0, r2, r3, ror #2      // r0 <- r2 ^ (r3 >>> 2)
 800159c:	ea82 00b3 	eor.w	r0, r2, r3, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 80015a0:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r4, r3, r0              // r4 <- r3 | r0
 80015a4:	ea43 0400 	orr.w	r4, r3, r0
    str.w   r4, [r12]
 80015a8:	f8cc 4000 	str.w	r4, [ip]
    str.w   r12, [sp, #56]          // store the new rkeys address on the stack
 80015ac:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
    bx      lr
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop

080015b4 <aes256_xorcolumns_rotword>:
* Differs from 'aes128_xorcolumns_rotword' by the rkeys' indexes to be involved
* in XORs.
******************************************************************************/
.align 2
aes256_xorcolumns_rotword:
    ldr     r12, [sp, #56]          // restore 'rkeys' address
 80015b4:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
    ldr.w   r5, [r12, #28]          // load rkey word of rkey from prev round
 80015b8:	f8dc 501c 	ldr.w	r5, [ip, #28]
    movw    r4, #0xc0c0
 80015bc:	f24c 04c0 	movw	r4, #49344	@ 0xc0c0
    movt    r4, #0xc0c0             // r4 <- 0xc0c0c0c0
 80015c0:	f2cc 04c0 	movt	r4, #49344	@ 0xc0c0
    eor     r11, r5, r11, ror #2    // r11<- r5 ^ (r11 >>> 2)
 80015c4:	ea85 0bbb 	eor.w	fp, r5, fp, ror #2
    bic     r11, r4, r11            // r11<- ~r11 & 0xc0c0c0c0 (NOT omitted in sbox)
 80015c8:	ea24 0b0b 	bic.w	fp, r4, fp
    eor     r9, r5, r11, ror #2     // r9 <- r5 ^ (r11 >>> 2)
 80015cc:	ea85 09bb 	eor.w	r9, r5, fp, ror #2
    and     r9, r9, r4, ror #2      // r9 <- r9 & 0x30303030
 80015d0:	ea09 09b4 	and.w	r9, r9, r4, ror #2
    orr     r11, r11, r9            // r11<- r11 | r9
 80015d4:	ea4b 0b09 	orr.w	fp, fp, r9
    eor     r9, r5, r11, ror #2     // r9 <- r5 ^ (r11 >>> 2)
 80015d8:	ea85 09bb 	eor.w	r9, r5, fp, ror #2
    and     r9, r9, r4, ror #4      // r9 <- r9 & 0x0c0c0c0c
 80015dc:	ea09 1934 	and.w	r9, r9, r4, ror #4
    orr     r11, r11, r9            // r11<- r11 | r9
 80015e0:	ea4b 0b09 	orr.w	fp, fp, r9
    eor     r9, r5, r11, ror #2     // r9 <- r5 ^ (r11 >>> 2)
 80015e4:	ea85 09bb 	eor.w	r9, r5, fp, ror #2
    and     r9, r9, r4, ror #6      // r9 <- r9 & 0x03030303
 80015e8:	ea09 19b4 	and.w	r9, r9, r4, ror #6
    orr     r11, r11, r9            // r11<- r11 | r9
 80015ec:	ea4b 0b09 	orr.w	fp, fp, r9
    mvn     r9, r5                  // NOT omitted in sbox
 80015f0:	ea6f 0905 	mvn.w	r9, r5
    ldr.w   r5, [r12, #24]          // load rkey word of rkey from prev round
 80015f4:	f8dc 5018 	ldr.w	r5, [ip, #24]
    str     r9, [r12, #28]          // store new rkey word after NOT
 80015f8:	f8cc 901c 	str.w	r9, [ip, #28]
    str     r11, [r12, #92]         // store new rkey word in 'rkeys'
 80015fc:	f8cc b05c 	str.w	fp, [ip, #92]	@ 0x5c
    eor     r10, r5, r2, ror #2     // r10<- r5 ^ (r2 >>> 2)
 8001600:	ea85 0ab2 	eor.w	sl, r5, r2, ror #2
    bic     r10, r4, r10            // r10<- ~r10 & 0xc0c0c0c0 (NOT omitted in sbox)
 8001604:	ea24 0a0a 	bic.w	sl, r4, sl
    eor     r9, r5, r10, ror #2     // r9 <- r5 ^ (r10 >>> 2)
 8001608:	ea85 09ba 	eor.w	r9, r5, sl, ror #2
    and     r9, r9, r4, ror #2      // r9 <- r9 & 0x30303030
 800160c:	ea09 09b4 	and.w	r9, r9, r4, ror #2
    orr     r10, r10, r9            // r10<- r10 | r9
 8001610:	ea4a 0a09 	orr.w	sl, sl, r9
    eor     r9, r5, r10, ror #2     // r9 <- r5 ^ (r10 >>> 2)
 8001614:	ea85 09ba 	eor.w	r9, r5, sl, ror #2
    and     r9, r9, r4, ror #4      // r9 <- r9 & 0x0c0c0c0c
 8001618:	ea09 1934 	and.w	r9, r9, r4, ror #4
    orr     r10, r10, r9            // r10<- r10 | r9
 800161c:	ea4a 0a09 	orr.w	sl, sl, r9
    eor     r9, r5, r10, ror #2     // r9 <- r5 ^ (r10 >>> 2)
 8001620:	ea85 09ba 	eor.w	r9, r5, sl, ror #2
    and     r9, r9, r4, ror #6      // r9 <- r9 & 0x03030303
 8001624:	ea09 19b4 	and.w	r9, r9, r4, ror #6
    orr     r10, r10, r9            // r10<- r10 | r9
 8001628:	ea4a 0a09 	orr.w	sl, sl, r9
    mvn     r9, r5                  // NOT omitted in sbox
 800162c:	ea6f 0905 	mvn.w	r9, r5
    ldr.w   r2, [r12, #20]          // load rkey word of rkey from prev round
 8001630:	f8dc 2014 	ldr.w	r2, [ip, #20]
    str     r9, [r12, #24]          // store new rkey word after NOT
 8001634:	f8cc 9018 	str.w	r9, [ip, #24]
    str     r10, [r12, #88]         // store new rkey word in 'rkeys'
 8001638:	f8cc a058 	str.w	sl, [ip, #88]	@ 0x58
    eor     r9, r2, r0, ror #2      // r9 <- r2 ^ (r9 >>> 2)
 800163c:	ea82 09b0 	eor.w	r9, r2, r0, ror #2
    and     r9, r4, r9              // r9 <- r9 & 0xc0c0c0c0
 8001640:	ea04 0909 	and.w	r9, r4, r9
    eor     r0, r2, r9, ror #2      // r0 <- r2 ^ (r9 >>> 2)
 8001644:	ea82 00b9 	eor.w	r0, r2, r9, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 8001648:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r9, r9, r0              // r9 <- r9 | r0
 800164c:	ea49 0900 	orr.w	r9, r9, r0
    eor     r0, r2, r9, ror #2      // r0 <- r2 ^ (r9 >>> 2)
 8001650:	ea82 00b9 	eor.w	r0, r2, r9, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 8001654:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r9, r9, r0              // r9 <- r9 | r0
 8001658:	ea49 0900 	orr.w	r9, r9, r0
    eor     r0, r2, r9, ror #2      // r0 <- r2 ^ (r9 >>> 2)
 800165c:	ea82 00b9 	eor.w	r0, r2, r9, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 8001660:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r9, r9, r0              // r9 <- r9 | r0
 8001664:	ea49 0900 	orr.w	r9, r9, r0
    ldr.w   r2, [r12, #16]          // load rkey word of rkey from prev round
 8001668:	f8dc 2010 	ldr.w	r2, [ip, #16]
    str.w   r9, [r12, #84]          // store new rkey word in 'rkeys'
 800166c:	f8cc 9054 	str.w	r9, [ip, #84]	@ 0x54
    eor     r8, r2, r8, ror #2      // r8 <- r2 ^ (r8 >>> 2)
 8001670:	ea82 08b8 	eor.w	r8, r2, r8, ror #2
    and     r8, r4, r8              // r8 <- r8 & 0xc0c0c0c0
 8001674:	ea04 0808 	and.w	r8, r4, r8
    eor     r0, r2, r8, ror #2      // r0 <- r2 ^ (r8 >>> 2)
 8001678:	ea82 00b8 	eor.w	r0, r2, r8, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 800167c:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r8, r8, r0              // r8 <- r8 | r0
 8001680:	ea48 0800 	orr.w	r8, r8, r0
    eor     r0, r2, r8, ror #2      // r0 <- r2 ^ (r8 >>> 2)
 8001684:	ea82 00b8 	eor.w	r0, r2, r8, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 8001688:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r8, r8, r0              // r8 <- r8 | r0
 800168c:	ea48 0800 	orr.w	r8, r8, r0
    eor     r0, r2, r8, ror #2      // r0 <- r2 ^ (r8 >>> 2)
 8001690:	ea82 00b8 	eor.w	r0, r2, r8, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 8001694:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r8, r8, r0              // r8 <- r8 | r0
 8001698:	ea48 0800 	orr.w	r8, r8, r0
    ldr.w   r2, [r12, #12]          // load rkey word of rkey from prev round
 800169c:	f8dc 200c 	ldr.w	r2, [ip, #12]
    str.w   r8, [r12, #80]          // store new rkey word in 'rkeys'
 80016a0:	f8cc 8050 	str.w	r8, [ip, #80]	@ 0x50
    eor     r7, r2, r7, ror #2      // r7 <- r2 ^ (r7 >>> 2)
 80016a4:	ea82 07b7 	eor.w	r7, r2, r7, ror #2
    and     r7, r4, r7              // r7 <- r7 & 0xc0c0c0c0
 80016a8:	ea04 0707 	and.w	r7, r4, r7
    eor     r0, r2, r7, ror #2      // r0 <- r2 ^ (r7 >>> 2)
 80016ac:	ea82 00b7 	eor.w	r0, r2, r7, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 80016b0:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r7, r7, r0              // r7 <- r7 | r0
 80016b4:	ea47 0700 	orr.w	r7, r7, r0
    eor     r0, r2, r7, ror #2      // r0 <- r2 ^ (r7 >>> 2)
 80016b8:	ea82 00b7 	eor.w	r0, r2, r7, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 80016bc:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r7, r7, r0              // r7 <- r7 | r0
 80016c0:	ea47 0700 	orr.w	r7, r7, r0
    eor     r0, r2, r7, ror #2      // r0 <- r2 ^ (r7 >>> 2)
 80016c4:	ea82 00b7 	eor.w	r0, r2, r7, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 80016c8:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r7, r7, r0              // r7 <- r7 | r0
 80016cc:	ea47 0700 	orr.w	r7, r7, r0
    ldr.w   r2, [r12, #8]           // load rkey word of rkey from prev round
 80016d0:	f8dc 2008 	ldr.w	r2, [ip, #8]
    str.w   r7, [r12, #76]          // store new rkey word in 'rkeys'
 80016d4:	f8cc 704c 	str.w	r7, [ip, #76]	@ 0x4c
    eor     r6, r2, r6, ror #2      // r6 <- r2 ^ (r6 >>> 2)
 80016d8:	ea82 06b6 	eor.w	r6, r2, r6, ror #2
    bic     r6, r4, r6              // r6 <- ~r6 & 0xc0c0c0c0 (NOT omitted in sbox)
 80016dc:	ea24 0606 	bic.w	r6, r4, r6
    eor     r0, r2, r6, ror #2      // r0 <- r2 ^ (r6 >>> 2)
 80016e0:	ea82 00b6 	eor.w	r0, r2, r6, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 80016e4:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r6, r6, r0              // r6 <- r6 | r0
 80016e8:	ea46 0600 	orr.w	r6, r6, r0
    eor     r0, r2, r6, ror #2      // r0 <- r2 ^ (r6 >>> 2)
 80016ec:	ea82 00b6 	eor.w	r0, r2, r6, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 80016f0:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r6, r6, r0              // r6 <- r6 | r0
 80016f4:	ea46 0600 	orr.w	r6, r6, r0
    eor     r0, r2, r6, ror #2      // r0 <- r2 ^ (r6 >>> 2)
 80016f8:	ea82 00b6 	eor.w	r0, r2, r6, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 80016fc:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r6, r6, r0              // r6 <- r6 | r0
 8001700:	ea46 0600 	orr.w	r6, r6, r0
    mvn     r0, r2                  // NOT omitted in sbox
 8001704:	ea6f 0002 	mvn.w	r0, r2
    ldr.w   r2, [r12, #4]           // load rkey word of rkey from prev round
 8001708:	f8dc 2004 	ldr.w	r2, [ip, #4]
    str.w   r0, [r12, #8]           // store new rkey word after NOT
 800170c:	f8cc 0008 	str.w	r0, [ip, #8]
    str.w   r6, [r12, #72]          // store new rkey word in 'rkeys'
 8001710:	f8cc 6048 	str.w	r6, [ip, #72]	@ 0x48
    eor     r5, r2, r3, ror #2      // r5 <- r2 ^ (r3 >>> 2)
 8001714:	ea82 05b3 	eor.w	r5, r2, r3, ror #2
    bic     r5, r4, r5              // r5 <- ~r5 & 0xc0c0c0c0 (NOT omitted in sbox)
 8001718:	ea24 0505 	bic.w	r5, r4, r5
    eor     r0, r2, r5, ror #2      // r0 <- r2 ^ (r5 >>> 2)
 800171c:	ea82 00b5 	eor.w	r0, r2, r5, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 8001720:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r5, r5, r0              // r5 <- r5 | r0
 8001724:	ea45 0500 	orr.w	r5, r5, r0
    eor     r0, r2, r5, ror #2      // r0 <- r2 ^ (r5 >>> 2)
 8001728:	ea82 00b5 	eor.w	r0, r2, r5, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 800172c:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r5, r5, r0              // r5 <- r5 | r0
 8001730:	ea45 0500 	orr.w	r5, r5, r0
    eor     r0, r2, r5, ror #2      // r0 <- r2 ^ (r5 >>> 2)
 8001734:	ea82 00b5 	eor.w	r0, r2, r5, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 8001738:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r5, r5, r0              // r5 <- r5 | r0
 800173c:	ea45 0500 	orr.w	r5, r5, r0
    mvn     r0, r2                  // NOT omitted in sbox
 8001740:	ea6f 0002 	mvn.w	r0, r2
    ldr.w   r2, [r12], #32          // load rkey word of rkey from prev round
 8001744:	f85c 2b20 	ldr.w	r2, [ip], #32
    str.w   r0, [r12, #-28]         // store new rkey word after NOT
 8001748:	f84c 0c1c 	str.w	r0, [ip, #-28]
    str.w   r5, [r12, #36]          // store new rkey word in 'rkeys'
 800174c:	f8cc 5024 	str.w	r5, [ip, #36]	@ 0x24
    eor     r3, r2, r1, ror #2      // r3 <- r2 ^ (r1 >>> 2)
 8001750:	ea82 03b1 	eor.w	r3, r2, r1, ror #2
    and     r3, r4, r3              // r3 <- r3 & 0xc0c0c0c0
 8001754:	ea04 0303 	and.w	r3, r4, r3
    eor     r0, r2, r3, ror #2      // r0 <- r2 ^ (r3 >>> 2)
 8001758:	ea82 00b3 	eor.w	r0, r2, r3, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 800175c:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r3, r3, r0              // r3 <- r3 | r0
 8001760:	ea43 0300 	orr.w	r3, r3, r0
    eor     r0, r2, r3, ror #2      // r0 <- r2 ^ (r3 >>> 2)
 8001764:	ea82 00b3 	eor.w	r0, r2, r3, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 8001768:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r3, r3, r0              // r3 <- r3 | r0
 800176c:	ea43 0300 	orr.w	r3, r3, r0
    eor     r0, r2, r3, ror #2      // r0 <- r2 ^ (r3 >>> 2)
 8001770:	ea82 00b3 	eor.w	r0, r2, r3, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 8001774:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r4, r3, r0              // r4 <- r3 | r0
 8001778:	ea43 0400 	orr.w	r4, r3, r0
    str.w   r4, [r12, #32]
 800177c:	f8cc 4020 	str.w	r4, [ip, #32]
    str.w   r12, [sp, #56]          // store the new rkeys address on the stack
 8001780:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
    bx      lr
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop

08001788 <aes256_xorcolumns>:
* It differs from 'aes256_xorcolumns_rotword' by the omission of the rotword
* operation (i.e. 'ror #26' instead of 'ror #2').
******************************************************************************/
.align 2
aes256_xorcolumns:
    ldr     r12, [sp, #56]          // restore 'rkeys' address
 8001788:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
    ldr.w   r5, [r12, #28]          // load rkey word of rkey from prev round
 800178c:	f8dc 501c 	ldr.w	r5, [ip, #28]
    movw    r4, #0xc0c0
 8001790:	f24c 04c0 	movw	r4, #49344	@ 0xc0c0
    movt    r4, #0xc0c0             // r4 <- 0xc0c0c0c0
 8001794:	f2cc 04c0 	movt	r4, #49344	@ 0xc0c0
    eor     r11, r5, r11, ror #26   // r11<- r5 ^ (r11 >>> 26)
 8001798:	ea85 6bbb 	eor.w	fp, r5, fp, ror #26
    bic     r11, r4, r11            // r11<- ~r11 & 0xc0c0c0c0 (NOT omitted in sbox)
 800179c:	ea24 0b0b 	bic.w	fp, r4, fp
    eor     r9, r5, r11, ror #2     // r9 <- r5 ^ (r11 >>> 2)
 80017a0:	ea85 09bb 	eor.w	r9, r5, fp, ror #2
    and     r9, r9, r4, ror #2      // r9 <- r9 & 0x30303030
 80017a4:	ea09 09b4 	and.w	r9, r9, r4, ror #2
    orr     r11, r11, r9            // r11<- r11 | r9
 80017a8:	ea4b 0b09 	orr.w	fp, fp, r9
    eor     r9, r5, r11, ror #2     // r9 <- r5 ^ (r11 >>> 2)
 80017ac:	ea85 09bb 	eor.w	r9, r5, fp, ror #2
    and     r9, r9, r4, ror #4      // r9 <- r9 & 0x0c0c0c0c
 80017b0:	ea09 1934 	and.w	r9, r9, r4, ror #4
    orr     r11, r11, r9            // r11<- r11 | r9
 80017b4:	ea4b 0b09 	orr.w	fp, fp, r9
    eor     r9, r5, r11, ror #2     // r9 <- r5 ^ (r11 >>> 2)
 80017b8:	ea85 09bb 	eor.w	r9, r5, fp, ror #2
    and     r9, r9, r4, ror #6      // r9 <- r9 & 0x03030303
 80017bc:	ea09 19b4 	and.w	r9, r9, r4, ror #6
    orr     r11, r11, r9            // r11<- r11 | r9
 80017c0:	ea4b 0b09 	orr.w	fp, fp, r9
    mvn     r9, r5                  // NOT omitted in sbox
 80017c4:	ea6f 0905 	mvn.w	r9, r5
    ldr.w   r5, [r12, #24]          // load rkey word of rkey from prev round
 80017c8:	f8dc 5018 	ldr.w	r5, [ip, #24]
    str     r9, [r12, #28]          // store new rkey word after NOT
 80017cc:	f8cc 901c 	str.w	r9, [ip, #28]
    str     r11, [r12, #92]         // store new rkey word in 'rkeys'
 80017d0:	f8cc b05c 	str.w	fp, [ip, #92]	@ 0x5c
    eor     r10, r5, r2, ror #26    // r10<- r5 ^ (r2 >>> 2)
 80017d4:	ea85 6ab2 	eor.w	sl, r5, r2, ror #26
    bic     r10, r4, r10            // r10<- ~r10 & 0xc0c0c0c0 (NOT omitted in sbox)
 80017d8:	ea24 0a0a 	bic.w	sl, r4, sl
    eor     r9, r5, r10, ror #2     // r9 <- r5 ^ (r10 >>> 2)
 80017dc:	ea85 09ba 	eor.w	r9, r5, sl, ror #2
    and     r9, r9, r4, ror #2      // r9 <- r9 & 0x30303030
 80017e0:	ea09 09b4 	and.w	r9, r9, r4, ror #2
    orr     r10, r10, r9            // r10<- r10 | r9
 80017e4:	ea4a 0a09 	orr.w	sl, sl, r9
    eor     r9, r5, r10, ror #2     // r9 <- r5 ^ (r10 >>> 2)
 80017e8:	ea85 09ba 	eor.w	r9, r5, sl, ror #2
    and     r9, r9, r4, ror #4      // r9 <- r9 & 0x0c0c0c0c
 80017ec:	ea09 1934 	and.w	r9, r9, r4, ror #4
    orr     r10, r10, r9            // r10<- r10 | r9
 80017f0:	ea4a 0a09 	orr.w	sl, sl, r9
    eor     r9, r5, r10, ror #2     // r9 <- r5 ^ (r10 >>> 2)
 80017f4:	ea85 09ba 	eor.w	r9, r5, sl, ror #2
    and     r9, r9, r4, ror #6      // r9 <- r9 & 0x03030303
 80017f8:	ea09 19b4 	and.w	r9, r9, r4, ror #6
    orr     r10, r10, r9            // r10<- r10 | r9
 80017fc:	ea4a 0a09 	orr.w	sl, sl, r9
    mvn     r9, r5                  // NOT omitted in sbox
 8001800:	ea6f 0905 	mvn.w	r9, r5
    ldr.w   r2, [r12, #20]          // load rkey word of rkey from prev round
 8001804:	f8dc 2014 	ldr.w	r2, [ip, #20]
    str     r9, [r12, #24]          // store new rkey word after NOT
 8001808:	f8cc 9018 	str.w	r9, [ip, #24]
    str     r10, [r12, #88]         // store new rkey word in 'rkeys'
 800180c:	f8cc a058 	str.w	sl, [ip, #88]	@ 0x58
    eor     r9, r2, r0, ror #26     // r9 <- r2 ^ (r9 >>> 26)
 8001810:	ea82 69b0 	eor.w	r9, r2, r0, ror #26
    and     r9, r4, r9              // r9 <- r9 & 0xc0c0c0c0
 8001814:	ea04 0909 	and.w	r9, r4, r9
    eor     r0, r2, r9, ror #2      // r0 <- r2 ^ (r9 >>> 2)
 8001818:	ea82 00b9 	eor.w	r0, r2, r9, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 800181c:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r9, r9, r0              // r9 <- r9 | r0
 8001820:	ea49 0900 	orr.w	r9, r9, r0
    eor     r0, r2, r9, ror #2      // r0 <- r2 ^ (r9 >>> 2)
 8001824:	ea82 00b9 	eor.w	r0, r2, r9, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 8001828:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r9, r9, r0              // r9 <- r9 | r0
 800182c:	ea49 0900 	orr.w	r9, r9, r0
    eor     r0, r2, r9, ror #2      // r0 <- r2 ^ (r9 >>> 2)
 8001830:	ea82 00b9 	eor.w	r0, r2, r9, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 8001834:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r9, r9, r0              // r9 <- r9 | r0
 8001838:	ea49 0900 	orr.w	r9, r9, r0
    ldr.w   r2, [r12, #16]          // load rkey word of rkey from prev round
 800183c:	f8dc 2010 	ldr.w	r2, [ip, #16]
    str.w   r9, [r12, #84]          // store new rkey word in 'rkeys'
 8001840:	f8cc 9054 	str.w	r9, [ip, #84]	@ 0x54
    eor     r8, r2, r8, ror #26     // r8 <- r2 ^ (r8 >>> 26)
 8001844:	ea82 68b8 	eor.w	r8, r2, r8, ror #26
    and     r8, r4, r8              // r8 <- r8 & 0xc0c0c0c0
 8001848:	ea04 0808 	and.w	r8, r4, r8
    eor     r0, r2, r8, ror #2      // r0 <- r2 ^ (r8 >>> 2)
 800184c:	ea82 00b8 	eor.w	r0, r2, r8, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 8001850:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r8, r8, r0              // r8 <- r8 | r0
 8001854:	ea48 0800 	orr.w	r8, r8, r0
    eor     r0, r2, r8, ror #2      // r0 <- r2 ^ (r8 >>> 2)
 8001858:	ea82 00b8 	eor.w	r0, r2, r8, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 800185c:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r8, r8, r0              // r8 <- r8 | r0
 8001860:	ea48 0800 	orr.w	r8, r8, r0
    eor     r0, r2, r8, ror #2      // r0 <- r2 ^ (r8 >>> 2)
 8001864:	ea82 00b8 	eor.w	r0, r2, r8, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 8001868:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r8, r8, r0              // r8 <- r8 | r0
 800186c:	ea48 0800 	orr.w	r8, r8, r0
    ldr.w   r2, [r12, #12]          // load rkey word of rkey from prev round
 8001870:	f8dc 200c 	ldr.w	r2, [ip, #12]
    str.w   r8, [r12, #80]          // store new rkey word in 'rkeys'
 8001874:	f8cc 8050 	str.w	r8, [ip, #80]	@ 0x50
    eor     r7, r2, r7, ror #26     // r7 <- r2 ^ (r7 >>> 26)
 8001878:	ea82 67b7 	eor.w	r7, r2, r7, ror #26
    and     r7, r4, r7              // r7 <- r7 & 0xc0c0c0c0
 800187c:	ea04 0707 	and.w	r7, r4, r7
    eor     r0, r2, r7, ror #2      // r0 <- r2 ^ (r7 >>> 2)
 8001880:	ea82 00b7 	eor.w	r0, r2, r7, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 8001884:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r7, r7, r0              // r7 <- r7 | r0
 8001888:	ea47 0700 	orr.w	r7, r7, r0
    eor     r0, r2, r7, ror #2      // r0 <- r2 ^ (r7 >>> 2)
 800188c:	ea82 00b7 	eor.w	r0, r2, r7, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 8001890:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r7, r7, r0              // r7 <- r7 | r0
 8001894:	ea47 0700 	orr.w	r7, r7, r0
    eor     r0, r2, r7, ror #2      // r0 <- r2 ^ (r7 >>> 2)
 8001898:	ea82 00b7 	eor.w	r0, r2, r7, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 800189c:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r7, r7, r0              // r7 <- r7 | r0
 80018a0:	ea47 0700 	orr.w	r7, r7, r0
    ldr.w   r2, [r12, #8]           // load rkey word of rkey from prev round
 80018a4:	f8dc 2008 	ldr.w	r2, [ip, #8]
    str.w   r7, [r12, #76]          // store new rkey word in 'rkeys'
 80018a8:	f8cc 704c 	str.w	r7, [ip, #76]	@ 0x4c
    eor     r6, r2, r6, ror #26     // r6 <- r2 ^ (r6 >>> 26)
 80018ac:	ea82 66b6 	eor.w	r6, r2, r6, ror #26
    bic     r6, r4, r6              // r6 <- ~r6 & 0xc0c0c0c0 (NOT omitted in sbox)
 80018b0:	ea24 0606 	bic.w	r6, r4, r6
    eor     r0, r2, r6, ror #2      // r0 <- r2 ^ (r6 >>> 2)
 80018b4:	ea82 00b6 	eor.w	r0, r2, r6, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 80018b8:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r6, r6, r0              // r6 <- r6 | r0
 80018bc:	ea46 0600 	orr.w	r6, r6, r0
    eor     r0, r2, r6, ror #2      // r0 <- r2 ^ (r6 >>> 2)
 80018c0:	ea82 00b6 	eor.w	r0, r2, r6, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 80018c4:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r6, r6, r0              // r6 <- r6 | r0
 80018c8:	ea46 0600 	orr.w	r6, r6, r0
    eor     r0, r2, r6, ror #2      // r0 <- r2 ^ (r6 >>> 2)
 80018cc:	ea82 00b6 	eor.w	r0, r2, r6, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 80018d0:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r6, r6, r0              // r6 <- r6 | r0
 80018d4:	ea46 0600 	orr.w	r6, r6, r0
    mvn     r0, r2                  // NOT omitted in sbox
 80018d8:	ea6f 0002 	mvn.w	r0, r2
    ldr.w   r2, [r12, #4]           // load rkey word of rkey from prev round
 80018dc:	f8dc 2004 	ldr.w	r2, [ip, #4]
    str.w   r0, [r12, #8]           // store new rkey word after NOT
 80018e0:	f8cc 0008 	str.w	r0, [ip, #8]
    str.w   r6, [r12, #72]          // store new rkey word in 'rkeys'
 80018e4:	f8cc 6048 	str.w	r6, [ip, #72]	@ 0x48
    eor     r5, r2, r3, ror #26     // r5 <- r2 ^ (r3 >>> 26)
 80018e8:	ea82 65b3 	eor.w	r5, r2, r3, ror #26
    bic     r5, r4, r5              // r5 <- ~r5 & 0xc0c0c0c0 (NOT omitted in sbox)
 80018ec:	ea24 0505 	bic.w	r5, r4, r5
    eor     r0, r2, r5, ror #2      // r0 <- r2 ^ (r5 >>> 2)
 80018f0:	ea82 00b5 	eor.w	r0, r2, r5, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 80018f4:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r5, r5, r0              // r5 <- r5 | r0
 80018f8:	ea45 0500 	orr.w	r5, r5, r0
    eor     r0, r2, r5, ror #2      // r0 <- r2 ^ (r5 >>> 2)
 80018fc:	ea82 00b5 	eor.w	r0, r2, r5, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 8001900:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r5, r5, r0              // r5 <- r5 | r0
 8001904:	ea45 0500 	orr.w	r5, r5, r0
    eor     r0, r2, r5, ror #2      // r0 <- r2 ^ (r5 >>> 2)
 8001908:	ea82 00b5 	eor.w	r0, r2, r5, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 800190c:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r5, r5, r0              // r5 <- r5 | r0
 8001910:	ea45 0500 	orr.w	r5, r5, r0
    mvn     r0, r2                  // NOT omitted in sbox
 8001914:	ea6f 0002 	mvn.w	r0, r2
    ldr.w   r2, [r12], #32          // load rkey word of rkey from prev round
 8001918:	f85c 2b20 	ldr.w	r2, [ip], #32
    str.w   r0, [r12, #-28]         // store new rkey word after NOT
 800191c:	f84c 0c1c 	str.w	r0, [ip, #-28]
    str.w   r5, [r12, #36]          // store new rkey word in 'rkeys'
 8001920:	f8cc 5024 	str.w	r5, [ip, #36]	@ 0x24
    eor     r3, r2, r1, ror #26     // r3 <- r2 ^ (r1 >>> 26)
 8001924:	ea82 63b1 	eor.w	r3, r2, r1, ror #26
    and     r3, r4, r3              // r3 <- r3 & 0xc0c0c0c0
 8001928:	ea04 0303 	and.w	r3, r4, r3
    eor     r0, r2, r3, ror #2      // r0 <- r2 ^ (r3 >>> 2)
 800192c:	ea82 00b3 	eor.w	r0, r2, r3, ror #2
    and     r0, r0, r4, ror #2      // r0 <- r0 & 0x30303030
 8001930:	ea00 00b4 	and.w	r0, r0, r4, ror #2
    orr     r3, r3, r0              // r3 <- r3 | r0
 8001934:	ea43 0300 	orr.w	r3, r3, r0
    eor     r0, r2, r3, ror #2      // r0 <- r2 ^ (r3 >>> 2)
 8001938:	ea82 00b3 	eor.w	r0, r2, r3, ror #2
    and     r0, r0, r4, ror #4      // r0 <- r0 & 0x0c0c0c0c
 800193c:	ea00 1034 	and.w	r0, r0, r4, ror #4
    orr     r3, r3, r0              // r3 <- r3 | r0
 8001940:	ea43 0300 	orr.w	r3, r3, r0
    eor     r0, r2, r3, ror #2      // r0 <- r2 ^ (r3 >>> 2)
 8001944:	ea82 00b3 	eor.w	r0, r2, r3, ror #2
    and     r0, r0, r4, ror #6      // r0 <- r0 & 0x03030303
 8001948:	ea00 10b4 	and.w	r0, r0, r4, ror #6
    orr     r4, r3, r0              // r4 <- r3 | r0
 800194c:	ea43 0400 	orr.w	r4, r3, r0
    str.w   r4, [r12, #32]
 8001950:	f8cc 4020 	str.w	r4, [ip, #32]
    str.w   r12, [sp, #56]          // store the new rkeys address on the stack
 8001954:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
    bx      lr
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop

0800195c <inv_shiftrows_1>:
/******************************************************************************
* Applies ShiftRows^(-1) on a round key to match the fixsliced representation.
******************************************************************************/
.align 2
inv_shiftrows_1:
    ldr.w   r2, [r12, #-32]!
 800195c:	f85c 2d20 	ldr.w	r2, [ip, #-32]!
    str     r14, [sp, #52]          // store link register
 8001960:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
    movw    r1, #8
 8001964:	f240 0108 	movw	r1, #8
    movw    r14, #0x0300
 8001968:	f240 3e00 	movw	lr, #768	@ 0x300
    movt    r14, #0x0c0f            // r14<- 0x0c0f0300 for ShiftRows^[-1]
 800196c:	f6c0 4e0f 	movt	lr, #3087	@ 0xc0f

08001970 <loop_inv_sr_1>:
loop_inv_sr_1:
    movw    r3, #0x3300
 8001970:	f243 3300 	movw	r3, #13056	@ 0x3300
    movt    r3, #0x3300             // r3 <- 0x33003300 for ShiftRows^[-1]
 8001974:	f2c3 3300 	movt	r3, #13056	@ 0x3300
    swpmv   r2, r2, r2, r2, r14, 4, r0
 8001978:	ea82 1012 	eor.w	r0, r2, r2, lsr #4
 800197c:	ea00 000e 	and.w	r0, r0, lr
 8001980:	ea82 0200 	eor.w	r2, r2, r0
 8001984:	ea82 1200 	eor.w	r2, r2, r0, lsl #4
    eor     r0, r2, r2, lsr #2
 8001988:	ea82 0092 	eor.w	r0, r2, r2, lsr #2
    and     r0, r3
 800198c:	ea00 0003 	and.w	r0, r0, r3
    eor     r2, r2, r0
 8001990:	ea82 0200 	eor.w	r2, r2, r0
    eor     r3, r2, r0, lsl #2
 8001994:	ea82 0380 	eor.w	r3, r2, r0, lsl #2
    ldr.w   r2, [r12, #4]!
 8001998:	f85c 2f04 	ldr.w	r2, [ip, #4]!
    str.w   r3, [r12, #-4]
 800199c:	f84c 3c04 	str.w	r3, [ip, #-4]
    subs    r1, #1
 80019a0:	3901      	subs	r1, #1
    bne     loop_inv_sr_1
 80019a2:	d1e5      	bne.n	8001970 <loop_inv_sr_1>
    ldr     r14, [sp, #52]          // restore link register
 80019a4:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
    bx      lr
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop

080019ac <inv_shiftrows_2>:
* Applies ShiftRows^(-2) on a round key to match the fixsliced representation.
* Only needed for the fully-fixsliced (ffs) representation.
******************************************************************************/
.align 2
inv_shiftrows_2:
    ldr.w   r2, [r12, #-32]!
 80019ac:	f85c 2d20 	ldr.w	r2, [ip, #-32]!
    str     r14, [sp, #52]          // store link register
 80019b0:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
    movw    r1, #8
 80019b4:	f240 0108 	movw	r1, #8
    movw    r14, #0x0f00
 80019b8:	f640 7e00 	movw	lr, #3840	@ 0xf00
    movt    r14, #0x0f00            // r14<- 0x0f000f00 for ShiftRows^[-2]
 80019bc:	f6c0 7e00 	movt	lr, #3840	@ 0xf00

080019c0 <loop_inv_sr_2>:
loop_inv_sr_2:
    eor     r0, r2, r2, lsr #4
 80019c0:	ea82 1012 	eor.w	r0, r2, r2, lsr #4
    and     r0, r14
 80019c4:	ea00 000e 	and.w	r0, r0, lr
    eor     r2, r2, r0
 80019c8:	ea82 0200 	eor.w	r2, r2, r0
    eor     r3, r2, r0, lsl #4
 80019cc:	ea82 1300 	eor.w	r3, r2, r0, lsl #4
    ldr.w   r2, [r12, #4]!
 80019d0:	f85c 2f04 	ldr.w	r2, [ip, #4]!
    str.w   r3, [r12, #-4]
 80019d4:	f84c 3c04 	str.w	r3, [ip, #-4]
    subs    r1, #1
 80019d8:	3901      	subs	r1, #1
    bne     loop_inv_sr_2
 80019da:	d1f1      	bne.n	80019c0 <loop_inv_sr_2>
    ldr     r14, [sp, #52]          // restore link register
 80019dc:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
    bx      lr
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop

080019e4 <inv_shiftrows_3>:
* Applies ShiftRows^(-3) on a round key to match the fixsliced representation.
* Only needed for the fully-fixsliced (ffs) representation.
******************************************************************************/
.align 2
inv_shiftrows_3:
    ldr.w   r2, [r12, #-32]!
 80019e4:	f85c 2d20 	ldr.w	r2, [ip, #-32]!
    str     r14, [sp, #52]          // store link register
 80019e8:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
    movw    r1, #8
 80019ec:	f240 0108 	movw	r1, #8
    movw    r14, #0x0c00
 80019f0:	f640 4e00 	movw	lr, #3072	@ 0xc00
    movt    r14, #0x030f            // r14<- 0x030f0c00 for ShiftRows^[-3]
 80019f4:	f2c0 3e0f 	movt	lr, #783	@ 0x30f

080019f8 <loop_inv_sr_3>:
loop_inv_sr_3:
    movw    r3, #0x3300
 80019f8:	f243 3300 	movw	r3, #13056	@ 0x3300
    movt    r3, #0x3300             // r3 <- 0x33003300 for ShiftRows^[-3]
 80019fc:	f2c3 3300 	movt	r3, #13056	@ 0x3300
    swpmv   r2, r2, r2, r2, r14, 4, r0
 8001a00:	ea82 1012 	eor.w	r0, r2, r2, lsr #4
 8001a04:	ea00 000e 	and.w	r0, r0, lr
 8001a08:	ea82 0200 	eor.w	r2, r2, r0
 8001a0c:	ea82 1200 	eor.w	r2, r2, r0, lsl #4
    eor     r0, r2, r2, lsr #2
 8001a10:	ea82 0092 	eor.w	r0, r2, r2, lsr #2
    and     r0, r3
 8001a14:	ea00 0003 	and.w	r0, r0, r3
    eor     r2, r2, r0
 8001a18:	ea82 0200 	eor.w	r2, r2, r0
    eor     r3, r2, r0, lsl #2
 8001a1c:	ea82 0380 	eor.w	r3, r2, r0, lsl #2
    ldr.w   r2, [r12, #4]!
 8001a20:	f85c 2f04 	ldr.w	r2, [ip, #4]!
    str.w   r3, [r12, #-4]
 8001a24:	f84c 3c04 	str.w	r3, [ip, #-4]
    subs    r1, #1
 8001a28:	3901      	subs	r1, #1
    bne     loop_inv_sr_3
 8001a2a:	d1e5      	bne.n	80019f8 <loop_inv_sr_3>
    ldr     r14, [sp, #52]          // restore link register
 8001a2c:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
    bx      lr
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop

08001a34 <aes128_keyschedule_ffs>:

.global aes128_keyschedule_ffs
.type   aes128_keyschedule_ffs, %function
.align 2
aes128_keyschedule_ffs:
    push    {r0-r12,r14}
 8001a34:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8001a38:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r1]                // load the 128-bit key in r4-r7
 8001a3c:	f8d1 4000 	ldr.w	r4, [r1]
    ldr     r5, [r1, #4]
 8001a40:	684d      	ldr	r5, [r1, #4]
    ldr     r6, [r1, #8]
 8001a42:	688e      	ldr	r6, [r1, #8]
    ldr     r7, [r1, #12]
 8001a44:	68cf      	ldr	r7, [r1, #12]
    ldr.w   r8, [r1]                // load the 128-bit key in r8-r11
 8001a46:	f8d1 8000 	ldr.w	r8, [r1]
    ldr     r9, [r1, #4]
 8001a4a:	f8d1 9004 	ldr.w	r9, [r1, #4]
    ldr     r10,[r1, #8]
 8001a4e:	f8d1 a008 	ldr.w	sl, [r1, #8]
    ldr     r11,[r1, #12]
 8001a52:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    bl      packing                 // pack the master key
 8001a56:	f7ff fb3b 	bl	80010d0 <packing>
    ldr.w   r0, [sp, #56]           // restore 'rkeys' address
 8001a5a:	f8dd 0038 	ldr.w	r0, [sp, #56]	@ 0x38
    stm     r0, {r4-r11}            // store the packed master key in 'rkeys'
 8001a5e:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
    bl      sbox                    // apply the sbox to the master key
 8001a62:	f7ff fb9f 	bl	80011a4 <sbox>
    eor     r11, r11, #0x00000300   // add the 1st rconst
 8001a66:	f48b 7b40 	eor.w	fp, fp, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001a6a:	f7ff fcb9 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001a6e:	f7ff fb99 	bl	80011a4 <sbox>
    eor     r2, r2, #0x00000300     // add the 2nd rconst
 8001a72:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001a76:	f7ff fcb3 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      inv_shiftrows_1
 8001a7a:	f7ff ff6f 	bl	800195c <inv_shiftrows_1>
    bl      sbox                    // apply the sbox to the master key
 8001a7e:	f7ff fb91 	bl	80011a4 <sbox>
    eor     r0, r0, #0x00000300     // add the 3rd rconst
 8001a82:	f480 7040 	eor.w	r0, r0, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001a86:	f7ff fcab 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      inv_shiftrows_2
 8001a8a:	f7ff ff8f 	bl	80019ac <inv_shiftrows_2>
    bl      sbox                    // apply the sbox to the master key
 8001a8e:	f7ff fb89 	bl	80011a4 <sbox>
    eor     r8, r8, #0x00000300     // add the 4th rconst
 8001a92:	f488 7840 	eor.w	r8, r8, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001a96:	f7ff fca3 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      inv_shiftrows_3
 8001a9a:	f7ff ffa3 	bl	80019e4 <inv_shiftrows_3>
    bl      sbox                    // apply the sbox to the master key
 8001a9e:	f7ff fb81 	bl	80011a4 <sbox>
    eor     r7, r7, #0x00000300     // add the 5th rconst
 8001aa2:	f487 7740 	eor.w	r7, r7, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001aa6:	f7ff fc9b 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001aaa:	f7ff fb7b 	bl	80011a4 <sbox>
    eor     r6, r6, #0x00000300     // add the 6th rconst
 8001aae:	f486 7640 	eor.w	r6, r6, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001ab2:	f7ff fc95 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      inv_shiftrows_1
 8001ab6:	f7ff ff51 	bl	800195c <inv_shiftrows_1>
    bl      sbox                    // apply the sbox to the master key
 8001aba:	f7ff fb73 	bl	80011a4 <sbox>
    eor     r3, r3, #0x00000300     // add the 7th rconst
 8001abe:	f483 7340 	eor.w	r3, r3, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001ac2:	f7ff fc8d 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      inv_shiftrows_2
 8001ac6:	f7ff ff71 	bl	80019ac <inv_shiftrows_2>
    bl      sbox                    // apply the sbox to the master key
 8001aca:	f7ff fb6b 	bl	80011a4 <sbox>
    eor     r1, r1, #0x00000300     // add the 8th rconst
 8001ace:	f481 7140 	eor.w	r1, r1, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001ad2:	f7ff fc85 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      inv_shiftrows_3
 8001ad6:	f7ff ff85 	bl	80019e4 <inv_shiftrows_3>
    bl      sbox                    // apply the sbox to the master key
 8001ada:	f7ff fb63 	bl	80011a4 <sbox>
    eor     r11, r11, #0x00000300   // add the 9th rconst
 8001ade:	f48b 7b40 	eor.w	fp, fp, #768	@ 0x300
    eor     r2, r2, #0x00000300     // add the 9th rconst
 8001ae2:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
    eor     r8, r8, #0x00000300     // add the 9th rconst
 8001ae6:	f488 7840 	eor.w	r8, r8, #768	@ 0x300
    eor     r7, r7, #0x00000300     // add the 9th rconst
 8001aea:	f487 7740 	eor.w	r7, r7, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001aee:	f7ff fc77 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001af2:	f7ff fb57 	bl	80011a4 <sbox>
    eor     r2, r2, #0x00000300     // add the 10th rconst
 8001af6:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
    eor     r0, r0, #0x00000300     // add the 10th rconst
 8001afa:	f480 7040 	eor.w	r0, r0, #768	@ 0x300
    eor     r7, r7, #0x00000300     // add the 10th rconst
 8001afe:	f487 7740 	eor.w	r7, r7, #768	@ 0x300
    eor     r6, r6, #0x00000300     // add the 10th rconst
 8001b02:	f486 7640 	eor.w	r6, r6, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001b06:	f7ff fc6b 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      inv_shiftrows_1
 8001b0a:	f7ff ff27 	bl	800195c <inv_shiftrows_1>
    mvn     r5, r5                  // add the NOT for the last rkey
 8001b0e:	ea6f 0505 	mvn.w	r5, r5
    mvn     r6, r6                  // add the NOT for the last rkey
 8001b12:	ea6f 0606 	mvn.w	r6, r6
    mvn     r10, r10                // add the NOT for the last rkey
 8001b16:	ea6f 0a0a 	mvn.w	sl, sl
    mvn     r11, r11                // add the NOT for the last rkey
 8001b1a:	ea6f 0b0b 	mvn.w	fp, fp
    strd    r5, r6, [r12, #4]
 8001b1e:	e9cc 5601 	strd	r5, r6, [ip, #4]
    strd    r10, r11, [r12, #24]
 8001b22:	e9cc ab06 	strd	sl, fp, [ip, #24]
    ldrd    r0, r1, [r12, #-316]
 8001b26:	e95c 014f 	ldrd	r0, r1, [ip, #-316]	@ 0x13c
    ldrd    r2, r3, [r12, #-296]
 8001b2a:	e95c 234a 	ldrd	r2, r3, [ip, #-296]	@ 0x128
    mvn     r0, r0                  // remove the NOT for the key whitening
 8001b2e:	ea6f 0000 	mvn.w	r0, r0
    mvn     r1, r1                  // remove the NOT for the key whitening
 8001b32:	ea6f 0101 	mvn.w	r1, r1
    mvn     r2, r2                  // remove the NOT for the key whitening
 8001b36:	ea6f 0202 	mvn.w	r2, r2
    mvn     r3, r3                  // remove the NOT for the key whitening
 8001b3a:	ea6f 0303 	mvn.w	r3, r3
    strd    r0, r1, [r12, #-316]
 8001b3e:	e94c 014f 	strd	r0, r1, [ip, #-316]	@ 0x13c
    strd    r2, r3, [r12, #-296]
 8001b42:	e94c 234a 	strd	r2, r3, [ip, #-296]	@ 0x128
    add.w   sp, #56                 // restore stack
 8001b46:	f10d 0d38 	add.w	sp, sp, #56	@ 0x38
    pop     {r0-r12, r14}           // restore context
 8001b4a:	e8bd 5fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8001b4e:	4770      	bx	lr

08001b50 <aes256_keyschedule_ffs>:
@ void aes256_keyschedule_ffs(u32* rkeys, const u8* key);
.global aes256_keyschedule_ffs
.type   aes256_keyschedule_ffs,%function
.align 2
aes256_keyschedule_ffs:
    push    {r0-r12,r14}
 8001b50:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8001b54:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r1]                // load the 128 first key bits in r4-r7
 8001b58:	f8d1 4000 	ldr.w	r4, [r1]
    ldr     r5, [r1, #4]
 8001b5c:	684d      	ldr	r5, [r1, #4]
    ldr     r6, [r1, #8]
 8001b5e:	688e      	ldr	r6, [r1, #8]
    ldr     r7, [r1, #12]
 8001b60:	68cf      	ldr	r7, [r1, #12]
    ldr.w   r8, [r1]                // load the 128 first key bits in r8-r11
 8001b62:	f8d1 8000 	ldr.w	r8, [r1]
    ldr     r9, [r1, #4]
 8001b66:	f8d1 9004 	ldr.w	r9, [r1, #4]
    ldr     r10,[r1, #8]
 8001b6a:	f8d1 a008 	ldr.w	sl, [r1, #8]
    ldr     r11,[r1, #12]
 8001b6e:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    bl      packing                 // pack the master key
 8001b72:	f7ff faad 	bl	80010d0 <packing>
    ldrd    r0,r1, [sp, #56]        // restore 'rkeys' and 'key' addresses
 8001b76:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    stm     r0, {r4-r11}            // store the packed master key in 'rkeys'
 8001b7a:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
    add.w   r1, #16                 // points to the 128 last bits of the key
 8001b7e:	f101 0110 	add.w	r1, r1, #16
    ldr.w   r4, [r1]                // load the 128 first key bits in r4-r7
 8001b82:	f8d1 4000 	ldr.w	r4, [r1]
    ldr     r5, [r1, #4]
 8001b86:	684d      	ldr	r5, [r1, #4]
    ldr     r6, [r1, #8]
 8001b88:	688e      	ldr	r6, [r1, #8]
    ldr     r7, [r1, #12]
 8001b8a:	68cf      	ldr	r7, [r1, #12]
    ldr.w   r8, [r1]                // load the 128 first key bits in r8-r11
 8001b8c:	f8d1 8000 	ldr.w	r8, [r1]
    ldr     r9, [r1, #4]
 8001b90:	f8d1 9004 	ldr.w	r9, [r1, #4]
    ldr     r10,[r1, #8]
 8001b94:	f8d1 a008 	ldr.w	sl, [r1, #8]
    ldr     r11,[r1, #12]
 8001b98:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    bl      packing                 // pack the master key
 8001b9c:	f7ff fa98 	bl	80010d0 <packing>
    ldr.w   r0, [sp, #56]           // restore 'rkeys' address
 8001ba0:	f8dd 0038 	ldr.w	r0, [sp, #56]	@ 0x38
    add.w   r0, #32                 // points to the 128 last bits of the key
 8001ba4:	f100 0020 	add.w	r0, r0, #32
    stm     r0, {r4-r11}            // store the packed master key in 'rkeys'
 8001ba8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
    bl      sbox                    // apply the sbox to the master key
 8001bac:	f7ff fafa 	bl	80011a4 <sbox>
    eor     r11, r11, #0x00000300   // add the 1st rconst
 8001bb0:	f48b 7b40 	eor.w	fp, fp, #768	@ 0x300
    bl      aes256_xorcolumns_rotword
 8001bb4:	f7ff fcfe 	bl	80015b4 <aes256_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001bb8:	f7ff faf4 	bl	80011a4 <sbox>
    bl      aes256_xorcolumns
 8001bbc:	f7ff fde4 	bl	8001788 <aes256_xorcolumns>
    bl      inv_shiftrows_1
 8001bc0:	f7ff fecc 	bl	800195c <inv_shiftrows_1>
    bl      sbox                    // apply the sbox to the master key
 8001bc4:	f7ff faee 	bl	80011a4 <sbox>
    eor     r2, r2, #0x00000300     // add the 2nd rconst
 8001bc8:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
    bl      aes256_xorcolumns_rotword
 8001bcc:	f7ff fcf2 	bl	80015b4 <aes256_xorcolumns_rotword>
    bl      inv_shiftrows_2
 8001bd0:	f7ff feec 	bl	80019ac <inv_shiftrows_2>
    bl      sbox                    // apply the sbox to the master key
 8001bd4:	f7ff fae6 	bl	80011a4 <sbox>
    bl      aes256_xorcolumns
 8001bd8:	f7ff fdd6 	bl	8001788 <aes256_xorcolumns>
    bl      inv_shiftrows_3
 8001bdc:	f7ff ff02 	bl	80019e4 <inv_shiftrows_3>
    bl      sbox                    // apply the sbox to the master key
 8001be0:	f7ff fae0 	bl	80011a4 <sbox>
    eor     r0, r0, #0x00000300     // add the 3rd rconst
 8001be4:	f480 7040 	eor.w	r0, r0, #768	@ 0x300
    bl      aes256_xorcolumns_rotword
 8001be8:	f7ff fce4 	bl	80015b4 <aes256_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001bec:	f7ff fada 	bl	80011a4 <sbox>
    bl      aes256_xorcolumns
 8001bf0:	f7ff fdca 	bl	8001788 <aes256_xorcolumns>
    bl      inv_shiftrows_1
 8001bf4:	f7ff feb2 	bl	800195c <inv_shiftrows_1>
    bl      sbox                    // apply the sbox to the master key
 8001bf8:	f7ff fad4 	bl	80011a4 <sbox>
    eor     r8, r8, #0x00000300     // add the 4th rconst
 8001bfc:	f488 7840 	eor.w	r8, r8, #768	@ 0x300
    bl      aes256_xorcolumns_rotword
 8001c00:	f7ff fcd8 	bl	80015b4 <aes256_xorcolumns_rotword>
    bl      inv_shiftrows_2
 8001c04:	f7ff fed2 	bl	80019ac <inv_shiftrows_2>
    bl      sbox                    // apply the sbox to the master key
 8001c08:	f7ff facc 	bl	80011a4 <sbox>
    bl      aes256_xorcolumns
 8001c0c:	f7ff fdbc 	bl	8001788 <aes256_xorcolumns>
    bl      inv_shiftrows_3
 8001c10:	f7ff fee8 	bl	80019e4 <inv_shiftrows_3>
    bl      sbox                    // apply the sbox to the master key
 8001c14:	f7ff fac6 	bl	80011a4 <sbox>
    eor     r7, r7, #0x00000300     // add the 5th rconst
 8001c18:	f487 7740 	eor.w	r7, r7, #768	@ 0x300
    bl      aes256_xorcolumns_rotword
 8001c1c:	f7ff fcca 	bl	80015b4 <aes256_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001c20:	f7ff fac0 	bl	80011a4 <sbox>
    bl      aes256_xorcolumns
 8001c24:	f7ff fdb0 	bl	8001788 <aes256_xorcolumns>
    bl      inv_shiftrows_1
 8001c28:	f7ff fe98 	bl	800195c <inv_shiftrows_1>
    bl      sbox                    // apply the sbox to the master key
 8001c2c:	f7ff faba 	bl	80011a4 <sbox>
    eor     r6, r6, #0x00000300     // add the 6th rconst
 8001c30:	f486 7640 	eor.w	r6, r6, #768	@ 0x300
    bl      aes256_xorcolumns_rotword
 8001c34:	f7ff fcbe 	bl	80015b4 <aes256_xorcolumns_rotword>
    bl      inv_shiftrows_2
 8001c38:	f7ff feb8 	bl	80019ac <inv_shiftrows_2>
    bl      sbox                    // apply the sbox to the master key
 8001c3c:	f7ff fab2 	bl	80011a4 <sbox>
    bl      aes256_xorcolumns
 8001c40:	f7ff fda2 	bl	8001788 <aes256_xorcolumns>
    bl      inv_shiftrows_3
 8001c44:	f7ff fece 	bl	80019e4 <inv_shiftrows_3>
    bl      sbox                    // apply the sbox to the master key
 8001c48:	f7ff faac 	bl	80011a4 <sbox>
    eor     r3, r3, #0x00000300     // add the 6th rconst
 8001c4c:	f483 7340 	eor.w	r3, r3, #768	@ 0x300
    bl      aes256_xorcolumns_rotword
 8001c50:	f7ff fcb0 	bl	80015b4 <aes256_xorcolumns_rotword>
    add     r12, #32
 8001c54:	f10c 0c20 	add.w	ip, ip, #32
    bl      inv_shiftrows_1
 8001c58:	f7ff fe80 	bl	800195c <inv_shiftrows_1>
    mvn     r5, r5                  // add the NOT for the last rkey
 8001c5c:	ea6f 0505 	mvn.w	r5, r5
    mvn     r6, r6                  // add the NOT for the last rkey
 8001c60:	ea6f 0606 	mvn.w	r6, r6
    mvn     r10, r10                // add the NOT for the last rkey
 8001c64:	ea6f 0a0a 	mvn.w	sl, sl
    mvn     r11, r11                // add the NOT for the last rkey
 8001c68:	ea6f 0b0b 	mvn.w	fp, fp
    ldrd    r0, r1, [r12, #-28]
 8001c6c:	e95c 0107 	ldrd	r0, r1, [ip, #-28]
    ldrd    r2, r3, [r12, #-8]
 8001c70:	e95c 2302 	ldrd	r2, r3, [ip, #-8]
    strd    r5, r6, [r12, #4]
 8001c74:	e9cc 5601 	strd	r5, r6, [ip, #4]
    strd    r10, r11, [r12, #24]
 8001c78:	e9cc ab06 	strd	sl, fp, [ip, #24]
    mvn     r0, r0                  // add the NOT for the penultimate rkey
 8001c7c:	ea6f 0000 	mvn.w	r0, r0
    mvn     r1, r1                  // add the NOT for the penultimate rkey
 8001c80:	ea6f 0101 	mvn.w	r1, r1
    mvn     r2, r2                  // add the NOT for the penultimate rkey
 8001c84:	ea6f 0202 	mvn.w	r2, r2
    mvn     r3, r3                  // add the NOT for the penultimate rkey
 8001c88:	ea6f 0303 	mvn.w	r3, r3
    ldrd    r5, r6, [r12, #-444]
 8001c8c:	e95c 566f 	ldrd	r5, r6, [ip, #-444]	@ 0x1bc
    ldrd    r10, r11, [r12, #-424]
 8001c90:	e95c ab6a 	ldrd	sl, fp, [ip, #-424]	@ 0x1a8
    strd    r0, r1, [r12, #-28]
 8001c94:	e94c 0107 	strd	r0, r1, [ip, #-28]
    strd    r2, r3, [r12, #-8]
 8001c98:	e94c 2302 	strd	r2, r3, [ip, #-8]
    mvn     r5, r5                  // remove the NOT for the key whitening
 8001c9c:	ea6f 0505 	mvn.w	r5, r5
    mvn     r6, r6                  // remove the NOT for the key whitening
 8001ca0:	ea6f 0606 	mvn.w	r6, r6
    mvn     r10, r10                // remove the NOT for the key whitening
 8001ca4:	ea6f 0a0a 	mvn.w	sl, sl
    mvn     r11, r11                // remove the NOT for the key whitening
 8001ca8:	ea6f 0b0b 	mvn.w	fp, fp
    strd    r5, r6, [r12, #-444]
 8001cac:	e94c 566f 	strd	r5, r6, [ip, #-444]	@ 0x1bc
    strd    r10, r11, [r12, #-424]
 8001cb0:	e94c ab6a 	strd	sl, fp, [ip, #-424]	@ 0x1a8
    add.w   sp, #56                 // restore stack
 8001cb4:	f10d 0d38 	add.w	sp, sp, #56	@ 0x38
    pop     {r0-r12, r14}           // restore context
 8001cb8:	e8bd 5fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop

08001cc0 <aes128_keyschedule_sfs>:

.global aes128_keyschedule_sfs
.type   aes128_keyschedule_sfs,%function
.align 2
aes128_keyschedule_sfs:
    push    {r0-r12,r14}
 8001cc0:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8001cc4:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r1]                // load the 128-bit key in r4-r7
 8001cc8:	f8d1 4000 	ldr.w	r4, [r1]
    ldr     r5, [r1, #4]
 8001ccc:	684d      	ldr	r5, [r1, #4]
    ldr     r6, [r1, #8]
 8001cce:	688e      	ldr	r6, [r1, #8]
    ldr     r7, [r1, #12]
 8001cd0:	68cf      	ldr	r7, [r1, #12]
    ldr.w   r8, [r1]                // load the 128-bit key in r8-r11
 8001cd2:	f8d1 8000 	ldr.w	r8, [r1]
    ldr     r9, [r1, #4]
 8001cd6:	f8d1 9004 	ldr.w	r9, [r1, #4]
    ldr     r10,[r1, #8]
 8001cda:	f8d1 a008 	ldr.w	sl, [r1, #8]
    ldr     r11,[r1, #12]
 8001cde:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    bl      packing                 // pack the master key
 8001ce2:	f7ff f9f5 	bl	80010d0 <packing>
    ldr.w   r0, [sp, #56]           // restore 'rkeys' address
 8001ce6:	f8dd 0038 	ldr.w	r0, [sp, #56]	@ 0x38
    stm     r0, {r4-r11}            // store the packed master key in 'rkeys'
 8001cea:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
    bl      sbox                    // apply the sbox to the master key
 8001cee:	f7ff fa59 	bl	80011a4 <sbox>
    eor     r11, r11, #0x00000300   // add the 1st rconst
 8001cf2:	f48b 7b40 	eor.w	fp, fp, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001cf6:	f7ff fb73 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001cfa:	f7ff fa53 	bl	80011a4 <sbox>
    eor     r2, r2, #0x00000300     // add the 2nd rconst
 8001cfe:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001d02:	f7ff fb6d 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      inv_shiftrows_1
 8001d06:	f7ff fe29 	bl	800195c <inv_shiftrows_1>
    bl      sbox                    // apply the sbox to the master key
 8001d0a:	f7ff fa4b 	bl	80011a4 <sbox>
    eor     r0, r0, #0x00000300     // add the 3rd rconst
 8001d0e:	f480 7040 	eor.w	r0, r0, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001d12:	f7ff fb65 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001d16:	f7ff fa45 	bl	80011a4 <sbox>
    eor     r8, r8, #0x00000300     // add the 4th rconst
 8001d1a:	f488 7840 	eor.w	r8, r8, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001d1e:	f7ff fb5f 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      inv_shiftrows_1
 8001d22:	f7ff fe1b 	bl	800195c <inv_shiftrows_1>
    bl      sbox                    // apply the sbox to the master key
 8001d26:	f7ff fa3d 	bl	80011a4 <sbox>
    eor     r7, r7, #0x00000300     // add the 5th rconst
 8001d2a:	f487 7740 	eor.w	r7, r7, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001d2e:	f7ff fb57 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001d32:	f7ff fa37 	bl	80011a4 <sbox>
    eor     r6, r6, #0x00000300     // add the 6th rconst
 8001d36:	f486 7640 	eor.w	r6, r6, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001d3a:	f7ff fb51 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      inv_shiftrows_1
 8001d3e:	f7ff fe0d 	bl	800195c <inv_shiftrows_1>
    bl      sbox                    // apply the sbox to the master key
 8001d42:	f7ff fa2f 	bl	80011a4 <sbox>
    eor     r3, r3, #0x00000300     // add the 7th rconst
 8001d46:	f483 7340 	eor.w	r3, r3, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001d4a:	f7ff fb49 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001d4e:	f7ff fa29 	bl	80011a4 <sbox>
    eor     r1, r1, #0x00000300     // add the 8th rconst
 8001d52:	f481 7140 	eor.w	r1, r1, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001d56:	f7ff fb43 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      inv_shiftrows_1
 8001d5a:	f7ff fdff 	bl	800195c <inv_shiftrows_1>
    bl      sbox                    // apply the sbox to the master key
 8001d5e:	f7ff fa21 	bl	80011a4 <sbox>
    eor     r11, r11, #0x00000300   // add the 9th rconst
 8001d62:	f48b 7b40 	eor.w	fp, fp, #768	@ 0x300
    eor     r2, r2, #0x00000300     // add the 9th rconst
 8001d66:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
    eor     r8, r8, #0x00000300     // add the 9th rconst
 8001d6a:	f488 7840 	eor.w	r8, r8, #768	@ 0x300
    eor     r7, r7, #0x00000300     // add the 9th rconst
 8001d6e:	f487 7740 	eor.w	r7, r7, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001d72:	f7ff fb35 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001d76:	f7ff fa15 	bl	80011a4 <sbox>
    eor     r2, r2, #0x00000300     // add the 10th rconst
 8001d7a:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
    eor     r0, r0, #0x00000300     // add the 10th rconst
 8001d7e:	f480 7040 	eor.w	r0, r0, #768	@ 0x300
    eor     r7, r7, #0x00000300     // add the 10th rconst
 8001d82:	f487 7740 	eor.w	r7, r7, #768	@ 0x300
    eor     r6, r6, #0x00000300     // add the 10th rconst
 8001d86:	f486 7640 	eor.w	r6, r6, #768	@ 0x300
    bl      aes128_xorcolumns_rotword
 8001d8a:	f7ff fb29 	bl	80013e0 <aes128_xorcolumns_rotword>
    bl      inv_shiftrows_1
 8001d8e:	f7ff fde5 	bl	800195c <inv_shiftrows_1>
    mvn     r5, r5                  // add the NOT for the last rkey
 8001d92:	ea6f 0505 	mvn.w	r5, r5
    mvn     r6, r6                  // add the NOT for the last rkey
 8001d96:	ea6f 0606 	mvn.w	r6, r6
    mvn     r10, r10                // add the NOT for the last rkey
 8001d9a:	ea6f 0a0a 	mvn.w	sl, sl
    mvn     r11, r11                // add the NOT for the last rkey
 8001d9e:	ea6f 0b0b 	mvn.w	fp, fp
    strd    r5, r6, [r12, #4]
 8001da2:	e9cc 5601 	strd	r5, r6, [ip, #4]
    strd    r10, r11, [r12, #24]
 8001da6:	e9cc ab06 	strd	sl, fp, [ip, #24]
    ldrd    r0, r1, [r12, #-316]
 8001daa:	e95c 014f 	ldrd	r0, r1, [ip, #-316]	@ 0x13c
    ldrd    r2, r3, [r12, #-296]
 8001dae:	e95c 234a 	ldrd	r2, r3, [ip, #-296]	@ 0x128
    mvn     r0, r0                  // remove the NOT for the key whitening
 8001db2:	ea6f 0000 	mvn.w	r0, r0
    mvn     r1, r1                  // remove the NOT for the key whitening
 8001db6:	ea6f 0101 	mvn.w	r1, r1
    mvn     r2, r2                  // remove the NOT for the key whitening
 8001dba:	ea6f 0202 	mvn.w	r2, r2
    mvn     r3, r3                  // remove the NOT for the key whitening
 8001dbe:	ea6f 0303 	mvn.w	r3, r3
    strd    r0, r1, [r12, #-316]
 8001dc2:	e94c 014f 	strd	r0, r1, [ip, #-316]	@ 0x13c
    strd    r2, r3, [r12, #-296]
 8001dc6:	e94c 234a 	strd	r2, r3, [ip, #-296]	@ 0x128
    add.w   sp, #56                 // restore stack
 8001dca:	f10d 0d38 	add.w	sp, sp, #56	@ 0x38
    pop     {r0-r12, r14}           // restore context
 8001dce:	e8bd 5fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8001dd2:	4770      	bx	lr

08001dd4 <aes256_keyschedule_sfs>:
@ void aes256_keyschedule_sfs(u32* rkeys, const u8* key);
.global aes256_keyschedule_sfs
.type   aes256_keyschedule_sfs,%function
.align 2
aes256_keyschedule_sfs:
    push    {r0-r12,r14}
 8001dd4:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    sub.w   sp, #56                 // allow space on the stack for tmp var
 8001dd8:	f1ad 0d38 	sub.w	sp, sp, #56	@ 0x38
    ldr.w   r4, [r1]                // load the 128 first key bits in r4-r7
 8001ddc:	f8d1 4000 	ldr.w	r4, [r1]
    ldr     r5, [r1, #4]
 8001de0:	684d      	ldr	r5, [r1, #4]
    ldr     r6, [r1, #8]
 8001de2:	688e      	ldr	r6, [r1, #8]
    ldr     r7, [r1, #12]
 8001de4:	68cf      	ldr	r7, [r1, #12]
    ldr.w   r8, [r1]                // load the 128 first key bits in r8-r11
 8001de6:	f8d1 8000 	ldr.w	r8, [r1]
    ldr     r9, [r1, #4]
 8001dea:	f8d1 9004 	ldr.w	r9, [r1, #4]
    ldr     r10,[r1, #8]
 8001dee:	f8d1 a008 	ldr.w	sl, [r1, #8]
    ldr     r11,[r1, #12]
 8001df2:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    bl      packing                 // pack the master key
 8001df6:	f7ff f96b 	bl	80010d0 <packing>
    ldrd    r0,r1, [sp, #56]        // restore 'rkeys' and 'key' addresses
 8001dfa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
    stm     r0, {r4-r11}            // store the packed master key in 'rkeys'
 8001dfe:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
    add.w   r1, #16                 // points to the 128 last bits of the key
 8001e02:	f101 0110 	add.w	r1, r1, #16
    ldr.w   r4, [r1]                // load the 128 first key bits in r4-r7
 8001e06:	f8d1 4000 	ldr.w	r4, [r1]
    ldr     r5, [r1, #4]
 8001e0a:	684d      	ldr	r5, [r1, #4]
    ldr     r6, [r1, #8]
 8001e0c:	688e      	ldr	r6, [r1, #8]
    ldr     r7, [r1, #12]
 8001e0e:	68cf      	ldr	r7, [r1, #12]
    ldr.w   r8, [r1]                // load the 128 first key bits in r8-r11
 8001e10:	f8d1 8000 	ldr.w	r8, [r1]
    ldr     r9, [r1, #4]
 8001e14:	f8d1 9004 	ldr.w	r9, [r1, #4]
    ldr     r10,[r1, #8]
 8001e18:	f8d1 a008 	ldr.w	sl, [r1, #8]
    ldr     r11,[r1, #12]
 8001e1c:	f8d1 b00c 	ldr.w	fp, [r1, #12]
    bl      packing                 // pack the master key
 8001e20:	f7ff f956 	bl	80010d0 <packing>
    ldr.w   r0, [sp, #56]           // restore 'rkeys' address
 8001e24:	f8dd 0038 	ldr.w	r0, [sp, #56]	@ 0x38
    add.w   r0, #32                 // points to the 128 last bits of the key
 8001e28:	f100 0020 	add.w	r0, r0, #32
    stm     r0, {r4-r11}            // store the packed master key in 'rkeys'
 8001e2c:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
    bl      sbox                    // apply the sbox to the master key
 8001e30:	f7ff f9b8 	bl	80011a4 <sbox>
    eor     r11, r11, #0x00000300   // add the 1st rconst
 8001e34:	f48b 7b40 	eor.w	fp, fp, #768	@ 0x300
    bl      aes256_xorcolumns_rotword
 8001e38:	f7ff fbbc 	bl	80015b4 <aes256_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001e3c:	f7ff f9b2 	bl	80011a4 <sbox>
    bl      aes256_xorcolumns
 8001e40:	f7ff fca2 	bl	8001788 <aes256_xorcolumns>
    bl      inv_shiftrows_1
 8001e44:	f7ff fd8a 	bl	800195c <inv_shiftrows_1>
    bl      sbox                    // apply the sbox to the master key
 8001e48:	f7ff f9ac 	bl	80011a4 <sbox>
    eor     r2, r2, #0x00000300     // add the 2nd rconst
 8001e4c:	f482 7240 	eor.w	r2, r2, #768	@ 0x300
    bl      aes256_xorcolumns_rotword
 8001e50:	f7ff fbb0 	bl	80015b4 <aes256_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001e54:	f7ff f9a6 	bl	80011a4 <sbox>
    bl      aes256_xorcolumns
 8001e58:	f7ff fc96 	bl	8001788 <aes256_xorcolumns>
    bl      inv_shiftrows_1
 8001e5c:	f7ff fd7e 	bl	800195c <inv_shiftrows_1>
    bl      sbox                    // apply the sbox to the master key
 8001e60:	f7ff f9a0 	bl	80011a4 <sbox>
    eor     r0, r0, #0x00000300     // add the 3rd rconst
 8001e64:	f480 7040 	eor.w	r0, r0, #768	@ 0x300
    bl      aes256_xorcolumns_rotword
 8001e68:	f7ff fba4 	bl	80015b4 <aes256_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001e6c:	f7ff f99a 	bl	80011a4 <sbox>
    bl      aes256_xorcolumns
 8001e70:	f7ff fc8a 	bl	8001788 <aes256_xorcolumns>
    bl      inv_shiftrows_1
 8001e74:	f7ff fd72 	bl	800195c <inv_shiftrows_1>
    bl      sbox                    // apply the sbox to the master key
 8001e78:	f7ff f994 	bl	80011a4 <sbox>
    eor     r8, r8, #0x00000300     // add the 4th rconst
 8001e7c:	f488 7840 	eor.w	r8, r8, #768	@ 0x300
    bl      aes256_xorcolumns_rotword
 8001e80:	f7ff fb98 	bl	80015b4 <aes256_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001e84:	f7ff f98e 	bl	80011a4 <sbox>
    bl      aes256_xorcolumns
 8001e88:	f7ff fc7e 	bl	8001788 <aes256_xorcolumns>
    bl      inv_shiftrows_1
 8001e8c:	f7ff fd66 	bl	800195c <inv_shiftrows_1>
    bl      sbox                    // apply the sbox to the master key
 8001e90:	f7ff f988 	bl	80011a4 <sbox>
    eor     r7, r7, #0x00000300     // add the 5th rconst
 8001e94:	f487 7740 	eor.w	r7, r7, #768	@ 0x300
    bl      aes256_xorcolumns_rotword
 8001e98:	f7ff fb8c 	bl	80015b4 <aes256_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001e9c:	f7ff f982 	bl	80011a4 <sbox>
    bl      aes256_xorcolumns
 8001ea0:	f7ff fc72 	bl	8001788 <aes256_xorcolumns>
    bl      inv_shiftrows_1
 8001ea4:	f7ff fd5a 	bl	800195c <inv_shiftrows_1>
    bl      sbox                    // apply the sbox to the master key
 8001ea8:	f7ff f97c 	bl	80011a4 <sbox>
    eor     r6, r6, #0x00000300     // add the 6th rconst
 8001eac:	f486 7640 	eor.w	r6, r6, #768	@ 0x300
    bl      aes256_xorcolumns_rotword
 8001eb0:	f7ff fb80 	bl	80015b4 <aes256_xorcolumns_rotword>
    bl      sbox                    // apply the sbox to the master key
 8001eb4:	f7ff f976 	bl	80011a4 <sbox>
    bl      aes256_xorcolumns
 8001eb8:	f7ff fc66 	bl	8001788 <aes256_xorcolumns>
    bl      inv_shiftrows_1
 8001ebc:	f7ff fd4e 	bl	800195c <inv_shiftrows_1>
    bl      sbox                    // apply the sbox to the master key
 8001ec0:	f7ff f970 	bl	80011a4 <sbox>
    eor     r3, r3, #0x00000300     // add the 6th rconst
 8001ec4:	f483 7340 	eor.w	r3, r3, #768	@ 0x300
    bl      aes256_xorcolumns_rotword
 8001ec8:	f7ff fb74 	bl	80015b4 <aes256_xorcolumns_rotword>
    add     r12, #32
 8001ecc:	f10c 0c20 	add.w	ip, ip, #32
    bl      inv_shiftrows_1
 8001ed0:	f7ff fd44 	bl	800195c <inv_shiftrows_1>
    mvn     r5, r5                  // add the NOT for the last rkey
 8001ed4:	ea6f 0505 	mvn.w	r5, r5
    mvn     r6, r6                  // add the NOT for the last rkey
 8001ed8:	ea6f 0606 	mvn.w	r6, r6
    mvn     r10, r10                // add the NOT for the last rkey
 8001edc:	ea6f 0a0a 	mvn.w	sl, sl
    mvn     r11, r11                // add the NOT for the last rkey
 8001ee0:	ea6f 0b0b 	mvn.w	fp, fp
    ldrd    r0, r1, [r12, #-28]
 8001ee4:	e95c 0107 	ldrd	r0, r1, [ip, #-28]
    ldrd    r2, r3, [r12, #-8]
 8001ee8:	e95c 2302 	ldrd	r2, r3, [ip, #-8]
    strd    r5, r6, [r12, #4]
 8001eec:	e9cc 5601 	strd	r5, r6, [ip, #4]
    strd    r10, r11, [r12, #24]
 8001ef0:	e9cc ab06 	strd	sl, fp, [ip, #24]
    mvn     r0, r0                  // add the NOT for the penultimate rkey
 8001ef4:	ea6f 0000 	mvn.w	r0, r0
    mvn     r1, r1                  // add the NOT for the penultimate rkey
 8001ef8:	ea6f 0101 	mvn.w	r1, r1
    mvn     r2, r2                  // add the NOT for the penultimate rkey
 8001efc:	ea6f 0202 	mvn.w	r2, r2
    mvn     r3, r3                  // add the NOT for the penultimate rkey
 8001f00:	ea6f 0303 	mvn.w	r3, r3
    ldrd    r5, r6, [r12, #-444]
 8001f04:	e95c 566f 	ldrd	r5, r6, [ip, #-444]	@ 0x1bc
    ldrd    r10, r11, [r12, #-424]
 8001f08:	e95c ab6a 	ldrd	sl, fp, [ip, #-424]	@ 0x1a8
    strd    r0, r1, [r12, #-28]
 8001f0c:	e94c 0107 	strd	r0, r1, [ip, #-28]
    strd    r2, r3, [r12, #-8]
 8001f10:	e94c 2302 	strd	r2, r3, [ip, #-8]
    mvn     r5, r5                  // remove the NOT for the key whitening
 8001f14:	ea6f 0505 	mvn.w	r5, r5
    mvn     r6, r6                  // remove the NOT for the key whitening
 8001f18:	ea6f 0606 	mvn.w	r6, r6
    mvn     r10, r10                // remove the NOT for the key whitening
 8001f1c:	ea6f 0a0a 	mvn.w	sl, sl
    mvn     r11, r11                // remove the NOT for the key whitening
 8001f20:	ea6f 0b0b 	mvn.w	fp, fp
    strd    r5, r6, [r12, #-444]
 8001f24:	e94c 566f 	strd	r5, r6, [ip, #-444]	@ 0x1bc
    strd    r10, r11, [r12, #-424]
 8001f28:	e94c ab6a 	strd	sl, fp, [ip, #-424]	@ 0x1a8
    add.w   sp, #56                 // restore stack
 8001f2c:	f10d 0d38 	add.w	sp, sp, #56	@ 0x38
    pop     {r0-r12, r14}           // restore context
 8001f30:	e8bd 5fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    bx      lr
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
	...

08001f40 <memchr>:
 8001f40:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8001f44:	2a10      	cmp	r2, #16
 8001f46:	db2b      	blt.n	8001fa0 <memchr+0x60>
 8001f48:	f010 0f07 	tst.w	r0, #7
 8001f4c:	d008      	beq.n	8001f60 <memchr+0x20>
 8001f4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001f52:	3a01      	subs	r2, #1
 8001f54:	428b      	cmp	r3, r1
 8001f56:	d02d      	beq.n	8001fb4 <memchr+0x74>
 8001f58:	f010 0f07 	tst.w	r0, #7
 8001f5c:	b342      	cbz	r2, 8001fb0 <memchr+0x70>
 8001f5e:	d1f6      	bne.n	8001f4e <memchr+0xe>
 8001f60:	b4f0      	push	{r4, r5, r6, r7}
 8001f62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001f66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8001f6a:	f022 0407 	bic.w	r4, r2, #7
 8001f6e:	f07f 0700 	mvns.w	r7, #0
 8001f72:	2300      	movs	r3, #0
 8001f74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001f78:	3c08      	subs	r4, #8
 8001f7a:	ea85 0501 	eor.w	r5, r5, r1
 8001f7e:	ea86 0601 	eor.w	r6, r6, r1
 8001f82:	fa85 f547 	uadd8	r5, r5, r7
 8001f86:	faa3 f587 	sel	r5, r3, r7
 8001f8a:	fa86 f647 	uadd8	r6, r6, r7
 8001f8e:	faa5 f687 	sel	r6, r5, r7
 8001f92:	b98e      	cbnz	r6, 8001fb8 <memchr+0x78>
 8001f94:	d1ee      	bne.n	8001f74 <memchr+0x34>
 8001f96:	bcf0      	pop	{r4, r5, r6, r7}
 8001f98:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8001f9c:	f002 0207 	and.w	r2, r2, #7
 8001fa0:	b132      	cbz	r2, 8001fb0 <memchr+0x70>
 8001fa2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001fa6:	3a01      	subs	r2, #1
 8001fa8:	ea83 0301 	eor.w	r3, r3, r1
 8001fac:	b113      	cbz	r3, 8001fb4 <memchr+0x74>
 8001fae:	d1f8      	bne.n	8001fa2 <memchr+0x62>
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	4770      	bx	lr
 8001fb4:	3801      	subs	r0, #1
 8001fb6:	4770      	bx	lr
 8001fb8:	2d00      	cmp	r5, #0
 8001fba:	bf06      	itte	eq
 8001fbc:	4635      	moveq	r5, r6
 8001fbe:	3803      	subeq	r0, #3
 8001fc0:	3807      	subne	r0, #7
 8001fc2:	f015 0f01 	tst.w	r5, #1
 8001fc6:	d107      	bne.n	8001fd8 <memchr+0x98>
 8001fc8:	3001      	adds	r0, #1
 8001fca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8001fce:	bf02      	ittt	eq
 8001fd0:	3001      	addeq	r0, #1
 8001fd2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8001fd6:	3001      	addeq	r0, #1
 8001fd8:	bcf0      	pop	{r4, r5, r6, r7}
 8001fda:	3801      	subs	r0, #1
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop

08001fe0 <__aeabi_uldivmod>:
 8001fe0:	b953      	cbnz	r3, 8001ff8 <__aeabi_uldivmod+0x18>
 8001fe2:	b94a      	cbnz	r2, 8001ff8 <__aeabi_uldivmod+0x18>
 8001fe4:	2900      	cmp	r1, #0
 8001fe6:	bf08      	it	eq
 8001fe8:	2800      	cmpeq	r0, #0
 8001fea:	bf1c      	itt	ne
 8001fec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001ff0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001ff4:	f000 b96a 	b.w	80022cc <__aeabi_idiv0>
 8001ff8:	f1ad 0c08 	sub.w	ip, sp, #8
 8001ffc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8002000:	f000 f806 	bl	8002010 <__udivmoddi4>
 8002004:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800200c:	b004      	add	sp, #16
 800200e:	4770      	bx	lr

08002010 <__udivmoddi4>:
 8002010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002014:	9d08      	ldr	r5, [sp, #32]
 8002016:	460c      	mov	r4, r1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d14e      	bne.n	80020ba <__udivmoddi4+0xaa>
 800201c:	4694      	mov	ip, r2
 800201e:	458c      	cmp	ip, r1
 8002020:	4686      	mov	lr, r0
 8002022:	fab2 f282 	clz	r2, r2
 8002026:	d962      	bls.n	80020ee <__udivmoddi4+0xde>
 8002028:	b14a      	cbz	r2, 800203e <__udivmoddi4+0x2e>
 800202a:	f1c2 0320 	rsb	r3, r2, #32
 800202e:	4091      	lsls	r1, r2
 8002030:	fa20 f303 	lsr.w	r3, r0, r3
 8002034:	fa0c fc02 	lsl.w	ip, ip, r2
 8002038:	4319      	orrs	r1, r3
 800203a:	fa00 fe02 	lsl.w	lr, r0, r2
 800203e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002042:	fa1f f68c 	uxth.w	r6, ip
 8002046:	fbb1 f4f7 	udiv	r4, r1, r7
 800204a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800204e:	fb07 1114 	mls	r1, r7, r4, r1
 8002052:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002056:	fb04 f106 	mul.w	r1, r4, r6
 800205a:	4299      	cmp	r1, r3
 800205c:	d90a      	bls.n	8002074 <__udivmoddi4+0x64>
 800205e:	eb1c 0303 	adds.w	r3, ip, r3
 8002062:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8002066:	f080 8112 	bcs.w	800228e <__udivmoddi4+0x27e>
 800206a:	4299      	cmp	r1, r3
 800206c:	f240 810f 	bls.w	800228e <__udivmoddi4+0x27e>
 8002070:	3c02      	subs	r4, #2
 8002072:	4463      	add	r3, ip
 8002074:	1a59      	subs	r1, r3, r1
 8002076:	fa1f f38e 	uxth.w	r3, lr
 800207a:	fbb1 f0f7 	udiv	r0, r1, r7
 800207e:	fb07 1110 	mls	r1, r7, r0, r1
 8002082:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002086:	fb00 f606 	mul.w	r6, r0, r6
 800208a:	429e      	cmp	r6, r3
 800208c:	d90a      	bls.n	80020a4 <__udivmoddi4+0x94>
 800208e:	eb1c 0303 	adds.w	r3, ip, r3
 8002092:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8002096:	f080 80fc 	bcs.w	8002292 <__udivmoddi4+0x282>
 800209a:	429e      	cmp	r6, r3
 800209c:	f240 80f9 	bls.w	8002292 <__udivmoddi4+0x282>
 80020a0:	4463      	add	r3, ip
 80020a2:	3802      	subs	r0, #2
 80020a4:	1b9b      	subs	r3, r3, r6
 80020a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80020aa:	2100      	movs	r1, #0
 80020ac:	b11d      	cbz	r5, 80020b6 <__udivmoddi4+0xa6>
 80020ae:	40d3      	lsrs	r3, r2
 80020b0:	2200      	movs	r2, #0
 80020b2:	e9c5 3200 	strd	r3, r2, [r5]
 80020b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020ba:	428b      	cmp	r3, r1
 80020bc:	d905      	bls.n	80020ca <__udivmoddi4+0xba>
 80020be:	b10d      	cbz	r5, 80020c4 <__udivmoddi4+0xb4>
 80020c0:	e9c5 0100 	strd	r0, r1, [r5]
 80020c4:	2100      	movs	r1, #0
 80020c6:	4608      	mov	r0, r1
 80020c8:	e7f5      	b.n	80020b6 <__udivmoddi4+0xa6>
 80020ca:	fab3 f183 	clz	r1, r3
 80020ce:	2900      	cmp	r1, #0
 80020d0:	d146      	bne.n	8002160 <__udivmoddi4+0x150>
 80020d2:	42a3      	cmp	r3, r4
 80020d4:	d302      	bcc.n	80020dc <__udivmoddi4+0xcc>
 80020d6:	4290      	cmp	r0, r2
 80020d8:	f0c0 80f0 	bcc.w	80022bc <__udivmoddi4+0x2ac>
 80020dc:	1a86      	subs	r6, r0, r2
 80020de:	eb64 0303 	sbc.w	r3, r4, r3
 80020e2:	2001      	movs	r0, #1
 80020e4:	2d00      	cmp	r5, #0
 80020e6:	d0e6      	beq.n	80020b6 <__udivmoddi4+0xa6>
 80020e8:	e9c5 6300 	strd	r6, r3, [r5]
 80020ec:	e7e3      	b.n	80020b6 <__udivmoddi4+0xa6>
 80020ee:	2a00      	cmp	r2, #0
 80020f0:	f040 8090 	bne.w	8002214 <__udivmoddi4+0x204>
 80020f4:	eba1 040c 	sub.w	r4, r1, ip
 80020f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80020fc:	fa1f f78c 	uxth.w	r7, ip
 8002100:	2101      	movs	r1, #1
 8002102:	fbb4 f6f8 	udiv	r6, r4, r8
 8002106:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800210a:	fb08 4416 	mls	r4, r8, r6, r4
 800210e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002112:	fb07 f006 	mul.w	r0, r7, r6
 8002116:	4298      	cmp	r0, r3
 8002118:	d908      	bls.n	800212c <__udivmoddi4+0x11c>
 800211a:	eb1c 0303 	adds.w	r3, ip, r3
 800211e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8002122:	d202      	bcs.n	800212a <__udivmoddi4+0x11a>
 8002124:	4298      	cmp	r0, r3
 8002126:	f200 80cd 	bhi.w	80022c4 <__udivmoddi4+0x2b4>
 800212a:	4626      	mov	r6, r4
 800212c:	1a1c      	subs	r4, r3, r0
 800212e:	fa1f f38e 	uxth.w	r3, lr
 8002132:	fbb4 f0f8 	udiv	r0, r4, r8
 8002136:	fb08 4410 	mls	r4, r8, r0, r4
 800213a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800213e:	fb00 f707 	mul.w	r7, r0, r7
 8002142:	429f      	cmp	r7, r3
 8002144:	d908      	bls.n	8002158 <__udivmoddi4+0x148>
 8002146:	eb1c 0303 	adds.w	r3, ip, r3
 800214a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800214e:	d202      	bcs.n	8002156 <__udivmoddi4+0x146>
 8002150:	429f      	cmp	r7, r3
 8002152:	f200 80b0 	bhi.w	80022b6 <__udivmoddi4+0x2a6>
 8002156:	4620      	mov	r0, r4
 8002158:	1bdb      	subs	r3, r3, r7
 800215a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800215e:	e7a5      	b.n	80020ac <__udivmoddi4+0x9c>
 8002160:	f1c1 0620 	rsb	r6, r1, #32
 8002164:	408b      	lsls	r3, r1
 8002166:	fa22 f706 	lsr.w	r7, r2, r6
 800216a:	431f      	orrs	r7, r3
 800216c:	fa20 fc06 	lsr.w	ip, r0, r6
 8002170:	fa04 f301 	lsl.w	r3, r4, r1
 8002174:	ea43 030c 	orr.w	r3, r3, ip
 8002178:	40f4      	lsrs	r4, r6
 800217a:	fa00 f801 	lsl.w	r8, r0, r1
 800217e:	0c38      	lsrs	r0, r7, #16
 8002180:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8002184:	fbb4 fef0 	udiv	lr, r4, r0
 8002188:	fa1f fc87 	uxth.w	ip, r7
 800218c:	fb00 441e 	mls	r4, r0, lr, r4
 8002190:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8002194:	fb0e f90c 	mul.w	r9, lr, ip
 8002198:	45a1      	cmp	r9, r4
 800219a:	fa02 f201 	lsl.w	r2, r2, r1
 800219e:	d90a      	bls.n	80021b6 <__udivmoddi4+0x1a6>
 80021a0:	193c      	adds	r4, r7, r4
 80021a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80021a6:	f080 8084 	bcs.w	80022b2 <__udivmoddi4+0x2a2>
 80021aa:	45a1      	cmp	r9, r4
 80021ac:	f240 8081 	bls.w	80022b2 <__udivmoddi4+0x2a2>
 80021b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80021b4:	443c      	add	r4, r7
 80021b6:	eba4 0409 	sub.w	r4, r4, r9
 80021ba:	fa1f f983 	uxth.w	r9, r3
 80021be:	fbb4 f3f0 	udiv	r3, r4, r0
 80021c2:	fb00 4413 	mls	r4, r0, r3, r4
 80021c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80021ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80021ce:	45a4      	cmp	ip, r4
 80021d0:	d907      	bls.n	80021e2 <__udivmoddi4+0x1d2>
 80021d2:	193c      	adds	r4, r7, r4
 80021d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80021d8:	d267      	bcs.n	80022aa <__udivmoddi4+0x29a>
 80021da:	45a4      	cmp	ip, r4
 80021dc:	d965      	bls.n	80022aa <__udivmoddi4+0x29a>
 80021de:	3b02      	subs	r3, #2
 80021e0:	443c      	add	r4, r7
 80021e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80021e6:	fba0 9302 	umull	r9, r3, r0, r2
 80021ea:	eba4 040c 	sub.w	r4, r4, ip
 80021ee:	429c      	cmp	r4, r3
 80021f0:	46ce      	mov	lr, r9
 80021f2:	469c      	mov	ip, r3
 80021f4:	d351      	bcc.n	800229a <__udivmoddi4+0x28a>
 80021f6:	d04e      	beq.n	8002296 <__udivmoddi4+0x286>
 80021f8:	b155      	cbz	r5, 8002210 <__udivmoddi4+0x200>
 80021fa:	ebb8 030e 	subs.w	r3, r8, lr
 80021fe:	eb64 040c 	sbc.w	r4, r4, ip
 8002202:	fa04 f606 	lsl.w	r6, r4, r6
 8002206:	40cb      	lsrs	r3, r1
 8002208:	431e      	orrs	r6, r3
 800220a:	40cc      	lsrs	r4, r1
 800220c:	e9c5 6400 	strd	r6, r4, [r5]
 8002210:	2100      	movs	r1, #0
 8002212:	e750      	b.n	80020b6 <__udivmoddi4+0xa6>
 8002214:	f1c2 0320 	rsb	r3, r2, #32
 8002218:	fa20 f103 	lsr.w	r1, r0, r3
 800221c:	fa0c fc02 	lsl.w	ip, ip, r2
 8002220:	fa24 f303 	lsr.w	r3, r4, r3
 8002224:	4094      	lsls	r4, r2
 8002226:	430c      	orrs	r4, r1
 8002228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800222c:	fa00 fe02 	lsl.w	lr, r0, r2
 8002230:	fa1f f78c 	uxth.w	r7, ip
 8002234:	fbb3 f0f8 	udiv	r0, r3, r8
 8002238:	fb08 3110 	mls	r1, r8, r0, r3
 800223c:	0c23      	lsrs	r3, r4, #16
 800223e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002242:	fb00 f107 	mul.w	r1, r0, r7
 8002246:	4299      	cmp	r1, r3
 8002248:	d908      	bls.n	800225c <__udivmoddi4+0x24c>
 800224a:	eb1c 0303 	adds.w	r3, ip, r3
 800224e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8002252:	d22c      	bcs.n	80022ae <__udivmoddi4+0x29e>
 8002254:	4299      	cmp	r1, r3
 8002256:	d92a      	bls.n	80022ae <__udivmoddi4+0x29e>
 8002258:	3802      	subs	r0, #2
 800225a:	4463      	add	r3, ip
 800225c:	1a5b      	subs	r3, r3, r1
 800225e:	b2a4      	uxth	r4, r4
 8002260:	fbb3 f1f8 	udiv	r1, r3, r8
 8002264:	fb08 3311 	mls	r3, r8, r1, r3
 8002268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800226c:	fb01 f307 	mul.w	r3, r1, r7
 8002270:	42a3      	cmp	r3, r4
 8002272:	d908      	bls.n	8002286 <__udivmoddi4+0x276>
 8002274:	eb1c 0404 	adds.w	r4, ip, r4
 8002278:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800227c:	d213      	bcs.n	80022a6 <__udivmoddi4+0x296>
 800227e:	42a3      	cmp	r3, r4
 8002280:	d911      	bls.n	80022a6 <__udivmoddi4+0x296>
 8002282:	3902      	subs	r1, #2
 8002284:	4464      	add	r4, ip
 8002286:	1ae4      	subs	r4, r4, r3
 8002288:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800228c:	e739      	b.n	8002102 <__udivmoddi4+0xf2>
 800228e:	4604      	mov	r4, r0
 8002290:	e6f0      	b.n	8002074 <__udivmoddi4+0x64>
 8002292:	4608      	mov	r0, r1
 8002294:	e706      	b.n	80020a4 <__udivmoddi4+0x94>
 8002296:	45c8      	cmp	r8, r9
 8002298:	d2ae      	bcs.n	80021f8 <__udivmoddi4+0x1e8>
 800229a:	ebb9 0e02 	subs.w	lr, r9, r2
 800229e:	eb63 0c07 	sbc.w	ip, r3, r7
 80022a2:	3801      	subs	r0, #1
 80022a4:	e7a8      	b.n	80021f8 <__udivmoddi4+0x1e8>
 80022a6:	4631      	mov	r1, r6
 80022a8:	e7ed      	b.n	8002286 <__udivmoddi4+0x276>
 80022aa:	4603      	mov	r3, r0
 80022ac:	e799      	b.n	80021e2 <__udivmoddi4+0x1d2>
 80022ae:	4630      	mov	r0, r6
 80022b0:	e7d4      	b.n	800225c <__udivmoddi4+0x24c>
 80022b2:	46d6      	mov	lr, sl
 80022b4:	e77f      	b.n	80021b6 <__udivmoddi4+0x1a6>
 80022b6:	4463      	add	r3, ip
 80022b8:	3802      	subs	r0, #2
 80022ba:	e74d      	b.n	8002158 <__udivmoddi4+0x148>
 80022bc:	4606      	mov	r6, r0
 80022be:	4623      	mov	r3, r4
 80022c0:	4608      	mov	r0, r1
 80022c2:	e70f      	b.n	80020e4 <__udivmoddi4+0xd4>
 80022c4:	3e02      	subs	r6, #2
 80022c6:	4463      	add	r3, ip
 80022c8:	e730      	b.n	800212c <__udivmoddi4+0x11c>
 80022ca:	bf00      	nop

080022cc <__aeabi_idiv0>:
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop

080022d0 <ELIMAC>:
extern void four_Rounds_aes128_encrypt_ffs(uint8_t* ctext, uint8_t* ctext_bis, const uint8_t* ptext, const uint8_t* ptext_bis, const uint32_t* rkey);
extern void six_Rounds_aes128_encrypt_ffs(uint8_t* ctext, uint8_t* ctext_bis, const uint8_t* ptext, const uint8_t* ptext_bis, const uint32_t* rkey);
extern void eigth_Rounds_aes128_encrypt_ffs(uint8_t* ctext, uint8_t* ctext_bis, const uint8_t* ptext, const uint8_t* ptext_bis, const uint32_t* rkey);


void ELIMAC(unsigned char* plaintext,  const unsigned char plaintext_size, unsigned char* key1, unsigned char* key2, unsigned char rounds, unsigned char* tag){
 80022d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d4:	f5ad 7d65 	sub.w	sp, sp, #916	@ 0x394
 80022d8:	af02      	add	r7, sp, #8
 80022da:	f507 7662 	add.w	r6, r7, #904	@ 0x388
 80022de:	f5a6 765d 	sub.w	r6, r6, #884	@ 0x374
 80022e2:	6030      	str	r0, [r6, #0]
 80022e4:	4608      	mov	r0, r1
 80022e6:	f507 7162 	add.w	r1, r7, #904	@ 0x388
 80022ea:	f5a1 715f 	sub.w	r1, r1, #892	@ 0x37c
 80022ee:	600a      	str	r2, [r1, #0]
 80022f0:	f507 7262 	add.w	r2, r7, #904	@ 0x388
 80022f4:	f5a2 7260 	sub.w	r2, r2, #896	@ 0x380
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 80022fe:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 8002302:	4602      	mov	r2, r0
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	466b      	mov	r3, sp
 8002308:	461e      	mov	r6, r3

    unsigned char ptext0[plaintext_size];
 800230a:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 800230e:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	3b01      	subs	r3, #1
 8002316:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 800231a:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 800231e:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2200      	movs	r2, #0
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	00cb      	lsls	r3, r1, #3
 8002336:	6839      	ldr	r1, [r7, #0]
 8002338:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800233c:	6839      	ldr	r1, [r7, #0]
 800233e:	00ca      	lsls	r2, r1, #3
 8002340:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 8002344:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2200      	movs	r2, #0
 800234c:	469a      	mov	sl, r3
 800234e:	4693      	mov	fp, r2
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800235c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002360:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002364:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 8002368:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	3307      	adds	r3, #7
 8002370:	08db      	lsrs	r3, r3, #3
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	ebad 0d03 	sub.w	sp, sp, r3
 8002378:	ab02      	add	r3, sp, #8
 800237a:	3300      	adds	r3, #0
 800237c:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
    unsigned char ptext1[plaintext_size];
 8002380:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 8002384:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	3b01      	subs	r3, #1
 800238c:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
 8002390:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 8002394:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2200      	movs	r2, #0
 800239c:	4698      	mov	r8, r3
 800239e:	4691      	mov	r9, r2
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023b4:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 80023b8:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	461c      	mov	r4, r3
 80023c2:	4615      	mov	r5, r2
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	00eb      	lsls	r3, r5, #3
 80023ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023d2:	00e2      	lsls	r2, r4, #3
 80023d4:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 80023d8:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	3307      	adds	r3, #7
 80023e0:	08db      	lsrs	r3, r3, #3
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	ebad 0d03 	sub.w	sp, sp, r3
 80023e8:	ab02      	add	r3, sp, #8
 80023ea:	3300      	adds	r3, #0
 80023ec:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c

    unsigned char i_n1[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 80023f0:	4b94      	ldr	r3, [pc, #592]	@ (8002644 <ELIMAC+0x374>)
 80023f2:	f507 7456 	add.w	r4, r7, #856	@ 0x358
 80023f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char i_n2[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 80023fc:	4b91      	ldr	r3, [pc, #580]	@ (8002644 <ELIMAC+0x374>)
 80023fe:	f507 7452 	add.w	r4, r7, #840	@ 0x348
 8002402:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002404:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char i_n1_t[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 8002408:	4b8e      	ldr	r3, [pc, #568]	@ (8002644 <ELIMAC+0x374>)
 800240a:	f507 744e 	add.w	r4, r7, #824	@ 0x338
 800240e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char i_n2_t[16] = {0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};
 8002414:	4b8b      	ldr	r3, [pc, #556]	@ (8002644 <ELIMAC+0x374>)
 8002416:	f507 744a 	add.w	r4, r7, #808	@ 0x328
 800241a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800241c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned char S1[bit_size];
    unsigned char S2[bit_size];

    unsigned int add_nonce_0[4] = {0,0,0,0};
 8002420:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
    unsigned int add_nonce_1[4] = {1,1,1,1};
 800242e:	4b86      	ldr	r3, [pc, #536]	@ (8002648 <ELIMAC+0x378>)
 8002430:	f507 743a 	add.w	r4, r7, #744	@ 0x2e8
 8002434:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002436:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    unsigned int add_nonce_2[4] = {2,2,2,2};
 800243a:	4b84      	ldr	r3, [pc, #528]	@ (800264c <ELIMAC+0x37c>)
 800243c:	f507 7436 	add.w	r4, r7, #728	@ 0x2d8
 8002440:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002442:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    uint32_t rkeys_ffs[88];
    uint32_t rkeys_ffs_H[88];

    for (size_t i = 0; i < plaintext_size; i++)
 8002446:	2300      	movs	r3, #0
 8002448:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 800244c:	e012      	b.n	8002474 <ELIMAC+0x1a4>
    {
        ptext1[i]=0;
 800244e:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8002452:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8002456:	4413      	add	r3, r2
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
        ptext0[i]=0;
 800245c:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8002460:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8002464:	4413      	add	r3, r2
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < plaintext_size; i++)
 800246a:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 800246e:	3301      	adds	r3, #1
 8002470:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8002474:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 8002478:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 8002482:	429a      	cmp	r2, r3
 8002484:	d3e3      	bcc.n	800244e <ELIMAC+0x17e>
    }

    divide_plaintext(plaintext, ptext0, ptext1, plaintext_size);
 8002486:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 800248a:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	f507 7262 	add.w	r2, r7, #904	@ 0x388
 8002494:	f5a2 705d 	sub.w	r0, r2, #884	@ 0x374
 8002498:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 800249c:	f8d7 1374 	ldr.w	r1, [r7, #884]	@ 0x374
 80024a0:	6800      	ldr	r0, [r0, #0]
 80024a2:	f000 face 	bl	8002a42 <divide_plaintext>

    for (size_t i = 0; i < bit_size; i++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 80024ac:	e012      	b.n	80024d4 <ELIMAC+0x204>
    {
        S1[i]=0;
 80024ae:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 80024b2:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80024b6:	4413      	add	r3, r2
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
        S2[i]=0;
 80024bc:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 80024c0:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80024c4:	4413      	add	r3, r2
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < bit_size; i++)
 80024ca:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80024ce:	3301      	adds	r3, #1
 80024d0:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 80024d4:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80024d8:	2b0f      	cmp	r3, #15
 80024da:	d9e8      	bls.n	80024ae <ELIMAC+0x1de>
    }

    aes128_keyschedule_ffs(rkeys_ffs_H, key1);
 80024dc:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 80024e0:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80024e4:	f107 0218 	add.w	r2, r7, #24
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	4610      	mov	r0, r2
 80024ec:	f7ff faa2 	bl	8001a34 <aes128_keyschedule_ffs>
    aes128_keyschedule_ffs(rkeys_ffs, key2);
 80024f0:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 80024f4:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 80024f8:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	4610      	mov	r0, r2
 8002500:	f7ff fa98 	bl	8001a34 <aes128_keyschedule_ffs>

    int block_size = plaintext_size/32;
 8002504:	f507 7362 	add.w	r3, r7, #904	@ 0x388
 8002508:	f2a3 3375 	subw	r3, r3, #885	@ 0x375
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368



    for (int i = 0; i < block_size; i++){
 8002516:	2300      	movs	r3, #0
 8002518:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 800251c:	e06f      	b.n	80025fe <ELIMAC+0x32e>

        add_nonce(add_nonce_0, (unsigned int *)i_n1,(unsigned int *)i_n1_t, 4);
 800251e:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8002522:	f507 7156 	add.w	r1, r7, #856	@ 0x358
 8002526:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 800252a:	2304      	movs	r3, #4
 800252c:	f000 fa3c 	bl	80029a8 <add_nonce>
        add_nonce(add_nonce_1, (unsigned int *)i_n2,(unsigned int *)i_n2_t, 4);
 8002530:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 8002534:	f507 7152 	add.w	r1, r7, #840	@ 0x348
 8002538:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 800253c:	2304      	movs	r3, #4
 800253e:	f000 fa33 	bl	80029a8 <add_nonce>

        H(i_n1_t, i_n2_t, rkeys_ffs_H, rounds);
 8002542:	f897 33b0 	ldrb.w	r3, [r7, #944]	@ 0x3b0
 8002546:	f107 0218 	add.w	r2, r7, #24
 800254a:	f507 714a 	add.w	r1, r7, #808	@ 0x328
 800254e:	f507 704e 	add.w	r0, r7, #824	@ 0x338
 8002552:	f000 f87d 	bl	8002650 <H>

        xor_nonce( ptext0+ (i*16), i_n1_t, 16);
 8002556:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	461a      	mov	r2, r3
 800255e:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8002562:	4413      	add	r3, r2
 8002564:	f507 714e 	add.w	r1, r7, #824	@ 0x338
 8002568:	2210      	movs	r2, #16
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fa44 	bl	80029f8 <xor_nonce>
        xor_nonce( ptext1+ (i*16), i_n2_t, 16);
 8002570:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	461a      	mov	r2, r3
 8002578:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800257c:	4413      	add	r3, r2
 800257e:	f507 714a 	add.w	r1, r7, #808	@ 0x328
 8002582:	2210      	movs	r2, #16
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fa37 	bl	80029f8 <xor_nonce>

        I(ptext0,  ptext1, rkeys_ffs, 4);
 800258a:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800258e:	2304      	movs	r3, #4
 8002590:	f8d7 136c 	ldr.w	r1, [r7, #876]	@ 0x36c
 8002594:	f8d7 0374 	ldr.w	r0, [r7, #884]	@ 0x374
 8002598:	f000 f930 	bl	80027fc <I>

        xor_nonce( S1,ptext0+ (i*16), 16);
 800259c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	461a      	mov	r2, r3
 80025a4:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80025a8:	1899      	adds	r1, r3, r2
 80025aa:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80025ae:	2210      	movs	r2, #16
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fa21 	bl	80029f8 <xor_nonce>
        xor_nonce( S2,ptext1+ (i*16), 16);
 80025b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	461a      	mov	r2, r3
 80025be:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80025c2:	1899      	adds	r1, r3, r2
 80025c4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80025c8:	2210      	movs	r2, #16
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fa14 	bl	80029f8 <xor_nonce>

        add_nonce(add_nonce_2, add_nonce_0,add_nonce_0, 4);
 80025d0:	f507 723e 	add.w	r2, r7, #760	@ 0x2f8
 80025d4:	f507 713e 	add.w	r1, r7, #760	@ 0x2f8
 80025d8:	f507 7036 	add.w	r0, r7, #728	@ 0x2d8
 80025dc:	2304      	movs	r3, #4
 80025de:	f000 f9e3 	bl	80029a8 <add_nonce>
        add_nonce(add_nonce_2, add_nonce_1,add_nonce_1, 4);
 80025e2:	f507 723a 	add.w	r2, r7, #744	@ 0x2e8
 80025e6:	f507 713a 	add.w	r1, r7, #744	@ 0x2e8
 80025ea:	f507 7036 	add.w	r0, r7, #728	@ 0x2d8
 80025ee:	2304      	movs	r3, #4
 80025f0:	f000 f9da 	bl	80029a8 <add_nonce>
    for (int i = 0; i < block_size; i++){
 80025f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80025f8:	3301      	adds	r3, #1
 80025fa:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 80025fe:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8002602:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8002606:	429a      	cmp	r2, r3
 8002608:	db89      	blt.n	800251e <ELIMAC+0x24e>

    }
    //print_array(S1,16);
    //print_array(S2,16);
    xor_nonce( S1,S2, 16);
 800260a:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 800260e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8002612:	2210      	movs	r2, #16
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f9ef 	bl	80029f8 <xor_nonce>


    aes128_encrypt_ffs(tag, S2, S1,S1, rkeys_ffs);
 800261a:	f507 7046 	add.w	r0, r7, #792	@ 0x318
 800261e:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 8002622:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8002626:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	4603      	mov	r3, r0
 800262e:	f8d7 03b4 	ldr.w	r0, [r7, #948]	@ 0x3b4
 8002632:	f7fe fa57 	bl	8000ae4 <aes128_encrypt_ffs>
 8002636:	46b5      	mov	sp, r6

}
 8002638:	bf00      	nop
 800263a:	f507 7763 	add.w	r7, r7, #908	@ 0x38c
 800263e:	46bd      	mov	sp, r7
 8002640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002644:	08006f80 	.word	0x08006f80
 8002648:	08006f90 	.word	0x08006f90
 800264c:	08006fa0 	.word	0x08006fa0

08002650 <H>:

void H(unsigned char* ptext0,  unsigned char *ptext1, uint32_t *rkeys_ffs_H, unsigned char rounds){
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b099      	sub	sp, #100	@ 0x64
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	70fb      	strb	r3, [r7, #3]
	 unsigned char temp_0[16]={0};
 800265e:	2300      	movs	r3, #0
 8002660:	643b      	str	r3, [r7, #64]	@ 0x40
 8002662:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
	 unsigned char temp_1[16]={0};
 800266e:	2300      	movs	r3, #0
 8002670:	633b      	str	r3, [r7, #48]	@ 0x30
 8002672:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	609a      	str	r2, [r3, #8]
	 //exclusive only if use 2 or 6 rounds
	 unsigned char shift_0[16]={0,9,2,11,4,13,6,7,8,1,10,3,12,5,14,15};
 800267e:	4b5d      	ldr	r3, [pc, #372]	@ (80027f4 <H+0x1a4>)
 8002680:	f107 0420 	add.w	r4, r7, #32
 8002684:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002686:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 unsigned char shift_1[16]={0,9,2,11,4,13,6,15,8,1,10,3,12,5,14,7};
 800268a:	4b5b      	ldr	r3, [pc, #364]	@ (80027f8 <H+0x1a8>)
 800268c:	f107 0410 	add.w	r4, r7, #16
 8002690:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002692:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    switch (rounds)
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	3b02      	subs	r3, #2
 800269a:	2b06      	cmp	r3, #6
 800269c:	f200 80a4 	bhi.w	80027e8 <H+0x198>
 80026a0:	a201      	add	r2, pc, #4	@ (adr r2, 80026a8 <H+0x58>)
 80026a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a6:	bf00      	nop
 80026a8:	080026c5 	.word	0x080026c5
 80026ac:	080027e9 	.word	0x080027e9
 80026b0:	08002745 	.word	0x08002745
 80026b4:	080027e9 	.word	0x080027e9
 80026b8:	08002757 	.word	0x08002757
 80026bc:	080027e9 	.word	0x080027e9
 80026c0:	080027d7 	.word	0x080027d7
    {
    case 2:

        two_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f7fe fa74 	bl	8000bbc <two_Rounds_aes128_encrypt_ffs>
        memcpy(temp_0, ptext0, sizeof(unsigned char)*16);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	6859      	ldr	r1, [r3, #4]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        memcpy(temp_1, ptext1, sizeof(unsigned char)*16);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        for (size_t i = 0; i < 16; ++i) {
 80026f4:	2300      	movs	r3, #0
 80026f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80026f8:	e020      	b.n	800273c <H+0xec>
        	ptext0[i]=temp_0[shift_0[i]];
 80026fa:	f107 0220 	add.w	r2, r7, #32
 80026fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002700:	4413      	add	r3, r2
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800270a:	4413      	add	r3, r2
 800270c:	f101 0258 	add.w	r2, r1, #88	@ 0x58
 8002710:	443a      	add	r2, r7
 8002712:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002716:	701a      	strb	r2, [r3, #0]
        	ptext1[i]=temp_1[shift_1[i]];
 8002718:	f107 0210 	add.w	r2, r7, #16
 800271c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271e:	4413      	add	r3, r2
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	4619      	mov	r1, r3
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002728:	4413      	add	r3, r2
 800272a:	f101 0258 	add.w	r2, r1, #88	@ 0x58
 800272e:	443a      	add	r2, r7
 8002730:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8002734:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < 16; ++i) {
 8002736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002738:	3301      	adds	r3, #1
 800273a:	657b      	str	r3, [r7, #84]	@ 0x54
 800273c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800273e:	2b0f      	cmp	r3, #15
 8002740:	d9db      	bls.n	80026fa <H+0xaa>
        }
        break;
 8002742:	e052      	b.n	80027ea <H+0x19a>
    case 4:
        four_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f7fe fa6c 	bl	8000c2c <four_Rounds_aes128_encrypt_ffs>
        break;
 8002754:	e049      	b.n	80027ea <H+0x19a>
    case 6:
        six_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f7fe faa3 	bl	8000cac <six_Rounds_aes128_encrypt_ffs>
        memcpy(shift_0, ptext0, sizeof(unsigned char)*16);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f107 0420 	add.w	r4, r7, #32
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(shift_1, ptext1, sizeof(unsigned char)*16);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f107 0410 	add.w	r4, r7, #16
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		for (size_t i = 0; i < 16; ++i) {
 8002786:	2300      	movs	r3, #0
 8002788:	653b      	str	r3, [r7, #80]	@ 0x50
 800278a:	e020      	b.n	80027ce <H+0x17e>
			ptext0[i]=temp_0[shift_0[i]];
 800278c:	f107 0220 	add.w	r2, r7, #32
 8002790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002792:	4413      	add	r3, r2
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	4619      	mov	r1, r3
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800279c:	4413      	add	r3, r2
 800279e:	f101 0258 	add.w	r2, r1, #88	@ 0x58
 80027a2:	443a      	add	r2, r7
 80027a4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80027a8:	701a      	strb	r2, [r3, #0]
			ptext1[i]=temp_1[shift_1[i]];
 80027aa:	f107 0210 	add.w	r2, r7, #16
 80027ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027b0:	4413      	add	r3, r2
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	4619      	mov	r1, r3
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027ba:	4413      	add	r3, r2
 80027bc:	f101 0258 	add.w	r2, r1, #88	@ 0x58
 80027c0:	443a      	add	r2, r7
 80027c2:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 80027c6:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < 16; ++i) {
 80027c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027ca:	3301      	adds	r3, #1
 80027cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80027ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027d0:	2b0f      	cmp	r3, #15
 80027d2:	d9db      	bls.n	800278c <H+0x13c>
		}
        break;
 80027d4:	e009      	b.n	80027ea <H+0x19a>
    case 8:
        eigth_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f7fe faad 	bl	8000d40 <eigth_Rounds_aes128_encrypt_ffs>
        break;
 80027e6:	e000      	b.n	80027ea <H+0x19a>

    default:
        break;
 80027e8:	bf00      	nop
    }

}
 80027ea:	bf00      	nop
 80027ec:	375c      	adds	r7, #92	@ 0x5c
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd90      	pop	{r4, r7, pc}
 80027f2:	bf00      	nop
 80027f4:	08006fb0 	.word	0x08006fb0
 80027f8:	08006fc0 	.word	0x08006fc0

080027fc <I>:

void I(unsigned char* ptext0,  unsigned char *ptext1, uint32_t *rkeys_ffs_H, unsigned char rounds){
 80027fc:	b590      	push	{r4, r7, lr}
 80027fe:	b099      	sub	sp, #100	@ 0x64
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	70fb      	strb	r3, [r7, #3]

   unsigned char temp_0[16]={0};
 800280a:	2300      	movs	r3, #0
 800280c:	643b      	str	r3, [r7, #64]	@ 0x40
 800280e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
   unsigned char temp_1[16]={0};
 800281a:	2300      	movs	r3, #0
 800281c:	633b      	str	r3, [r7, #48]	@ 0x30
 800281e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	609a      	str	r2, [r3, #8]
   //exclusive only if use 2 or 6 rounds
   unsigned char shift_0[16]={0,9,2,11,4,13,6,7,8,1,10,3,12,5,14,15};
 800282a:	4b5d      	ldr	r3, [pc, #372]	@ (80029a0 <I+0x1a4>)
 800282c:	f107 0420 	add.w	r4, r7, #32
 8002830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002832:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   unsigned char shift_1[16]={0,9,2,11,4,13,6,15,8,1,10,3,12,5,14,7};
 8002836:	4b5b      	ldr	r3, [pc, #364]	@ (80029a4 <I+0x1a8>)
 8002838:	f107 0410 	add.w	r4, r7, #16
 800283c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800283e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   switch (rounds)
 8002842:	78fb      	ldrb	r3, [r7, #3]
 8002844:	3b02      	subs	r3, #2
 8002846:	2b06      	cmp	r3, #6
 8002848:	f200 80a4 	bhi.w	8002994 <I+0x198>
 800284c:	a201      	add	r2, pc, #4	@ (adr r2, 8002854 <I+0x58>)
 800284e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002852:	bf00      	nop
 8002854:	08002871 	.word	0x08002871
 8002858:	08002995 	.word	0x08002995
 800285c:	080028f1 	.word	0x080028f1
 8002860:	08002995 	.word	0x08002995
 8002864:	08002903 	.word	0x08002903
 8002868:	08002995 	.word	0x08002995
 800286c:	08002983 	.word	0x08002983
   {
   case 2:

       two_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f7fe f99e 	bl	8000bbc <two_Rounds_aes128_encrypt_ffs>
       memcpy(temp_0, ptext0, sizeof(unsigned char)*16);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
       memcpy(temp_1, ptext1, sizeof(unsigned char)*16);
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
       for (size_t i = 0; i < 16; ++i) {
 80028a0:	2300      	movs	r3, #0
 80028a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80028a4:	e020      	b.n	80028e8 <I+0xec>
       	ptext0[i]=temp_0[shift_0[i]];
 80028a6:	f107 0220 	add.w	r2, r7, #32
 80028aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ac:	4413      	add	r3, r2
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	4619      	mov	r1, r3
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028b6:	4413      	add	r3, r2
 80028b8:	f101 0258 	add.w	r2, r1, #88	@ 0x58
 80028bc:	443a      	add	r2, r7
 80028be:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80028c2:	701a      	strb	r2, [r3, #0]
       	ptext1[i]=temp_1[shift_1[i]];
 80028c4:	f107 0210 	add.w	r2, r7, #16
 80028c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ca:	4413      	add	r3, r2
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d4:	4413      	add	r3, r2
 80028d6:	f101 0258 	add.w	r2, r1, #88	@ 0x58
 80028da:	443a      	add	r2, r7
 80028dc:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 80028e0:	701a      	strb	r2, [r3, #0]
       for (size_t i = 0; i < 16; ++i) {
 80028e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e4:	3301      	adds	r3, #1
 80028e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80028e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ea:	2b0f      	cmp	r3, #15
 80028ec:	d9db      	bls.n	80028a6 <I+0xaa>
       }
       break;
 80028ee:	e052      	b.n	8002996 <I+0x19a>
   case 4:
       four_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7fe f996 	bl	8000c2c <four_Rounds_aes128_encrypt_ffs>
       break;
 8002900:	e049      	b.n	8002996 <I+0x19a>
   case 6:
       six_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f7fe f9cd 	bl	8000cac <six_Rounds_aes128_encrypt_ffs>
       memcpy(shift_0, ptext0, sizeof(unsigned char)*16);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f107 0420 	add.w	r4, r7, #32
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		memcpy(shift_1, ptext1, sizeof(unsigned char)*16);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f107 0410 	add.w	r4, r7, #16
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		for (size_t i = 0; i < 16; ++i) {
 8002932:	2300      	movs	r3, #0
 8002934:	653b      	str	r3, [r7, #80]	@ 0x50
 8002936:	e020      	b.n	800297a <I+0x17e>
			ptext0[i]=temp_0[shift_0[i]];
 8002938:	f107 0220 	add.w	r2, r7, #32
 800293c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800293e:	4413      	add	r3, r2
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	4619      	mov	r1, r3
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002948:	4413      	add	r3, r2
 800294a:	f101 0258 	add.w	r2, r1, #88	@ 0x58
 800294e:	443a      	add	r2, r7
 8002950:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002954:	701a      	strb	r2, [r3, #0]
			ptext1[i]=temp_1[shift_1[i]];
 8002956:	f107 0210 	add.w	r2, r7, #16
 800295a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800295c:	4413      	add	r3, r2
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	4619      	mov	r1, r3
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002966:	4413      	add	r3, r2
 8002968:	f101 0258 	add.w	r2, r1, #88	@ 0x58
 800296c:	443a      	add	r2, r7
 800296e:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8002972:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < 16; ++i) {
 8002974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002976:	3301      	adds	r3, #1
 8002978:	653b      	str	r3, [r7, #80]	@ 0x50
 800297a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800297c:	2b0f      	cmp	r3, #15
 800297e:	d9db      	bls.n	8002938 <I+0x13c>
		}
       break;
 8002980:	e009      	b.n	8002996 <I+0x19a>
   case 8:
       eigth_Rounds_aes128_encrypt_ffs(ptext0, ptext1, ptext0, ptext1, rkeys_ffs_H);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7fe f9d7 	bl	8000d40 <eigth_Rounds_aes128_encrypt_ffs>
       break;
 8002992:	e000      	b.n	8002996 <I+0x19a>

   default:
       break;
 8002994:	bf00      	nop
   }

}
 8002996:	bf00      	nop
 8002998:	375c      	adds	r7, #92	@ 0x5c
 800299a:	46bd      	mov	sp, r7
 800299c:	bd90      	pop	{r4, r7, pc}
 800299e:	bf00      	nop
 80029a0:	08006fb0 	.word	0x08006fb0
 80029a4:	08006fc0 	.word	0x08006fc0

080029a8 <add_nonce>:

void add_nonce(unsigned int * add_nonce, unsigned int * nonce, unsigned int * nonce_result, unsigned int size){
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < size; i++){
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e012      	b.n	80029e2 <add_nonce+0x3a>
        nonce_result[i]=nonce[i]+ add_nonce[i];
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	4413      	add	r3, r2
 80029c4:	6819      	ldr	r1, [r3, #0]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4413      	add	r3, r2
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4403      	add	r3, r0
 80029d8:	440a      	add	r2, r1
 80029da:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < size; i++){
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	3301      	adds	r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d3e8      	bcc.n	80029bc <add_nonce+0x14>
    }

}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	371c      	adds	r7, #28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <xor_nonce>:

void xor_nonce(unsigned char * plaintext, unsigned char * nonce, unsigned int size){
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < size; i++){
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	e010      	b.n	8002a2c <xor_nonce+0x34>
        plaintext[i]=nonce[i]^ plaintext[i];
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	4413      	add	r3, r2
 8002a10:	7819      	ldrb	r1, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	4413      	add	r3, r2
 8002a18:	781a      	ldrb	r2, [r3, #0]
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	4403      	add	r3, r0
 8002a20:	404a      	eors	r2, r1
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < size; i++){
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d3ea      	bcc.n	8002a0a <xor_nonce+0x12>
    }

}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <divide_plaintext>:
void divide_plaintext(unsigned char* plaintext, unsigned char* ptext0,  unsigned char* ptext1,unsigned int plaintext_size){
 8002a42:	b480      	push	{r7}
 8002a44:	b089      	sub	sp, #36	@ 0x24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	603b      	str	r3, [r7, #0]
    int condicion = 1;
 8002a50:	2301      	movs	r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
    size_t j=0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61bb      	str	r3, [r7, #24]
    size_t k=0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	e02c      	b.n	8002abc <divide_plaintext+0x7a>

        if (i%16==0 && i!=0)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d106      	bne.n	8002a7a <divide_plaintext+0x38>
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <divide_plaintext+0x38>
            condicion=condicion^1;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f083 0301 	eor.w	r3, r3, #1
 8002a78:	61fb      	str	r3, [r7, #28]

        if (condicion)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <divide_plaintext+0x50>
            ptext0[j] = plaintext[i];
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	441a      	add	r2, r3
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	440b      	add	r3, r1
 8002a8c:	7812      	ldrb	r2, [r2, #0]
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e007      	b.n	8002aa2 <divide_plaintext+0x60>
        else
            ptext1[k] = plaintext[i];
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	441a      	add	r2, r3
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	440b      	add	r3, r1
 8002a9e:	7812      	ldrb	r2, [r2, #0]
 8002aa0:	701a      	strb	r2, [r3, #0]

        if (condicion)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <divide_plaintext+0x6e>
            j++;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	e002      	b.n	8002ab6 <divide_plaintext+0x74>
        else
            k++;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < plaintext_size; i++){
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d3ce      	bcc.n	8002a62 <divide_plaintext+0x20>
    }
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3724      	adds	r7, #36	@ 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <serial_printf>:
 *      Author: cuauhtemoc
 */

#include "Serial.h"

void serial_printf(UART_HandleTypeDef *huart, uint8_t *pData, uint32_t Timeout){
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
	uint16_t Size = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	82fb      	strh	r3, [r7, #22]
	do{
		Size++;
 8002ae2:	8afb      	ldrh	r3, [r7, #22]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	82fb      	strh	r3, [r7, #22]
	}while(pData[Size]!='\0');
 8002ae8:	8afb      	ldrh	r3, [r7, #22]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	4413      	add	r3, r2
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f6      	bne.n	8002ae2 <serial_printf+0x10>
	HAL_UART_Transmit(huart, pData,Size, HAL_MAX_DELAY);
 8002af4:	8afa      	ldrh	r2, [r7, #22]
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f002 fdeb 	bl	80056d8 <HAL_UART_Transmit>
}
 8002b02:	bf00      	nop
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <DWT_Init>:
static unsigned char asociated_data[plaintext_size];
static unsigned int bytes[7] = {32, 64, 128, 192, 256, 320, 512};

char buffer [1024];
unsigned int performance[REP];
void DWT_Init(void) {
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0

    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002b10:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <DWT_Init+0x34>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a0a      	ldr	r2, [pc, #40]	@ (8002b40 <DWT_Init+0x34>)
 8002b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b1a:	60d3      	str	r3, [r2, #12]
    DWT->LAR = 0xC5ACCE55;
 8002b1c:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <DWT_Init+0x38>)
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b48 <DWT_Init+0x3c>)
 8002b20:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
    DWT->CYCCNT = 0;
 8002b24:	4b07      	ldr	r3, [pc, #28]	@ (8002b44 <DWT_Init+0x38>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <DWT_Init+0x38>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a05      	ldr	r2, [pc, #20]	@ (8002b44 <DWT_Init+0x38>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6013      	str	r3, [r2, #0]
}
 8002b36:	bf00      	nop
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000edf0 	.word	0xe000edf0
 8002b44:	e0001000 	.word	0xe0001000
 8002b48:	c5acce55 	.word	0xc5acce55

08002b4c <start_timer>:

void start_timer(void) {
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0;
 8002b50:	4b03      	ldr	r3, [pc, #12]	@ (8002b60 <start_timer+0x14>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	605a      	str	r2, [r3, #4]
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e0001000 	.word	0xe0001000

08002b64 <stop_timer>:

uint32_t stop_timer(void) {
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 8002b68:	4b03      	ldr	r3, [pc, #12]	@ (8002b78 <stop_timer+0x14>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e0001000 	.word	0xe0001000

08002b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b82:	f000 fcdc 	bl	800353e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b86:	f000 f8c7 	bl	8002d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b8a:	f000 f9d9 	bl	8002f40 <MX_GPIO_Init>
  MX_ETH_Init();
 8002b8e:	f000 f92b 	bl	8002de8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8002b92:	f000 f977 	bl	8002e84 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002b96:	f000 f9a5 	bl	8002ee4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */


    for (size_t i = 0; i < plaintext_size; i++){
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	e010      	b.n	8002bc2 <main+0x46>
  	  plaintext[i] =i;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	b2d9      	uxtb	r1, r3
 8002ba4:	4a4f      	ldr	r2, [pc, #316]	@ (8002ce4 <main+0x168>)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	4413      	add	r3, r2
 8002baa:	460a      	mov	r2, r1
 8002bac:	701a      	strb	r2, [r3, #0]
  	  asociated_data[i]=i;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	b2d9      	uxtb	r1, r3
 8002bb2:	4a4d      	ldr	r2, [pc, #308]	@ (8002ce8 <main+0x16c>)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	460a      	mov	r2, r1
 8002bba:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < plaintext_size; i++){
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b1f      	cmp	r3, #31
 8002bc6:	d9eb      	bls.n	8002ba0 <main+0x24>

  	serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);*/



    DWT_Init(); // Inicializar el contador de ciclos
 8002bc8:	f7ff ffa0 	bl	8002b0c <DWT_Init>
    uint32_t cycles=0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	603b      	str	r3, [r7, #0]
    uint32_t total_cycles=0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]

    int i=0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]


    cycles=0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	603b      	str	r3, [r7, #0]
    total_cycles=0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
    sprintf(buffer,"\n ELIMAC ROUNDS %i", ROUNDS+4);
 8002be0:	220c      	movs	r2, #12
 8002be2:	4942      	ldr	r1, [pc, #264]	@ (8002cec <main+0x170>)
 8002be4:	4842      	ldr	r0, [pc, #264]	@ (8002cf0 <main+0x174>)
 8002be6:	f003 fd1f 	bl	8006628 <siprintf>
        serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8002bea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bee:	4940      	ldr	r1, [pc, #256]	@ (8002cf0 <main+0x174>)
 8002bf0:	4840      	ldr	r0, [pc, #256]	@ (8002cf4 <main+0x178>)
 8002bf2:	f7ff ff6e 	bl	8002ad2 <serial_printf>
        for (int j = 0; j < Number_test; j++) {
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	e02d      	b.n	8002c58 <main+0xdc>
            for (i = 0; i < REP; i++) {
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	e019      	b.n	8002c36 <main+0xba>
                start_timer(); // Iniciar el contador de ciclos
 8002c02:	f7ff ffa3 	bl	8002b4c <start_timer>
                ELIMAC(plaintext, bytes[j], key1, key2, ROUNDS, tag);
 8002c06:	4a3c      	ldr	r2, [pc, #240]	@ (8002cf8 <main+0x17c>)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0e:	b2d9      	uxtb	r1, r3
 8002c10:	4b3a      	ldr	r3, [pc, #232]	@ (8002cfc <main+0x180>)
 8002c12:	9301      	str	r3, [sp, #4]
 8002c14:	2308      	movs	r3, #8
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	4b39      	ldr	r3, [pc, #228]	@ (8002d00 <main+0x184>)
 8002c1a:	4a3a      	ldr	r2, [pc, #232]	@ (8002d04 <main+0x188>)
 8002c1c:	4831      	ldr	r0, [pc, #196]	@ (8002ce4 <main+0x168>)
 8002c1e:	f7ff fb57 	bl	80022d0 <ELIMAC>
                cycles = stop_timer(); // Detener el contador de ciclos y obtener el valor
 8002c22:	f7ff ff9f 	bl	8002b64 <stop_timer>
 8002c26:	6038      	str	r0, [r7, #0]
                total_cycles=cycles+total_cycles;
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
            for (i = 0; i < REP; i++) {
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	3301      	adds	r3, #1
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b1d      	cmp	r3, #29
 8002c3a:	dde2      	ble.n	8002c02 <main+0x86>
            }
            performance[j] = total_cycles/REP;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4a32      	ldr	r2, [pc, #200]	@ (8002d08 <main+0x18c>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	091a      	lsrs	r2, r3, #4
 8002c46:	4931      	ldr	r1, [pc, #196]	@ (8002d0c <main+0x190>)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            total_cycles=0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
        for (int j = 0; j < Number_test; j++) {
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3301      	adds	r3, #1
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	ddce      	ble.n	8002bfc <main+0x80>
        }
        for (i = 0; i < Number_test; i++) {
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	e020      	b.n	8002ca6 <main+0x12a>
      	    sprintf(buffer,"\n bytes %u ", bytes[i]);
 8002c64:	4a24      	ldr	r2, [pc, #144]	@ (8002cf8 <main+0x17c>)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4928      	ldr	r1, [pc, #160]	@ (8002d10 <main+0x194>)
 8002c70:	481f      	ldr	r0, [pc, #124]	@ (8002cf0 <main+0x174>)
 8002c72:	f003 fcd9 	bl	8006628 <siprintf>
      	    serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8002c76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c7a:	491d      	ldr	r1, [pc, #116]	@ (8002cf0 <main+0x174>)
 8002c7c:	481d      	ldr	r0, [pc, #116]	@ (8002cf4 <main+0x178>)
 8002c7e:	f7ff ff28 	bl	8002ad2 <serial_printf>
  			sprintf(buffer, "\n %d:   cycle : %u  ", i, performance[i] );
 8002c82:	4a22      	ldr	r2, [pc, #136]	@ (8002d0c <main+0x190>)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4921      	ldr	r1, [pc, #132]	@ (8002d14 <main+0x198>)
 8002c8e:	4818      	ldr	r0, [pc, #96]	@ (8002cf0 <main+0x174>)
 8002c90:	f003 fcca 	bl	8006628 <siprintf>
  			serial_printf(&huart3, (uint8_t *) buffer, HAL_MAX_DELAY);
 8002c94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c98:	4915      	ldr	r1, [pc, #84]	@ (8002cf0 <main+0x174>)
 8002c9a:	4816      	ldr	r0, [pc, #88]	@ (8002cf4 <main+0x178>)
 8002c9c:	f7ff ff19 	bl	8002ad2 <serial_printf>
        for (i = 0; i < Number_test; i++) {
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b06      	cmp	r3, #6
 8002caa:	dddb      	ble.n	8002c64 <main+0xe8>
  	   }

        for (size_t i = 0; i < plaintext_size; i++){
 8002cac:	2300      	movs	r3, #0
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	e010      	b.n	8002cd4 <main+0x158>
      	   plaintext[i] =i;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	b2d9      	uxtb	r1, r3
 8002cb6:	4a0b      	ldr	r2, [pc, #44]	@ (8002ce4 <main+0x168>)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	460a      	mov	r2, r1
 8002cbe:	701a      	strb	r2, [r3, #0]
      	   asociated_data[i]=i;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	b2d9      	uxtb	r1, r3
 8002cc4:	4a08      	ldr	r2, [pc, #32]	@ (8002ce8 <main+0x16c>)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	460a      	mov	r2, r1
 8002ccc:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < plaintext_size; i++){
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	607b      	str	r3, [r7, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b1f      	cmp	r3, #31
 8002cd8:	d9eb      	bls.n	8002cb2 <main+0x136>
 8002cda:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000864 	.word	0x20000864
 8002ce8:	20000884 	.word	0x20000884
 8002cec:	08006fe4 	.word	0x08006fe4
 8002cf0:	200008a4 	.word	0x200008a4
 8002cf4:	200002dc 	.word	0x200002dc
 8002cf8:	20000020 	.word	0x20000020
 8002cfc:	20000844 	.word	0x20000844
 8002d00:	20000010 	.word	0x20000010
 8002d04:	20000000 	.word	0x20000000
 8002d08:	88888889 	.word	0x88888889
 8002d0c:	20000ca4 	.word	0x20000ca4
 8002d10:	08006ff8 	.word	0x08006ff8
 8002d14:	08007004 	.word	0x08007004

08002d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b094      	sub	sp, #80	@ 0x50
 8002d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d1e:	f107 0320 	add.w	r3, r7, #32
 8002d22:	2230      	movs	r2, #48	@ 0x30
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f003 fc9e 	bl	8006668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d2c:	f107 030c 	add.w	r3, r7, #12
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002d3c:	f001 fbb4 	bl	80044a8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d40:	4b27      	ldr	r3, [pc, #156]	@ (8002de0 <SystemClock_Config+0xc8>)
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	4a26      	ldr	r2, [pc, #152]	@ (8002de0 <SystemClock_Config+0xc8>)
 8002d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d4c:	4b24      	ldr	r3, [pc, #144]	@ (8002de0 <SystemClock_Config+0xc8>)
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002d58:	4b22      	ldr	r3, [pc, #136]	@ (8002de4 <SystemClock_Config+0xcc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002d60:	4a20      	ldr	r2, [pc, #128]	@ (8002de4 <SystemClock_Config+0xcc>)
 8002d62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b1e      	ldr	r3, [pc, #120]	@ (8002de4 <SystemClock_Config+0xcc>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d74:	2301      	movs	r3, #1
 8002d76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002d78:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d82:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d88:	2304      	movs	r3, #4
 8002d8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002d8c:	2348      	movs	r3, #72	@ 0x48
 8002d8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d90:	2302      	movs	r3, #2
 8002d92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002d94:	2303      	movs	r3, #3
 8002d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d98:	f107 0320 	add.w	r3, r7, #32
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 fb93 	bl	80044c8 <HAL_RCC_OscConfig>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002da8:	f000 f96c 	bl	8003084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dac:	230f      	movs	r3, #15
 8002dae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002db0:	2302      	movs	r3, #2
 8002db2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002dc2:	f107 030c 	add.w	r3, r7, #12
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f001 fe21 	bl	8004a10 <HAL_RCC_ClockConfig>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002dd4:	f000 f956 	bl	8003084 <Error_Handler>
  }
}
 8002dd8:	bf00      	nop
 8002dda:	3750      	adds	r7, #80	@ 0x50
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40007000 	.word	0x40007000

08002de8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002dec:	4b1f      	ldr	r3, [pc, #124]	@ (8002e6c <MX_ETH_Init+0x84>)
 8002dee:	4a20      	ldr	r2, [pc, #128]	@ (8002e70 <MX_ETH_Init+0x88>)
 8002df0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002df2:	4b20      	ldr	r3, [pc, #128]	@ (8002e74 <MX_ETH_Init+0x8c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002df8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e74 <MX_ETH_Init+0x8c>)
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002e74 <MX_ETH_Init+0x8c>)
 8002e00:	22e1      	movs	r2, #225	@ 0xe1
 8002e02:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002e04:	4b1b      	ldr	r3, [pc, #108]	@ (8002e74 <MX_ETH_Init+0x8c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e74 <MX_ETH_Init+0x8c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002e10:	4b18      	ldr	r3, [pc, #96]	@ (8002e74 <MX_ETH_Init+0x8c>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002e16:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <MX_ETH_Init+0x84>)
 8002e18:	4a16      	ldr	r2, [pc, #88]	@ (8002e74 <MX_ETH_Init+0x8c>)
 8002e1a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002e1c:	4b13      	ldr	r3, [pc, #76]	@ (8002e6c <MX_ETH_Init+0x84>)
 8002e1e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e22:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002e24:	4b11      	ldr	r3, [pc, #68]	@ (8002e6c <MX_ETH_Init+0x84>)
 8002e26:	4a14      	ldr	r2, [pc, #80]	@ (8002e78 <MX_ETH_Init+0x90>)
 8002e28:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002e2a:	4b10      	ldr	r3, [pc, #64]	@ (8002e6c <MX_ETH_Init+0x84>)
 8002e2c:	4a13      	ldr	r2, [pc, #76]	@ (8002e7c <MX_ETH_Init+0x94>)
 8002e2e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002e30:	4b0e      	ldr	r3, [pc, #56]	@ (8002e6c <MX_ETH_Init+0x84>)
 8002e32:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002e36:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002e38:	480c      	ldr	r0, [pc, #48]	@ (8002e6c <MX_ETH_Init+0x84>)
 8002e3a:	f000 fce7 	bl	800380c <HAL_ETH_Init>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8002e44:	f000 f91e 	bl	8003084 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002e48:	2238      	movs	r2, #56	@ 0x38
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	480c      	ldr	r0, [pc, #48]	@ (8002e80 <MX_ETH_Init+0x98>)
 8002e4e:	f003 fc0b 	bl	8006668 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <MX_ETH_Init+0x98>)
 8002e54:	2221      	movs	r2, #33	@ 0x21
 8002e56:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002e58:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <MX_ETH_Init+0x98>)
 8002e5a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8002e5e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002e60:	4b07      	ldr	r3, [pc, #28]	@ (8002e80 <MX_ETH_Init+0x98>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2000022c 	.word	0x2000022c
 8002e70:	40028000 	.word	0x40028000
 8002e74:	20000d1c 	.word	0x20000d1c
 8002e78:	20000138 	.word	0x20000138
 8002e7c:	20000098 	.word	0x20000098
 8002e80:	200001f4 	.word	0x200001f4

08002e84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e88:	4b14      	ldr	r3, [pc, #80]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002e8a:	4a15      	ldr	r2, [pc, #84]	@ (8002ee0 <MX_USART3_UART_Init+0x5c>)
 8002e8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e8e:	4b13      	ldr	r3, [pc, #76]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002e90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e96:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002eaa:	220c      	movs	r2, #12
 8002eac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eae:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb4:	4b09      	ldr	r3, [pc, #36]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eba:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ec6:	4805      	ldr	r0, [pc, #20]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002ec8:	f002 fbb8 	bl	800563c <HAL_UART_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002ed2:	f000 f8d7 	bl	8003084 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200002dc 	.word	0x200002dc
 8002ee0:	40004800 	.word	0x40004800

08002ee4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002ee8:	4b14      	ldr	r3, [pc, #80]	@ (8002f3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002eea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002eee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002ef0:	4b12      	ldr	r3, [pc, #72]	@ (8002f3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ef2:	2206      	movs	r2, #6
 8002ef4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002ef6:	4b11      	ldr	r3, [pc, #68]	@ (8002f3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ef8:	2202      	movs	r2, #2
 8002efa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002efc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002f02:	4b0e      	ldr	r3, [pc, #56]	@ (8002f3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f04:	2202      	movs	r2, #2
 8002f06:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002f08:	4b0c      	ldr	r3, [pc, #48]	@ (8002f3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002f14:	4b09      	ldr	r3, [pc, #36]	@ (8002f3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002f1a:	4b08      	ldr	r3, [pc, #32]	@ (8002f3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002f20:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002f26:	4805      	ldr	r0, [pc, #20]	@ (8002f3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f28:	f001 f983 	bl	8004232 <HAL_PCD_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002f32:	f000 f8a7 	bl	8003084 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000364 	.word	0x20000364

08002f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08c      	sub	sp, #48	@ 0x30
 8002f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f46:	f107 031c 	add.w	r3, r7, #28
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	60da      	str	r2, [r3, #12]
 8002f54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f56:	4b47      	ldr	r3, [pc, #284]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	4a46      	ldr	r2, [pc, #280]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002f5c:	f043 0304 	orr.w	r3, r3, #4
 8002f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f62:	4b44      	ldr	r3, [pc, #272]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	61bb      	str	r3, [r7, #24]
 8002f6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f6e:	4b41      	ldr	r3, [pc, #260]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f72:	4a40      	ldr	r2, [pc, #256]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f86:	4b3b      	ldr	r3, [pc, #236]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	4a3a      	ldr	r2, [pc, #232]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f92:	4b38      	ldr	r3, [pc, #224]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9e:	4b35      	ldr	r3, [pc, #212]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	4a34      	ldr	r2, [pc, #208]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002fa4:	f043 0302 	orr.w	r3, r3, #2
 8002fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002faa:	4b32      	ldr	r3, [pc, #200]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	4a2e      	ldr	r2, [pc, #184]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fce:	4b29      	ldr	r3, [pc, #164]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	4a28      	ldr	r2, [pc, #160]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fda:	4b26      	ldr	r3, [pc, #152]	@ (8003074 <MX_GPIO_Init+0x134>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe2:	607b      	str	r3, [r7, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002fec:	4822      	ldr	r0, [pc, #136]	@ (8003078 <MX_GPIO_Init+0x138>)
 8002fee:	f001 f907 	bl	8004200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2140      	movs	r1, #64	@ 0x40
 8002ff6:	4821      	ldr	r0, [pc, #132]	@ (800307c <MX_GPIO_Init+0x13c>)
 8002ff8:	f001 f902 	bl	8004200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002ffc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003002:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800300c:	f107 031c 	add.w	r3, r7, #28
 8003010:	4619      	mov	r1, r3
 8003012:	481b      	ldr	r0, [pc, #108]	@ (8003080 <MX_GPIO_Init+0x140>)
 8003014:	f000 ff48 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003018:	f244 0381 	movw	r3, #16513	@ 0x4081
 800301c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800301e:	2301      	movs	r3, #1
 8003020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	2300      	movs	r3, #0
 8003028:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302a:	f107 031c 	add.w	r3, r7, #28
 800302e:	4619      	mov	r1, r3
 8003030:	4811      	ldr	r0, [pc, #68]	@ (8003078 <MX_GPIO_Init+0x138>)
 8003032:	f000 ff39 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003036:	2340      	movs	r3, #64	@ 0x40
 8003038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303a:	2301      	movs	r3, #1
 800303c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	2300      	movs	r3, #0
 8003044:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003046:	f107 031c 	add.w	r3, r7, #28
 800304a:	4619      	mov	r1, r3
 800304c:	480b      	ldr	r0, [pc, #44]	@ (800307c <MX_GPIO_Init+0x13c>)
 800304e:	f000 ff2b 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003052:	2380      	movs	r3, #128	@ 0x80
 8003054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003056:	2300      	movs	r3, #0
 8003058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800305e:	f107 031c 	add.w	r3, r7, #28
 8003062:	4619      	mov	r1, r3
 8003064:	4805      	ldr	r0, [pc, #20]	@ (800307c <MX_GPIO_Init+0x13c>)
 8003066:	f000 ff1f 	bl	8003ea8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800306a:	bf00      	nop
 800306c:	3730      	adds	r7, #48	@ 0x30
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800
 8003078:	40020400 	.word	0x40020400
 800307c:	40021800 	.word	0x40021800
 8003080:	40020800 	.word	0x40020800

08003084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003088:	b672      	cpsid	i
}
 800308a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <Error_Handler+0x8>

08003090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <HAL_MspInit+0x44>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	4a0e      	ldr	r2, [pc, #56]	@ (80030d4 <HAL_MspInit+0x44>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a2:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <HAL_MspInit+0x44>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ae:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <HAL_MspInit+0x44>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b2:	4a08      	ldr	r2, [pc, #32]	@ (80030d4 <HAL_MspInit+0x44>)
 80030b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ba:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <HAL_MspInit+0x44>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800

080030d8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08e      	sub	sp, #56	@ 0x38
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a4e      	ldr	r2, [pc, #312]	@ (8003230 <HAL_ETH_MspInit+0x158>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	f040 8096 	bne.w	8003228 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80030fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 80030fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003100:	4a4c      	ldr	r2, [pc, #304]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 8003102:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003106:	6313      	str	r3, [r2, #48]	@ 0x30
 8003108:	4b4a      	ldr	r3, [pc, #296]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003110:	623b      	str	r3, [r7, #32]
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	4b47      	ldr	r3, [pc, #284]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003118:	4a46      	ldr	r2, [pc, #280]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 800311a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800311e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003120:	4b44      	ldr	r3, [pc, #272]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 8003122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003124:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	4b41      	ldr	r3, [pc, #260]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003130:	4a40      	ldr	r2, [pc, #256]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 8003132:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003136:	6313      	str	r3, [r2, #48]	@ 0x30
 8003138:	4b3e      	ldr	r3, [pc, #248]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003144:	4b3b      	ldr	r3, [pc, #236]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 8003146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003148:	4a3a      	ldr	r2, [pc, #232]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 800314a:	f043 0304 	orr.w	r3, r3, #4
 800314e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003150:	4b38      	ldr	r3, [pc, #224]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 8003152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315c:	4b35      	ldr	r3, [pc, #212]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003160:	4a34      	ldr	r2, [pc, #208]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6313      	str	r3, [r2, #48]	@ 0x30
 8003168:	4b32      	ldr	r3, [pc, #200]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003174:	4b2f      	ldr	r3, [pc, #188]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003178:	4a2e      	ldr	r2, [pc, #184]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 800317a:	f043 0302 	orr.w	r3, r3, #2
 800317e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003180:	4b2c      	ldr	r3, [pc, #176]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 8003182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800318c:	4b29      	ldr	r3, [pc, #164]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003190:	4a28      	ldr	r2, [pc, #160]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 8003192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003196:	6313      	str	r3, [r2, #48]	@ 0x30
 8003198:	4b26      	ldr	r3, [pc, #152]	@ (8003234 <HAL_ETH_MspInit+0x15c>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80031a4:	2332      	movs	r3, #50	@ 0x32
 80031a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b0:	2303      	movs	r3, #3
 80031b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031b4:	230b      	movs	r3, #11
 80031b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031bc:	4619      	mov	r1, r3
 80031be:	481e      	ldr	r0, [pc, #120]	@ (8003238 <HAL_ETH_MspInit+0x160>)
 80031c0:	f000 fe72 	bl	8003ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80031c4:	2386      	movs	r3, #134	@ 0x86
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	2302      	movs	r3, #2
 80031ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d0:	2303      	movs	r3, #3
 80031d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031d4:	230b      	movs	r3, #11
 80031d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031dc:	4619      	mov	r1, r3
 80031de:	4817      	ldr	r0, [pc, #92]	@ (800323c <HAL_ETH_MspInit+0x164>)
 80031e0:	f000 fe62 	bl	8003ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80031e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	2302      	movs	r3, #2
 80031ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f2:	2303      	movs	r3, #3
 80031f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031f6:	230b      	movs	r3, #11
 80031f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80031fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031fe:	4619      	mov	r1, r3
 8003200:	480f      	ldr	r0, [pc, #60]	@ (8003240 <HAL_ETH_MspInit+0x168>)
 8003202:	f000 fe51 	bl	8003ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003206:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800320a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003214:	2303      	movs	r3, #3
 8003216:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003218:	230b      	movs	r3, #11
 800321a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800321c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003220:	4619      	mov	r1, r3
 8003222:	4808      	ldr	r0, [pc, #32]	@ (8003244 <HAL_ETH_MspInit+0x16c>)
 8003224:	f000 fe40 	bl	8003ea8 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8003228:	bf00      	nop
 800322a:	3738      	adds	r7, #56	@ 0x38
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40028000 	.word	0x40028000
 8003234:	40023800 	.word	0x40023800
 8003238:	40020800 	.word	0x40020800
 800323c:	40020000 	.word	0x40020000
 8003240:	40020400 	.word	0x40020400
 8003244:	40021800 	.word	0x40021800

08003248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b0aa      	sub	sp, #168	@ 0xa8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003260:	f107 0310 	add.w	r3, r7, #16
 8003264:	2284      	movs	r2, #132	@ 0x84
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f003 f9fd 	bl	8006668 <memset>
  if(huart->Instance==USART3)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a22      	ldr	r2, [pc, #136]	@ (80032fc <HAL_UART_MspInit+0xb4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d13c      	bne.n	80032f2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800327c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800327e:	2300      	movs	r3, #0
 8003280:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003282:	f107 0310 	add.w	r3, r7, #16
 8003286:	4618      	mov	r0, r3
 8003288:	f001 fde8 	bl	8004e5c <HAL_RCCEx_PeriphCLKConfig>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003292:	f7ff fef7 	bl	8003084 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003296:	4b1a      	ldr	r3, [pc, #104]	@ (8003300 <HAL_UART_MspInit+0xb8>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	4a19      	ldr	r2, [pc, #100]	@ (8003300 <HAL_UART_MspInit+0xb8>)
 800329c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032a2:	4b17      	ldr	r3, [pc, #92]	@ (8003300 <HAL_UART_MspInit+0xb8>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ae:	4b14      	ldr	r3, [pc, #80]	@ (8003300 <HAL_UART_MspInit+0xb8>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b2:	4a13      	ldr	r2, [pc, #76]	@ (8003300 <HAL_UART_MspInit+0xb8>)
 80032b4:	f043 0308 	orr.w	r3, r3, #8
 80032b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ba:	4b11      	ldr	r3, [pc, #68]	@ (8003300 <HAL_UART_MspInit+0xb8>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80032c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80032ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ce:	2302      	movs	r3, #2
 80032d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032da:	2303      	movs	r3, #3
 80032dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80032e0:	2307      	movs	r3, #7
 80032e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032e6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80032ea:	4619      	mov	r1, r3
 80032ec:	4805      	ldr	r0, [pc, #20]	@ (8003304 <HAL_UART_MspInit+0xbc>)
 80032ee:	f000 fddb 	bl	8003ea8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80032f2:	bf00      	nop
 80032f4:	37a8      	adds	r7, #168	@ 0xa8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40004800 	.word	0x40004800
 8003300:	40023800 	.word	0x40023800
 8003304:	40020c00 	.word	0x40020c00

08003308 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b0ac      	sub	sp, #176	@ 0xb0
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003310:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	60da      	str	r2, [r3, #12]
 800331e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003320:	f107 0318 	add.w	r3, r7, #24
 8003324:	2284      	movs	r2, #132	@ 0x84
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f003 f99d 	bl	8006668 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003336:	d159      	bne.n	80033ec <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003338:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800333c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800333e:	2300      	movs	r3, #0
 8003340:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003344:	f107 0318 	add.w	r3, r7, #24
 8003348:	4618      	mov	r0, r3
 800334a:	f001 fd87 	bl	8004e5c <HAL_RCCEx_PeriphCLKConfig>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003354:	f7ff fe96 	bl	8003084 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003358:	4b26      	ldr	r3, [pc, #152]	@ (80033f4 <HAL_PCD_MspInit+0xec>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335c:	4a25      	ldr	r2, [pc, #148]	@ (80033f4 <HAL_PCD_MspInit+0xec>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6313      	str	r3, [r2, #48]	@ 0x30
 8003364:	4b23      	ldr	r3, [pc, #140]	@ (80033f4 <HAL_PCD_MspInit+0xec>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003370:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003374:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003378:	2302      	movs	r3, #2
 800337a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003384:	2303      	movs	r3, #3
 8003386:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800338a:	230a      	movs	r3, #10
 800338c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003390:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003394:	4619      	mov	r1, r3
 8003396:	4818      	ldr	r0, [pc, #96]	@ (80033f8 <HAL_PCD_MspInit+0xf0>)
 8003398:	f000 fd86 	bl	8003ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800339c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033a4:	2300      	movs	r3, #0
 80033a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80033b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80033b4:	4619      	mov	r1, r3
 80033b6:	4810      	ldr	r0, [pc, #64]	@ (80033f8 <HAL_PCD_MspInit+0xf0>)
 80033b8:	f000 fd76 	bl	8003ea8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80033bc:	4b0d      	ldr	r3, [pc, #52]	@ (80033f4 <HAL_PCD_MspInit+0xec>)
 80033be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c0:	4a0c      	ldr	r2, [pc, #48]	@ (80033f4 <HAL_PCD_MspInit+0xec>)
 80033c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80033c8:	4b0a      	ldr	r3, [pc, #40]	@ (80033f4 <HAL_PCD_MspInit+0xec>)
 80033ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4b07      	ldr	r3, [pc, #28]	@ (80033f4 <HAL_PCD_MspInit+0xec>)
 80033d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d8:	4a06      	ldr	r2, [pc, #24]	@ (80033f4 <HAL_PCD_MspInit+0xec>)
 80033da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033de:	6453      	str	r3, [r2, #68]	@ 0x44
 80033e0:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <HAL_PCD_MspInit+0xec>)
 80033e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80033ec:	bf00      	nop
 80033ee:	37b0      	adds	r7, #176	@ 0xb0
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40020000 	.word	0x40020000

080033fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003400:	bf00      	nop
 8003402:	e7fd      	b.n	8003400 <NMI_Handler+0x4>

08003404 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003408:	bf00      	nop
 800340a:	e7fd      	b.n	8003408 <HardFault_Handler+0x4>

0800340c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003410:	bf00      	nop
 8003412:	e7fd      	b.n	8003410 <MemManage_Handler+0x4>

08003414 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003418:	bf00      	nop
 800341a:	e7fd      	b.n	8003418 <BusFault_Handler+0x4>

0800341c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003420:	bf00      	nop
 8003422:	e7fd      	b.n	8003420 <UsageFault_Handler+0x4>

08003424 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003452:	f000 f8b1 	bl	80035b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003464:	4a14      	ldr	r2, [pc, #80]	@ (80034b8 <_sbrk+0x5c>)
 8003466:	4b15      	ldr	r3, [pc, #84]	@ (80034bc <_sbrk+0x60>)
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003470:	4b13      	ldr	r3, [pc, #76]	@ (80034c0 <_sbrk+0x64>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d102      	bne.n	800347e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003478:	4b11      	ldr	r3, [pc, #68]	@ (80034c0 <_sbrk+0x64>)
 800347a:	4a12      	ldr	r2, [pc, #72]	@ (80034c4 <_sbrk+0x68>)
 800347c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800347e:	4b10      	ldr	r3, [pc, #64]	@ (80034c0 <_sbrk+0x64>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4413      	add	r3, r2
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	429a      	cmp	r2, r3
 800348a:	d207      	bcs.n	800349c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800348c:	f003 f8f4 	bl	8006678 <__errno>
 8003490:	4603      	mov	r3, r0
 8003492:	220c      	movs	r2, #12
 8003494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003496:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800349a:	e009      	b.n	80034b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800349c:	4b08      	ldr	r3, [pc, #32]	@ (80034c0 <_sbrk+0x64>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034a2:	4b07      	ldr	r3, [pc, #28]	@ (80034c0 <_sbrk+0x64>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4413      	add	r3, r2
 80034aa:	4a05      	ldr	r2, [pc, #20]	@ (80034c0 <_sbrk+0x64>)
 80034ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034ae:	68fb      	ldr	r3, [r7, #12]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20050000 	.word	0x20050000
 80034bc:	00000400 	.word	0x00000400
 80034c0:	20000d24 	.word	0x20000d24
 80034c4:	20000e78 	.word	0x20000e78

080034c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034cc:	4b06      	ldr	r3, [pc, #24]	@ (80034e8 <SystemInit+0x20>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d2:	4a05      	ldr	r2, [pc, #20]	@ (80034e8 <SystemInit+0x20>)
 80034d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003524 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034f0:	f7ff ffea 	bl	80034c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034f4:	480c      	ldr	r0, [pc, #48]	@ (8003528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034f6:	490d      	ldr	r1, [pc, #52]	@ (800352c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034fc:	e002      	b.n	8003504 <LoopCopyDataInit>

080034fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003502:	3304      	adds	r3, #4

08003504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003508:	d3f9      	bcc.n	80034fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800350a:	4a0a      	ldr	r2, [pc, #40]	@ (8003534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800350c:	4c0a      	ldr	r4, [pc, #40]	@ (8003538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800350e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003510:	e001      	b.n	8003516 <LoopFillZerobss>

08003512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003514:	3204      	adds	r2, #4

08003516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003518:	d3fb      	bcc.n	8003512 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800351a:	f003 f8b3 	bl	8006684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800351e:	f7ff fb2d 	bl	8002b7c <main>
  bx  lr    
 8003522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003524:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800352c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003530:	08007078 	.word	0x08007078
  ldr r2, =_sbss
 8003534:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003538:	20000e74 	.word	0x20000e74

0800353c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800353c:	e7fe      	b.n	800353c <ADC_IRQHandler>

0800353e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003542:	2003      	movs	r0, #3
 8003544:	f000 f92e 	bl	80037a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003548:	2000      	movs	r0, #0
 800354a:	f000 f805 	bl	8003558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800354e:	f7ff fd9f 	bl	8003090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003560:	4b12      	ldr	r3, [pc, #72]	@ (80035ac <HAL_InitTick+0x54>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4b12      	ldr	r3, [pc, #72]	@ (80035b0 <HAL_InitTick+0x58>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	4619      	mov	r1, r3
 800356a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800356e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003572:	fbb2 f3f3 	udiv	r3, r2, r3
 8003576:	4618      	mov	r0, r3
 8003578:	f000 f93b 	bl	80037f2 <HAL_SYSTICK_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e00e      	b.n	80035a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b0f      	cmp	r3, #15
 800358a:	d80a      	bhi.n	80035a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800358c:	2200      	movs	r2, #0
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003594:	f000 f911 	bl	80037ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003598:	4a06      	ldr	r2, [pc, #24]	@ (80035b4 <HAL_InitTick+0x5c>)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e000      	b.n	80035a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	2000003c 	.word	0x2000003c
 80035b0:	20000044 	.word	0x20000044
 80035b4:	20000040 	.word	0x20000040

080035b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035bc:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <HAL_IncTick+0x20>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <HAL_IncTick+0x24>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4413      	add	r3, r2
 80035c8:	4a04      	ldr	r2, [pc, #16]	@ (80035dc <HAL_IncTick+0x24>)
 80035ca:	6013      	str	r3, [r2, #0]
}
 80035cc:	bf00      	nop
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	20000044 	.word	0x20000044
 80035dc:	20000d28 	.word	0x20000d28

080035e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return uwTick;
 80035e4:	4b03      	ldr	r3, [pc, #12]	@ (80035f4 <HAL_GetTick+0x14>)
 80035e6:	681b      	ldr	r3, [r3, #0]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	20000d28 	.word	0x20000d28

080035f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003600:	f7ff ffee 	bl	80035e0 <HAL_GetTick>
 8003604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003610:	d005      	beq.n	800361e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003612:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <HAL_Delay+0x44>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800361e:	bf00      	nop
 8003620:	f7ff ffde 	bl	80035e0 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	429a      	cmp	r2, r3
 800362e:	d8f7      	bhi.n	8003620 <HAL_Delay+0x28>
  {
  }
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000044 	.word	0x20000044

08003640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003650:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <__NVIC_SetPriorityGrouping+0x40>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800365c:	4013      	ands	r3, r2
 800365e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003668:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <__NVIC_SetPriorityGrouping+0x44>)
 800366a:	4313      	orrs	r3, r2
 800366c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800366e:	4a04      	ldr	r2, [pc, #16]	@ (8003680 <__NVIC_SetPriorityGrouping+0x40>)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	60d3      	str	r3, [r2, #12]
}
 8003674:	bf00      	nop
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	e000ed00 	.word	0xe000ed00
 8003684:	05fa0000 	.word	0x05fa0000

08003688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800368c:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <__NVIC_GetPriorityGrouping+0x18>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	0a1b      	lsrs	r3, r3, #8
 8003692:	f003 0307 	and.w	r3, r3, #7
}
 8003696:	4618      	mov	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	6039      	str	r1, [r7, #0]
 80036ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	db0a      	blt.n	80036ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	490c      	ldr	r1, [pc, #48]	@ (80036f0 <__NVIC_SetPriority+0x4c>)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	0112      	lsls	r2, r2, #4
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	440b      	add	r3, r1
 80036c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036cc:	e00a      	b.n	80036e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4908      	ldr	r1, [pc, #32]	@ (80036f4 <__NVIC_SetPriority+0x50>)
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	3b04      	subs	r3, #4
 80036dc:	0112      	lsls	r2, r2, #4
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	440b      	add	r3, r1
 80036e2:	761a      	strb	r2, [r3, #24]
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	e000e100 	.word	0xe000e100
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b089      	sub	sp, #36	@ 0x24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f1c3 0307 	rsb	r3, r3, #7
 8003712:	2b04      	cmp	r3, #4
 8003714:	bf28      	it	cs
 8003716:	2304      	movcs	r3, #4
 8003718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3304      	adds	r3, #4
 800371e:	2b06      	cmp	r3, #6
 8003720:	d902      	bls.n	8003728 <NVIC_EncodePriority+0x30>
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	3b03      	subs	r3, #3
 8003726:	e000      	b.n	800372a <NVIC_EncodePriority+0x32>
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800372c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43da      	mvns	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	401a      	ands	r2, r3
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003740:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	fa01 f303 	lsl.w	r3, r1, r3
 800374a:	43d9      	mvns	r1, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003750:	4313      	orrs	r3, r2
         );
}
 8003752:	4618      	mov	r0, r3
 8003754:	3724      	adds	r7, #36	@ 0x24
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
	...

08003760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3b01      	subs	r3, #1
 800376c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003770:	d301      	bcc.n	8003776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003772:	2301      	movs	r3, #1
 8003774:	e00f      	b.n	8003796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003776:	4a0a      	ldr	r2, [pc, #40]	@ (80037a0 <SysTick_Config+0x40>)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3b01      	subs	r3, #1
 800377c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800377e:	210f      	movs	r1, #15
 8003780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003784:	f7ff ff8e 	bl	80036a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003788:	4b05      	ldr	r3, [pc, #20]	@ (80037a0 <SysTick_Config+0x40>)
 800378a:	2200      	movs	r2, #0
 800378c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800378e:	4b04      	ldr	r3, [pc, #16]	@ (80037a0 <SysTick_Config+0x40>)
 8003790:	2207      	movs	r2, #7
 8003792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	e000e010 	.word	0xe000e010

080037a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff ff47 	bl	8003640 <__NVIC_SetPriorityGrouping>
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b086      	sub	sp, #24
 80037be:	af00      	add	r7, sp, #0
 80037c0:	4603      	mov	r3, r0
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
 80037c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037cc:	f7ff ff5c 	bl	8003688 <__NVIC_GetPriorityGrouping>
 80037d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	6978      	ldr	r0, [r7, #20]
 80037d8:	f7ff ff8e 	bl	80036f8 <NVIC_EncodePriority>
 80037dc:	4602      	mov	r2, r0
 80037de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff ff5d 	bl	80036a4 <__NVIC_SetPriority>
}
 80037ea:	bf00      	nop
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff ffb0 	bl	8003760 <SysTick_Config>
 8003800:	4603      	mov	r3, r0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e086      	b.n	800392c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003824:	2b00      	cmp	r3, #0
 8003826:	d106      	bne.n	8003836 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2223      	movs	r2, #35	@ 0x23
 800382c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff fc51 	bl	80030d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003836:	4b3f      	ldr	r3, [pc, #252]	@ (8003934 <HAL_ETH_Init+0x128>)
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	4a3e      	ldr	r2, [pc, #248]	@ (8003934 <HAL_ETH_Init+0x128>)
 800383c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003840:	6453      	str	r3, [r2, #68]	@ 0x44
 8003842:	4b3c      	ldr	r3, [pc, #240]	@ (8003934 <HAL_ETH_Init+0x128>)
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800384e:	4b3a      	ldr	r3, [pc, #232]	@ (8003938 <HAL_ETH_Init+0x12c>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4a39      	ldr	r2, [pc, #228]	@ (8003938 <HAL_ETH_Init+0x12c>)
 8003854:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003858:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800385a:	4b37      	ldr	r3, [pc, #220]	@ (8003938 <HAL_ETH_Init+0x12c>)
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	4935      	ldr	r1, [pc, #212]	@ (8003938 <HAL_ETH_Init+0x12c>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003868:	4b33      	ldr	r3, [pc, #204]	@ (8003938 <HAL_ETH_Init+0x12c>)
 800386a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003882:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003884:	f7ff feac 	bl	80035e0 <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800388a:	e011      	b.n	80038b0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800388c:	f7ff fea8 	bl	80035e0 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800389a:	d909      	bls.n	80038b0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2204      	movs	r2, #4
 80038a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	22e0      	movs	r2, #224	@ 0xe0
 80038a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e03d      	b.n	800392c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e4      	bne.n	800388c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f97a 	bl	8003bbc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fa25 	bl	8003d18 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa7b 	bl	8003dca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	461a      	mov	r2, r3
 80038da:	2100      	movs	r1, #0
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f9e3 	bl	8003ca8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80038f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4b0f      	ldr	r3, [pc, #60]	@ (800393c <HAL_ETH_Init+0x130>)
 8003900:	430b      	orrs	r3, r1
 8003902:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003916:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2210      	movs	r2, #16
 8003926:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40023800 	.word	0x40023800
 8003938:	40013800 	.word	0x40013800
 800393c:	00020060 	.word	0x00020060

08003940 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4b53      	ldr	r3, [pc, #332]	@ (8003aa4 <ETH_SetMACConfig+0x164>)
 8003956:	4013      	ands	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	7b9b      	ldrb	r3, [r3, #14]
 800395e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	7c12      	ldrb	r2, [r2, #16]
 8003964:	2a00      	cmp	r2, #0
 8003966:	d102      	bne.n	800396e <ETH_SetMACConfig+0x2e>
 8003968:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800396c:	e000      	b.n	8003970 <ETH_SetMACConfig+0x30>
 800396e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003970:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	7c52      	ldrb	r2, [r2, #17]
 8003976:	2a00      	cmp	r2, #0
 8003978:	d102      	bne.n	8003980 <ETH_SetMACConfig+0x40>
 800397a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800397e:	e000      	b.n	8003982 <ETH_SetMACConfig+0x42>
 8003980:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003982:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003988:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	7fdb      	ldrb	r3, [r3, #31]
 800398e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003990:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003996:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	7f92      	ldrb	r2, [r2, #30]
 800399c:	2a00      	cmp	r2, #0
 800399e:	d102      	bne.n	80039a6 <ETH_SetMACConfig+0x66>
 80039a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039a4:	e000      	b.n	80039a8 <ETH_SetMACConfig+0x68>
 80039a6:	2200      	movs	r2, #0
                        macconf->Speed |
 80039a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	7f1b      	ldrb	r3, [r3, #28]
 80039ae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80039b0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80039b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	791b      	ldrb	r3, [r3, #4]
 80039bc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80039be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80039c6:	2a00      	cmp	r2, #0
 80039c8:	d102      	bne.n	80039d0 <ETH_SetMACConfig+0x90>
 80039ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ce:	e000      	b.n	80039d2 <ETH_SetMACConfig+0x92>
 80039d0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80039d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	7bdb      	ldrb	r3, [r3, #15]
 80039d8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80039da:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80039e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039e8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80039ea:	4313      	orrs	r3, r2
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a02:	2001      	movs	r0, #1
 8003a04:	f7ff fdf8 	bl	80035f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003a1e:	4013      	ands	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a26:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003a2e:	2a00      	cmp	r2, #0
 8003a30:	d101      	bne.n	8003a36 <ETH_SetMACConfig+0xf6>
 8003a32:	2280      	movs	r2, #128	@ 0x80
 8003a34:	e000      	b.n	8003a38 <ETH_SetMACConfig+0xf8>
 8003a36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003a38:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003a3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003a46:	2a01      	cmp	r2, #1
 8003a48:	d101      	bne.n	8003a4e <ETH_SetMACConfig+0x10e>
 8003a4a:	2208      	movs	r2, #8
 8003a4c:	e000      	b.n	8003a50 <ETH_SetMACConfig+0x110>
 8003a4e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003a50:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003a58:	2a01      	cmp	r2, #1
 8003a5a:	d101      	bne.n	8003a60 <ETH_SetMACConfig+0x120>
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	e000      	b.n	8003a62 <ETH_SetMACConfig+0x122>
 8003a60:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003a62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003a6a:	2a01      	cmp	r2, #1
 8003a6c:	d101      	bne.n	8003a72 <ETH_SetMACConfig+0x132>
 8003a6e:	2202      	movs	r2, #2
 8003a70:	e000      	b.n	8003a74 <ETH_SetMACConfig+0x134>
 8003a72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003a74:	4313      	orrs	r3, r2
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	f7ff fdb3 	bl	80035f8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	619a      	str	r2, [r3, #24]
}
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	fd20810f 	.word	0xfd20810f

08003aa8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	4b3d      	ldr	r3, [pc, #244]	@ (8003bb8 <ETH_SetDMAConfig+0x110>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	7b1b      	ldrb	r3, [r3, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d102      	bne.n	8003ad4 <ETH_SetDMAConfig+0x2c>
 8003ace:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003ad2:	e000      	b.n	8003ad6 <ETH_SetDMAConfig+0x2e>
 8003ad4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	7b5b      	ldrb	r3, [r3, #13]
 8003ada:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003adc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	7f52      	ldrb	r2, [r2, #29]
 8003ae2:	2a00      	cmp	r2, #0
 8003ae4:	d102      	bne.n	8003aec <ETH_SetDMAConfig+0x44>
 8003ae6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003aea:	e000      	b.n	8003aee <ETH_SetDMAConfig+0x46>
 8003aec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003aee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	7b9b      	ldrb	r3, [r3, #14]
 8003af4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003af6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003afc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	7f1b      	ldrb	r3, [r3, #28]
 8003b02:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003b04:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	7f9b      	ldrb	r3, [r3, #30]
 8003b0a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003b0c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003b12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b1a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b3e:	2001      	movs	r0, #1
 8003b40:	f7ff fd5a 	bl	80035f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	791b      	ldrb	r3, [r3, #4]
 8003b56:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003b5c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003b62:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003b68:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b70:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003b72:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b78:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003b7a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003b80:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b8e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	f7ff fd2b 	bl	80035f8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003baa:	461a      	mov	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6013      	str	r3, [r2, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	f8de3f23 	.word	0xf8de3f23

08003bbc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b0a6      	sub	sp, #152	@ 0x98
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003be0:	2300      	movs	r3, #0
 8003be2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003be6:	2301      	movs	r3, #1
 8003be8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003c12:	2300      	movs	r3, #0
 8003c14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003c24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c28:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003c2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003c36:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff fe7f 	bl	8003940 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003c42:	2301      	movs	r3, #1
 8003c44:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003c46:	2301      	movs	r3, #1
 8003c48:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003c50:	2301      	movs	r3, #1
 8003c52:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003c54:	2300      	movs	r3, #0
 8003c56:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003c64:	2300      	movs	r3, #0
 8003c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003c72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c76:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003c78:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003c7c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003c7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c82:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003c84:	2301      	movs	r3, #1
 8003c86:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003c92:	f107 0308 	add.w	r3, r7, #8
 8003c96:	4619      	mov	r1, r3
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff ff05 	bl	8003aa8 <ETH_SetDMAConfig>
}
 8003c9e:	bf00      	nop
 8003ca0:	3798      	adds	r7, #152	@ 0x98
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3305      	adds	r3, #5
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	021b      	lsls	r3, r3, #8
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	3204      	adds	r2, #4
 8003cc0:	7812      	ldrb	r2, [r2, #0]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	4b11      	ldr	r3, [pc, #68]	@ (8003d10 <ETH_MACAddressConfig+0x68>)
 8003cca:	4413      	add	r3, r2
 8003ccc:	461a      	mov	r2, r3
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3303      	adds	r3, #3
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	061a      	lsls	r2, r3, #24
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3302      	adds	r3, #2
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	041b      	lsls	r3, r3, #16
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	4313      	orrs	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	7812      	ldrb	r2, [r2, #0]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	4b06      	ldr	r3, [pc, #24]	@ (8003d14 <ETH_MACAddressConfig+0x6c>)
 8003cfa:	4413      	add	r3, r2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	6013      	str	r3, [r2, #0]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40028040 	.word	0x40028040
 8003d14:	40028044 	.word	0x40028044

08003d18 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	e03e      	b.n	8003da4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68d9      	ldr	r1, [r3, #12]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	440b      	add	r3, r1
 8003d36:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2200      	movs	r2, #0
 8003d42:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2200      	movs	r2, #0
 8003d48:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	3206      	adds	r2, #6
 8003d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d80c      	bhi.n	8003d88 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68d9      	ldr	r1, [r3, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	440b      	add	r3, r1
 8003d80:	461a      	mov	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	60da      	str	r2, [r3, #12]
 8003d86:	e004      	b.n	8003d92 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3301      	adds	r3, #1
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d9bd      	bls.n	8003d26 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dbc:	611a      	str	r2, [r3, #16]
}
 8003dbe:	bf00      	nop
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	e048      	b.n	8003e6a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6919      	ldr	r1, [r3, #16]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	440b      	add	r3, r1
 8003de8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2200      	movs	r2, #0
 8003df4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2200      	movs	r2, #0
 8003e06:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003e14:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	3212      	adds	r2, #18
 8003e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d80c      	bhi.n	8003e5a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6919      	ldr	r1, [r3, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	440b      	add	r3, r1
 8003e52:	461a      	mov	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	60da      	str	r2, [r3, #12]
 8003e58:	e004      	b.n	8003e64 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3301      	adds	r3, #1
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d9b3      	bls.n	8003dd8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e9a:	60da      	str	r2, [r3, #12]
}
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b089      	sub	sp, #36	@ 0x24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	e175      	b.n	80041b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ec8:	2201      	movs	r2, #1
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	f040 8164 	bne.w	80041ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d005      	beq.n	8003efe <HAL_GPIO_Init+0x56>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d130      	bne.n	8003f60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	2203      	movs	r2, #3
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4013      	ands	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f34:	2201      	movs	r2, #1
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 0201 	and.w	r2, r3, #1
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d017      	beq.n	8003f9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	2203      	movs	r2, #3
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d123      	bne.n	8003ff0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	08da      	lsrs	r2, r3, #3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3208      	adds	r2, #8
 8003fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	220f      	movs	r2, #15
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	08da      	lsrs	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3208      	adds	r2, #8
 8003fea:	69b9      	ldr	r1, [r7, #24]
 8003fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 0203 	and.w	r2, r3, #3
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4313      	orrs	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80be 	beq.w	80041ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004032:	4b66      	ldr	r3, [pc, #408]	@ (80041cc <HAL_GPIO_Init+0x324>)
 8004034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004036:	4a65      	ldr	r2, [pc, #404]	@ (80041cc <HAL_GPIO_Init+0x324>)
 8004038:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800403c:	6453      	str	r3, [r2, #68]	@ 0x44
 800403e:	4b63      	ldr	r3, [pc, #396]	@ (80041cc <HAL_GPIO_Init+0x324>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800404a:	4a61      	ldr	r2, [pc, #388]	@ (80041d0 <HAL_GPIO_Init+0x328>)
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	3302      	adds	r3, #2
 8004052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	220f      	movs	r2, #15
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4013      	ands	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a58      	ldr	r2, [pc, #352]	@ (80041d4 <HAL_GPIO_Init+0x32c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d037      	beq.n	80040e6 <HAL_GPIO_Init+0x23e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a57      	ldr	r2, [pc, #348]	@ (80041d8 <HAL_GPIO_Init+0x330>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d031      	beq.n	80040e2 <HAL_GPIO_Init+0x23a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a56      	ldr	r2, [pc, #344]	@ (80041dc <HAL_GPIO_Init+0x334>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d02b      	beq.n	80040de <HAL_GPIO_Init+0x236>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a55      	ldr	r2, [pc, #340]	@ (80041e0 <HAL_GPIO_Init+0x338>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d025      	beq.n	80040da <HAL_GPIO_Init+0x232>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a54      	ldr	r2, [pc, #336]	@ (80041e4 <HAL_GPIO_Init+0x33c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d01f      	beq.n	80040d6 <HAL_GPIO_Init+0x22e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a53      	ldr	r2, [pc, #332]	@ (80041e8 <HAL_GPIO_Init+0x340>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d019      	beq.n	80040d2 <HAL_GPIO_Init+0x22a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a52      	ldr	r2, [pc, #328]	@ (80041ec <HAL_GPIO_Init+0x344>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d013      	beq.n	80040ce <HAL_GPIO_Init+0x226>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a51      	ldr	r2, [pc, #324]	@ (80041f0 <HAL_GPIO_Init+0x348>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00d      	beq.n	80040ca <HAL_GPIO_Init+0x222>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a50      	ldr	r2, [pc, #320]	@ (80041f4 <HAL_GPIO_Init+0x34c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d007      	beq.n	80040c6 <HAL_GPIO_Init+0x21e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a4f      	ldr	r2, [pc, #316]	@ (80041f8 <HAL_GPIO_Init+0x350>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d101      	bne.n	80040c2 <HAL_GPIO_Init+0x21a>
 80040be:	2309      	movs	r3, #9
 80040c0:	e012      	b.n	80040e8 <HAL_GPIO_Init+0x240>
 80040c2:	230a      	movs	r3, #10
 80040c4:	e010      	b.n	80040e8 <HAL_GPIO_Init+0x240>
 80040c6:	2308      	movs	r3, #8
 80040c8:	e00e      	b.n	80040e8 <HAL_GPIO_Init+0x240>
 80040ca:	2307      	movs	r3, #7
 80040cc:	e00c      	b.n	80040e8 <HAL_GPIO_Init+0x240>
 80040ce:	2306      	movs	r3, #6
 80040d0:	e00a      	b.n	80040e8 <HAL_GPIO_Init+0x240>
 80040d2:	2305      	movs	r3, #5
 80040d4:	e008      	b.n	80040e8 <HAL_GPIO_Init+0x240>
 80040d6:	2304      	movs	r3, #4
 80040d8:	e006      	b.n	80040e8 <HAL_GPIO_Init+0x240>
 80040da:	2303      	movs	r3, #3
 80040dc:	e004      	b.n	80040e8 <HAL_GPIO_Init+0x240>
 80040de:	2302      	movs	r3, #2
 80040e0:	e002      	b.n	80040e8 <HAL_GPIO_Init+0x240>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <HAL_GPIO_Init+0x240>
 80040e6:	2300      	movs	r3, #0
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	f002 0203 	and.w	r2, r2, #3
 80040ee:	0092      	lsls	r2, r2, #2
 80040f0:	4093      	lsls	r3, r2
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80040f8:	4935      	ldr	r1, [pc, #212]	@ (80041d0 <HAL_GPIO_Init+0x328>)
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	089b      	lsrs	r3, r3, #2
 80040fe:	3302      	adds	r3, #2
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004106:	4b3d      	ldr	r3, [pc, #244]	@ (80041fc <HAL_GPIO_Init+0x354>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	43db      	mvns	r3, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4013      	ands	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800412a:	4a34      	ldr	r2, [pc, #208]	@ (80041fc <HAL_GPIO_Init+0x354>)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004130:	4b32      	ldr	r3, [pc, #200]	@ (80041fc <HAL_GPIO_Init+0x354>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	43db      	mvns	r3, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4013      	ands	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004154:	4a29      	ldr	r2, [pc, #164]	@ (80041fc <HAL_GPIO_Init+0x354>)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800415a:	4b28      	ldr	r3, [pc, #160]	@ (80041fc <HAL_GPIO_Init+0x354>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	43db      	mvns	r3, r3
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	4013      	ands	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800417e:	4a1f      	ldr	r2, [pc, #124]	@ (80041fc <HAL_GPIO_Init+0x354>)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004184:	4b1d      	ldr	r3, [pc, #116]	@ (80041fc <HAL_GPIO_Init+0x354>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	43db      	mvns	r3, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4013      	ands	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041a8:	4a14      	ldr	r2, [pc, #80]	@ (80041fc <HAL_GPIO_Init+0x354>)
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3301      	adds	r3, #1
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	2b0f      	cmp	r3, #15
 80041b8:	f67f ae86 	bls.w	8003ec8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	3724      	adds	r7, #36	@ 0x24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40013800 	.word	0x40013800
 80041d4:	40020000 	.word	0x40020000
 80041d8:	40020400 	.word	0x40020400
 80041dc:	40020800 	.word	0x40020800
 80041e0:	40020c00 	.word	0x40020c00
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40021400 	.word	0x40021400
 80041ec:	40021800 	.word	0x40021800
 80041f0:	40021c00 	.word	0x40021c00
 80041f4:	40022000 	.word	0x40022000
 80041f8:	40022400 	.word	0x40022400
 80041fc:	40013c00 	.word	0x40013c00

08004200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	807b      	strh	r3, [r7, #2]
 800420c:	4613      	mov	r3, r2
 800420e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004210:	787b      	ldrb	r3, [r7, #1]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004216:	887a      	ldrh	r2, [r7, #2]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800421c:	e003      	b.n	8004226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800421e:	887b      	ldrh	r3, [r7, #2]
 8004220:	041a      	lsls	r2, r3, #16
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	619a      	str	r2, [r3, #24]
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b086      	sub	sp, #24
 8004236:	af02      	add	r7, sp, #8
 8004238:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e108      	b.n	8004456 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff f852 	bl	8003308 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2203      	movs	r2, #3
 8004268:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004272:	d102      	bne.n	800427a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f001 ff3c 	bl	80060fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	7c1a      	ldrb	r2, [r3, #16]
 800428c:	f88d 2000 	strb.w	r2, [sp]
 8004290:	3304      	adds	r3, #4
 8004292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004294:	f001 fed8 	bl	8006048 <USB_CoreInit>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e0d5      	b.n	8004456 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f001 ff34 	bl	800611e <USB_SetCurrentMode>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0c6      	b.n	8004456 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]
 80042cc:	e04a      	b.n	8004364 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042ce:	7bfa      	ldrb	r2, [r7, #15]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	3315      	adds	r3, #21
 80042de:	2201      	movs	r2, #1
 80042e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042e2:	7bfa      	ldrb	r2, [r7, #15]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	3314      	adds	r3, #20
 80042f2:	7bfa      	ldrb	r2, [r7, #15]
 80042f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	b298      	uxth	r0, r3
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	332e      	adds	r3, #46	@ 0x2e
 800430a:	4602      	mov	r2, r0
 800430c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800430e:	7bfa      	ldrb	r2, [r7, #15]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	3318      	adds	r3, #24
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004322:	7bfa      	ldrb	r2, [r7, #15]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	331c      	adds	r3, #28
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004336:	7bfa      	ldrb	r2, [r7, #15]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	3320      	adds	r3, #32
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800434a:	7bfa      	ldrb	r2, [r7, #15]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	3324      	adds	r3, #36	@ 0x24
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	3301      	adds	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	791b      	ldrb	r3, [r3, #4]
 8004368:	7bfa      	ldrb	r2, [r7, #15]
 800436a:	429a      	cmp	r2, r3
 800436c:	d3af      	bcc.n	80042ce <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800436e:	2300      	movs	r3, #0
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	e044      	b.n	80043fe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004374:	7bfa      	ldrb	r2, [r7, #15]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800438a:	7bfa      	ldrb	r2, [r7, #15]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800439c:	7bfa      	ldrb	r2, [r7, #15]
 800439e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043a0:	7bfa      	ldrb	r2, [r7, #15]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80043b2:	2200      	movs	r2, #0
 80043b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043b6:	7bfa      	ldrb	r2, [r7, #15]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043cc:	7bfa      	ldrb	r2, [r7, #15]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4413      	add	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043e2:	7bfa      	ldrb	r2, [r7, #15]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	4613      	mov	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	3301      	adds	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	791b      	ldrb	r3, [r3, #4]
 8004402:	7bfa      	ldrb	r2, [r7, #15]
 8004404:	429a      	cmp	r2, r3
 8004406:	d3b5      	bcc.n	8004374 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7c1a      	ldrb	r2, [r3, #16]
 8004410:	f88d 2000 	strb.w	r2, [sp]
 8004414:	3304      	adds	r3, #4
 8004416:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004418:	f001 fece 	bl	80061b8 <USB_DevInit>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2202      	movs	r2, #2
 8004426:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e013      	b.n	8004456 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	7b1b      	ldrb	r3, [r3, #12]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d102      	bne.n	800444a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f80b 	bl	8004460 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f002 f889 	bl	8006566 <USB_DevDisconnect>

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800448e:	4b05      	ldr	r3, [pc, #20]	@ (80044a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8004490:	4313      	orrs	r3, r2
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	10000003 	.word	0x10000003

080044a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ac:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a04      	ldr	r2, [pc, #16]	@ (80044c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b6:	6013      	str	r3, [r2, #0]
}
 80044b8:	bf00      	nop
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40007000 	.word	0x40007000

080044c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80044d0:	2300      	movs	r3, #0
 80044d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e291      	b.n	8004a02 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8087 	beq.w	80045fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044ec:	4b96      	ldr	r3, [pc, #600]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 030c 	and.w	r3, r3, #12
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d00c      	beq.n	8004512 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f8:	4b93      	ldr	r3, [pc, #588]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b08      	cmp	r3, #8
 8004502:	d112      	bne.n	800452a <HAL_RCC_OscConfig+0x62>
 8004504:	4b90      	ldr	r3, [pc, #576]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800450c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004510:	d10b      	bne.n	800452a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004512:	4b8d      	ldr	r3, [pc, #564]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d06c      	beq.n	80045f8 <HAL_RCC_OscConfig+0x130>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d168      	bne.n	80045f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e26b      	b.n	8004a02 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004532:	d106      	bne.n	8004542 <HAL_RCC_OscConfig+0x7a>
 8004534:	4b84      	ldr	r3, [pc, #528]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a83      	ldr	r2, [pc, #524]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 800453a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	e02e      	b.n	80045a0 <HAL_RCC_OscConfig+0xd8>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10c      	bne.n	8004564 <HAL_RCC_OscConfig+0x9c>
 800454a:	4b7f      	ldr	r3, [pc, #508]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a7e      	ldr	r2, [pc, #504]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	4b7c      	ldr	r3, [pc, #496]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a7b      	ldr	r2, [pc, #492]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 800455c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	e01d      	b.n	80045a0 <HAL_RCC_OscConfig+0xd8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0xc0>
 800456e:	4b76      	ldr	r3, [pc, #472]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a75      	ldr	r2, [pc, #468]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	4b73      	ldr	r3, [pc, #460]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a72      	ldr	r2, [pc, #456]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0xd8>
 8004588:	4b6f      	ldr	r3, [pc, #444]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a6e      	ldr	r2, [pc, #440]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 800458e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	4b6c      	ldr	r3, [pc, #432]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a6b      	ldr	r2, [pc, #428]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 800459a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800459e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d013      	beq.n	80045d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7ff f81a 	bl	80035e0 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b0:	f7ff f816 	bl	80035e0 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	@ 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e21f      	b.n	8004a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	4b61      	ldr	r3, [pc, #388]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0xe8>
 80045ce:	e014      	b.n	80045fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7ff f806 	bl	80035e0 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d8:	f7ff f802 	bl	80035e0 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	@ 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e20b      	b.n	8004a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ea:	4b57      	ldr	r3, [pc, #348]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x110>
 80045f6:	e000      	b.n	80045fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d069      	beq.n	80046da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004606:	4b50      	ldr	r3, [pc, #320]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004612:	4b4d      	ldr	r3, [pc, #308]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 030c 	and.w	r3, r3, #12
 800461a:	2b08      	cmp	r3, #8
 800461c:	d11c      	bne.n	8004658 <HAL_RCC_OscConfig+0x190>
 800461e:	4b4a      	ldr	r3, [pc, #296]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d116      	bne.n	8004658 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462a:	4b47      	ldr	r3, [pc, #284]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_RCC_OscConfig+0x17a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d001      	beq.n	8004642 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e1df      	b.n	8004a02 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004642:	4b41      	ldr	r3, [pc, #260]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	493d      	ldr	r1, [pc, #244]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004652:	4313      	orrs	r3, r2
 8004654:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004656:	e040      	b.n	80046da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d023      	beq.n	80046a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004660:	4b39      	ldr	r3, [pc, #228]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a38      	ldr	r2, [pc, #224]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466c:	f7fe ffb8 	bl	80035e0 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004674:	f7fe ffb4 	bl	80035e0 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e1bd      	b.n	8004a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004686:	4b30      	ldr	r3, [pc, #192]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004692:	4b2d      	ldr	r3, [pc, #180]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4929      	ldr	r1, [pc, #164]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	600b      	str	r3, [r1, #0]
 80046a6:	e018      	b.n	80046da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046a8:	4b27      	ldr	r3, [pc, #156]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a26      	ldr	r2, [pc, #152]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 80046ae:	f023 0301 	bic.w	r3, r3, #1
 80046b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b4:	f7fe ff94 	bl	80035e0 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046bc:	f7fe ff90 	bl	80035e0 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e199      	b.n	8004a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f0      	bne.n	80046bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d038      	beq.n	8004758 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d019      	beq.n	8004722 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ee:	4b16      	ldr	r3, [pc, #88]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 80046f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f2:	4a15      	ldr	r2, [pc, #84]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fa:	f7fe ff71 	bl	80035e0 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004702:	f7fe ff6d 	bl	80035e0 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e176      	b.n	8004a02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004714:	4b0c      	ldr	r3, [pc, #48]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0x23a>
 8004720:	e01a      	b.n	8004758 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004722:	4b09      	ldr	r3, [pc, #36]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004726:	4a08      	ldr	r2, [pc, #32]	@ (8004748 <HAL_RCC_OscConfig+0x280>)
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472e:	f7fe ff57 	bl	80035e0 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004734:	e00a      	b.n	800474c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004736:	f7fe ff53 	bl	80035e0 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d903      	bls.n	800474c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e15c      	b.n	8004a02 <HAL_RCC_OscConfig+0x53a>
 8004748:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800474c:	4b91      	ldr	r3, [pc, #580]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 800474e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1ee      	bne.n	8004736 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 80a4 	beq.w	80048ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004766:	4b8b      	ldr	r3, [pc, #556]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10d      	bne.n	800478e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004772:	4b88      	ldr	r3, [pc, #544]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	4a87      	ldr	r2, [pc, #540]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 8004778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800477c:	6413      	str	r3, [r2, #64]	@ 0x40
 800477e:	4b85      	ldr	r3, [pc, #532]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800478e:	4b82      	ldr	r3, [pc, #520]	@ (8004998 <HAL_RCC_OscConfig+0x4d0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d118      	bne.n	80047cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800479a:	4b7f      	ldr	r3, [pc, #508]	@ (8004998 <HAL_RCC_OscConfig+0x4d0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a7e      	ldr	r2, [pc, #504]	@ (8004998 <HAL_RCC_OscConfig+0x4d0>)
 80047a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a6:	f7fe ff1b 	bl	80035e0 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ae:	f7fe ff17 	bl	80035e0 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b64      	cmp	r3, #100	@ 0x64
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e120      	b.n	8004a02 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c0:	4b75      	ldr	r3, [pc, #468]	@ (8004998 <HAL_RCC_OscConfig+0x4d0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d106      	bne.n	80047e2 <HAL_RCC_OscConfig+0x31a>
 80047d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	6713      	str	r3, [r2, #112]	@ 0x70
 80047e0:	e02d      	b.n	800483e <HAL_RCC_OscConfig+0x376>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10c      	bne.n	8004804 <HAL_RCC_OscConfig+0x33c>
 80047ea:	4b6a      	ldr	r3, [pc, #424]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ee:	4a69      	ldr	r2, [pc, #420]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f6:	4b67      	ldr	r3, [pc, #412]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fa:	4a66      	ldr	r2, [pc, #408]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 80047fc:	f023 0304 	bic.w	r3, r3, #4
 8004800:	6713      	str	r3, [r2, #112]	@ 0x70
 8004802:	e01c      	b.n	800483e <HAL_RCC_OscConfig+0x376>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b05      	cmp	r3, #5
 800480a:	d10c      	bne.n	8004826 <HAL_RCC_OscConfig+0x35e>
 800480c:	4b61      	ldr	r3, [pc, #388]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004810:	4a60      	ldr	r2, [pc, #384]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 8004812:	f043 0304 	orr.w	r3, r3, #4
 8004816:	6713      	str	r3, [r2, #112]	@ 0x70
 8004818:	4b5e      	ldr	r3, [pc, #376]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 800481a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481c:	4a5d      	ldr	r2, [pc, #372]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	6713      	str	r3, [r2, #112]	@ 0x70
 8004824:	e00b      	b.n	800483e <HAL_RCC_OscConfig+0x376>
 8004826:	4b5b      	ldr	r3, [pc, #364]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482a:	4a5a      	ldr	r2, [pc, #360]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 800482c:	f023 0301 	bic.w	r3, r3, #1
 8004830:	6713      	str	r3, [r2, #112]	@ 0x70
 8004832:	4b58      	ldr	r3, [pc, #352]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 8004834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004836:	4a57      	ldr	r2, [pc, #348]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 8004838:	f023 0304 	bic.w	r3, r3, #4
 800483c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d015      	beq.n	8004872 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004846:	f7fe fecb 	bl	80035e0 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484c:	e00a      	b.n	8004864 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484e:	f7fe fec7 	bl	80035e0 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800485c:	4293      	cmp	r3, r2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e0ce      	b.n	8004a02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004864:	4b4b      	ldr	r3, [pc, #300]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0ee      	beq.n	800484e <HAL_RCC_OscConfig+0x386>
 8004870:	e014      	b.n	800489c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004872:	f7fe feb5 	bl	80035e0 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004878:	e00a      	b.n	8004890 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487a:	f7fe feb1 	bl	80035e0 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004888:	4293      	cmp	r3, r2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e0b8      	b.n	8004a02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004890:	4b40      	ldr	r3, [pc, #256]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 8004892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1ee      	bne.n	800487a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800489c:	7dfb      	ldrb	r3, [r7, #23]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d105      	bne.n	80048ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a2:	4b3c      	ldr	r3, [pc, #240]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	4a3b      	ldr	r2, [pc, #236]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 80048a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ac:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 80a4 	beq.w	8004a00 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048b8:	4b36      	ldr	r3, [pc, #216]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 030c 	and.w	r3, r3, #12
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d06b      	beq.n	800499c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d149      	bne.n	8004960 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048cc:	4b31      	ldr	r3, [pc, #196]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a30      	ldr	r2, [pc, #192]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 80048d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d8:	f7fe fe82 	bl	80035e0 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fe fe7e 	bl	80035e0 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e087      	b.n	8004a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f2:	4b28      	ldr	r3, [pc, #160]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69da      	ldr	r2, [r3, #28]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490c:	019b      	lsls	r3, r3, #6
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	085b      	lsrs	r3, r3, #1
 8004916:	3b01      	subs	r3, #1
 8004918:	041b      	lsls	r3, r3, #16
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004920:	061b      	lsls	r3, r3, #24
 8004922:	4313      	orrs	r3, r2
 8004924:	4a1b      	ldr	r2, [pc, #108]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 8004926:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800492a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800492c:	4b19      	ldr	r3, [pc, #100]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a18      	ldr	r2, [pc, #96]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 8004932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fe fe52 	bl	80035e0 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004940:	f7fe fe4e 	bl	80035e0 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e057      	b.n	8004a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004952:	4b10      	ldr	r3, [pc, #64]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x478>
 800495e:	e04f      	b.n	8004a00 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004960:	4b0c      	ldr	r3, [pc, #48]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a0b      	ldr	r2, [pc, #44]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 8004966:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800496a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fe fe38 	bl	80035e0 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004974:	f7fe fe34 	bl	80035e0 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e03d      	b.n	8004a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004986:	4b03      	ldr	r3, [pc, #12]	@ (8004994 <HAL_RCC_OscConfig+0x4cc>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x4ac>
 8004992:	e035      	b.n	8004a00 <HAL_RCC_OscConfig+0x538>
 8004994:	40023800 	.word	0x40023800
 8004998:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800499c:	4b1b      	ldr	r3, [pc, #108]	@ (8004a0c <HAL_RCC_OscConfig+0x544>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d028      	beq.n	80049fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d121      	bne.n	80049fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d11a      	bne.n	80049fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049cc:	4013      	ands	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d111      	bne.n	80049fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e2:	085b      	lsrs	r3, r3, #1
 80049e4:	3b01      	subs	r3, #1
 80049e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d107      	bne.n	80049fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d001      	beq.n	8004a00 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800

08004a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0d0      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a28:	4b6a      	ldr	r3, [pc, #424]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d910      	bls.n	8004a58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a36:	4b67      	ldr	r3, [pc, #412]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f023 020f 	bic.w	r2, r3, #15
 8004a3e:	4965      	ldr	r1, [pc, #404]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a46:	4b63      	ldr	r3, [pc, #396]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d001      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0b8      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d020      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a70:	4b59      	ldr	r3, [pc, #356]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4a58      	ldr	r2, [pc, #352]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a88:	4b53      	ldr	r3, [pc, #332]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4a52      	ldr	r2, [pc, #328]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a94:	4b50      	ldr	r3, [pc, #320]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	494d      	ldr	r1, [pc, #308]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d040      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d107      	bne.n	8004aca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aba:	4b47      	ldr	r3, [pc, #284]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d115      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e07f      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad2:	4b41      	ldr	r3, [pc, #260]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e073      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e06b      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af2:	4b39      	ldr	r3, [pc, #228]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f023 0203 	bic.w	r2, r3, #3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4936      	ldr	r1, [pc, #216]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b04:	f7fe fd6c 	bl	80035e0 <HAL_GetTick>
 8004b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0a:	e00a      	b.n	8004b22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b0c:	f7fe fd68 	bl	80035e0 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e053      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b22:	4b2d      	ldr	r3, [pc, #180]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 020c 	and.w	r2, r3, #12
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d1eb      	bne.n	8004b0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b34:	4b27      	ldr	r3, [pc, #156]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d210      	bcs.n	8004b64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b42:	4b24      	ldr	r3, [pc, #144]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f023 020f 	bic.w	r2, r3, #15
 8004b4a:	4922      	ldr	r1, [pc, #136]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b52:	4b20      	ldr	r3, [pc, #128]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e032      	b.n	8004bca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b70:	4b19      	ldr	r3, [pc, #100]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4916      	ldr	r1, [pc, #88]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d009      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b8e:	4b12      	ldr	r3, [pc, #72]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	490e      	ldr	r1, [pc, #56]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ba2:	f000 f821 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	490a      	ldr	r1, [pc, #40]	@ (8004bdc <HAL_RCC_ClockConfig+0x1cc>)
 8004bb4:	5ccb      	ldrb	r3, [r1, r3]
 8004bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bba:	4a09      	ldr	r2, [pc, #36]	@ (8004be0 <HAL_RCC_ClockConfig+0x1d0>)
 8004bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bbe:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <HAL_RCC_ClockConfig+0x1d4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fe fcc8 	bl	8003558 <HAL_InitTick>

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023c00 	.word	0x40023c00
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	0800701c 	.word	0x0800701c
 8004be0:	2000003c 	.word	0x2000003c
 8004be4:	20000040 	.word	0x20000040

08004be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bec:	b094      	sub	sp, #80	@ 0x50
 8004bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c00:	4b79      	ldr	r3, [pc, #484]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 030c 	and.w	r3, r3, #12
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d00d      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0x40>
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	f200 80e1 	bhi.w	8004dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x34>
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d003      	beq.n	8004c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c1a:	e0db      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c1c:	4b73      	ldr	r3, [pc, #460]	@ (8004dec <HAL_RCC_GetSysClockFreq+0x204>)
 8004c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c20:	e0db      	b.n	8004dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c22:	4b73      	ldr	r3, [pc, #460]	@ (8004df0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c26:	e0d8      	b.n	8004dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c28:	4b6f      	ldr	r3, [pc, #444]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c32:	4b6d      	ldr	r3, [pc, #436]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d063      	beq.n	8004d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	099b      	lsrs	r3, r3, #6
 8004c44:	2200      	movs	r2, #0
 8004c46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c52:	2300      	movs	r3, #0
 8004c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	462b      	mov	r3, r5
 8004c5e:	f04f 0000 	mov.w	r0, #0
 8004c62:	f04f 0100 	mov.w	r1, #0
 8004c66:	0159      	lsls	r1, r3, #5
 8004c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c6c:	0150      	lsls	r0, r2, #5
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4621      	mov	r1, r4
 8004c74:	1a51      	subs	r1, r2, r1
 8004c76:	6139      	str	r1, [r7, #16]
 8004c78:	4629      	mov	r1, r5
 8004c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c8c:	4659      	mov	r1, fp
 8004c8e:	018b      	lsls	r3, r1, #6
 8004c90:	4651      	mov	r1, sl
 8004c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c96:	4651      	mov	r1, sl
 8004c98:	018a      	lsls	r2, r1, #6
 8004c9a:	4651      	mov	r1, sl
 8004c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8004ca0:	4659      	mov	r1, fp
 8004ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cba:	4690      	mov	r8, r2
 8004cbc:	4699      	mov	r9, r3
 8004cbe:	4623      	mov	r3, r4
 8004cc0:	eb18 0303 	adds.w	r3, r8, r3
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	462b      	mov	r3, r5
 8004cc8:	eb49 0303 	adc.w	r3, r9, r3
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cda:	4629      	mov	r1, r5
 8004cdc:	024b      	lsls	r3, r1, #9
 8004cde:	4621      	mov	r1, r4
 8004ce0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	024a      	lsls	r2, r1, #9
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4619      	mov	r1, r3
 8004cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cee:	2200      	movs	r2, #0
 8004cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cf8:	f7fd f972 	bl	8001fe0 <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4613      	mov	r3, r2
 8004d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d04:	e058      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d06:	4b38      	ldr	r3, [pc, #224]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	099b      	lsrs	r3, r3, #6
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	4618      	mov	r0, r3
 8004d10:	4611      	mov	r1, r2
 8004d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d16:	623b      	str	r3, [r7, #32]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d20:	4642      	mov	r2, r8
 8004d22:	464b      	mov	r3, r9
 8004d24:	f04f 0000 	mov.w	r0, #0
 8004d28:	f04f 0100 	mov.w	r1, #0
 8004d2c:	0159      	lsls	r1, r3, #5
 8004d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d32:	0150      	lsls	r0, r2, #5
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4641      	mov	r1, r8
 8004d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d3e:	4649      	mov	r1, r9
 8004d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d58:	ebb2 040a 	subs.w	r4, r2, sl
 8004d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	00eb      	lsls	r3, r5, #3
 8004d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d6e:	00e2      	lsls	r2, r4, #3
 8004d70:	4614      	mov	r4, r2
 8004d72:	461d      	mov	r5, r3
 8004d74:	4643      	mov	r3, r8
 8004d76:	18e3      	adds	r3, r4, r3
 8004d78:	603b      	str	r3, [r7, #0]
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	eb45 0303 	adc.w	r3, r5, r3
 8004d80:	607b      	str	r3, [r7, #4]
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d8e:	4629      	mov	r1, r5
 8004d90:	028b      	lsls	r3, r1, #10
 8004d92:	4621      	mov	r1, r4
 8004d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d98:	4621      	mov	r1, r4
 8004d9a:	028a      	lsls	r2, r1, #10
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004da2:	2200      	movs	r2, #0
 8004da4:	61bb      	str	r3, [r7, #24]
 8004da6:	61fa      	str	r2, [r7, #28]
 8004da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dac:	f7fd f918 	bl	8001fe0 <__aeabi_uldivmod>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4613      	mov	r3, r2
 8004db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004db8:	4b0b      	ldr	r3, [pc, #44]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	0c1b      	lsrs	r3, r3, #16
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004dc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dd2:	e002      	b.n	8004dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dd4:	4b05      	ldr	r3, [pc, #20]	@ (8004dec <HAL_RCC_GetSysClockFreq+0x204>)
 8004dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3750      	adds	r7, #80	@ 0x50
 8004de0:	46bd      	mov	sp, r7
 8004de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004de6:	bf00      	nop
 8004de8:	40023800 	.word	0x40023800
 8004dec:	00f42400 	.word	0x00f42400
 8004df0:	007a1200 	.word	0x007a1200

08004df4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df8:	4b03      	ldr	r3, [pc, #12]	@ (8004e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	2000003c 	.word	0x2000003c

08004e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e10:	f7ff fff0 	bl	8004df4 <HAL_RCC_GetHCLKFreq>
 8004e14:	4602      	mov	r2, r0
 8004e16:	4b05      	ldr	r3, [pc, #20]	@ (8004e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	0a9b      	lsrs	r3, r3, #10
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	4903      	ldr	r1, [pc, #12]	@ (8004e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e22:	5ccb      	ldrb	r3, [r1, r3]
 8004e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	0800702c 	.word	0x0800702c

08004e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e38:	f7ff ffdc 	bl	8004df4 <HAL_RCC_GetHCLKFreq>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	4b05      	ldr	r3, [pc, #20]	@ (8004e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	0b5b      	lsrs	r3, r3, #13
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	4903      	ldr	r1, [pc, #12]	@ (8004e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e4a:	5ccb      	ldrb	r3, [r1, r3]
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	40023800 	.word	0x40023800
 8004e58:	0800702c 	.word	0x0800702c

08004e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d012      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e84:	4b69      	ldr	r3, [pc, #420]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4a68      	ldr	r2, [pc, #416]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004e8e:	6093      	str	r3, [r2, #8]
 8004e90:	4b66      	ldr	r3, [pc, #408]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e98:	4964      	ldr	r1, [pc, #400]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d017      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ebc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec4:	4959      	ldr	r1, [pc, #356]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ed4:	d101      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d017      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ef2:	4b4e      	ldr	r3, [pc, #312]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ef8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f00:	494a      	ldr	r1, [pc, #296]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f10:	d101      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004f12:	2301      	movs	r3, #1
 8004f14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 808b 	beq.w	8005056 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f40:	4b3a      	ldr	r3, [pc, #232]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f44:	4a39      	ldr	r2, [pc, #228]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f4c:	4b37      	ldr	r3, [pc, #220]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f58:	4b35      	ldr	r3, [pc, #212]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a34      	ldr	r2, [pc, #208]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f64:	f7fe fb3c 	bl	80035e0 <HAL_GetTick>
 8004f68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f6c:	f7fe fb38 	bl	80035e0 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b64      	cmp	r3, #100	@ 0x64
 8004f78:	d901      	bls.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e357      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f7e:	4b2c      	ldr	r3, [pc, #176]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f8a:	4b28      	ldr	r3, [pc, #160]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d035      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d02e      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fa8:	4b20      	ldr	r3, [pc, #128]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fbc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004fca:	4a18      	ldr	r2, [pc, #96]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fd0:	4b16      	ldr	r3, [pc, #88]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d114      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fe fb00 	bl	80035e0 <HAL_GetTick>
 8004fe0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe2:	e00a      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fe4:	f7fe fafc 	bl	80035e0 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e319      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0ee      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800500e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005012:	d111      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005014:	4b05      	ldr	r3, [pc, #20]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005020:	4b04      	ldr	r3, [pc, #16]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005022:	400b      	ands	r3, r1
 8005024:	4901      	ldr	r1, [pc, #4]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
 800502a:	e00b      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800502c:	40023800 	.word	0x40023800
 8005030:	40007000 	.word	0x40007000
 8005034:	0ffffcff 	.word	0x0ffffcff
 8005038:	4baa      	ldr	r3, [pc, #680]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	4aa9      	ldr	r2, [pc, #676]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800503e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005042:	6093      	str	r3, [r2, #8]
 8005044:	4ba7      	ldr	r3, [pc, #668]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005046:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005050:	49a4      	ldr	r1, [pc, #656]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005052:	4313      	orrs	r3, r2
 8005054:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0310 	and.w	r3, r3, #16
 800505e:	2b00      	cmp	r3, #0
 8005060:	d010      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005062:	4ba0      	ldr	r3, [pc, #640]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005068:	4a9e      	ldr	r2, [pc, #632]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800506a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800506e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005072:	4b9c      	ldr	r3, [pc, #624]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005074:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507c:	4999      	ldr	r1, [pc, #612]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005090:	4b94      	ldr	r3, [pc, #592]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005096:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800509e:	4991      	ldr	r1, [pc, #580]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050b2:	4b8c      	ldr	r3, [pc, #560]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050c0:	4988      	ldr	r1, [pc, #544]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050d4:	4b83      	ldr	r3, [pc, #524]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050e2:	4980      	ldr	r1, [pc, #512]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050f6:	4b7b      	ldr	r3, [pc, #492]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005104:	4977      	ldr	r1, [pc, #476]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005118:	4b72      	ldr	r3, [pc, #456]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511e:	f023 0203 	bic.w	r2, r3, #3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005126:	496f      	ldr	r1, [pc, #444]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800513a:	4b6a      	ldr	r3, [pc, #424]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005140:	f023 020c 	bic.w	r2, r3, #12
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005148:	4966      	ldr	r1, [pc, #408]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800515c:	4b61      	ldr	r3, [pc, #388]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005162:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800516a:	495e      	ldr	r1, [pc, #376]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800517e:	4b59      	ldr	r3, [pc, #356]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005184:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800518c:	4955      	ldr	r1, [pc, #340]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051a0:	4b50      	ldr	r3, [pc, #320]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ae:	494d      	ldr	r1, [pc, #308]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80051c2:	4b48      	ldr	r3, [pc, #288]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d0:	4944      	ldr	r1, [pc, #272]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80051e4:	4b3f      	ldr	r3, [pc, #252]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f2:	493c      	ldr	r1, [pc, #240]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005206:	4b37      	ldr	r3, [pc, #220]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005214:	4933      	ldr	r1, [pc, #204]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005228:	4b2e      	ldr	r3, [pc, #184]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800522a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800522e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005236:	492b      	ldr	r1, [pc, #172]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d011      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800524a:	4b26      	ldr	r3, [pc, #152]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800524c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005250:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005258:	4922      	ldr	r1, [pc, #136]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005264:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005268:	d101      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800526a:	2301      	movs	r3, #1
 800526c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800527a:	2301      	movs	r3, #1
 800527c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800528a:	4b16      	ldr	r3, [pc, #88]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800528c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005290:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005298:	4912      	ldr	r1, [pc, #72]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00b      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052ac:	4b0d      	ldr	r3, [pc, #52]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052bc:	4909      	ldr	r1, [pc, #36]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d006      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 80d9 	beq.w	800548a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052d8:	4b02      	ldr	r3, [pc, #8]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a01      	ldr	r2, [pc, #4]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052e2:	e001      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80052e4:	40023800 	.word	0x40023800
 80052e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ea:	f7fe f979 	bl	80035e0 <HAL_GetTick>
 80052ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052f2:	f7fe f975 	bl	80035e0 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b64      	cmp	r3, #100	@ 0x64
 80052fe:	d901      	bls.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e194      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005304:	4b6c      	ldr	r3, [pc, #432]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1f0      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d021      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005320:	2b00      	cmp	r3, #0
 8005322:	d11d      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005324:	4b64      	ldr	r3, [pc, #400]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800532a:	0c1b      	lsrs	r3, r3, #16
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005332:	4b61      	ldr	r3, [pc, #388]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005334:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005338:	0e1b      	lsrs	r3, r3, #24
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	019a      	lsls	r2, r3, #6
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	041b      	lsls	r3, r3, #16
 800534a:	431a      	orrs	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	061b      	lsls	r3, r3, #24
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	071b      	lsls	r3, r3, #28
 8005358:	4957      	ldr	r1, [pc, #348]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d004      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005370:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005374:	d00a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800537e:	2b00      	cmp	r3, #0
 8005380:	d02e      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005386:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800538a:	d129      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800538c:	4b4a      	ldr	r3, [pc, #296]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800538e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005392:	0c1b      	lsrs	r3, r3, #16
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800539a:	4b47      	ldr	r3, [pc, #284]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800539c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053a0:	0f1b      	lsrs	r3, r3, #28
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	019a      	lsls	r2, r3, #6
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	041b      	lsls	r3, r3, #16
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	061b      	lsls	r3, r3, #24
 80053ba:	431a      	orrs	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	071b      	lsls	r3, r3, #28
 80053c0:	493d      	ldr	r1, [pc, #244]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053c8:	4b3b      	ldr	r3, [pc, #236]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053ce:	f023 021f 	bic.w	r2, r3, #31
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d6:	3b01      	subs	r3, #1
 80053d8:	4937      	ldr	r1, [pc, #220]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d01d      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053ec:	4b32      	ldr	r3, [pc, #200]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053f2:	0e1b      	lsrs	r3, r3, #24
 80053f4:	f003 030f 	and.w	r3, r3, #15
 80053f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053fa:	4b2f      	ldr	r3, [pc, #188]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005400:	0f1b      	lsrs	r3, r3, #28
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	019a      	lsls	r2, r3, #6
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	041b      	lsls	r3, r3, #16
 8005414:	431a      	orrs	r2, r3
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	061b      	lsls	r3, r3, #24
 800541a:	431a      	orrs	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	071b      	lsls	r3, r3, #28
 8005420:	4925      	ldr	r1, [pc, #148]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d011      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	019a      	lsls	r2, r3, #6
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	041b      	lsls	r3, r3, #16
 8005440:	431a      	orrs	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	061b      	lsls	r3, r3, #24
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	071b      	lsls	r3, r3, #28
 8005450:	4919      	ldr	r1, [pc, #100]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005458:	4b17      	ldr	r3, [pc, #92]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a16      	ldr	r2, [pc, #88]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800545e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005464:	f7fe f8bc 	bl	80035e0 <HAL_GetTick>
 8005468:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800546a:	e008      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800546c:	f7fe f8b8 	bl	80035e0 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b64      	cmp	r3, #100	@ 0x64
 8005478:	d901      	bls.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e0d7      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800547e:	4b0e      	ldr	r3, [pc, #56]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b01      	cmp	r3, #1
 800548e:	f040 80cd 	bne.w	800562c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005492:	4b09      	ldr	r3, [pc, #36]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a08      	ldr	r2, [pc, #32]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800549c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800549e:	f7fe f89f 	bl	80035e0 <HAL_GetTick>
 80054a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054a4:	e00a      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054a6:	f7fe f89b 	bl	80035e0 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b64      	cmp	r3, #100	@ 0x64
 80054b2:	d903      	bls.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e0ba      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80054b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054bc:	4b5e      	ldr	r3, [pc, #376]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054c8:	d0ed      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x682>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d02e      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d12a      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054f2:	4b51      	ldr	r3, [pc, #324]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f8:	0c1b      	lsrs	r3, r3, #16
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005500:	4b4d      	ldr	r3, [pc, #308]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005506:	0f1b      	lsrs	r3, r3, #28
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	019a      	lsls	r2, r3, #6
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	041b      	lsls	r3, r3, #16
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	061b      	lsls	r3, r3, #24
 8005520:	431a      	orrs	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	071b      	lsls	r3, r3, #28
 8005526:	4944      	ldr	r1, [pc, #272]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800552e:	4b42      	ldr	r3, [pc, #264]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005534:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553c:	3b01      	subs	r3, #1
 800553e:	021b      	lsls	r3, r3, #8
 8005540:	493d      	ldr	r1, [pc, #244]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d022      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005558:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800555c:	d11d      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800555e:	4b36      	ldr	r3, [pc, #216]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005564:	0e1b      	lsrs	r3, r3, #24
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800556c:	4b32      	ldr	r3, [pc, #200]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005572:	0f1b      	lsrs	r3, r3, #28
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	019a      	lsls	r2, r3, #6
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	041b      	lsls	r3, r3, #16
 8005586:	431a      	orrs	r2, r3
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	061b      	lsls	r3, r3, #24
 800558c:	431a      	orrs	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	071b      	lsls	r3, r3, #28
 8005592:	4929      	ldr	r1, [pc, #164]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d028      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055a6:	4b24      	ldr	r3, [pc, #144]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ac:	0e1b      	lsrs	r3, r3, #24
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055b4:	4b20      	ldr	r3, [pc, #128]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ba:	0c1b      	lsrs	r3, r3, #16
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	019a      	lsls	r2, r3, #6
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	041b      	lsls	r3, r3, #16
 80055cc:	431a      	orrs	r2, r3
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	061b      	lsls	r3, r3, #24
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	071b      	lsls	r3, r3, #28
 80055da:	4917      	ldr	r1, [pc, #92]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055e2:	4b15      	ldr	r3, [pc, #84]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	4911      	ldr	r1, [pc, #68]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a0e      	ldr	r2, [pc, #56]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005604:	f7fd ffec 	bl	80035e0 <HAL_GetTick>
 8005608:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800560a:	e008      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800560c:	f7fd ffe8 	bl	80035e0 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b64      	cmp	r3, #100	@ 0x64
 8005618:	d901      	bls.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e007      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800561e:	4b06      	ldr	r3, [pc, #24]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005626:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800562a:	d1ef      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3720      	adds	r7, #32
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40023800 	.word	0x40023800

0800563c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e040      	b.n	80056d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fd fdf2 	bl	8003248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2224      	movs	r2, #36	@ 0x24
 8005668:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0201 	bic.w	r2, r2, #1
 8005678:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fb16 	bl	8005cb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f8af 	bl	80057ec <UART_SetConfig>
 800568e:	4603      	mov	r3, r0
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e01b      	b.n	80056d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0201 	orr.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fb95 	bl	8005df8 <UART_CheckIdleState>
 80056ce:	4603      	mov	r3, r0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	@ 0x28
 80056dc:	af02      	add	r7, sp, #8
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	4613      	mov	r3, r2
 80056e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	d177      	bne.n	80057e0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <HAL_UART_Transmit+0x24>
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e070      	b.n	80057e2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2221      	movs	r2, #33	@ 0x21
 800570c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800570e:	f7fd ff67 	bl	80035e0 <HAL_GetTick>
 8005712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	88fa      	ldrh	r2, [r7, #6]
 8005718:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	88fa      	ldrh	r2, [r7, #6]
 8005720:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800572c:	d108      	bne.n	8005740 <HAL_UART_Transmit+0x68>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d104      	bne.n	8005740 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005736:	2300      	movs	r3, #0
 8005738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	e003      	b.n	8005748 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005744:	2300      	movs	r3, #0
 8005746:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005748:	e02f      	b.n	80057aa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2200      	movs	r2, #0
 8005752:	2180      	movs	r1, #128	@ 0x80
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 fba6 	bl	8005ea6 <UART_WaitOnFlagUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d004      	beq.n	800576a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e03b      	b.n	80057e2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10b      	bne.n	8005788 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800577e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	3302      	adds	r3, #2
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	e007      	b.n	8005798 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	781a      	ldrb	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	3301      	adds	r3, #1
 8005796:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1c9      	bne.n	800574a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2200      	movs	r2, #0
 80057be:	2140      	movs	r1, #64	@ 0x40
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 fb70 	bl	8005ea6 <UART_WaitOnFlagUntilTimeout>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d004      	beq.n	80057d6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e005      	b.n	80057e2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2220      	movs	r2, #32
 80057da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	e000      	b.n	80057e2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80057e0:	2302      	movs	r3, #2
  }
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3720      	adds	r7, #32
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	4ba6      	ldr	r3, [pc, #664]	@ (8005ab0 <UART_SetConfig+0x2c4>)
 8005818:	4013      	ands	r3, r2
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6812      	ldr	r2, [r2, #0]
 800581e:	6979      	ldr	r1, [r7, #20]
 8005820:	430b      	orrs	r3, r1
 8005822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	430a      	orrs	r2, r1
 800585c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a94      	ldr	r2, [pc, #592]	@ (8005ab4 <UART_SetConfig+0x2c8>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d120      	bne.n	80058aa <UART_SetConfig+0xbe>
 8005868:	4b93      	ldr	r3, [pc, #588]	@ (8005ab8 <UART_SetConfig+0x2cc>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	2b03      	cmp	r3, #3
 8005874:	d816      	bhi.n	80058a4 <UART_SetConfig+0xb8>
 8005876:	a201      	add	r2, pc, #4	@ (adr r2, 800587c <UART_SetConfig+0x90>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	0800588d 	.word	0x0800588d
 8005880:	08005899 	.word	0x08005899
 8005884:	08005893 	.word	0x08005893
 8005888:	0800589f 	.word	0x0800589f
 800588c:	2301      	movs	r3, #1
 800588e:	77fb      	strb	r3, [r7, #31]
 8005890:	e150      	b.n	8005b34 <UART_SetConfig+0x348>
 8005892:	2302      	movs	r3, #2
 8005894:	77fb      	strb	r3, [r7, #31]
 8005896:	e14d      	b.n	8005b34 <UART_SetConfig+0x348>
 8005898:	2304      	movs	r3, #4
 800589a:	77fb      	strb	r3, [r7, #31]
 800589c:	e14a      	b.n	8005b34 <UART_SetConfig+0x348>
 800589e:	2308      	movs	r3, #8
 80058a0:	77fb      	strb	r3, [r7, #31]
 80058a2:	e147      	b.n	8005b34 <UART_SetConfig+0x348>
 80058a4:	2310      	movs	r3, #16
 80058a6:	77fb      	strb	r3, [r7, #31]
 80058a8:	e144      	b.n	8005b34 <UART_SetConfig+0x348>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a83      	ldr	r2, [pc, #524]	@ (8005abc <UART_SetConfig+0x2d0>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d132      	bne.n	800591a <UART_SetConfig+0x12e>
 80058b4:	4b80      	ldr	r3, [pc, #512]	@ (8005ab8 <UART_SetConfig+0x2cc>)
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ba:	f003 030c 	and.w	r3, r3, #12
 80058be:	2b0c      	cmp	r3, #12
 80058c0:	d828      	bhi.n	8005914 <UART_SetConfig+0x128>
 80058c2:	a201      	add	r2, pc, #4	@ (adr r2, 80058c8 <UART_SetConfig+0xdc>)
 80058c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c8:	080058fd 	.word	0x080058fd
 80058cc:	08005915 	.word	0x08005915
 80058d0:	08005915 	.word	0x08005915
 80058d4:	08005915 	.word	0x08005915
 80058d8:	08005909 	.word	0x08005909
 80058dc:	08005915 	.word	0x08005915
 80058e0:	08005915 	.word	0x08005915
 80058e4:	08005915 	.word	0x08005915
 80058e8:	08005903 	.word	0x08005903
 80058ec:	08005915 	.word	0x08005915
 80058f0:	08005915 	.word	0x08005915
 80058f4:	08005915 	.word	0x08005915
 80058f8:	0800590f 	.word	0x0800590f
 80058fc:	2300      	movs	r3, #0
 80058fe:	77fb      	strb	r3, [r7, #31]
 8005900:	e118      	b.n	8005b34 <UART_SetConfig+0x348>
 8005902:	2302      	movs	r3, #2
 8005904:	77fb      	strb	r3, [r7, #31]
 8005906:	e115      	b.n	8005b34 <UART_SetConfig+0x348>
 8005908:	2304      	movs	r3, #4
 800590a:	77fb      	strb	r3, [r7, #31]
 800590c:	e112      	b.n	8005b34 <UART_SetConfig+0x348>
 800590e:	2308      	movs	r3, #8
 8005910:	77fb      	strb	r3, [r7, #31]
 8005912:	e10f      	b.n	8005b34 <UART_SetConfig+0x348>
 8005914:	2310      	movs	r3, #16
 8005916:	77fb      	strb	r3, [r7, #31]
 8005918:	e10c      	b.n	8005b34 <UART_SetConfig+0x348>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a68      	ldr	r2, [pc, #416]	@ (8005ac0 <UART_SetConfig+0x2d4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d120      	bne.n	8005966 <UART_SetConfig+0x17a>
 8005924:	4b64      	ldr	r3, [pc, #400]	@ (8005ab8 <UART_SetConfig+0x2cc>)
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800592e:	2b30      	cmp	r3, #48	@ 0x30
 8005930:	d013      	beq.n	800595a <UART_SetConfig+0x16e>
 8005932:	2b30      	cmp	r3, #48	@ 0x30
 8005934:	d814      	bhi.n	8005960 <UART_SetConfig+0x174>
 8005936:	2b20      	cmp	r3, #32
 8005938:	d009      	beq.n	800594e <UART_SetConfig+0x162>
 800593a:	2b20      	cmp	r3, #32
 800593c:	d810      	bhi.n	8005960 <UART_SetConfig+0x174>
 800593e:	2b00      	cmp	r3, #0
 8005940:	d002      	beq.n	8005948 <UART_SetConfig+0x15c>
 8005942:	2b10      	cmp	r3, #16
 8005944:	d006      	beq.n	8005954 <UART_SetConfig+0x168>
 8005946:	e00b      	b.n	8005960 <UART_SetConfig+0x174>
 8005948:	2300      	movs	r3, #0
 800594a:	77fb      	strb	r3, [r7, #31]
 800594c:	e0f2      	b.n	8005b34 <UART_SetConfig+0x348>
 800594e:	2302      	movs	r3, #2
 8005950:	77fb      	strb	r3, [r7, #31]
 8005952:	e0ef      	b.n	8005b34 <UART_SetConfig+0x348>
 8005954:	2304      	movs	r3, #4
 8005956:	77fb      	strb	r3, [r7, #31]
 8005958:	e0ec      	b.n	8005b34 <UART_SetConfig+0x348>
 800595a:	2308      	movs	r3, #8
 800595c:	77fb      	strb	r3, [r7, #31]
 800595e:	e0e9      	b.n	8005b34 <UART_SetConfig+0x348>
 8005960:	2310      	movs	r3, #16
 8005962:	77fb      	strb	r3, [r7, #31]
 8005964:	e0e6      	b.n	8005b34 <UART_SetConfig+0x348>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a56      	ldr	r2, [pc, #344]	@ (8005ac4 <UART_SetConfig+0x2d8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d120      	bne.n	80059b2 <UART_SetConfig+0x1c6>
 8005970:	4b51      	ldr	r3, [pc, #324]	@ (8005ab8 <UART_SetConfig+0x2cc>)
 8005972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005976:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800597a:	2bc0      	cmp	r3, #192	@ 0xc0
 800597c:	d013      	beq.n	80059a6 <UART_SetConfig+0x1ba>
 800597e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005980:	d814      	bhi.n	80059ac <UART_SetConfig+0x1c0>
 8005982:	2b80      	cmp	r3, #128	@ 0x80
 8005984:	d009      	beq.n	800599a <UART_SetConfig+0x1ae>
 8005986:	2b80      	cmp	r3, #128	@ 0x80
 8005988:	d810      	bhi.n	80059ac <UART_SetConfig+0x1c0>
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <UART_SetConfig+0x1a8>
 800598e:	2b40      	cmp	r3, #64	@ 0x40
 8005990:	d006      	beq.n	80059a0 <UART_SetConfig+0x1b4>
 8005992:	e00b      	b.n	80059ac <UART_SetConfig+0x1c0>
 8005994:	2300      	movs	r3, #0
 8005996:	77fb      	strb	r3, [r7, #31]
 8005998:	e0cc      	b.n	8005b34 <UART_SetConfig+0x348>
 800599a:	2302      	movs	r3, #2
 800599c:	77fb      	strb	r3, [r7, #31]
 800599e:	e0c9      	b.n	8005b34 <UART_SetConfig+0x348>
 80059a0:	2304      	movs	r3, #4
 80059a2:	77fb      	strb	r3, [r7, #31]
 80059a4:	e0c6      	b.n	8005b34 <UART_SetConfig+0x348>
 80059a6:	2308      	movs	r3, #8
 80059a8:	77fb      	strb	r3, [r7, #31]
 80059aa:	e0c3      	b.n	8005b34 <UART_SetConfig+0x348>
 80059ac:	2310      	movs	r3, #16
 80059ae:	77fb      	strb	r3, [r7, #31]
 80059b0:	e0c0      	b.n	8005b34 <UART_SetConfig+0x348>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a44      	ldr	r2, [pc, #272]	@ (8005ac8 <UART_SetConfig+0x2dc>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d125      	bne.n	8005a08 <UART_SetConfig+0x21c>
 80059bc:	4b3e      	ldr	r3, [pc, #248]	@ (8005ab8 <UART_SetConfig+0x2cc>)
 80059be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059ca:	d017      	beq.n	80059fc <UART_SetConfig+0x210>
 80059cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059d0:	d817      	bhi.n	8005a02 <UART_SetConfig+0x216>
 80059d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059d6:	d00b      	beq.n	80059f0 <UART_SetConfig+0x204>
 80059d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059dc:	d811      	bhi.n	8005a02 <UART_SetConfig+0x216>
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <UART_SetConfig+0x1fe>
 80059e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059e6:	d006      	beq.n	80059f6 <UART_SetConfig+0x20a>
 80059e8:	e00b      	b.n	8005a02 <UART_SetConfig+0x216>
 80059ea:	2300      	movs	r3, #0
 80059ec:	77fb      	strb	r3, [r7, #31]
 80059ee:	e0a1      	b.n	8005b34 <UART_SetConfig+0x348>
 80059f0:	2302      	movs	r3, #2
 80059f2:	77fb      	strb	r3, [r7, #31]
 80059f4:	e09e      	b.n	8005b34 <UART_SetConfig+0x348>
 80059f6:	2304      	movs	r3, #4
 80059f8:	77fb      	strb	r3, [r7, #31]
 80059fa:	e09b      	b.n	8005b34 <UART_SetConfig+0x348>
 80059fc:	2308      	movs	r3, #8
 80059fe:	77fb      	strb	r3, [r7, #31]
 8005a00:	e098      	b.n	8005b34 <UART_SetConfig+0x348>
 8005a02:	2310      	movs	r3, #16
 8005a04:	77fb      	strb	r3, [r7, #31]
 8005a06:	e095      	b.n	8005b34 <UART_SetConfig+0x348>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8005acc <UART_SetConfig+0x2e0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d125      	bne.n	8005a5e <UART_SetConfig+0x272>
 8005a12:	4b29      	ldr	r3, [pc, #164]	@ (8005ab8 <UART_SetConfig+0x2cc>)
 8005a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005a1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a20:	d017      	beq.n	8005a52 <UART_SetConfig+0x266>
 8005a22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a26:	d817      	bhi.n	8005a58 <UART_SetConfig+0x26c>
 8005a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a2c:	d00b      	beq.n	8005a46 <UART_SetConfig+0x25a>
 8005a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a32:	d811      	bhi.n	8005a58 <UART_SetConfig+0x26c>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <UART_SetConfig+0x254>
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a3c:	d006      	beq.n	8005a4c <UART_SetConfig+0x260>
 8005a3e:	e00b      	b.n	8005a58 <UART_SetConfig+0x26c>
 8005a40:	2301      	movs	r3, #1
 8005a42:	77fb      	strb	r3, [r7, #31]
 8005a44:	e076      	b.n	8005b34 <UART_SetConfig+0x348>
 8005a46:	2302      	movs	r3, #2
 8005a48:	77fb      	strb	r3, [r7, #31]
 8005a4a:	e073      	b.n	8005b34 <UART_SetConfig+0x348>
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	77fb      	strb	r3, [r7, #31]
 8005a50:	e070      	b.n	8005b34 <UART_SetConfig+0x348>
 8005a52:	2308      	movs	r3, #8
 8005a54:	77fb      	strb	r3, [r7, #31]
 8005a56:	e06d      	b.n	8005b34 <UART_SetConfig+0x348>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	77fb      	strb	r3, [r7, #31]
 8005a5c:	e06a      	b.n	8005b34 <UART_SetConfig+0x348>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad0 <UART_SetConfig+0x2e4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d138      	bne.n	8005ada <UART_SetConfig+0x2ee>
 8005a68:	4b13      	ldr	r3, [pc, #76]	@ (8005ab8 <UART_SetConfig+0x2cc>)
 8005a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a6e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005a72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a76:	d017      	beq.n	8005aa8 <UART_SetConfig+0x2bc>
 8005a78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a7c:	d82a      	bhi.n	8005ad4 <UART_SetConfig+0x2e8>
 8005a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a82:	d00b      	beq.n	8005a9c <UART_SetConfig+0x2b0>
 8005a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a88:	d824      	bhi.n	8005ad4 <UART_SetConfig+0x2e8>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <UART_SetConfig+0x2aa>
 8005a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a92:	d006      	beq.n	8005aa2 <UART_SetConfig+0x2b6>
 8005a94:	e01e      	b.n	8005ad4 <UART_SetConfig+0x2e8>
 8005a96:	2300      	movs	r3, #0
 8005a98:	77fb      	strb	r3, [r7, #31]
 8005a9a:	e04b      	b.n	8005b34 <UART_SetConfig+0x348>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	77fb      	strb	r3, [r7, #31]
 8005aa0:	e048      	b.n	8005b34 <UART_SetConfig+0x348>
 8005aa2:	2304      	movs	r3, #4
 8005aa4:	77fb      	strb	r3, [r7, #31]
 8005aa6:	e045      	b.n	8005b34 <UART_SetConfig+0x348>
 8005aa8:	2308      	movs	r3, #8
 8005aaa:	77fb      	strb	r3, [r7, #31]
 8005aac:	e042      	b.n	8005b34 <UART_SetConfig+0x348>
 8005aae:	bf00      	nop
 8005ab0:	efff69f3 	.word	0xefff69f3
 8005ab4:	40011000 	.word	0x40011000
 8005ab8:	40023800 	.word	0x40023800
 8005abc:	40004400 	.word	0x40004400
 8005ac0:	40004800 	.word	0x40004800
 8005ac4:	40004c00 	.word	0x40004c00
 8005ac8:	40005000 	.word	0x40005000
 8005acc:	40011400 	.word	0x40011400
 8005ad0:	40007800 	.word	0x40007800
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	77fb      	strb	r3, [r7, #31]
 8005ad8:	e02c      	b.n	8005b34 <UART_SetConfig+0x348>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a72      	ldr	r2, [pc, #456]	@ (8005ca8 <UART_SetConfig+0x4bc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d125      	bne.n	8005b30 <UART_SetConfig+0x344>
 8005ae4:	4b71      	ldr	r3, [pc, #452]	@ (8005cac <UART_SetConfig+0x4c0>)
 8005ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005aee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005af2:	d017      	beq.n	8005b24 <UART_SetConfig+0x338>
 8005af4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005af8:	d817      	bhi.n	8005b2a <UART_SetConfig+0x33e>
 8005afa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005afe:	d00b      	beq.n	8005b18 <UART_SetConfig+0x32c>
 8005b00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b04:	d811      	bhi.n	8005b2a <UART_SetConfig+0x33e>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <UART_SetConfig+0x326>
 8005b0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b0e:	d006      	beq.n	8005b1e <UART_SetConfig+0x332>
 8005b10:	e00b      	b.n	8005b2a <UART_SetConfig+0x33e>
 8005b12:	2300      	movs	r3, #0
 8005b14:	77fb      	strb	r3, [r7, #31]
 8005b16:	e00d      	b.n	8005b34 <UART_SetConfig+0x348>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	77fb      	strb	r3, [r7, #31]
 8005b1c:	e00a      	b.n	8005b34 <UART_SetConfig+0x348>
 8005b1e:	2304      	movs	r3, #4
 8005b20:	77fb      	strb	r3, [r7, #31]
 8005b22:	e007      	b.n	8005b34 <UART_SetConfig+0x348>
 8005b24:	2308      	movs	r3, #8
 8005b26:	77fb      	strb	r3, [r7, #31]
 8005b28:	e004      	b.n	8005b34 <UART_SetConfig+0x348>
 8005b2a:	2310      	movs	r3, #16
 8005b2c:	77fb      	strb	r3, [r7, #31]
 8005b2e:	e001      	b.n	8005b34 <UART_SetConfig+0x348>
 8005b30:	2310      	movs	r3, #16
 8005b32:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b3c:	d15b      	bne.n	8005bf6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005b3e:	7ffb      	ldrb	r3, [r7, #31]
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d828      	bhi.n	8005b96 <UART_SetConfig+0x3aa>
 8005b44:	a201      	add	r2, pc, #4	@ (adr r2, 8005b4c <UART_SetConfig+0x360>)
 8005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4a:	bf00      	nop
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005b79 	.word	0x08005b79
 8005b54:	08005b81 	.word	0x08005b81
 8005b58:	08005b97 	.word	0x08005b97
 8005b5c:	08005b87 	.word	0x08005b87
 8005b60:	08005b97 	.word	0x08005b97
 8005b64:	08005b97 	.word	0x08005b97
 8005b68:	08005b97 	.word	0x08005b97
 8005b6c:	08005b8f 	.word	0x08005b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b70:	f7ff f94c 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8005b74:	61b8      	str	r0, [r7, #24]
        break;
 8005b76:	e013      	b.n	8005ba0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b78:	f7ff f95c 	bl	8004e34 <HAL_RCC_GetPCLK2Freq>
 8005b7c:	61b8      	str	r0, [r7, #24]
        break;
 8005b7e:	e00f      	b.n	8005ba0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b80:	4b4b      	ldr	r3, [pc, #300]	@ (8005cb0 <UART_SetConfig+0x4c4>)
 8005b82:	61bb      	str	r3, [r7, #24]
        break;
 8005b84:	e00c      	b.n	8005ba0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b86:	f7ff f82f 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 8005b8a:	61b8      	str	r0, [r7, #24]
        break;
 8005b8c:	e008      	b.n	8005ba0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b92:	61bb      	str	r3, [r7, #24]
        break;
 8005b94:	e004      	b.n	8005ba0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	77bb      	strb	r3, [r7, #30]
        break;
 8005b9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d074      	beq.n	8005c90 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	005a      	lsls	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	085b      	lsrs	r3, r3, #1
 8005bb0:	441a      	add	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	2b0f      	cmp	r3, #15
 8005bc0:	d916      	bls.n	8005bf0 <UART_SetConfig+0x404>
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bc8:	d212      	bcs.n	8005bf0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f023 030f 	bic.w	r3, r3, #15
 8005bd2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	085b      	lsrs	r3, r3, #1
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	89fb      	ldrh	r3, [r7, #14]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	89fa      	ldrh	r2, [r7, #14]
 8005bec:	60da      	str	r2, [r3, #12]
 8005bee:	e04f      	b.n	8005c90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	77bb      	strb	r3, [r7, #30]
 8005bf4:	e04c      	b.n	8005c90 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bf6:	7ffb      	ldrb	r3, [r7, #31]
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d828      	bhi.n	8005c4e <UART_SetConfig+0x462>
 8005bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8005c04 <UART_SetConfig+0x418>)
 8005bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c02:	bf00      	nop
 8005c04:	08005c29 	.word	0x08005c29
 8005c08:	08005c31 	.word	0x08005c31
 8005c0c:	08005c39 	.word	0x08005c39
 8005c10:	08005c4f 	.word	0x08005c4f
 8005c14:	08005c3f 	.word	0x08005c3f
 8005c18:	08005c4f 	.word	0x08005c4f
 8005c1c:	08005c4f 	.word	0x08005c4f
 8005c20:	08005c4f 	.word	0x08005c4f
 8005c24:	08005c47 	.word	0x08005c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c28:	f7ff f8f0 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8005c2c:	61b8      	str	r0, [r7, #24]
        break;
 8005c2e:	e013      	b.n	8005c58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c30:	f7ff f900 	bl	8004e34 <HAL_RCC_GetPCLK2Freq>
 8005c34:	61b8      	str	r0, [r7, #24]
        break;
 8005c36:	e00f      	b.n	8005c58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c38:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb0 <UART_SetConfig+0x4c4>)
 8005c3a:	61bb      	str	r3, [r7, #24]
        break;
 8005c3c:	e00c      	b.n	8005c58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c3e:	f7fe ffd3 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 8005c42:	61b8      	str	r0, [r7, #24]
        break;
 8005c44:	e008      	b.n	8005c58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c4a:	61bb      	str	r3, [r7, #24]
        break;
 8005c4c:	e004      	b.n	8005c58 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	77bb      	strb	r3, [r7, #30]
        break;
 8005c56:	bf00      	nop
    }

    if (pclk != 0U)
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d018      	beq.n	8005c90 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	085a      	lsrs	r2, r3, #1
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	441a      	add	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b0f      	cmp	r3, #15
 8005c76:	d909      	bls.n	8005c8c <UART_SetConfig+0x4a0>
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c7e:	d205      	bcs.n	8005c8c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60da      	str	r2, [r3, #12]
 8005c8a:	e001      	b.n	8005c90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40007c00 	.word	0x40007c00
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	00f42400 	.word	0x00f42400

08005cb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d26:	f003 0304 	and.w	r3, r3, #4
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d48:	f003 0310 	and.w	r3, r3, #16
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01a      	beq.n	8005dca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005db2:	d10a      	bne.n	8005dca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	605a      	str	r2, [r3, #4]
  }
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08c      	sub	sp, #48	@ 0x30
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e08:	f7fd fbea 	bl	80035e0 <HAL_GetTick>
 8005e0c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d12e      	bne.n	8005e7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e24:	2200      	movs	r2, #0
 8005e26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f83b 	bl	8005ea6 <UART_WaitOnFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d021      	beq.n	8005e7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e4a:	623b      	str	r3, [r7, #32]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	461a      	mov	r2, r3
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	69b9      	ldr	r1, [r7, #24]
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	e841 2300 	strex	r3, r2, [r1]
 8005e60:	617b      	str	r3, [r7, #20]
   return(result);
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e6      	bne.n	8005e36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e011      	b.n	8005e9e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3728      	adds	r7, #40	@ 0x28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	60f8      	str	r0, [r7, #12]
 8005eae:	60b9      	str	r1, [r7, #8]
 8005eb0:	603b      	str	r3, [r7, #0]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb6:	e04f      	b.n	8005f58 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ebe:	d04b      	beq.n	8005f58 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec0:	f7fd fb8e 	bl	80035e0 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d302      	bcc.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e04e      	b.n	8005f78 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d037      	beq.n	8005f58 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b80      	cmp	r3, #128	@ 0x80
 8005eec:	d034      	beq.n	8005f58 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2b40      	cmp	r3, #64	@ 0x40
 8005ef2:	d031      	beq.n	8005f58 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b08      	cmp	r3, #8
 8005f00:	d110      	bne.n	8005f24 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2208      	movs	r2, #8
 8005f08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 f838 	bl	8005f80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2208      	movs	r2, #8
 8005f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e029      	b.n	8005f78 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f32:	d111      	bne.n	8005f58 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f3c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 f81e 	bl	8005f80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e00f      	b.n	8005f78 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69da      	ldr	r2, [r3, #28]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	4013      	ands	r3, r2
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	bf0c      	ite	eq
 8005f68:	2301      	moveq	r3, #1
 8005f6a:	2300      	movne	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	461a      	mov	r2, r3
 8005f70:	79fb      	ldrb	r3, [r7, #7]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d0a0      	beq.n	8005eb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b095      	sub	sp, #84	@ 0x54
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fa6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fa8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e6      	bne.n	8005f88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3308      	adds	r3, #8
 8005fc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e5      	bne.n	8005fba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d118      	bne.n	8006028 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	e853 3f00 	ldrex	r3, [r3]
 8006002:	60bb      	str	r3, [r7, #8]
   return(result);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f023 0310 	bic.w	r3, r3, #16
 800600a:	647b      	str	r3, [r7, #68]	@ 0x44
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006014:	61bb      	str	r3, [r7, #24]
 8006016:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	6979      	ldr	r1, [r7, #20]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	613b      	str	r3, [r7, #16]
   return(result);
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e6      	bne.n	8005ff6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800603c:	bf00      	nop
 800603e:	3754      	adds	r7, #84	@ 0x54
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006048:	b084      	sub	sp, #16
 800604a:	b580      	push	{r7, lr}
 800604c:	b084      	sub	sp, #16
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	f107 001c 	add.w	r0, r7, #28
 8006056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800605a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800605e:	2b01      	cmp	r3, #1
 8006060:	d121      	bne.n	80060a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006066:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	4b21      	ldr	r3, [pc, #132]	@ (80060f8 <USB_CoreInit+0xb0>)
 8006074:	4013      	ands	r3, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006086:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800608a:	2b01      	cmp	r3, #1
 800608c:	d105      	bne.n	800609a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa92 	bl	80065c4 <USB_CoreReset>
 80060a0:	4603      	mov	r3, r0
 80060a2:	73fb      	strb	r3, [r7, #15]
 80060a4:	e010      	b.n	80060c8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fa86 	bl	80065c4 <USB_CoreReset>
 80060b8:	4603      	mov	r3, r0
 80060ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80060c8:	7fbb      	ldrb	r3, [r7, #30]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d10b      	bne.n	80060e6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f043 0206 	orr.w	r2, r3, #6
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f043 0220 	orr.w	r2, r3, #32
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060f2:	b004      	add	sp, #16
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	ffbdffbf 	.word	0xffbdffbf

080060fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f023 0201 	bic.w	r2, r3, #1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d115      	bne.n	800616c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800614c:	200a      	movs	r0, #10
 800614e:	f7fd fa53 	bl	80035f8 <HAL_Delay>
      ms += 10U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	330a      	adds	r3, #10
 8006156:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fa25 	bl	80065a8 <USB_GetMode>
 800615e:	4603      	mov	r3, r0
 8006160:	2b01      	cmp	r3, #1
 8006162:	d01e      	beq.n	80061a2 <USB_SetCurrentMode+0x84>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2bc7      	cmp	r3, #199	@ 0xc7
 8006168:	d9f0      	bls.n	800614c <USB_SetCurrentMode+0x2e>
 800616a:	e01a      	b.n	80061a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d115      	bne.n	800619e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800617e:	200a      	movs	r0, #10
 8006180:	f7fd fa3a 	bl	80035f8 <HAL_Delay>
      ms += 10U;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	330a      	adds	r3, #10
 8006188:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fa0c 	bl	80065a8 <USB_GetMode>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <USB_SetCurrentMode+0x84>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2bc7      	cmp	r3, #199	@ 0xc7
 800619a:	d9f0      	bls.n	800617e <USB_SetCurrentMode+0x60>
 800619c:	e001      	b.n	80061a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e005      	b.n	80061ae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2bc8      	cmp	r3, #200	@ 0xc8
 80061a6:	d101      	bne.n	80061ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e000      	b.n	80061ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061b8:	b084      	sub	sp, #16
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b086      	sub	sp, #24
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80061c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061d2:	2300      	movs	r3, #0
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	e009      	b.n	80061ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	3340      	adds	r3, #64	@ 0x40
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	2200      	movs	r2, #0
 80061e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	3301      	adds	r3, #1
 80061ea:	613b      	str	r3, [r7, #16]
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	2b0e      	cmp	r3, #14
 80061f0:	d9f2      	bls.n	80061d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d11c      	bne.n	8006234 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006208:	f043 0302 	orr.w	r3, r3, #2
 800620c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006212:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	e005      	b.n	8006240 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006238:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006246:	461a      	mov	r2, r3
 8006248:	2300      	movs	r3, #0
 800624a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800624c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006250:	2b01      	cmp	r3, #1
 8006252:	d10d      	bne.n	8006270 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006258:	2b00      	cmp	r3, #0
 800625a:	d104      	bne.n	8006266 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800625c:	2100      	movs	r1, #0
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f968 	bl	8006534 <USB_SetDevSpeed>
 8006264:	e008      	b.n	8006278 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006266:	2101      	movs	r1, #1
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f963 	bl	8006534 <USB_SetDevSpeed>
 800626e:	e003      	b.n	8006278 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006270:	2103      	movs	r1, #3
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f95e 	bl	8006534 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006278:	2110      	movs	r1, #16
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f8fa 	bl	8006474 <USB_FlushTxFifo>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f924 	bl	80064d8 <USB_FlushRxFifo>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a0:	461a      	mov	r2, r3
 80062a2:	2300      	movs	r3, #0
 80062a4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ac:	461a      	mov	r2, r3
 80062ae:	2300      	movs	r3, #0
 80062b0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b8:	461a      	mov	r2, r3
 80062ba:	2300      	movs	r3, #0
 80062bc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062be:	2300      	movs	r3, #0
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	e043      	b.n	800634c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062da:	d118      	bne.n	800630e <USB_DevInit+0x156>
    {
      if (i == 0U)
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10a      	bne.n	80062f8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ee:	461a      	mov	r2, r3
 80062f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	e013      	b.n	8006320 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006304:	461a      	mov	r2, r3
 8006306:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	e008      	b.n	8006320 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631a:	461a      	mov	r2, r3
 800631c:	2300      	movs	r3, #0
 800631e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800632c:	461a      	mov	r2, r3
 800632e:	2300      	movs	r3, #0
 8006330:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800633e:	461a      	mov	r2, r3
 8006340:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006344:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	3301      	adds	r3, #1
 800634a:	613b      	str	r3, [r7, #16]
 800634c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006350:	461a      	mov	r2, r3
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	4293      	cmp	r3, r2
 8006356:	d3b5      	bcc.n	80062c4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	e043      	b.n	80063e6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006370:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006374:	d118      	bne.n	80063a8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10a      	bne.n	8006392 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006388:	461a      	mov	r2, r3
 800638a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	e013      	b.n	80063ba <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800639e:	461a      	mov	r2, r3
 80063a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	e008      	b.n	80063ba <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b4:	461a      	mov	r2, r3
 80063b6:	2300      	movs	r3, #0
 80063b8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c6:	461a      	mov	r2, r3
 80063c8:	2300      	movs	r3, #0
 80063ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d8:	461a      	mov	r2, r3
 80063da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	3301      	adds	r3, #1
 80063e4:	613b      	str	r3, [r7, #16]
 80063e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063ea:	461a      	mov	r2, r3
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d3b5      	bcc.n	800635e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006404:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006412:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006414:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006418:	2b00      	cmp	r3, #0
 800641a:	d105      	bne.n	8006428 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f043 0210 	orr.w	r2, r3, #16
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	699a      	ldr	r2, [r3, #24]
 800642c:	4b0f      	ldr	r3, [pc, #60]	@ (800646c <USB_DevInit+0x2b4>)
 800642e:	4313      	orrs	r3, r2
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006434:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	f043 0208 	orr.w	r2, r3, #8
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006448:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800644c:	2b01      	cmp	r3, #1
 800644e:	d105      	bne.n	800645c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	699a      	ldr	r2, [r3, #24]
 8006454:	4b06      	ldr	r3, [pc, #24]	@ (8006470 <USB_DevInit+0x2b8>)
 8006456:	4313      	orrs	r3, r2
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800645c:	7dfb      	ldrb	r3, [r7, #23]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006468:	b004      	add	sp, #16
 800646a:	4770      	bx	lr
 800646c:	803c3800 	.word	0x803c3800
 8006470:	40000004 	.word	0x40000004

08006474 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3301      	adds	r3, #1
 8006486:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800648e:	d901      	bls.n	8006494 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e01b      	b.n	80064cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	daf2      	bge.n	8006482 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	019b      	lsls	r3, r3, #6
 80064a4:	f043 0220 	orr.w	r2, r3, #32
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	3301      	adds	r3, #1
 80064b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064b8:	d901      	bls.n	80064be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e006      	b.n	80064cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	d0f0      	beq.n	80064ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3301      	adds	r3, #1
 80064e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064f0:	d901      	bls.n	80064f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e018      	b.n	8006528 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	daf2      	bge.n	80064e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2210      	movs	r2, #16
 8006506:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3301      	adds	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006514:	d901      	bls.n	800651a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e006      	b.n	8006528 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0310 	and.w	r3, r3, #16
 8006522:	2b10      	cmp	r3, #16
 8006524:	d0f0      	beq.n	8006508 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	68f9      	ldr	r1, [r7, #12]
 8006550:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006554:	4313      	orrs	r3, r2
 8006556:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006580:	f023 0303 	bic.w	r3, r3, #3
 8006584:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006594:	f043 0302 	orr.w	r3, r3, #2
 8006598:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	f003 0301 	and.w	r3, r3, #1
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3301      	adds	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065dc:	d901      	bls.n	80065e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e01b      	b.n	800661a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	daf2      	bge.n	80065d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f043 0201 	orr.w	r2, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3301      	adds	r3, #1
 80065fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006606:	d901      	bls.n	800660c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e006      	b.n	800661a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b01      	cmp	r3, #1
 8006616:	d0f0      	beq.n	80065fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
	...

08006628 <siprintf>:
 8006628:	b40e      	push	{r1, r2, r3}
 800662a:	b500      	push	{lr}
 800662c:	b09c      	sub	sp, #112	@ 0x70
 800662e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006630:	9002      	str	r0, [sp, #8]
 8006632:	9006      	str	r0, [sp, #24]
 8006634:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006638:	4809      	ldr	r0, [pc, #36]	@ (8006660 <siprintf+0x38>)
 800663a:	9107      	str	r1, [sp, #28]
 800663c:	9104      	str	r1, [sp, #16]
 800663e:	4909      	ldr	r1, [pc, #36]	@ (8006664 <siprintf+0x3c>)
 8006640:	f853 2b04 	ldr.w	r2, [r3], #4
 8006644:	9105      	str	r1, [sp, #20]
 8006646:	6800      	ldr	r0, [r0, #0]
 8006648:	9301      	str	r3, [sp, #4]
 800664a:	a902      	add	r1, sp, #8
 800664c:	f000 f994 	bl	8006978 <_svfiprintf_r>
 8006650:	9b02      	ldr	r3, [sp, #8]
 8006652:	2200      	movs	r2, #0
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	b01c      	add	sp, #112	@ 0x70
 8006658:	f85d eb04 	ldr.w	lr, [sp], #4
 800665c:	b003      	add	sp, #12
 800665e:	4770      	bx	lr
 8006660:	20000048 	.word	0x20000048
 8006664:	ffff0208 	.word	0xffff0208

08006668 <memset>:
 8006668:	4402      	add	r2, r0
 800666a:	4603      	mov	r3, r0
 800666c:	4293      	cmp	r3, r2
 800666e:	d100      	bne.n	8006672 <memset+0xa>
 8006670:	4770      	bx	lr
 8006672:	f803 1b01 	strb.w	r1, [r3], #1
 8006676:	e7f9      	b.n	800666c <memset+0x4>

08006678 <__errno>:
 8006678:	4b01      	ldr	r3, [pc, #4]	@ (8006680 <__errno+0x8>)
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	20000048 	.word	0x20000048

08006684 <__libc_init_array>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	4d0d      	ldr	r5, [pc, #52]	@ (80066bc <__libc_init_array+0x38>)
 8006688:	4c0d      	ldr	r4, [pc, #52]	@ (80066c0 <__libc_init_array+0x3c>)
 800668a:	1b64      	subs	r4, r4, r5
 800668c:	10a4      	asrs	r4, r4, #2
 800668e:	2600      	movs	r6, #0
 8006690:	42a6      	cmp	r6, r4
 8006692:	d109      	bne.n	80066a8 <__libc_init_array+0x24>
 8006694:	4d0b      	ldr	r5, [pc, #44]	@ (80066c4 <__libc_init_array+0x40>)
 8006696:	4c0c      	ldr	r4, [pc, #48]	@ (80066c8 <__libc_init_array+0x44>)
 8006698:	f000 fc66 	bl	8006f68 <_init>
 800669c:	1b64      	subs	r4, r4, r5
 800669e:	10a4      	asrs	r4, r4, #2
 80066a0:	2600      	movs	r6, #0
 80066a2:	42a6      	cmp	r6, r4
 80066a4:	d105      	bne.n	80066b2 <__libc_init_array+0x2e>
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ac:	4798      	blx	r3
 80066ae:	3601      	adds	r6, #1
 80066b0:	e7ee      	b.n	8006690 <__libc_init_array+0xc>
 80066b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b6:	4798      	blx	r3
 80066b8:	3601      	adds	r6, #1
 80066ba:	e7f2      	b.n	80066a2 <__libc_init_array+0x1e>
 80066bc:	08007070 	.word	0x08007070
 80066c0:	08007070 	.word	0x08007070
 80066c4:	08007070 	.word	0x08007070
 80066c8:	08007074 	.word	0x08007074

080066cc <__retarget_lock_acquire_recursive>:
 80066cc:	4770      	bx	lr

080066ce <__retarget_lock_release_recursive>:
 80066ce:	4770      	bx	lr

080066d0 <_free_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4605      	mov	r5, r0
 80066d4:	2900      	cmp	r1, #0
 80066d6:	d041      	beq.n	800675c <_free_r+0x8c>
 80066d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066dc:	1f0c      	subs	r4, r1, #4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	bfb8      	it	lt
 80066e2:	18e4      	addlt	r4, r4, r3
 80066e4:	f000 f8e0 	bl	80068a8 <__malloc_lock>
 80066e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006760 <_free_r+0x90>)
 80066ea:	6813      	ldr	r3, [r2, #0]
 80066ec:	b933      	cbnz	r3, 80066fc <_free_r+0x2c>
 80066ee:	6063      	str	r3, [r4, #4]
 80066f0:	6014      	str	r4, [r2, #0]
 80066f2:	4628      	mov	r0, r5
 80066f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066f8:	f000 b8dc 	b.w	80068b4 <__malloc_unlock>
 80066fc:	42a3      	cmp	r3, r4
 80066fe:	d908      	bls.n	8006712 <_free_r+0x42>
 8006700:	6820      	ldr	r0, [r4, #0]
 8006702:	1821      	adds	r1, r4, r0
 8006704:	428b      	cmp	r3, r1
 8006706:	bf01      	itttt	eq
 8006708:	6819      	ldreq	r1, [r3, #0]
 800670a:	685b      	ldreq	r3, [r3, #4]
 800670c:	1809      	addeq	r1, r1, r0
 800670e:	6021      	streq	r1, [r4, #0]
 8006710:	e7ed      	b.n	80066ee <_free_r+0x1e>
 8006712:	461a      	mov	r2, r3
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	b10b      	cbz	r3, 800671c <_free_r+0x4c>
 8006718:	42a3      	cmp	r3, r4
 800671a:	d9fa      	bls.n	8006712 <_free_r+0x42>
 800671c:	6811      	ldr	r1, [r2, #0]
 800671e:	1850      	adds	r0, r2, r1
 8006720:	42a0      	cmp	r0, r4
 8006722:	d10b      	bne.n	800673c <_free_r+0x6c>
 8006724:	6820      	ldr	r0, [r4, #0]
 8006726:	4401      	add	r1, r0
 8006728:	1850      	adds	r0, r2, r1
 800672a:	4283      	cmp	r3, r0
 800672c:	6011      	str	r1, [r2, #0]
 800672e:	d1e0      	bne.n	80066f2 <_free_r+0x22>
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	6053      	str	r3, [r2, #4]
 8006736:	4408      	add	r0, r1
 8006738:	6010      	str	r0, [r2, #0]
 800673a:	e7da      	b.n	80066f2 <_free_r+0x22>
 800673c:	d902      	bls.n	8006744 <_free_r+0x74>
 800673e:	230c      	movs	r3, #12
 8006740:	602b      	str	r3, [r5, #0]
 8006742:	e7d6      	b.n	80066f2 <_free_r+0x22>
 8006744:	6820      	ldr	r0, [r4, #0]
 8006746:	1821      	adds	r1, r4, r0
 8006748:	428b      	cmp	r3, r1
 800674a:	bf04      	itt	eq
 800674c:	6819      	ldreq	r1, [r3, #0]
 800674e:	685b      	ldreq	r3, [r3, #4]
 8006750:	6063      	str	r3, [r4, #4]
 8006752:	bf04      	itt	eq
 8006754:	1809      	addeq	r1, r1, r0
 8006756:	6021      	streq	r1, [r4, #0]
 8006758:	6054      	str	r4, [r2, #4]
 800675a:	e7ca      	b.n	80066f2 <_free_r+0x22>
 800675c:	bd38      	pop	{r3, r4, r5, pc}
 800675e:	bf00      	nop
 8006760:	20000e70 	.word	0x20000e70

08006764 <sbrk_aligned>:
 8006764:	b570      	push	{r4, r5, r6, lr}
 8006766:	4e0f      	ldr	r6, [pc, #60]	@ (80067a4 <sbrk_aligned+0x40>)
 8006768:	460c      	mov	r4, r1
 800676a:	6831      	ldr	r1, [r6, #0]
 800676c:	4605      	mov	r5, r0
 800676e:	b911      	cbnz	r1, 8006776 <sbrk_aligned+0x12>
 8006770:	f000 fba6 	bl	8006ec0 <_sbrk_r>
 8006774:	6030      	str	r0, [r6, #0]
 8006776:	4621      	mov	r1, r4
 8006778:	4628      	mov	r0, r5
 800677a:	f000 fba1 	bl	8006ec0 <_sbrk_r>
 800677e:	1c43      	adds	r3, r0, #1
 8006780:	d103      	bne.n	800678a <sbrk_aligned+0x26>
 8006782:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006786:	4620      	mov	r0, r4
 8006788:	bd70      	pop	{r4, r5, r6, pc}
 800678a:	1cc4      	adds	r4, r0, #3
 800678c:	f024 0403 	bic.w	r4, r4, #3
 8006790:	42a0      	cmp	r0, r4
 8006792:	d0f8      	beq.n	8006786 <sbrk_aligned+0x22>
 8006794:	1a21      	subs	r1, r4, r0
 8006796:	4628      	mov	r0, r5
 8006798:	f000 fb92 	bl	8006ec0 <_sbrk_r>
 800679c:	3001      	adds	r0, #1
 800679e:	d1f2      	bne.n	8006786 <sbrk_aligned+0x22>
 80067a0:	e7ef      	b.n	8006782 <sbrk_aligned+0x1e>
 80067a2:	bf00      	nop
 80067a4:	20000e6c 	.word	0x20000e6c

080067a8 <_malloc_r>:
 80067a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067ac:	1ccd      	adds	r5, r1, #3
 80067ae:	f025 0503 	bic.w	r5, r5, #3
 80067b2:	3508      	adds	r5, #8
 80067b4:	2d0c      	cmp	r5, #12
 80067b6:	bf38      	it	cc
 80067b8:	250c      	movcc	r5, #12
 80067ba:	2d00      	cmp	r5, #0
 80067bc:	4606      	mov	r6, r0
 80067be:	db01      	blt.n	80067c4 <_malloc_r+0x1c>
 80067c0:	42a9      	cmp	r1, r5
 80067c2:	d904      	bls.n	80067ce <_malloc_r+0x26>
 80067c4:	230c      	movs	r3, #12
 80067c6:	6033      	str	r3, [r6, #0]
 80067c8:	2000      	movs	r0, #0
 80067ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80068a4 <_malloc_r+0xfc>
 80067d2:	f000 f869 	bl	80068a8 <__malloc_lock>
 80067d6:	f8d8 3000 	ldr.w	r3, [r8]
 80067da:	461c      	mov	r4, r3
 80067dc:	bb44      	cbnz	r4, 8006830 <_malloc_r+0x88>
 80067de:	4629      	mov	r1, r5
 80067e0:	4630      	mov	r0, r6
 80067e2:	f7ff ffbf 	bl	8006764 <sbrk_aligned>
 80067e6:	1c43      	adds	r3, r0, #1
 80067e8:	4604      	mov	r4, r0
 80067ea:	d158      	bne.n	800689e <_malloc_r+0xf6>
 80067ec:	f8d8 4000 	ldr.w	r4, [r8]
 80067f0:	4627      	mov	r7, r4
 80067f2:	2f00      	cmp	r7, #0
 80067f4:	d143      	bne.n	800687e <_malloc_r+0xd6>
 80067f6:	2c00      	cmp	r4, #0
 80067f8:	d04b      	beq.n	8006892 <_malloc_r+0xea>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	4639      	mov	r1, r7
 80067fe:	4630      	mov	r0, r6
 8006800:	eb04 0903 	add.w	r9, r4, r3
 8006804:	f000 fb5c 	bl	8006ec0 <_sbrk_r>
 8006808:	4581      	cmp	r9, r0
 800680a:	d142      	bne.n	8006892 <_malloc_r+0xea>
 800680c:	6821      	ldr	r1, [r4, #0]
 800680e:	1a6d      	subs	r5, r5, r1
 8006810:	4629      	mov	r1, r5
 8006812:	4630      	mov	r0, r6
 8006814:	f7ff ffa6 	bl	8006764 <sbrk_aligned>
 8006818:	3001      	adds	r0, #1
 800681a:	d03a      	beq.n	8006892 <_malloc_r+0xea>
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	442b      	add	r3, r5
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	f8d8 3000 	ldr.w	r3, [r8]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	bb62      	cbnz	r2, 8006884 <_malloc_r+0xdc>
 800682a:	f8c8 7000 	str.w	r7, [r8]
 800682e:	e00f      	b.n	8006850 <_malloc_r+0xa8>
 8006830:	6822      	ldr	r2, [r4, #0]
 8006832:	1b52      	subs	r2, r2, r5
 8006834:	d420      	bmi.n	8006878 <_malloc_r+0xd0>
 8006836:	2a0b      	cmp	r2, #11
 8006838:	d917      	bls.n	800686a <_malloc_r+0xc2>
 800683a:	1961      	adds	r1, r4, r5
 800683c:	42a3      	cmp	r3, r4
 800683e:	6025      	str	r5, [r4, #0]
 8006840:	bf18      	it	ne
 8006842:	6059      	strne	r1, [r3, #4]
 8006844:	6863      	ldr	r3, [r4, #4]
 8006846:	bf08      	it	eq
 8006848:	f8c8 1000 	streq.w	r1, [r8]
 800684c:	5162      	str	r2, [r4, r5]
 800684e:	604b      	str	r3, [r1, #4]
 8006850:	4630      	mov	r0, r6
 8006852:	f000 f82f 	bl	80068b4 <__malloc_unlock>
 8006856:	f104 000b 	add.w	r0, r4, #11
 800685a:	1d23      	adds	r3, r4, #4
 800685c:	f020 0007 	bic.w	r0, r0, #7
 8006860:	1ac2      	subs	r2, r0, r3
 8006862:	bf1c      	itt	ne
 8006864:	1a1b      	subne	r3, r3, r0
 8006866:	50a3      	strne	r3, [r4, r2]
 8006868:	e7af      	b.n	80067ca <_malloc_r+0x22>
 800686a:	6862      	ldr	r2, [r4, #4]
 800686c:	42a3      	cmp	r3, r4
 800686e:	bf0c      	ite	eq
 8006870:	f8c8 2000 	streq.w	r2, [r8]
 8006874:	605a      	strne	r2, [r3, #4]
 8006876:	e7eb      	b.n	8006850 <_malloc_r+0xa8>
 8006878:	4623      	mov	r3, r4
 800687a:	6864      	ldr	r4, [r4, #4]
 800687c:	e7ae      	b.n	80067dc <_malloc_r+0x34>
 800687e:	463c      	mov	r4, r7
 8006880:	687f      	ldr	r7, [r7, #4]
 8006882:	e7b6      	b.n	80067f2 <_malloc_r+0x4a>
 8006884:	461a      	mov	r2, r3
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	42a3      	cmp	r3, r4
 800688a:	d1fb      	bne.n	8006884 <_malloc_r+0xdc>
 800688c:	2300      	movs	r3, #0
 800688e:	6053      	str	r3, [r2, #4]
 8006890:	e7de      	b.n	8006850 <_malloc_r+0xa8>
 8006892:	230c      	movs	r3, #12
 8006894:	6033      	str	r3, [r6, #0]
 8006896:	4630      	mov	r0, r6
 8006898:	f000 f80c 	bl	80068b4 <__malloc_unlock>
 800689c:	e794      	b.n	80067c8 <_malloc_r+0x20>
 800689e:	6005      	str	r5, [r0, #0]
 80068a0:	e7d6      	b.n	8006850 <_malloc_r+0xa8>
 80068a2:	bf00      	nop
 80068a4:	20000e70 	.word	0x20000e70

080068a8 <__malloc_lock>:
 80068a8:	4801      	ldr	r0, [pc, #4]	@ (80068b0 <__malloc_lock+0x8>)
 80068aa:	f7ff bf0f 	b.w	80066cc <__retarget_lock_acquire_recursive>
 80068ae:	bf00      	nop
 80068b0:	20000e68 	.word	0x20000e68

080068b4 <__malloc_unlock>:
 80068b4:	4801      	ldr	r0, [pc, #4]	@ (80068bc <__malloc_unlock+0x8>)
 80068b6:	f7ff bf0a 	b.w	80066ce <__retarget_lock_release_recursive>
 80068ba:	bf00      	nop
 80068bc:	20000e68 	.word	0x20000e68

080068c0 <__ssputs_r>:
 80068c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c4:	688e      	ldr	r6, [r1, #8]
 80068c6:	461f      	mov	r7, r3
 80068c8:	42be      	cmp	r6, r7
 80068ca:	680b      	ldr	r3, [r1, #0]
 80068cc:	4682      	mov	sl, r0
 80068ce:	460c      	mov	r4, r1
 80068d0:	4690      	mov	r8, r2
 80068d2:	d82d      	bhi.n	8006930 <__ssputs_r+0x70>
 80068d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80068dc:	d026      	beq.n	800692c <__ssputs_r+0x6c>
 80068de:	6965      	ldr	r5, [r4, #20]
 80068e0:	6909      	ldr	r1, [r1, #16]
 80068e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068e6:	eba3 0901 	sub.w	r9, r3, r1
 80068ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068ee:	1c7b      	adds	r3, r7, #1
 80068f0:	444b      	add	r3, r9
 80068f2:	106d      	asrs	r5, r5, #1
 80068f4:	429d      	cmp	r5, r3
 80068f6:	bf38      	it	cc
 80068f8:	461d      	movcc	r5, r3
 80068fa:	0553      	lsls	r3, r2, #21
 80068fc:	d527      	bpl.n	800694e <__ssputs_r+0x8e>
 80068fe:	4629      	mov	r1, r5
 8006900:	f7ff ff52 	bl	80067a8 <_malloc_r>
 8006904:	4606      	mov	r6, r0
 8006906:	b360      	cbz	r0, 8006962 <__ssputs_r+0xa2>
 8006908:	6921      	ldr	r1, [r4, #16]
 800690a:	464a      	mov	r2, r9
 800690c:	f000 fae8 	bl	8006ee0 <memcpy>
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800691a:	81a3      	strh	r3, [r4, #12]
 800691c:	6126      	str	r6, [r4, #16]
 800691e:	6165      	str	r5, [r4, #20]
 8006920:	444e      	add	r6, r9
 8006922:	eba5 0509 	sub.w	r5, r5, r9
 8006926:	6026      	str	r6, [r4, #0]
 8006928:	60a5      	str	r5, [r4, #8]
 800692a:	463e      	mov	r6, r7
 800692c:	42be      	cmp	r6, r7
 800692e:	d900      	bls.n	8006932 <__ssputs_r+0x72>
 8006930:	463e      	mov	r6, r7
 8006932:	6820      	ldr	r0, [r4, #0]
 8006934:	4632      	mov	r2, r6
 8006936:	4641      	mov	r1, r8
 8006938:	f000 faa8 	bl	8006e8c <memmove>
 800693c:	68a3      	ldr	r3, [r4, #8]
 800693e:	1b9b      	subs	r3, r3, r6
 8006940:	60a3      	str	r3, [r4, #8]
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	4433      	add	r3, r6
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	2000      	movs	r0, #0
 800694a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694e:	462a      	mov	r2, r5
 8006950:	f000 fad4 	bl	8006efc <_realloc_r>
 8006954:	4606      	mov	r6, r0
 8006956:	2800      	cmp	r0, #0
 8006958:	d1e0      	bne.n	800691c <__ssputs_r+0x5c>
 800695a:	6921      	ldr	r1, [r4, #16]
 800695c:	4650      	mov	r0, sl
 800695e:	f7ff feb7 	bl	80066d0 <_free_r>
 8006962:	230c      	movs	r3, #12
 8006964:	f8ca 3000 	str.w	r3, [sl]
 8006968:	89a3      	ldrh	r3, [r4, #12]
 800696a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800696e:	81a3      	strh	r3, [r4, #12]
 8006970:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006974:	e7e9      	b.n	800694a <__ssputs_r+0x8a>
	...

08006978 <_svfiprintf_r>:
 8006978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697c:	4698      	mov	r8, r3
 800697e:	898b      	ldrh	r3, [r1, #12]
 8006980:	061b      	lsls	r3, r3, #24
 8006982:	b09d      	sub	sp, #116	@ 0x74
 8006984:	4607      	mov	r7, r0
 8006986:	460d      	mov	r5, r1
 8006988:	4614      	mov	r4, r2
 800698a:	d510      	bpl.n	80069ae <_svfiprintf_r+0x36>
 800698c:	690b      	ldr	r3, [r1, #16]
 800698e:	b973      	cbnz	r3, 80069ae <_svfiprintf_r+0x36>
 8006990:	2140      	movs	r1, #64	@ 0x40
 8006992:	f7ff ff09 	bl	80067a8 <_malloc_r>
 8006996:	6028      	str	r0, [r5, #0]
 8006998:	6128      	str	r0, [r5, #16]
 800699a:	b930      	cbnz	r0, 80069aa <_svfiprintf_r+0x32>
 800699c:	230c      	movs	r3, #12
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069a4:	b01d      	add	sp, #116	@ 0x74
 80069a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069aa:	2340      	movs	r3, #64	@ 0x40
 80069ac:	616b      	str	r3, [r5, #20]
 80069ae:	2300      	movs	r3, #0
 80069b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80069b2:	2320      	movs	r3, #32
 80069b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80069bc:	2330      	movs	r3, #48	@ 0x30
 80069be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006b5c <_svfiprintf_r+0x1e4>
 80069c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069c6:	f04f 0901 	mov.w	r9, #1
 80069ca:	4623      	mov	r3, r4
 80069cc:	469a      	mov	sl, r3
 80069ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069d2:	b10a      	cbz	r2, 80069d8 <_svfiprintf_r+0x60>
 80069d4:	2a25      	cmp	r2, #37	@ 0x25
 80069d6:	d1f9      	bne.n	80069cc <_svfiprintf_r+0x54>
 80069d8:	ebba 0b04 	subs.w	fp, sl, r4
 80069dc:	d00b      	beq.n	80069f6 <_svfiprintf_r+0x7e>
 80069de:	465b      	mov	r3, fp
 80069e0:	4622      	mov	r2, r4
 80069e2:	4629      	mov	r1, r5
 80069e4:	4638      	mov	r0, r7
 80069e6:	f7ff ff6b 	bl	80068c0 <__ssputs_r>
 80069ea:	3001      	adds	r0, #1
 80069ec:	f000 80a7 	beq.w	8006b3e <_svfiprintf_r+0x1c6>
 80069f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069f2:	445a      	add	r2, fp
 80069f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80069f6:	f89a 3000 	ldrb.w	r3, [sl]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 809f 	beq.w	8006b3e <_svfiprintf_r+0x1c6>
 8006a00:	2300      	movs	r3, #0
 8006a02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a0a:	f10a 0a01 	add.w	sl, sl, #1
 8006a0e:	9304      	str	r3, [sp, #16]
 8006a10:	9307      	str	r3, [sp, #28]
 8006a12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a16:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a18:	4654      	mov	r4, sl
 8006a1a:	2205      	movs	r2, #5
 8006a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a20:	484e      	ldr	r0, [pc, #312]	@ (8006b5c <_svfiprintf_r+0x1e4>)
 8006a22:	f7fb fa8d 	bl	8001f40 <memchr>
 8006a26:	9a04      	ldr	r2, [sp, #16]
 8006a28:	b9d8      	cbnz	r0, 8006a62 <_svfiprintf_r+0xea>
 8006a2a:	06d0      	lsls	r0, r2, #27
 8006a2c:	bf44      	itt	mi
 8006a2e:	2320      	movmi	r3, #32
 8006a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a34:	0711      	lsls	r1, r2, #28
 8006a36:	bf44      	itt	mi
 8006a38:	232b      	movmi	r3, #43	@ 0x2b
 8006a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006a42:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a44:	d015      	beq.n	8006a72 <_svfiprintf_r+0xfa>
 8006a46:	9a07      	ldr	r2, [sp, #28]
 8006a48:	4654      	mov	r4, sl
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	f04f 0c0a 	mov.w	ip, #10
 8006a50:	4621      	mov	r1, r4
 8006a52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a56:	3b30      	subs	r3, #48	@ 0x30
 8006a58:	2b09      	cmp	r3, #9
 8006a5a:	d94b      	bls.n	8006af4 <_svfiprintf_r+0x17c>
 8006a5c:	b1b0      	cbz	r0, 8006a8c <_svfiprintf_r+0x114>
 8006a5e:	9207      	str	r2, [sp, #28]
 8006a60:	e014      	b.n	8006a8c <_svfiprintf_r+0x114>
 8006a62:	eba0 0308 	sub.w	r3, r0, r8
 8006a66:	fa09 f303 	lsl.w	r3, r9, r3
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	9304      	str	r3, [sp, #16]
 8006a6e:	46a2      	mov	sl, r4
 8006a70:	e7d2      	b.n	8006a18 <_svfiprintf_r+0xa0>
 8006a72:	9b03      	ldr	r3, [sp, #12]
 8006a74:	1d19      	adds	r1, r3, #4
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	9103      	str	r1, [sp, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	bfbb      	ittet	lt
 8006a7e:	425b      	neglt	r3, r3
 8006a80:	f042 0202 	orrlt.w	r2, r2, #2
 8006a84:	9307      	strge	r3, [sp, #28]
 8006a86:	9307      	strlt	r3, [sp, #28]
 8006a88:	bfb8      	it	lt
 8006a8a:	9204      	strlt	r2, [sp, #16]
 8006a8c:	7823      	ldrb	r3, [r4, #0]
 8006a8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a90:	d10a      	bne.n	8006aa8 <_svfiprintf_r+0x130>
 8006a92:	7863      	ldrb	r3, [r4, #1]
 8006a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a96:	d132      	bne.n	8006afe <_svfiprintf_r+0x186>
 8006a98:	9b03      	ldr	r3, [sp, #12]
 8006a9a:	1d1a      	adds	r2, r3, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	9203      	str	r2, [sp, #12]
 8006aa0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006aa4:	3402      	adds	r4, #2
 8006aa6:	9305      	str	r3, [sp, #20]
 8006aa8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006b6c <_svfiprintf_r+0x1f4>
 8006aac:	7821      	ldrb	r1, [r4, #0]
 8006aae:	2203      	movs	r2, #3
 8006ab0:	4650      	mov	r0, sl
 8006ab2:	f7fb fa45 	bl	8001f40 <memchr>
 8006ab6:	b138      	cbz	r0, 8006ac8 <_svfiprintf_r+0x150>
 8006ab8:	9b04      	ldr	r3, [sp, #16]
 8006aba:	eba0 000a 	sub.w	r0, r0, sl
 8006abe:	2240      	movs	r2, #64	@ 0x40
 8006ac0:	4082      	lsls	r2, r0
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	3401      	adds	r4, #1
 8006ac6:	9304      	str	r3, [sp, #16]
 8006ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006acc:	4824      	ldr	r0, [pc, #144]	@ (8006b60 <_svfiprintf_r+0x1e8>)
 8006ace:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ad2:	2206      	movs	r2, #6
 8006ad4:	f7fb fa34 	bl	8001f40 <memchr>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d036      	beq.n	8006b4a <_svfiprintf_r+0x1d2>
 8006adc:	4b21      	ldr	r3, [pc, #132]	@ (8006b64 <_svfiprintf_r+0x1ec>)
 8006ade:	bb1b      	cbnz	r3, 8006b28 <_svfiprintf_r+0x1b0>
 8006ae0:	9b03      	ldr	r3, [sp, #12]
 8006ae2:	3307      	adds	r3, #7
 8006ae4:	f023 0307 	bic.w	r3, r3, #7
 8006ae8:	3308      	adds	r3, #8
 8006aea:	9303      	str	r3, [sp, #12]
 8006aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aee:	4433      	add	r3, r6
 8006af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006af2:	e76a      	b.n	80069ca <_svfiprintf_r+0x52>
 8006af4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006af8:	460c      	mov	r4, r1
 8006afa:	2001      	movs	r0, #1
 8006afc:	e7a8      	b.n	8006a50 <_svfiprintf_r+0xd8>
 8006afe:	2300      	movs	r3, #0
 8006b00:	3401      	adds	r4, #1
 8006b02:	9305      	str	r3, [sp, #20]
 8006b04:	4619      	mov	r1, r3
 8006b06:	f04f 0c0a 	mov.w	ip, #10
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b10:	3a30      	subs	r2, #48	@ 0x30
 8006b12:	2a09      	cmp	r2, #9
 8006b14:	d903      	bls.n	8006b1e <_svfiprintf_r+0x1a6>
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0c6      	beq.n	8006aa8 <_svfiprintf_r+0x130>
 8006b1a:	9105      	str	r1, [sp, #20]
 8006b1c:	e7c4      	b.n	8006aa8 <_svfiprintf_r+0x130>
 8006b1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b22:	4604      	mov	r4, r0
 8006b24:	2301      	movs	r3, #1
 8006b26:	e7f0      	b.n	8006b0a <_svfiprintf_r+0x192>
 8006b28:	ab03      	add	r3, sp, #12
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	462a      	mov	r2, r5
 8006b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b68 <_svfiprintf_r+0x1f0>)
 8006b30:	a904      	add	r1, sp, #16
 8006b32:	4638      	mov	r0, r7
 8006b34:	f3af 8000 	nop.w
 8006b38:	1c42      	adds	r2, r0, #1
 8006b3a:	4606      	mov	r6, r0
 8006b3c:	d1d6      	bne.n	8006aec <_svfiprintf_r+0x174>
 8006b3e:	89ab      	ldrh	r3, [r5, #12]
 8006b40:	065b      	lsls	r3, r3, #25
 8006b42:	f53f af2d 	bmi.w	80069a0 <_svfiprintf_r+0x28>
 8006b46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b48:	e72c      	b.n	80069a4 <_svfiprintf_r+0x2c>
 8006b4a:	ab03      	add	r3, sp, #12
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	462a      	mov	r2, r5
 8006b50:	4b05      	ldr	r3, [pc, #20]	@ (8006b68 <_svfiprintf_r+0x1f0>)
 8006b52:	a904      	add	r1, sp, #16
 8006b54:	4638      	mov	r0, r7
 8006b56:	f000 f879 	bl	8006c4c <_printf_i>
 8006b5a:	e7ed      	b.n	8006b38 <_svfiprintf_r+0x1c0>
 8006b5c:	08007034 	.word	0x08007034
 8006b60:	0800703e 	.word	0x0800703e
 8006b64:	00000000 	.word	0x00000000
 8006b68:	080068c1 	.word	0x080068c1
 8006b6c:	0800703a 	.word	0x0800703a

08006b70 <_printf_common>:
 8006b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b74:	4616      	mov	r6, r2
 8006b76:	4698      	mov	r8, r3
 8006b78:	688a      	ldr	r2, [r1, #8]
 8006b7a:	690b      	ldr	r3, [r1, #16]
 8006b7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b80:	4293      	cmp	r3, r2
 8006b82:	bfb8      	it	lt
 8006b84:	4613      	movlt	r3, r2
 8006b86:	6033      	str	r3, [r6, #0]
 8006b88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b8c:	4607      	mov	r7, r0
 8006b8e:	460c      	mov	r4, r1
 8006b90:	b10a      	cbz	r2, 8006b96 <_printf_common+0x26>
 8006b92:	3301      	adds	r3, #1
 8006b94:	6033      	str	r3, [r6, #0]
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	0699      	lsls	r1, r3, #26
 8006b9a:	bf42      	ittt	mi
 8006b9c:	6833      	ldrmi	r3, [r6, #0]
 8006b9e:	3302      	addmi	r3, #2
 8006ba0:	6033      	strmi	r3, [r6, #0]
 8006ba2:	6825      	ldr	r5, [r4, #0]
 8006ba4:	f015 0506 	ands.w	r5, r5, #6
 8006ba8:	d106      	bne.n	8006bb8 <_printf_common+0x48>
 8006baa:	f104 0a19 	add.w	sl, r4, #25
 8006bae:	68e3      	ldr	r3, [r4, #12]
 8006bb0:	6832      	ldr	r2, [r6, #0]
 8006bb2:	1a9b      	subs	r3, r3, r2
 8006bb4:	42ab      	cmp	r3, r5
 8006bb6:	dc26      	bgt.n	8006c06 <_printf_common+0x96>
 8006bb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006bbc:	6822      	ldr	r2, [r4, #0]
 8006bbe:	3b00      	subs	r3, #0
 8006bc0:	bf18      	it	ne
 8006bc2:	2301      	movne	r3, #1
 8006bc4:	0692      	lsls	r2, r2, #26
 8006bc6:	d42b      	bmi.n	8006c20 <_printf_common+0xb0>
 8006bc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bcc:	4641      	mov	r1, r8
 8006bce:	4638      	mov	r0, r7
 8006bd0:	47c8      	blx	r9
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	d01e      	beq.n	8006c14 <_printf_common+0xa4>
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	6922      	ldr	r2, [r4, #16]
 8006bda:	f003 0306 	and.w	r3, r3, #6
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	bf02      	ittt	eq
 8006be2:	68e5      	ldreq	r5, [r4, #12]
 8006be4:	6833      	ldreq	r3, [r6, #0]
 8006be6:	1aed      	subeq	r5, r5, r3
 8006be8:	68a3      	ldr	r3, [r4, #8]
 8006bea:	bf0c      	ite	eq
 8006bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bf0:	2500      	movne	r5, #0
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	bfc4      	itt	gt
 8006bf6:	1a9b      	subgt	r3, r3, r2
 8006bf8:	18ed      	addgt	r5, r5, r3
 8006bfa:	2600      	movs	r6, #0
 8006bfc:	341a      	adds	r4, #26
 8006bfe:	42b5      	cmp	r5, r6
 8006c00:	d11a      	bne.n	8006c38 <_printf_common+0xc8>
 8006c02:	2000      	movs	r0, #0
 8006c04:	e008      	b.n	8006c18 <_printf_common+0xa8>
 8006c06:	2301      	movs	r3, #1
 8006c08:	4652      	mov	r2, sl
 8006c0a:	4641      	mov	r1, r8
 8006c0c:	4638      	mov	r0, r7
 8006c0e:	47c8      	blx	r9
 8006c10:	3001      	adds	r0, #1
 8006c12:	d103      	bne.n	8006c1c <_printf_common+0xac>
 8006c14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1c:	3501      	adds	r5, #1
 8006c1e:	e7c6      	b.n	8006bae <_printf_common+0x3e>
 8006c20:	18e1      	adds	r1, r4, r3
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	2030      	movs	r0, #48	@ 0x30
 8006c26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c2a:	4422      	add	r2, r4
 8006c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c34:	3302      	adds	r3, #2
 8006c36:	e7c7      	b.n	8006bc8 <_printf_common+0x58>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	4641      	mov	r1, r8
 8006c3e:	4638      	mov	r0, r7
 8006c40:	47c8      	blx	r9
 8006c42:	3001      	adds	r0, #1
 8006c44:	d0e6      	beq.n	8006c14 <_printf_common+0xa4>
 8006c46:	3601      	adds	r6, #1
 8006c48:	e7d9      	b.n	8006bfe <_printf_common+0x8e>
	...

08006c4c <_printf_i>:
 8006c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c50:	7e0f      	ldrb	r7, [r1, #24]
 8006c52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c54:	2f78      	cmp	r7, #120	@ 0x78
 8006c56:	4691      	mov	r9, r2
 8006c58:	4680      	mov	r8, r0
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	469a      	mov	sl, r3
 8006c5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c62:	d807      	bhi.n	8006c74 <_printf_i+0x28>
 8006c64:	2f62      	cmp	r7, #98	@ 0x62
 8006c66:	d80a      	bhi.n	8006c7e <_printf_i+0x32>
 8006c68:	2f00      	cmp	r7, #0
 8006c6a:	f000 80d2 	beq.w	8006e12 <_printf_i+0x1c6>
 8006c6e:	2f58      	cmp	r7, #88	@ 0x58
 8006c70:	f000 80b9 	beq.w	8006de6 <_printf_i+0x19a>
 8006c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c7c:	e03a      	b.n	8006cf4 <_printf_i+0xa8>
 8006c7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c82:	2b15      	cmp	r3, #21
 8006c84:	d8f6      	bhi.n	8006c74 <_printf_i+0x28>
 8006c86:	a101      	add	r1, pc, #4	@ (adr r1, 8006c8c <_printf_i+0x40>)
 8006c88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c8c:	08006ce5 	.word	0x08006ce5
 8006c90:	08006cf9 	.word	0x08006cf9
 8006c94:	08006c75 	.word	0x08006c75
 8006c98:	08006c75 	.word	0x08006c75
 8006c9c:	08006c75 	.word	0x08006c75
 8006ca0:	08006c75 	.word	0x08006c75
 8006ca4:	08006cf9 	.word	0x08006cf9
 8006ca8:	08006c75 	.word	0x08006c75
 8006cac:	08006c75 	.word	0x08006c75
 8006cb0:	08006c75 	.word	0x08006c75
 8006cb4:	08006c75 	.word	0x08006c75
 8006cb8:	08006df9 	.word	0x08006df9
 8006cbc:	08006d23 	.word	0x08006d23
 8006cc0:	08006db3 	.word	0x08006db3
 8006cc4:	08006c75 	.word	0x08006c75
 8006cc8:	08006c75 	.word	0x08006c75
 8006ccc:	08006e1b 	.word	0x08006e1b
 8006cd0:	08006c75 	.word	0x08006c75
 8006cd4:	08006d23 	.word	0x08006d23
 8006cd8:	08006c75 	.word	0x08006c75
 8006cdc:	08006c75 	.word	0x08006c75
 8006ce0:	08006dbb 	.word	0x08006dbb
 8006ce4:	6833      	ldr	r3, [r6, #0]
 8006ce6:	1d1a      	adds	r2, r3, #4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6032      	str	r2, [r6, #0]
 8006cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e09d      	b.n	8006e34 <_printf_i+0x1e8>
 8006cf8:	6833      	ldr	r3, [r6, #0]
 8006cfa:	6820      	ldr	r0, [r4, #0]
 8006cfc:	1d19      	adds	r1, r3, #4
 8006cfe:	6031      	str	r1, [r6, #0]
 8006d00:	0606      	lsls	r6, r0, #24
 8006d02:	d501      	bpl.n	8006d08 <_printf_i+0xbc>
 8006d04:	681d      	ldr	r5, [r3, #0]
 8006d06:	e003      	b.n	8006d10 <_printf_i+0xc4>
 8006d08:	0645      	lsls	r5, r0, #25
 8006d0a:	d5fb      	bpl.n	8006d04 <_printf_i+0xb8>
 8006d0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d10:	2d00      	cmp	r5, #0
 8006d12:	da03      	bge.n	8006d1c <_printf_i+0xd0>
 8006d14:	232d      	movs	r3, #45	@ 0x2d
 8006d16:	426d      	negs	r5, r5
 8006d18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d1c:	4859      	ldr	r0, [pc, #356]	@ (8006e84 <_printf_i+0x238>)
 8006d1e:	230a      	movs	r3, #10
 8006d20:	e011      	b.n	8006d46 <_printf_i+0xfa>
 8006d22:	6821      	ldr	r1, [r4, #0]
 8006d24:	6833      	ldr	r3, [r6, #0]
 8006d26:	0608      	lsls	r0, r1, #24
 8006d28:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d2c:	d402      	bmi.n	8006d34 <_printf_i+0xe8>
 8006d2e:	0649      	lsls	r1, r1, #25
 8006d30:	bf48      	it	mi
 8006d32:	b2ad      	uxthmi	r5, r5
 8006d34:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d36:	4853      	ldr	r0, [pc, #332]	@ (8006e84 <_printf_i+0x238>)
 8006d38:	6033      	str	r3, [r6, #0]
 8006d3a:	bf14      	ite	ne
 8006d3c:	230a      	movne	r3, #10
 8006d3e:	2308      	moveq	r3, #8
 8006d40:	2100      	movs	r1, #0
 8006d42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d46:	6866      	ldr	r6, [r4, #4]
 8006d48:	60a6      	str	r6, [r4, #8]
 8006d4a:	2e00      	cmp	r6, #0
 8006d4c:	bfa2      	ittt	ge
 8006d4e:	6821      	ldrge	r1, [r4, #0]
 8006d50:	f021 0104 	bicge.w	r1, r1, #4
 8006d54:	6021      	strge	r1, [r4, #0]
 8006d56:	b90d      	cbnz	r5, 8006d5c <_printf_i+0x110>
 8006d58:	2e00      	cmp	r6, #0
 8006d5a:	d04b      	beq.n	8006df4 <_printf_i+0x1a8>
 8006d5c:	4616      	mov	r6, r2
 8006d5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d62:	fb03 5711 	mls	r7, r3, r1, r5
 8006d66:	5dc7      	ldrb	r7, [r0, r7]
 8006d68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d6c:	462f      	mov	r7, r5
 8006d6e:	42bb      	cmp	r3, r7
 8006d70:	460d      	mov	r5, r1
 8006d72:	d9f4      	bls.n	8006d5e <_printf_i+0x112>
 8006d74:	2b08      	cmp	r3, #8
 8006d76:	d10b      	bne.n	8006d90 <_printf_i+0x144>
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	07df      	lsls	r7, r3, #31
 8006d7c:	d508      	bpl.n	8006d90 <_printf_i+0x144>
 8006d7e:	6923      	ldr	r3, [r4, #16]
 8006d80:	6861      	ldr	r1, [r4, #4]
 8006d82:	4299      	cmp	r1, r3
 8006d84:	bfde      	ittt	le
 8006d86:	2330      	movle	r3, #48	@ 0x30
 8006d88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d8c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006d90:	1b92      	subs	r2, r2, r6
 8006d92:	6122      	str	r2, [r4, #16]
 8006d94:	f8cd a000 	str.w	sl, [sp]
 8006d98:	464b      	mov	r3, r9
 8006d9a:	aa03      	add	r2, sp, #12
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	4640      	mov	r0, r8
 8006da0:	f7ff fee6 	bl	8006b70 <_printf_common>
 8006da4:	3001      	adds	r0, #1
 8006da6:	d14a      	bne.n	8006e3e <_printf_i+0x1f2>
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006dac:	b004      	add	sp, #16
 8006dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	f043 0320 	orr.w	r3, r3, #32
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	4833      	ldr	r0, [pc, #204]	@ (8006e88 <_printf_i+0x23c>)
 8006dbc:	2778      	movs	r7, #120	@ 0x78
 8006dbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	6831      	ldr	r1, [r6, #0]
 8006dc6:	061f      	lsls	r7, r3, #24
 8006dc8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006dcc:	d402      	bmi.n	8006dd4 <_printf_i+0x188>
 8006dce:	065f      	lsls	r7, r3, #25
 8006dd0:	bf48      	it	mi
 8006dd2:	b2ad      	uxthmi	r5, r5
 8006dd4:	6031      	str	r1, [r6, #0]
 8006dd6:	07d9      	lsls	r1, r3, #31
 8006dd8:	bf44      	itt	mi
 8006dda:	f043 0320 	orrmi.w	r3, r3, #32
 8006dde:	6023      	strmi	r3, [r4, #0]
 8006de0:	b11d      	cbz	r5, 8006dea <_printf_i+0x19e>
 8006de2:	2310      	movs	r3, #16
 8006de4:	e7ac      	b.n	8006d40 <_printf_i+0xf4>
 8006de6:	4827      	ldr	r0, [pc, #156]	@ (8006e84 <_printf_i+0x238>)
 8006de8:	e7e9      	b.n	8006dbe <_printf_i+0x172>
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	f023 0320 	bic.w	r3, r3, #32
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	e7f6      	b.n	8006de2 <_printf_i+0x196>
 8006df4:	4616      	mov	r6, r2
 8006df6:	e7bd      	b.n	8006d74 <_printf_i+0x128>
 8006df8:	6833      	ldr	r3, [r6, #0]
 8006dfa:	6825      	ldr	r5, [r4, #0]
 8006dfc:	6961      	ldr	r1, [r4, #20]
 8006dfe:	1d18      	adds	r0, r3, #4
 8006e00:	6030      	str	r0, [r6, #0]
 8006e02:	062e      	lsls	r6, r5, #24
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	d501      	bpl.n	8006e0c <_printf_i+0x1c0>
 8006e08:	6019      	str	r1, [r3, #0]
 8006e0a:	e002      	b.n	8006e12 <_printf_i+0x1c6>
 8006e0c:	0668      	lsls	r0, r5, #25
 8006e0e:	d5fb      	bpl.n	8006e08 <_printf_i+0x1bc>
 8006e10:	8019      	strh	r1, [r3, #0]
 8006e12:	2300      	movs	r3, #0
 8006e14:	6123      	str	r3, [r4, #16]
 8006e16:	4616      	mov	r6, r2
 8006e18:	e7bc      	b.n	8006d94 <_printf_i+0x148>
 8006e1a:	6833      	ldr	r3, [r6, #0]
 8006e1c:	1d1a      	adds	r2, r3, #4
 8006e1e:	6032      	str	r2, [r6, #0]
 8006e20:	681e      	ldr	r6, [r3, #0]
 8006e22:	6862      	ldr	r2, [r4, #4]
 8006e24:	2100      	movs	r1, #0
 8006e26:	4630      	mov	r0, r6
 8006e28:	f7fb f88a 	bl	8001f40 <memchr>
 8006e2c:	b108      	cbz	r0, 8006e32 <_printf_i+0x1e6>
 8006e2e:	1b80      	subs	r0, r0, r6
 8006e30:	6060      	str	r0, [r4, #4]
 8006e32:	6863      	ldr	r3, [r4, #4]
 8006e34:	6123      	str	r3, [r4, #16]
 8006e36:	2300      	movs	r3, #0
 8006e38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e3c:	e7aa      	b.n	8006d94 <_printf_i+0x148>
 8006e3e:	6923      	ldr	r3, [r4, #16]
 8006e40:	4632      	mov	r2, r6
 8006e42:	4649      	mov	r1, r9
 8006e44:	4640      	mov	r0, r8
 8006e46:	47d0      	blx	sl
 8006e48:	3001      	adds	r0, #1
 8006e4a:	d0ad      	beq.n	8006da8 <_printf_i+0x15c>
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	079b      	lsls	r3, r3, #30
 8006e50:	d413      	bmi.n	8006e7a <_printf_i+0x22e>
 8006e52:	68e0      	ldr	r0, [r4, #12]
 8006e54:	9b03      	ldr	r3, [sp, #12]
 8006e56:	4298      	cmp	r0, r3
 8006e58:	bfb8      	it	lt
 8006e5a:	4618      	movlt	r0, r3
 8006e5c:	e7a6      	b.n	8006dac <_printf_i+0x160>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	4632      	mov	r2, r6
 8006e62:	4649      	mov	r1, r9
 8006e64:	4640      	mov	r0, r8
 8006e66:	47d0      	blx	sl
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d09d      	beq.n	8006da8 <_printf_i+0x15c>
 8006e6c:	3501      	adds	r5, #1
 8006e6e:	68e3      	ldr	r3, [r4, #12]
 8006e70:	9903      	ldr	r1, [sp, #12]
 8006e72:	1a5b      	subs	r3, r3, r1
 8006e74:	42ab      	cmp	r3, r5
 8006e76:	dcf2      	bgt.n	8006e5e <_printf_i+0x212>
 8006e78:	e7eb      	b.n	8006e52 <_printf_i+0x206>
 8006e7a:	2500      	movs	r5, #0
 8006e7c:	f104 0619 	add.w	r6, r4, #25
 8006e80:	e7f5      	b.n	8006e6e <_printf_i+0x222>
 8006e82:	bf00      	nop
 8006e84:	08007045 	.word	0x08007045
 8006e88:	08007056 	.word	0x08007056

08006e8c <memmove>:
 8006e8c:	4288      	cmp	r0, r1
 8006e8e:	b510      	push	{r4, lr}
 8006e90:	eb01 0402 	add.w	r4, r1, r2
 8006e94:	d902      	bls.n	8006e9c <memmove+0x10>
 8006e96:	4284      	cmp	r4, r0
 8006e98:	4623      	mov	r3, r4
 8006e9a:	d807      	bhi.n	8006eac <memmove+0x20>
 8006e9c:	1e43      	subs	r3, r0, #1
 8006e9e:	42a1      	cmp	r1, r4
 8006ea0:	d008      	beq.n	8006eb4 <memmove+0x28>
 8006ea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006eaa:	e7f8      	b.n	8006e9e <memmove+0x12>
 8006eac:	4402      	add	r2, r0
 8006eae:	4601      	mov	r1, r0
 8006eb0:	428a      	cmp	r2, r1
 8006eb2:	d100      	bne.n	8006eb6 <memmove+0x2a>
 8006eb4:	bd10      	pop	{r4, pc}
 8006eb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006eba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ebe:	e7f7      	b.n	8006eb0 <memmove+0x24>

08006ec0 <_sbrk_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4d06      	ldr	r5, [pc, #24]	@ (8006edc <_sbrk_r+0x1c>)
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	4608      	mov	r0, r1
 8006eca:	602b      	str	r3, [r5, #0]
 8006ecc:	f7fc fac6 	bl	800345c <_sbrk>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d102      	bne.n	8006eda <_sbrk_r+0x1a>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	b103      	cbz	r3, 8006eda <_sbrk_r+0x1a>
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	20000e64 	.word	0x20000e64

08006ee0 <memcpy>:
 8006ee0:	440a      	add	r2, r1
 8006ee2:	4291      	cmp	r1, r2
 8006ee4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006ee8:	d100      	bne.n	8006eec <memcpy+0xc>
 8006eea:	4770      	bx	lr
 8006eec:	b510      	push	{r4, lr}
 8006eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ef6:	4291      	cmp	r1, r2
 8006ef8:	d1f9      	bne.n	8006eee <memcpy+0xe>
 8006efa:	bd10      	pop	{r4, pc}

08006efc <_realloc_r>:
 8006efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f00:	4680      	mov	r8, r0
 8006f02:	4615      	mov	r5, r2
 8006f04:	460c      	mov	r4, r1
 8006f06:	b921      	cbnz	r1, 8006f12 <_realloc_r+0x16>
 8006f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	f7ff bc4b 	b.w	80067a8 <_malloc_r>
 8006f12:	b92a      	cbnz	r2, 8006f20 <_realloc_r+0x24>
 8006f14:	f7ff fbdc 	bl	80066d0 <_free_r>
 8006f18:	2400      	movs	r4, #0
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f20:	f000 f81a 	bl	8006f58 <_malloc_usable_size_r>
 8006f24:	4285      	cmp	r5, r0
 8006f26:	4606      	mov	r6, r0
 8006f28:	d802      	bhi.n	8006f30 <_realloc_r+0x34>
 8006f2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006f2e:	d8f4      	bhi.n	8006f1a <_realloc_r+0x1e>
 8006f30:	4629      	mov	r1, r5
 8006f32:	4640      	mov	r0, r8
 8006f34:	f7ff fc38 	bl	80067a8 <_malloc_r>
 8006f38:	4607      	mov	r7, r0
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	d0ec      	beq.n	8006f18 <_realloc_r+0x1c>
 8006f3e:	42b5      	cmp	r5, r6
 8006f40:	462a      	mov	r2, r5
 8006f42:	4621      	mov	r1, r4
 8006f44:	bf28      	it	cs
 8006f46:	4632      	movcs	r2, r6
 8006f48:	f7ff ffca 	bl	8006ee0 <memcpy>
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	4640      	mov	r0, r8
 8006f50:	f7ff fbbe 	bl	80066d0 <_free_r>
 8006f54:	463c      	mov	r4, r7
 8006f56:	e7e0      	b.n	8006f1a <_realloc_r+0x1e>

08006f58 <_malloc_usable_size_r>:
 8006f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f5c:	1f18      	subs	r0, r3, #4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	bfbc      	itt	lt
 8006f62:	580b      	ldrlt	r3, [r1, r0]
 8006f64:	18c0      	addlt	r0, r0, r3
 8006f66:	4770      	bx	lr

08006f68 <_init>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	bf00      	nop
 8006f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6e:	bc08      	pop	{r3}
 8006f70:	469e      	mov	lr, r3
 8006f72:	4770      	bx	lr

08006f74 <_fini>:
 8006f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f76:	bf00      	nop
 8006f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f7a:	bc08      	pop	{r3}
 8006f7c:	469e      	mov	lr, r3
 8006f7e:	4770      	bx	lr
